

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Feb 04 19:08:47 2024

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4680
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1,noexec
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     9                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
    10                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
    11                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
    12                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    13                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    19                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    21                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    23                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    26                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    27                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	text0,global,reloc=2,class=CODE,delta=1
    29                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text2,global,reloc=2,class=CODE,delta=1
    31                           	psect	text3,global,reloc=2,class=CODE,delta=1
    32                           	psect	text4,global,reloc=2,class=CODE,delta=1
    33                           	psect	text5,global,reloc=2,class=CODE,delta=1
    34                           	psect	text6,global,reloc=2,class=CODE,delta=1
    35                           	psect	text7,global,reloc=2,class=CODE,delta=1
    36                           	psect	text8,global,reloc=2,class=CODE,delta=1
    37                           	psect	text9,global,reloc=2,class=CODE,delta=1
    38                           	psect	text10,global,reloc=2,class=CODE,delta=1
    39                           	psect	text11,global,reloc=2,class=CODE,delta=1
    40                           	psect	text12,global,reloc=2,class=CODE,delta=1
    41                           	psect	text13,global,reloc=2,class=CODE,delta=1
    42                           	psect	text14,global,reloc=2,class=CODE,delta=1
    43                           	psect	text15,global,reloc=2,class=CODE,delta=1
    44                           	psect	text16,global,reloc=2,class=CODE,delta=1
    45                           	psect	text17,global,reloc=2,class=CODE,delta=1
    46                           	psect	text18,global,reloc=2,class=CODE,delta=1
    47                           	psect	text19,global,reloc=2,class=CODE,delta=1
    48                           	psect	text20,global,reloc=2,class=CODE,delta=1
    49                           	psect	text21,global,reloc=2,class=CODE,delta=1
    50                           	psect	text22,global,reloc=2,class=CODE,delta=1
    51                           	psect	text23,global,reloc=2,class=CODE,delta=1
    52                           	psect	text24,global,reloc=2,class=CODE,delta=1
    53                           	psect	text25,global,reloc=2,class=CODE,delta=1
    54                           	psect	text26,global,reloc=2,class=CODE,delta=1
    55                           	psect	text27,global,reloc=2,class=CODE,delta=1
    56                           	psect	text28,global,reloc=2,class=CODE,delta=1
    57                           	psect	text29,global,reloc=2,class=CODE,delta=1
    58                           	psect	text30,global,reloc=2,class=CODE,delta=1
    59                           	psect	text31,global,reloc=2,class=CODE,delta=1
    60                           	psect	text32,global,reloc=2,class=CODE,delta=1
    61                           	psect	text33,global,reloc=2,class=CODE,delta=1
    62                           	psect	text34,global,reloc=2,class=CODE,delta=1
    63                           	psect	text35,global,reloc=2,class=CODE,delta=1
    64                           	psect	text36,global,reloc=2,class=CODE,delta=1
    65                           	psect	text37,global,reloc=2,class=CODE,delta=1
    66                           	psect	text38,global,reloc=2,class=CODE,delta=1
    67                           	psect	text39,global,reloc=2,class=CODE,delta=1
    68                           	psect	text40,global,reloc=2,class=CODE,delta=1
    69                           	psect	text41,global,reloc=2,class=CODE,delta=1
    70                           	psect	text42,global,reloc=2,class=CODE,delta=1
    71                           	psect	text43,global,reloc=2,class=CODE,delta=1
    72                           	psect	text44,global,reloc=2,class=CODE,delta=1
    73                           	psect	text45,global,reloc=2,class=CODE,delta=1
    74                           	psect	text46,global,reloc=2,class=CODE,delta=1
    75                           	psect	text47,global,reloc=2,class=CODE,delta=1
    76                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=2
    77                           	psect	text49,global,reloc=2,class=CODE,delta=1
    78                           	psect	text50,global,reloc=2,class=CODE,delta=1
    79                           	psect	text51,global,reloc=2,class=CODE,delta=1
    80                           	psect	text52,global,reloc=2,class=CODE,delta=1
    81                           	psect	text53,global,reloc=2,class=CODE,delta=1
    82                           	psect	text54,global,reloc=2,class=CODE,delta=1
    83                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=2
    84                           	psect	text56,global,reloc=2,class=CODE,delta=1
    85                           	psect	text57,global,reloc=2,class=CODE,delta=1
    86                           	psect	text58,global,reloc=2,class=CODE,delta=1
    87                           	psect	text59,global,reloc=2,class=CODE,delta=1
    88                           	psect	text60,global,reloc=2,class=CODE,delta=1
    89                           	psect	text61,global,reloc=2,class=CODE,delta=1
    90                           	psect	text62,global,reloc=2,class=CODE,delta=1
    91                           	psect	text63,global,reloc=2,class=CODE,delta=1
    92                           	psect	text64,global,reloc=2,class=CODE,delta=1
    93                           	psect	text65,global,reloc=2,class=CODE,delta=1
    94                           	psect	text66,global,reloc=2,class=CODE,delta=1
    95                           	psect	text67,global,reloc=2,class=CODE,delta=1
    96                           	psect	text68,global,reloc=2,class=CODE,delta=1
    97                           	psect	text69,global,reloc=2,class=CODE,delta=1
    98                           	psect	text70,global,reloc=2,class=CODE,delta=1
    99                           	psect	text71,global,reloc=2,class=CODE,delta=1
   100                           	psect	text72,global,reloc=2,class=CODE,delta=1
   101                           	psect	text73,global,reloc=2,class=CODE,delta=1
   102                           	psect	text74,global,reloc=2,class=CODE,delta=1
   103                           	psect	text75,global,reloc=2,class=CODE,delta=1
   104                           	psect	text76,global,reloc=2,class=CODE,delta=1
   105                           	psect	text77,global,reloc=2,class=CODE,delta=1
   106                           	psect	text78,global,reloc=2,class=CODE,delta=1
   107                           	psect	text79,global,reloc=2,class=CODE,delta=1
   108                           	psect	text80,global,reloc=2,class=CODE,delta=1
   109                           	psect	text81,global,reloc=2,class=CODE,delta=1
   110                           	psect	text82,global,reloc=2,class=CODE,delta=1
   111                           	psect	text83,global,reloc=2,class=CODE,delta=1
   112                           	psect	text84,global,reloc=2,class=CODE,delta=1
   113                           	psect	text85,global,reloc=2,class=CODE,delta=1
   114                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=2
   115                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=2
   116                           	psect	text88,global,reloc=2,class=CODE,delta=1
   117                           	psect	text89,global,reloc=2,class=CODE,delta=1
   118                           	psect	text90,global,reloc=2,class=CODE,delta=1
   119                           	psect	text91,global,reloc=2,class=CODE,delta=1
   120                           	psect	text92,global,reloc=2,class=CODE,delta=1
   121                           	psect	text93,global,reloc=2,class=CODE,delta=1
   122                           	psect	text94,global,reloc=2,class=CODE,delta=1
   123                           	psect	text95,global,reloc=2,class=CODE,delta=1
   124                           	psect	text96,global,reloc=2,class=CODE,delta=1
   125                           	psect	text97,global,reloc=2,class=CODE,delta=1
   126                           	psect	text98,global,reloc=2,class=CODE,delta=1
   127                           	psect	text99,global,reloc=2,class=CODE,delta=1
   128                           	psect	text100,global,reloc=2,class=CODE,delta=1
   129                           	psect	text101,global,reloc=2,class=CODE,delta=1
   130                           	psect	text102,global,reloc=2,class=CODE,delta=1
   131                           	psect	text103,global,reloc=2,class=CODE,delta=1
   132                           	psect	text104,global,reloc=2,class=CODE,delta=1
   133                           	psect	text105,global,reloc=2,class=CODE,delta=1
   134                           	psect	text106,global,reloc=2,class=CODE,delta=1
   135                           	psect	text107,global,reloc=2,class=CODE,delta=1
   136                           	psect	text108,global,reloc=2,class=CODE,delta=1
   137                           	psect	text109,global,reloc=2,class=CODE,delta=1
   138                           	psect	text110,global,reloc=2,class=CODE,delta=1
   139                           	psect	text111,global,reloc=2,class=CODE,delta=1
   140                           	psect	text112,global,reloc=2,class=CODE,delta=1,group=2
   141                           	psect	text113,global,reloc=2,class=CODE,delta=1
   142                           	psect	text114,global,reloc=2,class=CODE,delta=1,group=2
   143                           	psect	text115,global,reloc=2,class=CODE,delta=1,group=2
   144                           	psect	text116,global,reloc=2,class=CODE,delta=1,group=2
   145                           	psect	text117,global,reloc=2,class=CODE,delta=1,group=2
   146                           	psect	text118,global,reloc=2,class=CODE,delta=1,group=2
   147                           	psect	text119,global,reloc=2,class=CODE,delta=1,group=2
   148                           	psect	text120,global,reloc=2,class=CODE,delta=1,group=2
   149                           	psect	text121,global,reloc=2,class=CODE,delta=1
   150                           	psect	text122,global,reloc=2,class=CODE,delta=1
   151                           	psect	text123,global,reloc=2,class=CODE,delta=1
   152                           	psect	text124,global,reloc=2,class=CODE,delta=1
   153                           	psect	text125,global,reloc=2,class=CODE,delta=1
   154                           	psect	text126,global,reloc=2,class=CODE,delta=1
   155                           	psect	text127,global,reloc=2,class=CODE,delta=1
   156                           	psect	text128,global,reloc=2,class=CODE,delta=1
   157                           	psect	text129,global,reloc=2,class=CODE,delta=1,group=1
   158                           	psect	text130,global,reloc=2,class=CODE,delta=1,group=1
   159                           	psect	text131,global,reloc=2,class=CODE,delta=1,group=1
   160                           	psect	text132,global,reloc=2,class=CODE,delta=1
   161                           	psect	text133,global,reloc=2,class=CODE,delta=1,group=2
   162                           	psect	text134,global,reloc=2,class=CODE,delta=1
   163                           	psect	text135,global,reloc=2,class=CODE,delta=1,group=2
   164                           	psect	text136,global,reloc=2,class=CODE,delta=1
   165                           	psect	text137,global,reloc=2,class=CODE,delta=1
   166                           	psect	text138,global,reloc=2,class=CODE,delta=1
   167                           	psect	text139,global,reloc=2,class=CODE,delta=1
   168                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   169                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   170                           	psect	text141,global,reloc=2,class=CODE,delta=1
   171                           	psect	text142,global,reloc=2,class=CODE,delta=1
   172                           	psect	text143,global,reloc=2,class=CODE,delta=1
   173                           	psect	text144,global,reloc=2,class=CODE,delta=1
   174                           	psect	text145,global,reloc=2,class=CODE,delta=1
   175                           	psect	text146,global,reloc=2,class=CODE,delta=1
   176                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   177                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   178                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   179  0000                     
   180                           ; Version 1.45
   181                           ; Generated 16/11/2017 GMT
   182                           ; 
   183                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   184                           ; All rights reserved.
   185                           ; 
   186                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   187                           ; 
   188                           ; Redistribution and use in source and binary forms, with or without modification, are
   189                           ; permitted provided that the following conditions are met:
   190                           ; 
   191                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   192                           ;        conditions and the following disclaimer.
   193                           ; 
   194                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   195                           ;        of conditions and the following disclaimer in the documentation and/or other
   196                           ;        materials provided with the distribution.
   197                           ; 
   198                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   199                           ;        software without specific prior written permission.
   200                           ; 
   201                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   202                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   203                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   204                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   205                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   206                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   207                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   208                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   209                           ; 
   210                           ; 
   211                           ; Code-generator required, PIC18F4680 Definitions
   212                           ; 
   213                           ; SFR Addresses
   214  0000                     
   215                           	psect	eeprom_data
   216  F00000  00 24 00 32 FF FF FF FF 	db	0,36,0,50,255,255,255,255	;# 
   217  0000                     
   218 ;;___awdiv@quotient	offset	0
   219 ;;___awdiv@sign	offset	2
   220 ;;___awdiv@counter	offset	3
   221 ;;___awdiv@dividend	offset=-2 (param)
   222 ;;___awdiv@divisor	offset=-4 (param)
   223 ;;noteOn@channel	offset=-1 (param)
   224 ;;noteOn@pitch	offset=-2 (param)
   225 ;;noteOn@velocity	offset=-3 (param)
   226 ;;random_pitches_non_repeating@randomIndex	offset	0
   227 ;;random_pitches_non_repeating@temp	offset	1
   228 ;;random_pitches_non_repeating@i	offset	2
   229 ;;random_pitches@random_array_index	offset	0
   230 ;;random_pitches@i	offset	1
   231 ;;___awmod@sign	offset	0
   232 ;;___awmod@counter	offset	1
   233 ;;___awmod@dividend	offset=-2 (param)
   234 ;;___awmod@divisor	offset=-4 (param)
   235 ;;noteOff@channel	offset=-1 (param)
   236 ;;noteOff@pitch	offset=-2 (param)
   237 ;;noteOff@velocity	offset=-3 (param)
   238 ;;sendUSB@ii	offset	0
   239 ;;sendUSB@i	offset	1
   240 ;;sendUSB@midiMessage	offset	2
   241 ;;sendUSB@message1	offset=-1 (param)
   242 ;;sendUSB@message2	offset=-2 (param)
   243 ;;sendUSB@message3	offset=-3 (param)
   244 ;;sendOut@i	offset	0
   245 ;;sendOut@midiMessage	offset	1
   246 ;;sendOut@number_of_midi_message_bytes	offset	4
   247 ;;sendOut@message1	offset=-1 (param)
   248 ;;sendOut@message2	offset=-2 (param)
   249 ;;sendOut@message3	offset=-3 (param)
   250 ;;___lbmod@rem	offset	0
   251 ;;___lbmod@counter	offset	1
   252 ;;___lbmod@dividend	offset=-1 (param)
   253 ;;___lbmod@divisor	offset=-2 (param)
   254 ;;___lmul@product	offset	0
   255 ;;___lmul@multiplier	offset=-4 (param)
   256 ;;___lmul@multiplicand	offset=-8 (param)
   257 ;;random_pitches_non_repeating@randomIndex	offset	0
   258 ;;random_pitches_non_repeating@temp	offset	1
   259 ;;random_pitches_non_repeating@i	offset	2
   260 ;;random_pitches@random_array_index	offset	0
   261 ;;random_pitches@i	offset	1
   262 ;;___lmul@product	offset	0
   263 ;;___lmul@multiplier	offset=-4 (param)
   264 ;;___lmul@multiplicand	offset=-8 (param)
   265 ;;noteOn@channel	offset=-1 (param)
   266 ;;noteOn@pitch	offset=-2 (param)
   267 ;;noteOn@velocity	offset=-3 (param)
   268 ;;noteOff@channel	offset=-1 (param)
   269 ;;noteOff@pitch	offset=-2 (param)
   270 ;;noteOff@velocity	offset=-3 (param)
   271 ;;sendUSB@ii	offset	0
   272 ;;sendUSB@i	offset	1
   273 ;;sendUSB@midiMessage	offset	2
   274 ;;sendUSB@message1	offset=-1 (param)
   275 ;;sendUSB@message2	offset=-2 (param)
   276 ;;sendUSB@message3	offset=-3 (param)
   277 ;;sendOut@i	offset	0
   278 ;;sendOut@midiMessage	offset	1
   279 ;;sendOut@number_of_midi_message_bytes	offset	4
   280 ;;sendOut@message1	offset=-1 (param)
   281 ;;sendOut@message2	offset=-2 (param)
   282 ;;sendOut@message3	offset=-3 (param)
   283 ;;___awmod@sign	offset	0
   284 ;;___awmod@counter	offset	1
   285 ;;___awmod@dividend	offset=-2 (param)
   286 ;;___awmod@divisor	offset=-4 (param)
   287 ;;___awdiv@quotient	offset	0
   288 ;;___awdiv@sign	offset	2
   289 ;;___awdiv@counter	offset	3
   290 ;;___awdiv@dividend	offset=-2 (param)
   291 ;;___awdiv@divisor	offset=-4 (param)
   292 ;;___lbmod@rem	offset	0
   293 ;;___lbmod@counter	offset	1
   294 ;;___lbmod@dividend	offset=-1 (param)
   295 ;;___lbmod@divisor	offset=-2 (param)
   296                           
   297                           	psect	idataCOMRAM
   298  0099E3                     __pidataCOMRAM:
   299                           	opt stack 0
   300                           
   301                           ;initializer for _number_to_display
   302  0099E3  FF80               	dw	65408
   303                           
   304                           ;initializer for _NOTE_LENGTH_PULSES
   305  0099E5  0C                 	db	12
   306                           
   307                           ;initializer for _OCTAVES
   308  0099E6  03                 	db	3
   309                           
   310                           ;initializer for _which_screen
   311  0099E7  02                 	db	2
   312                           
   313                           ;initializer for _octave
   314  0099E8  04                 	db	4
   315                           
   316                           ;initializer for _velocity
   317  0099E9  7F                 	db	127
   318                           
   319                           ;initializer for _drumchannel
   320  0099EA  09                 	db	9
   321                           
   322                           	psect	idataBANK0
   323  0099D8                     __pidataBANK0:
   324                           	opt stack 0
   325                           
   326                           ;initializer for _DRUM_CC
   327  0099D8  50                 	db	80
   328  0099D9  51                 	db	81
   329  0099DA  52                 	db	82
   330  0099DB  53                 	db	83
   331  0099DC  55                 	db	85
   332  0099DD  56                 	db	86
   333  0099DE  57                 	db	87
   334  0099DF  58                 	db	88
   335                           
   336                           ;initializer for _iterator_focus
   337  0099E0  FF                 	db	255
   338                           
   339                           ;initializer for _ema_integer
   340  0099E1  32                 	db	50
   341                           
   342                           ;initializer for _BPM
   343  0099E2  78                 	db	120
   344                           
   345                           	psect	idataBANK1
   346  009940                     __pidataBANK1:
   347                           	opt stack 0
   348                           
   349                           ;initializer for _DRUM_NOTE
   350  009940  24                 	db	36
   351  009941  26                 	db	38
   352  009942  27                 	db	39
   353  009943  28                 	db	40
   354  009944  2A                 	db	42
   355  009945  2E                 	db	46
   356  009946  31                 	db	49
   357  009947  36                 	db	54
   358                           
   359                           ;initializer for _randx
   360  009948  0001               	dw	1
   361  00994A  0000               	dw	0
   362                           
   363                           ;initializer for _HYST_VAL
   364  00994C  0020               	dw	32
   365                           
   366                           ;initializer for _PRESCALER
   367  00994E  04                 	db	4
   368                           
   369                           ;initializer for _PPQN
   370  00994F  30                 	db	48
   371                           
   372                           ;initializer for _command
   373  009950  80                 	db	128
   374                           
   375                           ;initializer for _string_to_display
   376  009951  74                 	db	116
   377  009952  45                 	db	69
   378  009953  53                 	db	83
   379  009954  74                 	db	116
   380  009955  00                 	db	0
   381                           
   382                           ;initializer for _major_triad
   383  009956  00                 	db	0
   384  009957  04                 	db	4
   385  009958  07                 	db	7
   386                           
   387                           	psect	idataBANK2
   388  00907E                     __pidataBANK2:
   389                           	opt stack 0
   390                           
   391                           ;initializer for _inputPotsArray
   392  00907E  00                 	db	0
   393  00907F  46                 	db	70
   394  009080  10                 	db	16
   395  009081  00                 	db	0
   396  009082  47                 	db	71
   397  009083  11                 	db	17
   398  009084  00                 	db	0
   399  009085  48                 	db	72
   400  009086  12                 	db	18
   401  009087  00                 	db	0
   402  009088  49                 	db	73
   403  009089  13                 	db	19
   404  00908A  00                 	db	0
   405  00908B  4A                 	db	74
   406  00908C  14                 	db	20
   407  00908D  00                 	db	0
   408  00908E  4B                 	db	75
   409  00908F  15                 	db	21
   410  009090  00                 	db	0
   411  009091  4C                 	db	76
   412  009092  16                 	db	22
   413  009093  00                 	db	0
   414  009094  66                 	db	102
   415  009095  17                 	db	23
   416  009096  00                 	db	0
   417  009097  67                 	db	103
   418  009098  18                 	db	24
   419  009099  00                 	db	0
   420  00909A  68                 	db	104
   421  00909B  19                 	db	25
   422  00909C  00                 	db	0
   423  00909D  6A                 	db	106
   424  00909E  1A                 	db	26
   425  00909F  00                 	db	0
   426  0090A0  6B                 	db	107
   427  0090A1  1B                 	db	27
   428  0090A2  00                 	db	0
   429  0090A3  6C                 	db	108
   430  0090A4  1C                 	db	28
   431  0090A5  00                 	db	0
   432  0090A6  6D                 	db	109
   433  0090A7  1D                 	db	29
   434  0090A8  00                 	db	0
   435  0090A9  FD                 	db	253
   436  0090AA  FD                 	db	253
   437  0090AB  00                 	db	0
   438  0090AC  FE                 	db	254
   439  0090AD  FE                 	db	254
   440                           
   441                           ;initializer for _NOTE_LENGTH_PULSES_ARRAY
   442  0090AE  30                 	db	48
   443  0090AF  48                 	db	72
   444  0090B0  20                 	db	32
   445  0090B1  18                 	db	24
   446  0090B2  24                 	db	36
   447  0090B3  10                 	db	16
   448  0090B4  0C                 	db	12
   449  0090B5  12                 	db	18
   450  0090B6  08                 	db	8
   451  0090B7  06                 	db	6
   452  0090B8  09                 	db	9
   453  0090B9  04                 	db	4
   454                           
   455                           ;initializer for _number_of_interrupts
   456  0090BA  007D               	dw	125
   457  0090BC  0000               	dw	0
   458                           
   459                           ;initializer for _diminished_7th
   460  0090BE  00                 	db	0
   461  0090BF  03                 	db	3
   462  0090C0  06                 	db	6
   463  0090C1  09                 	db	9
   464                           
   465                           ;initializer for _half_diminished_7th
   466  0090C2  00                 	db	0
   467  0090C3  03                 	db	3
   468  0090C4  06                 	db	6
   469  0090C5  0A                 	db	10
   470                           
   471                           ;initializer for _minor_7th
   472  0090C6  00                 	db	0
   473  0090C7  03                 	db	3
   474  0090C8  07                 	db	7
   475  0090C9  0A                 	db	10
   476                           
   477                           ;initializer for _major_7th
   478  0090CA  00                 	db	0
   479  0090CB  04                 	db	4
   480  0090CC  07                 	db	7
   481  0090CD  0B                 	db	11
   482                           
   483                           ;initializer for _dominant_7th
   484  0090CE  00                 	db	0
   485  0090CF  04                 	db	4
   486  0090D0  07                 	db	7
   487  0090D1  0A                 	db	10
   488                           
   489                           ;initializer for _diminished_triad
   490  0090D2  00                 	db	0
   491  0090D3  03                 	db	3
   492  0090D4  06                 	db	6
   493                           
   494                           ;initializer for _augmented_triad
   495  0090D5  00                 	db	0
   496  0090D6  04                 	db	4
   497  0090D7  08                 	db	8
   498                           
   499                           ;initializer for _minor_triad
   500  0090D8  00                 	db	0
   501  0090D9  03                 	db	3
   502  0090DA  07                 	db	7
   503                           
   504                           	psect	idataBANK3
   505  008DC2                     __pidataBANK3:
   506                           	opt stack 0
   507                           
   508                           ;initializer for _menuArray
   509  008DC2  08                 	db	8
   510  008DC3  00                 	db	0
   511  008DC4  00                 	db	0
   512  008DC5  0C                 	db	12
   513  008DC6  00                 	db	0
   514  008DC7  00                 	db	0
   515  008DC8  07                 	db	7
   516  008DC9  00                 	db	0
   517  008DCA  00                 	db	0
   518  008DCB  04                 	db	4
   519  008DCC  00                 	db	0
   520  008DCD  00                 	db	0
   521  008DCE  05                 	db	5
   522  008DCF  00                 	db	0
   523  008DD0  00                 	db	0
   524  008DD1  02                 	db	2
   525  008DD2  00                 	db	0
   526  008DD3  00                 	db	0
   527  008DD4  05                 	db	5
   528  008DD5  00                 	db	0
   529  008DD6  00                 	db	0
   530  008DD7  02                 	db	2
   531  008DD8  00                 	db	0
   532  008DD9  00                 	db	0
   533  008DDA  08                 	db	8
   534  008DDB  00                 	db	0
   535  008DDC  00                 	db	0
   536  008DDD  08                 	db	8
   537  008DDE  00                 	db	0
   538  008DDF  00                 	db	0
   539  008DE0  05                 	db	5
   540  008DE1  00                 	db	0
   541  008DE2  00                 	db	0
   542  008DE3  02                 	db	2
   543  008DE4  00                 	db	0
   544  008DE5  00                 	db	0
   545  008DE6  07                 	db	7
   546  008DE7  00                 	db	0
   547  008DE8  00                 	db	0
   548  008DE9  07                 	db	7
   549  008DEA  00                 	db	0
   550  008DEB  00                 	db	0
   551  008DEC  02                 	db	2
   552  008DED  00                 	db	0
   553  008DEE  00                 	db	0
   554  008DEF  02                 	db	2
   555  008DF0  00                 	db	0
   556  008DF1  00                 	db	0
   557  008DF2  05                 	db	5
   558  008DF3  00                 	db	0
   559  008DF4  00                 	db	0
   560  008DF5  05                 	db	5
   561  008DF6  00                 	db	0
   562  008DF7  00                 	db	0
   563  008DF8  02                 	db	2
   564  008DF9  00                 	db	0
   565  008DFA  00                 	db	0
   566  008DFB  09                 	db	9
   567  008DFC  00                 	db	0
   568  008DFD  00                 	db	0
   569  008DFE  02                 	db	2
   570  008DFF  00                 	db	0
   571  008E00  00                 	db	0
   572  008E01  07                 	db	7
   573  008E02  00                 	db	0
   574  008E03  00                 	db	0
   575  008E04  0C                 	db	12
   576  008E05  00                 	db	0
   577  008E06  00                 	db	0
   578  008E07  02                 	db	2
   579  008E08  00                 	db	0
   580  008E09  00                 	db	0
   581  008E0A  01                 	db	1
   582  008E0B  00                 	db	0
   583  008E0C  00                 	db	0
   584  008E0D  01                 	db	1
   585  008E0E  00                 	db	0
   586  008E0F  00                 	db	0
   587  008E10  01                 	db	1
   588  008E11  00                 	db	0
   589  008E12  00                 	db	0
   590  008E13  02                 	db	2
   591  008E14  00                 	db	0
   592  008E15  00                 	db	0
   593  008E16  01                 	db	1
   594  008E17  00                 	db	0
   595  008E18  00                 	db	0
   596  008E19  01                 	db	1
   597  008E1A  00                 	db	0
   598  008E1B  00                 	db	0
   599  008E1C  04                 	db	4
   600  008E1D  00                 	db	0
   601  008E1E  00                 	db	0
   602  008E1F  01                 	db	1
   603  008E20  00                 	db	0
   604  008E21  00                 	db	0
   605  008E22  01                 	db	1
   606  008E23  00                 	db	0
   607  008E24  00                 	db	0
   608  008E25  01                 	db	1
   609  008E26  00                 	db	0
   610  008E27  00                 	db	0
   611  008E28  01                 	db	1
   612  008E29  00                 	db	0
   613  008E2A  00                 	db	0
   614                           
   615                           	psect	mediumconst
   616  00E8C2                     __pmediumconst:
   617                           	opt stack 0
   618  00E8C2  00                 	db	0
   619  00E8C3  4B                 	db	75
   620  00E8C4  45                 	db	69
   621  00E8C5  59                 	db	89
   622  00E8C6  42                 	db	66
   623  00E8C7  4F                 	db	79
   624  00E8C8  41                 	db	65
   625  00E8C9  52                 	db	82
   626  00E8CA  44                 	db	68
   627  00E8CB  20                 	db	32
   628  00E8CC  4D                 	db	77
   629  00E8CD  4F                 	db	79
   630  00E8CE  44                 	db	68
   631  00E8CF  45                 	db	69
   632  00E8D0  3A                 	db	58
   633  00E8D1  00                 	db	0
   634  00E8D2  00                 	db	0
   635  00E8D3  00                 	db	0
   636  00E8D4  41                 	db	65
   637  00E8D5  52                 	db	82
   638  00E8D6  50                 	db	80
   639  00E8D7  45                 	db	69
   640  00E8D8  47                 	db	71
   641  00E8D9  47                 	db	71
   642  00E8DA  49                 	db	73
   643  00E8DB  4F                 	db	79
   644  00E8DC  20                 	db	32
   645  00E8DD  4D                 	db	77
   646  00E8DE  45                 	db	69
   647  00E8DF  4E                 	db	78
   648  00E8E0  55                 	db	85
   649  00E8E1  3A                 	db	58
   650  00E8E2  00                 	db	0
   651  00E8E3  00                 	db	0
   652  00E8E4  00                 	db	0
   653  00E8E5  54                 	db	84
   654  00E8E6  52                 	db	82
   655  00E8E7  41                 	db	65
   656  00E8E8  4E                 	db	78
   657  00E8E9  53                 	db	83
   658  00E8EA  50                 	db	80
   659  00E8EB  4F                 	db	79
   660  00E8EC  53                 	db	83
   661  00E8ED  45                 	db	69
   662  00E8EE  20                 	db	32
   663  00E8EF  4D                 	db	77
   664  00E8F0  4F                 	db	79
   665  00E8F1  44                 	db	68
   666  00E8F2  45                 	db	69
   667  00E8F3  3A                 	db	58
   668  00E8F4  00                 	db	0
   669  00E8F5  00                 	db	0
   670  00E8F6  44                 	db	68
   671  00E8F7  52                 	db	82
   672  00E8F8  55                 	db	85
   673  00E8F9  4D                 	db	77
   674  00E8FA  20                 	db	32
   675  00E8FB  4D                 	db	77
   676  00E8FC  4F                 	db	79
   677  00E8FD  44                 	db	68
   678  00E8FE  45                 	db	69
   679  00E8FF  3A                 	db	58
   680  00E900  00                 	db	0
   681  00E901  00                 	db	0
   682  00E902  00                 	db	0
   683  00E903  00                 	db	0
   684  00E904  00                 	db	0
   685  00E905  00                 	db	0
   686  00E906  00                 	db	0
   687  00E907  50                 	db	80
   688  00E908  4F                 	db	79
   689  00E909  54                 	db	84
   690  00E90A  53                 	db	83
   691  00E90B  20                 	db	32
   692  00E90C  4D                 	db	77
   693  00E90D  4F                 	db	79
   694  00E90E  44                 	db	68
   695  00E90F  45                 	db	69
   696  00E910  3A                 	db	58
   697  00E911  00                 	db	0
   698  00E912  00                 	db	0
   699  00E913  00                 	db	0
   700  00E914  00                 	db	0
   701  00E915  00                 	db	0
   702  00E916  00                 	db	0
   703  00E917  00                 	db	0
   704  00E918  4D                 	db	77
   705  00E919  49                 	db	73
   706  00E91A  44                 	db	68
   707  00E91B  49                 	db	73
   708  00E91C  20                 	db	32
   709  00E91D  43                 	db	67
   710  00E91E  48                 	db	72
   711  00E91F  41                 	db	65
   712  00E920  4E                 	db	78
   713  00E921  4E                 	db	78
   714  00E922  45                 	db	69
   715  00E923  4C                 	db	76
   716  00E924  53                 	db	83
   717  00E925  3A                 	db	58
   718  00E926  00                 	db	0
   719  00E927  00                 	db	0
   720  00E928  00                 	db	0
   721  00E929  50                 	db	80
   722  00E92A  52                 	db	82
   723  00E92B  4F                 	db	79
   724  00E92C  47                 	db	71
   725  00E92D  52                 	db	82
   726  00E92E  41                 	db	65
   727  00E92F  4D                 	db	77
   728  00E930  20                 	db	32
   729  00E931  43                 	db	67
   730  00E932  48                 	db	72
   731  00E933  41                 	db	65
   732  00E934  4E                 	db	78
   733  00E935  47                 	db	71
   734  00E936  45                 	db	69
   735  00E937  3A                 	db	58
   736  00E938  00                 	db	0
   737  00E939  00                 	db	0
   738  00E93A  45                 	db	69
   739  00E93B  45                 	db	69
   740  00E93C  50                 	db	80
   741  00E93D  52                 	db	82
   742  00E93E  4F                 	db	79
   743  00E93F  4D                 	db	77
   744  00E940  20                 	db	32
   745  00E941  4D                 	db	77
   746  00E942  45                 	db	69
   747  00E943  4E                 	db	78
   748  00E944  55                 	db	85
   749  00E945  3A                 	db	58
   750  00E946  00                 	db	0
   751  00E947  00                 	db	0
   752  00E948  00                 	db	0
   753  00E949  00                 	db	0
   754  00E94A  00                 	db	0
   755  00E94B  43                 	db	67
   756  00E94C  48                 	db	72
   757  00E94D  52                 	db	82
   758  00E94E  4F                 	db	79
   759  00E94F  4D                 	db	77
   760  00E950  41                 	db	65
   761  00E951  54                 	db	84
   762  00E952  49                 	db	73
   763  00E953  43                 	db	67
   764  00E954  00                 	db	0
   765  00E955  00                 	db	0
   766  00E956  00                 	db	0
   767  00E957  00                 	db	0
   768  00E958  00                 	db	0
   769  00E959  00                 	db	0
   770  00E95A  00                 	db	0
   771  00E95B  00                 	db	0
   772  00E95C  4D                 	db	77
   773  00E95D  41                 	db	65
   774  00E95E  4A                 	db	74
   775  00E95F  4F                 	db	79
   776  00E960  52                 	db	82
   777  00E961  00                 	db	0
   778  00E962  00                 	db	0
   779  00E963  00                 	db	0
   780  00E964  00                 	db	0
   781  00E965  00                 	db	0
   782  00E966  00                 	db	0
   783  00E967  00                 	db	0
   784  00E968  00                 	db	0
   785  00E969  00                 	db	0
   786  00E96A  00                 	db	0
   787  00E96B  00                 	db	0
   788  00E96C  00                 	db	0
   789  00E96D  4D                 	db	77
   790  00E96E  49                 	db	73
   791  00E96F  4E                 	db	78
   792  00E970  4F                 	db	79
   793  00E971  52                 	db	82
   794  00E972  00                 	db	0
   795  00E973  00                 	db	0
   796  00E974  00                 	db	0
   797  00E975  00                 	db	0
   798  00E976  00                 	db	0
   799  00E977  00                 	db	0
   800  00E978  00                 	db	0
   801  00E979  00                 	db	0
   802  00E97A  00                 	db	0
   803  00E97B  00                 	db	0
   804  00E97C  00                 	db	0
   805  00E97D  00                 	db	0
   806  00E97E  4D                 	db	77
   807  00E97F  4F                 	db	79
   808  00E980  44                 	db	68
   809  00E981  45                 	db	69
   810  00E982  53                 	db	83
   811  00E983  00                 	db	0
   812  00E984  00                 	db	0
   813  00E985  00                 	db	0
   814  00E986  00                 	db	0
   815  00E987  00                 	db	0
   816  00E988  00                 	db	0
   817  00E989  00                 	db	0
   818  00E98A  00                 	db	0
   819  00E98B  00                 	db	0
   820  00E98C  00                 	db	0
   821  00E98D  00                 	db	0
   822  00E98E  00                 	db	0
   823  00E98F  50                 	db	80
   824  00E990  45                 	db	69
   825  00E991  4E                 	db	78
   826  00E992  54                 	db	84
   827  00E993  41                 	db	65
   828  00E994  54                 	db	84
   829  00E995  4F                 	db	79
   830  00E996  4E                 	db	78
   831  00E997  49                 	db	73
   832  00E998  43                 	db	67
   833  00E999  20                 	db	32
   834  00E99A  4D                 	db	77
   835  00E99B  41                 	db	65
   836  00E99C  4A                 	db	74
   837  00E99D  4F                 	db	79
   838  00E99E  52                 	db	82
   839  00E99F  00                 	db	0
   840  00E9A0  50                 	db	80
   841  00E9A1  45                 	db	69
   842  00E9A2  4E                 	db	78
   843  00E9A3  54                 	db	84
   844  00E9A4  41                 	db	65
   845  00E9A5  54                 	db	84
   846  00E9A6  4F                 	db	79
   847  00E9A7  4E                 	db	78
   848  00E9A8  49                 	db	73
   849  00E9A9  43                 	db	67
   850  00E9AA  20                 	db	32
   851  00E9AB  4D                 	db	77
   852  00E9AC  49                 	db	73
   853  00E9AD  4E                 	db	78
   854  00E9AE  4F                 	db	79
   855  00E9AF  52                 	db	82
   856  00E9B0  00                 	db	0
   857  00E9B1  54                 	db	84
   858  00E9B2  52                 	db	82
   859  00E9B3  49                 	db	73
   860  00E9B4  41                 	db	65
   861  00E9B5  44                 	db	68
   862  00E9B6  00                 	db	0
   863  00E9B7  00                 	db	0
   864  00E9B8  00                 	db	0
   865  00E9B9  00                 	db	0
   866  00E9BA  00                 	db	0
   867  00E9BB  00                 	db	0
   868  00E9BC  00                 	db	0
   869  00E9BD  00                 	db	0
   870  00E9BE  00                 	db	0
   871  00E9BF  00                 	db	0
   872  00E9C0  00                 	db	0
   873  00E9C1  00                 	db	0
   874  00E9C2  44                 	db	68
   875  00E9C3  49                 	db	73
   876  00E9C4  41                 	db	65
   877  00E9C5  54                 	db	84
   878  00E9C6  4F                 	db	79
   879  00E9C7  4E                 	db	78
   880  00E9C8  49                 	db	73
   881  00E9C9  43                 	db	67
   882  00E9CA  20                 	db	32
   883  00E9CB  54                 	db	84
   884  00E9CC  20                 	db	32
   885  00E9CD  4D                 	db	77
   886  00E9CE  41                 	db	65
   887  00E9CF  4A                 	db	74
   888  00E9D0  4F                 	db	79
   889  00E9D1  52                 	db	82
   890  00E9D2  00                 	db	0
   891  00E9D3  44                 	db	68
   892  00E9D4  49                 	db	73
   893  00E9D5  41                 	db	65
   894  00E9D6  54                 	db	84
   895  00E9D7  4F                 	db	79
   896  00E9D8  4E                 	db	78
   897  00E9D9  49                 	db	73
   898  00E9DA  43                 	db	67
   899  00E9DB  20                 	db	32
   900  00E9DC  54                 	db	84
   901  00E9DD  20                 	db	32
   902  00E9DE  4D                 	db	77
   903  00E9DF  49                 	db	73
   904  00E9E0  4E                 	db	78
   905  00E9E1  4F                 	db	79
   906  00E9E2  52                 	db	82
   907  00E9E3  00                 	db	0
   908  00E9E4  53                 	db	83
   909  00E9E5  45                 	db	69
   910  00E9E6  56                 	db	86
   911  00E9E7  45                 	db	69
   912  00E9E8  4E                 	db	78
   913  00E9E9  54                 	db	84
   914  00E9EA  48                 	db	72
   915  00E9EB  00                 	db	0
   916  00E9EC  00                 	db	0
   917  00E9ED  00                 	db	0
   918  00E9EE  00                 	db	0
   919  00E9EF  00                 	db	0
   920  00E9F0  00                 	db	0
   921  00E9F1  00                 	db	0
   922  00E9F2  00                 	db	0
   923  00E9F3  00                 	db	0
   924  00E9F4  00                 	db	0
   925  00E9F5  44                 	db	68
   926  00E9F6  49                 	db	73
   927  00E9F7  41                 	db	65
   928  00E9F8  54                 	db	84
   929  00E9F9  4F                 	db	79
   930  00E9FA  4E                 	db	78
   931  00E9FB  49                 	db	73
   932  00E9FC  43                 	db	67
   933  00E9FD  20                 	db	32
   934  00E9FE  37                 	db	55
   935  00E9FF  20                 	db	32
   936  00EA00  4D                 	db	77
   937  00EA01  41                 	db	65
   938  00EA02  4A                 	db	74
   939  00EA03  4F                 	db	79
   940  00EA04  52                 	db	82
   941  00EA05  00                 	db	0
   942  00EA06  44                 	db	68
   943  00EA07  49                 	db	73
   944  00EA08  41                 	db	65
   945  00EA09  54                 	db	84
   946  00EA0A  4F                 	db	79
   947  00EA0B  4E                 	db	78
   948  00EA0C  49                 	db	73
   949  00EA0D  43                 	db	67
   950  00EA0E  20                 	db	32
   951  00EA0F  37                 	db	55
   952  00EA10  20                 	db	32
   953  00EA11  4D                 	db	77
   954  00EA12  49                 	db	73
   955  00EA13  4E                 	db	78
   956  00EA14  4F                 	db	79
   957  00EA15  52                 	db	82
   958  00EA16  00                 	db	0
   959  00EA17  69                 	db	105
   960  00EA18  6F                 	db	111
   961  00EA19  6E                 	db	110
   962  00EA1A  69                 	db	105
   963  00EA1B  61                 	db	97
   964  00EA1C  6E                 	db	110
   965  00EA1D  00                 	db	0
   966  00EA1E  00                 	db	0
   967  00EA1F  00                 	db	0
   968  00EA20  00                 	db	0
   969  00EA21  00                 	db	0
   970  00EA22  00                 	db	0
   971  00EA23  00                 	db	0
   972  00EA24  00                 	db	0
   973  00EA25  00                 	db	0
   974  00EA26  00                 	db	0
   975  00EA27  00                 	db	0
   976  00EA28  64                 	db	100
   977  00EA29  6F                 	db	111
   978  00EA2A  72                 	db	114
   979  00EA2B  69                 	db	105
   980  00EA2C  61                 	db	97
   981  00EA2D  6E                 	db	110
   982  00EA2E  00                 	db	0
   983  00EA2F  00                 	db	0
   984  00EA30  00                 	db	0
   985  00EA31  00                 	db	0
   986  00EA32  00                 	db	0
   987  00EA33  00                 	db	0
   988  00EA34  00                 	db	0
   989  00EA35  00                 	db	0
   990  00EA36  00                 	db	0
   991  00EA37  00                 	db	0
   992  00EA38  00                 	db	0
   993  00EA39  70                 	db	112
   994  00EA3A  68                 	db	104
   995  00EA3B  72                 	db	114
   996  00EA3C  79                 	db	121
   997  00EA3D  67                 	db	103
   998  00EA3E  69                 	db	105
   999  00EA3F  61                 	db	97
  1000  00EA40  6E                 	db	110
  1001  00EA41  00                 	db	0
  1002  00EA42  00                 	db	0
  1003  00EA43  00                 	db	0
  1004  00EA44  00                 	db	0
  1005  00EA45  00                 	db	0
  1006  00EA46  00                 	db	0
  1007  00EA47  00                 	db	0
  1008  00EA48  00                 	db	0
  1009  00EA49  00                 	db	0
  1010  00EA4A  6C                 	db	108
  1011  00EA4B  79                 	db	121
  1012  00EA4C  64                 	db	100
  1013  00EA4D  69                 	db	105
  1014  00EA4E  61                 	db	97
  1015  00EA4F  6E                 	db	110
  1016  00EA50  00                 	db	0
  1017  00EA51  00                 	db	0
  1018  00EA52  00                 	db	0
  1019  00EA53  00                 	db	0
  1020  00EA54  00                 	db	0
  1021  00EA55  00                 	db	0
  1022  00EA56  00                 	db	0
  1023  00EA57  00                 	db	0
  1024  00EA58  00                 	db	0
  1025  00EA59  00                 	db	0
  1026  00EA5A  00                 	db	0
  1027  00EA5B  6D                 	db	109
  1028  00EA5C  69                 	db	105
  1029  00EA5D  78                 	db	120
  1030  00EA5E  6F                 	db	111
  1031  00EA5F  6C                 	db	108
  1032  00EA60  79                 	db	121
  1033  00EA61  64                 	db	100
  1034  00EA62  69                 	db	105
  1035  00EA63  61                 	db	97
  1036  00EA64  6E                 	db	110
  1037  00EA65  00                 	db	0
  1038  00EA66  00                 	db	0
  1039  00EA67  00                 	db	0
  1040  00EA68  00                 	db	0
  1041  00EA69  00                 	db	0
  1042  00EA6A  00                 	db	0
  1043  00EA6B  00                 	db	0
  1044  00EA6C  61                 	db	97
  1045  00EA6D  65                 	db	101
  1046  00EA6E  6F                 	db	111
  1047  00EA6F  6C                 	db	108
  1048  00EA70  69                 	db	105
  1049  00EA71  61                 	db	97
  1050  00EA72  6E                 	db	110
  1051  00EA73  00                 	db	0
  1052  00EA74  00                 	db	0
  1053  00EA75  00                 	db	0
  1054  00EA76  00                 	db	0
  1055  00EA77  00                 	db	0
  1056  00EA78  00                 	db	0
  1057  00EA79  00                 	db	0
  1058  00EA7A  00                 	db	0
  1059  00EA7B  00                 	db	0
  1060  00EA7C  00                 	db	0
  1061  00EA7D  6C                 	db	108
  1062  00EA7E  6F                 	db	111
  1063  00EA7F  63                 	db	99
  1064  00EA80  72                 	db	114
  1065  00EA81  69                 	db	105
  1066  00EA82  61                 	db	97
  1067  00EA83  6E                 	db	110
  1068  00EA84  00                 	db	0
  1069  00EA85  00                 	db	0
  1070  00EA86  00                 	db	0
  1071  00EA87  00                 	db	0
  1072  00EA88  00                 	db	0
  1073  00EA89  00                 	db	0
  1074  00EA8A  00                 	db	0
  1075  00EA8B  00                 	db	0
  1076  00EA8C  00                 	db	0
  1077  00EA8D  00                 	db	0
  1078  00EA8E  6D                 	db	109
  1079  00EA8F  61                 	db	97
  1080  00EA90  6A                 	db	106
  1081  00EA91  6F                 	db	111
  1082  00EA92  72                 	db	114
  1083  00EA93  20                 	db	32
  1084  00EA94  74                 	db	116
  1085  00EA95  72                 	db	114
  1086  00EA96  69                 	db	105
  1087  00EA97  61                 	db	97
  1088  00EA98  64                 	db	100
  1089  00EA99  00                 	db	0
  1090  00EA9A  00                 	db	0
  1091  00EA9B  00                 	db	0
  1092  00EA9C  00                 	db	0
  1093  00EA9D  00                 	db	0
  1094  00EA9E  00                 	db	0
  1095  00EA9F  6D                 	db	109
  1096  00EAA0  69                 	db	105
  1097  00EAA1  6E                 	db	110
  1098  00EAA2  6F                 	db	111
  1099  00EAA3  72                 	db	114
  1100  00EAA4  20                 	db	32
  1101  00EAA5  74                 	db	116
  1102  00EAA6  72                 	db	114
  1103  00EAA7  69                 	db	105
  1104  00EAA8  61                 	db	97
  1105  00EAA9  64                 	db	100
  1106  00EAAA  00                 	db	0
  1107  00EAAB  00                 	db	0
  1108  00EAAC  00                 	db	0
  1109  00EAAD  00                 	db	0
  1110  00EAAE  00                 	db	0
  1111  00EAAF  00                 	db	0
  1112  00EAB0  61                 	db	97
  1113  00EAB1  75                 	db	117
  1114  00EAB2  67                 	db	103
  1115  00EAB3  6D                 	db	109
  1116  00EAB4  65                 	db	101
  1117  00EAB5  6E                 	db	110
  1118  00EAB6  74                 	db	116
  1119  00EAB7  65                 	db	101
  1120  00EAB8  64                 	db	100
  1121  00EAB9  20                 	db	32
  1122  00EABA  74                 	db	116
  1123  00EABB  72                 	db	114
  1124  00EABC  69                 	db	105
  1125  00EABD  61                 	db	97
  1126  00EABE  64                 	db	100
  1127  00EABF  00                 	db	0
  1128  00EAC0  00                 	db	0
  1129  00EAC1  64                 	db	100
  1130  00EAC2  69                 	db	105
  1131  00EAC3  6D                 	db	109
  1132  00EAC4  69                 	db	105
  1133  00EAC5  6E                 	db	110
  1134  00EAC6  69                 	db	105
  1135  00EAC7  73                 	db	115
  1136  00EAC8  68                 	db	104
  1137  00EAC9  65                 	db	101
  1138  00EACA  64                 	db	100
  1139  00EACB  20                 	db	32
  1140  00EACC  74                 	db	116
  1141  00EACD  72                 	db	114
  1142  00EACE  69                 	db	105
  1143  00EACF  61                 	db	97
  1144  00EAD0  64                 	db	100
  1145  00EAD1  00                 	db	0
  1146  00EAD2  64                 	db	100
  1147  00EAD3  6F                 	db	111
  1148  00EAD4  6D                 	db	109
  1149  00EAD5  69                 	db	105
  1150  00EAD6  6E                 	db	110
  1151  00EAD7  61                 	db	97
  1152  00EAD8  6E                 	db	110
  1153  00EAD9  74                 	db	116
  1154  00EADA  20                 	db	32
  1155  00EADB  37                 	db	55
  1156  00EADC  74                 	db	116
  1157  00EADD  68                 	db	104
  1158  00EADE  00                 	db	0
  1159  00EADF  00                 	db	0
  1160  00EAE0  00                 	db	0
  1161  00EAE1  00                 	db	0
  1162  00EAE2  00                 	db	0
  1163  00EAE3  6D                 	db	109
  1164  00EAE4  61                 	db	97
  1165  00EAE5  6A                 	db	106
  1166  00EAE6  6F                 	db	111
  1167  00EAE7  72                 	db	114
  1168  00EAE8  20                 	db	32
  1169  00EAE9  37                 	db	55
  1170  00EAEA  74                 	db	116
  1171  00EAEB  68                 	db	104
  1172  00EAEC  00                 	db	0
  1173  00EAED  00                 	db	0
  1174  00EAEE  00                 	db	0
  1175  00EAEF  00                 	db	0
  1176  00EAF0  00                 	db	0
  1177  00EAF1  00                 	db	0
  1178  00EAF2  00                 	db	0
  1179  00EAF3  00                 	db	0
  1180  00EAF4  6D                 	db	109
  1181  00EAF5  69                 	db	105
  1182  00EAF6  6E                 	db	110
  1183  00EAF7  6F                 	db	111
  1184  00EAF8  72                 	db	114
  1185  00EAF9  20                 	db	32
  1186  00EAFA  37                 	db	55
  1187  00EAFB  74                 	db	116
  1188  00EAFC  68                 	db	104
  1189  00EAFD  00                 	db	0
  1190  00EAFE  00                 	db	0
  1191  00EAFF  00                 	db	0
  1192  00EB00  00                 	db	0
  1193  00EB01  00                 	db	0
  1194  00EB02  00                 	db	0
  1195  00EB03  00                 	db	0
  1196  00EB04  00                 	db	0
  1197  00EB05  68                 	db	104
  1198  00EB06  61                 	db	97
  1199  00EB07  6C                 	db	108
  1200  00EB08  66                 	db	102
  1201  00EB09  20                 	db	32
  1202  00EB0A  64                 	db	100
  1203  00EB0B  69                 	db	105
  1204  00EB0C  6D                 	db	109
  1205  00EB0D  69                 	db	105
  1206  00EB0E  6E                 	db	110
  1207  00EB0F  69                 	db	105
  1208  00EB10  73                 	db	115
  1209  00EB11  68                 	db	104
  1210  00EB12  65                 	db	101
  1211  00EB13  64                 	db	100
  1212  00EB14  00                 	db	0
  1213  00EB15  00                 	db	0
  1214  00EB16  64                 	db	100
  1215  00EB17  69                 	db	105
  1216  00EB18  6D                 	db	109
  1217  00EB19  69                 	db	105
  1218  00EB1A  6E                 	db	110
  1219  00EB1B  69                 	db	105
  1220  00EB1C  73                 	db	115
  1221  00EB1D  68                 	db	104
  1222  00EB1E  65                 	db	101
  1223  00EB1F  64                 	db	100
  1224  00EB20  20                 	db	32
  1225  00EB21  37                 	db	55
  1226  00EB22  74                 	db	116
  1227  00EB23  68                 	db	104
  1228  00EB24  00                 	db	0
  1229  00EB25  00                 	db	0
  1230  00EB26  00                 	db	0
  1231  00EB27  48                 	db	72
  1232  00EB28  41                 	db	65
  1233  00EB29  4C                 	db	76
  1234  00EB2A  46                 	db	70
  1235  00EB2B  20                 	db	32
  1236  00EB2C  53                 	db	83
  1237  00EB2D  54                 	db	84
  1238  00EB2E  45                 	db	69
  1239  00EB2F  50                 	db	80
  1240  00EB30  00                 	db	0
  1241  00EB31  00                 	db	0
  1242  00EB32  00                 	db	0
  1243  00EB33  00                 	db	0
  1244  00EB34  00                 	db	0
  1245  00EB35  00                 	db	0
  1246  00EB36  00                 	db	0
  1247  00EB37  00                 	db	0
  1248  00EB38  43                 	db	67
  1249  00EB39  49                 	db	73
  1250  00EB3A  52                 	db	82
  1251  00EB3B  43                 	db	67
  1252  00EB3C  4C                 	db	76
  1253  00EB3D  45                 	db	69
  1254  00EB3E  20                 	db	32
  1255  00EB3F  4F                 	db	79
  1256  00EB40  46                 	db	70
  1257  00EB41  20                 	db	32
  1258  00EB42  46                 	db	70
  1259  00EB43  49                 	db	73
  1260  00EB44  46                 	db	70
  1261  00EB45  54                 	db	84
  1262  00EB46  48                 	db	72
  1263  00EB47  53                 	db	83
  1264  00EB48  00                 	db	0
  1265  00EB49  44                 	db	68
  1266  00EB4A  52                 	db	82
  1267  00EB4B  55                 	db	85
  1268  00EB4C  4D                 	db	77
  1269  00EB4D  20                 	db	32
  1270  00EB4E  49                 	db	73
  1271  00EB4F  53                 	db	83
  1272  00EB50  20                 	db	32
  1273  00EB51  4E                 	db	78
  1274  00EB52  4F                 	db	79
  1275  00EB53  54                 	db	84
  1276  00EB54  45                 	db	69
  1277  00EB55  20                 	db	32
  1278  00EB56  4F                 	db	79
  1279  00EB57  4E                 	db	78
  1280  00EB58  00                 	db	0
  1281  00EB59  00                 	db	0
  1282  00EB5A  44                 	db	68
  1283  00EB5B  52                 	db	82
  1284  00EB5C  55                 	db	85
  1285  00EB5D  4D                 	db	77
  1286  00EB5E  20                 	db	32
  1287  00EB5F  49                 	db	73
  1288  00EB60  53                 	db	83
  1289  00EB61  20                 	db	32
  1290  00EB62  43                 	db	67
  1291  00EB63  43                 	db	67
  1292  00EB64  00                 	db	0
  1293  00EB65  00                 	db	0
  1294  00EB66  00                 	db	0
  1295  00EB67  00                 	db	0
  1296  00EB68  00                 	db	0
  1297  00EB69  00                 	db	0
  1298  00EB6A  00                 	db	0
  1299  00EB6B  44                 	db	68
  1300  00EB6C  52                 	db	82
  1301  00EB6D  55                 	db	85
  1302  00EB6E  4D                 	db	77
  1303  00EB6F  20                 	db	32
  1304  00EB70  43                 	db	67
  1305  00EB71  43                 	db	67
  1306  00EB72  20                 	db	32
  1307  00EB73  54                 	db	84
  1308  00EB74  59                 	db	89
  1309  00EB75  50                 	db	80
  1310  00EB76  45                 	db	69
  1311  00EB77  00                 	db	0
  1312  00EB78  00                 	db	0
  1313  00EB79  00                 	db	0
  1314  00EB7A  00                 	db	0
  1315  00EB7B  00                 	db	0
  1316  00EB7C  44                 	db	68
  1317  00EB7D  52                 	db	82
  1318  00EB7E  55                 	db	85
  1319  00EB7F  4D                 	db	77
  1320  00EB80  20                 	db	32
  1321  00EB81  53                 	db	83
  1322  00EB82  45                 	db	69
  1323  00EB83  54                 	db	84
  1324  00EB84  20                 	db	32
  1325  00EB85  4E                 	db	78
  1326  00EB86  4E                 	db	78
  1327  00EB87  23                 	db	35
  1328  00EB88  00                 	db	0
  1329  00EB89  00                 	db	0
  1330  00EB8A  00                 	db	0
  1331  00EB8B  00                 	db	0
  1332  00EB8C  00                 	db	0
  1333  00EB8D  44                 	db	68
  1334  00EB8E  52                 	db	82
  1335  00EB8F  55                 	db	85
  1336  00EB90  4D                 	db	77
  1337  00EB91  20                 	db	32
  1338  00EB92  53                 	db	83
  1339  00EB93  45                 	db	69
  1340  00EB94  54                 	db	84
  1341  00EB95  20                 	db	32
  1342  00EB96  43                 	db	67
  1343  00EB97  43                 	db	67
  1344  00EB98  23                 	db	35
  1345  00EB99  00                 	db	0
  1346  00EB9A  00                 	db	0
  1347  00EB9B  00                 	db	0
  1348  00EB9C  00                 	db	0
  1349  00EB9D  00                 	db	0
  1350  00EB9E  44                 	db	68
  1351  00EB9F  52                 	db	82
  1352  00EBA0  55                 	db	85
  1353  00EBA1  4D                 	db	77
  1354  00EBA2  20                 	db	32
  1355  00EBA3  43                 	db	67
  1356  00EBA4  43                 	db	67
  1357  00EBA5  20                 	db	32
  1358  00EBA6  54                 	db	84
  1359  00EBA7  52                 	db	82
  1360  00EBA8  49                 	db	73
  1361  00EBA9  47                 	db	71
  1362  00EBAA  47                 	db	71
  1363  00EBAB  45                 	db	69
  1364  00EBAC  52                 	db	82
  1365  00EBAD  00                 	db	0
  1366  00EBAE  00                 	db	0
  1367  00EBAF  44                 	db	68
  1368  00EBB0  52                 	db	82
  1369  00EBB1  55                 	db	85
  1370  00EBB2  4D                 	db	77
  1371  00EBB3  20                 	db	32
  1372  00EBB4  43                 	db	67
  1373  00EBB5  43                 	db	67
  1374  00EBB6  20                 	db	32
  1375  00EBB7  54                 	db	84
  1376  00EBB8  4F                 	db	79
  1377  00EBB9  47                 	db	71
  1378  00EBBA  47                 	db	71
  1379  00EBBB  4C                 	db	76
  1380  00EBBC  45                 	db	69
  1381  00EBBD  00                 	db	0
  1382  00EBBE  00                 	db	0
  1383  00EBBF  00                 	db	0
  1384  00EBC0  44                 	db	68
  1385  00EBC1  52                 	db	82
  1386  00EBC2  55                 	db	85
  1387  00EBC3  4D                 	db	77
  1388  00EBC4  20                 	db	32
  1389  00EBC5  31                 	db	49
  1390  00EBC6  20                 	db	32
  1391  00EBC7  4E                 	db	78
  1392  00EBC8  4E                 	db	78
  1393  00EBC9  3A                 	db	58
  1394  00EBCA  20                 	db	32
  1395  00EBCB  00                 	db	0
  1396  00EBCC  00                 	db	0
  1397  00EBCD  00                 	db	0
  1398  00EBCE  00                 	db	0
  1399  00EBCF  00                 	db	0
  1400  00EBD0  00                 	db	0
  1401  00EBD1  44                 	db	68
  1402  00EBD2  52                 	db	82
  1403  00EBD3  55                 	db	85
  1404  00EBD4  4D                 	db	77
  1405  00EBD5  20                 	db	32
  1406  00EBD6  32                 	db	50
  1407  00EBD7  20                 	db	32
  1408  00EBD8  4E                 	db	78
  1409  00EBD9  4E                 	db	78
  1410  00EBDA  3A                 	db	58
  1411  00EBDB  20                 	db	32
  1412  00EBDC  00                 	db	0
  1413  00EBDD  00                 	db	0
  1414  00EBDE  00                 	db	0
  1415  00EBDF  00                 	db	0
  1416  00EBE0  00                 	db	0
  1417  00EBE1  00                 	db	0
  1418  00EBE2  44                 	db	68
  1419  00EBE3  52                 	db	82
  1420  00EBE4  55                 	db	85
  1421  00EBE5  4D                 	db	77
  1422  00EBE6  20                 	db	32
  1423  00EBE7  33                 	db	51
  1424  00EBE8  20                 	db	32
  1425  00EBE9  4E                 	db	78
  1426  00EBEA  4E                 	db	78
  1427  00EBEB  3A                 	db	58
  1428  00EBEC  20                 	db	32
  1429  00EBED  00                 	db	0
  1430  00EBEE  00                 	db	0
  1431  00EBEF  00                 	db	0
  1432  00EBF0  00                 	db	0
  1433  00EBF1  00                 	db	0
  1434  00EBF2  00                 	db	0
  1435  00EBF3  44                 	db	68
  1436  00EBF4  52                 	db	82
  1437  00EBF5  55                 	db	85
  1438  00EBF6  4D                 	db	77
  1439  00EBF7  20                 	db	32
  1440  00EBF8  34                 	db	52
  1441  00EBF9  20                 	db	32
  1442  00EBFA  4E                 	db	78
  1443  00EBFB  4E                 	db	78
  1444  00EBFC  3A                 	db	58
  1445  00EBFD  20                 	db	32
  1446  00EBFE  00                 	db	0
  1447  00EBFF  00                 	db	0
  1448  00EC00  00                 	db	0
  1449  00EC01  00                 	db	0
  1450  00EC02  00                 	db	0
  1451  00EC03  00                 	db	0
  1452  00EC04  44                 	db	68
  1453  00EC05  52                 	db	82
  1454  00EC06  55                 	db	85
  1455  00EC07  4D                 	db	77
  1456  00EC08  20                 	db	32
  1457  00EC09  35                 	db	53
  1458  00EC0A  20                 	db	32
  1459  00EC0B  4E                 	db	78
  1460  00EC0C  4E                 	db	78
  1461  00EC0D  3A                 	db	58
  1462  00EC0E  20                 	db	32
  1463  00EC0F  00                 	db	0
  1464  00EC10  00                 	db	0
  1465  00EC11  00                 	db	0
  1466  00EC12  00                 	db	0
  1467  00EC13  00                 	db	0
  1468  00EC14  00                 	db	0
  1469  00EC15  44                 	db	68
  1470  00EC16  52                 	db	82
  1471  00EC17  55                 	db	85
  1472  00EC18  4D                 	db	77
  1473  00EC19  20                 	db	32
  1474  00EC1A  36                 	db	54
  1475  00EC1B  20                 	db	32
  1476  00EC1C  4E                 	db	78
  1477  00EC1D  4E                 	db	78
  1478  00EC1E  3A                 	db	58
  1479  00EC1F  20                 	db	32
  1480  00EC20  00                 	db	0
  1481  00EC21  00                 	db	0
  1482  00EC22  00                 	db	0
  1483  00EC23  00                 	db	0
  1484  00EC24  00                 	db	0
  1485  00EC25  00                 	db	0
  1486  00EC26  44                 	db	68
  1487  00EC27  52                 	db	82
  1488  00EC28  55                 	db	85
  1489  00EC29  4D                 	db	77
  1490  00EC2A  20                 	db	32
  1491  00EC2B  37                 	db	55
  1492  00EC2C  20                 	db	32
  1493  00EC2D  4E                 	db	78
  1494  00EC2E  4E                 	db	78
  1495  00EC2F  3A                 	db	58
  1496  00EC30  20                 	db	32
  1497  00EC31  00                 	db	0
  1498  00EC32  00                 	db	0
  1499  00EC33  00                 	db	0
  1500  00EC34  00                 	db	0
  1501  00EC35  00                 	db	0
  1502  00EC36  00                 	db	0
  1503  00EC37  44                 	db	68
  1504  00EC38  52                 	db	82
  1505  00EC39  55                 	db	85
  1506  00EC3A  4D                 	db	77
  1507  00EC3B  20                 	db	32
  1508  00EC3C  38                 	db	56
  1509  00EC3D  20                 	db	32
  1510  00EC3E  4E                 	db	78
  1511  00EC3F  4E                 	db	78
  1512  00EC40  3A                 	db	58
  1513  00EC41  20                 	db	32
  1514  00EC42  00                 	db	0
  1515  00EC43  00                 	db	0
  1516  00EC44  00                 	db	0
  1517  00EC45  00                 	db	0
  1518  00EC46  00                 	db	0
  1519  00EC47  00                 	db	0
  1520  00EC48  44                 	db	68
  1521  00EC49  52                 	db	82
  1522  00EC4A  55                 	db	85
  1523  00EC4B  4D                 	db	77
  1524  00EC4C  20                 	db	32
  1525  00EC4D  31                 	db	49
  1526  00EC4E  20                 	db	32
  1527  00EC4F  43                 	db	67
  1528  00EC50  43                 	db	67
  1529  00EC51  3A                 	db	58
  1530  00EC52  20                 	db	32
  1531  00EC53  00                 	db	0
  1532  00EC54  00                 	db	0
  1533  00EC55  00                 	db	0
  1534  00EC56  00                 	db	0
  1535  00EC57  00                 	db	0
  1536  00EC58  00                 	db	0
  1537  00EC59  44                 	db	68
  1538  00EC5A  52                 	db	82
  1539  00EC5B  55                 	db	85
  1540  00EC5C  4D                 	db	77
  1541  00EC5D  20                 	db	32
  1542  00EC5E  32                 	db	50
  1543  00EC5F  20                 	db	32
  1544  00EC60  43                 	db	67
  1545  00EC61  43                 	db	67
  1546  00EC62  3A                 	db	58
  1547  00EC63  20                 	db	32
  1548  00EC64  00                 	db	0
  1549  00EC65  00                 	db	0
  1550  00EC66  00                 	db	0
  1551  00EC67  00                 	db	0
  1552  00EC68  00                 	db	0
  1553  00EC69  00                 	db	0
  1554  00EC6A  44                 	db	68
  1555  00EC6B  52                 	db	82
  1556  00EC6C  55                 	db	85
  1557  00EC6D  4D                 	db	77
  1558  00EC6E  20                 	db	32
  1559  00EC6F  33                 	db	51
  1560  00EC70  20                 	db	32
  1561  00EC71  43                 	db	67
  1562  00EC72  43                 	db	67
  1563  00EC73  3A                 	db	58
  1564  00EC74  20                 	db	32
  1565  00EC75  00                 	db	0
  1566  00EC76  00                 	db	0
  1567  00EC77  00                 	db	0
  1568  00EC78  00                 	db	0
  1569  00EC79  00                 	db	0
  1570  00EC7A  00                 	db	0
  1571  00EC7B  44                 	db	68
  1572  00EC7C  52                 	db	82
  1573  00EC7D  55                 	db	85
  1574  00EC7E  4D                 	db	77
  1575  00EC7F  20                 	db	32
  1576  00EC80  34                 	db	52
  1577  00EC81  20                 	db	32
  1578  00EC82  43                 	db	67
  1579  00EC83  43                 	db	67
  1580  00EC84  3A                 	db	58
  1581  00EC85  20                 	db	32
  1582  00EC86  00                 	db	0
  1583  00EC87  00                 	db	0
  1584  00EC88  00                 	db	0
  1585  00EC89  00                 	db	0
  1586  00EC8A  00                 	db	0
  1587  00EC8B  00                 	db	0
  1588  00EC8C  44                 	db	68
  1589  00EC8D  52                 	db	82
  1590  00EC8E  55                 	db	85
  1591  00EC8F  4D                 	db	77
  1592  00EC90  20                 	db	32
  1593  00EC91  35                 	db	53
  1594  00EC92  20                 	db	32
  1595  00EC93  43                 	db	67
  1596  00EC94  43                 	db	67
  1597  00EC95  3A                 	db	58
  1598  00EC96  20                 	db	32
  1599  00EC97  00                 	db	0
  1600  00EC98  00                 	db	0
  1601  00EC99  00                 	db	0
  1602  00EC9A  00                 	db	0
  1603  00EC9B  00                 	db	0
  1604  00EC9C  00                 	db	0
  1605  00EC9D  44                 	db	68
  1606  00EC9E  52                 	db	82
  1607  00EC9F  55                 	db	85
  1608  00ECA0  4D                 	db	77
  1609  00ECA1  20                 	db	32
  1610  00ECA2  36                 	db	54
  1611  00ECA3  20                 	db	32
  1612  00ECA4  43                 	db	67
  1613  00ECA5  43                 	db	67
  1614  00ECA6  3A                 	db	58
  1615  00ECA7  20                 	db	32
  1616  00ECA8  00                 	db	0
  1617  00ECA9  00                 	db	0
  1618  00ECAA  00                 	db	0
  1619  00ECAB  00                 	db	0
  1620  00ECAC  00                 	db	0
  1621  00ECAD  00                 	db	0
  1622  00ECAE  44                 	db	68
  1623  00ECAF  52                 	db	82
  1624  00ECB0  55                 	db	85
  1625  00ECB1  4D                 	db	77
  1626  00ECB2  20                 	db	32
  1627  00ECB3  37                 	db	55
  1628  00ECB4  20                 	db	32
  1629  00ECB5  43                 	db	67
  1630  00ECB6  43                 	db	67
  1631  00ECB7  3A                 	db	58
  1632  00ECB8  20                 	db	32
  1633  00ECB9  00                 	db	0
  1634  00ECBA  00                 	db	0
  1635  00ECBB  00                 	db	0
  1636  00ECBC  00                 	db	0
  1637  00ECBD  00                 	db	0
  1638  00ECBE  00                 	db	0
  1639  00ECBF  44                 	db	68
  1640  00ECC0  52                 	db	82
  1641  00ECC1  55                 	db	85
  1642  00ECC2  4D                 	db	77
  1643  00ECC3  20                 	db	32
  1644  00ECC4  38                 	db	56
  1645  00ECC5  20                 	db	32
  1646  00ECC6  43                 	db	67
  1647  00ECC7  43                 	db	67
  1648  00ECC8  3A                 	db	58
  1649  00ECC9  20                 	db	32
  1650  00ECCA  00                 	db	0
  1651  00ECCB  00                 	db	0
  1652  00ECCC  00                 	db	0
  1653  00ECCD  00                 	db	0
  1654  00ECCE  00                 	db	0
  1655  00ECCF  00                 	db	0
  1656  00ECD0  50                 	db	80
  1657  00ECD1  4F                 	db	79
  1658  00ECD2  54                 	db	84
  1659  00ECD3  53                 	db	83
  1660  00ECD4  20                 	db	32
  1661  00ECD5  52                 	db	82
  1662  00ECD6  45                 	db	69
  1663  00ECD7  53                 	db	83
  1664  00ECD8  4F                 	db	79
  1665  00ECD9  4C                 	db	76
  1666  00ECDA  55                 	db	85
  1667  00ECDB  54                 	db	84
  1668  00ECDC  49                 	db	73
  1669  00ECDD  4F                 	db	79
  1670  00ECDE  4E                 	db	78
  1671  00ECDF  00                 	db	0
  1672  00ECE0  00                 	db	0
  1673  00ECE1  50                 	db	80
  1674  00ECE2  4F                 	db	79
  1675  00ECE3  54                 	db	84
  1676  00ECE4  53                 	db	83
  1677  00ECE5  20                 	db	32
  1678  00ECE6  41                 	db	65
  1679  00ECE7  4C                 	db	76
  1680  00ECE8  50                 	db	80
  1681  00ECE9  48                 	db	72
  1682  00ECEA  41                 	db	65
  1683  00ECEB  00                 	db	0
  1684  00ECEC  00                 	db	0
  1685  00ECED  00                 	db	0
  1686  00ECEE  00                 	db	0
  1687  00ECEF  00                 	db	0
  1688  00ECF0  00                 	db	0
  1689  00ECF1  00                 	db	0
  1690  00ECF2  50                 	db	80
  1691  00ECF3  4F                 	db	79
  1692  00ECF4  54                 	db	84
  1693  00ECF5  53                 	db	83
  1694  00ECF6  20                 	db	32
  1695  00ECF7  53                 	db	83
  1696  00ECF8  45                 	db	69
  1697  00ECF9  54                 	db	84
  1698  00ECFA  20                 	db	32
  1699  00ECFB  43                 	db	67
  1700  00ECFC  43                 	db	67
  1701  00ECFD  23                 	db	35
  1702  00ECFE  00                 	db	0
  1703  00ECFF  00                 	db	0
  1704  00ED00  00                 	db	0
  1705  00ED01  00                 	db	0
  1706  00ED02  00                 	db	0
  1707  00ED03  53                 	db	83
  1708  00ED04  4C                 	db	76
  1709  00ED05  49                 	db	73
  1710  00ED06  44                 	db	68
  1711  00ED07  45                 	db	69
  1712  00ED08  50                 	db	80
  1713  00ED09  4F                 	db	79
  1714  00ED0A  54                 	db	84
  1715  00ED0B  20                 	db	32
  1716  00ED0C  53                 	db	83
  1717  00ED0D  45                 	db	69
  1718  00ED0E  54                 	db	84
  1719  00ED0F  20                 	db	32
  1720  00ED10  43                 	db	67
  1721  00ED11  43                 	db	67
  1722  00ED12  23                 	db	35
  1723  00ED13  00                 	db	0
  1724  00ED14  4A                 	db	74
  1725  00ED15  4F                 	db	79
  1726  00ED16  59                 	db	89
  1727  00ED17  53                 	db	83
  1728  00ED18  54                 	db	84
  1729  00ED19  49                 	db	73
  1730  00ED1A  43                 	db	67
  1731  00ED1B  4B                 	db	75
  1732  00ED1C  20                 	db	32
  1733  00ED1D  53                 	db	83
  1734  00ED1E  45                 	db	69
  1735  00ED1F  54                 	db	84
  1736  00ED20  20                 	db	32
  1737  00ED21  43                 	db	67
  1738  00ED22  43                 	db	67
  1739  00ED23  23                 	db	35
  1740  00ED24  00                 	db	0
  1741  00ED25  50                 	db	80
  1742  00ED26  4F                 	db	79
  1743  00ED27  54                 	db	84
  1744  00ED28  53                 	db	83
  1745  00ED29  20                 	db	32
  1746  00ED2A  4C                 	db	76
  1747  00ED2B  4F                 	db	79
  1748  00ED2C  20                 	db	32
  1749  00ED2D  52                 	db	82
  1750  00ED2E  45                 	db	69
  1751  00ED2F  53                 	db	83
  1752  00ED30  00                 	db	0
  1753  00ED31  00                 	db	0
  1754  00ED32  00                 	db	0
  1755  00ED33  00                 	db	0
  1756  00ED34  00                 	db	0
  1757  00ED35  00                 	db	0
  1758  00ED36  50                 	db	80
  1759  00ED37  4F                 	db	79
  1760  00ED38  54                 	db	84
  1761  00ED39  53                 	db	83
  1762  00ED3A  20                 	db	32
  1763  00ED3B  48                 	db	72
  1764  00ED3C  49                 	db	73
  1765  00ED3D  20                 	db	32
  1766  00ED3E  52                 	db	82
  1767  00ED3F  45                 	db	69
  1768  00ED40  53                 	db	83
  1769  00ED41  00                 	db	0
  1770  00ED42  00                 	db	0
  1771  00ED43  00                 	db	0
  1772  00ED44  00                 	db	0
  1773  00ED45  00                 	db	0
  1774  00ED46  00                 	db	0
  1775  00ED47  50                 	db	80
  1776  00ED48  31                 	db	49
  1777  00ED49  20                 	db	32
  1778  00ED4A  43                 	db	67
  1779  00ED4B  43                 	db	67
  1780  00ED4C  3A                 	db	58
  1781  00ED4D  00                 	db	0
  1782  00ED4E  00                 	db	0
  1783  00ED4F  00                 	db	0
  1784  00ED50  00                 	db	0
  1785  00ED51  00                 	db	0
  1786  00ED52  00                 	db	0
  1787  00ED53  00                 	db	0
  1788  00ED54  00                 	db	0
  1789  00ED55  00                 	db	0
  1790  00ED56  00                 	db	0
  1791  00ED57  00                 	db	0
  1792  00ED58  50                 	db	80
  1793  00ED59  32                 	db	50
  1794  00ED5A  20                 	db	32
  1795  00ED5B  43                 	db	67
  1796  00ED5C  43                 	db	67
  1797  00ED5D  3A                 	db	58
  1798  00ED5E  00                 	db	0
  1799  00ED5F  00                 	db	0
  1800  00ED60  00                 	db	0
  1801  00ED61  00                 	db	0
  1802  00ED62  00                 	db	0
  1803  00ED63  00                 	db	0
  1804  00ED64  00                 	db	0
  1805  00ED65  00                 	db	0
  1806  00ED66  00                 	db	0
  1807  00ED67  00                 	db	0
  1808  00ED68  00                 	db	0
  1809  00ED69  50                 	db	80
  1810  00ED6A  33                 	db	51
  1811  00ED6B  20                 	db	32
  1812  00ED6C  43                 	db	67
  1813  00ED6D  43                 	db	67
  1814  00ED6E  3A                 	db	58
  1815  00ED6F  00                 	db	0
  1816  00ED70  00                 	db	0
  1817  00ED71  00                 	db	0
  1818  00ED72  00                 	db	0
  1819  00ED73  00                 	db	0
  1820  00ED74  00                 	db	0
  1821  00ED75  00                 	db	0
  1822  00ED76  00                 	db	0
  1823  00ED77  00                 	db	0
  1824  00ED78  00                 	db	0
  1825  00ED79  00                 	db	0
  1826  00ED7A  50                 	db	80
  1827  00ED7B  34                 	db	52
  1828  00ED7C  20                 	db	32
  1829  00ED7D  43                 	db	67
  1830  00ED7E  43                 	db	67
  1831  00ED7F  3A                 	db	58
  1832  00ED80  00                 	db	0
  1833  00ED81  00                 	db	0
  1834  00ED82  00                 	db	0
  1835  00ED83  00                 	db	0
  1836  00ED84  00                 	db	0
  1837  00ED85  00                 	db	0
  1838  00ED86  00                 	db	0
  1839  00ED87  00                 	db	0
  1840  00ED88  00                 	db	0
  1841  00ED89  00                 	db	0
  1842  00ED8A  00                 	db	0
  1843  00ED8B  50                 	db	80
  1844  00ED8C  35                 	db	53
  1845  00ED8D  20                 	db	32
  1846  00ED8E  43                 	db	67
  1847  00ED8F  43                 	db	67
  1848  00ED90  3A                 	db	58
  1849  00ED91  00                 	db	0
  1850  00ED92  00                 	db	0
  1851  00ED93  00                 	db	0
  1852  00ED94  00                 	db	0
  1853  00ED95  00                 	db	0
  1854  00ED96  00                 	db	0
  1855  00ED97  00                 	db	0
  1856  00ED98  00                 	db	0
  1857  00ED99  00                 	db	0
  1858  00ED9A  00                 	db	0
  1859  00ED9B  00                 	db	0
  1860  00ED9C  50                 	db	80
  1861  00ED9D  36                 	db	54
  1862  00ED9E  20                 	db	32
  1863  00ED9F  43                 	db	67
  1864  00EDA0  43                 	db	67
  1865  00EDA1  3A                 	db	58
  1866  00EDA2  00                 	db	0
  1867  00EDA3  00                 	db	0
  1868  00EDA4  00                 	db	0
  1869  00EDA5  00                 	db	0
  1870  00EDA6  00                 	db	0
  1871  00EDA7  00                 	db	0
  1872  00EDA8  00                 	db	0
  1873  00EDA9  00                 	db	0
  1874  00EDAA  00                 	db	0
  1875  00EDAB  00                 	db	0
  1876  00EDAC  00                 	db	0
  1877  00EDAD  50                 	db	80
  1878  00EDAE  37                 	db	55
  1879  00EDAF  20                 	db	32
  1880  00EDB0  43                 	db	67
  1881  00EDB1  43                 	db	67
  1882  00EDB2  3A                 	db	58
  1883  00EDB3  00                 	db	0
  1884  00EDB4  00                 	db	0
  1885  00EDB5  00                 	db	0
  1886  00EDB6  00                 	db	0
  1887  00EDB7  00                 	db	0
  1888  00EDB8  00                 	db	0
  1889  00EDB9  00                 	db	0
  1890  00EDBA  00                 	db	0
  1891  00EDBB  00                 	db	0
  1892  00EDBC  00                 	db	0
  1893  00EDBD  00                 	db	0
  1894  00EDBE  53                 	db	83
  1895  00EDBF  31                 	db	49
  1896  00EDC0  20                 	db	32
  1897  00EDC1  43                 	db	67
  1898  00EDC2  43                 	db	67
  1899  00EDC3  3A                 	db	58
  1900  00EDC4  20                 	db	32
  1901  00EDC5  00                 	db	0
  1902  00EDC6  00                 	db	0
  1903  00EDC7  00                 	db	0
  1904  00EDC8  00                 	db	0
  1905  00EDC9  00                 	db	0
  1906  00EDCA  00                 	db	0
  1907  00EDCB  00                 	db	0
  1908  00EDCC  00                 	db	0
  1909  00EDCD  00                 	db	0
  1910  00EDCE  00                 	db	0
  1911  00EDCF  53                 	db	83
  1912  00EDD0  32                 	db	50
  1913  00EDD1  20                 	db	32
  1914  00EDD2  43                 	db	67
  1915  00EDD3  43                 	db	67
  1916  00EDD4  3A                 	db	58
  1917  00EDD5  20                 	db	32
  1918  00EDD6  00                 	db	0
  1919  00EDD7  00                 	db	0
  1920  00EDD8  00                 	db	0
  1921  00EDD9  00                 	db	0
  1922  00EDDA  00                 	db	0
  1923  00EDDB  00                 	db	0
  1924  00EDDC  00                 	db	0
  1925  00EDDD  00                 	db	0
  1926  00EDDE  00                 	db	0
  1927  00EDDF  00                 	db	0
  1928  00EDE0  53                 	db	83
  1929  00EDE1  33                 	db	51
  1930  00EDE2  20                 	db	32
  1931  00EDE3  43                 	db	67
  1932  00EDE4  43                 	db	67
  1933  00EDE5  3A                 	db	58
  1934  00EDE6  20                 	db	32
  1935  00EDE7  00                 	db	0
  1936  00EDE8  00                 	db	0
  1937  00EDE9  00                 	db	0
  1938  00EDEA  00                 	db	0
  1939  00EDEB  00                 	db	0
  1940  00EDEC  00                 	db	0
  1941  00EDED  00                 	db	0
  1942  00EDEE  00                 	db	0
  1943  00EDEF  00                 	db	0
  1944  00EDF0  00                 	db	0
  1945  00EDF1  53                 	db	83
  1946  00EDF2  34                 	db	52
  1947  00EDF3  20                 	db	32
  1948  00EDF4  43                 	db	67
  1949  00EDF5  43                 	db	67
  1950  00EDF6  3A                 	db	58
  1951  00EDF7  20                 	db	32
  1952  00EDF8  00                 	db	0
  1953  00EDF9  00                 	db	0
  1954  00EDFA  00                 	db	0
  1955  00EDFB  00                 	db	0
  1956  00EDFC  00                 	db	0
  1957  00EDFD  00                 	db	0
  1958  00EDFE  00                 	db	0
  1959  00EDFF  00                 	db	0
  1960  00EE00  00                 	db	0
  1961  00EE01  00                 	db	0
  1962  00EE02  53                 	db	83
  1963  00EE03  35                 	db	53
  1964  00EE04  20                 	db	32
  1965  00EE05  43                 	db	67
  1966  00EE06  43                 	db	67
  1967  00EE07  3A                 	db	58
  1968  00EE08  20                 	db	32
  1969  00EE09  00                 	db	0
  1970  00EE0A  00                 	db	0
  1971  00EE0B  00                 	db	0
  1972  00EE0C  00                 	db	0
  1973  00EE0D  00                 	db	0
  1974  00EE0E  00                 	db	0
  1975  00EE0F  00                 	db	0
  1976  00EE10  00                 	db	0
  1977  00EE11  00                 	db	0
  1978  00EE12  00                 	db	0
  1979  00EE13  53                 	db	83
  1980  00EE14  36                 	db	54
  1981  00EE15  20                 	db	32
  1982  00EE16  43                 	db	67
  1983  00EE17  43                 	db	67
  1984  00EE18  3A                 	db	58
  1985  00EE19  20                 	db	32
  1986  00EE1A  00                 	db	0
  1987  00EE1B  00                 	db	0
  1988  00EE1C  00                 	db	0
  1989  00EE1D  00                 	db	0
  1990  00EE1E  00                 	db	0
  1991  00EE1F  00                 	db	0
  1992  00EE20  00                 	db	0
  1993  00EE21  00                 	db	0
  1994  00EE22  00                 	db	0
  1995  00EE23  00                 	db	0
  1996  00EE24  53                 	db	83
  1997  00EE25  37                 	db	55
  1998  00EE26  20                 	db	32
  1999  00EE27  43                 	db	67
  2000  00EE28  43                 	db	67
  2001  00EE29  3A                 	db	58
  2002  00EE2A  20                 	db	32
  2003  00EE2B  00                 	db	0
  2004  00EE2C  00                 	db	0
  2005  00EE2D  00                 	db	0
  2006  00EE2E  00                 	db	0
  2007  00EE2F  00                 	db	0
  2008  00EE30  00                 	db	0
  2009  00EE31  00                 	db	0
  2010  00EE32  00                 	db	0
  2011  00EE33  00                 	db	0
  2012  00EE34  00                 	db	0
  2013  00EE35  4A                 	db	74
  2014  00EE36  58                 	db	88
  2015  00EE37  20                 	db	32
  2016  00EE38  43                 	db	67
  2017  00EE39  43                 	db	67
  2018  00EE3A  3A                 	db	58
  2019  00EE3B  20                 	db	32
  2020  00EE3C  00                 	db	0
  2021  00EE3D  00                 	db	0
  2022  00EE3E  00                 	db	0
  2023  00EE3F  00                 	db	0
  2024  00EE40  00                 	db	0
  2025  00EE41  00                 	db	0
  2026  00EE42  00                 	db	0
  2027  00EE43  00                 	db	0
  2028  00EE44  00                 	db	0
  2029  00EE45  00                 	db	0
  2030  00EE46  4A                 	db	74
  2031  00EE47  59                 	db	89
  2032  00EE48  20                 	db	32
  2033  00EE49  43                 	db	67
  2034  00EE4A  43                 	db	67
  2035  00EE4B  3A                 	db	58
  2036  00EE4C  20                 	db	32
  2037  00EE4D  00                 	db	0
  2038  00EE4E  00                 	db	0
  2039  00EE4F  00                 	db	0
  2040  00EE50  00                 	db	0
  2041  00EE51  00                 	db	0
  2042  00EE52  00                 	db	0
  2043  00EE53  00                 	db	0
  2044  00EE54  00                 	db	0
  2045  00EE55  00                 	db	0
  2046  00EE56  00                 	db	0
  2047  00EE57  4D                 	db	77
  2048  00EE58  61                 	db	97
  2049  00EE59  69                 	db	105
  2050  00EE5A  6E                 	db	110
  2051  00EE5B  20                 	db	32
  2052  00EE5C  63                 	db	99
  2053  00EE5D  68                 	db	104
  2054  00EE5E  61                 	db	97
  2055  00EE5F  6E                 	db	110
  2056  00EE60  6E                 	db	110
  2057  00EE61  65                 	db	101
  2058  00EE62  6C                 	db	108
  2059  00EE63  00                 	db	0
  2060  00EE64  00                 	db	0
  2061  00EE65  00                 	db	0
  2062  00EE66  00                 	db	0
  2063  00EE67  00                 	db	0
  2064  00EE68  44                 	db	68
  2065  00EE69  72                 	db	114
  2066  00EE6A  75                 	db	117
  2067  00EE6B  6D                 	db	109
  2068  00EE6C  20                 	db	32
  2069  00EE6D  63                 	db	99
  2070  00EE6E  68                 	db	104
  2071  00EE6F  61                 	db	97
  2072  00EE70  6E                 	db	110
  2073  00EE71  6E                 	db	110
  2074  00EE72  65                 	db	101
  2075  00EE73  6C                 	db	108
  2076  00EE74  00                 	db	0
  2077  00EE75  00                 	db	0
  2078  00EE76  00                 	db	0
  2079  00EE77  00                 	db	0
  2080  00EE78  00                 	db	0
  2081  00EE79  53                 	db	83
  2082  00EE7A  61                 	db	97
  2083  00EE7B  76                 	db	118
  2084  00EE7C  65                 	db	101
  2085  00EE7D  20                 	db	32
  2086  00EE7E  73                 	db	115
  2087  00EE7F  65                 	db	101
  2088  00EE80  74                 	db	116
  2089  00EE81  74                 	db	116
  2090  00EE82  69                 	db	105
  2091  00EE83  6E                 	db	110
  2092  00EE84  67                 	db	103
  2093  00EE85  73                 	db	115
  2094  00EE86  00                 	db	0
  2095  00EE87  00                 	db	0
  2096  00EE88  00                 	db	0
  2097  00EE89  00                 	db	0
  2098  00EE8A  4C                 	db	76
  2099  00EE8B  6F                 	db	111
  2100  00EE8C  61                 	db	97
  2101  00EE8D  64                 	db	100
  2102  00EE8E  20                 	db	32
  2103  00EE8F  73                 	db	115
  2104  00EE90  65                 	db	101
  2105  00EE91  74                 	db	116
  2106  00EE92  74                 	db	116
  2107  00EE93  69                 	db	105
  2108  00EE94  6E                 	db	110
  2109  00EE95  67                 	db	103
  2110  00EE96  73                 	db	115
  2111  00EE97  00                 	db	0
  2112  00EE98  00                 	db	0
  2113  00EE99  00                 	db	0
  2114  00EE9A  00                 	db	0
  2115  00EE9B  52                 	db	82
  2116  00EE9C  65                 	db	101
  2117  00EE9D  73                 	db	115
  2118  00EE9E  74                 	db	116
  2119  00EE9F  6F                 	db	111
  2120  00EEA0  72                 	db	114
  2121  00EEA1  65                 	db	101
  2122  00EEA2  20                 	db	32
  2123  00EEA3  64                 	db	100
  2124  00EEA4  65                 	db	101
  2125  00EEA5  66                 	db	102
  2126  00EEA6  61                 	db	97
  2127  00EEA7  75                 	db	117
  2128  00EEA8  6C                 	db	108
  2129  00EEA9  74                 	db	116
  2130  00EEAA  73                 	db	115
  2131  00EEAB  00                 	db	0
  2132  00EEAC  45                 	db	69
  2133  00EEAD  6E                 	db	110
  2134  00EEAE  63                 	db	99
  2135  00EEAF  6F                 	db	111
  2136  00EEB0  64                 	db	100
  2137  00EEB1  65                 	db	101
  2138  00EEB2  72                 	db	114
  2139  00EEB3  20                 	db	32
  2140  00EEB4  50                 	db	80
  2141  00EEB5  6F                 	db	111
  2142  00EEB6  6C                 	db	108
  2143  00EEB7  61                 	db	97
  2144  00EEB8  72                 	db	114
  2145  00EEB9  69                 	db	105
  2146  00EEBA  74                 	db	116
  2147  00EEBB  79                 	db	121
  2148  00EEBC  00                 	db	0
  2149  00EEBD  45                 	db	69
  2150  00EEBE  78                 	db	120
  2151  00EEBF  69                 	db	105
  2152  00EEC0  74                 	db	116
  2153  00EEC1  00                 	db	0
  2154  00EEC2  00                 	db	0
  2155  00EEC3  00                 	db	0
  2156  00EEC4  00                 	db	0
  2157  00EEC5  00                 	db	0
  2158  00EEC6  00                 	db	0
  2159  00EEC7  00                 	db	0
  2160  00EEC8  00                 	db	0
  2161  00EEC9  00                 	db	0
  2162  00EECA  00                 	db	0
  2163  00EECB  00                 	db	0
  2164  00EECC  00                 	db	0
  2165  00EECD  00                 	db	0
  2166  00EECE  53                 	db	83
  2167  00EECF  6C                 	db	108
  2168  00EED0  6F                 	db	111
  2169  00EED1  74                 	db	116
  2170  00EED2  20                 	db	32
  2171  00EED3  31                 	db	49
  2172  00EED4  00                 	db	0
  2173  00EED5  00                 	db	0
  2174  00EED6  00                 	db	0
  2175  00EED7  00                 	db	0
  2176  00EED8  00                 	db	0
  2177  00EED9  00                 	db	0
  2178  00EEDA  00                 	db	0
  2179  00EEDB  00                 	db	0
  2180  00EEDC  00                 	db	0
  2181  00EEDD  00                 	db	0
  2182  00EEDE  00                 	db	0
  2183  00EEDF  53                 	db	83
  2184  00EEE0  6C                 	db	108
  2185  00EEE1  6F                 	db	111
  2186  00EEE2  74                 	db	116
  2187  00EEE3  20                 	db	32
  2188  00EEE4  32                 	db	50
  2189  00EEE5  00                 	db	0
  2190  00EEE6  00                 	db	0
  2191  00EEE7  00                 	db	0
  2192  00EEE8  00                 	db	0
  2193  00EEE9  00                 	db	0
  2194  00EEEA  00                 	db	0
  2195  00EEEB  00                 	db	0
  2196  00EEEC  00                 	db	0
  2197  00EEED  00                 	db	0
  2198  00EEEE  00                 	db	0
  2199  00EEEF  00                 	db	0
  2200  00EEF0  53                 	db	83
  2201  00EEF1  6C                 	db	108
  2202  00EEF2  6F                 	db	111
  2203  00EEF3  74                 	db	116
  2204  00EEF4  20                 	db	32
  2205  00EEF5  33                 	db	51
  2206  00EEF6  00                 	db	0
  2207  00EEF7  00                 	db	0
  2208  00EEF8  00                 	db	0
  2209  00EEF9  00                 	db	0
  2210  00EEFA  00                 	db	0
  2211  00EEFB  00                 	db	0
  2212  00EEFC  00                 	db	0
  2213  00EEFD  00                 	db	0
  2214  00EEFE  00                 	db	0
  2215  00EEFF  00                 	db	0
  2216  00EF00  00                 	db	0
  2217  00EF01  53                 	db	83
  2218  00EF02  6C                 	db	108
  2219  00EF03  6F                 	db	111
  2220  00EF04  74                 	db	116
  2221  00EF05  20                 	db	32
  2222  00EF06  34                 	db	52
  2223  00EF07  00                 	db	0
  2224  00EF08  00                 	db	0
  2225  00EF09  00                 	db	0
  2226  00EF0A  00                 	db	0
  2227  00EF0B  00                 	db	0
  2228  00EF0C  00                 	db	0
  2229  00EF0D  00                 	db	0
  2230  00EF0E  00                 	db	0
  2231  00EF0F  00                 	db	0
  2232  00EF10  00                 	db	0
  2233  00EF11  00                 	db	0
  2234  00EF12  45                 	db	69
  2235  00EF13  78                 	db	120
  2236  00EF14  69                 	db	105
  2237  00EF15  74                 	db	116
  2238  00EF16  00                 	db	0
  2239  00EF17  00                 	db	0
  2240  00EF18  00                 	db	0
  2241  00EF19  00                 	db	0
  2242  00EF1A  00                 	db	0
  2243  00EF1B  00                 	db	0
  2244  00EF1C  00                 	db	0
  2245  00EF1D  00                 	db	0
  2246  00EF1E  00                 	db	0
  2247  00EF1F  00                 	db	0
  2248  00EF20  00                 	db	0
  2249  00EF21  00                 	db	0
  2250  00EF22  00                 	db	0
  2251  00EF23  43                 	db	67
  2252  00EF24  57                 	db	87
  2253  00EF25  20                 	db	32
  2254  00EF26  49                 	db	73
  2255  00EF27  53                 	db	83
  2256  00EF28  20                 	db	32
  2257  00EF29  49                 	db	73
  2258  00EF2A  4E                 	db	78
  2259  00EF2B  43                 	db	67
  2260  00EF2C  52                 	db	82
  2261  00EF2D  45                 	db	69
  2262  00EF2E  41                 	db	65
  2263  00EF2F  53                 	db	83
  2264  00EF30  45                 	db	69
  2265  00EF31  00                 	db	0
  2266  00EF32  00                 	db	0
  2267  00EF33  00                 	db	0
  2268  00EF34  43                 	db	67
  2269  00EF35  43                 	db	67
  2270  00EF36  57                 	db	87
  2271  00EF37  20                 	db	32
  2272  00EF38  49                 	db	73
  2273  00EF39  53                 	db	83
  2274  00EF3A  20                 	db	32
  2275  00EF3B  49                 	db	73
  2276  00EF3C  4E                 	db	78
  2277  00EF3D  43                 	db	67
  2278  00EF3E  52                 	db	82
  2279  00EF3F  45                 	db	69
  2280  00EF40  41                 	db	65
  2281  00EF41  53                 	db	83
  2282  00EF42  45                 	db	69
  2283  00EF43  00                 	db	0
  2284  00EF44  00                 	db	0
  2285  00EF45  41                 	db	65
  2286  00EF46  72                 	db	114
  2287  00EF47  70                 	db	112
  2288  00EF48  65                 	db	101
  2289  00EF49  67                 	db	103
  2290  00EF4A  67                 	db	103
  2291  00EF4B  69                 	db	105
  2292  00EF4C  6F                 	db	111
  2293  00EF4D  20                 	db	32
  2294  00EF4E  4F                 	db	79
  2295  00EF4F  46                 	db	70
  2296  00EF50  46                 	db	70
  2297  00EF51  2F                 	db	47
  2298  00EF52  4F                 	db	79
  2299  00EF53  4E                 	db	78
  2300  00EF54  00                 	db	0
  2301  00EF55  00                 	db	0
  2302  00EF56  54                 	db	84
  2303  00EF57  65                 	db	101
  2304  00EF58  6D                 	db	109
  2305  00EF59  70                 	db	112
  2306  00EF5A  6F                 	db	111
  2307  00EF5B  00                 	db	0
  2308  00EF5C  00                 	db	0
  2309  00EF5D  00                 	db	0
  2310  00EF5E  00                 	db	0
  2311  00EF5F  00                 	db	0
  2312  00EF60  00                 	db	0
  2313  00EF61  00                 	db	0
  2314  00EF62  00                 	db	0
  2315  00EF63  00                 	db	0
  2316  00EF64  00                 	db	0
  2317  00EF65  00                 	db	0
  2318  00EF66  00                 	db	0
  2319  00EF67  4F                 	db	79
  2320  00EF68  63                 	db	99
  2321  00EF69  74                 	db	116
  2322  00EF6A  61                 	db	97
  2323  00EF6B  76                 	db	118
  2324  00EF6C  65                 	db	101
  2325  00EF6D  20                 	db	32
  2326  00EF6E  52                 	db	82
  2327  00EF6F  61                 	db	97
  2328  00EF70  6E                 	db	110
  2329  00EF71  67                 	db	103
  2330  00EF72  65                 	db	101
  2331  00EF73  00                 	db	0
  2332  00EF74  00                 	db	0
  2333  00EF75  00                 	db	0
  2334  00EF76  00                 	db	0
  2335  00EF77  00                 	db	0
  2336  00EF78  41                 	db	65
  2337  00EF79  72                 	db	114
  2338  00EF7A  70                 	db	112
  2339  00EF7B  65                 	db	101
  2340  00EF7C  67                 	db	103
  2341  00EF7D  67                 	db	103
  2342  00EF7E  69                 	db	105
  2343  00EF7F  6F                 	db	111
  2344  00EF80  20                 	db	32
  2345  00EF81  54                 	db	84
  2346  00EF82  79                 	db	121
  2347  00EF83  70                 	db	112
  2348  00EF84  65                 	db	101
  2349  00EF85  00                 	db	0
  2350  00EF86  00                 	db	0
  2351  00EF87  00                 	db	0
  2352  00EF88  00                 	db	0
  2353  00EF89  4E                 	db	78
  2354  00EF8A  6F                 	db	111
  2355  00EF8B  74                 	db	116
  2356  00EF8C  65                 	db	101
  2357  00EF8D  20                 	db	32
  2358  00EF8E  4C                 	db	76
  2359  00EF8F  65                 	db	101
  2360  00EF90  6E                 	db	110
  2361  00EF91  67                 	db	103
  2362  00EF92  74                 	db	116
  2363  00EF93  68                 	db	104
  2364  00EF94  00                 	db	0
  2365  00EF95  00                 	db	0
  2366  00EF96  00                 	db	0
  2367  00EF97  00                 	db	0
  2368  00EF98  00                 	db	0
  2369  00EF99  00                 	db	0
  2370  00EF9A  4C                 	db	76
  2371  00EF9B  61                 	db	97
  2372  00EF9C  74                 	db	116
  2373  00EF9D  63                 	db	99
  2374  00EF9E  68                 	db	104
  2375  00EF9F  2F                 	db	47
  2376  00EFA0  41                 	db	65
  2377  00EFA1  75                 	db	117
  2378  00EFA2  74                 	db	116
  2379  00EFA3  6F                 	db	111
  2380  00EFA4  20                 	db	32
  2381  00EFA5  4C                 	db	76
  2382  00EFA6  61                 	db	97
  2383  00EFA7  74                 	db	116
  2384  00EFA8  63                 	db	99
  2385  00EFA9  68                 	db	104
  2386  00EFAA  00                 	db	0
  2387  00EFAB  55                 	db	85
  2388  00EFAC  6E                 	db	110
  2389  00EFAD  2D                 	db	45
  2390  00EFAE  6C                 	db	108
  2391  00EFAF  61                 	db	97
  2392  00EFB0  74                 	db	116
  2393  00EFB1  63                 	db	99
  2394  00EFB2  68                 	db	104
  2395  00EFB3  20                 	db	32
  2396  00EFB4  4D                 	db	77
  2397  00EFB5  6F                 	db	111
  2398  00EFB6  64                 	db	100
  2399  00EFB7  65                 	db	101
  2400  00EFB8  00                 	db	0
  2401  00EFB9  00                 	db	0
  2402  00EFBA  00                 	db	0
  2403  00EFBB  00                 	db	0
  2404  00EFBC  52                 	db	82
  2405  00EFBD  61                 	db	97
  2406  00EFBE  6E                 	db	110
  2407  00EFBF  64                 	db	100
  2408  00EFC0  6F                 	db	111
  2409  00EFC1  6D                 	db	109
  2410  00EFC2  69                 	db	105
  2411  00EFC3  7A                 	db	122
  2412  00EFC4  65                 	db	101
  2413  00EFC5  2F                 	db	47
  2414  00EFC6  53                 	db	83
  2415  00EFC7  6B                 	db	107
  2416  00EFC8  69                 	db	105
  2417  00EFC9  70                 	db	112
  2418  00EFCA  00                 	db	0
  2419  00EFCB  00                 	db	0
  2420  00EFCC  00                 	db	0
  2421  00EFCD  4C                 	db	76
  2422  00EFCE  61                 	db	97
  2423  00EFCF  73                 	db	115
  2424  00EFD0  74                 	db	116
  2425  00EFD1  20                 	db	32
  2426  00EFD2  4E                 	db	78
  2427  00EFD3  6F                 	db	111
  2428  00EFD4  74                 	db	116
  2429  00EFD5  65                 	db	101
  2430  00EFD6  20                 	db	32
  2431  00EFD7  4D                 	db	77
  2432  00EFD8  6F                 	db	111
  2433  00EFD9  64                 	db	100
  2434  00EFDA  65                 	db	101
  2435  00EFDB  00                 	db	0
  2436  00EFDC  00                 	db	0
  2437  00EFDD  00                 	db	0
  2438  00EFDE  41                 	db	65
  2439  00EFDF  52                 	db	82
  2440  00EFE0  50                 	db	80
  2441  00EFE1  45                 	db	69
  2442  00EFE2  47                 	db	71
  2443  00EFE3  47                 	db	71
  2444  00EFE4  49                 	db	73
  2445  00EFE5  41                 	db	65
  2446  00EFE6  54                 	db	84
  2447  00EFE7  4F                 	db	79
  2448  00EFE8  52                 	db	82
  2449  00EFE9  20                 	db	32
  2450  00EFEA  4F                 	db	79
  2451  00EFEB  46                 	db	70
  2452  00EFEC  46                 	db	70
  2453  00EFED  00                 	db	0
  2454  00EFEE  00                 	db	0
  2455  00EFEF  41                 	db	65
  2456  00EFF0  52                 	db	82
  2457  00EFF1  50                 	db	80
  2458  00EFF2  45                 	db	69
  2459  00EFF3  47                 	db	71
  2460  00EFF4  47                 	db	71
  2461  00EFF5  49                 	db	73
  2462  00EFF6  41                 	db	65
  2463  00EFF7  54                 	db	84
  2464  00EFF8  4F                 	db	79
  2465  00EFF9  52                 	db	82
  2466  00EFFA  20                 	db	32
  2467  00EFFB  4F                 	db	79
  2468  00EFFC  4E                 	db	78
  2469  00EFFD  00                 	db	0
  2470  00EFFE  00                 	db	0
  2471  00EFFF  00                 	db	0
  2472  00F000  55                 	db	85
  2473  00F001  50                 	db	80
  2474  00F002  00                 	db	0
  2475  00F003  00                 	db	0
  2476  00F004  00                 	db	0
  2477  00F005  00                 	db	0
  2478  00F006  00                 	db	0
  2479  00F007  00                 	db	0
  2480  00F008  00                 	db	0
  2481  00F009  00                 	db	0
  2482  00F00A  00                 	db	0
  2483  00F00B  00                 	db	0
  2484  00F00C  00                 	db	0
  2485  00F00D  00                 	db	0
  2486  00F00E  00                 	db	0
  2487  00F00F  00                 	db	0
  2488  00F010  00                 	db	0
  2489  00F011  44                 	db	68
  2490  00F012  4F                 	db	79
  2491  00F013  57                 	db	87
  2492  00F014  4E                 	db	78
  2493  00F015  00                 	db	0
  2494  00F016  00                 	db	0
  2495  00F017  00                 	db	0
  2496  00F018  00                 	db	0
  2497  00F019  00                 	db	0
  2498  00F01A  00                 	db	0
  2499  00F01B  00                 	db	0
  2500  00F01C  00                 	db	0
  2501  00F01D  00                 	db	0
  2502  00F01E  00                 	db	0
  2503  00F01F  00                 	db	0
  2504  00F020  00                 	db	0
  2505  00F021  00                 	db	0
  2506  00F022  55                 	db	85
  2507  00F023  50                 	db	80
  2508  00F024  2F                 	db	47
  2509  00F025  44                 	db	68
  2510  00F026  4F                 	db	79
  2511  00F027  57                 	db	87
  2512  00F028  4E                 	db	78
  2513  00F029  00                 	db	0
  2514  00F02A  00                 	db	0
  2515  00F02B  00                 	db	0
  2516  00F02C  00                 	db	0
  2517  00F02D  00                 	db	0
  2518  00F02E  00                 	db	0
  2519  00F02F  00                 	db	0
  2520  00F030  00                 	db	0
  2521  00F031  00                 	db	0
  2522  00F032  00                 	db	0
  2523  00F033  44                 	db	68
  2524  00F034  4F                 	db	79
  2525  00F035  57                 	db	87
  2526  00F036  4E                 	db	78
  2527  00F037  2F                 	db	47
  2528  00F038  55                 	db	85
  2529  00F039  50                 	db	80
  2530  00F03A  00                 	db	0
  2531  00F03B  00                 	db	0
  2532  00F03C  00                 	db	0
  2533  00F03D  00                 	db	0
  2534  00F03E  00                 	db	0
  2535  00F03F  00                 	db	0
  2536  00F040  00                 	db	0
  2537  00F041  00                 	db	0
  2538  00F042  00                 	db	0
  2539  00F043  00                 	db	0
  2540  00F044  53                 	db	83
  2541  00F045  48                 	db	72
  2542  00F046  55                 	db	85
  2543  00F047  46                 	db	70
  2544  00F048  46                 	db	70
  2545  00F049  4C                 	db	76
  2546  00F04A  45                 	db	69
  2547  00F04B  00                 	db	0
  2548  00F04C  00                 	db	0
  2549  00F04D  00                 	db	0
  2550  00F04E  00                 	db	0
  2551  00F04F  00                 	db	0
  2552  00F050  00                 	db	0
  2553  00F051  00                 	db	0
  2554  00F052  00                 	db	0
  2555  00F053  00                 	db	0
  2556  00F054  00                 	db	0
  2557  00F055  52                 	db	82
  2558  00F056  41                 	db	65
  2559  00F057  4E                 	db	78
  2560  00F058  44                 	db	68
  2561  00F059  4F                 	db	79
  2562  00F05A  4D                 	db	77
  2563  00F05B  00                 	db	0
  2564  00F05C  00                 	db	0
  2565  00F05D  00                 	db	0
  2566  00F05E  00                 	db	0
  2567  00F05F  00                 	db	0
  2568  00F060  00                 	db	0
  2569  00F061  00                 	db	0
  2570  00F062  00                 	db	0
  2571  00F063  00                 	db	0
  2572  00F064  00                 	db	0
  2573  00F065  00                 	db	0
  2574  00F066  41                 	db	65
  2575  00F067  53                 	db	83
  2576  00F068  20                 	db	32
  2577  00F069  50                 	db	80
  2578  00F06A  52                 	db	82
  2579  00F06B  45                 	db	69
  2580  00F06C  53                 	db	83
  2581  00F06D  53                 	db	83
  2582  00F06E  45                 	db	69
  2583  00F06F  44                 	db	68
  2584  00F070  00                 	db	0
  2585  00F071  00                 	db	0
  2586  00F072  00                 	db	0
  2587  00F073  00                 	db	0
  2588  00F074  00                 	db	0
  2589  00F075  00                 	db	0
  2590  00F076  00                 	db	0
  2591  00F077  31                 	db	49
  2592  00F078  2F                 	db	47
  2593  00F079  34                 	db	52
  2594  00F07A  00                 	db	0
  2595  00F07B  00                 	db	0
  2596  00F07C  00                 	db	0
  2597  00F07D  00                 	db	0
  2598  00F07E  00                 	db	0
  2599  00F07F  00                 	db	0
  2600  00F080  00                 	db	0
  2601  00F081  00                 	db	0
  2602  00F082  00                 	db	0
  2603  00F083  00                 	db	0
  2604  00F084  00                 	db	0
  2605  00F085  00                 	db	0
  2606  00F086  00                 	db	0
  2607  00F087  00                 	db	0
  2608  00F088  31                 	db	49
  2609  00F089  2F                 	db	47
  2610  00F08A  34                 	db	52
  2611  00F08B  20                 	db	32
  2612  00F08C  44                 	db	68
  2613  00F08D  4F                 	db	79
  2614  00F08E  54                 	db	84
  2615  00F08F  54                 	db	84
  2616  00F090  45                 	db	69
  2617  00F091  44                 	db	68
  2618  00F092  00                 	db	0
  2619  00F093  00                 	db	0
  2620  00F094  00                 	db	0
  2621  00F095  00                 	db	0
  2622  00F096  00                 	db	0
  2623  00F097  00                 	db	0
  2624  00F098  00                 	db	0
  2625  00F099  31                 	db	49
  2626  00F09A  2F                 	db	47
  2627  00F09B  34                 	db	52
  2628  00F09C  20                 	db	32
  2629  00F09D  54                 	db	84
  2630  00F09E  52                 	db	82
  2631  00F09F  49                 	db	73
  2632  00F0A0  50                 	db	80
  2633  00F0A1  4C                 	db	76
  2634  00F0A2  45                 	db	69
  2635  00F0A3  54                 	db	84
  2636  00F0A4  00                 	db	0
  2637  00F0A5  00                 	db	0
  2638  00F0A6  00                 	db	0
  2639  00F0A7  00                 	db	0
  2640  00F0A8  00                 	db	0
  2641  00F0A9  00                 	db	0
  2642  00F0AA  31                 	db	49
  2643  00F0AB  2F                 	db	47
  2644  00F0AC  38                 	db	56
  2645  00F0AD  00                 	db	0
  2646  00F0AE  00                 	db	0
  2647  00F0AF  00                 	db	0
  2648  00F0B0  00                 	db	0
  2649  00F0B1  00                 	db	0
  2650  00F0B2  00                 	db	0
  2651  00F0B3  00                 	db	0
  2652  00F0B4  00                 	db	0
  2653  00F0B5  00                 	db	0
  2654  00F0B6  00                 	db	0
  2655  00F0B7  00                 	db	0
  2656  00F0B8  00                 	db	0
  2657  00F0B9  00                 	db	0
  2658  00F0BA  00                 	db	0
  2659  00F0BB  31                 	db	49
  2660  00F0BC  2F                 	db	47
  2661  00F0BD  38                 	db	56
  2662  00F0BE  20                 	db	32
  2663  00F0BF  44                 	db	68
  2664  00F0C0  4F                 	db	79
  2665  00F0C1  54                 	db	84
  2666  00F0C2  54                 	db	84
  2667  00F0C3  45                 	db	69
  2668  00F0C4  44                 	db	68
  2669  00F0C5  00                 	db	0
  2670  00F0C6  00                 	db	0
  2671  00F0C7  00                 	db	0
  2672  00F0C8  00                 	db	0
  2673  00F0C9  00                 	db	0
  2674  00F0CA  00                 	db	0
  2675  00F0CB  00                 	db	0
  2676  00F0CC  31                 	db	49
  2677  00F0CD  2F                 	db	47
  2678  00F0CE  38                 	db	56
  2679  00F0CF  20                 	db	32
  2680  00F0D0  54                 	db	84
  2681  00F0D1  52                 	db	82
  2682  00F0D2  49                 	db	73
  2683  00F0D3  50                 	db	80
  2684  00F0D4  4C                 	db	76
  2685  00F0D5  45                 	db	69
  2686  00F0D6  54                 	db	84
  2687  00F0D7  00                 	db	0
  2688  00F0D8  00                 	db	0
  2689  00F0D9  00                 	db	0
  2690  00F0DA  00                 	db	0
  2691  00F0DB  00                 	db	0
  2692  00F0DC  00                 	db	0
  2693  00F0DD  31                 	db	49
  2694  00F0DE  2F                 	db	47
  2695  00F0DF  31                 	db	49
  2696  00F0E0  36                 	db	54
  2697  00F0E1  00                 	db	0
  2698  00F0E2  00                 	db	0
  2699  00F0E3  00                 	db	0
  2700  00F0E4  00                 	db	0
  2701  00F0E5  00                 	db	0
  2702  00F0E6  00                 	db	0
  2703  00F0E7  00                 	db	0
  2704  00F0E8  00                 	db	0
  2705  00F0E9  00                 	db	0
  2706  00F0EA  00                 	db	0
  2707  00F0EB  00                 	db	0
  2708  00F0EC  00                 	db	0
  2709  00F0ED  00                 	db	0
  2710  00F0EE  31                 	db	49
  2711  00F0EF  2F                 	db	47
  2712  00F0F0  31                 	db	49
  2713  00F0F1  36                 	db	54
  2714  00F0F2  20                 	db	32
  2715  00F0F3  44                 	db	68
  2716  00F0F4  4F                 	db	79
  2717  00F0F5  54                 	db	84
  2718  00F0F6  54                 	db	84
  2719  00F0F7  45                 	db	69
  2720  00F0F8  44                 	db	68
  2721  00F0F9  00                 	db	0
  2722  00F0FA  00                 	db	0
  2723  00F0FB  00                 	db	0
  2724  00F0FC  00                 	db	0
  2725  00F0FD  00                 	db	0
  2726  00F0FE  00                 	db	0
  2727  00F0FF  31                 	db	49
  2728  00F100  2F                 	db	47
  2729  00F101  31                 	db	49
  2730  00F102  36                 	db	54
  2731  00F103  20                 	db	32
  2732  00F104  54                 	db	84
  2733  00F105  52                 	db	82
  2734  00F106  49                 	db	73
  2735  00F107  50                 	db	80
  2736  00F108  4C                 	db	76
  2737  00F109  45                 	db	69
  2738  00F10A  54                 	db	84
  2739  00F10B  00                 	db	0
  2740  00F10C  00                 	db	0
  2741  00F10D  00                 	db	0
  2742  00F10E  00                 	db	0
  2743  00F10F  00                 	db	0
  2744  00F110  31                 	db	49
  2745  00F111  2F                 	db	47
  2746  00F112  33                 	db	51
  2747  00F113  32                 	db	50
  2748  00F114  00                 	db	0
  2749  00F115  00                 	db	0
  2750  00F116  00                 	db	0
  2751  00F117  00                 	db	0
  2752  00F118  00                 	db	0
  2753  00F119  00                 	db	0
  2754  00F11A  00                 	db	0
  2755  00F11B  00                 	db	0
  2756  00F11C  00                 	db	0
  2757  00F11D  00                 	db	0
  2758  00F11E  00                 	db	0
  2759  00F11F  00                 	db	0
  2760  00F120  00                 	db	0
  2761  00F121  31                 	db	49
  2762  00F122  2F                 	db	47
  2763  00F123  33                 	db	51
  2764  00F124  32                 	db	50
  2765  00F125  20                 	db	32
  2766  00F126  44                 	db	68
  2767  00F127  4F                 	db	79
  2768  00F128  54                 	db	84
  2769  00F129  54                 	db	84
  2770  00F12A  45                 	db	69
  2771  00F12B  44                 	db	68
  2772  00F12C  00                 	db	0
  2773  00F12D  00                 	db	0
  2774  00F12E  00                 	db	0
  2775  00F12F  00                 	db	0
  2776  00F130  00                 	db	0
  2777  00F131  00                 	db	0
  2778  00F132  31                 	db	49
  2779  00F133  2F                 	db	47
  2780  00F134  33                 	db	51
  2781  00F135  32                 	db	50
  2782  00F136  20                 	db	32
  2783  00F137  54                 	db	84
  2784  00F138  52                 	db	82
  2785  00F139  49                 	db	73
  2786  00F13A  50                 	db	80
  2787  00F13B  4C                 	db	76
  2788  00F13C  45                 	db	69
  2789  00F13D  54                 	db	84
  2790  00F13E  00                 	db	0
  2791  00F13F  00                 	db	0
  2792  00F140  00                 	db	0
  2793  00F141  00                 	db	0
  2794  00F142  00                 	db	0
  2795  00F143  53                 	db	83
  2796  00F144  45                 	db	69
  2797  00F145  54                 	db	84
  2798  00F146  2F                 	db	47
  2799  00F147  43                 	db	67
  2800  00F148  4C                 	db	76
  2801  00F149  45                 	db	69
  2802  00F14A  41                 	db	65
  2803  00F14B  52                 	db	82
  2804  00F14C  20                 	db	32
  2805  00F14D  4C                 	db	76
  2806  00F14E  41                 	db	65
  2807  00F14F  54                 	db	84
  2808  00F150  43                 	db	67
  2809  00F151  48                 	db	72
  2810  00F152  00                 	db	0
  2811  00F153  00                 	db	0
  2812  00F154  41                 	db	65
  2813  00F155  55                 	db	85
  2814  00F156  54                 	db	84
  2815  00F157  4F                 	db	79
  2816  00F158  20                 	db	32
  2817  00F159  4C                 	db	76
  2818  00F15A  41                 	db	65
  2819  00F15B  54                 	db	84
  2820  00F15C  43                 	db	67
  2821  00F15D  48                 	db	72
  2822  00F15E  00                 	db	0
  2823  00F15F  00                 	db	0
  2824  00F160  00                 	db	0
  2825  00F161  00                 	db	0
  2826  00F162  00                 	db	0
  2827  00F163  00                 	db	0
  2828  00F164  00                 	db	0
  2829  00F165  55                 	db	85
  2830  00F166  6E                 	db	110
  2831  00F167  2D                 	db	45
  2832  00F168  4C                 	db	76
  2833  00F169  61                 	db	97
  2834  00F16A  74                 	db	116
  2835  00F16B  63                 	db	99
  2836  00F16C  68                 	db	104
  2837  00F16D  20                 	db	32
  2838  00F16E  4D                 	db	77
  2839  00F16F  6F                 	db	111
  2840  00F170  64                 	db	100
  2841  00F171  65                 	db	101
  2842  00F172  00                 	db	0
  2843  00F173  00                 	db	0
  2844  00F174  00                 	db	0
  2845  00F175  00                 	db	0
  2846  00F176  55                 	db	85
  2847  00F177  4E                 	db	78
  2848  00F178  4C                 	db	76
  2849  00F179  41                 	db	65
  2850  00F17A  54                 	db	84
  2851  00F17B  43                 	db	67
  2852  00F17C  48                 	db	72
  2853  00F17D  20                 	db	32
  2854  00F17E  41                 	db	65
  2855  00F17F  4C                 	db	76
  2856  00F180  4C                 	db	76
  2857  00F181  00                 	db	0
  2858  00F182  00                 	db	0
  2859  00F183  00                 	db	0
  2860  00F184  00                 	db	0
  2861  00F185  00                 	db	0
  2862  00F186  00                 	db	0
  2863  00F187  4F                 	db	79
  2864  00F188  4E                 	db	78
  2865  00F189  45                 	db	69
  2866  00F18A  20                 	db	32
  2867  00F18B  41                 	db	65
  2868  00F18C  54                 	db	84
  2869  00F18D  20                 	db	32
  2870  00F18E  41                 	db	65
  2871  00F18F  20                 	db	32
  2872  00F190  54                 	db	84
  2873  00F191  49                 	db	73
  2874  00F192  4D                 	db	77
  2875  00F193  45                 	db	69
  2876  00F194  00                 	db	0
  2877  00F195  00                 	db	0
  2878  00F196  00                 	db	0
  2879  00F197  00                 	db	0
  2880  00F198  52                 	db	82
  2881  00F199  61                 	db	97
  2882  00F19A  6E                 	db	110
  2883  00F19B  64                 	db	100
  2884  00F19C  6F                 	db	111
  2885  00F19D  6D                 	db	109
  2886  00F19E  69                 	db	105
  2887  00F19F  7A                 	db	122
  2888  00F1A0  65                 	db	101
  2889  00F1A1  00                 	db	0
  2890  00F1A2  00                 	db	0
  2891  00F1A3  00                 	db	0
  2892  00F1A4  00                 	db	0
  2893  00F1A5  00                 	db	0
  2894  00F1A6  00                 	db	0
  2895  00F1A7  00                 	db	0
  2896  00F1A8  00                 	db	0
  2897  00F1A9  53                 	db	83
  2898  00F1AA  6B                 	db	107
  2899  00F1AB  69                 	db	105
  2900  00F1AC  70                 	db	112
  2901  00F1AD  20                 	db	32
  2902  00F1AE  46                 	db	70
  2903  00F1AF  69                 	db	105
  2904  00F1B0  72                 	db	114
  2905  00F1B1  73                 	db	115
  2906  00F1B2  74                 	db	116
  2907  00F1B3  2F                 	db	47
  2908  00F1B4  4C                 	db	76
  2909  00F1B5  61                 	db	97
  2910  00F1B6  73                 	db	115
  2911  00F1B7  74                 	db	116
  2912  00F1B8  00                 	db	0
  2913  00F1B9  00                 	db	0
  2914  00F1BA  52                 	db	82
  2915  00F1BB  41                 	db	65
  2916  00F1BC  4E                 	db	78
  2917  00F1BD  44                 	db	68
  2918  00F1BE  4F                 	db	79
  2919  00F1BF  4D                 	db	77
  2920  00F1C0  49                 	db	73
  2921  00F1C1  5A                 	db	90
  2922  00F1C2  45                 	db	69
  2923  00F1C3  20                 	db	32
  2924  00F1C4  41                 	db	65
  2925  00F1C5  55                 	db	85
  2926  00F1C6  54                 	db	84
  2927  00F1C7  4F                 	db	79
  2928  00F1C8  00                 	db	0
  2929  00F1C9  00                 	db	0
  2930  00F1CA  00                 	db	0
  2931  00F1CB  52                 	db	82
  2932  00F1CC  41                 	db	65
  2933  00F1CD  4E                 	db	78
  2934  00F1CE  44                 	db	68
  2935  00F1CF  4F                 	db	79
  2936  00F1D0  4D                 	db	77
  2937  00F1D1  49                 	db	73
  2938  00F1D2  5A                 	db	90
  2939  00F1D3  45                 	db	69
  2940  00F1D4  20                 	db	32
  2941  00F1D5  4F                 	db	79
  2942  00F1D6  4E                 	db	78
  2943  00F1D7  43                 	db	67
  2944  00F1D8  45                 	db	69
  2945  00F1D9  00                 	db	0
  2946  00F1DA  00                 	db	0
  2947  00F1DB  00                 	db	0
  2948  00F1DC  4B                 	db	75
  2949  00F1DD  65                 	db	101
  2950  00F1DE  79                 	db	121
  2951  00F1DF  20                 	db	32
  2952  00F1E0  70                 	db	112
  2953  00F1E1  72                 	db	114
  2954  00F1E2  65                 	db	101
  2955  00F1E3  73                 	db	115
  2956  00F1E4  73                 	db	115
  2957  00F1E5  00                 	db	0
  2958  00F1E6  00                 	db	0
  2959  00F1E7  00                 	db	0
  2960  00F1E8  00                 	db	0
  2961  00F1E9  00                 	db	0
  2962  00F1EA  00                 	db	0
  2963  00F1EB  00                 	db	0
  2964  00F1EC  00                 	db	0
  2965  00F1ED  4B                 	db	75
  2966  00F1EE  65                 	db	101
  2967  00F1EF  79                 	db	121
  2968  00F1F0  20                 	db	32
  2969  00F1F1  72                 	db	114
  2970  00F1F2  65                 	db	101
  2971  00F1F3  6C                 	db	108
  2972  00F1F4  65                 	db	101
  2973  00F1F5  61                 	db	97
  2974  00F1F6  73                 	db	115
  2975  00F1F7  65                 	db	101
  2976  00F1F8  00                 	db	0
  2977  00F1F9  00                 	db	0
  2978  00F1FA  00                 	db	0
  2979  00F1FB  00                 	db	0
  2980  00F1FC  00                 	db	0
  2981  00F1FD  00                 	db	0
  2982  00F1FE  54                 	db	84
  2983  00F1FF  72                 	db	114
  2984  00F200  61                 	db	97
  2985  00F201  6E                 	db	110
  2986  00F202  73                 	db	115
  2987  00F203  70                 	db	112
  2988  00F204  6F                 	db	111
  2989  00F205  73                 	db	115
  2990  00F206  65                 	db	101
  2991  00F207  00                 	db	0
  2992  00F208  00                 	db	0
  2993  00F209  00                 	db	0
  2994  00F20A  00                 	db	0
  2995  00F20B  00                 	db	0
  2996  00F20C  00                 	db	0
  2997  00F20D  00                 	db	0
  2998  00F20E  00                 	db	0
  2999  00F20F  52                 	db	82
  3000  00F210  65                 	db	101
  3001  00F211  73                 	db	115
  3002  00F212  65                 	db	101
  3003  00F213  74                 	db	116
  3004  00F214  00                 	db	0
  3005  00F215  00                 	db	0
  3006  00F216  00                 	db	0
  3007  00F217  00                 	db	0
  3008  00F218  00                 	db	0
  3009  00F219  00                 	db	0
  3010  00F21A  00                 	db	0
  3011  00F21B  00                 	db	0
  3012  00F21C  00                 	db	0
  3013  00F21D  00                 	db	0
  3014  00F21E  00                 	db	0
  3015  00F21F  00                 	db	0
  3016  00F220                     __end_ofascii@LCD_STRINGS:
  3017                           	opt stack 0
  3018  00F220                     _seg_ascii:
  3019                           	opt stack 0
  3020  00F220  3F                 	db	63
  3021  00F221  06                 	db	6
  3022  00F222  5B                 	db	91
  3023  00F223  4F                 	db	79
  3024  00F224  66                 	db	102
  3025  00F225  6D                 	db	109
  3026  00F226  7D                 	db	125
  3027  00F227  07                 	db	7
  3028  00F228  7F                 	db	127
  3029  00F229  6F                 	db	111
  3030  00F22A  00                 	db	0
  3031  00F22B  00                 	db	0
  3032  00F22C  00                 	db	0
  3033  00F22D  00                 	db	0
  3034  00F22E  00                 	db	0
  3035  00F22F  00                 	db	0
  3036  00F230  00                 	db	0
  3037  00F231  77                 	db	119
  3038  00F232  00                 	db	0
  3039  00F233  39                 	db	57
  3040  00F234  00                 	db	0
  3041  00F235  79                 	db	121
  3042  00F236  71                 	db	113
  3043  00F237  3D                 	db	61
  3044  00F238  76                 	db	118
  3045  00F239  30                 	db	48
  3046  00F23A  1E                 	db	30
  3047  00F23B  00                 	db	0
  3048  00F23C  38                 	db	56
  3049  00F23D  00                 	db	0
  3050  00F23E  00                 	db	0
  3051  00F23F  3F                 	db	63
  3052  00F240  73                 	db	115
  3053  00F241  00                 	db	0
  3054  00F242  00                 	db	0
  3055  00F243  6D                 	db	109
  3056  00F244  00                 	db	0
  3057  00F245  3E                 	db	62
  3058  00F246  00                 	db	0
  3059  00F247  00                 	db	0
  3060  00F248  00                 	db	0
  3061  00F249  00                 	db	0
  3062  00F24A  00                 	db	0
  3063  00F24B  00                 	db	0
  3064  00F24C  00                 	db	0
  3065  00F24D  00                 	db	0
  3066  00F24E  00                 	db	0
  3067  00F24F  00                 	db	0
  3068  00F250  00                 	db	0
  3069  00F251  5F                 	db	95
  3070  00F252  7C                 	db	124
  3071  00F253  58                 	db	88
  3072  00F254  5E                 	db	94
  3073  00F255  00                 	db	0
  3074  00F256  00                 	db	0
  3075  00F257  00                 	db	0
  3076  00F258  74                 	db	116
  3077  00F259  00                 	db	0
  3078  00F25A  00                 	db	0
  3079  00F25B  00                 	db	0
  3080  00F25C  00                 	db	0
  3081  00F25D  00                 	db	0
  3082  00F25E  54                 	db	84
  3083  00F25F  5C                 	db	92
  3084  00F260  00                 	db	0
  3085  00F261  67                 	db	103
  3086  00F262  50                 	db	80
  3087  00F263  00                 	db	0
  3088  00F264  78                 	db	120
  3089  00F265  1C                 	db	28
  3090  00F266  00                 	db	0
  3091  00F267  00                 	db	0
  3092  00F268  00                 	db	0
  3093  00F269  6E                 	db	110
  3094  00F26A  00                 	db	0
  3095  00F26B                     __end_of_seg_ascii:
  3096                           	opt stack 0
  3097  00F26B                     _diatonic_seventh_minor:
  3098                           	opt stack 0
  3099  00F26B  00                 	db	0
  3100  00F26C  03                 	db	3
  3101  00F26D  07                 	db	7
  3102  00F26E  0A                 	db	10
  3103  00F26F  02                 	db	2
  3104  00F270  03                 	db	3
  3105  00F271  06                 	db	6
  3106  00F272  0A                 	db	10
  3107  00F273  03                 	db	3
  3108  00F274  04                 	db	4
  3109  00F275  07                 	db	7
  3110  00F276  0B                 	db	11
  3111  00F277  05                 	db	5
  3112  00F278  03                 	db	3
  3113  00F279  07                 	db	7
  3114  00F27A  0A                 	db	10
  3115  00F27B  07                 	db	7
  3116  00F27C  03                 	db	3
  3117  00F27D  07                 	db	7
  3118  00F27E  0A                 	db	10
  3119  00F27F  08                 	db	8
  3120  00F280  04                 	db	4
  3121  00F281  07                 	db	7
  3122  00F282  0B                 	db	11
  3123  00F283  0A                 	db	10
  3124  00F284  04                 	db	4
  3125  00F285  07                 	db	7
  3126  00F286  0A                 	db	10
  3127  00F287  0C                 	db	12
  3128  00F288  03                 	db	3
  3129  00F289  07                 	db	7
  3130  00F28A  0A                 	db	10
  3131  00F28B  0E                 	db	14
  3132  00F28C  03                 	db	3
  3133  00F28D  06                 	db	6
  3134  00F28E  0A                 	db	10
  3135  00F28F  0F                 	db	15
  3136  00F290  04                 	db	4
  3137  00F291  07                 	db	7
  3138  00F292  0B                 	db	11
  3139  00F293  11                 	db	17
  3140  00F294  03                 	db	3
  3141  00F295  07                 	db	7
  3142  00F296  0A                 	db	10
  3143  00F297  13                 	db	19
  3144  00F298  03                 	db	3
  3145  00F299  07                 	db	7
  3146  00F29A  0A                 	db	10
  3147  00F29B  14                 	db	20
  3148  00F29C  04                 	db	4
  3149  00F29D  07                 	db	7
  3150  00F29E  0B                 	db	11
  3151  00F29F  16                 	db	22
  3152  00F2A0  04                 	db	4
  3153  00F2A1  07                 	db	7
  3154  00F2A2  0A                 	db	10
  3155  00F2A3  18                 	db	24
  3156  00F2A4  03                 	db	3
  3157  00F2A5  07                 	db	7
  3158  00F2A6  0A                 	db	10
  3159  00F2A7                     __end_of_diatonic_seventh_minor:
  3160                           	opt stack 0
  3161  00F2A7                     _diatonic_seventh_major:
  3162                           	opt stack 0
  3163  00F2A7  00                 	db	0
  3164  00F2A8  04                 	db	4
  3165  00F2A9  07                 	db	7
  3166  00F2AA  0B                 	db	11
  3167  00F2AB  00                 	db	0
  3168  00F2AC  03                 	db	3
  3169  00F2AD  07                 	db	7
  3170  00F2AE  0A                 	db	10
  3171  00F2AF  00                 	db	0
  3172  00F2B0  03                 	db	3
  3173  00F2B1  07                 	db	7
  3174  00F2B2  0A                 	db	10
  3175  00F2B3  00                 	db	0
  3176  00F2B4  04                 	db	4
  3177  00F2B5  07                 	db	7
  3178  00F2B6  0B                 	db	11
  3179  00F2B7  00                 	db	0
  3180  00F2B8  04                 	db	4
  3181  00F2B9  07                 	db	7
  3182  00F2BA  0A                 	db	10
  3183  00F2BB  00                 	db	0
  3184  00F2BC  03                 	db	3
  3185  00F2BD  07                 	db	7
  3186  00F2BE  0A                 	db	10
  3187  00F2BF  00                 	db	0
  3188  00F2C0  03                 	db	3
  3189  00F2C1  06                 	db	6
  3190  00F2C2  0A                 	db	10
  3191  00F2C3  00                 	db	0
  3192  00F2C4  04                 	db	4
  3193  00F2C5  07                 	db	7
  3194  00F2C6  0B                 	db	11
  3195  00F2C7  00                 	db	0
  3196  00F2C8  03                 	db	3
  3197  00F2C9  07                 	db	7
  3198  00F2CA  0A                 	db	10
  3199  00F2CB  00                 	db	0
  3200  00F2CC  03                 	db	3
  3201  00F2CD  07                 	db	7
  3202  00F2CE  0A                 	db	10
  3203  00F2CF  00                 	db	0
  3204  00F2D0  04                 	db	4
  3205  00F2D1  07                 	db	7
  3206  00F2D2  0B                 	db	11
  3207  00F2D3  00                 	db	0
  3208  00F2D4  04                 	db	4
  3209  00F2D5  07                 	db	7
  3210  00F2D6  0A                 	db	10
  3211  00F2D7  00                 	db	0
  3212  00F2D8  03                 	db	3
  3213  00F2D9  07                 	db	7
  3214  00F2DA  0A                 	db	10
  3215  00F2DB  00                 	db	0
  3216  00F2DC  03                 	db	3
  3217  00F2DD  06                 	db	6
  3218  00F2DE  0A                 	db	10
  3219  00F2DF  00                 	db	0
  3220  00F2E0  04                 	db	4
  3221  00F2E1  07                 	db	7
  3222  00F2E2  0B                 	db	11
  3223  00F2E3                     __end_of_diatonic_seventh_major:
  3224                           	opt stack 0
  3225  00F2E3                     _diatonic_minor:
  3226                           	opt stack 0
  3227  00F2E3  00                 	db	0
  3228  00F2E4  03                 	db	3
  3229  00F2E5  07                 	db	7
  3230  00F2E6  02                 	db	2
  3231  00F2E7  03                 	db	3
  3232  00F2E8  06                 	db	6
  3233  00F2E9  03                 	db	3
  3234  00F2EA  04                 	db	4
  3235  00F2EB  07                 	db	7
  3236  00F2EC  05                 	db	5
  3237  00F2ED  03                 	db	3
  3238  00F2EE  07                 	db	7
  3239  00F2EF  07                 	db	7
  3240  00F2F0  03                 	db	3
  3241  00F2F1  07                 	db	7
  3242  00F2F2  08                 	db	8
  3243  00F2F3  04                 	db	4
  3244  00F2F4  07                 	db	7
  3245  00F2F5  0A                 	db	10
  3246  00F2F6  04                 	db	4
  3247  00F2F7  07                 	db	7
  3248  00F2F8  0C                 	db	12
  3249  00F2F9  03                 	db	3
  3250  00F2FA  07                 	db	7
  3251  00F2FB  0E                 	db	14
  3252  00F2FC  03                 	db	3
  3253  00F2FD  06                 	db	6
  3254  00F2FE  0F                 	db	15
  3255  00F2FF  04                 	db	4
  3256  00F300  07                 	db	7
  3257  00F301  11                 	db	17
  3258  00F302  03                 	db	3
  3259  00F303  07                 	db	7
  3260  00F304  13                 	db	19
  3261  00F305  03                 	db	3
  3262  00F306  07                 	db	7
  3263  00F307  14                 	db	20
  3264  00F308  04                 	db	4
  3265  00F309  07                 	db	7
  3266  00F30A  16                 	db	22
  3267  00F30B  04                 	db	4
  3268  00F30C  07                 	db	7
  3269  00F30D  18                 	db	24
  3270  00F30E  03                 	db	3
  3271  00F30F  07                 	db	7
  3272  00F310                     __end_of_diatonic_minor:
  3273                           	opt stack 0
  3274  00F310                     _diatonic_major:
  3275                           	opt stack 0
  3276  00F310  00                 	db	0
  3277  00F311  04                 	db	4
  3278  00F312  07                 	db	7
  3279  00F313  00                 	db	0
  3280  00F314  03                 	db	3
  3281  00F315  07                 	db	7
  3282  00F316  00                 	db	0
  3283  00F317  03                 	db	3
  3284  00F318  07                 	db	7
  3285  00F319  00                 	db	0
  3286  00F31A  04                 	db	4
  3287  00F31B  07                 	db	7
  3288  00F31C  00                 	db	0
  3289  00F31D  04                 	db	4
  3290  00F31E  07                 	db	7
  3291  00F31F  00                 	db	0
  3292  00F320  03                 	db	3
  3293  00F321  07                 	db	7
  3294  00F322  00                 	db	0
  3295  00F323  03                 	db	3
  3296  00F324  06                 	db	6
  3297  00F325  00                 	db	0
  3298  00F326  04                 	db	4
  3299  00F327  07                 	db	7
  3300  00F328  00                 	db	0
  3301  00F329  03                 	db	3
  3302  00F32A  07                 	db	7
  3303  00F32B  00                 	db	0
  3304  00F32C  03                 	db	3
  3305  00F32D  07                 	db	7
  3306  00F32E  00                 	db	0
  3307  00F32F  04                 	db	4
  3308  00F330  07                 	db	7
  3309  00F331  00                 	db	0
  3310  00F332  04                 	db	4
  3311  00F333  07                 	db	7
  3312  00F334  00                 	db	0
  3313  00F335  03                 	db	3
  3314  00F336  07                 	db	7
  3315  00F337  00                 	db	0
  3316  00F338  03                 	db	3
  3317  00F339  06                 	db	6
  3318  00F33A  00                 	db	0
  3319  00F33B  04                 	db	4
  3320  00F33C  07                 	db	7
  3321  00F33D                     __end_of_diatonic_major:
  3322                           	opt stack 0
  3323  00F33D                     _ttable:
  3324                           	opt stack 0
  3325  00F33D  00                 	db	0
  3326  00F33E  02                 	db	2
  3327  00F33F  04                 	db	4
  3328  00F340  00                 	db	0
  3329  00F341  03                 	db	3
  3330  00F342  00                 	db	0
  3331  00F343  01                 	db	1
  3332  00F344  10                 	db	16
  3333  00F345  03                 	db	3
  3334  00F346  02                 	db	2
  3335  00F347  00                 	db	0
  3336  00F348  00                 	db	0
  3337  00F349  03                 	db	3
  3338  00F34A  02                 	db	2
  3339  00F34B  01                 	db	1
  3340  00F34C  00                 	db	0
  3341  00F34D  06                 	db	6
  3342  00F34E  00                 	db	0
  3343  00F34F  04                 	db	4
  3344  00F350  00                 	db	0
  3345  00F351  06                 	db	6
  3346  00F352  05                 	db	5
  3347  00F353  00                 	db	0
  3348  00F354  20                 	db	32
  3349  00F355  06                 	db	6
  3350  00F356  05                 	db	5
  3351  00F357  04                 	db	4
  3352  00F358  00                 	db	0
  3353  00F359                     __end_of_ttable:
  3354                           	opt stack 0
  3355  00F359                     _seg_bcd_hex:
  3356                           	opt stack 0
  3357  00F359  3F                 	db	63
  3358  00F35A  06                 	db	6
  3359  00F35B  5B                 	db	91
  3360  00F35C  4F                 	db	79
  3361  00F35D  66                 	db	102
  3362  00F35E  6D                 	db	109
  3363  00F35F  7D                 	db	125
  3364  00F360  07                 	db	7
  3365  00F361  7F                 	db	127
  3366  00F362  6F                 	db	111
  3367  00F363  77                 	db	119
  3368  00F364  7C                 	db	124
  3369  00F365  39                 	db	57
  3370  00F366  5E                 	db	94
  3371  00F367  79                 	db	121
  3372  00F368  71                 	db	113
  3373  00F369                     __end_of_seg_bcd_hex:
  3374                           	opt stack 0
  3375  00F369                     _minor_key:
  3376                           	opt stack 0
  3377  00F369  00                 	db	0
  3378  00F36A  02                 	db	2
  3379  00F36B  03                 	db	3
  3380  00F36C  05                 	db	5
  3381  00F36D  07                 	db	7
  3382  00F36E  08                 	db	8
  3383  00F36F  0A                 	db	10
  3384  00F370  0C                 	db	12
  3385  00F371  0E                 	db	14
  3386  00F372  0F                 	db	15
  3387  00F373  11                 	db	17
  3388  00F374  13                 	db	19
  3389  00F375  14                 	db	20
  3390  00F376  16                 	db	22
  3391  00F377  18                 	db	24
  3392  00F378                     __end_of_minor_key:
  3393                           	opt stack 0
  3394  00F378                     _major_key:
  3395                           	opt stack 0
  3396  00F378  00                 	db	0
  3397  00F379  02                 	db	2
  3398  00F37A  04                 	db	4
  3399  00F37B  05                 	db	5
  3400  00F37C  07                 	db	7
  3401  00F37D  09                 	db	9
  3402  00F37E  0B                 	db	11
  3403  00F37F  0C                 	db	12
  3404  00F380  0E                 	db	14
  3405  00F381  10                 	db	16
  3406  00F382  11                 	db	17
  3407  00F383  13                 	db	19
  3408  00F384  15                 	db	21
  3409  00F385  17                 	db	23
  3410  00F386  18                 	db	24
  3411  00F387                     __end_of_major_key:
  3412                           	opt stack 0
  3413  00F387                     _pentatonic_minor_key:
  3414                           	opt stack 0
  3415  00F387  00                 	db	0
  3416  00F388  03                 	db	3
  3417  00F389  05                 	db	5
  3418  00F38A  07                 	db	7
  3419  00F38B  0A                 	db	10
  3420  00F38C  0C                 	db	12
  3421  00F38D  0F                 	db	15
  3422  00F38E  11                 	db	17
  3423  00F38F  13                 	db	19
  3424  00F390  16                 	db	22
  3425  00F391  18                 	db	24
  3426  00F392                     __end_of_pentatonic_minor_key:
  3427                           	opt stack 0
  3428  00F392                     _pentatonic_major_key:
  3429                           	opt stack 0
  3430  00F392  00                 	db	0
  3431  00F393  02                 	db	2
  3432  00F394  04                 	db	4
  3433  00F395  07                 	db	7
  3434  00F396  09                 	db	9
  3435  00F397  0C                 	db	12
  3436  00F398  0E                 	db	14
  3437  00F399  10                 	db	16
  3438  00F39A  13                 	db	19
  3439  00F39B  15                 	db	21
  3440  00F39C  18                 	db	24
  3441  00F39D                     __end_of_pentatonic_major_key:
  3442                           	opt stack 0
  3443  00F39D                     _MAX_NUM_NOTES:
  3444                           	opt stack 0
  3445  00F39D  10                 	db	16
  3446  00F39E                     __end_of_MAX_NUM_NOTES:
  3447                           	opt stack 0
  3448  00F39E                     _LCD_STRINGS:
  3449                           	opt stack 0
  3450  00F39E  4B                 	db	75
  3451  00F39F  45                 	db	69
  3452  00F3A0  59                 	db	89
  3453  00F3A1  42                 	db	66
  3454  00F3A2  4F                 	db	79
  3455  00F3A3  41                 	db	65
  3456  00F3A4  52                 	db	82
  3457  00F3A5  44                 	db	68
  3458  00F3A6  20                 	db	32
  3459  00F3A7  4D                 	db	77
  3460  00F3A8  4F                 	db	79
  3461  00F3A9  44                 	db	68
  3462  00F3AA  45                 	db	69
  3463  00F3AB  3A                 	db	58
  3464  00F3AC  00                 	db	0
  3465  00F3AD  00                 	db	0
  3466  00F3AE  00                 	db	0
  3467  00F3AF  41                 	db	65
  3468  00F3B0  52                 	db	82
  3469  00F3B1  50                 	db	80
  3470  00F3B2  45                 	db	69
  3471  00F3B3  47                 	db	71
  3472  00F3B4  47                 	db	71
  3473  00F3B5  49                 	db	73
  3474  00F3B6  4F                 	db	79
  3475  00F3B7  20                 	db	32
  3476  00F3B8  4D                 	db	77
  3477  00F3B9  45                 	db	69
  3478  00F3BA  4E                 	db	78
  3479  00F3BB  55                 	db	85
  3480  00F3BC  3A                 	db	58
  3481  00F3BD  00                 	db	0
  3482  00F3BE  00                 	db	0
  3483  00F3BF  00                 	db	0
  3484  00F3C0  54                 	db	84
  3485  00F3C1  52                 	db	82
  3486  00F3C2  41                 	db	65
  3487  00F3C3  4E                 	db	78
  3488  00F3C4  53                 	db	83
  3489  00F3C5  50                 	db	80
  3490  00F3C6  4F                 	db	79
  3491  00F3C7  53                 	db	83
  3492  00F3C8  45                 	db	69
  3493  00F3C9  20                 	db	32
  3494  00F3CA  4D                 	db	77
  3495  00F3CB  4F                 	db	79
  3496  00F3CC  44                 	db	68
  3497  00F3CD  45                 	db	69
  3498  00F3CE  3A                 	db	58
  3499  00F3CF  00                 	db	0
  3500  00F3D0  00                 	db	0
  3501  00F3D1  44                 	db	68
  3502  00F3D2  52                 	db	82
  3503  00F3D3  55                 	db	85
  3504  00F3D4  4D                 	db	77
  3505  00F3D5  20                 	db	32
  3506  00F3D6  4D                 	db	77
  3507  00F3D7  4F                 	db	79
  3508  00F3D8  44                 	db	68
  3509  00F3D9  45                 	db	69
  3510  00F3DA  3A                 	db	58
  3511  00F3DB  00                 	db	0
  3512  00F3DC  00                 	db	0
  3513  00F3DD  00                 	db	0
  3514  00F3DE  00                 	db	0
  3515  00F3DF  00                 	db	0
  3516  00F3E0  00                 	db	0
  3517  00F3E1  00                 	db	0
  3518  00F3E2  50                 	db	80
  3519  00F3E3  4F                 	db	79
  3520  00F3E4  54                 	db	84
  3521  00F3E5  53                 	db	83
  3522  00F3E6  20                 	db	32
  3523  00F3E7  4D                 	db	77
  3524  00F3E8  4F                 	db	79
  3525  00F3E9  44                 	db	68
  3526  00F3EA  45                 	db	69
  3527  00F3EB  3A                 	db	58
  3528  00F3EC  00                 	db	0
  3529  00F3ED  00                 	db	0
  3530  00F3EE  00                 	db	0
  3531  00F3EF  00                 	db	0
  3532  00F3F0  00                 	db	0
  3533  00F3F1  00                 	db	0
  3534  00F3F2  00                 	db	0
  3535  00F3F3  4D                 	db	77
  3536  00F3F4  49                 	db	73
  3537  00F3F5  44                 	db	68
  3538  00F3F6  49                 	db	73
  3539  00F3F7  20                 	db	32
  3540  00F3F8  43                 	db	67
  3541  00F3F9  48                 	db	72
  3542  00F3FA  41                 	db	65
  3543  00F3FB  4E                 	db	78
  3544  00F3FC  4E                 	db	78
  3545  00F3FD  45                 	db	69
  3546  00F3FE  4C                 	db	76
  3547  00F3FF  53                 	db	83
  3548  00F400  3A                 	db	58
  3549  00F401  00                 	db	0
  3550  00F402  00                 	db	0
  3551  00F403  00                 	db	0
  3552  00F404  50                 	db	80
  3553  00F405  52                 	db	82
  3554  00F406  4F                 	db	79
  3555  00F407  47                 	db	71
  3556  00F408  52                 	db	82
  3557  00F409  41                 	db	65
  3558  00F40A  4D                 	db	77
  3559  00F40B  20                 	db	32
  3560  00F40C  43                 	db	67
  3561  00F40D  48                 	db	72
  3562  00F40E  41                 	db	65
  3563  00F40F  4E                 	db	78
  3564  00F410  47                 	db	71
  3565  00F411  45                 	db	69
  3566  00F412  3A                 	db	58
  3567  00F413  00                 	db	0
  3568  00F414  00                 	db	0
  3569  00F415  45                 	db	69
  3570  00F416  45                 	db	69
  3571  00F417  50                 	db	80
  3572  00F418  52                 	db	82
  3573  00F419  4F                 	db	79
  3574  00F41A  4D                 	db	77
  3575  00F41B  20                 	db	32
  3576  00F41C  4D                 	db	77
  3577  00F41D  45                 	db	69
  3578  00F41E  4E                 	db	78
  3579  00F41F  55                 	db	85
  3580  00F420  3A                 	db	58
  3581  00F421  00                 	db	0
  3582  00F422  00                 	db	0
  3583  00F423  00                 	db	0
  3584  00F424  00                 	db	0
  3585  00F425  00                 	db	0
  3586  00F426  43                 	db	67
  3587  00F427  48                 	db	72
  3588  00F428  52                 	db	82
  3589  00F429  4F                 	db	79
  3590  00F42A  4D                 	db	77
  3591  00F42B  41                 	db	65
  3592  00F42C  54                 	db	84
  3593  00F42D  49                 	db	73
  3594  00F42E  43                 	db	67
  3595  00F42F  00                 	db	0
  3596  00F430  00                 	db	0
  3597  00F431  00                 	db	0
  3598  00F432  00                 	db	0
  3599  00F433  00                 	db	0
  3600  00F434  00                 	db	0
  3601  00F435  00                 	db	0
  3602  00F436  00                 	db	0
  3603  00F437  4D                 	db	77
  3604  00F438  41                 	db	65
  3605  00F439  4A                 	db	74
  3606  00F43A  4F                 	db	79
  3607  00F43B  52                 	db	82
  3608  00F43C  00                 	db	0
  3609  00F43D  00                 	db	0
  3610  00F43E  00                 	db	0
  3611  00F43F  00                 	db	0
  3612  00F440  00                 	db	0
  3613  00F441  00                 	db	0
  3614  00F442  00                 	db	0
  3615  00F443  00                 	db	0
  3616  00F444  00                 	db	0
  3617  00F445  00                 	db	0
  3618  00F446  00                 	db	0
  3619  00F447  00                 	db	0
  3620  00F448  4D                 	db	77
  3621  00F449  49                 	db	73
  3622  00F44A  4E                 	db	78
  3623  00F44B  4F                 	db	79
  3624  00F44C  52                 	db	82
  3625  00F44D  00                 	db	0
  3626  00F44E  00                 	db	0
  3627  00F44F  00                 	db	0
  3628  00F450  00                 	db	0
  3629  00F451  00                 	db	0
  3630  00F452  00                 	db	0
  3631  00F453  00                 	db	0
  3632  00F454  00                 	db	0
  3633  00F455  00                 	db	0
  3634  00F456  00                 	db	0
  3635  00F457  00                 	db	0
  3636  00F458  00                 	db	0
  3637  00F459  4D                 	db	77
  3638  00F45A  4F                 	db	79
  3639  00F45B  44                 	db	68
  3640  00F45C  45                 	db	69
  3641  00F45D  53                 	db	83
  3642  00F45E  00                 	db	0
  3643  00F45F  00                 	db	0
  3644  00F460  00                 	db	0
  3645  00F461  00                 	db	0
  3646  00F462  00                 	db	0
  3647  00F463  00                 	db	0
  3648  00F464  00                 	db	0
  3649  00F465  00                 	db	0
  3650  00F466  00                 	db	0
  3651  00F467  00                 	db	0
  3652  00F468  00                 	db	0
  3653  00F469  00                 	db	0
  3654  00F46A  50                 	db	80
  3655  00F46B  45                 	db	69
  3656  00F46C  4E                 	db	78
  3657  00F46D  54                 	db	84
  3658  00F46E  41                 	db	65
  3659  00F46F  54                 	db	84
  3660  00F470  4F                 	db	79
  3661  00F471  4E                 	db	78
  3662  00F472  49                 	db	73
  3663  00F473  43                 	db	67
  3664  00F474  20                 	db	32
  3665  00F475  4D                 	db	77
  3666  00F476  41                 	db	65
  3667  00F477  4A                 	db	74
  3668  00F478  4F                 	db	79
  3669  00F479  52                 	db	82
  3670  00F47A  00                 	db	0
  3671  00F47B  50                 	db	80
  3672  00F47C  45                 	db	69
  3673  00F47D  4E                 	db	78
  3674  00F47E  54                 	db	84
  3675  00F47F  41                 	db	65
  3676  00F480  54                 	db	84
  3677  00F481  4F                 	db	79
  3678  00F482  4E                 	db	78
  3679  00F483  49                 	db	73
  3680  00F484  43                 	db	67
  3681  00F485  20                 	db	32
  3682  00F486  4D                 	db	77
  3683  00F487  49                 	db	73
  3684  00F488  4E                 	db	78
  3685  00F489  4F                 	db	79
  3686  00F48A  52                 	db	82
  3687  00F48B  00                 	db	0
  3688  00F48C  54                 	db	84
  3689  00F48D  52                 	db	82
  3690  00F48E  49                 	db	73
  3691  00F48F  41                 	db	65
  3692  00F490  44                 	db	68
  3693  00F491  00                 	db	0
  3694  00F492  00                 	db	0
  3695  00F493  00                 	db	0
  3696  00F494  00                 	db	0
  3697  00F495  00                 	db	0
  3698  00F496  00                 	db	0
  3699  00F497  00                 	db	0
  3700  00F498  00                 	db	0
  3701  00F499  00                 	db	0
  3702  00F49A  00                 	db	0
  3703  00F49B  00                 	db	0
  3704  00F49C  00                 	db	0
  3705  00F49D  44                 	db	68
  3706  00F49E  49                 	db	73
  3707  00F49F  41                 	db	65
  3708  00F4A0  54                 	db	84
  3709  00F4A1  4F                 	db	79
  3710  00F4A2  4E                 	db	78
  3711  00F4A3  49                 	db	73
  3712  00F4A4  43                 	db	67
  3713  00F4A5  20                 	db	32
  3714  00F4A6  54                 	db	84
  3715  00F4A7  20                 	db	32
  3716  00F4A8  4D                 	db	77
  3717  00F4A9  41                 	db	65
  3718  00F4AA  4A                 	db	74
  3719  00F4AB  4F                 	db	79
  3720  00F4AC  52                 	db	82
  3721  00F4AD  00                 	db	0
  3722  00F4AE  44                 	db	68
  3723  00F4AF  49                 	db	73
  3724  00F4B0  41                 	db	65
  3725  00F4B1  54                 	db	84
  3726  00F4B2  4F                 	db	79
  3727  00F4B3  4E                 	db	78
  3728  00F4B4  49                 	db	73
  3729  00F4B5  43                 	db	67
  3730  00F4B6  20                 	db	32
  3731  00F4B7  54                 	db	84
  3732  00F4B8  20                 	db	32
  3733  00F4B9  4D                 	db	77
  3734  00F4BA  49                 	db	73
  3735  00F4BB  4E                 	db	78
  3736  00F4BC  4F                 	db	79
  3737  00F4BD  52                 	db	82
  3738  00F4BE  00                 	db	0
  3739  00F4BF  53                 	db	83
  3740  00F4C0  45                 	db	69
  3741  00F4C1  56                 	db	86
  3742  00F4C2  45                 	db	69
  3743  00F4C3  4E                 	db	78
  3744  00F4C4  54                 	db	84
  3745  00F4C5  48                 	db	72
  3746  00F4C6  00                 	db	0
  3747  00F4C7  00                 	db	0
  3748  00F4C8  00                 	db	0
  3749  00F4C9  00                 	db	0
  3750  00F4CA  00                 	db	0
  3751  00F4CB  00                 	db	0
  3752  00F4CC  00                 	db	0
  3753  00F4CD  00                 	db	0
  3754  00F4CE  00                 	db	0
  3755  00F4CF  00                 	db	0
  3756  00F4D0  44                 	db	68
  3757  00F4D1  49                 	db	73
  3758  00F4D2  41                 	db	65
  3759  00F4D3  54                 	db	84
  3760  00F4D4  4F                 	db	79
  3761  00F4D5  4E                 	db	78
  3762  00F4D6  49                 	db	73
  3763  00F4D7  43                 	db	67
  3764  00F4D8  20                 	db	32
  3765  00F4D9  37                 	db	55
  3766  00F4DA  20                 	db	32
  3767  00F4DB  4D                 	db	77
  3768  00F4DC  41                 	db	65
  3769  00F4DD  4A                 	db	74
  3770  00F4DE  4F                 	db	79
  3771  00F4DF  52                 	db	82
  3772  00F4E0  00                 	db	0
  3773  00F4E1  44                 	db	68
  3774  00F4E2  49                 	db	73
  3775  00F4E3  41                 	db	65
  3776  00F4E4  54                 	db	84
  3777  00F4E5  4F                 	db	79
  3778  00F4E6  4E                 	db	78
  3779  00F4E7  49                 	db	73
  3780  00F4E8  43                 	db	67
  3781  00F4E9  20                 	db	32
  3782  00F4EA  37                 	db	55
  3783  00F4EB  20                 	db	32
  3784  00F4EC  4D                 	db	77
  3785  00F4ED  49                 	db	73
  3786  00F4EE  4E                 	db	78
  3787  00F4EF  4F                 	db	79
  3788  00F4F0  52                 	db	82
  3789  00F4F1  00                 	db	0
  3790  00F4F2  69                 	db	105
  3791  00F4F3  6F                 	db	111
  3792  00F4F4  6E                 	db	110
  3793  00F4F5  69                 	db	105
  3794  00F4F6  61                 	db	97
  3795  00F4F7  6E                 	db	110
  3796  00F4F8  00                 	db	0
  3797  00F4F9  00                 	db	0
  3798  00F4FA  00                 	db	0
  3799  00F4FB  00                 	db	0
  3800  00F4FC  00                 	db	0
  3801  00F4FD  00                 	db	0
  3802  00F4FE  00                 	db	0
  3803  00F4FF  00                 	db	0
  3804  00F500  00                 	db	0
  3805  00F501  00                 	db	0
  3806  00F502  00                 	db	0
  3807  00F503  64                 	db	100
  3808  00F504  6F                 	db	111
  3809  00F505  72                 	db	114
  3810  00F506  69                 	db	105
  3811  00F507  61                 	db	97
  3812  00F508  6E                 	db	110
  3813  00F509  00                 	db	0
  3814  00F50A  00                 	db	0
  3815  00F50B  00                 	db	0
  3816  00F50C  00                 	db	0
  3817  00F50D  00                 	db	0
  3818  00F50E  00                 	db	0
  3819  00F50F  00                 	db	0
  3820  00F510  00                 	db	0
  3821  00F511  00                 	db	0
  3822  00F512  00                 	db	0
  3823  00F513  00                 	db	0
  3824  00F514  70                 	db	112
  3825  00F515  68                 	db	104
  3826  00F516  72                 	db	114
  3827  00F517  79                 	db	121
  3828  00F518  67                 	db	103
  3829  00F519  69                 	db	105
  3830  00F51A  61                 	db	97
  3831  00F51B  6E                 	db	110
  3832  00F51C  00                 	db	0
  3833  00F51D  00                 	db	0
  3834  00F51E  00                 	db	0
  3835  00F51F  00                 	db	0
  3836  00F520  00                 	db	0
  3837  00F521  00                 	db	0
  3838  00F522  00                 	db	0
  3839  00F523  00                 	db	0
  3840  00F524  00                 	db	0
  3841  00F525  6C                 	db	108
  3842  00F526  79                 	db	121
  3843  00F527  64                 	db	100
  3844  00F528  69                 	db	105
  3845  00F529  61                 	db	97
  3846  00F52A  6E                 	db	110
  3847  00F52B  00                 	db	0
  3848  00F52C  00                 	db	0
  3849  00F52D  00                 	db	0
  3850  00F52E  00                 	db	0
  3851  00F52F  00                 	db	0
  3852  00F530  00                 	db	0
  3853  00F531  00                 	db	0
  3854  00F532  00                 	db	0
  3855  00F533  00                 	db	0
  3856  00F534  00                 	db	0
  3857  00F535  00                 	db	0
  3858  00F536  6D                 	db	109
  3859  00F537  69                 	db	105
  3860  00F538  78                 	db	120
  3861  00F539  6F                 	db	111
  3862  00F53A  6C                 	db	108
  3863  00F53B  79                 	db	121
  3864  00F53C  64                 	db	100
  3865  00F53D  69                 	db	105
  3866  00F53E  61                 	db	97
  3867  00F53F  6E                 	db	110
  3868  00F540  00                 	db	0
  3869  00F541  00                 	db	0
  3870  00F542  00                 	db	0
  3871  00F543  00                 	db	0
  3872  00F544  00                 	db	0
  3873  00F545  00                 	db	0
  3874  00F546  00                 	db	0
  3875  00F547  61                 	db	97
  3876  00F548  65                 	db	101
  3877  00F549  6F                 	db	111
  3878  00F54A  6C                 	db	108
  3879  00F54B  69                 	db	105
  3880  00F54C  61                 	db	97
  3881  00F54D  6E                 	db	110
  3882  00F54E  00                 	db	0
  3883  00F54F  00                 	db	0
  3884  00F550  00                 	db	0
  3885  00F551  00                 	db	0
  3886  00F552  00                 	db	0
  3887  00F553  00                 	db	0
  3888  00F554  00                 	db	0
  3889  00F555  00                 	db	0
  3890  00F556  00                 	db	0
  3891  00F557  00                 	db	0
  3892  00F558  6C                 	db	108
  3893  00F559  6F                 	db	111
  3894  00F55A  63                 	db	99
  3895  00F55B  72                 	db	114
  3896  00F55C  69                 	db	105
  3897  00F55D  61                 	db	97
  3898  00F55E  6E                 	db	110
  3899  00F55F  00                 	db	0
  3900  00F560  00                 	db	0
  3901  00F561  00                 	db	0
  3902  00F562  00                 	db	0
  3903  00F563  00                 	db	0
  3904  00F564  00                 	db	0
  3905  00F565  00                 	db	0
  3906  00F566  00                 	db	0
  3907  00F567  00                 	db	0
  3908  00F568  00                 	db	0
  3909  00F569  6D                 	db	109
  3910  00F56A  61                 	db	97
  3911  00F56B  6A                 	db	106
  3912  00F56C  6F                 	db	111
  3913  00F56D  72                 	db	114
  3914  00F56E  20                 	db	32
  3915  00F56F  74                 	db	116
  3916  00F570  72                 	db	114
  3917  00F571  69                 	db	105
  3918  00F572  61                 	db	97
  3919  00F573  64                 	db	100
  3920  00F574  00                 	db	0
  3921  00F575  00                 	db	0
  3922  00F576  00                 	db	0
  3923  00F577  00                 	db	0
  3924  00F578  00                 	db	0
  3925  00F579  00                 	db	0
  3926  00F57A  6D                 	db	109
  3927  00F57B  69                 	db	105
  3928  00F57C  6E                 	db	110
  3929  00F57D  6F                 	db	111
  3930  00F57E  72                 	db	114
  3931  00F57F  20                 	db	32
  3932  00F580  74                 	db	116
  3933  00F581  72                 	db	114
  3934  00F582  69                 	db	105
  3935  00F583  61                 	db	97
  3936  00F584  64                 	db	100
  3937  00F585  00                 	db	0
  3938  00F586  00                 	db	0
  3939  00F587  00                 	db	0
  3940  00F588  00                 	db	0
  3941  00F589  00                 	db	0
  3942  00F58A  00                 	db	0
  3943  00F58B  61                 	db	97
  3944  00F58C  75                 	db	117
  3945  00F58D  67                 	db	103
  3946  00F58E  6D                 	db	109
  3947  00F58F  65                 	db	101
  3948  00F590  6E                 	db	110
  3949  00F591  74                 	db	116
  3950  00F592  65                 	db	101
  3951  00F593  64                 	db	100
  3952  00F594  20                 	db	32
  3953  00F595  74                 	db	116
  3954  00F596  72                 	db	114
  3955  00F597  69                 	db	105
  3956  00F598  61                 	db	97
  3957  00F599  64                 	db	100
  3958  00F59A  00                 	db	0
  3959  00F59B  00                 	db	0
  3960  00F59C  64                 	db	100
  3961  00F59D  69                 	db	105
  3962  00F59E  6D                 	db	109
  3963  00F59F  69                 	db	105
  3964  00F5A0  6E                 	db	110
  3965  00F5A1  69                 	db	105
  3966  00F5A2  73                 	db	115
  3967  00F5A3  68                 	db	104
  3968  00F5A4  65                 	db	101
  3969  00F5A5  64                 	db	100
  3970  00F5A6  20                 	db	32
  3971  00F5A7  74                 	db	116
  3972  00F5A8  72                 	db	114
  3973  00F5A9  69                 	db	105
  3974  00F5AA  61                 	db	97
  3975  00F5AB  64                 	db	100
  3976  00F5AC  00                 	db	0
  3977  00F5AD  64                 	db	100
  3978  00F5AE  6F                 	db	111
  3979  00F5AF  6D                 	db	109
  3980  00F5B0  69                 	db	105
  3981  00F5B1  6E                 	db	110
  3982  00F5B2  61                 	db	97
  3983  00F5B3  6E                 	db	110
  3984  00F5B4  74                 	db	116
  3985  00F5B5  20                 	db	32
  3986  00F5B6  37                 	db	55
  3987  00F5B7  74                 	db	116
  3988  00F5B8  68                 	db	104
  3989  00F5B9  00                 	db	0
  3990  00F5BA  00                 	db	0
  3991  00F5BB  00                 	db	0
  3992  00F5BC  00                 	db	0
  3993  00F5BD  00                 	db	0
  3994  00F5BE  6D                 	db	109
  3995  00F5BF  61                 	db	97
  3996  00F5C0  6A                 	db	106
  3997  00F5C1  6F                 	db	111
  3998  00F5C2  72                 	db	114
  3999  00F5C3  20                 	db	32
  4000  00F5C4  37                 	db	55
  4001  00F5C5  74                 	db	116
  4002  00F5C6  68                 	db	104
  4003  00F5C7  00                 	db	0
  4004  00F5C8  00                 	db	0
  4005  00F5C9  00                 	db	0
  4006  00F5CA  00                 	db	0
  4007  00F5CB  00                 	db	0
  4008  00F5CC  00                 	db	0
  4009  00F5CD  00                 	db	0
  4010  00F5CE  00                 	db	0
  4011  00F5CF  6D                 	db	109
  4012  00F5D0  69                 	db	105
  4013  00F5D1  6E                 	db	110
  4014  00F5D2  6F                 	db	111
  4015  00F5D3  72                 	db	114
  4016  00F5D4  20                 	db	32
  4017  00F5D5  37                 	db	55
  4018  00F5D6  74                 	db	116
  4019  00F5D7  68                 	db	104
  4020  00F5D8  00                 	db	0
  4021  00F5D9  00                 	db	0
  4022  00F5DA  00                 	db	0
  4023  00F5DB  00                 	db	0
  4024  00F5DC  00                 	db	0
  4025  00F5DD  00                 	db	0
  4026  00F5DE  00                 	db	0
  4027  00F5DF  00                 	db	0
  4028  00F5E0  68                 	db	104
  4029  00F5E1  61                 	db	97
  4030  00F5E2  6C                 	db	108
  4031  00F5E3  66                 	db	102
  4032  00F5E4  20                 	db	32
  4033  00F5E5  64                 	db	100
  4034  00F5E6  69                 	db	105
  4035  00F5E7  6D                 	db	109
  4036  00F5E8  69                 	db	105
  4037  00F5E9  6E                 	db	110
  4038  00F5EA  69                 	db	105
  4039  00F5EB  73                 	db	115
  4040  00F5EC  68                 	db	104
  4041  00F5ED  65                 	db	101
  4042  00F5EE  64                 	db	100
  4043  00F5EF  00                 	db	0
  4044  00F5F0  00                 	db	0
  4045  00F5F1  64                 	db	100
  4046  00F5F2  69                 	db	105
  4047  00F5F3  6D                 	db	109
  4048  00F5F4  69                 	db	105
  4049  00F5F5  6E                 	db	110
  4050  00F5F6  69                 	db	105
  4051  00F5F7  73                 	db	115
  4052  00F5F8  68                 	db	104
  4053  00F5F9  65                 	db	101
  4054  00F5FA  64                 	db	100
  4055  00F5FB  20                 	db	32
  4056  00F5FC  37                 	db	55
  4057  00F5FD  74                 	db	116
  4058  00F5FE  68                 	db	104
  4059  00F5FF  00                 	db	0
  4060  00F600  00                 	db	0
  4061  00F601  00                 	db	0
  4062  00F602  48                 	db	72
  4063  00F603  41                 	db	65
  4064  00F604  4C                 	db	76
  4065  00F605  46                 	db	70
  4066  00F606  20                 	db	32
  4067  00F607  53                 	db	83
  4068  00F608  54                 	db	84
  4069  00F609  45                 	db	69
  4070  00F60A  50                 	db	80
  4071  00F60B  00                 	db	0
  4072  00F60C  00                 	db	0
  4073  00F60D  00                 	db	0
  4074  00F60E  00                 	db	0
  4075  00F60F  00                 	db	0
  4076  00F610  00                 	db	0
  4077  00F611  00                 	db	0
  4078  00F612  00                 	db	0
  4079  00F613  43                 	db	67
  4080  00F614  49                 	db	73
  4081  00F615  52                 	db	82
  4082  00F616  43                 	db	67
  4083  00F617  4C                 	db	76
  4084  00F618  45                 	db	69
  4085  00F619  20                 	db	32
  4086  00F61A  4F                 	db	79
  4087  00F61B  46                 	db	70
  4088  00F61C  20                 	db	32
  4089  00F61D  46                 	db	70
  4090  00F61E  49                 	db	73
  4091  00F61F  46                 	db	70
  4092  00F620  54                 	db	84
  4093  00F621  48                 	db	72
  4094  00F622  53                 	db	83
  4095  00F623  00                 	db	0
  4096  00F624  44                 	db	68
  4097  00F625  52                 	db	82
  4098  00F626  55                 	db	85
  4099  00F627  4D                 	db	77
  4100  00F628  20                 	db	32
  4101  00F629  49                 	db	73
  4102  00F62A  53                 	db	83
  4103  00F62B  20                 	db	32
  4104  00F62C  4E                 	db	78
  4105  00F62D  4F                 	db	79
  4106  00F62E  54                 	db	84
  4107  00F62F  45                 	db	69
  4108  00F630  20                 	db	32
  4109  00F631  4F                 	db	79
  4110  00F632  4E                 	db	78
  4111  00F633  00                 	db	0
  4112  00F634  00                 	db	0
  4113  00F635  44                 	db	68
  4114  00F636  52                 	db	82
  4115  00F637  55                 	db	85
  4116  00F638  4D                 	db	77
  4117  00F639  20                 	db	32
  4118  00F63A  49                 	db	73
  4119  00F63B  53                 	db	83
  4120  00F63C  20                 	db	32
  4121  00F63D  43                 	db	67
  4122  00F63E  43                 	db	67
  4123  00F63F  00                 	db	0
  4124  00F640  00                 	db	0
  4125  00F641  00                 	db	0
  4126  00F642  00                 	db	0
  4127  00F643  00                 	db	0
  4128  00F644  00                 	db	0
  4129  00F645  00                 	db	0
  4130  00F646  44                 	db	68
  4131  00F647  52                 	db	82
  4132  00F648  55                 	db	85
  4133  00F649  4D                 	db	77
  4134  00F64A  20                 	db	32
  4135  00F64B  43                 	db	67
  4136  00F64C  43                 	db	67
  4137  00F64D  20                 	db	32
  4138  00F64E  54                 	db	84
  4139  00F64F  59                 	db	89
  4140  00F650  50                 	db	80
  4141  00F651  45                 	db	69
  4142  00F652  00                 	db	0
  4143  00F653  00                 	db	0
  4144  00F654  00                 	db	0
  4145  00F655  00                 	db	0
  4146  00F656  00                 	db	0
  4147  00F657  44                 	db	68
  4148  00F658  52                 	db	82
  4149  00F659  55                 	db	85
  4150  00F65A  4D                 	db	77
  4151  00F65B  20                 	db	32
  4152  00F65C  53                 	db	83
  4153  00F65D  45                 	db	69
  4154  00F65E  54                 	db	84
  4155  00F65F  20                 	db	32
  4156  00F660  4E                 	db	78
  4157  00F661  4E                 	db	78
  4158  00F662  23                 	db	35
  4159  00F663  00                 	db	0
  4160  00F664  00                 	db	0
  4161  00F665  00                 	db	0
  4162  00F666  00                 	db	0
  4163  00F667  00                 	db	0
  4164  00F668  44                 	db	68
  4165  00F669  52                 	db	82
  4166  00F66A  55                 	db	85
  4167  00F66B  4D                 	db	77
  4168  00F66C  20                 	db	32
  4169  00F66D  53                 	db	83
  4170  00F66E  45                 	db	69
  4171  00F66F  54                 	db	84
  4172  00F670  20                 	db	32
  4173  00F671  43                 	db	67
  4174  00F672  43                 	db	67
  4175  00F673  23                 	db	35
  4176  00F674  00                 	db	0
  4177  00F675  00                 	db	0
  4178  00F676  00                 	db	0
  4179  00F677  00                 	db	0
  4180  00F678  00                 	db	0
  4181  00F679  44                 	db	68
  4182  00F67A  52                 	db	82
  4183  00F67B  55                 	db	85
  4184  00F67C  4D                 	db	77
  4185  00F67D  20                 	db	32
  4186  00F67E  43                 	db	67
  4187  00F67F  43                 	db	67
  4188  00F680  20                 	db	32
  4189  00F681  54                 	db	84
  4190  00F682  52                 	db	82
  4191  00F683  49                 	db	73
  4192  00F684  47                 	db	71
  4193  00F685  47                 	db	71
  4194  00F686  45                 	db	69
  4195  00F687  52                 	db	82
  4196  00F688  00                 	db	0
  4197  00F689  00                 	db	0
  4198  00F68A  44                 	db	68
  4199  00F68B  52                 	db	82
  4200  00F68C  55                 	db	85
  4201  00F68D  4D                 	db	77
  4202  00F68E  20                 	db	32
  4203  00F68F  43                 	db	67
  4204  00F690  43                 	db	67
  4205  00F691  20                 	db	32
  4206  00F692  54                 	db	84
  4207  00F693  4F                 	db	79
  4208  00F694  47                 	db	71
  4209  00F695  47                 	db	71
  4210  00F696  4C                 	db	76
  4211  00F697  45                 	db	69
  4212  00F698  00                 	db	0
  4213  00F699  00                 	db	0
  4214  00F69A  00                 	db	0
  4215  00F69B  44                 	db	68
  4216  00F69C  52                 	db	82
  4217  00F69D  55                 	db	85
  4218  00F69E  4D                 	db	77
  4219  00F69F  20                 	db	32
  4220  00F6A0  31                 	db	49
  4221  00F6A1  20                 	db	32
  4222  00F6A2  4E                 	db	78
  4223  00F6A3  4E                 	db	78
  4224  00F6A4  3A                 	db	58
  4225  00F6A5  20                 	db	32
  4226  00F6A6  00                 	db	0
  4227  00F6A7  00                 	db	0
  4228  00F6A8  00                 	db	0
  4229  00F6A9  00                 	db	0
  4230  00F6AA  00                 	db	0
  4231  00F6AB  00                 	db	0
  4232  00F6AC  44                 	db	68
  4233  00F6AD  52                 	db	82
  4234  00F6AE  55                 	db	85
  4235  00F6AF  4D                 	db	77
  4236  00F6B0  20                 	db	32
  4237  00F6B1  32                 	db	50
  4238  00F6B2  20                 	db	32
  4239  00F6B3  4E                 	db	78
  4240  00F6B4  4E                 	db	78
  4241  00F6B5  3A                 	db	58
  4242  00F6B6  20                 	db	32
  4243  00F6B7  00                 	db	0
  4244  00F6B8  00                 	db	0
  4245  00F6B9  00                 	db	0
  4246  00F6BA  00                 	db	0
  4247  00F6BB  00                 	db	0
  4248  00F6BC  00                 	db	0
  4249  00F6BD  44                 	db	68
  4250  00F6BE  52                 	db	82
  4251  00F6BF  55                 	db	85
  4252  00F6C0  4D                 	db	77
  4253  00F6C1  20                 	db	32
  4254  00F6C2  33                 	db	51
  4255  00F6C3  20                 	db	32
  4256  00F6C4  4E                 	db	78
  4257  00F6C5  4E                 	db	78
  4258  00F6C6  3A                 	db	58
  4259  00F6C7  20                 	db	32
  4260  00F6C8  00                 	db	0
  4261  00F6C9  00                 	db	0
  4262  00F6CA  00                 	db	0
  4263  00F6CB  00                 	db	0
  4264  00F6CC  00                 	db	0
  4265  00F6CD  00                 	db	0
  4266  00F6CE  44                 	db	68
  4267  00F6CF  52                 	db	82
  4268  00F6D0  55                 	db	85
  4269  00F6D1  4D                 	db	77
  4270  00F6D2  20                 	db	32
  4271  00F6D3  34                 	db	52
  4272  00F6D4  20                 	db	32
  4273  00F6D5  4E                 	db	78
  4274  00F6D6  4E                 	db	78
  4275  00F6D7  3A                 	db	58
  4276  00F6D8  20                 	db	32
  4277  00F6D9  00                 	db	0
  4278  00F6DA  00                 	db	0
  4279  00F6DB  00                 	db	0
  4280  00F6DC  00                 	db	0
  4281  00F6DD  00                 	db	0
  4282  00F6DE  00                 	db	0
  4283  00F6DF  44                 	db	68
  4284  00F6E0  52                 	db	82
  4285  00F6E1  55                 	db	85
  4286  00F6E2  4D                 	db	77
  4287  00F6E3  20                 	db	32
  4288  00F6E4  35                 	db	53
  4289  00F6E5  20                 	db	32
  4290  00F6E6  4E                 	db	78
  4291  00F6E7  4E                 	db	78
  4292  00F6E8  3A                 	db	58
  4293  00F6E9  20                 	db	32
  4294  00F6EA  00                 	db	0
  4295  00F6EB  00                 	db	0
  4296  00F6EC  00                 	db	0
  4297  00F6ED  00                 	db	0
  4298  00F6EE  00                 	db	0
  4299  00F6EF  00                 	db	0
  4300  00F6F0  44                 	db	68
  4301  00F6F1  52                 	db	82
  4302  00F6F2  55                 	db	85
  4303  00F6F3  4D                 	db	77
  4304  00F6F4  20                 	db	32
  4305  00F6F5  36                 	db	54
  4306  00F6F6  20                 	db	32
  4307  00F6F7  4E                 	db	78
  4308  00F6F8  4E                 	db	78
  4309  00F6F9  3A                 	db	58
  4310  00F6FA  20                 	db	32
  4311  00F6FB  00                 	db	0
  4312  00F6FC  00                 	db	0
  4313  00F6FD  00                 	db	0
  4314  00F6FE  00                 	db	0
  4315  00F6FF  00                 	db	0
  4316  00F700  00                 	db	0
  4317  00F701  44                 	db	68
  4318  00F702  52                 	db	82
  4319  00F703  55                 	db	85
  4320  00F704  4D                 	db	77
  4321  00F705  20                 	db	32
  4322  00F706  37                 	db	55
  4323  00F707  20                 	db	32
  4324  00F708  4E                 	db	78
  4325  00F709  4E                 	db	78
  4326  00F70A  3A                 	db	58
  4327  00F70B  20                 	db	32
  4328  00F70C  00                 	db	0
  4329  00F70D  00                 	db	0
  4330  00F70E  00                 	db	0
  4331  00F70F  00                 	db	0
  4332  00F710  00                 	db	0
  4333  00F711  00                 	db	0
  4334  00F712  44                 	db	68
  4335  00F713  52                 	db	82
  4336  00F714  55                 	db	85
  4337  00F715  4D                 	db	77
  4338  00F716  20                 	db	32
  4339  00F717  38                 	db	56
  4340  00F718  20                 	db	32
  4341  00F719  4E                 	db	78
  4342  00F71A  4E                 	db	78
  4343  00F71B  3A                 	db	58
  4344  00F71C  20                 	db	32
  4345  00F71D  00                 	db	0
  4346  00F71E  00                 	db	0
  4347  00F71F  00                 	db	0
  4348  00F720  00                 	db	0
  4349  00F721  00                 	db	0
  4350  00F722  00                 	db	0
  4351  00F723  44                 	db	68
  4352  00F724  52                 	db	82
  4353  00F725  55                 	db	85
  4354  00F726  4D                 	db	77
  4355  00F727  20                 	db	32
  4356  00F728  31                 	db	49
  4357  00F729  20                 	db	32
  4358  00F72A  43                 	db	67
  4359  00F72B  43                 	db	67
  4360  00F72C  3A                 	db	58
  4361  00F72D  20                 	db	32
  4362  00F72E  00                 	db	0
  4363  00F72F  00                 	db	0
  4364  00F730  00                 	db	0
  4365  00F731  00                 	db	0
  4366  00F732  00                 	db	0
  4367  00F733  00                 	db	0
  4368  00F734  44                 	db	68
  4369  00F735  52                 	db	82
  4370  00F736  55                 	db	85
  4371  00F737  4D                 	db	77
  4372  00F738  20                 	db	32
  4373  00F739  32                 	db	50
  4374  00F73A  20                 	db	32
  4375  00F73B  43                 	db	67
  4376  00F73C  43                 	db	67
  4377  00F73D  3A                 	db	58
  4378  00F73E  20                 	db	32
  4379  00F73F  00                 	db	0
  4380  00F740  00                 	db	0
  4381  00F741  00                 	db	0
  4382  00F742  00                 	db	0
  4383  00F743  00                 	db	0
  4384  00F744  00                 	db	0
  4385  00F745  44                 	db	68
  4386  00F746  52                 	db	82
  4387  00F747  55                 	db	85
  4388  00F748  4D                 	db	77
  4389  00F749  20                 	db	32
  4390  00F74A  33                 	db	51
  4391  00F74B  20                 	db	32
  4392  00F74C  43                 	db	67
  4393  00F74D  43                 	db	67
  4394  00F74E  3A                 	db	58
  4395  00F74F  20                 	db	32
  4396  00F750  00                 	db	0
  4397  00F751  00                 	db	0
  4398  00F752  00                 	db	0
  4399  00F753  00                 	db	0
  4400  00F754  00                 	db	0
  4401  00F755  00                 	db	0
  4402  00F756  44                 	db	68
  4403  00F757  52                 	db	82
  4404  00F758  55                 	db	85
  4405  00F759  4D                 	db	77
  4406  00F75A  20                 	db	32
  4407  00F75B  34                 	db	52
  4408  00F75C  20                 	db	32
  4409  00F75D  43                 	db	67
  4410  00F75E  43                 	db	67
  4411  00F75F  3A                 	db	58
  4412  00F760  20                 	db	32
  4413  00F761  00                 	db	0
  4414  00F762  00                 	db	0
  4415  00F763  00                 	db	0
  4416  00F764  00                 	db	0
  4417  00F765  00                 	db	0
  4418  00F766  00                 	db	0
  4419  00F767  44                 	db	68
  4420  00F768  52                 	db	82
  4421  00F769  55                 	db	85
  4422  00F76A  4D                 	db	77
  4423  00F76B  20                 	db	32
  4424  00F76C  35                 	db	53
  4425  00F76D  20                 	db	32
  4426  00F76E  43                 	db	67
  4427  00F76F  43                 	db	67
  4428  00F770  3A                 	db	58
  4429  00F771  20                 	db	32
  4430  00F772  00                 	db	0
  4431  00F773  00                 	db	0
  4432  00F774  00                 	db	0
  4433  00F775  00                 	db	0
  4434  00F776  00                 	db	0
  4435  00F777  00                 	db	0
  4436  00F778  44                 	db	68
  4437  00F779  52                 	db	82
  4438  00F77A  55                 	db	85
  4439  00F77B  4D                 	db	77
  4440  00F77C  20                 	db	32
  4441  00F77D  36                 	db	54
  4442  00F77E  20                 	db	32
  4443  00F77F  43                 	db	67
  4444  00F780  43                 	db	67
  4445  00F781  3A                 	db	58
  4446  00F782  20                 	db	32
  4447  00F783  00                 	db	0
  4448  00F784  00                 	db	0
  4449  00F785  00                 	db	0
  4450  00F786  00                 	db	0
  4451  00F787  00                 	db	0
  4452  00F788  00                 	db	0
  4453  00F789  44                 	db	68
  4454  00F78A  52                 	db	82
  4455  00F78B  55                 	db	85
  4456  00F78C  4D                 	db	77
  4457  00F78D  20                 	db	32
  4458  00F78E  37                 	db	55
  4459  00F78F  20                 	db	32
  4460  00F790  43                 	db	67
  4461  00F791  43                 	db	67
  4462  00F792  3A                 	db	58
  4463  00F793  20                 	db	32
  4464  00F794  00                 	db	0
  4465  00F795  00                 	db	0
  4466  00F796  00                 	db	0
  4467  00F797  00                 	db	0
  4468  00F798  00                 	db	0
  4469  00F799  00                 	db	0
  4470  00F79A  44                 	db	68
  4471  00F79B  52                 	db	82
  4472  00F79C  55                 	db	85
  4473  00F79D  4D                 	db	77
  4474  00F79E  20                 	db	32
  4475  00F79F  38                 	db	56
  4476  00F7A0  20                 	db	32
  4477  00F7A1  43                 	db	67
  4478  00F7A2  43                 	db	67
  4479  00F7A3  3A                 	db	58
  4480  00F7A4  20                 	db	32
  4481  00F7A5  00                 	db	0
  4482  00F7A6  00                 	db	0
  4483  00F7A7  00                 	db	0
  4484  00F7A8  00                 	db	0
  4485  00F7A9  00                 	db	0
  4486  00F7AA  00                 	db	0
  4487  00F7AB  50                 	db	80
  4488  00F7AC  4F                 	db	79
  4489  00F7AD  54                 	db	84
  4490  00F7AE  53                 	db	83
  4491  00F7AF  20                 	db	32
  4492  00F7B0  52                 	db	82
  4493  00F7B1  45                 	db	69
  4494  00F7B2  53                 	db	83
  4495  00F7B3  4F                 	db	79
  4496  00F7B4  4C                 	db	76
  4497  00F7B5  55                 	db	85
  4498  00F7B6  54                 	db	84
  4499  00F7B7  49                 	db	73
  4500  00F7B8  4F                 	db	79
  4501  00F7B9  4E                 	db	78
  4502  00F7BA  00                 	db	0
  4503  00F7BB  00                 	db	0
  4504  00F7BC  50                 	db	80
  4505  00F7BD  4F                 	db	79
  4506  00F7BE  54                 	db	84
  4507  00F7BF  53                 	db	83
  4508  00F7C0  20                 	db	32
  4509  00F7C1  41                 	db	65
  4510  00F7C2  4C                 	db	76
  4511  00F7C3  50                 	db	80
  4512  00F7C4  48                 	db	72
  4513  00F7C5  41                 	db	65
  4514  00F7C6  00                 	db	0
  4515  00F7C7  00                 	db	0
  4516  00F7C8  00                 	db	0
  4517  00F7C9  00                 	db	0
  4518  00F7CA  00                 	db	0
  4519  00F7CB  00                 	db	0
  4520  00F7CC  00                 	db	0
  4521  00F7CD  50                 	db	80
  4522  00F7CE  4F                 	db	79
  4523  00F7CF  54                 	db	84
  4524  00F7D0  53                 	db	83
  4525  00F7D1  20                 	db	32
  4526  00F7D2  53                 	db	83
  4527  00F7D3  45                 	db	69
  4528  00F7D4  54                 	db	84
  4529  00F7D5  20                 	db	32
  4530  00F7D6  43                 	db	67
  4531  00F7D7  43                 	db	67
  4532  00F7D8  23                 	db	35
  4533  00F7D9  00                 	db	0
  4534  00F7DA  00                 	db	0
  4535  00F7DB  00                 	db	0
  4536  00F7DC  00                 	db	0
  4537  00F7DD  00                 	db	0
  4538  00F7DE  53                 	db	83
  4539  00F7DF  4C                 	db	76
  4540  00F7E0  49                 	db	73
  4541  00F7E1  44                 	db	68
  4542  00F7E2  45                 	db	69
  4543  00F7E3  50                 	db	80
  4544  00F7E4  4F                 	db	79
  4545  00F7E5  54                 	db	84
  4546  00F7E6  20                 	db	32
  4547  00F7E7  53                 	db	83
  4548  00F7E8  45                 	db	69
  4549  00F7E9  54                 	db	84
  4550  00F7EA  20                 	db	32
  4551  00F7EB  43                 	db	67
  4552  00F7EC  43                 	db	67
  4553  00F7ED  23                 	db	35
  4554  00F7EE  00                 	db	0
  4555  00F7EF  4A                 	db	74
  4556  00F7F0  4F                 	db	79
  4557  00F7F1  59                 	db	89
  4558  00F7F2  53                 	db	83
  4559  00F7F3  54                 	db	84
  4560  00F7F4  49                 	db	73
  4561  00F7F5  43                 	db	67
  4562  00F7F6  4B                 	db	75
  4563  00F7F7  20                 	db	32
  4564  00F7F8  53                 	db	83
  4565  00F7F9  45                 	db	69
  4566  00F7FA  54                 	db	84
  4567  00F7FB  20                 	db	32
  4568  00F7FC  43                 	db	67
  4569  00F7FD  43                 	db	67
  4570  00F7FE  23                 	db	35
  4571  00F7FF  00                 	db	0
  4572  00F800  50                 	db	80
  4573  00F801  4F                 	db	79
  4574  00F802  54                 	db	84
  4575  00F803  53                 	db	83
  4576  00F804  20                 	db	32
  4577  00F805  4C                 	db	76
  4578  00F806  4F                 	db	79
  4579  00F807  20                 	db	32
  4580  00F808  52                 	db	82
  4581  00F809  45                 	db	69
  4582  00F80A  53                 	db	83
  4583  00F80B  00                 	db	0
  4584  00F80C  00                 	db	0
  4585  00F80D  00                 	db	0
  4586  00F80E  00                 	db	0
  4587  00F80F  00                 	db	0
  4588  00F810  00                 	db	0
  4589  00F811  50                 	db	80
  4590  00F812  4F                 	db	79
  4591  00F813  54                 	db	84
  4592  00F814  53                 	db	83
  4593  00F815  20                 	db	32
  4594  00F816  48                 	db	72
  4595  00F817  49                 	db	73
  4596  00F818  20                 	db	32
  4597  00F819  52                 	db	82
  4598  00F81A  45                 	db	69
  4599  00F81B  53                 	db	83
  4600  00F81C  00                 	db	0
  4601  00F81D  00                 	db	0
  4602  00F81E  00                 	db	0
  4603  00F81F  00                 	db	0
  4604  00F820  00                 	db	0
  4605  00F821  00                 	db	0
  4606  00F822  50                 	db	80
  4607  00F823  31                 	db	49
  4608  00F824  20                 	db	32
  4609  00F825  43                 	db	67
  4610  00F826  43                 	db	67
  4611  00F827  3A                 	db	58
  4612  00F828  00                 	db	0
  4613  00F829  00                 	db	0
  4614  00F82A  00                 	db	0
  4615  00F82B  00                 	db	0
  4616  00F82C  00                 	db	0
  4617  00F82D  00                 	db	0
  4618  00F82E  00                 	db	0
  4619  00F82F  00                 	db	0
  4620  00F830  00                 	db	0
  4621  00F831  00                 	db	0
  4622  00F832  00                 	db	0
  4623  00F833  50                 	db	80
  4624  00F834  32                 	db	50
  4625  00F835  20                 	db	32
  4626  00F836  43                 	db	67
  4627  00F837  43                 	db	67
  4628  00F838  3A                 	db	58
  4629  00F839  00                 	db	0
  4630  00F83A  00                 	db	0
  4631  00F83B  00                 	db	0
  4632  00F83C  00                 	db	0
  4633  00F83D  00                 	db	0
  4634  00F83E  00                 	db	0
  4635  00F83F  00                 	db	0
  4636  00F840  00                 	db	0
  4637  00F841  00                 	db	0
  4638  00F842  00                 	db	0
  4639  00F843  00                 	db	0
  4640  00F844  50                 	db	80
  4641  00F845  33                 	db	51
  4642  00F846  20                 	db	32
  4643  00F847  43                 	db	67
  4644  00F848  43                 	db	67
  4645  00F849  3A                 	db	58
  4646  00F84A  00                 	db	0
  4647  00F84B  00                 	db	0
  4648  00F84C  00                 	db	0
  4649  00F84D  00                 	db	0
  4650  00F84E  00                 	db	0
  4651  00F84F  00                 	db	0
  4652  00F850  00                 	db	0
  4653  00F851  00                 	db	0
  4654  00F852  00                 	db	0
  4655  00F853  00                 	db	0
  4656  00F854  00                 	db	0
  4657  00F855  50                 	db	80
  4658  00F856  34                 	db	52
  4659  00F857  20                 	db	32
  4660  00F858  43                 	db	67
  4661  00F859  43                 	db	67
  4662  00F85A  3A                 	db	58
  4663  00F85B  00                 	db	0
  4664  00F85C  00                 	db	0
  4665  00F85D  00                 	db	0
  4666  00F85E  00                 	db	0
  4667  00F85F  00                 	db	0
  4668  00F860  00                 	db	0
  4669  00F861  00                 	db	0
  4670  00F862  00                 	db	0
  4671  00F863  00                 	db	0
  4672  00F864  00                 	db	0
  4673  00F865  00                 	db	0
  4674  00F866  50                 	db	80
  4675  00F867  35                 	db	53
  4676  00F868  20                 	db	32
  4677  00F869  43                 	db	67
  4678  00F86A  43                 	db	67
  4679  00F86B  3A                 	db	58
  4680  00F86C  00                 	db	0
  4681  00F86D  00                 	db	0
  4682  00F86E  00                 	db	0
  4683  00F86F  00                 	db	0
  4684  00F870  00                 	db	0
  4685  00F871  00                 	db	0
  4686  00F872  00                 	db	0
  4687  00F873  00                 	db	0
  4688  00F874  00                 	db	0
  4689  00F875  00                 	db	0
  4690  00F876  00                 	db	0
  4691  00F877  50                 	db	80
  4692  00F878  36                 	db	54
  4693  00F879  20                 	db	32
  4694  00F87A  43                 	db	67
  4695  00F87B  43                 	db	67
  4696  00F87C  3A                 	db	58
  4697  00F87D  00                 	db	0
  4698  00F87E  00                 	db	0
  4699  00F87F  00                 	db	0
  4700  00F880  00                 	db	0
  4701  00F881  00                 	db	0
  4702  00F882  00                 	db	0
  4703  00F883  00                 	db	0
  4704  00F884  00                 	db	0
  4705  00F885  00                 	db	0
  4706  00F886  00                 	db	0
  4707  00F887  00                 	db	0
  4708  00F888  50                 	db	80
  4709  00F889  37                 	db	55
  4710  00F88A  20                 	db	32
  4711  00F88B  43                 	db	67
  4712  00F88C  43                 	db	67
  4713  00F88D  3A                 	db	58
  4714  00F88E  00                 	db	0
  4715  00F88F  00                 	db	0
  4716  00F890  00                 	db	0
  4717  00F891  00                 	db	0
  4718  00F892  00                 	db	0
  4719  00F893  00                 	db	0
  4720  00F894  00                 	db	0
  4721  00F895  00                 	db	0
  4722  00F896  00                 	db	0
  4723  00F897  00                 	db	0
  4724  00F898  00                 	db	0
  4725  00F899  53                 	db	83
  4726  00F89A  31                 	db	49
  4727  00F89B  20                 	db	32
  4728  00F89C  43                 	db	67
  4729  00F89D  43                 	db	67
  4730  00F89E  3A                 	db	58
  4731  00F89F  20                 	db	32
  4732  00F8A0  00                 	db	0
  4733  00F8A1  00                 	db	0
  4734  00F8A2  00                 	db	0
  4735  00F8A3  00                 	db	0
  4736  00F8A4  00                 	db	0
  4737  00F8A5  00                 	db	0
  4738  00F8A6  00                 	db	0
  4739  00F8A7  00                 	db	0
  4740  00F8A8  00                 	db	0
  4741  00F8A9  00                 	db	0
  4742  00F8AA  53                 	db	83
  4743  00F8AB  32                 	db	50
  4744  00F8AC  20                 	db	32
  4745  00F8AD  43                 	db	67
  4746  00F8AE  43                 	db	67
  4747  00F8AF  3A                 	db	58
  4748  00F8B0  20                 	db	32
  4749  00F8B1  00                 	db	0
  4750  00F8B2  00                 	db	0
  4751  00F8B3  00                 	db	0
  4752  00F8B4  00                 	db	0
  4753  00F8B5  00                 	db	0
  4754  00F8B6  00                 	db	0
  4755  00F8B7  00                 	db	0
  4756  00F8B8  00                 	db	0
  4757  00F8B9  00                 	db	0
  4758  00F8BA  00                 	db	0
  4759  00F8BB  53                 	db	83
  4760  00F8BC  33                 	db	51
  4761  00F8BD  20                 	db	32
  4762  00F8BE  43                 	db	67
  4763  00F8BF  43                 	db	67
  4764  00F8C0  3A                 	db	58
  4765  00F8C1  20                 	db	32
  4766  00F8C2  00                 	db	0
  4767  00F8C3  00                 	db	0
  4768  00F8C4  00                 	db	0
  4769  00F8C5  00                 	db	0
  4770  00F8C6  00                 	db	0
  4771  00F8C7  00                 	db	0
  4772  00F8C8  00                 	db	0
  4773  00F8C9  00                 	db	0
  4774  00F8CA  00                 	db	0
  4775  00F8CB  00                 	db	0
  4776  00F8CC  53                 	db	83
  4777  00F8CD  34                 	db	52
  4778  00F8CE  20                 	db	32
  4779  00F8CF  43                 	db	67
  4780  00F8D0  43                 	db	67
  4781  00F8D1  3A                 	db	58
  4782  00F8D2  20                 	db	32
  4783  00F8D3  00                 	db	0
  4784  00F8D4  00                 	db	0
  4785  00F8D5  00                 	db	0
  4786  00F8D6  00                 	db	0
  4787  00F8D7  00                 	db	0
  4788  00F8D8  00                 	db	0
  4789  00F8D9  00                 	db	0
  4790  00F8DA  00                 	db	0
  4791  00F8DB  00                 	db	0
  4792  00F8DC  00                 	db	0
  4793  00F8DD  53                 	db	83
  4794  00F8DE  35                 	db	53
  4795  00F8DF  20                 	db	32
  4796  00F8E0  43                 	db	67
  4797  00F8E1  43                 	db	67
  4798  00F8E2  3A                 	db	58
  4799  00F8E3  20                 	db	32
  4800  00F8E4  00                 	db	0
  4801  00F8E5  00                 	db	0
  4802  00F8E6  00                 	db	0
  4803  00F8E7  00                 	db	0
  4804  00F8E8  00                 	db	0
  4805  00F8E9  00                 	db	0
  4806  00F8EA  00                 	db	0
  4807  00F8EB  00                 	db	0
  4808  00F8EC  00                 	db	0
  4809  00F8ED  00                 	db	0
  4810  00F8EE  53                 	db	83
  4811  00F8EF  36                 	db	54
  4812  00F8F0  20                 	db	32
  4813  00F8F1  43                 	db	67
  4814  00F8F2  43                 	db	67
  4815  00F8F3  3A                 	db	58
  4816  00F8F4  20                 	db	32
  4817  00F8F5  00                 	db	0
  4818  00F8F6  00                 	db	0
  4819  00F8F7  00                 	db	0
  4820  00F8F8  00                 	db	0
  4821  00F8F9  00                 	db	0
  4822  00F8FA  00                 	db	0
  4823  00F8FB  00                 	db	0
  4824  00F8FC  00                 	db	0
  4825  00F8FD  00                 	db	0
  4826  00F8FE  00                 	db	0
  4827  00F8FF  53                 	db	83
  4828  00F900  37                 	db	55
  4829  00F901  20                 	db	32
  4830  00F902  43                 	db	67
  4831  00F903  43                 	db	67
  4832  00F904  3A                 	db	58
  4833  00F905  20                 	db	32
  4834  00F906  00                 	db	0
  4835  00F907  00                 	db	0
  4836  00F908  00                 	db	0
  4837  00F909  00                 	db	0
  4838  00F90A  00                 	db	0
  4839  00F90B  00                 	db	0
  4840  00F90C  00                 	db	0
  4841  00F90D  00                 	db	0
  4842  00F90E  00                 	db	0
  4843  00F90F  00                 	db	0
  4844  00F910  4A                 	db	74
  4845  00F911  58                 	db	88
  4846  00F912  20                 	db	32
  4847  00F913  43                 	db	67
  4848  00F914  43                 	db	67
  4849  00F915  3A                 	db	58
  4850  00F916  20                 	db	32
  4851  00F917  00                 	db	0
  4852  00F918  00                 	db	0
  4853  00F919  00                 	db	0
  4854  00F91A  00                 	db	0
  4855  00F91B  00                 	db	0
  4856  00F91C  00                 	db	0
  4857  00F91D  00                 	db	0
  4858  00F91E  00                 	db	0
  4859  00F91F  00                 	db	0
  4860  00F920  00                 	db	0
  4861  00F921  4A                 	db	74
  4862  00F922  59                 	db	89
  4863  00F923  20                 	db	32
  4864  00F924  43                 	db	67
  4865  00F925  43                 	db	67
  4866  00F926  3A                 	db	58
  4867  00F927  20                 	db	32
  4868  00F928  00                 	db	0
  4869  00F929  00                 	db	0
  4870  00F92A  00                 	db	0
  4871  00F92B  00                 	db	0
  4872  00F92C  00                 	db	0
  4873  00F92D  00                 	db	0
  4874  00F92E  00                 	db	0
  4875  00F92F  00                 	db	0
  4876  00F930  00                 	db	0
  4877  00F931  00                 	db	0
  4878  00F932  4D                 	db	77
  4879  00F933  61                 	db	97
  4880  00F934  69                 	db	105
  4881  00F935  6E                 	db	110
  4882  00F936  20                 	db	32
  4883  00F937  63                 	db	99
  4884  00F938  68                 	db	104
  4885  00F939  61                 	db	97
  4886  00F93A  6E                 	db	110
  4887  00F93B  6E                 	db	110
  4888  00F93C  65                 	db	101
  4889  00F93D  6C                 	db	108
  4890  00F93E  00                 	db	0
  4891  00F93F  00                 	db	0
  4892  00F940  00                 	db	0
  4893  00F941  00                 	db	0
  4894  00F942  00                 	db	0
  4895  00F943  44                 	db	68
  4896  00F944  72                 	db	114
  4897  00F945  75                 	db	117
  4898  00F946  6D                 	db	109
  4899  00F947  20                 	db	32
  4900  00F948  63                 	db	99
  4901  00F949  68                 	db	104
  4902  00F94A  61                 	db	97
  4903  00F94B  6E                 	db	110
  4904  00F94C  6E                 	db	110
  4905  00F94D  65                 	db	101
  4906  00F94E  6C                 	db	108
  4907  00F94F  00                 	db	0
  4908  00F950  00                 	db	0
  4909  00F951  00                 	db	0
  4910  00F952  00                 	db	0
  4911  00F953  00                 	db	0
  4912  00F954  53                 	db	83
  4913  00F955  61                 	db	97
  4914  00F956  76                 	db	118
  4915  00F957  65                 	db	101
  4916  00F958  20                 	db	32
  4917  00F959  73                 	db	115
  4918  00F95A  65                 	db	101
  4919  00F95B  74                 	db	116
  4920  00F95C  74                 	db	116
  4921  00F95D  69                 	db	105
  4922  00F95E  6E                 	db	110
  4923  00F95F  67                 	db	103
  4924  00F960  73                 	db	115
  4925  00F961  00                 	db	0
  4926  00F962  00                 	db	0
  4927  00F963  00                 	db	0
  4928  00F964  00                 	db	0
  4929  00F965  4C                 	db	76
  4930  00F966  6F                 	db	111
  4931  00F967  61                 	db	97
  4932  00F968  64                 	db	100
  4933  00F969  20                 	db	32
  4934  00F96A  73                 	db	115
  4935  00F96B  65                 	db	101
  4936  00F96C  74                 	db	116
  4937  00F96D  74                 	db	116
  4938  00F96E  69                 	db	105
  4939  00F96F  6E                 	db	110
  4940  00F970  67                 	db	103
  4941  00F971  73                 	db	115
  4942  00F972  00                 	db	0
  4943  00F973  00                 	db	0
  4944  00F974  00                 	db	0
  4945  00F975  00                 	db	0
  4946  00F976  52                 	db	82
  4947  00F977  65                 	db	101
  4948  00F978  73                 	db	115
  4949  00F979  74                 	db	116
  4950  00F97A  6F                 	db	111
  4951  00F97B  72                 	db	114
  4952  00F97C  65                 	db	101
  4953  00F97D  20                 	db	32
  4954  00F97E  64                 	db	100
  4955  00F97F  65                 	db	101
  4956  00F980  66                 	db	102
  4957  00F981  61                 	db	97
  4958  00F982  75                 	db	117
  4959  00F983  6C                 	db	108
  4960  00F984  74                 	db	116
  4961  00F985  73                 	db	115
  4962  00F986  00                 	db	0
  4963  00F987  45                 	db	69
  4964  00F988  6E                 	db	110
  4965  00F989  63                 	db	99
  4966  00F98A  6F                 	db	111
  4967  00F98B  64                 	db	100
  4968  00F98C  65                 	db	101
  4969  00F98D  72                 	db	114
  4970  00F98E  20                 	db	32
  4971  00F98F  50                 	db	80
  4972  00F990  6F                 	db	111
  4973  00F991  6C                 	db	108
  4974  00F992  61                 	db	97
  4975  00F993  72                 	db	114
  4976  00F994  69                 	db	105
  4977  00F995  74                 	db	116
  4978  00F996  79                 	db	121
  4979  00F997  00                 	db	0
  4980  00F998  45                 	db	69
  4981  00F999  78                 	db	120
  4982  00F99A  69                 	db	105
  4983  00F99B  74                 	db	116
  4984  00F99C  00                 	db	0
  4985  00F99D  00                 	db	0
  4986  00F99E  00                 	db	0
  4987  00F99F  00                 	db	0
  4988  00F9A0  00                 	db	0
  4989  00F9A1  00                 	db	0
  4990  00F9A2  00                 	db	0
  4991  00F9A3  00                 	db	0
  4992  00F9A4  00                 	db	0
  4993  00F9A5  00                 	db	0
  4994  00F9A6  00                 	db	0
  4995  00F9A7  00                 	db	0
  4996  00F9A8  00                 	db	0
  4997  00F9A9  53                 	db	83
  4998  00F9AA  6C                 	db	108
  4999  00F9AB  6F                 	db	111
  5000  00F9AC  74                 	db	116
  5001  00F9AD  20                 	db	32
  5002  00F9AE  31                 	db	49
  5003  00F9AF  00                 	db	0
  5004  00F9B0  00                 	db	0
  5005  00F9B1  00                 	db	0
  5006  00F9B2  00                 	db	0
  5007  00F9B3  00                 	db	0
  5008  00F9B4  00                 	db	0
  5009  00F9B5  00                 	db	0
  5010  00F9B6  00                 	db	0
  5011  00F9B7  00                 	db	0
  5012  00F9B8  00                 	db	0
  5013  00F9B9  00                 	db	0
  5014  00F9BA  53                 	db	83
  5015  00F9BB  6C                 	db	108
  5016  00F9BC  6F                 	db	111
  5017  00F9BD  74                 	db	116
  5018  00F9BE  20                 	db	32
  5019  00F9BF  32                 	db	50
  5020  00F9C0  00                 	db	0
  5021  00F9C1  00                 	db	0
  5022  00F9C2  00                 	db	0
  5023  00F9C3  00                 	db	0
  5024  00F9C4  00                 	db	0
  5025  00F9C5  00                 	db	0
  5026  00F9C6  00                 	db	0
  5027  00F9C7  00                 	db	0
  5028  00F9C8  00                 	db	0
  5029  00F9C9  00                 	db	0
  5030  00F9CA  00                 	db	0
  5031  00F9CB  53                 	db	83
  5032  00F9CC  6C                 	db	108
  5033  00F9CD  6F                 	db	111
  5034  00F9CE  74                 	db	116
  5035  00F9CF  20                 	db	32
  5036  00F9D0  33                 	db	51
  5037  00F9D1  00                 	db	0
  5038  00F9D2  00                 	db	0
  5039  00F9D3  00                 	db	0
  5040  00F9D4  00                 	db	0
  5041  00F9D5  00                 	db	0
  5042  00F9D6  00                 	db	0
  5043  00F9D7  00                 	db	0
  5044  00F9D8  00                 	db	0
  5045  00F9D9  00                 	db	0
  5046  00F9DA  00                 	db	0
  5047  00F9DB  00                 	db	0
  5048  00F9DC  53                 	db	83
  5049  00F9DD  6C                 	db	108
  5050  00F9DE  6F                 	db	111
  5051  00F9DF  74                 	db	116
  5052  00F9E0  20                 	db	32
  5053  00F9E1  34                 	db	52
  5054  00F9E2  00                 	db	0
  5055  00F9E3  00                 	db	0
  5056  00F9E4  00                 	db	0
  5057  00F9E5  00                 	db	0
  5058  00F9E6  00                 	db	0
  5059  00F9E7  00                 	db	0
  5060  00F9E8  00                 	db	0
  5061  00F9E9  00                 	db	0
  5062  00F9EA  00                 	db	0
  5063  00F9EB  00                 	db	0
  5064  00F9EC  00                 	db	0
  5065  00F9ED  45                 	db	69
  5066  00F9EE  78                 	db	120
  5067  00F9EF  69                 	db	105
  5068  00F9F0  74                 	db	116
  5069  00F9F1  00                 	db	0
  5070  00F9F2  00                 	db	0
  5071  00F9F3  00                 	db	0
  5072  00F9F4  00                 	db	0
  5073  00F9F5  00                 	db	0
  5074  00F9F6  00                 	db	0
  5075  00F9F7  00                 	db	0
  5076  00F9F8  00                 	db	0
  5077  00F9F9  00                 	db	0
  5078  00F9FA  00                 	db	0
  5079  00F9FB  00                 	db	0
  5080  00F9FC  00                 	db	0
  5081  00F9FD  00                 	db	0
  5082  00F9FE  43                 	db	67
  5083  00F9FF  57                 	db	87
  5084  00FA00  20                 	db	32
  5085  00FA01  49                 	db	73
  5086  00FA02  53                 	db	83
  5087  00FA03  20                 	db	32
  5088  00FA04  49                 	db	73
  5089  00FA05  4E                 	db	78
  5090  00FA06  43                 	db	67
  5091  00FA07  52                 	db	82
  5092  00FA08  45                 	db	69
  5093  00FA09  41                 	db	65
  5094  00FA0A  53                 	db	83
  5095  00FA0B  45                 	db	69
  5096  00FA0C  00                 	db	0
  5097  00FA0D  00                 	db	0
  5098  00FA0E  00                 	db	0
  5099  00FA0F  43                 	db	67
  5100  00FA10  43                 	db	67
  5101  00FA11  57                 	db	87
  5102  00FA12  20                 	db	32
  5103  00FA13  49                 	db	73
  5104  00FA14  53                 	db	83
  5105  00FA15  20                 	db	32
  5106  00FA16  49                 	db	73
  5107  00FA17  4E                 	db	78
  5108  00FA18  43                 	db	67
  5109  00FA19  52                 	db	82
  5110  00FA1A  45                 	db	69
  5111  00FA1B  41                 	db	65
  5112  00FA1C  53                 	db	83
  5113  00FA1D  45                 	db	69
  5114  00FA1E  00                 	db	0
  5115  00FA1F  00                 	db	0
  5116  00FA20  41                 	db	65
  5117  00FA21  72                 	db	114
  5118  00FA22  70                 	db	112
  5119  00FA23  65                 	db	101
  5120  00FA24  67                 	db	103
  5121  00FA25  67                 	db	103
  5122  00FA26  69                 	db	105
  5123  00FA27  6F                 	db	111
  5124  00FA28  20                 	db	32
  5125  00FA29  4F                 	db	79
  5126  00FA2A  46                 	db	70
  5127  00FA2B  46                 	db	70
  5128  00FA2C  2F                 	db	47
  5129  00FA2D  4F                 	db	79
  5130  00FA2E  4E                 	db	78
  5131  00FA2F  00                 	db	0
  5132  00FA30  00                 	db	0
  5133  00FA31  54                 	db	84
  5134  00FA32  65                 	db	101
  5135  00FA33  6D                 	db	109
  5136  00FA34  70                 	db	112
  5137  00FA35  6F                 	db	111
  5138  00FA36  00                 	db	0
  5139  00FA37  00                 	db	0
  5140  00FA38  00                 	db	0
  5141  00FA39  00                 	db	0
  5142  00FA3A  00                 	db	0
  5143  00FA3B  00                 	db	0
  5144  00FA3C  00                 	db	0
  5145  00FA3D  00                 	db	0
  5146  00FA3E  00                 	db	0
  5147  00FA3F  00                 	db	0
  5148  00FA40  00                 	db	0
  5149  00FA41  00                 	db	0
  5150  00FA42  4F                 	db	79
  5151  00FA43  63                 	db	99
  5152  00FA44  74                 	db	116
  5153  00FA45  61                 	db	97
  5154  00FA46  76                 	db	118
  5155  00FA47  65                 	db	101
  5156  00FA48  20                 	db	32
  5157  00FA49  52                 	db	82
  5158  00FA4A  61                 	db	97
  5159  00FA4B  6E                 	db	110
  5160  00FA4C  67                 	db	103
  5161  00FA4D  65                 	db	101
  5162  00FA4E  00                 	db	0
  5163  00FA4F  00                 	db	0
  5164  00FA50  00                 	db	0
  5165  00FA51  00                 	db	0
  5166  00FA52  00                 	db	0
  5167  00FA53  41                 	db	65
  5168  00FA54  72                 	db	114
  5169  00FA55  70                 	db	112
  5170  00FA56  65                 	db	101
  5171  00FA57  67                 	db	103
  5172  00FA58  67                 	db	103
  5173  00FA59  69                 	db	105
  5174  00FA5A  6F                 	db	111
  5175  00FA5B  20                 	db	32
  5176  00FA5C  54                 	db	84
  5177  00FA5D  79                 	db	121
  5178  00FA5E  70                 	db	112
  5179  00FA5F  65                 	db	101
  5180  00FA60  00                 	db	0
  5181  00FA61  00                 	db	0
  5182  00FA62  00                 	db	0
  5183  00FA63  00                 	db	0
  5184  00FA64  4E                 	db	78
  5185  00FA65  6F                 	db	111
  5186  00FA66  74                 	db	116
  5187  00FA67  65                 	db	101
  5188  00FA68  20                 	db	32
  5189  00FA69  4C                 	db	76
  5190  00FA6A  65                 	db	101
  5191  00FA6B  6E                 	db	110
  5192  00FA6C  67                 	db	103
  5193  00FA6D  74                 	db	116
  5194  00FA6E  68                 	db	104
  5195  00FA6F  00                 	db	0
  5196  00FA70  00                 	db	0
  5197  00FA71  00                 	db	0
  5198  00FA72  00                 	db	0
  5199  00FA73  00                 	db	0
  5200  00FA74  00                 	db	0
  5201  00FA75  4C                 	db	76
  5202  00FA76  61                 	db	97
  5203  00FA77  74                 	db	116
  5204  00FA78  63                 	db	99
  5205  00FA79  68                 	db	104
  5206  00FA7A  2F                 	db	47
  5207  00FA7B  41                 	db	65
  5208  00FA7C  75                 	db	117
  5209  00FA7D  74                 	db	116
  5210  00FA7E  6F                 	db	111
  5211  00FA7F  20                 	db	32
  5212  00FA80  4C                 	db	76
  5213  00FA81  61                 	db	97
  5214  00FA82  74                 	db	116
  5215  00FA83  63                 	db	99
  5216  00FA84  68                 	db	104
  5217  00FA85  00                 	db	0
  5218  00FA86  55                 	db	85
  5219  00FA87  6E                 	db	110
  5220  00FA88  2D                 	db	45
  5221  00FA89  6C                 	db	108
  5222  00FA8A  61                 	db	97
  5223  00FA8B  74                 	db	116
  5224  00FA8C  63                 	db	99
  5225  00FA8D  68                 	db	104
  5226  00FA8E  20                 	db	32
  5227  00FA8F  4D                 	db	77
  5228  00FA90  6F                 	db	111
  5229  00FA91  64                 	db	100
  5230  00FA92  65                 	db	101
  5231  00FA93  00                 	db	0
  5232  00FA94  00                 	db	0
  5233  00FA95  00                 	db	0
  5234  00FA96  00                 	db	0
  5235  00FA97  52                 	db	82
  5236  00FA98  61                 	db	97
  5237  00FA99  6E                 	db	110
  5238  00FA9A  64                 	db	100
  5239  00FA9B  6F                 	db	111
  5240  00FA9C  6D                 	db	109
  5241  00FA9D  69                 	db	105
  5242  00FA9E  7A                 	db	122
  5243  00FA9F  65                 	db	101
  5244  00FAA0  2F                 	db	47
  5245  00FAA1  53                 	db	83
  5246  00FAA2  6B                 	db	107
  5247  00FAA3  69                 	db	105
  5248  00FAA4  70                 	db	112
  5249  00FAA5  00                 	db	0
  5250  00FAA6  00                 	db	0
  5251  00FAA7  00                 	db	0
  5252  00FAA8  4C                 	db	76
  5253  00FAA9  61                 	db	97
  5254  00FAAA  73                 	db	115
  5255  00FAAB  74                 	db	116
  5256  00FAAC  20                 	db	32
  5257  00FAAD  4E                 	db	78
  5258  00FAAE  6F                 	db	111
  5259  00FAAF  74                 	db	116
  5260  00FAB0  65                 	db	101
  5261  00FAB1  20                 	db	32
  5262  00FAB2  4D                 	db	77
  5263  00FAB3  6F                 	db	111
  5264  00FAB4  64                 	db	100
  5265  00FAB5  65                 	db	101
  5266  00FAB6  00                 	db	0
  5267  00FAB7  00                 	db	0
  5268  00FAB8  00                 	db	0
  5269  00FAB9  41                 	db	65
  5270  00FABA  52                 	db	82
  5271  00FABB  50                 	db	80
  5272  00FABC  45                 	db	69
  5273  00FABD  47                 	db	71
  5274  00FABE  47                 	db	71
  5275  00FABF  49                 	db	73
  5276  00FAC0  41                 	db	65
  5277  00FAC1  54                 	db	84
  5278  00FAC2  4F                 	db	79
  5279  00FAC3  52                 	db	82
  5280  00FAC4  20                 	db	32
  5281  00FAC5  4F                 	db	79
  5282  00FAC6  46                 	db	70
  5283  00FAC7  46                 	db	70
  5284  00FAC8  00                 	db	0
  5285  00FAC9  00                 	db	0
  5286  00FACA  41                 	db	65
  5287  00FACB  52                 	db	82
  5288  00FACC  50                 	db	80
  5289  00FACD  45                 	db	69
  5290  00FACE  47                 	db	71
  5291  00FACF  47                 	db	71
  5292  00FAD0  49                 	db	73
  5293  00FAD1  41                 	db	65
  5294  00FAD2  54                 	db	84
  5295  00FAD3  4F                 	db	79
  5296  00FAD4  52                 	db	82
  5297  00FAD5  20                 	db	32
  5298  00FAD6  4F                 	db	79
  5299  00FAD7  4E                 	db	78
  5300  00FAD8  00                 	db	0
  5301  00FAD9  00                 	db	0
  5302  00FADA  00                 	db	0
  5303  00FADB  55                 	db	85
  5304  00FADC  50                 	db	80
  5305  00FADD  00                 	db	0
  5306  00FADE  00                 	db	0
  5307  00FADF  00                 	db	0
  5308  00FAE0  00                 	db	0
  5309  00FAE1  00                 	db	0
  5310  00FAE2  00                 	db	0
  5311  00FAE3  00                 	db	0
  5312  00FAE4  00                 	db	0
  5313  00FAE5  00                 	db	0
  5314  00FAE6  00                 	db	0
  5315  00FAE7  00                 	db	0
  5316  00FAE8  00                 	db	0
  5317  00FAE9  00                 	db	0
  5318  00FAEA  00                 	db	0
  5319  00FAEB  00                 	db	0
  5320  00FAEC  44                 	db	68
  5321  00FAED  4F                 	db	79
  5322  00FAEE  57                 	db	87
  5323  00FAEF  4E                 	db	78
  5324  00FAF0  00                 	db	0
  5325  00FAF1  00                 	db	0
  5326  00FAF2  00                 	db	0
  5327  00FAF3  00                 	db	0
  5328  00FAF4  00                 	db	0
  5329  00FAF5  00                 	db	0
  5330  00FAF6  00                 	db	0
  5331  00FAF7  00                 	db	0
  5332  00FAF8  00                 	db	0
  5333  00FAF9  00                 	db	0
  5334  00FAFA  00                 	db	0
  5335  00FAFB  00                 	db	0
  5336  00FAFC  00                 	db	0
  5337  00FAFD  55                 	db	85
  5338  00FAFE  50                 	db	80
  5339  00FAFF  2F                 	db	47
  5340  00FB00  44                 	db	68
  5341  00FB01  4F                 	db	79
  5342  00FB02  57                 	db	87
  5343  00FB03  4E                 	db	78
  5344  00FB04  00                 	db	0
  5345  00FB05  00                 	db	0
  5346  00FB06  00                 	db	0
  5347  00FB07  00                 	db	0
  5348  00FB08  00                 	db	0
  5349  00FB09  00                 	db	0
  5350  00FB0A  00                 	db	0
  5351  00FB0B  00                 	db	0
  5352  00FB0C  00                 	db	0
  5353  00FB0D  00                 	db	0
  5354  00FB0E  44                 	db	68
  5355  00FB0F  4F                 	db	79
  5356  00FB10  57                 	db	87
  5357  00FB11  4E                 	db	78
  5358  00FB12  2F                 	db	47
  5359  00FB13  55                 	db	85
  5360  00FB14  50                 	db	80
  5361  00FB15  00                 	db	0
  5362  00FB16  00                 	db	0
  5363  00FB17  00                 	db	0
  5364  00FB18  00                 	db	0
  5365  00FB19  00                 	db	0
  5366  00FB1A  00                 	db	0
  5367  00FB1B  00                 	db	0
  5368  00FB1C  00                 	db	0
  5369  00FB1D  00                 	db	0
  5370  00FB1E  00                 	db	0
  5371  00FB1F  53                 	db	83
  5372  00FB20  48                 	db	72
  5373  00FB21  55                 	db	85
  5374  00FB22  46                 	db	70
  5375  00FB23  46                 	db	70
  5376  00FB24  4C                 	db	76
  5377  00FB25  45                 	db	69
  5378  00FB26  00                 	db	0
  5379  00FB27  00                 	db	0
  5380  00FB28  00                 	db	0
  5381  00FB29  00                 	db	0
  5382  00FB2A  00                 	db	0
  5383  00FB2B  00                 	db	0
  5384  00FB2C  00                 	db	0
  5385  00FB2D  00                 	db	0
  5386  00FB2E  00                 	db	0
  5387  00FB2F  00                 	db	0
  5388  00FB30  52                 	db	82
  5389  00FB31  41                 	db	65
  5390  00FB32  4E                 	db	78
  5391  00FB33  44                 	db	68
  5392  00FB34  4F                 	db	79
  5393  00FB35  4D                 	db	77
  5394  00FB36  00                 	db	0
  5395  00FB37  00                 	db	0
  5396  00FB38  00                 	db	0
  5397  00FB39  00                 	db	0
  5398  00FB3A  00                 	db	0
  5399  00FB3B  00                 	db	0
  5400  00FB3C  00                 	db	0
  5401  00FB3D  00                 	db	0
  5402  00FB3E  00                 	db	0
  5403  00FB3F  00                 	db	0
  5404  00FB40  00                 	db	0
  5405  00FB41  41                 	db	65
  5406  00FB42  53                 	db	83
  5407  00FB43  20                 	db	32
  5408  00FB44  50                 	db	80
  5409  00FB45  52                 	db	82
  5410  00FB46  45                 	db	69
  5411  00FB47  53                 	db	83
  5412  00FB48  53                 	db	83
  5413  00FB49  45                 	db	69
  5414  00FB4A  44                 	db	68
  5415  00FB4B  00                 	db	0
  5416  00FB4C  00                 	db	0
  5417  00FB4D  00                 	db	0
  5418  00FB4E  00                 	db	0
  5419  00FB4F  00                 	db	0
  5420  00FB50  00                 	db	0
  5421  00FB51  00                 	db	0
  5422  00FB52  31                 	db	49
  5423  00FB53  2F                 	db	47
  5424  00FB54  34                 	db	52
  5425  00FB55  00                 	db	0
  5426  00FB56  00                 	db	0
  5427  00FB57  00                 	db	0
  5428  00FB58  00                 	db	0
  5429  00FB59  00                 	db	0
  5430  00FB5A  00                 	db	0
  5431  00FB5B  00                 	db	0
  5432  00FB5C  00                 	db	0
  5433  00FB5D  00                 	db	0
  5434  00FB5E  00                 	db	0
  5435  00FB5F  00                 	db	0
  5436  00FB60  00                 	db	0
  5437  00FB61  00                 	db	0
  5438  00FB62  00                 	db	0
  5439  00FB63  31                 	db	49
  5440  00FB64  2F                 	db	47
  5441  00FB65  34                 	db	52
  5442  00FB66  20                 	db	32
  5443  00FB67  44                 	db	68
  5444  00FB68  4F                 	db	79
  5445  00FB69  54                 	db	84
  5446  00FB6A  54                 	db	84
  5447  00FB6B  45                 	db	69
  5448  00FB6C  44                 	db	68
  5449  00FB6D  00                 	db	0
  5450  00FB6E  00                 	db	0
  5451  00FB6F  00                 	db	0
  5452  00FB70  00                 	db	0
  5453  00FB71  00                 	db	0
  5454  00FB72  00                 	db	0
  5455  00FB73  00                 	db	0
  5456  00FB74  31                 	db	49
  5457  00FB75  2F                 	db	47
  5458  00FB76  34                 	db	52
  5459  00FB77  20                 	db	32
  5460  00FB78  54                 	db	84
  5461  00FB79  52                 	db	82
  5462  00FB7A  49                 	db	73
  5463  00FB7B  50                 	db	80
  5464  00FB7C  4C                 	db	76
  5465  00FB7D  45                 	db	69
  5466  00FB7E  54                 	db	84
  5467  00FB7F  00                 	db	0
  5468  00FB80  00                 	db	0
  5469  00FB81  00                 	db	0
  5470  00FB82  00                 	db	0
  5471  00FB83  00                 	db	0
  5472  00FB84  00                 	db	0
  5473  00FB85  31                 	db	49
  5474  00FB86  2F                 	db	47
  5475  00FB87  38                 	db	56
  5476  00FB88  00                 	db	0
  5477  00FB89  00                 	db	0
  5478  00FB8A  00                 	db	0
  5479  00FB8B  00                 	db	0
  5480  00FB8C  00                 	db	0
  5481  00FB8D  00                 	db	0
  5482  00FB8E  00                 	db	0
  5483  00FB8F  00                 	db	0
  5484  00FB90  00                 	db	0
  5485  00FB91  00                 	db	0
  5486  00FB92  00                 	db	0
  5487  00FB93  00                 	db	0
  5488  00FB94  00                 	db	0
  5489  00FB95  00                 	db	0
  5490  00FB96  31                 	db	49
  5491  00FB97  2F                 	db	47
  5492  00FB98  38                 	db	56
  5493  00FB99  20                 	db	32
  5494  00FB9A  44                 	db	68
  5495  00FB9B  4F                 	db	79
  5496  00FB9C  54                 	db	84
  5497  00FB9D  54                 	db	84
  5498  00FB9E  45                 	db	69
  5499  00FB9F  44                 	db	68
  5500  00FBA0  00                 	db	0
  5501  00FBA1  00                 	db	0
  5502  00FBA2  00                 	db	0
  5503  00FBA3  00                 	db	0
  5504  00FBA4  00                 	db	0
  5505  00FBA5  00                 	db	0
  5506  00FBA6  00                 	db	0
  5507  00FBA7  31                 	db	49
  5508  00FBA8  2F                 	db	47
  5509  00FBA9  38                 	db	56
  5510  00FBAA  20                 	db	32
  5511  00FBAB  54                 	db	84
  5512  00FBAC  52                 	db	82
  5513  00FBAD  49                 	db	73
  5514  00FBAE  50                 	db	80
  5515  00FBAF  4C                 	db	76
  5516  00FBB0  45                 	db	69
  5517  00FBB1  54                 	db	84
  5518  00FBB2  00                 	db	0
  5519  00FBB3  00                 	db	0
  5520  00FBB4  00                 	db	0
  5521  00FBB5  00                 	db	0
  5522  00FBB6  00                 	db	0
  5523  00FBB7  00                 	db	0
  5524  00FBB8  31                 	db	49
  5525  00FBB9  2F                 	db	47
  5526  00FBBA  31                 	db	49
  5527  00FBBB  36                 	db	54
  5528  00FBBC  00                 	db	0
  5529  00FBBD  00                 	db	0
  5530  00FBBE  00                 	db	0
  5531  00FBBF  00                 	db	0
  5532  00FBC0  00                 	db	0
  5533  00FBC1  00                 	db	0
  5534  00FBC2  00                 	db	0
  5535  00FBC3  00                 	db	0
  5536  00FBC4  00                 	db	0
  5537  00FBC5  00                 	db	0
  5538  00FBC6  00                 	db	0
  5539  00FBC7  00                 	db	0
  5540  00FBC8  00                 	db	0
  5541  00FBC9  31                 	db	49
  5542  00FBCA  2F                 	db	47
  5543  00FBCB  31                 	db	49
  5544  00FBCC  36                 	db	54
  5545  00FBCD  20                 	db	32
  5546  00FBCE  44                 	db	68
  5547  00FBCF  4F                 	db	79
  5548  00FBD0  54                 	db	84
  5549  00FBD1  54                 	db	84
  5550  00FBD2  45                 	db	69
  5551  00FBD3  44                 	db	68
  5552  00FBD4  00                 	db	0
  5553  00FBD5  00                 	db	0
  5554  00FBD6  00                 	db	0
  5555  00FBD7  00                 	db	0
  5556  00FBD8  00                 	db	0
  5557  00FBD9  00                 	db	0
  5558  00FBDA  31                 	db	49
  5559  00FBDB  2F                 	db	47
  5560  00FBDC  31                 	db	49
  5561  00FBDD  36                 	db	54
  5562  00FBDE  20                 	db	32
  5563  00FBDF  54                 	db	84
  5564  00FBE0  52                 	db	82
  5565  00FBE1  49                 	db	73
  5566  00FBE2  50                 	db	80
  5567  00FBE3  4C                 	db	76
  5568  00FBE4  45                 	db	69
  5569  00FBE5  54                 	db	84
  5570  00FBE6  00                 	db	0
  5571  00FBE7  00                 	db	0
  5572  00FBE8  00                 	db	0
  5573  00FBE9  00                 	db	0
  5574  00FBEA  00                 	db	0
  5575  00FBEB  31                 	db	49
  5576  00FBEC  2F                 	db	47
  5577  00FBED  33                 	db	51
  5578  00FBEE  32                 	db	50
  5579  00FBEF  00                 	db	0
  5580  00FBF0  00                 	db	0
  5581  00FBF1  00                 	db	0
  5582  00FBF2  00                 	db	0
  5583  00FBF3  00                 	db	0
  5584  00FBF4  00                 	db	0
  5585  00FBF5  00                 	db	0
  5586  00FBF6  00                 	db	0
  5587  00FBF7  00                 	db	0
  5588  00FBF8  00                 	db	0
  5589  00FBF9  00                 	db	0
  5590  00FBFA  00                 	db	0
  5591  00FBFB  00                 	db	0
  5592  00FBFC  31                 	db	49
  5593  00FBFD  2F                 	db	47
  5594  00FBFE  33                 	db	51
  5595  00FBFF  32                 	db	50
  5596  00FC00  20                 	db	32
  5597  00FC01  44                 	db	68
  5598  00FC02  4F                 	db	79
  5599  00FC03  54                 	db	84
  5600  00FC04  54                 	db	84
  5601  00FC05  45                 	db	69
  5602  00FC06  44                 	db	68
  5603  00FC07  00                 	db	0
  5604  00FC08  00                 	db	0
  5605  00FC09  00                 	db	0
  5606  00FC0A  00                 	db	0
  5607  00FC0B  00                 	db	0
  5608  00FC0C  00                 	db	0
  5609  00FC0D  31                 	db	49
  5610  00FC0E  2F                 	db	47
  5611  00FC0F  33                 	db	51
  5612  00FC10  32                 	db	50
  5613  00FC11  20                 	db	32
  5614  00FC12  54                 	db	84
  5615  00FC13  52                 	db	82
  5616  00FC14  49                 	db	73
  5617  00FC15  50                 	db	80
  5618  00FC16  4C                 	db	76
  5619  00FC17  45                 	db	69
  5620  00FC18  54                 	db	84
  5621  00FC19  00                 	db	0
  5622  00FC1A  00                 	db	0
  5623  00FC1B  00                 	db	0
  5624  00FC1C  00                 	db	0
  5625  00FC1D  00                 	db	0
  5626  00FC1E  53                 	db	83
  5627  00FC1F  45                 	db	69
  5628  00FC20  54                 	db	84
  5629  00FC21  2F                 	db	47
  5630  00FC22  43                 	db	67
  5631  00FC23  4C                 	db	76
  5632  00FC24  45                 	db	69
  5633  00FC25  41                 	db	65
  5634  00FC26  52                 	db	82
  5635  00FC27  20                 	db	32
  5636  00FC28  4C                 	db	76
  5637  00FC29  41                 	db	65
  5638  00FC2A  54                 	db	84
  5639  00FC2B  43                 	db	67
  5640  00FC2C  48                 	db	72
  5641  00FC2D  00                 	db	0
  5642  00FC2E  00                 	db	0
  5643  00FC2F  41                 	db	65
  5644  00FC30  55                 	db	85
  5645  00FC31  54                 	db	84
  5646  00FC32  4F                 	db	79
  5647  00FC33  20                 	db	32
  5648  00FC34  4C                 	db	76
  5649  00FC35  41                 	db	65
  5650  00FC36  54                 	db	84
  5651  00FC37  43                 	db	67
  5652  00FC38  48                 	db	72
  5653  00FC39  00                 	db	0
  5654  00FC3A  00                 	db	0
  5655  00FC3B  00                 	db	0
  5656  00FC3C  00                 	db	0
  5657  00FC3D  00                 	db	0
  5658  00FC3E  00                 	db	0
  5659  00FC3F  00                 	db	0
  5660  00FC40  55                 	db	85
  5661  00FC41  6E                 	db	110
  5662  00FC42  2D                 	db	45
  5663  00FC43  4C                 	db	76
  5664  00FC44  61                 	db	97
  5665  00FC45  74                 	db	116
  5666  00FC46  63                 	db	99
  5667  00FC47  68                 	db	104
  5668  00FC48  20                 	db	32
  5669  00FC49  4D                 	db	77
  5670  00FC4A  6F                 	db	111
  5671  00FC4B  64                 	db	100
  5672  00FC4C  65                 	db	101
  5673  00FC4D  00                 	db	0
  5674  00FC4E  00                 	db	0
  5675  00FC4F  00                 	db	0
  5676  00FC50  00                 	db	0
  5677  00FC51  55                 	db	85
  5678  00FC52  4E                 	db	78
  5679  00FC53  4C                 	db	76
  5680  00FC54  41                 	db	65
  5681  00FC55  54                 	db	84
  5682  00FC56  43                 	db	67
  5683  00FC57  48                 	db	72
  5684  00FC58  20                 	db	32
  5685  00FC59  41                 	db	65
  5686  00FC5A  4C                 	db	76
  5687  00FC5B  4C                 	db	76
  5688  00FC5C  00                 	db	0
  5689  00FC5D  00                 	db	0
  5690  00FC5E  00                 	db	0
  5691  00FC5F  00                 	db	0
  5692  00FC60  00                 	db	0
  5693  00FC61  00                 	db	0
  5694  00FC62  4F                 	db	79
  5695  00FC63  4E                 	db	78
  5696  00FC64  45                 	db	69
  5697  00FC65  20                 	db	32
  5698  00FC66  41                 	db	65
  5699  00FC67  54                 	db	84
  5700  00FC68  20                 	db	32
  5701  00FC69  41                 	db	65
  5702  00FC6A  20                 	db	32
  5703  00FC6B  54                 	db	84
  5704  00FC6C  49                 	db	73
  5705  00FC6D  4D                 	db	77
  5706  00FC6E  45                 	db	69
  5707  00FC6F  00                 	db	0
  5708  00FC70  00                 	db	0
  5709  00FC71  00                 	db	0
  5710  00FC72  00                 	db	0
  5711  00FC73  52                 	db	82
  5712  00FC74  61                 	db	97
  5713  00FC75  6E                 	db	110
  5714  00FC76  64                 	db	100
  5715  00FC77  6F                 	db	111
  5716  00FC78  6D                 	db	109
  5717  00FC79  69                 	db	105
  5718  00FC7A  7A                 	db	122
  5719  00FC7B  65                 	db	101
  5720  00FC7C  00                 	db	0
  5721  00FC7D  00                 	db	0
  5722  00FC7E  00                 	db	0
  5723  00FC7F  00                 	db	0
  5724  00FC80  00                 	db	0
  5725  00FC81  00                 	db	0
  5726  00FC82  00                 	db	0
  5727  00FC83  00                 	db	0
  5728  00FC84  53                 	db	83
  5729  00FC85  6B                 	db	107
  5730  00FC86  69                 	db	105
  5731  00FC87  70                 	db	112
  5732  00FC88  20                 	db	32
  5733  00FC89  46                 	db	70
  5734  00FC8A  69                 	db	105
  5735  00FC8B  72                 	db	114
  5736  00FC8C  73                 	db	115
  5737  00FC8D  74                 	db	116
  5738  00FC8E  2F                 	db	47
  5739  00FC8F  4C                 	db	76
  5740  00FC90  61                 	db	97
  5741  00FC91  73                 	db	115
  5742  00FC92  74                 	db	116
  5743  00FC93  00                 	db	0
  5744  00FC94  00                 	db	0
  5745  00FC95  52                 	db	82
  5746  00FC96  41                 	db	65
  5747  00FC97  4E                 	db	78
  5748  00FC98  44                 	db	68
  5749  00FC99  4F                 	db	79
  5750  00FC9A  4D                 	db	77
  5751  00FC9B  49                 	db	73
  5752  00FC9C  5A                 	db	90
  5753  00FC9D  45                 	db	69
  5754  00FC9E  20                 	db	32
  5755  00FC9F  41                 	db	65
  5756  00FCA0  55                 	db	85
  5757  00FCA1  54                 	db	84
  5758  00FCA2  4F                 	db	79
  5759  00FCA3  00                 	db	0
  5760  00FCA4  00                 	db	0
  5761  00FCA5  00                 	db	0
  5762  00FCA6  52                 	db	82
  5763  00FCA7  41                 	db	65
  5764  00FCA8  4E                 	db	78
  5765  00FCA9  44                 	db	68
  5766  00FCAA  4F                 	db	79
  5767  00FCAB  4D                 	db	77
  5768  00FCAC  49                 	db	73
  5769  00FCAD  5A                 	db	90
  5770  00FCAE  45                 	db	69
  5771  00FCAF  20                 	db	32
  5772  00FCB0  4F                 	db	79
  5773  00FCB1  4E                 	db	78
  5774  00FCB2  43                 	db	67
  5775  00FCB3  45                 	db	69
  5776  00FCB4  00                 	db	0
  5777  00FCB5  00                 	db	0
  5778  00FCB6  00                 	db	0
  5779  00FCB7  4B                 	db	75
  5780  00FCB8  65                 	db	101
  5781  00FCB9  79                 	db	121
  5782  00FCBA  20                 	db	32
  5783  00FCBB  70                 	db	112
  5784  00FCBC  72                 	db	114
  5785  00FCBD  65                 	db	101
  5786  00FCBE  73                 	db	115
  5787  00FCBF  73                 	db	115
  5788  00FCC0  00                 	db	0
  5789  00FCC1  00                 	db	0
  5790  00FCC2  00                 	db	0
  5791  00FCC3  00                 	db	0
  5792  00FCC4  00                 	db	0
  5793  00FCC5  00                 	db	0
  5794  00FCC6  00                 	db	0
  5795  00FCC7  00                 	db	0
  5796  00FCC8  4B                 	db	75
  5797  00FCC9  65                 	db	101
  5798  00FCCA  79                 	db	121
  5799  00FCCB  20                 	db	32
  5800  00FCCC  72                 	db	114
  5801  00FCCD  65                 	db	101
  5802  00FCCE  6C                 	db	108
  5803  00FCCF  65                 	db	101
  5804  00FCD0  61                 	db	97
  5805  00FCD1  73                 	db	115
  5806  00FCD2  65                 	db	101
  5807  00FCD3  00                 	db	0
  5808  00FCD4  00                 	db	0
  5809  00FCD5  00                 	db	0
  5810  00FCD6  00                 	db	0
  5811  00FCD7  00                 	db	0
  5812  00FCD8  00                 	db	0
  5813  00FCD9  54                 	db	84
  5814  00FCDA  72                 	db	114
  5815  00FCDB  61                 	db	97
  5816  00FCDC  6E                 	db	110
  5817  00FCDD  73                 	db	115
  5818  00FCDE  70                 	db	112
  5819  00FCDF  6F                 	db	111
  5820  00FCE0  73                 	db	115
  5821  00FCE1  65                 	db	101
  5822  00FCE2  00                 	db	0
  5823  00FCE3  00                 	db	0
  5824  00FCE4  00                 	db	0
  5825  00FCE5  00                 	db	0
  5826  00FCE6  00                 	db	0
  5827  00FCE7  00                 	db	0
  5828  00FCE8  00                 	db	0
  5829  00FCE9  00                 	db	0
  5830  00FCEA  52                 	db	82
  5831  00FCEB  65                 	db	101
  5832  00FCEC  73                 	db	115
  5833  00FCED  65                 	db	101
  5834  00FCEE  74                 	db	116
  5835  00FCEF  00                 	db	0
  5836  00FCF0  00                 	db	0
  5837  00FCF1  00                 	db	0
  5838  00FCF2  00                 	db	0
  5839  00FCF3  00                 	db	0
  5840  00FCF4  00                 	db	0
  5841  00FCF5  00                 	db	0
  5842  00FCF6  00                 	db	0
  5843  00FCF7  00                 	db	0
  5844  00FCF8  00                 	db	0
  5845  00FCF9  00                 	db	0
  5846  00FCFA  00                 	db	0
  5847  00FCFB                     __end_of_LCD_STRINGS:
  5848                           	opt stack 0
  5849  00FCFB                     _locrian_key:
  5850                           	opt stack 0
  5851  00FCFB  0B                 	db	11
  5852  00FCFC  01                 	db	1
  5853  00FCFD  03                 	db	3
  5854  00FCFE  05                 	db	5
  5855  00FCFF  06                 	db	6
  5856  00FD00  08                 	db	8
  5857  00FD01  0A                 	db	10
  5858  00FD02  0C                 	db	12
  5859  00FD03  0D                 	db	13
  5860  00FD04  0F                 	db	15
  5861  00FD05  11                 	db	17
  5862  00FD06  12                 	db	18
  5863  00FD07  14                 	db	20
  5864  00FD08  16                 	db	22
  5865  00FD09  18                 	db	24
  5866  00FD0A                     __end_of_locrian_key:
  5867                           	opt stack 0
  5868  00FD0A                     _aeolian_key:
  5869                           	opt stack 0
  5870  00FD0A  09                 	db	9
  5871  00FD0B  02                 	db	2
  5872  00FD0C  03                 	db	3
  5873  00FD0D  05                 	db	5
  5874  00FD0E  07                 	db	7
  5875  00FD0F  08                 	db	8
  5876  00FD10  0A                 	db	10
  5877  00FD11  0C                 	db	12
  5878  00FD12  0E                 	db	14
  5879  00FD13  0F                 	db	15
  5880  00FD14  11                 	db	17
  5881  00FD15  13                 	db	19
  5882  00FD16  14                 	db	20
  5883  00FD17  16                 	db	22
  5884  00FD18  18                 	db	24
  5885  00FD19                     __end_of_aeolian_key:
  5886                           	opt stack 0
  5887  00FD19                     _mixolydian_key:
  5888                           	opt stack 0
  5889  00FD19  07                 	db	7
  5890  00FD1A  02                 	db	2
  5891  00FD1B  04                 	db	4
  5892  00FD1C  05                 	db	5
  5893  00FD1D  07                 	db	7
  5894  00FD1E  09                 	db	9
  5895  00FD1F  0A                 	db	10
  5896  00FD20  0C                 	db	12
  5897  00FD21  0E                 	db	14
  5898  00FD22  10                 	db	16
  5899  00FD23  11                 	db	17
  5900  00FD24  13                 	db	19
  5901  00FD25  15                 	db	21
  5902  00FD26  16                 	db	22
  5903  00FD27  18                 	db	24
  5904  00FD28                     __end_of_mixolydian_key:
  5905                           	opt stack 0
  5906  00FD28                     _lydian_key:
  5907                           	opt stack 0
  5908  00FD28  05                 	db	5
  5909  00FD29  02                 	db	2
  5910  00FD2A  04                 	db	4
  5911  00FD2B  06                 	db	6
  5912  00FD2C  07                 	db	7
  5913  00FD2D  09                 	db	9
  5914  00FD2E  0B                 	db	11
  5915  00FD2F  0C                 	db	12
  5916  00FD30  0E                 	db	14
  5917  00FD31  10                 	db	16
  5918  00FD32  12                 	db	18
  5919  00FD33  13                 	db	19
  5920  00FD34  15                 	db	21
  5921  00FD35  17                 	db	23
  5922  00FD36  18                 	db	24
  5923  00FD37                     __end_of_lydian_key:
  5924                           	opt stack 0
  5925  00FD37                     _phrygian_key:
  5926                           	opt stack 0
  5927  00FD37  04                 	db	4
  5928  00FD38  01                 	db	1
  5929  00FD39  03                 	db	3
  5930  00FD3A  05                 	db	5
  5931  00FD3B  07                 	db	7
  5932  00FD3C  08                 	db	8
  5933  00FD3D  0A                 	db	10
  5934  00FD3E  0C                 	db	12
  5935  00FD3F  0D                 	db	13
  5936  00FD40  0F                 	db	15
  5937  00FD41  11                 	db	17
  5938  00FD42  13                 	db	19
  5939  00FD43  14                 	db	20
  5940  00FD44  16                 	db	22
  5941  00FD45  18                 	db	24
  5942  00FD46                     __end_of_phrygian_key:
  5943                           	opt stack 0
  5944  00FD46                     _dorian_key:
  5945                           	opt stack 0
  5946  00FD46  02                 	db	2
  5947  00FD47  02                 	db	2
  5948  00FD48  03                 	db	3
  5949  00FD49  05                 	db	5
  5950  00FD4A  07                 	db	7
  5951  00FD4B  09                 	db	9
  5952  00FD4C  0A                 	db	10
  5953  00FD4D  0C                 	db	12
  5954  00FD4E  0E                 	db	14
  5955  00FD4F  0F                 	db	15
  5956  00FD50  11                 	db	17
  5957  00FD51  13                 	db	19
  5958  00FD52  15                 	db	21
  5959  00FD53  16                 	db	22
  5960  00FD54  18                 	db	24
  5961  00FD55                     __end_of_dorian_key:
  5962                           	opt stack 0
  5963  00FD55                     _ionian_key:
  5964                           	opt stack 0
  5965  00FD55  00                 	db	0
  5966  00FD56  02                 	db	2
  5967  00FD57  04                 	db	4
  5968  00FD58  05                 	db	5
  5969  00FD59  07                 	db	7
  5970  00FD5A  09                 	db	9
  5971  00FD5B  0B                 	db	11
  5972  00FD5C  0C                 	db	12
  5973  00FD5D  0E                 	db	14
  5974  00FD5E  10                 	db	16
  5975  00FD5F  11                 	db	17
  5976  00FD60  13                 	db	19
  5977  00FD61  15                 	db	21
  5978  00FD62  17                 	db	23
  5979  00FD63  18                 	db	24
  5980  00FD64                     __end_of_ionian_key:
  5981                           	opt stack 0
  5982  0000                     _TMR0	set	4054
  5983  0000                     _TMR1	set	4046
  5984  0000                     _EECON2	set	4007
  5985  0000                     _INTCONbits	set	4082
  5986  0000                     _EEDATA	set	4008
  5987  0000                     _EEADR	set	4009
  5988  0000                     _EEADRH	set	4010
  5989  0000                     _EECON1bits	set	4006
  5990  0000                     _SPBRG	set	4015
  5991  0000                     _T1CON	set	4045
  5992  0000                     _TMR2	set	4044
  5993  0000                     _T2CON	set	4042
  5994  0000                     _T0CON	set	4053
  5995  0000                     _PORTE	set	3972
  5996  0000                     _PORTB	set	3969
  5997  0000                     _TRISE	set	3990
  5998  0000                     _TRISD	set	3989
  5999  0000                     _TRISC	set	3988
  6000  0000                     _TRISB	set	3987
  6001  0000                     _TRISA	set	3986
  6002  0000                     _PORTD	set	3971
  6003  0000                     _TXREG	set	4013
  6004  0000                     _ADRESL	set	4035
  6005  0000                     _ADRESH	set	4036
  6006  0000                     _PORTA	set	3968
  6007  0000                     _ADCON2	set	4032
  6008  0000                     _ADCON1	set	4033
  6009  0000                     _ADCON0	set	4034
  6010  0000                     _CMCON	set	4020
  6011  0000                     _PORTC	set	3970
  6012  0000                     _TMR0IF	set	32658
  6013  0000                     _RB0	set	31752
  6014  0000                     _TMR1IF	set	31984
  6015  0000                     _TMR2IF	set	31985
  6016  0000                     _RC4	set	31764
  6017  0000                     _RC5	set	31765
  6018  0000                     _RB1	set	31753
  6019  0000                     _GIE	set	32663
  6020  0000                     _PEIE	set	32662
  6021  0000                     _BRGH	set	32098
  6022  0000                     _CREN	set	32092
  6023  0000                     _SPEN	set	32095
  6024  0000                     _SYNC	set	32100
  6025  0000                     _TXEN	set	32101
  6026  0000                     _TMR1IE	set	31976
  6027  0000                     _TMR1ON	set	32360
  6028  0000                     _TMR2IE	set	31977
  6029  0000                     _TMR0IE	set	32661
  6030  0000                     _PSA	set	32427
  6031  0000                     _T0CS	set	32429
  6032  0000                     _T08BIT	set	32430
  6033  0000                     _INT0IE	set	32660
  6034  0000                     _INT0IF	set	32657
  6035  0000                     _INTEDG0	set	32654
  6036  0000                     _RBIE	set	32659
  6037  0000                     _RBIF	set	32656
  6038  0000                     _IPEN	set	32391
  6039  0000                     _RC2	set	31762
  6040  0000                     _RC1	set	31761
  6041  0000                     _RC0	set	31760
  6042  0000                     _RC3	set	31763
  6043  0000                     _TMR0ON	set	32431
  6044  0000                     _RB4	set	31756
  6045  0000                     _RB5	set	31757
  6046  0000                     _RE2	set	31778
  6047  0000                     _RB2	set	31754
  6048  0000                     _RA5	set	31749
  6049  0000                     _TXIF	set	31988
  6050  0000                     _TRMT	set	32097
  6051  0000                     _GO_nDONE	set	32273
  6052  0000                     _ADON	set	32272
  6053  0000                     _TMR2ON	set	32338
  6054  0000                     _RE1	set	31777
  6055  0000                     _RE0	set	31776
  6056  0000                     _RD7	set	31775
  6057  0000                     _RD6	set	31774
  6058  0000                     _RD5	set	31773
  6059  0000                     _RD4	set	31772
  6060  00FD64                     STR_10:
  6061  00FD64  20                 	db	32
  6062  00FD65  20                 	db	32
  6063  00FD66  20                 	db	32
  6064  00FD67  20                 	db	32
  6065  00FD68  20                 	db	32
  6066  00FD69  20                 	db	32
  6067  00FD6A  20                 	db	32
  6068  00FD6B  20                 	db	32
  6069  00FD6C  20                 	db	32
  6070  00FD6D  20                 	db	32
  6071  00FD6E  20                 	db	32
  6072  00FD6F  20                 	db	32
  6073  00FD70  20                 	db	32
  6074  00FD71  20                 	db	32
  6075  00FD72  20                 	db	32
  6076  00FD73  20                 	db	32
  6077  00FD74  00                 	db	0
  6078  00FD75                     STR_22:
  6079  00FD75  53                 	db	83	;'S'
  6080  00FD76  65                 	db	101	;'e'
  6081  00FD77  74                 	db	116	;'t'
  6082  00FD78  74                 	db	116	;'t'
  6083  00FD79  69                 	db	105	;'i'
  6084  00FD7A  6E                 	db	110	;'n'
  6085  00FD7B  67                 	db	103	;'g'
  6086  00FD7C  73                 	db	115	;'s'
  6087  00FD7D  20                 	db	32
  6088  00FD7E  4C                 	db	76	;'L'
  6089  00FD7F  6F                 	db	111	;'o'
  6090  00FD80  61                 	db	97	;'a'
  6091  00FD81  64                 	db	100	;'d'
  6092  00FD82  65                 	db	101	;'e'
  6093  00FD83  64                 	db	100	;'d'
  6094  00FD84  21                 	db	33
  6095  00FD85  00                 	db	0
  6096  00FD86                     STR_37:
  6097  00FD86  52                 	db	82	;'R'
  6098  00FD87  65                 	db	101	;'e'
  6099  00FD88  73                 	db	115	;'s'
  6100  00FD89  74                 	db	116	;'t'
  6101  00FD8A  6F                 	db	111	;'o'
  6102  00FD8B  72                 	db	114	;'r'
  6103  00FD8C  65                 	db	101	;'e'
  6104  00FD8D  20                 	db	32
  6105  00FD8E  53                 	db	83	;'S'
  6106  00FD8F  65                 	db	101	;'e'
  6107  00FD90  74                 	db	116	;'t'
  6108  00FD91  74                 	db	116	;'t'
  6109  00FD92  69                 	db	105	;'i'
  6110  00FD93  6E                 	db	110	;'n'
  6111  00FD94  67                 	db	103	;'g'
  6112  00FD95  21                 	db	33
  6113  00FD96  00                 	db	0
  6114  00FD97                     STR_33:
  6115  00FD97  53                 	db	83	;'S'
  6116  00FD98  65                 	db	101	;'e'
  6117  00FD99  74                 	db	116	;'t'
  6118  00FD9A  20                 	db	32
  6119  00FD9B  4A                 	db	74	;'J'
  6120  00FD9C  6F                 	db	111	;'o'
  6121  00FD9D  79                 	db	121	;'y'
  6122  00FD9E  73                 	db	115	;'s'
  6123  00FD9F  74                 	db	116	;'t'
  6124  00FDA0  69                 	db	105	;'i'
  6125  00FDA1  63                 	db	99	;'c'
  6126  00FDA2  6B                 	db	107	;'k'
  6127  00FDA3  20                 	db	32
  6128  00FDA4  43                 	db	67	;'C'
  6129  00FDA5  43                 	db	67	;'C'
  6130  00FDA6  23                 	db	35
  6131  00FDA7  00                 	db	0
  6132  00FDA8                     STR_30:
  6133  00FDA8  50                 	db	80	;'P'
  6134  00FDA9  6F                 	db	111	;'o'
  6135  00FDAA  74                 	db	116	;'t'
  6136  00FDAB  73                 	db	115	;'s'
  6137  00FDAC  20                 	db	32
  6138  00FDAD  52                 	db	82	;'R'
  6139  00FDAE  65                 	db	101	;'e'
  6140  00FDAF  73                 	db	115	;'s'
  6141  00FDB0  6F                 	db	111	;'o'
  6142  00FDB1  6C                 	db	108	;'l'
  6143  00FDB2  75                 	db	117	;'u'
  6144  00FDB3  74                 	db	116	;'t'
  6145  00FDB4  69                 	db	105	;'i'
  6146  00FDB5  6F                 	db	111	;'o'
  6147  00FDB6  6E                 	db	110	;'n'
  6148  00FDB7  3A                 	db	58	;':'
  6149  00FDB8  00                 	db	0
  6150  00FDB9                     STR_47:
  6151  00FDB9  53                 	db	83	;'S'
  6152  00FDBA  65                 	db	101	;'e'
  6153  00FDBB  6C                 	db	108	;'l'
  6154  00FDBC  65                 	db	101	;'e'
  6155  00FDBD  63                 	db	99	;'c'
  6156  00FDBE  74                 	db	116	;'t'
  6157  00FDBF  20                 	db	32
  6158  00FDC0  41                 	db	65	;'A'
  6159  00FDC1  72                 	db	114	;'r'
  6160  00FDC2  70                 	db	112	;'p'
  6161  00FDC3  65                 	db	101	;'e'
  6162  00FDC4  67                 	db	103	;'g'
  6163  00FDC5  67                 	db	103	;'g'
  6164  00FDC6  69                 	db	105	;'i'
  6165  00FDC7  6F                 	db	111	;'o'
  6166  00FDC8  3A                 	db	58	;':'
  6167  00FDC9  00                 	db	0
  6168  00FDCA                     STR_28:
  6169  00FDCA  53                 	db	83	;'S'
  6170  00FDCB  65                 	db	101	;'e'
  6171  00FDCC  74                 	db	116	;'t'
  6172  00FDCD  20                 	db	32
  6173  00FDCE  4E                 	db	78	;'N'
  6174  00FDCF  6F                 	db	111	;'o'
  6175  00FDD0  74                 	db	116	;'t'
  6176  00FDD1  65                 	db	101	;'e'
  6177  00FDD2  20                 	db	32
  6178  00FDD3  4E                 	db	78	;'N'
  6179  00FDD4  75                 	db	117	;'u'
  6180  00FDD5  6D                 	db	109	;'m'
  6181  00FDD6  62                 	db	98	;'b'
  6182  00FDD7  65                 	db	101	;'e'
  6183  00FDD8  72                 	db	114	;'r'
  6184  00FDD9  3A                 	db	58	;':'
  6185  00FDDA  00                 	db	0
  6186  00FDDB                     STR_52:
  6187  00FDDB  41                 	db	65	;'A'
  6188  00FDDC  75                 	db	117	;'u'
  6189  00FDDD  74                 	db	116	;'t'
  6190  00FDDE  6F                 	db	111	;'o'
  6191  00FDDF  4C                 	db	76	;'L'
  6192  00FDE0  61                 	db	97	;'a'
  6193  00FDE1  74                 	db	116	;'t'
  6194  00FDE2  63                 	db	99	;'c'
  6195  00FDE3  68                 	db	104	;'h'
  6196  00FDE4  20                 	db	32
  6197  00FDE5  4F                 	db	79	;'O'
  6198  00FDE6  4E                 	db	78	;'N'
  6199  00FDE7  2F                 	db	47
  6200  00FDE8  4F                 	db	79	;'O'
  6201  00FDE9  46                 	db	70	;'F'
  6202  00FDEA  46                 	db	70	;'F'
  6203  00FDEB  00                 	db	0
  6204  00FDEC                     STR_39:
  6205  00FDEC  45                 	db	69	;'E'
  6206  00FDED  6E                 	db	110	;'n'
  6207  00FDEE  63                 	db	99	;'c'
  6208  00FDEF  6F                 	db	111	;'o'
  6209  00FDF0  64                 	db	100	;'d'
  6210  00FDF1  65                 	db	101	;'e'
  6211  00FDF2  72                 	db	114	;'r'
  6212  00FDF3  20                 	db	32
  6213  00FDF4  50                 	db	80	;'P'
  6214  00FDF5  6F                 	db	111	;'o'
  6215  00FDF6  6C                 	db	108	;'l'
  6216  00FDF7  61                 	db	97	;'a'
  6217  00FDF8  72                 	db	114	;'r'
  6218  00FDF9  69                 	db	105	;'i'
  6219  00FDFA  74                 	db	116	;'t'
  6220  00FDFB  79                 	db	121	;'y'
  6221  00FDFC  00                 	db	0
  6222  00FDFD                     STR_21:
  6223  00FDFD  53                 	db	83	;'S'
  6224  00FDFE  65                 	db	101	;'e'
  6225  00FDFF  74                 	db	116	;'t'
  6226  00FE00  74                 	db	116	;'t'
  6227  00FE01  69                 	db	105	;'i'
  6228  00FE02  6E                 	db	110	;'n'
  6229  00FE03  67                 	db	103	;'g'
  6230  00FE04  73                 	db	115	;'s'
  6231  00FE05  20                 	db	32
  6232  00FE06  53                 	db	83	;'S'
  6233  00FE07  61                 	db	97	;'a'
  6234  00FE08  76                 	db	118	;'v'
  6235  00FE09  65                 	db	101	;'e'
  6236  00FE0A  64                 	db	100	;'d'
  6237  00FE0B  21                 	db	33
  6238  00FE0C  00                 	db	0
  6239  00FE0D                     STR_75:
  6240  00FE0D  4C                 	db	76	;'L'
  6241  00FE0E  61                 	db	97	;'a'
  6242  00FE0F  73                 	db	115	;'s'
  6243  00FE10  74                 	db	116	;'t'
  6244  00FE11  20                 	db	32
  6245  00FE12  4E                 	db	78	;'N'
  6246  00FE13  6F                 	db	111	;'o'
  6247  00FE14  74                 	db	116	;'t'
  6248  00FE15  65                 	db	101	;'e'
  6249  00FE16  20                 	db	32
  6250  00FE17  4D                 	db	77	;'M'
  6251  00FE18  6F                 	db	111	;'o'
  6252  00FE19  64                 	db	100	;'d'
  6253  00FE1A  65                 	db	101	;'e'
  6254  00FE1B  3A                 	db	58	;':'
  6255  00FE1C  00                 	db	0
  6256  00FE1D                     STR_62:
  6257  00FE1D  52                 	db	82	;'R'
  6258  00FE1E  61                 	db	97	;'a'
  6259  00FE1F  6E                 	db	110	;'n'
  6260  00FE20  64                 	db	100	;'d'
  6261  00FE21  6F                 	db	111	;'o'
  6262  00FE22  6D                 	db	109	;'m'
  6263  00FE23  69                 	db	105	;'i'
  6264  00FE24  7A                 	db	122	;'z'
  6265  00FE25  65                 	db	101	;'e'
  6266  00FE26  20                 	db	32
  6267  00FE27  54                 	db	84	;'T'
  6268  00FE28  79                 	db	121	;'y'
  6269  00FE29  70                 	db	112	;'p'
  6270  00FE2A  65                 	db	101	;'e'
  6271  00FE2B  3A                 	db	58	;':'
  6272  00FE2C  00                 	db	0
  6273  00FE2D                     STR_26:
  6274  00FE2D  53                 	db	83	;'S'
  6275  00FE2E  65                 	db	101	;'e'
  6276  00FE2F  6C                 	db	108	;'l'
  6277  00FE30  65                 	db	101	;'e'
  6278  00FE31  63                 	db	99	;'c'
  6279  00FE32  74                 	db	116	;'t'
  6280  00FE33  20                 	db	32
  6281  00FE34  53                 	db	83	;'S'
  6282  00FE35  65                 	db	101	;'e'
  6283  00FE36  76                 	db	118	;'v'
  6284  00FE37  65                 	db	101	;'e'
  6285  00FE38  6E                 	db	110	;'n'
  6286  00FE39  74                 	db	116	;'t'
  6287  00FE3A  68                 	db	104	;'h'
  6288  00FE3B  3A                 	db	58	;':'
  6289  00FE3C  00                 	db	0
  6290  00FE3D                     STR_40:
  6291  00FE3D  41                 	db	65	;'A'
  6292  00FE3E  52                 	db	82	;'R'
  6293  00FE3F  50                 	db	80	;'P'
  6294  00FE40  45                 	db	69	;'E'
  6295  00FE41  47                 	db	71	;'G'
  6296  00FE42  47                 	db	71	;'G'
  6297  00FE43  49                 	db	73	;'I'
  6298  00FE44  41                 	db	65	;'A'
  6299  00FE45  54                 	db	84	;'T'
  6300  00FE46  4F                 	db	79	;'O'
  6301  00FE47  52                 	db	82	;'R'
  6302  00FE48  20                 	db	32
  6303  00FE49  4F                 	db	79	;'O'
  6304  00FE4A  46                 	db	70	;'F'
  6305  00FE4B  46                 	db	70	;'F'
  6306  00FE4C  00                 	db	0
  6307  00FE4D                     STR_32:
  6308  00FE4D  53                 	db	83	;'S'
  6309  00FE4E  6C                 	db	108	;'l'
  6310  00FE4F  69                 	db	105	;'i'
  6311  00FE50  64                 	db	100	;'d'
  6312  00FE51  65                 	db	101	;'e'
  6313  00FE52  70                 	db	112	;'p'
  6314  00FE53  6F                 	db	111	;'o'
  6315  00FE54  74                 	db	116	;'t'
  6316  00FE55  73                 	db	115	;'s'
  6317  00FE56  20                 	db	32
  6318  00FE57  43                 	db	67	;'C'
  6319  00FE58  43                 	db	67	;'C'
  6320  00FE59  23                 	db	35
  6321  00FE5A  3A                 	db	58	;':'
  6322  00FE5B  00                 	db	0
  6323  00FE5C                     STR_57:
  6324  00FE5C  55                 	db	85	;'U'
  6325  00FE5D  6E                 	db	110	;'n'
  6326  00FE5E  2D                 	db	45
  6327  00FE5F  6C                 	db	108	;'l'
  6328  00FE60  61                 	db	97	;'a'
  6329  00FE61  74                 	db	116	;'t'
  6330  00FE62  63                 	db	99	;'c'
  6331  00FE63  68                 	db	104	;'h'
  6332  00FE64  20                 	db	32
  6333  00FE65  4D                 	db	77	;'M'
  6334  00FE66  6F                 	db	111	;'o'
  6335  00FE67  64                 	db	100	;'d'
  6336  00FE68  65                 	db	101	;'e'
  6337  00FE69  3A                 	db	58	;':'
  6338  00FE6A  00                 	db	0
  6339  00FE6B                     STR_29:
  6340  00FE6B  53                 	db	83	;'S'
  6341  00FE6C  65                 	db	101	;'e'
  6342  00FE6D  74                 	db	116	;'t'
  6343  00FE6E  20                 	db	32
  6344  00FE6F  43                 	db	67	;'C'
  6345  00FE70  43                 	db	67	;'C'
  6346  00FE71  20                 	db	32
  6347  00FE72  4E                 	db	78	;'N'
  6348  00FE73  75                 	db	117	;'u'
  6349  00FE74  6D                 	db	109	;'m'
  6350  00FE75  62                 	db	98	;'b'
  6351  00FE76  65                 	db	101	;'e'
  6352  00FE77  72                 	db	114	;'r'
  6353  00FE78  3A                 	db	58	;':'
  6354  00FE79  00                 	db	0
  6355  00FE7A                     STR_64:
  6356  00FE7A  52                 	db	82	;'R'
  6357  00FE7B  41                 	db	65	;'A'
  6358  00FE7C  4E                 	db	78	;'N'
  6359  00FE7D  44                 	db	68	;'D'
  6360  00FE7E  4F                 	db	79	;'O'
  6361  00FE7F  4D                 	db	77	;'M'
  6362  00FE80  49                 	db	73	;'I'
  6363  00FE81  5A                 	db	90	;'Z'
  6364  00FE82  45                 	db	69	;'E'
  6365  00FE83  20                 	db	32
  6366  00FE84  4F                 	db	79	;'O'
  6367  00FE85  4E                 	db	78	;'N'
  6368  00FE86  43                 	db	67	;'C'
  6369  00FE87  45                 	db	69	;'E'
  6370  00FE88  00                 	db	0
  6371  00FE89                     STR_53:
  6372  00FE89  41                 	db	65	;'A'
  6373  00FE8A  75                 	db	117	;'u'
  6374  00FE8B  74                 	db	116	;'t'
  6375  00FE8C  6F                 	db	111	;'o'
  6376  00FE8D  20                 	db	32
  6377  00FE8E  4C                 	db	76	;'L'
  6378  00FE8F  61                 	db	97	;'a'
  6379  00FE90  74                 	db	116	;'t'
  6380  00FE91  63                 	db	99	;'c'
  6381  00FE92  68                 	db	104	;'h'
  6382  00FE93  20                 	db	32
  6383  00FE94  4F                 	db	79	;'O'
  6384  00FE95  46                 	db	70	;'F'
  6385  00FE96  46                 	db	70	;'F'
  6386  00FE97  00                 	db	0
  6387  00FE98                     STR_42:
  6388  00FE98  41                 	db	65	;'A'
  6389  00FE99  52                 	db	82	;'R'
  6390  00FE9A  50                 	db	80	;'P'
  6391  00FE9B  45                 	db	69	;'E'
  6392  00FE9C  47                 	db	71	;'G'
  6393  00FE9D  47                 	db	71	;'G'
  6394  00FE9E  49                 	db	73	;'I'
  6395  00FE9F  41                 	db	65	;'A'
  6396  00FEA0  54                 	db	84	;'T'
  6397  00FEA1  4F                 	db	79	;'O'
  6398  00FEA2  52                 	db	82	;'R'
  6399  00FEA3  20                 	db	32
  6400  00FEA4  4F                 	db	79	;'O'
  6401  00FEA5  4E                 	db	78	;'N'
  6402  00FEA6  00                 	db	0
  6403  00FEA7                     STR_63:
  6404  00FEA7  52                 	db	82	;'R'
  6405  00FEA8  41                 	db	65	;'A'
  6406  00FEA9  4E                 	db	78	;'N'
  6407  00FEAA  44                 	db	68	;'D'
  6408  00FEAB  4F                 	db	79	;'O'
  6409  00FEAC  4D                 	db	77	;'M'
  6410  00FEAD  49                 	db	73	;'I'
  6411  00FEAE  5A                 	db	90	;'Z'
  6412  00FEAF  45                 	db	69	;'E'
  6413  00FEB0  20                 	db	32
  6414  00FEB1  41                 	db	65	;'A'
  6415  00FEB2  55                 	db	85	;'U'
  6416  00FEB3  54                 	db	84	;'T'
  6417  00FEB4  4F                 	db	79	;'O'
  6418  00FEB5  00                 	db	0
  6419  00FEB6                     STR_45:
  6420  00FEB6  54                 	db	84	;'T'
  6421  00FEB7  65                 	db	101	;'e'
  6422  00FEB8  6D                 	db	109	;'m'
  6423  00FEB9  70                 	db	112	;'p'
  6424  00FEBA  6F                 	db	111	;'o'
  6425  00FEBB  20                 	db	32
  6426  00FEBC  28                 	db	40
  6427  00FEBD  42                 	db	66	;'B'
  6428  00FEBE  50                 	db	80	;'P'
  6429  00FEBF  4D                 	db	77	;'M'
  6430  00FEC0  29                 	db	41
  6431  00FEC1  3A                 	db	58	;':'
  6432  00FEC2  20                 	db	32
  6433  00FEC3  00                 	db	0
  6434  00FEC4                     STR_31:
  6435  00FEC4  53                 	db	83	;'S'
  6436  00FEC5  65                 	db	101	;'e'
  6437  00FEC6  74                 	db	116	;'t'
  6438  00FEC7  20                 	db	32
  6439  00FEC8  50                 	db	80	;'P'
  6440  00FEC9  6F                 	db	111	;'o'
  6441  00FECA  74                 	db	116	;'t'
  6442  00FECB  73                 	db	115	;'s'
  6443  00FECC  20                 	db	32
  6444  00FECD  43                 	db	67	;'C'
  6445  00FECE  43                 	db	67	;'C'
  6446  00FECF  23                 	db	35
  6447  00FED0  3A                 	db	58	;':'
  6448  00FED1  00                 	db	0
  6449  00FED2                     STR_25:
  6450  00FED2  53                 	db	83	;'S'
  6451  00FED3  65                 	db	101	;'e'
  6452  00FED4  6C                 	db	108	;'l'
  6453  00FED5  65                 	db	101	;'e'
  6454  00FED6  63                 	db	99	;'c'
  6455  00FED7  74                 	db	116	;'t'
  6456  00FED8  20                 	db	32
  6457  00FED9  54                 	db	84	;'T'
  6458  00FEDA  72                 	db	114	;'r'
  6459  00FEDB  69                 	db	105	;'i'
  6460  00FEDC  61                 	db	97	;'a'
  6461  00FEDD  64                 	db	100	;'d'
  6462  00FEDE  3A                 	db	58	;':'
  6463  00FEDF  00                 	db	0
  6464  00FEE0                     STR_27:
  6465  00FEE0  44                 	db	68	;'D'
  6466  00FEE1  72                 	db	114	;'r'
  6467  00FEE2  75                 	db	117	;'u'
  6468  00FEE3  6D                 	db	109	;'m'
  6469  00FEE4  20                 	db	32
  6470  00FEE5  43                 	db	67	;'C'
  6471  00FEE6  43                 	db	67	;'C'
  6472  00FEE7  20                 	db	32
  6473  00FEE8  4D                 	db	77	;'M'
  6474  00FEE9  6F                 	db	111	;'o'
  6475  00FEEA  64                 	db	100	;'d'
  6476  00FEEB  65                 	db	101	;'e'
  6477  00FEEC  3A                 	db	58	;':'
  6478  00FEED  00                 	db	0
  6479  00FEEE                     STR_46:
  6480  00FEEE  4F                 	db	79	;'O'
  6481  00FEEF  63                 	db	99	;'c'
  6482  00FEF0  74                 	db	116	;'t'
  6483  00FEF1  61                 	db	97	;'a'
  6484  00FEF2  76                 	db	118	;'v'
  6485  00FEF3  65                 	db	101	;'e'
  6486  00FEF4  20                 	db	32
  6487  00FEF5  52                 	db	82	;'R'
  6488  00FEF6  61                 	db	97	;'a'
  6489  00FEF7  6E                 	db	110	;'n'
  6490  00FEF8  67                 	db	103	;'g'
  6491  00FEF9  65                 	db	101	;'e'
  6492  00FEFA  3A                 	db	58	;':'
  6493  00FEFB  00                 	db	0
  6494  00FEFC                     STR_60:
  6495  00FEFC  4F                 	db	79	;'O'
  6496  00FEFD  4E                 	db	78	;'N'
  6497  00FEFE  45                 	db	69	;'E'
  6498  00FEFF  20                 	db	32
  6499  00FF00  41                 	db	65	;'A'
  6500  00FF01  54                 	db	84	;'T'
  6501  00FF02  20                 	db	32
  6502  00FF03  41                 	db	65	;'A'
  6503  00FF04  20                 	db	32
  6504  00FF05  54                 	db	84	;'T'
  6505  00FF06  49                 	db	73	;'I'
  6506  00FF07  4D                 	db	77	;'M'
  6507  00FF08  45                 	db	69	;'E'
  6508  00FF09  00                 	db	0
  6509  00FF0A                     STR_55:
  6510  00FF0A  41                 	db	65	;'A'
  6511  00FF0B  75                 	db	117	;'u'
  6512  00FF0C  74                 	db	116	;'t'
  6513  00FF0D  6F                 	db	111	;'o'
  6514  00FF0E  20                 	db	32
  6515  00FF0F  4C                 	db	76	;'L'
  6516  00FF10  61                 	db	97	;'a'
  6517  00FF11  74                 	db	116	;'t'
  6518  00FF12  63                 	db	99	;'c'
  6519  00FF13  68                 	db	104	;'h'
  6520  00FF14  20                 	db	32
  6521  00FF15  4F                 	db	79	;'O'
  6522  00FF16  4E                 	db	78	;'N'
  6523  00FF17  00                 	db	0
  6524  00FF18                     STR_23:
  6525  00FF18  45                 	db	69	;'E'
  6526  00FF19  78                 	db	120	;'x'
  6527  00FF1A  69                 	db	105	;'i'
  6528  00FF1B  74                 	db	116	;'t'
  6529  00FF1C  20                 	db	32
  6530  00FF1D  45                 	db	69	;'E'
  6531  00FF1E  45                 	db	69	;'E'
  6532  00FF1F  50                 	db	80	;'P'
  6533  00FF20  52                 	db	82	;'R'
  6534  00FF21  4F                 	db	79	;'O'
  6535  00FF22  4D                 	db	77	;'M'
  6536  00FF23  21                 	db	33
  6537  00FF24  00                 	db	0
  6538  00FF25                     STR_38:
  6539  00FF25  52                 	db	82	;'R'
  6540  00FF26  65                 	db	101	;'e'
  6541  00FF27  62                 	db	98	;'b'
  6542  00FF28  6F                 	db	111	;'o'
  6543  00FF29  6F                 	db	111	;'o'
  6544  00FF2A  74                 	db	116	;'t'
  6545  00FF2B  69                 	db	105	;'i'
  6546  00FF2C  6E                 	db	110	;'n'
  6547  00FF2D  67                 	db	103	;'g'
  6548  00FF2E  2E                 	db	46
  6549  00FF2F  2E                 	db	46
  6550  00FF30  2E                 	db	46
  6551  00FF31  00                 	db	0
  6552  00FF32                     STR_48:
  6553  00FF32  4E                 	db	78	;'N'
  6554  00FF33  6F                 	db	111	;'o'
  6555  00FF34  74                 	db	116	;'t'
  6556  00FF35  65                 	db	101	;'e'
  6557  00FF36  20                 	db	32
  6558  00FF37  4C                 	db	76	;'L'
  6559  00FF38  65                 	db	101	;'e'
  6560  00FF39  6E                 	db	110	;'n'
  6561  00FF3A  67                 	db	103	;'g'
  6562  00FF3B  74                 	db	116	;'t'
  6563  00FF3C  68                 	db	104	;'h'
  6564  00FF3D  3A                 	db	58	;':'
  6565  00FF3E  00                 	db	0
  6566  00FF3F                     STR_65:
  6567  00FF3F  53                 	db	83	;'S'
  6568  00FF40  6B                 	db	107	;'k'
  6569  00FF41  69                 	db	105	;'i'
  6570  00FF42  70                 	db	112	;'p'
  6571  00FF43  20                 	db	32
  6572  00FF44  46                 	db	70	;'F'
  6573  00FF45  2F                 	db	47
  6574  00FF46  4C                 	db	76	;'L'
  6575  00FF47  20                 	db	32
  6576  00FF48  4F                 	db	79	;'O'
  6577  00FF49  46                 	db	70	;'F'
  6578  00FF4A  46                 	db	70	;'F'
  6579  00FF4B  00                 	db	0
  6580  00FF4C                     STR_34:
  6581  00FF4C  50                 	db	80	;'P'
  6582  00FF4D  72                 	db	114	;'r'
  6583  00FF4E  6F                 	db	111	;'o'
  6584  00FF4F  67                 	db	103	;'g'
  6585  00FF50  72                 	db	114	;'r'
  6586  00FF51  61                 	db	97	;'a'
  6587  00FF52  6D                 	db	109	;'m'
  6588  00FF53  20                 	db	32
  6589  00FF54  23                 	db	35
  6590  00FF55  3A                 	db	58	;':'
  6591  00FF56  20                 	db	32
  6592  00FF57  00                 	db	0
  6593  00FF58                     STR_24:
  6594  00FF58  45                 	db	69	;'E'
  6595  00FF59  6E                 	db	110	;'n'
  6596  00FF5A  74                 	db	116	;'t'
  6597  00FF5B  65                 	db	101	;'e'
  6598  00FF5C  72                 	db	114	;'r'
  6599  00FF5D  20                 	db	32
  6600  00FF5E  4D                 	db	77	;'M'
  6601  00FF5F  6F                 	db	111	;'o'
  6602  00FF60  64                 	db	100	;'d'
  6603  00FF61  65                 	db	101	;'e'
  6604  00FF62  3A                 	db	58	;':'
  6605  00FF63  00                 	db	0
  6606  00FF64                     STR_58:
  6607  00FF64  55                 	db	85	;'U'
  6608  00FF65  4E                 	db	78	;'N'
  6609  00FF66  4C                 	db	76	;'L'
  6610  00FF67  41                 	db	65	;'A'
  6611  00FF68  54                 	db	84	;'T'
  6612  00FF69  43                 	db	67	;'C'
  6613  00FF6A  48                 	db	72	;'H'
  6614  00FF6B  20                 	db	32
  6615  00FF6C  41                 	db	65	;'A'
  6616  00FF6D  4C                 	db	76	;'L'
  6617  00FF6E  4C                 	db	76	;'L'
  6618  00FF6F  00                 	db	0
  6619  00FF70                     STR_66:
  6620  00FF70  53                 	db	83	;'S'
  6621  00FF71  6B                 	db	107	;'k'
  6622  00FF72  69                 	db	105	;'i'
  6623  00FF73  70                 	db	112	;'p'
  6624  00FF74  20                 	db	32
  6625  00FF75  46                 	db	70	;'F'
  6626  00FF76  2F                 	db	47
  6627  00FF77  4C                 	db	76	;'L'
  6628  00FF78  20                 	db	32
  6629  00FF79  4F                 	db	79	;'O'
  6630  00FF7A  4E                 	db	78	;'N'
  6631  00FF7B  00                 	db	0
  6632  00FF7C                     STR_68:
  6633  00FF7C  46                 	db	70	;'F'
  6634  00FF7D  49                 	db	73	;'I'
  6635  00FF7E  4E                 	db	78	;'N'
  6636  00FF7F  49                 	db	73	;'I'
  6637  00FF80  53                 	db	83	;'S'
  6638  00FF81  48                 	db	72	;'H'
  6639  00FF82  20                 	db	32
  6640  00FF83  4C                 	db	76	;'L'
  6641  00FF84  41                 	db	65	;'A'
  6642  00FF85  53                 	db	83	;'S'
  6643  00FF86  54                 	db	84	;'T'
  6644  00FF87  00                 	db	0
  6645  00FF88                     STR_14:
  6646  00FF88  20                 	db	32
  6647  00FF89  50                 	db	80	;'P'
  6648  00FF8A  49                 	db	73	;'I'
  6649  00FF8B  54                 	db	84	;'T'
  6650  00FF8C  43                 	db	67	;'C'
  6651  00FF8D  48                 	db	72	;'H'
  6652  00FF8E  42                 	db	66	;'B'
  6653  00FF8F  45                 	db	69	;'E'
  6654  00FF90  4E                 	db	78	;'N'
  6655  00FF91  44                 	db	68	;'D'
  6656  00FF92  00                 	db	0
  6657  00FF93                     STR_15:
  6658  00FF93  20                 	db	32
  6659  00FF94  4D                 	db	77	;'M'
  6660  00FF95  4F                 	db	79	;'O'
  6661  00FF96  44                 	db	68	;'D'
  6662  00FF97  2E                 	db	46
  6663  00FF98  57                 	db	87	;'W'
  6664  00FF99  48                 	db	72	;'H'
  6665  00FF9A  45                 	db	69	;'E'
  6666  00FF9B  45                 	db	69	;'E'
  6667  00FF9C  4C                 	db	76	;'L'
  6668  00FF9D  00                 	db	0
  6669  00FF9E                     STR_13:
  6670  00FF9E  20                 	db	32
  6671  00FF9F  20                 	db	32
  6672  00FFA0  56                 	db	86	;'V'
  6673  00FFA1  45                 	db	69	;'E'
  6674  00FFA2  4C                 	db	76	;'L'
  6675  00FFA3  4F                 	db	79	;'O'
  6676  00FFA4  43                 	db	67	;'C'
  6677  00FFA5  49                 	db	73	;'I'
  6678  00FFA6  54                 	db	84	;'T'
  6679  00FFA7  59                 	db	89	;'Y'
  6680  00FFA8  00                 	db	0
  6681  00FFA9                     STR_67:
  6682  00FFA9  49                 	db	73	;'I'
  6683  00FFAA  4D                 	db	77	;'M'
  6684  00FFAB  4D                 	db	77	;'M'
  6685  00FFAC  45                 	db	69	;'E'
  6686  00FFAD  44                 	db	68	;'D'
  6687  00FFAE  49                 	db	73	;'I'
  6688  00FFAF  41                 	db	65	;'A'
  6689  00FFB0  54                 	db	84	;'T'
  6690  00FFB1  45                 	db	69	;'E'
  6691  00FFB2  00                 	db	0
  6692  00FFB3                     STR_36:
  6693  00FFB3  4C                 	db	76	;'L'
  6694  00FFB4  6F                 	db	111	;'o'
  6695  00FFB5  61                 	db	97	;'a'
  6696  00FFB6  64                 	db	100	;'d'
  6697  00FFB7  20                 	db	32
  6698  00FFB8  23                 	db	35
  6699  00FFB9  3A                 	db	58	;':'
  6700  00FFBA  00                 	db	0
  6701  00FFBB                     STR_35:
  6702  00FFBB  53                 	db	83	;'S'
  6703  00FFBC  61                 	db	97	;'a'
  6704  00FFBD  76                 	db	118	;'v'
  6705  00FFBE  65                 	db	101	;'e'
  6706  00FFBF  20                 	db	32
  6707  00FFC0  23                 	db	35
  6708  00FFC1  3A                 	db	58	;':'
  6709  00FFC2  00                 	db	0
  6710  00FFC3                     STR_20:
  6711  00FFC3  53                 	db	83	;'S'
  6712  00FFC4  65                 	db	101	;'e'
  6713  00FFC5  74                 	db	116	;'t'
  6714  00FFC6  21                 	db	33
  6715  00FFC7  00                 	db	0
  6716  00FFC8                     STR_61:
  6717  00FFC8  20                 	db	32
  6718  00FFC9  4F                 	db	79	;'O'
  6719  00FFCA  6E                 	db	110	;'n'
  6720  00FFCB  45                 	db	69	;'E'
  6721  00FFCC  00                 	db	0
  6722  00FFCD                     STR_41:
  6723  00FFCD  41                 	db	65	;'A'
  6724  00FFCE  6F                 	db	111	;'o'
  6725  00FFCF  46                 	db	70	;'F'
  6726  00FFD0  46                 	db	70	;'F'
  6727  00FFD1  00                 	db	0
  6728  00FFD2                     STR_43:
  6729  00FFD2  20                 	db	32
  6730  00FFD3  41                 	db	65	;'A'
  6731  00FFD4  72                 	db	114	;'r'
  6732  00FFD5  50                 	db	80	;'P'
  6733  00FFD6  00                 	db	0
  6734  00FFD7                     STR_8:
  6735  00FFD7  74                 	db	116	;'t'
  6736  00FFD8  45                 	db	69	;'E'
  6737  00FFD9  53                 	db	83	;'S'
  6738  00FFDA  74                 	db	116	;'t'
  6739  00FFDB  00                 	db	0
  6740  00FFDC                     STR_5:
  6741  00FFDC  20                 	db	32
  6742  00FFDD  6F                 	db	111	;'o'
  6743  00FFDE  46                 	db	70	;'F'
  6744  00FFDF  46                 	db	70	;'F'
  6745  00FFE0  00                 	db	0
  6746  00FFE1                     STR_2:
  6747  00FFE1  20                 	db	32
  6748  00FFE2  64                 	db	100	;'d'
  6749  00FFE3  45                 	db	69	;'E'
  6750  00FFE4  4C                 	db	76	;'L'
  6751  00FFE5  00                 	db	0
  6752  00FFE6                     STR_1:
  6753  00FFE6  48                 	db	72	;'H'
  6754  00FFE7  6F                 	db	111	;'o'
  6755  00FFE8  4C                 	db	76	;'L'
  6756  00FFE9  64                 	db	100	;'d'
  6757  00FFEA  00                 	db	0
  6758  00FFEB                     STR_6:
  6759  00FFEB  72                 	db	114	;'r'
  6760  00FFEC  41                 	db	65	;'A'
  6761  00FFED  6E                 	db	110	;'n'
  6762  00FFEE  64                 	db	100	;'d'
  6763  00FFEF  00                 	db	0
  6764  00FFF0                     STR_4:
  6765  00FFF0  41                 	db	65	;'A'
  6766  00FFF1  75                 	db	117	;'u'
  6767  00FFF2  74                 	db	116	;'t'
  6768  00FFF3  6F                 	db	111	;'o'
  6769  00FFF4  00                 	db	0
  6770  00FFF5                     STR_7:
  6771  00FFF5  72                 	db	114	;'r'
  6772  00FFF6  53                 	db	83	;'S'
  6773  00FFF7  45                 	db	69	;'E'
  6774  00FFF8  74                 	db	116	;'t'
  6775  00FFF9  00                 	db	0
  6776  00FFFA                     STR_3:
  6777  00FFFA  4C                 	db	76	;'L'
  6778  00FFFB  61                 	db	97	;'a'
  6779  00FFFC  53                 	db	83	;'S'
  6780  00FFFD  74                 	db	116	;'t'
  6781  00FFFE  00                 	db	0
  6782  0000                     
  6783                           ; #config settings
  6784  00FFFF  00                 	db	0	; dummy byte at the end
  6785  0000                     
  6786                           	psect	cinit
  6787  006BDA                     __pcinit:
  6788                           	opt stack 0
  6789  006BDA                     start_initialization:
  6790                           	opt stack 0
  6791  006BDA                     __initialization:
  6792                           	opt stack 0
  6793                           
  6794                           ; Initialize objects allocated to BANK3 (105 bytes)
  6795                           ; load TBLPTR registers with __pidataBANK3
  6796  006BDA  0EC2               	movlw	low __pidataBANK3
  6797  006BDC  6EF6               	movwf	tblptrl,c
  6798  006BDE  0E8D               	movlw	high __pidataBANK3
  6799  006BE0  6EF7               	movwf	tblptrh,c
  6800  006BE2  0E00               	movlw	low (__pidataBANK3 shr (0+16))
  6801  006BE4  6EF8               	movwf	tblptru,c
  6802  006BE6  EE03  F000         	lfsr	0,__pdataBANK3
  6803  006BEA  EE20 F069          	lfsr	2,105
  6804  006BEE                     copy_data0:
  6805  006BEE  0009               	tblrd		*+
  6806  006BF0  CFF5 FFEE          	movff	tablat,postinc0
  6807  006BF4  50DD               	movf	postdec2,w,c
  6808  006BF6  50D9               	movf	fsr2l,w,c
  6809  006BF8  E1FA               	bnz	copy_data0
  6810                           
  6811                           ; Initialize objects allocated to BANK2 (93 bytes)
  6812                           ; load TBLPTR registers with __pidataBANK2
  6813  006BFA  0E7E               	movlw	low __pidataBANK2
  6814  006BFC  6EF6               	movwf	tblptrl,c
  6815  006BFE  0E90               	movlw	high __pidataBANK2
  6816  006C00  6EF7               	movwf	tblptrh,c
  6817  006C02  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  6818  006C04  6EF8               	movwf	tblptru,c
  6819  006C06  EE02  F088         	lfsr	0,__pdataBANK2
  6820  006C0A  EE20 F05D          	lfsr	2,93
  6821  006C0E                     copy_data1:
  6822  006C0E  0009               	tblrd		*+
  6823  006C10  CFF5 FFEE          	movff	tablat,postinc0
  6824  006C14  50DD               	movf	postdec2,w,c
  6825  006C16  50D9               	movf	fsr2l,w,c
  6826  006C18  E1FA               	bnz	copy_data1
  6827                           
  6828                           ; Initialize objects allocated to BANK1 (25 bytes)
  6829                           ; load TBLPTR registers with __pidataBANK1
  6830  006C1A  0E40               	movlw	low __pidataBANK1
  6831  006C1C  6EF6               	movwf	tblptrl,c
  6832  006C1E  0E99               	movlw	high __pidataBANK1
  6833  006C20  6EF7               	movwf	tblptrh,c
  6834  006C22  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  6835  006C24  6EF8               	movwf	tblptru,c
  6836  006C26  EE01  F0E7         	lfsr	0,__pdataBANK1
  6837  006C2A  EE20 F019          	lfsr	2,25
  6838  006C2E                     copy_data2:
  6839  006C2E  0009               	tblrd		*+
  6840  006C30  CFF5 FFEE          	movff	tablat,postinc0
  6841  006C34  50DD               	movf	postdec2,w,c
  6842  006C36  50D9               	movf	fsr2l,w,c
  6843  006C38  E1FA               	bnz	copy_data2
  6844                           
  6845                           ; Initialize objects allocated to BANK0 (11 bytes)
  6846                           ; load TBLPTR registers with __pidataBANK0
  6847  006C3A  0ED8               	movlw	low __pidataBANK0
  6848  006C3C  6EF6               	movwf	tblptrl,c
  6849  006C3E  0E99               	movlw	high __pidataBANK0
  6850  006C40  6EF7               	movwf	tblptrh,c
  6851  006C42  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  6852  006C44  6EF8               	movwf	tblptru,c
  6853  006C46  EE00  F0F5         	lfsr	0,__pdataBANK0
  6854  006C4A  EE20 F00B          	lfsr	2,11
  6855  006C4E                     copy_data3:
  6856  006C4E  0009               	tblrd		*+
  6857  006C50  CFF5 FFEE          	movff	tablat,postinc0
  6858  006C54  50DD               	movf	postdec2,w,c
  6859  006C56  50D9               	movf	fsr2l,w,c
  6860  006C58  E1FA               	bnz	copy_data3
  6861                           
  6862                           ; Initialize objects allocated to COMRAM (8 bytes)
  6863                           ; load TBLPTR registers with __pidataCOMRAM
  6864  006C5A  0EE3               	movlw	low __pidataCOMRAM
  6865  006C5C  6EF6               	movwf	tblptrl,c
  6866  006C5E  0E99               	movlw	high __pidataCOMRAM
  6867  006C60  6EF7               	movwf	tblptrh,c
  6868  006C62  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  6869  006C64  6EF8               	movwf	tblptru,c
  6870  006C66  EE00  F04B         	lfsr	0,__pdataCOMRAM
  6871  006C6A  EE20 F008          	lfsr	2,8
  6872  006C6E                     copy_data4:
  6873  006C6E  0009               	tblrd		*+
  6874  006C70  CFF5 FFEE          	movff	tablat,postinc0
  6875  006C74  50DD               	movf	postdec2,w,c
  6876  006C76  50D9               	movf	fsr2l,w,c
  6877  006C78  E1FA               	bnz	copy_data4
  6878                           
  6879                           ; Clear objects allocated to BANK3 (32 bytes)
  6880  006C7A  EE03  F069         	lfsr	0,__pbssBANK3
  6881  006C7E  0E20               	movlw	32
  6882  006C80                     clear_0:
  6883  006C80  6AEE               	clrf	postinc0,c
  6884  006C82  06E8               	decf	wreg,f,c
  6885  006C84  E1FD               	bnz	clear_0
  6886                           
  6887                           ; Clear objects allocated to BANK2 (136 bytes)
  6888  006C86  EE02  F000         	lfsr	0,__pbssBANK2
  6889  006C8A  0E88               	movlw	136
  6890  006C8C                     clear_1:
  6891  006C8C  6AEE               	clrf	postinc0,c
  6892  006C8E  06E8               	decf	wreg,f,c
  6893  006C90  E1FD               	bnz	clear_1
  6894                           
  6895                           ; Clear objects allocated to BANK1 (151 bytes)
  6896  006C92  EE01  F000         	lfsr	0,__pbssBANK1
  6897  006C96  0E97               	movlw	151
  6898  006C98                     clear_2:
  6899  006C98  6AEE               	clrf	postinc0,c
  6900  006C9A  06E8               	decf	wreg,f,c
  6901  006C9C  E1FD               	bnz	clear_2
  6902                           
  6903                           ; Clear objects allocated to BANK0 (41 bytes)
  6904  006C9E  EE00  F0CC         	lfsr	0,__pbssBANK0
  6905  006CA2  0E29               	movlw	41
  6906  006CA4                     clear_3:
  6907  006CA4  6AEE               	clrf	postinc0,c
  6908  006CA6  06E8               	decf	wreg,f,c
  6909  006CA8  E1FD               	bnz	clear_3
  6910                           
  6911                           ; Clear objects allocated to BITCOMRAM (6 bytes)
  6912  006CAA  6A06               	clrf	((__pbitbssCOMRAM/(0+8)+5))& (0+255),c
  6913  006CAC  6A05               	clrf	((__pbitbssCOMRAM/(0+8)+4))& (0+255),c
  6914  006CAE  6A04               	clrf	((__pbitbssCOMRAM/(0+8)+3))& (0+255),c
  6915  006CB0  6A03               	clrf	((__pbitbssCOMRAM/(0+8)+2))& (0+255),c
  6916  006CB2  6A02               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
  6917  006CB4  6A01               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  6918                           
  6919                           ; Clear objects allocated to COMRAM (21 bytes)
  6920  006CB6  EE00  F02A         	lfsr	0,__pbssCOMRAM
  6921  006CBA  0E15               	movlw	21
  6922  006CBC                     clear_4:
  6923  006CBC  6AEE               	clrf	postinc0,c
  6924  006CBE  06E8               	decf	wreg,f,c
  6925  006CC0  E1FD               	bnz	clear_4
  6926  006CC2                     end_of_initialization:
  6927                           	opt stack 0
  6928  006CC2                     __end_of__initialization:
  6929                           	opt stack 0
  6930  006CC2  0E00               	movlw	low (__Lmediumconst shr (0+16))
  6931  006CC4  6EF8               	movwf	tblptru,c
  6932  006CC6  0100               	movlb	0
  6933  006CC8  EF73  F035         	goto	_main	;jump to C main() function
  6934                           tblptru	equ	0xFF8
  6935                           tblptrh	equ	0xFF7
  6936                           tblptrl	equ	0xFF6
  6937                           tablat	equ	0xFF5
  6938                           postinc0	equ	0xFEE
  6939                           wreg	equ	0xFE8
  6940                           postdec2	equ	0xFDD
  6941                           fsr2l	equ	0xFD9
  6942                           
  6943                           	psect	bitbssCOMRAM
  6944  000008                     __pbitbssCOMRAM:
  6945                           	opt stack 0
  6946  000008                     int2string@isNegative:
  6947                           	opt stack 0
  6948  000008                     	ds	1
  6949  000009                     doTheUnLatch@once:
  6950                           	opt stack 0
  6951  000009                     	ds	1
  6952  00000A                     keyboardTranspose@keyPress:
  6953                           	opt stack 0
  6954  00000A                     	ds	1
  6955  00000B                     _CONTROL_MODE:
  6956                           	opt stack 0
  6957  00000B                     	ds	1
  6958  00000C                     _DRUM_MODE:
  6959                           	opt stack 0
  6960  00000C                     	ds	1
  6961  00000D                     _DISPLAY_STEP_NUMBER:
  6962                           	opt stack 0
  6963  00000D                     	ds	1
  6964  00000E                     _flag2:
  6965                           	opt stack 0
  6966  00000E                     	ds	1
  6967  00000F                     _flag1:
  6968                           	opt stack 0
  6969  00000F                     	ds	1
  6970  000010                     _note_off_was_sent:
  6971                           	opt stack 0
  6972  000010                     	ds	1
  6973  000011                     _octave_overflow:
  6974                           	opt stack 0
  6975  000011                     	ds	1
  6976  000012                     _overflow:
  6977                           	opt stack 0
  6978  000012                     	ds	1
  6979  000013                     _suppress_note_off:
  6980                           	opt stack 0
  6981  000013                     	ds	1
  6982  000014                     _suppress_note_on:
  6983                           	opt stack 0
  6984  000014                     	ds	1
  6985  000015                     _finishLastNote:
  6986                           	opt stack 0
  6987  000015                     	ds	1
  6988  000016                     _LAST_NOTE_MODE_RESET:
  6989                           	opt stack 0
  6990  000016                     	ds	1
  6991  000017                     _LAST_NOTE_MODE_TRANSPOSE:
  6992                           	opt stack 0
  6993  000017                     	ds	1
  6994  000018                     _LAST_NOTE_MODE_KEY_RELEASE:
  6995                           	opt stack 0
  6996  000018                     	ds	1
  6997  000019                     _LAST_NOTE_MODE_KEY_PRESS:
  6998                           	opt stack 0
  6999  000019                     	ds	1
  7000  00001A                     _lastNoteMode:
  7001                           	opt stack 0
  7002  00001A                     	ds	1
  7003  00001B                     _skipFirstLast:
  7004                           	opt stack 0
  7005  00001B                     	ds	1
  7006  00001C                     _AUTO_RANDOMIZE:
  7007                           	opt stack 0
  7008  00001C                     	ds	1
  7009  00001D                     _latch_was_pressed:
  7010                           	opt stack 0
  7011  00001D                     	ds	1
  7012  00001E                     _AUTO_LATCH:
  7013                           	opt stack 0
  7014  00001E                     	ds	1
  7015  00001F                     _UN_LATCH_MODE:
  7016                           	opt stack 0
  7017  00001F                     	ds	1
  7018  000020                     _LATCH:
  7019                           	opt stack 0
  7020  000020                     	ds	1
  7021  000021                     _RESET_ON_KEY_RELEASE:
  7022                           	opt stack 0
  7023  000021                     	ds	1
  7024  000022                     _RESET_ON_KEY_PRESS:
  7025                           	opt stack 0
  7026  000022                     	ds	1
  7027  000023                     _ARPEGGIO_ON:
  7028                           	opt stack 0
  7029  000023                     	ds	1
  7030  000024                     _SORT_DIRECTION:
  7031                           	opt stack 0
  7032  000024                     	ds	1
  7033  000025                     _TRANSPOSE_MODE:
  7034                           	opt stack 0
  7035  000025                     	ds	1
  7036  000026                     _print_row_2_once:
  7037                           	opt stack 0
  7038  000026                     	ds	1
  7039  000027                     _lcd_print_once:
  7040                           	opt stack 0
  7041  000027                     	ds	1
  7042  000028                     _which_functions_are_unblocked:
  7043                           	opt stack 0
  7044  000028                     	ds	1
  7045  000029                     _encoder_click:
  7046                           	opt stack 0
  7047  000029                     	ds	1
  7048  00002A                     _encoderPolarity:
  7049                           	opt stack 0
  7050  00002A                     	ds	1
  7051  00002B                     _encoderB:
  7052                           	opt stack 0
  7053  00002B                     	ds	1
  7054  00002C                     _encoderA:
  7055                           	opt stack 0
  7056  00002C                     	ds	1
  7057  00002D                     _POT_MODE:
  7058                           	opt stack 0
  7059  00002D                     	ds	1
  7060  00002E                     _FIRST_READING:
  7061                           	opt stack 0
  7062  00002E                     	ds	1
  7063  00002F                     _ON_OFF:
  7064                           	opt stack 0
  7065  00002F                     	ds	1
  7066  000030                     _light_decimal_points:
  7067                           	opt stack 0
  7068  000030                     	ds	1
  7069  000031                     _CONTROL_CHANGE_IS_BEING_SENT:
  7070                           	opt stack 0
  7071  000031                     	ds	1
  7072  000032                     _ARPEGGIO_IS_PLAYING:
  7073                           	opt stack 0
  7074  000032                     	ds	1
  7075                           tblptru	equ	0xFF8
  7076                           tblptrh	equ	0xFF7
  7077                           tblptrl	equ	0xFF6
  7078                           tablat	equ	0xFF5
  7079                           postinc0	equ	0xFEE
  7080                           wreg	equ	0xFE8
  7081                           postdec2	equ	0xFDD
  7082                           fsr2l	equ	0xFD9
  7083                           
  7084                           	psect	bssCOMRAM
  7085  00002A                     __pbssCOMRAM:
  7086                           	opt stack 0
  7087  00002A                     _arpeggioPtr:
  7088                           	opt stack 0
  7089  00002A                     	ds	2
  7090  00002C                     key_press_release_note_off@temp:
  7091                           	opt stack 0
  7092  00002C                     	ds	1
  7093  00002D                     _toggle_state:
  7094                           	opt stack 0
  7095  00002D                     	ds	1
  7096  00002E                     _TIMER_OVERFLOWS:
  7097                           	opt stack 0
  7098  00002E                     	ds	1
  7099  00002F                     _NUM_NOTES_PRESSED:
  7100                           	opt stack 0
  7101  00002F                     	ds	1
  7102  000030                     _parallel:
  7103                           	opt stack 0
  7104  000030                     	ds	1
  7105  000031                     _stored_octave:
  7106                           	opt stack 0
  7107  000031                     	ds	1
  7108  000032                     _which_octave:
  7109                           	opt stack 0
  7110  000032                     	ds	1
  7111  000033                     _which_note:
  7112                           	opt stack 0
  7113  000033                     	ds	1
  7114  000034                     _startingDirection:
  7115                           	opt stack 0
  7116  000034                     	ds	1
  7117  000035                     _ARPEGGIO_TYPE:
  7118                           	opt stack 0
  7119  000035                     	ds	1
  7120  000036                     _encoder_direction:
  7121                           	opt stack 0
  7122  000036                     	ds	1
  7123  000037                     _drum:
  7124                           	opt stack 0
  7125  000037                     	ds	1
  7126  000038                     _drum_button_state_last:
  7127                           	opt stack 0
  7128  000038                     	ds	1
  7129  000039                     _drum_button_state_now:
  7130                           	opt stack 0
  7131  000039                     	ds	1
  7132  00003A                     _DIGIT_MODE:
  7133                           	opt stack 0
  7134  00003A                     	ds	1
  7135  00003B                     _semitone:
  7136                           	opt stack 0
  7137  00003B                     	ds	1
  7138  00003C                     _noteNumber:
  7139                           	opt stack 0
  7140  00003C                     	ds	1
  7141  00003D                     _statusByte:
  7142                           	opt stack 0
  7143  00003D                     	ds	1
  7144  00003E                     _channel:
  7145                           	opt stack 0
  7146  00003E                     	ds	1
  7147                           tblptru	equ	0xFF8
  7148                           tblptrh	equ	0xFF7
  7149                           tblptrl	equ	0xFF6
  7150                           tablat	equ	0xFF5
  7151                           postinc0	equ	0xFEE
  7152                           wreg	equ	0xFE8
  7153                           postdec2	equ	0xFDD
  7154                           fsr2l	equ	0xFD9
  7155                           
  7156                           	psect	dataCOMRAM
  7157  00004B                     __pdataCOMRAM:
  7158                           	opt stack 0
  7159  00004B                     _number_to_display:
  7160                           	opt stack 0
  7161  00004B                     	ds	2
  7162  00004D                     _NOTE_LENGTH_PULSES:
  7163                           	opt stack 0
  7164  00004D                     	ds	1
  7165  00004E                     _OCTAVES:
  7166                           	opt stack 0
  7167  00004E                     	ds	1
  7168  00004F                     _which_screen:
  7169                           	opt stack 0
  7170  00004F                     	ds	1
  7171  000050                     _octave:
  7172                           	opt stack 0
  7173  000050                     	ds	1
  7174  000051                     _velocity:
  7175                           	opt stack 0
  7176  000051                     	ds	1
  7177  000052                     _drumchannel:
  7178                           	opt stack 0
  7179  000052                     	ds	1
  7180                           tblptru	equ	0xFF8
  7181                           tblptrh	equ	0xFF7
  7182                           tblptrl	equ	0xFF6
  7183                           tablat	equ	0xFF5
  7184                           postinc0	equ	0xFEE
  7185                           wreg	equ	0xFE8
  7186                           postdec2	equ	0xFDD
  7187                           fsr2l	equ	0xFD9
  7188                           
  7189                           	psect	bssBANK0
  7190  0000CC                     __pbssBANK0:
  7191                           	opt stack 0
  7192  0000CC                     displayDigits@digit:
  7193                           	opt stack 0
  7194  0000CC                     	ds	4
  7195  0000D0                     _keyboard:
  7196                           	opt stack 0
  7197  0000D0                     	ds	4
  7198  0000D4                     _button_state_last:
  7199                           	opt stack 0
  7200  0000D4                     	ds	4
  7201  0000D8                     _button_state_now:
  7202                           	opt stack 0
  7203  0000D8                     	ds	4
  7204  0000DC                     _arpeggiatorLastNoteModeMenu:
  7205                           	opt stack 0
  7206  0000DC                     	ds	3
  7207  0000DF                     _arpeggiatorMenu:
  7208                           	opt stack 0
  7209  0000DF                     	ds	3
  7210  0000E2                     _savesMenu:
  7211                           	opt stack 0
  7212  0000E2                     	ds	3
  7213  0000E5                     _keyboardMenu:
  7214                           	opt stack 0
  7215  0000E5                     	ds	3
  7216  0000E8                     displayString@letter_counter:
  7217                           	opt stack 0
  7218  0000E8                     	ds	1
  7219  0000E9                     displayDigits@digit_counter:
  7220                           	opt stack 0
  7221  0000E9                     	ds	1
  7222  0000EA                     keyboardTranspose@semitone_temp:
  7223                           	opt stack 0
  7224  0000EA                     	ds	1
  7225  0000EB                     _ARRAY_INDEX:
  7226                           	opt stack 0
  7227  0000EB                     	ds	1
  7228  0000EC                     _last_note:
  7229                           	opt stack 0
  7230  0000EC                     	ds	1
  7231  0000ED                     _state:
  7232                           	opt stack 0
  7233  0000ED                     	ds	1
  7234  0000EE                     _DISPLAY_MODE:
  7235                           	opt stack 0
  7236  0000EE                     	ds	1
  7237  0000EF                     _which_seventh:
  7238                           	opt stack 0
  7239  0000EF                     	ds	1
  7240  0000F0                     _which_triad:
  7241                           	opt stack 0
  7242  0000F0                     	ds	1
  7243  0000F1                     _which_mode:
  7244                           	opt stack 0
  7245  0000F1                     	ds	1
  7246  0000F2                     _KEYBOARD_MODE:
  7247                           	opt stack 0
  7248  0000F2                     	ds	1
  7249  0000F3                     _patch_number:
  7250                           	opt stack 0
  7251  0000F3                     	ds	1
  7252  0000F4                     _GLOBAL_CC_NUMBER:
  7253                           	opt stack 0
  7254  0000F4                     	ds	1
  7255                           tblptru	equ	0xFF8
  7256                           tblptrh	equ	0xFF7
  7257                           tblptrl	equ	0xFF6
  7258                           tablat	equ	0xFF5
  7259                           postinc0	equ	0xFEE
  7260                           wreg	equ	0xFE8
  7261                           postdec2	equ	0xFDD
  7262                           fsr2l	equ	0xFD9
  7263                           
  7264                           	psect	dataBANK0
  7265  0000F5                     __pdataBANK0:
  7266                           	opt stack 0
  7267  0000F5                     _DRUM_CC:
  7268                           	opt stack 0
  7269  0000F5                     	ds	8
  7270  0000FD                     _iterator_focus:
  7271                           	opt stack 0
  7272  0000FD                     	ds	1
  7273  0000FE                     _ema_integer:
  7274                           	opt stack 0
  7275  0000FE                     	ds	1
  7276  0000FF                     _BPM:
  7277                           	opt stack 0
  7278  0000FF                     	ds	1
  7279                           tblptru	equ	0xFF8
  7280                           tblptrh	equ	0xFF7
  7281                           tblptrl	equ	0xFF6
  7282                           tablat	equ	0xFF5
  7283                           postinc0	equ	0xFEE
  7284                           wreg	equ	0xFE8
  7285                           postdec2	equ	0xFDD
  7286                           fsr2l	equ	0xFD9
  7287                           
  7288                           	psect	bssBANK1
  7289  000100                     __pbssBANK1:
  7290                           	opt stack 0
  7291  000100                     displayString@letter:
  7292                           	opt stack 0
  7293  000100                     	ds	4
  7294  000104                     _ema_alpha:
  7295                           	opt stack 0
  7296  000104                     	ds	4
  7297  000108                     _arpeggiatorLastNoteModeResetMenu:
  7298                           	opt stack 0
  7299  000108                     	ds	3
  7300  00010B                     _arpeggiatorLastNoteModeTransposeMenu:
  7301                           	opt stack 0
  7302  00010B                     	ds	3
  7303  00010E                     _arpeggiatorLastNoteModeKeyReleaseMenu:
  7304                           	opt stack 0
  7305  00010E                     	ds	3
  7306  000111                     _arpeggiatorLastNoteModeKeyPressMenu:
  7307                           	opt stack 0
  7308  000111                     	ds	3
  7309  000114                     _arpeggiatorSkipFirstLastMenu:
  7310                           	opt stack 0
  7311  000114                     	ds	3
  7312  000117                     _arpeggiatorRandomizeTypeMenu:
  7313                           	opt stack 0
  7314  000117                     	ds	3
  7315  00011A                     _arpeggiatorRandomizeSkipMenu:
  7316                           	opt stack 0
  7317  00011A                     	ds	3
  7318  00011D                     _arpeggiatorUnLatchModeMenu:
  7319                           	opt stack 0
  7320  00011D                     	ds	3
  7321  000120                     _arpeggiatorAutoLatchOnOffMenu:
  7322                           	opt stack 0
  7323  000120                     	ds	3
  7324  000123                     _arpeggiatorLatchOnOffMenu:
  7325                           	opt stack 0
  7326  000123                     	ds	3
  7327  000126                     _arpeggiatorLatchMenu:
  7328                           	opt stack 0
  7329  000126                     	ds	3
  7330  000129                     _arpeggiatorNoteLengthMenu:
  7331                           	opt stack 0
  7332  000129                     	ds	3
  7333  00012C                     _arpeggiatorTypeMenu:
  7334                           	opt stack 0
  7335  00012C                     	ds	3
  7336  00012F                     _arpeggiatorOctavesMenu:
  7337                           	opt stack 0
  7338  00012F                     	ds	3
  7339  000132                     _arpeggiatorTempoMenu:
  7340                           	opt stack 0
  7341  000132                     	ds	3
  7342  000135                     _arpeggiatorOnOffMenu:
  7343                           	opt stack 0
  7344  000135                     	ds	3
  7345  000138                     _encoderPolarityMenu:
  7346                           	opt stack 0
  7347  000138                     	ds	3
  7348  00013B                     _eepromMenu:
  7349                           	opt stack 0
  7350  00013B                     	ds	3
  7351  00013E                     _drumChannelMenu:
  7352                           	opt stack 0
  7353  00013E                     	ds	3
  7354  000141                     _mainChannelMenu:
  7355                           	opt stack 0
  7356  000141                     	ds	3
  7357  000144                     _programChangeMenu:
  7358                           	opt stack 0
  7359  000144                     	ds	3
  7360  000147                     _midiChannelMenu:
  7361                           	opt stack 0
  7362  000147                     	ds	3
  7363  00014A                     _joystickCCMenu:
  7364                           	opt stack 0
  7365  00014A                     	ds	3
  7366  00014D                     _slidepotsCCMenu:
  7367                           	opt stack 0
  7368  00014D                     	ds	3
  7369  000150                     _potsCCMenu:
  7370                           	opt stack 0
  7371  000150                     	ds	3
  7372  000153                     _potsAlphaMenu:
  7373                           	opt stack 0
  7374  000153                     	ds	3
  7375  000156                     _potsResoMenu:
  7376                           	opt stack 0
  7377  000156                     	ds	3
  7378  000159                     _potsMenu:
  7379                           	opt stack 0
  7380  000159                     	ds	3
  7381  00015C                     _drumCCMenu:
  7382                           	opt stack 0
  7383  00015C                     	ds	3
  7384  00015F                     _drumNNMenu:
  7385                           	opt stack 0
  7386  00015F                     	ds	3
  7387  000162                     _drumCCTypeMenu:
  7388                           	opt stack 0
  7389  000162                     	ds	3
  7390  000165                     _drumMenu:
  7391                           	opt stack 0
  7392  000165                     	ds	3
  7393  000168                     _transposeMenu:
  7394                           	opt stack 0
  7395  000168                     	ds	3
  7396  00016B                     _seventhMenu:
  7397                           	opt stack 0
  7398  00016B                     	ds	3
  7399  00016E                     _triadMenu:
  7400                           	opt stack 0
  7401  00016E                     	ds	3
  7402  000171                     _modeMenu:
  7403                           	opt stack 0
  7404  000171                     	ds	3
  7405  000174                     _mainMenu:
  7406                           	opt stack 0
  7407  000174                     	ds	3
  7408  000177                     displayDigits@number_to_display_temp:
  7409                           	opt stack 0
  7410  000177                     	ds	2
  7411  000179                     displayDigits@number_to_display_last:
  7412                           	opt stack 0
  7413  000179                     	ds	2
  7414  00017B                     _TIMER_PRELOAD:
  7415                           	opt stack 0
  7416  00017B                     	ds	2
  7417  00017D                     _last_octave:
  7418                           	opt stack 0
  7419  00017D                     	ds	1
  7420  00017E                     _encoder_state_last:
  7421                           	opt stack 0
  7422  00017E                     	ds	1
  7423  00017F                     _encoder_state_now:
  7424                           	opt stack 0
  7425  00017F                     	ds	1
  7426  000180                     _GLOBAL_CC_VALUE:
  7427                           	opt stack 0
  7428  000180                     	ds	1
  7429  000181                     _GLOBAL_STATUS_BYTE:
  7430                           	opt stack 0
  7431  000181                     	ds	1
  7432  000182                     _ARPEGGIO:
  7433                           	opt stack 0
  7434  000182                     	ds	16
  7435  000192                     _string2display:
  7436                           	opt stack 0
  7437  000192                     	ds	5
  7438                           tblptru	equ	0xFF8
  7439                           tblptrh	equ	0xFF7
  7440                           tblptrl	equ	0xFF6
  7441                           tablat	equ	0xFF5
  7442                           postinc0	equ	0xFEE
  7443                           wreg	equ	0xFE8
  7444                           postdec2	equ	0xFDD
  7445                           fsr2l	equ	0xFD9
  7446                           
  7447                           	psect	dataBANK1
  7448  0001E7                     __pdataBANK1:
  7449                           	opt stack 0
  7450  0001E7                     _DRUM_NOTE:
  7451                           	opt stack 0
  7452  0001E7                     	ds	8
  7453  0001EF                     _randx:
  7454                           	opt stack 0
  7455  0001EF                     	ds	4
  7456  0001F3                     _HYST_VAL:
  7457                           	opt stack 0
  7458  0001F3                     	ds	2
  7459  0001F5                     _PRESCALER:
  7460                           	opt stack 0
  7461  0001F5                     	ds	1
  7462  0001F6                     _PPQN:
  7463                           	opt stack 0
  7464  0001F6                     	ds	1
  7465  0001F7                     _command:
  7466                           	opt stack 0
  7467  0001F7                     	ds	1
  7468  0001F8                     _string_to_display:
  7469                           	opt stack 0
  7470  0001F8                     	ds	5
  7471  0001FD                     _major_triad:
  7472                           	opt stack 0
  7473  0001FD                     	ds	3
  7474                           tblptru	equ	0xFF8
  7475                           tblptrh	equ	0xFF7
  7476                           tblptrl	equ	0xFF6
  7477                           tablat	equ	0xFF5
  7478                           postinc0	equ	0xFEE
  7479                           wreg	equ	0xFE8
  7480                           postdec2	equ	0xFDD
  7481                           fsr2l	equ	0xFD9
  7482                           
  7483                           	psect	bssBANK2
  7484  000200                     __pbssBANK2:
  7485                           	opt stack 0
  7486  000200                     _potentiometer_filtered_last:
  7487                           	opt stack 0
  7488  000200                     	ds	32
  7489  000220                     _potentiometer_filtered_now:
  7490                           	opt stack 0
  7491  000220                     	ds	32
  7492  000240                     _ema_sum:
  7493                           	opt stack 0
  7494  000240                     	ds	32
  7495  000260                     readPotentiometers@count:
  7496                           	opt stack 0
  7497  000260                     	ds	4
  7498  000264                     _count_ISR:
  7499                           	opt stack 0
  7500  000264                     	ds	4
  7501  000268                     _ARPEGGIO_RANDOM:
  7502                           	opt stack 0
  7503  000268                     	ds	16
  7504  000278                     _ARPEGGIO_SORTED:
  7505                           	opt stack 0
  7506  000278                     	ds	16
  7507                           tblptru	equ	0xFF8
  7508                           tblptrh	equ	0xFF7
  7509                           tblptrl	equ	0xFF6
  7510                           tablat	equ	0xFF5
  7511                           postinc0	equ	0xFEE
  7512                           wreg	equ	0xFE8
  7513                           postdec2	equ	0xFDD
  7514                           fsr2l	equ	0xFD9
  7515                           
  7516                           	psect	dataBANK2
  7517  000288                     __pdataBANK2:
  7518                           	opt stack 0
  7519  000288                     _inputPotsArray:
  7520                           	opt stack 0
  7521  000288                     	ds	48
  7522  0002B8                     _NOTE_LENGTH_PULSES_ARRAY:
  7523                           	opt stack 0
  7524  0002B8                     	ds	12
  7525  0002C4                     _number_of_interrupts:
  7526                           	opt stack 0
  7527  0002C4                     	ds	4
  7528  0002C8                     _diminished_7th:
  7529                           	opt stack 0
  7530  0002C8                     	ds	4
  7531  0002CC                     _half_diminished_7th:
  7532                           	opt stack 0
  7533  0002CC                     	ds	4
  7534  0002D0                     _minor_7th:
  7535                           	opt stack 0
  7536  0002D0                     	ds	4
  7537  0002D4                     _major_7th:
  7538                           	opt stack 0
  7539  0002D4                     	ds	4
  7540  0002D8                     _dominant_7th:
  7541                           	opt stack 0
  7542  0002D8                     	ds	4
  7543  0002DC                     _diminished_triad:
  7544                           	opt stack 0
  7545  0002DC                     	ds	3
  7546  0002DF                     _augmented_triad:
  7547                           	opt stack 0
  7548  0002DF                     	ds	3
  7549  0002E2                     _minor_triad:
  7550                           	opt stack 0
  7551  0002E2                     	ds	3
  7552                           tblptru	equ	0xFF8
  7553                           tblptrh	equ	0xFF7
  7554                           tblptrl	equ	0xFF6
  7555                           tablat	equ	0xFF5
  7556                           postinc0	equ	0xFEE
  7557                           wreg	equ	0xFE8
  7558                           postdec2	equ	0xFDD
  7559                           fsr2l	equ	0xFD9
  7560                           
  7561                           	psect	bssBANK3
  7562  000369                     __pbssBANK3:
  7563                           	opt stack 0
  7564  000369                     _potentiometer_raw:
  7565                           	opt stack 0
  7566  000369                     	ds	32
  7567                           tblptru	equ	0xFF8
  7568                           tblptrh	equ	0xFF7
  7569                           tblptrl	equ	0xFF6
  7570                           tablat	equ	0xFF5
  7571                           postinc0	equ	0xFEE
  7572                           wreg	equ	0xFE8
  7573                           postdec2	equ	0xFDD
  7574                           fsr2l	equ	0xFD9
  7575                           
  7576                           	psect	dataBANK3
  7577  000300                     __pdataBANK3:
  7578                           	opt stack 0
  7579  000300                     _menuArray:
  7580                           	opt stack 0
  7581  000300                     	ds	105
  7582                           tblptru	equ	0xFF8
  7583                           tblptrh	equ	0xFF7
  7584                           tblptrl	equ	0xFF6
  7585                           tablat	equ	0xFF5
  7586                           postinc0	equ	0xFEE
  7587                           wreg	equ	0xFE8
  7588                           postdec2	equ	0xFDD
  7589                           fsr2l	equ	0xFD9
  7590                           
  7591                           	psect	cstackBANK2
  7592  0002E5                     __pcstackBANK2:
  7593                           	opt stack 0
  7594  0002E5                     selectSlotOnBoot@slot:
  7595                           	opt stack 0
  7596                           
  7597                           ; 1 bytes @ 0x0
  7598  0002E5                     	ds	1
  7599  0002E6                     ??_main:
  7600                           
  7601                           ; 1 bytes @ 0x1
  7602  0002E6                     	ds	1
  7603                           tblptru	equ	0xFF8
  7604                           tblptrh	equ	0xFF7
  7605                           tblptrl	equ	0xFF6
  7606                           tablat	equ	0xFF5
  7607                           postinc0	equ	0xFEE
  7608                           wreg	equ	0xFE8
  7609                           postdec2	equ	0xFDD
  7610                           fsr2l	equ	0xFD9
  7611                           
  7612                           	psect	cstackBANK1
  7613  000197                     __pcstackBANK1:
  7614                           	opt stack 0
  7615  000197                     _readPotentiometers$5907:
  7616                           	opt stack 0
  7617  000197                     loadFromEEPROM@to_load:
  7618                           	opt stack 0
  7619                           
  7620                           ; 75 bytes @ 0x0
  7621  000197                     	ds	4
  7622  00019B                     readPotentiometers@i_3434:
  7623                           	opt stack 0
  7624                           
  7625                           ; 1 bytes @ 0x4
  7626  00019B                     	ds	1
  7627  00019C                     readPotentiometers@i:
  7628                           	opt stack 0
  7629                           
  7630                           ; 1 bytes @ 0x5
  7631  00019C                     	ds	1
  7632  00019D                     readPotentiometers@i_3435:
  7633                           	opt stack 0
  7634                           
  7635                           ; 1 bytes @ 0x6
  7636  00019D                     	ds	1
  7637  00019E                     ??_analogInputs:
  7638                           
  7639                           ; 1 bytes @ 0x7
  7640  00019E                     	ds	68
  7641  0001E2                     loadFromEEPROM@baseAddress:
  7642                           	opt stack 0
  7643                           
  7644                           ; 2 bytes @ 0x4B
  7645  0001E2                     	ds	2
  7646  0001E4                     loadFromEEPROM@slotNumber:
  7647                           	opt stack 0
  7648                           
  7649                           ; 1 bytes @ 0x4D
  7650  0001E4                     	ds	1
  7651  0001E5                     loadFromEEPROM@byte_count:
  7652                           	opt stack 0
  7653                           
  7654                           ; 2 bytes @ 0x4E
  7655  0001E5                     	ds	2
  7656                           tblptru	equ	0xFF8
  7657                           tblptrh	equ	0xFF7
  7658                           tblptrl	equ	0xFF6
  7659                           tablat	equ	0xFF5
  7660                           postinc0	equ	0xFEE
  7661                           wreg	equ	0xFE8
  7662                           postdec2	equ	0xFDD
  7663                           fsr2l	equ	0xFD9
  7664                           
  7665                           	psect	cstackBANK0
  7666  000060                     __pcstackBANK0:
  7667                           	opt stack 0
  7668  000060                     ??_rotateArrayLeft:
  7669  000060                     ??_processEncoderBuxton:
  7670  000060                     ??_buttonInputsSerial:
  7671  000060                     ?_ADC_Read:
  7672                           	opt stack 0
  7673  000060                     ?___wmul:
  7674                           	opt stack 0
  7675  000060                     ?___aldiv:
  7676                           	opt stack 0
  7677  000060                     ?___xxtofl:
  7678                           	opt stack 0
  7679  000060                     Lcd_SetBit@data_bit:
  7680                           	opt stack 0
  7681  000060                     noteOffDrum@pitch:
  7682                           	opt stack 0
  7683  000060                     noteOnDrum@pitch:
  7684                           	opt stack 0
  7685  000060                     controlChange@controllerNumber:
  7686                           	opt stack 0
  7687  000060                     pitchBend@lowByte:
  7688                           	opt stack 0
  7689  000060                     programChange@data1:
  7690                           	opt stack 0
  7691  000060                     setControllerResolution@i:
  7692                           	opt stack 0
  7693  000060                     wait_one_pulse@mode:
  7694                           	opt stack 0
  7695  000060                     copy_array@i:
  7696                           	opt stack 0
  7697  000060                     printThisNumber@n:
  7698                           	opt stack 0
  7699  000060                     int2string@number:
  7700                           	opt stack 0
  7701  000060                     Read_b_eep@badd:
  7702                           	opt stack 0
  7703  000060                     Write_b_eep@badd:
  7704                           	opt stack 0
  7705  000060                     ___wmul@multiplier:
  7706                           	opt stack 0
  7707  000060                     srand@x:
  7708                           	opt stack 0
  7709  000060                     strcpy@to:
  7710                           	opt stack 0
  7711  000060                     ___aldiv@dividend:
  7712                           	opt stack 0
  7713  000060                     ___xxtofl@val:
  7714                           	opt stack 0
  7715                           
  7716                           ; 4 bytes @ 0x0
  7717  000060                     	ds	1
  7718  000061                     ??_Lcd_Cmd:
  7719  000061                     ??_playTriad:
  7720  000061                     ??_playSeventh:
  7721  000061                     Lcd_Print_Char@Lower_Nibble:
  7722                           	opt stack 0
  7723  000061                     noteOffDrum@velocity:
  7724                           	opt stack 0
  7725  000061                     noteOnDrum@velocity:
  7726                           	opt stack 0
  7727  000061                     controlChange@value:
  7728                           	opt stack 0
  7729  000061                     pitchBend@highByte:
  7730                           	opt stack 0
  7731  000061                     programChange@data2:
  7732                           	opt stack 0
  7733  000061                     playDiatonicTriadMajor@index:
  7734                           	opt stack 0
  7735  000061                     playDiatonicSeventhMajor@index:
  7736                           	opt stack 0
  7737  000061                     playDiatonicTriadMinor@index:
  7738                           	opt stack 0
  7739  000061                     playDiatonicSeventhMinor@index:
  7740                           	opt stack 0
  7741  000061                     findArrayIndex@pitch_of_key_release:
  7742                           	opt stack 0
  7743                           
  7744                           ; 1 bytes @ 0x1
  7745  000061                     	ds	1
  7746  000062                     ??_playDiatonicTriadMajor:
  7747  000062                     ??_playDiatonicTriadMinor:
  7748  000062                     ??_playDiatonicSeventhMajor:
  7749  000062                     ??_playDiatonicSeventhMinor:
  7750  000062                     ??_ADC_Read:
  7751  000062                     ??_int2string:
  7752  000062                     Lcd_Cmd@a:
  7753                           	opt stack 0
  7754  000062                     Lcd_Print_Char@Upper_Nibble:
  7755                           	opt stack 0
  7756  000062                     noteOffDrum@channel:
  7757                           	opt stack 0
  7758  000062                     noteOnDrum@channel:
  7759                           	opt stack 0
  7760  000062                     controlChange@channel:
  7761                           	opt stack 0
  7762  000062                     pitchBend@channel:
  7763                           	opt stack 0
  7764  000062                     programChange@channel:
  7765                           	opt stack 0
  7766  000062                     findArrayIndex@i:
  7767                           	opt stack 0
  7768  000062                     Write_b_eep@bdat:
  7769                           	opt stack 0
  7770  000062                     ___wmul@multiplicand:
  7771                           	opt stack 0
  7772  000062                     strcpy@from:
  7773                           	opt stack 0
  7774                           
  7775                           ; 2 bytes @ 0x2
  7776  000062                     	ds	1
  7777  000063                     ??_processPotentiometers:
  7778  000063                     ??_Lcd_Start:
  7779  000063                     Lcd_Set_Cursor@b:
  7780                           	opt stack 0
  7781  000063                     Lcd_Print_Char@data:
  7782                           	opt stack 0
  7783  000063                     Write_b_eep@GIE_BIT_VAL:
  7784                           	opt stack 0
  7785                           
  7786                           ; 1 bytes @ 0x3
  7787  000063                     	ds	1
  7788  000064                     ??___xxtofl:
  7789  000064                     Lcd_Set_Cursor@a:
  7790                           	opt stack 0
  7791  000064                     ADC_Read@adc_channel:
  7792                           	opt stack 0
  7793  000064                     buttonInputsSerial@i:
  7794                           	opt stack 0
  7795  000064                     Lcd_Start@i:
  7796                           	opt stack 0
  7797  000064                     Lcd_Print_Char@i:
  7798                           	opt stack 0
  7799  000064                     int2string@number_to_display_temp:
  7800                           	opt stack 0
  7801  000064                     ___wmul@product:
  7802                           	opt stack 0
  7803  000064                     strcpy@cp:
  7804                           	opt stack 0
  7805  000064                     ___aldiv@divisor:
  7806                           	opt stack 0
  7807  000064                     saveToEEPROM@to_save:
  7808                           	opt stack 0
  7809                           
  7810                           ; 75 bytes @ 0x4
  7811  000064                     	ds	1
  7812  000065                     Lcd_Set_Cursor@z:
  7813                           	opt stack 0
  7814  000065                     buttonInputsSerial@i_4479:
  7815                           	opt stack 0
  7816  000065                     playTriad@triad_p:
  7817                           	opt stack 0
  7818  000065                     playSeventh@seventh_p:
  7819                           	opt stack 0
  7820                           
  7821                           ; 2 bytes @ 0x5
  7822  000065                     	ds	1
  7823  000066                     ??_displayTest:
  7824  000066                     ??_initializeMenuArray:
  7825  000066                     Lcd_Set_Cursor@y:
  7826                           	opt stack 0
  7827  000066                     playDiatonicTriadMajor@i:
  7828                           	opt stack 0
  7829  000066                     playDiatonicSeventhMajor@i:
  7830                           	opt stack 0
  7831  000066                     playDiatonicTriadMinor@pitch:
  7832                           	opt stack 0
  7833  000066                     playDiatonicSeventhMinor@pitch:
  7834                           	opt stack 0
  7835  000066                     processPotentiometers@lowByte:
  7836                           	opt stack 0
  7837  000066                     Lcd_Print_Char@i_59:
  7838                           	opt stack 0
  7839                           
  7840                           ; 2 bytes @ 0x6
  7841  000066                     	ds	1
  7842  000067                     Lcd_Set_Cursor@temp:
  7843                           	opt stack 0
  7844  000067                     playTriad@i:
  7845                           	opt stack 0
  7846  000067                     playSeventh@i:
  7847                           	opt stack 0
  7848  000067                     playDiatonicTriadMajor@i_1713:
  7849                           	opt stack 0
  7850  000067                     playDiatonicSeventhMajor@i_1718:
  7851                           	opt stack 0
  7852  000067                     playDiatonicTriadMinor@i:
  7853                           	opt stack 0
  7854  000067                     playDiatonicSeventhMinor@i:
  7855                           	opt stack 0
  7856  000067                     initializeMenuArray@NumberOfElements:
  7857                           	opt stack 0
  7858  000067                     processPotentiometers@highByte:
  7859                           	opt stack 0
  7860  000067                     rotateArrayLeft@array_index:
  7861                           	opt stack 0
  7862                           
  7863                           ; 1 bytes @ 0x7
  7864  000067                     	ds	1
  7865  000068                     playTriad@i_1691:
  7866                           	opt stack 0
  7867  000068                     playSeventh@i_1696:
  7868                           	opt stack 0
  7869  000068                     playDiatonicTriadMajor@pitch:
  7870                           	opt stack 0
  7871  000068                     playDiatonicSeventhMajor@pitch:
  7872                           	opt stack 0
  7873  000068                     playDiatonicTriadMinor@i_1723:
  7874                           	opt stack 0
  7875  000068                     playDiatonicSeventhMinor@i_1728:
  7876                           	opt stack 0
  7877  000068                     initializeMenuArray@i:
  7878                           	opt stack 0
  7879  000068                     processPotentiometers@i:
  7880                           	opt stack 0
  7881  000068                     rotateArrayLeft@i:
  7882                           	opt stack 0
  7883  000068                     ___aldiv@counter:
  7884                           	opt stack 0
  7885  000068                     ___xxtofl@sign:
  7886                           	opt stack 0
  7887  000068                     Lcd_Print_String@a:
  7888                           	opt stack 0
  7889                           
  7890                           ; 2 bytes @ 0x8
  7891  000068                     	ds	1
  7892  000069                     ??_add_notes_to_arpeggio:
  7893  000069                     playTriad@pitch:
  7894                           	opt stack 0
  7895  000069                     playSeventh@pitch:
  7896                           	opt stack 0
  7897  000069                     delete_notes_from_arpeggio@pitch:
  7898                           	opt stack 0
  7899  000069                     ___aldiv@sign:
  7900                           	opt stack 0
  7901  000069                     ___xxtofl@exp:
  7902                           	opt stack 0
  7903                           
  7904                           ; 1 bytes @ 0x9
  7905  000069                     	ds	1
  7906  00006A                     ??_Lcd_Print_String:
  7907  00006A                     delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT:
  7908                           	opt stack 0
  7909  00006A                     ___aldiv@quotient:
  7910                           	opt stack 0
  7911  00006A                     ___xxtofl@arg:
  7912                           	opt stack 0
  7913                           
  7914                           ; 4 bytes @ 0xA
  7915  00006A                     	ds	2
  7916  00006C                     Lcd_Print_String@i:
  7917                           	opt stack 0
  7918                           
  7919                           ; 2 bytes @ 0xC
  7920  00006C                     	ds	2
  7921  00006E                     ??_exitFunction:
  7922  00006E                     ??_exitSave:
  7923  00006E                     ??_exitLoad:
  7924  00006E                     ??_eepromExit:
  7925  00006E                     ??_Function_G_3:
  7926  00006E                     ?___flmul:
  7927                           	opt stack 0
  7928  00006E                     ?_map:
  7929                           	opt stack 0
  7930  00006E                     map@x:
  7931                           	opt stack 0
  7932  00006E                     ___flmul@b:
  7933                           	opt stack 0
  7934                           
  7935                           ; 4 bytes @ 0xE
  7936  00006E                     	ds	1
  7937  00006F                     setControllerNumbers@array_index:
  7938                           	opt stack 0
  7939                           
  7940                           ; 1 bytes @ 0xF
  7941  00006F                     	ds	1
  7942  000070                     add_notes_to_arpeggio@pitch:
  7943                           	opt stack 0
  7944                           
  7945                           ; 1 bytes @ 0x10
  7946  000070                     	ds	1
  7947  000071                     ??_playThisNote:
  7948  000071                     playThisNotePentatonic@index:
  7949                           	opt stack 0
  7950  000071                     playThisNote8@index:
  7951                           	opt stack 0
  7952                           
  7953                           ; 1 bytes @ 0x11
  7954  000071                     	ds	1
  7955  000072                     ??_playThisNotePentatonic:
  7956  000072                     ??_playThisNote8:
  7957  000072                     map@in_min:
  7958                           	opt stack 0
  7959  000072                     ___flmul@a:
  7960                           	opt stack 0
  7961                           
  7962                           ; 4 bytes @ 0x12
  7963  000072                     	ds	3
  7964  000075                     playThisNote@pitch:
  7965                           	opt stack 0
  7966                           
  7967                           ; 1 bytes @ 0x15
  7968  000075                     	ds	1
  7969  000076                     ??___flmul:
  7970  000076                     playThisNotePentatonic@temp_pitch:
  7971                           	opt stack 0
  7972  000076                     keyboard_all_note_efficient@pitch:
  7973                           	opt stack 0
  7974  000076                     playThisNote8@pitch:
  7975                           	opt stack 0
  7976  000076                     map@in_max:
  7977                           	opt stack 0
  7978                           
  7979                           ; 4 bytes @ 0x16
  7980  000076                     	ds	1
  7981  000077                     keyboard_sharps_only_efficient@pitch:
  7982                           	opt stack 0
  7983  000077                     playThisNote8@temp_pitch:
  7984                           	opt stack 0
  7985                           
  7986                           ; 1 bytes @ 0x17
  7987  000077                     	ds	1
  7988  000078                     keyboard_sharps_only_efficient@index:
  7989                           	opt stack 0
  7990  000078                     playThisNote8@mode_p:
  7991                           	opt stack 0
  7992                           
  7993                           ; 2 bytes @ 0x18
  7994  000078                     	ds	2
  7995  00007A                     ??_doTheUnLatch:
  7996  00007A                     keyboard_eight_note_efficient@pitch:
  7997                           	opt stack 0
  7998  00007A                     ___flmul@sign:
  7999                           	opt stack 0
  8000  00007A                     map@out_min:
  8001                           	opt stack 0
  8002                           
  8003                           ; 4 bytes @ 0x1A
  8004  00007A                     	ds	1
  8005  00007B                     keyboard_eight_note_efficient@index:
  8006                           	opt stack 0
  8007  00007B                     ___flmul@aexp:
  8008                           	opt stack 0
  8009                           
  8010                           ; 1 bytes @ 0x1B
  8011  00007B                     	ds	1
  8012  00007C                     ___flmul@grs:
  8013                           	opt stack 0
  8014                           
  8015                           ; 4 bytes @ 0x1C
  8016  00007C                     	ds	2
  8017  00007E                     ??_processOctave:
  8018  00007E                     map@out_max:
  8019                           	opt stack 0
  8020                           
  8021                           ; 4 bytes @ 0x1E
  8022  00007E                     	ds	2
  8023  000080                     ___flmul@bexp:
  8024                           	opt stack 0
  8025                           
  8026                           ; 1 bytes @ 0x20
  8027  000080                     	ds	1
  8028  000081                     ___flmul@prod:
  8029                           	opt stack 0
  8030                           
  8031                           ; 4 bytes @ 0x21
  8032  000081                     	ds	1
  8033  000082                     ??_map:
  8034                           
  8035                           ; 1 bytes @ 0x22
  8036  000082                     	ds	3
  8037  000085                     ___flmul@temp:
  8038                           	opt stack 0
  8039                           
  8040                           ; 2 bytes @ 0x25
  8041  000085                     	ds	2
  8042  000087                     ?___fldiv:
  8043                           	opt stack 0
  8044  000087                     ___fldiv@b:
  8045                           	opt stack 0
  8046                           
  8047                           ; 4 bytes @ 0x27
  8048  000087                     	ds	4
  8049  00008B                     ___fldiv@a:
  8050                           	opt stack 0
  8051                           
  8052                           ; 4 bytes @ 0x2B
  8053  00008B                     	ds	4
  8054  00008F                     ??___fldiv:
  8055                           
  8056                           ; 1 bytes @ 0x2F
  8057  00008F                     	ds	4
  8058  000093                     ___fldiv@sign:
  8059                           	opt stack 0
  8060                           
  8061                           ; 1 bytes @ 0x33
  8062  000093                     	ds	1
  8063  000094                     ___fldiv@rem:
  8064                           	opt stack 0
  8065                           
  8066                           ; 4 bytes @ 0x34
  8067  000094                     	ds	4
  8068  000098                     ___fldiv@new_exp:
  8069                           	opt stack 0
  8070                           
  8071                           ; 2 bytes @ 0x38
  8072  000098                     	ds	2
  8073  00009A                     ___fldiv@grs:
  8074                           	opt stack 0
  8075                           
  8076                           ; 4 bytes @ 0x3A
  8077  00009A                     	ds	4
  8078  00009E                     ___fldiv@bexp:
  8079                           	opt stack 0
  8080                           
  8081                           ; 1 bytes @ 0x3E
  8082  00009E                     	ds	1
  8083  00009F                     ___fldiv@aexp:
  8084                           	opt stack 0
  8085                           
  8086                           ; 1 bytes @ 0x3F
  8087  00009F                     	ds	1
  8088  0000A0                     ?___flneg:
  8089                           	opt stack 0
  8090  0000A0                     ___flneg@f1:
  8091                           	opt stack 0
  8092                           
  8093                           ; 4 bytes @ 0x40
  8094  0000A0                     	ds	4
  8095  0000A4                     ?___fladd:
  8096                           	opt stack 0
  8097  0000A4                     ___fladd@b:
  8098                           	opt stack 0
  8099                           
  8100                           ; 4 bytes @ 0x44
  8101  0000A4                     	ds	4
  8102  0000A8                     ___fladd@a:
  8103                           	opt stack 0
  8104                           
  8105                           ; 4 bytes @ 0x48
  8106  0000A8                     	ds	4
  8107  0000AC                     ??___fladd:
  8108                           
  8109                           ; 1 bytes @ 0x4C
  8110  0000AC                     	ds	3
  8111  0000AF                     saveToEEPROM@baseAddress:
  8112                           	opt stack 0
  8113                           
  8114                           ; 2 bytes @ 0x4F
  8115  0000AF                     	ds	2
  8116  0000B1                     saveToEEPROM@slotNumber:
  8117                           	opt stack 0
  8118                           
  8119                           ; 1 bytes @ 0x51
  8120  0000B1                     	ds	1
  8121  0000B2                     saveToEEPROM@byte_count:
  8122                           	opt stack 0
  8123                           
  8124                           ; 2 bytes @ 0x52
  8125  0000B2                     	ds	2
  8126  0000B4                     initializeSaveSlotsOnce@initializeSlotsOnce:
  8127                           	opt stack 0
  8128  0000B4                     ___fladd@signs:
  8129                           	opt stack 0
  8130                           
  8131                           ; 1 bytes @ 0x54
  8132  0000B4                     	ds	1
  8133  0000B5                     ___fladd@aexp:
  8134                           	opt stack 0
  8135                           
  8136                           ; 1 bytes @ 0x55
  8137  0000B5                     	ds	1
  8138  0000B6                     ___fladd@bexp:
  8139                           	opt stack 0
  8140                           
  8141                           ; 1 bytes @ 0x56
  8142  0000B6                     	ds	1
  8143  0000B7                     ___fladd@grs:
  8144                           	opt stack 0
  8145                           
  8146                           ; 1 bytes @ 0x57
  8147  0000B7                     	ds	1
  8148  0000B8                     ?___fltol:
  8149                           	opt stack 0
  8150  0000B8                     ___fltol@f1:
  8151                           	opt stack 0
  8152                           
  8153                           ; 4 bytes @ 0x58
  8154  0000B8                     	ds	4
  8155  0000BC                     ??___fltol:
  8156                           
  8157                           ; 1 bytes @ 0x5C
  8158  0000BC                     	ds	4
  8159  0000C0                     ___fltol@sign1:
  8160                           	opt stack 0
  8161                           
  8162                           ; 1 bytes @ 0x60
  8163  0000C0                     	ds	1
  8164  0000C1                     ___fltol@exp1:
  8165                           	opt stack 0
  8166                           
  8167                           ; 1 bytes @ 0x61
  8168  0000C1                     	ds	1
  8169  0000C2                     ??_readPotentiometers:
  8170  0000C2                     ?_calculate_pulse_length:
  8171                           	opt stack 0
  8172                           
  8173                           ; 2 bytes @ 0x62
  8174  0000C2                     	ds	2
  8175  0000C4                     calculate_pulse_length@s_tick:
  8176                           	opt stack 0
  8177                           
  8178                           ; 4 bytes @ 0x64
  8179  0000C4                     	ds	3
  8180  0000C7                     ??_Function_C_2:
  8181  0000C7                     ??_Function_C_3:
  8182  0000C7                     Function_D_3@array_index:
  8183                           	opt stack 0
  8184  0000C7                     Function_D_4@array_index:
  8185                           	opt stack 0
  8186  0000C7                     Function_D_5@array_index:
  8187                           	opt stack 0
  8188  0000C7                     Function_H_1@temp:
  8189                           	opt stack 0
  8190  0000C7                     Function_H_6_1@temp:
  8191                           	opt stack 0
  8192                           
  8193                           ; 1 bytes @ 0x67
  8194  0000C7                     	ds	1
  8195  0000C8                     Function_C_2@array_index:
  8196                           	opt stack 0
  8197  0000C8                     Function_C_3@array_index:
  8198                           	opt stack 0
  8199  0000C8                     Function_H_5@i:
  8200                           	opt stack 0
  8201  0000C8                     _calculate_pulse_length$5908:
  8202                           	opt stack 0
  8203                           
  8204                           ; 4 bytes @ 0x68
  8205  0000C8                     	ds	1
  8206  0000C9                     
  8207                           ; 1 bytes @ 0x69
  8208  0000C9                     	ds	3
  8209  0000CC                     tblptru	equ	0xFF8
  8210                           tblptrh	equ	0xFF7
  8211                           tblptrl	equ	0xFF6
  8212                           tablat	equ	0xFF5
  8213                           postinc0	equ	0xFEE
  8214                           wreg	equ	0xFE8
  8215                           postdec2	equ	0xFDD
  8216                           fsr2l	equ	0xFD9
  8217                           
  8218                           ; 1 bytes @ 0x6C
  8219                           
  8220                           	psect	cstackCOMRAM
  8221  000007                     __pcstackCOMRAM:
  8222                           	opt stack 0
  8223  000007                     ??_displayDigits:
  8224  000007                     ??_encoderInputsBuxton:
  8225  000007                     
  8226                           ; 1 bytes @ 0x0
  8227  000007                     	ds	1
  8228  000008                     displayString@i:
  8229                           	opt stack 0
  8230                           
  8231                           ; 1 bytes @ 0x1
  8232  000008                     	ds	1
  8233  000009                     sort_pitches@a:
  8234                           	opt stack 0
  8235                           
  8236                           ; 1 bytes @ 0x2
  8237  000009                     	ds	1
  8238  00000A                     encoderInputsBuxton@tempA:
  8239                           	opt stack 0
  8240  00000A                     displayDigits@lowByte:
  8241                           	opt stack 0
  8242  00000A                     sort_pitches@j:
  8243                           	opt stack 0
  8244                           
  8245                           ; 1 bytes @ 0x3
  8246  00000A                     	ds	1
  8247  00000B                     encoderInputsBuxton@tempB:
  8248                           	opt stack 0
  8249  00000B                     displayDigits@highByte:
  8250                           	opt stack 0
  8251  00000B                     sort_pitches@i:
  8252                           	opt stack 0
  8253                           
  8254                           ; 1 bytes @ 0x4
  8255  00000B                     	ds	1
  8256  00000C                     ??_playArpeggio:
  8257  00000C                     encoderInputsBuxton@pinstate:
  8258                           	opt stack 0
  8259                           
  8260                           ; 1 bytes @ 0x5
  8261  00000C                     	ds	6
  8262  000012                     ??_ISR:
  8263                           
  8264                           ; 1 bytes @ 0xB
  8265  000012                     	ds	24
  8266                           tblptru	equ	0xFF8
  8267                           tblptrh	equ	0xFF7
  8268                           tblptrl	equ	0xFF6
  8269                           tablat	equ	0xFF5
  8270                           postinc0	equ	0xFEE
  8271                           wreg	equ	0xFE8
  8272                           postdec2	equ	0xFDD
  8273                           fsr2l	equ	0xFD9
  8274                           
  8275 ;;
  8276 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  8277 ;;
  8278 ;; *************** function _main *****************
  8279 ;; Defined at:
  8280 ;;		line 529 in file "main.c"
  8281 ;; Parameters:    Size  Location     Type
  8282 ;;		None
  8283 ;; Auto vars:     Size  Location     Type
  8284 ;;		None
  8285 ;; Return value:  Size  Location     Type
  8286 ;;                  2  5023[None  ] int 
  8287 ;; Registers used:
  8288 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8289 ;; Tracked objects:
  8290 ;;		On entry : 0/0
  8291 ;;		On exit  : 0/0
  8292 ;;		Unchanged: 0/0
  8293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8296 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
  8297 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
  8298 ;;Total ram usage:        1 bytes
  8299 ;; Hardware stack levels required when called:   20
  8300 ;; This function calls:
  8301 ;;		_ADC_Initialize
  8302 ;;		_Lcd_Start
  8303 ;;		_Read_b_eep
  8304 ;;		_analogInputs
  8305 ;;		_calculate_alpha
  8306 ;;		_calculate_pulse_length
  8307 ;;		_digitalInputs
  8308 ;;		_displayTest
  8309 ;;		_initializeMenuArray
  8310 ;;		_initializeSaveSlotsOnce
  8311 ;;		_menu_lcd
  8312 ;;		_panic_button
  8313 ;;		_processEncoderBuxton
  8314 ;;		_selectSlotOnBoot
  8315 ;;		_setup
  8316 ;;		_srand
  8317 ;; This function is called by:
  8318 ;;		Startup code after reset
  8319 ;; This function uses a non-reentrant model
  8320 ;;
  8321                           
  8322                           	psect	text0
  8323  006AE6                     __ptext0:
  8324                           	opt stack 0
  8325  006AE6                     _main:
  8326                           	opt stack 11
  8327                           
  8328                           ;main.c: 532: setup();
  8329                           
  8330                           ;incstack = 0
  8331  006AE6  EC21  F045         	call	_setup	;wreg free
  8332                           
  8333                           ;main.c: 533: ADC_Initialize();
  8334  006AEA  ECDA  F04C         	call	_ADC_Initialize	;wreg free
  8335                           
  8336                           ;main.c: 534: initializeMenuArray();
  8337  006AEE  ECF5  F026         	call	_initializeMenuArray	;wreg free
  8338                           
  8339                           ;main.c: 535: Lcd_Start();
  8340  006AF2  ECAA  F041         	call	_Lcd_Start	;wreg free
  8341                           
  8342                           ;main.c: 538: state = 0x0;
  8343  006AF6  0E00               	movlw	0
  8344  006AF8  0100               	movlb	0	; () banked
  8345  006AFA  6FED               	movwf	_state& (0+255),b
  8346                           
  8347                           ; BSR set to: 0
  8348                           ;main.c: 539: POT_MODE = 0;
  8349  006AFC  9A05               	bcf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
  8350                           
  8351                           ; BSR set to: 0
  8352                           ;main.c: 540: which_screen = MAIN_MENU;
  8353  006AFE  0E02               	movlw	2
  8354  006B00  6E4F               	movwf	_which_screen,c
  8355                           
  8356                           ; BSR set to: 0
  8357                           ;main.c: 541: menu_lcd();
  8358  006B02  EC4F  F037         	call	_menu_lcd	;wreg free
  8359                           
  8360                           ;main.c: 542: panic_button();
  8361  006B06  EC53  F04C         	call	_panic_button	;wreg free
  8362                           
  8363                           ;main.c: 544: srand(2048);
  8364  006B0A  0E08               	movlw	8
  8365  006B0C  0100               	movlb	0	; () banked
  8366  006B0E  6F61               	movwf	(srand@x+1)& (0+255),b
  8367  006B10  0E00               	movlw	0
  8368  006B12  6F60               	movwf	srand@x& (0+255),b
  8369  006B14  ECE4  F04C         	call	_srand	;wreg free
  8370                           
  8371                           ;main.c: 547: encoderPolarity = Read_b_eep(0x02);
  8372  006B18  0E00               	movlw	0
  8373  006B1A  0100               	movlb	0	; () banked
  8374  006B1C  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  8375  006B1E  0E02               	movlw	2
  8376  006B20  6F60               	movwf	Read_b_eep@badd& (0+255),b
  8377  006B22  EC93  F04C         	call	_Read_b_eep	;wreg free
  8378  006B26  0102               	movlb	2	; () banked
  8379  006B28  6FE6               	movwf	??_main& (0+255),b
  8380  006B2A  31E6               	rrcf	??_main& (0+255),w,b
  8381  006B2C  A0D8               	btfss	status,0,c
  8382  006B2E  D002               	goto	u67010
  8383  006B30  8405               	bsf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
  8384  006B32  D001               	goto	u67025
  8385  006B34                     u67010:
  8386  006B34  9405               	bcf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
  8387  006B36                     u67025:
  8388                           
  8389                           ;main.c: 549: ema_integer = Read_b_eep(0x03);
  8390  006B36  0E00               	movlw	0
  8391  006B38  0100               	movlb	0	; () banked
  8392  006B3A  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  8393  006B3C  0E03               	movlw	3
  8394  006B3E  6F60               	movwf	Read_b_eep@badd& (0+255),b
  8395  006B40  EC93  F04C         	call	_Read_b_eep	;wreg free
  8396  006B44  0100               	movlb	0	; () banked
  8397  006B46  6FFE               	movwf	_ema_integer& (0+255),b
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;main.c: 551: calculate_alpha();
  8401  006B48  EC94  F049         	call	_calculate_alpha	;wreg free
  8402                           
  8403                           ;main.c: 558: ARPEGGIO_ON = 0;
  8404  006B4C  9604               	bcf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
  8405                           
  8406                           ;main.c: 561: TIMER_PRELOAD = calculate_pulse_length();
  8407  006B4E  EC41  F02F         	call	_calculate_pulse_length	;wreg free
  8408  006B52  C0C2  F17B         	movff	?_calculate_pulse_length,_TIMER_PRELOAD
  8409  006B56  C0C3  F17C         	movff	?_calculate_pulse_length+1,_TIMER_PRELOAD+1
  8410                           
  8411                           ;main.c: 564: LATCH = 0;
  8412  006B5A  9004               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
  8413                           
  8414                           ;main.c: 565: UN_LATCH_MODE = 0;
  8415  006B5C  9E03               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
  8416                           
  8417                           ;main.c: 567: AUTO_LATCH = 0;
  8418  006B5E  9C03               	bcf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
  8419                           
  8420                           ;main.c: 570: AUTO_RANDOMIZE = 0;
  8421  006B60  9803               	bcf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
  8422                           
  8423                           ;main.c: 574: RESET_ON_KEY_PRESS = 1;
  8424  006B62  8404               	bsf	_RESET_ON_KEY_PRESS/(0+8),_RESET_ON_KEY_PRESS& (0+7),c
  8425                           
  8426                           ;main.c: 575: RESET_ON_KEY_RELEASE = 1;
  8427  006B64  8204               	bsf	_RESET_ON_KEY_RELEASE/(0+8),_RESET_ON_KEY_RELEASE& (0+7),c
  8428                           
  8429                           ;main.c: 578: LAST_NOTE_MODE_KEY_PRESS = 0;
  8430  006B66  9203               	bcf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
  8431                           
  8432                           ;main.c: 579: LAST_NOTE_MODE_KEY_RELEASE = 0;
  8433  006B68  9003               	bcf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
  8434                           
  8435                           ;main.c: 580: LAST_NOTE_MODE_TRANSPOSE = 1;
  8436  006B6A  8E02               	bsf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
  8437                           
  8438                           ;main.c: 581: LAST_NOTE_MODE_RESET = 1;
  8439  006B6C  8C02               	bsf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  8440                           
  8441                           ;main.c: 584: skipFirstLast = 0;
  8442  006B6E  9603               	bcf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
  8443                           
  8444                           ;main.c: 587: DISPLAY_STEP_NUMBER = 0;
  8445  006B70  9A01               	bcf	_DISPLAY_STEP_NUMBER/(0+8),_DISPLAY_STEP_NUMBER& (0+7),c
  8446                           
  8447                           ;main.c: 590: TMR0IE = 1;
  8448  006B72  8AF2               	bsf	intcon,5,c	;volatile
  8449                           
  8450                           ;main.c: 591: TMR0ON = 1;
  8451  006B74  8ED5               	bsf	4053,7,c	;volatile
  8452                           
  8453                           ;main.c: 593: TMR2IE = 1;
  8454  006B76  829D               	bsf	3997,1,c	;volatile
  8455                           
  8456                           ;main.c: 594: TMR2ON = 1;
  8457  006B78  84CA               	bsf	4042,2,c	;volatile
  8458                           
  8459                           ;main.c: 596: TMR1IE = 1;
  8460  006B7A  809D               	bsf	3997,0,c	;volatile
  8461                           
  8462                           ;main.c: 597: TMR1ON = 1;
  8463  006B7C  80CD               	bsf	4045,0,c	;volatile
  8464                           
  8465                           ;main.c: 600: initializeSaveSlotsOnce();
  8466  006B7E  ECB9  F049         	call	_initializeSaveSlotsOnce	;wreg free
  8467                           
  8468                           ;main.c: 601: selectSlotOnBoot();
  8469  006B82  EC64  F04C         	call	_selectSlotOnBoot	;wreg free
  8470                           
  8471                           ;main.c: 604: if((ARPEGGIO_TYPE == UP) || (ARPEGGIO_TYPE == UP_DOWN) || (ARPEGGIO_TYPE =
      +                          = RANDOM) || (ARPEGGIO_TYPE == RANDOM_NON_REPEATING) || (ARPEGGIO_TYPE == AS_PRESSED)){
  8472  006B86  5035               	movf	_ARPEGGIO_TYPE,w,c
  8473  006B88  B4D8               	btfsc	status,2,c
  8474  006B8A  D010               	goto	u67070
  8475  006B8C  0E02               	movlw	2
  8476  006B8E  1835               	xorwf	_ARPEGGIO_TYPE,w,c
  8477  006B90  B4D8               	btfsc	status,2,c
  8478  006B92  D00C               	goto	u67070
  8479  006B94  0E05               	movlw	5
  8480  006B96  1835               	xorwf	_ARPEGGIO_TYPE,w,c
  8481  006B98  B4D8               	btfsc	status,2,c
  8482  006B9A  D008               	goto	u67070
  8483  006B9C  0E04               	movlw	4
  8484  006B9E  1835               	xorwf	_ARPEGGIO_TYPE,w,c
  8485  006BA0  B4D8               	btfsc	status,2,c
  8486  006BA2  D004               	goto	u67070
  8487  006BA4  0E06               	movlw	6
  8488  006BA6  1835               	xorwf	_ARPEGGIO_TYPE,w,c
  8489  006BA8  A4D8               	btfss	status,2,c
  8490  006BAA  D002               	goto	l5024
  8491  006BAC                     u67070:
  8492                           
  8493                           ;main.c: 605: startingDirection = UP;
  8494  006BAC  0E00               	movlw	0
  8495  006BAE  6E34               	movwf	_startingDirection,c
  8496  006BB0                     l5024:
  8497                           
  8498                           ;main.c: 606: }
  8499                           ;main.c: 608: if((ARPEGGIO_TYPE == DOWN) || (ARPEGGIO_TYPE == DOWN_UP)){
  8500  006BB0  0435               	decf	_ARPEGGIO_TYPE,w,c
  8501  006BB2  B4D8               	btfsc	status,2,c
  8502  006BB4  D004               	goto	u67090
  8503  006BB6  0E03               	movlw	3
  8504  006BB8  1835               	xorwf	_ARPEGGIO_TYPE,w,c
  8505  006BBA  A4D8               	btfss	status,2,c
  8506  006BBC  D002               	goto	l5027
  8507  006BBE                     u67090:
  8508                           
  8509                           ;main.c: 609: startingDirection = DOWN;
  8510  006BBE  0E01               	movlw	1
  8511  006BC0  6E34               	movwf	_startingDirection,c
  8512  006BC2                     l5027:
  8513                           
  8514                           ;main.c: 610: }
  8515                           ;main.c: 612: displayTest();
  8516  006BC2  ECFA  F042         	call	_displayTest	;wreg free
  8517                           
  8518                           ;main.c: 619: which_functions_are_unblocked = 1;
  8519  006BC6  8005               	bsf	_which_functions_are_unblocked/(0+8),_which_functions_are_unblocked& (0+7),c
  8520  006BC8                     
  8521                           ;main.c: 625: digitalInputs();
  8522  006BC8  EC1F  F049         	call	_digitalInputs	;wreg free
  8523                           
  8524                           ;main.c: 626: analogInputs();
  8525  006BCC  EC02  F04A         	call	_analogInputs	;wreg free
  8526                           
  8527                           ;main.c: 627: processEncoderBuxton();
  8528  006BD0  EC0A  F000         	call	_processEncoderBuxton	;wreg free
  8529                           
  8530                           ;main.c: 638: menu_lcd();
  8531  006BD4  EC4F  F037         	call	_menu_lcd	;wreg free
  8532  006BD8  D7F7               	goto	l5030
  8533  006BDA                     __end_of_main:
  8534                           	opt stack 0
  8535                           tblptru	equ	0xFF8
  8536                           tblptrh	equ	0xFF7
  8537                           tblptrl	equ	0xFF6
  8538                           tablat	equ	0xFF5
  8539                           intcon	equ	0xFF2
  8540                           postinc0	equ	0xFEE
  8541                           wreg	equ	0xFE8
  8542                           postdec2	equ	0xFDD
  8543                           fsr2l	equ	0xFD9
  8544                           status	equ	0xFD8
  8545                           
  8546 ;; *************** function _srand *****************
  8547 ;; Defined at:
  8548 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  8549 ;; Parameters:    Size  Location     Type
  8550 ;;  x               2    0[BANK0 ] unsigned int 
  8551 ;; Auto vars:     Size  Location     Type
  8552 ;;		None
  8553 ;; Return value:  Size  Location     Type
  8554 ;;                  1    wreg      void 
  8555 ;; Registers used:
  8556 ;;		status,2
  8557 ;; Tracked objects:
  8558 ;;		On entry : 0/0
  8559 ;;		On exit  : 0/0
  8560 ;;		Unchanged: 0/0
  8561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8562 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8565 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8566 ;;Total ram usage:        2 bytes
  8567 ;; Hardware stack levels used:    1
  8568 ;; Hardware stack levels required when called:    5
  8569 ;; This function calls:
  8570 ;;		Nothing
  8571 ;; This function is called by:
  8572 ;;		_main
  8573 ;; This function uses a non-reentrant model
  8574 ;;
  8575                           
  8576                           	psect	text1
  8577  0099C8                     __ptext1:
  8578                           	opt stack 0
  8579  0099C8                     _srand:
  8580                           	opt stack 25
  8581                           
  8582                           ;incstack = 0
  8583  0099C8  C060  F1EF         	movff	srand@x,_randx
  8584  0099CC  C061  F1F0         	movff	srand@x+1,_randx+1
  8585  0099D0  0101               	movlb	1	; () banked
  8586  0099D2  6BF1               	clrf	(_randx+2)& (0+255),b
  8587  0099D4  6BF2               	clrf	(_randx+3)& (0+255),b
  8588                           
  8589                           ; BSR set to: 1
  8590  0099D6  0012               	return		;funcret
  8591  0099D8                     __end_of_srand:
  8592                           	opt stack 0
  8593                           tblptru	equ	0xFF8
  8594                           tblptrh	equ	0xFF7
  8595                           tblptrl	equ	0xFF6
  8596                           tablat	equ	0xFF5
  8597                           intcon	equ	0xFF2
  8598                           postinc0	equ	0xFEE
  8599                           wreg	equ	0xFE8
  8600                           postdec2	equ	0xFDD
  8601                           fsr2l	equ	0xFD9
  8602                           status	equ	0xFD8
  8603                           
  8604 ;; *************** function _setup *****************
  8605 ;; Defined at:
  8606 ;;		line 209 in file "main.c"
  8607 ;; Parameters:    Size  Location     Type
  8608 ;;		None
  8609 ;; Auto vars:     Size  Location     Type
  8610 ;;		None
  8611 ;; Return value:  Size  Location     Type
  8612 ;;                  1    wreg      void 
  8613 ;; Registers used:
  8614 ;;		wreg, status,2, status,0
  8615 ;; Tracked objects:
  8616 ;;		On entry : 0/0
  8617 ;;		On exit  : 0/0
  8618 ;;		Unchanged: 0/0
  8619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8624 ;;Total ram usage:        0 bytes
  8625 ;; Hardware stack levels used:    1
  8626 ;; Hardware stack levels required when called:    5
  8627 ;; This function calls:
  8628 ;;		Nothing
  8629 ;; This function is called by:
  8630 ;;		_main
  8631 ;; This function uses a non-reentrant model
  8632 ;;
  8633                           
  8634                           	psect	text2
  8635  008A42                     __ptext2:
  8636                           	opt stack 0
  8637  008A42                     _setup:
  8638                           	opt stack 25
  8639                           
  8640                           ;main.c: 212: TRISA = 0b000001;
  8641                           
  8642                           ; BSR set to: 1
  8643                           ;incstack = 0
  8644  008A42  0E01               	movlw	1
  8645  008A44  6E92               	movwf	3986,c	;volatile
  8646                           
  8647                           ;main.c: 216: TRISB = 0b00110001;
  8648  008A46  0E31               	movlw	49
  8649  008A48  6E93               	movwf	3987,c	;volatile
  8650                           
  8651                           ;main.c: 224: TRISC = 0b10010000;
  8652  008A4A  0E90               	movlw	144
  8653  008A4C  6E94               	movwf	3988,c	;volatile
  8654                           
  8655                           ;main.c: 230: TRISD = 0b00000000;
  8656  008A4E  0E00               	movlw	0
  8657  008A50  6E95               	movwf	3989,c	;volatile
  8658                           
  8659                           ;main.c: 233: TRISE = 0b000;
  8660  008A52  0E00               	movlw	0
  8661  008A54  6E96               	movwf	3990,c	;volatile
  8662                           
  8663                           ;main.c: 238: PORTA = 0x00;
  8664  008A56  0E00               	movlw	0
  8665  008A58  6E80               	movwf	3968,c	;volatile
  8666                           
  8667                           ;main.c: 239: PORTB = 0x00;
  8668  008A5A  0E00               	movlw	0
  8669  008A5C  6E81               	movwf	3969,c	;volatile
  8670                           
  8671                           ;main.c: 240: PORTC = 0x00;
  8672  008A5E  0E00               	movlw	0
  8673  008A60  6E82               	movwf	3970,c	;volatile
  8674                           
  8675                           ;main.c: 241: PORTD = 0x00;
  8676  008A62  0E00               	movlw	0
  8677  008A64  6E83               	movwf	3971,c	;volatile
  8678                           
  8679                           ;main.c: 242: PORTE = 0x00;
  8680  008A66  0E00               	movlw	0
  8681  008A68  6E84               	movwf	3972,c	;volatile
  8682                           
  8683                           ;main.c: 245: IPEN = 0;
  8684  008A6A  9ED0               	bcf	4048,7,c	;volatile
  8685                           
  8686                           ;main.c: 248: RBIF = 0;
  8687  008A6C  90F2               	bcf	intcon,0,c	;volatile
  8688                           
  8689                           ;main.c: 249: RBIE = 1;
  8690  008A6E  86F2               	bsf	intcon,3,c	;volatile
  8691                           
  8692                           ;main.c: 251: INTEDG0 = 0;
  8693  008A70  9CF1               	bcf	intcon2,6,c	;volatile
  8694                           
  8695                           ;main.c: 252: INT0IF = 0;
  8696  008A72  92F2               	bcf	intcon,1,c	;volatile
  8697                           
  8698                           ;main.c: 253: INT0IE = 1;
  8699  008A74  88F2               	bsf	intcon,4,c	;volatile
  8700                           
  8701                           ;main.c: 256: T08BIT = 0;
  8702  008A76  9CD5               	bcf	4053,6,c	;volatile
  8703                           
  8704                           ;main.c: 257: T0CS = 0;
  8705  008A78  9AD5               	bcf	4053,5,c	;volatile
  8706                           
  8707                           ;main.c: 258: T0CON &= 0b11111000;
  8708  008A7A  0EF8               	movlw	248
  8709  008A7C  16D5               	andwf	4053,f,c	;volatile
  8710                           
  8711                           ;main.c: 259: T0CON |= 0b00000001;
  8712  008A7E  80D5               	bsf	4053,0,c	;volatile
  8713                           
  8714                           ;main.c: 260: PSA = 0;
  8715  008A80  96D5               	bcf	4053,3,c	;volatile
  8716                           
  8717                           ;main.c: 261: TMR0ON = 0;
  8718  008A82  9ED5               	bcf	4053,7,c	;volatile
  8719                           
  8720                           ;main.c: 262: TMR0IE = 1;
  8721  008A84  8AF2               	bsf	intcon,5,c	;volatile
  8722                           
  8723                           ;main.c: 265: T2CON = 0b01000001;
  8724  008A86  0E41               	movlw	65
  8725  008A88  6ECA               	movwf	4042,c	;volatile
  8726                           
  8727                           ;main.c: 266: TMR2 = 0x83;
  8728  008A8A  0E83               	movlw	131
  8729  008A8C  6ECC               	movwf	4044,c	;volatile
  8730                           
  8731                           ;main.c: 267: TMR2ON = 0;
  8732  008A8E  94CA               	bcf	4042,2,c	;volatile
  8733                           
  8734                           ;main.c: 268: TMR2IE = 0;
  8735  008A90  929D               	bcf	3997,1,c	;volatile
  8736                           
  8737                           ;main.c: 271: T1CON = 0b10000000;
  8738  008A92  0E80               	movlw	128
  8739  008A94  6ECD               	movwf	4045,c	;volatile
  8740                           
  8741                           ;main.c: 272: TMR1 = 0xEC78;
  8742  008A96  0EEC               	movlw	236
  8743  008A98  6ECF               	movwf	4047,c	;volatile
  8744  008A9A  0E78               	movlw	120
  8745  008A9C  6ECE               	movwf	4046,c	;volatile
  8746                           
  8747                           ;main.c: 273: TMR1ON = 0;
  8748  008A9E  90CD               	bcf	4045,0,c	;volatile
  8749                           
  8750                           ;main.c: 274: TMR1IE = 1;
  8751  008AA0  809D               	bsf	3997,0,c	;volatile
  8752                           
  8753                           ;main.c: 278: TXEN = 1;
  8754  008AA2  8AAC               	bsf	4012,5,c	;volatile
  8755                           
  8756                           ;main.c: 279: SYNC = 0;
  8757  008AA4  98AC               	bcf	4012,4,c	;volatile
  8758                           
  8759                           ;main.c: 282: SPEN = 1;
  8760  008AA6  8EAB               	bsf	4011,7,c	;volatile
  8761                           
  8762                           ;main.c: 283: CREN = 1;
  8763  008AA8  88AB               	bsf	4011,4,c	;volatile
  8764                           
  8765                           ;main.c: 286: BRGH = 0;
  8766  008AAA  94AC               	bcf	4012,2,c	;volatile
  8767                           
  8768                           ;main.c: 287: SPBRG = 9;
  8769  008AAC  0E09               	movlw	9
  8770  008AAE  6EAF               	movwf	4015,c	;volatile
  8771                           
  8772                           ;main.c: 289: PEIE = 1;
  8773  008AB0  8CF2               	bsf	intcon,6,c	;volatile
  8774                           
  8775                           ;main.c: 290: GIE = 1;
  8776  008AB2  8EF2               	bsf	intcon,7,c	;volatile
  8777  008AB4  0012               	return		;funcret
  8778  008AB6                     __end_of_setup:
  8779                           	opt stack 0
  8780                           tblptru	equ	0xFF8
  8781                           tblptrh	equ	0xFF7
  8782                           tblptrl	equ	0xFF6
  8783                           tablat	equ	0xFF5
  8784                           intcon	equ	0xFF2
  8785                           intcon2	equ	0xFF1
  8786                           postinc0	equ	0xFEE
  8787                           wreg	equ	0xFE8
  8788                           postdec2	equ	0xFDD
  8789                           fsr2l	equ	0xFD9
  8790                           status	equ	0xFD8
  8791                           
  8792 ;; *************** function _selectSlotOnBoot *****************
  8793 ;; Defined at:
  8794 ;;		line 41 in file "eeprom.c"
  8795 ;; Parameters:    Size  Location     Type
  8796 ;;		None
  8797 ;; Auto vars:     Size  Location     Type
  8798 ;;  slot            1    0[BANK2 ] unsigned char 
  8799 ;; Return value:  Size  Location     Type
  8800 ;;                  1    wreg      void 
  8801 ;; Registers used:
  8802 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8803 ;; Tracked objects:
  8804 ;;		On entry : 0/0
  8805 ;;		On exit  : 0/0
  8806 ;;		Unchanged: 0/0
  8807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8809 ;;      Locals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
  8810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8811 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
  8812 ;;Total ram usage:        1 bytes
  8813 ;; Hardware stack levels used:    1
  8814 ;; Hardware stack levels required when called:    8
  8815 ;; This function calls:
  8816 ;;		_Read_b_eep
  8817 ;;		_loadFromEEPROM
  8818 ;; This function is called by:
  8819 ;;		_main
  8820 ;; This function uses a non-reentrant model
  8821 ;;
  8822                           
  8823                           	psect	text3
  8824  0098C8                     __ptext3:
  8825                           	opt stack 0
  8826  0098C8                     _selectSlotOnBoot:
  8827                           	opt stack 22
  8828                           
  8829                           ;eeprom.c: 43: unsigned char slot = Read_b_eep(0);
  8830                           
  8831                           ;incstack = 0
  8832  0098C8  0E00               	movlw	0
  8833  0098CA  0100               	movlb	0	; () banked
  8834  0098CC  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  8835  0098CE  0E00               	movlw	0
  8836  0098D0  6F60               	movwf	Read_b_eep@badd& (0+255),b
  8837  0098D2  EC93  F04C         	call	_Read_b_eep	;wreg free
  8838  0098D6  0102               	movlb	2	; () banked
  8839  0098D8  6FE5               	movwf	selectSlotOnBoot@slot& (0+255),b
  8840                           
  8841                           ; BSR set to: 2
  8842                           ;eeprom.c: 45: if (slot == DEFAULT){
  8843  0098DA  51E5               	movf	selectSlotOnBoot@slot& (0+255),w,b
  8844  0098DC  B4D8               	btfsc	status,2,c
  8845  0098DE  0012               	return	
  8846                           
  8847                           ; BSR set to: 2
  8848                           ;eeprom.c: 49: else {
  8849                           ;eeprom.c: 50: loadFromEEPROM(slot);
  8850                           
  8851                           ; BSR set to: 2
  8852                           
  8853                           ; BSR set to: 2
  8854                           ;eeprom.c: 47: }
  8855                           
  8856                           ; BSR set to: 2
  8857                           ;eeprom.c: 46: return;
  8858  0098E0  51E5               	movf	selectSlotOnBoot@slot& (0+255),w,b
  8859  0098E2  ECD7  F025         	call	_loadFromEEPROM
  8860  0098E6  0012               	return	
  8861  0098E8                     __end_of_selectSlotOnBoot:
  8862                           	opt stack 0
  8863                           tblptru	equ	0xFF8
  8864                           tblptrh	equ	0xFF7
  8865                           tblptrl	equ	0xFF6
  8866                           tablat	equ	0xFF5
  8867                           intcon	equ	0xFF2
  8868                           intcon2	equ	0xFF1
  8869                           postinc0	equ	0xFEE
  8870                           wreg	equ	0xFE8
  8871                           postdec2	equ	0xFDD
  8872                           fsr2l	equ	0xFD9
  8873                           status	equ	0xFD8
  8874                           
  8875 ;; *************** function _panic_button *****************
  8876 ;; Defined at:
  8877 ;;		line 514 in file "main.c"
  8878 ;; Parameters:    Size  Location     Type
  8879 ;;		None
  8880 ;; Auto vars:     Size  Location     Type
  8881 ;;		None
  8882 ;; Return value:  Size  Location     Type
  8883 ;;                  1    wreg      void 
  8884 ;; Registers used:
  8885 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
  8886 ;; Tracked objects:
  8887 ;;		On entry : 0/0
  8888 ;;		On exit  : 0/0
  8889 ;;		Unchanged: 0/0
  8890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8895 ;;Total ram usage:        0 bytes
  8896 ;; Hardware stack levels used:    1
  8897 ;; Hardware stack levels required when called:    9
  8898 ;; This function calls:
  8899 ;;		_controlChange
  8900 ;; This function is called by:
  8901 ;;		_main
  8902 ;; This function uses a non-reentrant model
  8903 ;;
  8904                           
  8905                           	psect	text4
  8906  0098A6                     __ptext4:
  8907                           	opt stack 0
  8908  0098A6                     _panic_button:
  8909                           	opt stack 21
  8910                           
  8911                           ;main.c: 515: controlChange (channel, all_notes_off, 0x00);
  8912                           
  8913                           ;incstack = 0
  8914  0098A6  0E7B               	movlw	123
  8915  0098A8  0100               	movlb	0	; () banked
  8916  0098AA  6F60               	movwf	controlChange@controllerNumber& (0+255),b
  8917  0098AC  0E00               	movlw	0
  8918  0098AE  6F61               	movwf	controlChange@value& (0+255),b
  8919  0098B0  503E               	movf	_channel,w,c
  8920  0098B2  ECC9  F048         	call	_controlChange
  8921                           
  8922                           ;main.c: 516: controlChange (drumchannel, all_notes_off, 0x00);
  8923  0098B6  0E7B               	movlw	123
  8924  0098B8  0100               	movlb	0	; () banked
  8925  0098BA  6F60               	movwf	controlChange@controllerNumber& (0+255),b
  8926  0098BC  0E00               	movlw	0
  8927  0098BE  6F61               	movwf	controlChange@value& (0+255),b
  8928  0098C0  5052               	movf	_drumchannel,w,c
  8929  0098C2  ECC9  F048         	call	_controlChange
  8930  0098C6  0012               	return		;funcret
  8931  0098C8                     __end_of_panic_button:
  8932                           	opt stack 0
  8933                           tblptru	equ	0xFF8
  8934                           tblptrh	equ	0xFF7
  8935                           tblptrl	equ	0xFF6
  8936                           tablat	equ	0xFF5
  8937                           intcon	equ	0xFF2
  8938                           intcon2	equ	0xFF1
  8939                           postinc0	equ	0xFEE
  8940                           wreg	equ	0xFE8
  8941                           postdec2	equ	0xFDD
  8942                           fsr2l	equ	0xFD9
  8943                           status	equ	0xFD8
  8944                           
  8945 ;; *************** function _menu_lcd *****************
  8946 ;; Defined at:
  8947 ;;		line 325 in file "menu.c"
  8948 ;; Parameters:    Size  Location     Type
  8949 ;;		None
  8950 ;; Auto vars:     Size  Location     Type
  8951 ;;		None
  8952 ;; Return value:  Size  Location     Type
  8953 ;;                  1    wreg      void 
  8954 ;; Registers used:
  8955 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8956 ;; Tracked objects:
  8957 ;;		On entry : 0/0
  8958 ;;		On exit  : 0/0
  8959 ;;		Unchanged: 0/0
  8960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8965 ;;Total ram usage:        0 bytes
  8966 ;; Hardware stack levels used:    1
  8967 ;; Hardware stack levels required when called:   19
  8968 ;; This function calls:
  8969 ;;		_Function_A
  8970 ;;		_Function_B
  8971 ;;		_Function_C
  8972 ;;		_Function_D
  8973 ;;		_Function_E
  8974 ;;		_Function_F
  8975 ;;		_Function_G
  8976 ;;		_Function_H
  8977 ;;		_Lcd_Clear
  8978 ;;		_Lcd_Print_String
  8979 ;;		_Lcd_Set_Cursor
  8980 ;;		___lbmod
  8981 ;;		___wmul
  8982 ;;		_exitFunction
  8983 ;; This function is called by:
  8984 ;;		_main
  8985 ;; This function uses a non-reentrant model
  8986 ;;
  8987                           
  8988                           	psect	text5
  8989  006E9E                     __ptext5:
  8990                           	opt stack 0
  8991  006E9E                     _menu_lcd:
  8992                           	opt stack 11
  8993                           
  8994                           ;menu.c: 327: which_screen = MAIN_MENU;
  8995                           
  8996                           ;incstack = 0
  8997  006E9E  0E02               	movlw	2
  8998  006EA0  6E4F               	movwf	_which_screen,c
  8999                           
  9000                           ;menu.c: 330: if (lcd_print_once == 0) {
  9001  006EA2  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9002  006EA4  D026               	goto	l3532
  9003                           
  9004                           ;menu.c: 332: Lcd_Clear();
  9005  006EA6  ECC5  F04C         	call	_Lcd_Clear	;wreg free
  9006                           
  9007                           ;menu.c: 333: Lcd_Set_Cursor(1,1);
  9008  006EAA  0E01               	movlw	1
  9009  006EAC  0100               	movlb	0	; () banked
  9010  006EAE  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9011  006EB0  0E01               	movlw	1
  9012  006EB2  ECDF  F047         	call	_Lcd_Set_Cursor
  9013                           
  9014                           ;menu.c: 339: Lcd_Print_String(LCD_STRINGS[(mainMenu.selector % mainMenu.number) + mainM
      +                          enu.address]);
  9015  006EB6  0101               	movlb	1	; () banked
  9016  006EB8  5174               	movf	_mainMenu& (0+255),w,b
  9017  006EBA  6EE6               	movwf	postinc1,c
  9018  006EBC  5176               	movf	(_mainMenu+2)& (0+255),w,b
  9019  006EBE  6EE6               	movwf	postinc1,c
  9020  006EC0  EC63  F041         	call	___lbmod	;wreg free
  9021  006EC4  503F               	movf	btemp,w,c
  9022  006EC6  0101               	movlb	1	; () banked
  9023  006EC8  2575               	addwf	(_mainMenu+1)& (0+255),w,b
  9024  006ECA  0100               	movlb	0	; () banked
  9025  006ECC  6F60               	movwf	___wmul@multiplier& (0+255),b
  9026  006ECE  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9027  006ED0  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9028  006ED2  0E00               	movlw	0
  9029  006ED4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9030  006ED6  0E11               	movlw	17
  9031  006ED8  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9032  006EDA  EC2C  F04C         	call	___wmul	;wreg free
  9033  006EDE  0E9E               	movlw	low _LCD_STRINGS
  9034  006EE0  0100               	movlb	0	; () banked
  9035  006EE2  2560               	addwf	?___wmul& (0+255),w,b
  9036  006EE4  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9037  006EE6  0EF3               	movlw	high _LCD_STRINGS
  9038  006EE8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9039  006EEA  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9040  006EEC  EC76  F042         	call	_Lcd_Print_String	;wreg free
  9041                           
  9042                           ;menu.c: 341: lcd_print_once = 1;
  9043  006EF0  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9044  006EF2                     l3532:
  9045                           
  9046                           ;menu.c: 342: }
  9047                           ;menu.c: 344: if(encoder_click == 1) {
  9048  006EF2  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9049  006EF4  0012               	return	
  9050                           
  9051                           ;menu.c: 346: encoder_click = 0;
  9052  006EF6  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9053                           
  9054                           ;menu.c: 348: switch (mainMenu.selector) {
  9055  006EF8  D026               	goto	l3534
  9056  006EFA                     
  9057                           ;menu.c: 350: Function_A();
  9058  006EFA  ECD9  F039         	call	_Function_A	;wreg free
  9059                           
  9060                           ;menu.c: 351: exitFunction();
  9061  006EFE  ECCC  F04A         	call	_exitFunction	;wreg free
  9062                           
  9063                           ;menu.c: 352: break;
  9064  006F02  0012               	return	
  9065  006F04                     
  9066                           ;menu.c: 354: Function_H();
  9067  006F04  EC6C  F03B         	call	_Function_H	;wreg free
  9068                           
  9069                           ;menu.c: 355: exitFunction();
  9070  006F08  ECCC  F04A         	call	_exitFunction	;wreg free
  9071                           
  9072                           ;menu.c: 356: break;
  9073  006F0C  0012               	return	
  9074  006F0E                     
  9075                           ;menu.c: 358: Function_B();
  9076  006F0E  EC32  F044         	call	_Function_B	;wreg free
  9077                           
  9078                           ;menu.c: 359: exitFunction();
  9079  006F12  ECCC  F04A         	call	_exitFunction	;wreg free
  9080                           
  9081                           ;menu.c: 360: break;
  9082  006F16  0012               	return	
  9083  006F18                     
  9084                           ;menu.c: 362: Function_C();
  9085  006F18  EC43  F040         	call	_Function_C	;wreg free
  9086                           
  9087                           ;menu.c: 363: exitFunction();
  9088  006F1C  ECCC  F04A         	call	_exitFunction	;wreg free
  9089                           
  9090                           ;menu.c: 364: break;
  9091  006F20  0012               	return	
  9092  006F22                     
  9093                           ;menu.c: 366: Function_D();
  9094  006F22  ECD4  F040         	call	_Function_D	;wreg free
  9095                           
  9096                           ;menu.c: 367: exitFunction();
  9097  006F26  ECCC  F04A         	call	_exitFunction	;wreg free
  9098                           
  9099                           ;menu.c: 368: break;
  9100  006F2A  0012               	return	
  9101  006F2C                     
  9102                           ;menu.c: 370: Function_E();
  9103  006F2C  EC75  F046         	call	_Function_E	;wreg free
  9104                           
  9105                           ;menu.c: 371: exitFunction();
  9106  006F30  ECCC  F04A         	call	_exitFunction	;wreg free
  9107                           
  9108                           ;menu.c: 372: break;
  9109  006F34  0012               	return	
  9110  006F36                     
  9111                           ;menu.c: 374: Function_F();
  9112  006F36  EC49  F047         	call	_Function_F	;wreg free
  9113                           
  9114                           ;menu.c: 375: exitFunction();
  9115  006F3A  ECCC  F04A         	call	_exitFunction	;wreg free
  9116                           
  9117                           ;menu.c: 376: break;
  9118  006F3E  0012               	return	
  9119  006F40                     
  9120                           ;menu.c: 378: Function_G();
  9121  006F40  EC8C  F040         	call	_Function_G	;wreg free
  9122                           
  9123                           ;menu.c: 384: }
  9124                           
  9125                           ;menu.c: 383: break;
  9126                           
  9127                           ;menu.c: 382: default:
  9128                           
  9129                           ;menu.c: 380: break;
  9130  006F44  0012               	return	
  9131  006F46                     l3534:
  9132  006F46  0101               	movlb	1	; () banked
  9133  006F48  5176               	movf	(_mainMenu+2)& (0+255),w,b
  9134                           
  9135                           ; Switch size 1, requested type "space"
  9136                           ; Number of cases is 8, Range of values is 0 to 7
  9137                           ; switch strategies available:
  9138                           ; Name         Instructions Cycles
  9139                           ; simple_byte           25    13 (average)
  9140                           ;	Chosen strategy is simple_byte
  9141  006F4A  0A00               	xorlw	0	; case 0
  9142  006F4C  B4D8               	btfsc	status,2,c
  9143  006F4E  D7D5               	goto	l3535
  9144  006F50  0A01               	xorlw	1	; case 1
  9145  006F52  B4D8               	btfsc	status,2,c
  9146  006F54  D7D7               	goto	l3537
  9147  006F56  0A03               	xorlw	3	; case 2
  9148  006F58  B4D8               	btfsc	status,2,c
  9149  006F5A  D7D9               	goto	l3538
  9150  006F5C  0A01               	xorlw	1	; case 3
  9151  006F5E  B4D8               	btfsc	status,2,c
  9152  006F60  D7DB               	goto	l3539
  9153  006F62  0A07               	xorlw	7	; case 4
  9154  006F64  B4D8               	btfsc	status,2,c
  9155  006F66  D7DD               	goto	l3540
  9156  006F68  0A01               	xorlw	1	; case 5
  9157  006F6A  B4D8               	btfsc	status,2,c
  9158  006F6C  D7DF               	goto	l3541
  9159  006F6E  0A03               	xorlw	3	; case 6
  9160  006F70  B4D8               	btfsc	status,2,c
  9161  006F72  D7E1               	goto	l3542
  9162  006F74  0A01               	xorlw	1	; case 7
  9163  006F76  A4D8               	btfss	status,2,c
  9164                           
  9165                           ; BSR set to: 1
  9166  006F78  0012               	return	
  9167  006F7A  D7E2               	goto	l3543
  9168  006F7C                     __end_of_menu_lcd:
  9169                           	opt stack 0
  9170                           tblptru	equ	0xFF8
  9171                           tblptrh	equ	0xFF7
  9172                           tblptrl	equ	0xFF6
  9173                           tablat	equ	0xFF5
  9174                           intcon	equ	0xFF2
  9175                           intcon2	equ	0xFF1
  9176                           postinc0	equ	0xFEE
  9177                           wreg	equ	0xFE8
  9178                           postinc1	equ	0xFE6
  9179                           postdec2	equ	0xFDD
  9180                           fsr2l	equ	0xFD9
  9181                           status	equ	0xFD8
  9182                           
  9183 ;; *************** function _Lcd_Clear *****************
  9184 ;; Defined at:
  9185 ;;		line 53 in file "lcd.c"
  9186 ;; Parameters:    Size  Location     Type
  9187 ;;		None
  9188 ;; Auto vars:     Size  Location     Type
  9189 ;;		None
  9190 ;; Return value:  Size  Location     Type
  9191 ;;                  1    wreg      void 
  9192 ;; Registers used:
  9193 ;;		wreg, status,2, status,0, cstack
  9194 ;; Tracked objects:
  9195 ;;		On entry : 0/0
  9196 ;;		On exit  : 0/0
  9197 ;;		Unchanged: 0/0
  9198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9203 ;;Total ram usage:        0 bytes
  9204 ;; Hardware stack levels used:    1
  9205 ;; Hardware stack levels required when called:    7
  9206 ;; This function calls:
  9207 ;;		_Lcd_Cmd
  9208 ;; This function is called by:
  9209 ;;		_menu_lcd
  9210 ;; This function uses a non-reentrant model
  9211 ;;
  9212                           
  9213                           	psect	text6
  9214  00998A                     __ptext6:
  9215                           	opt stack 0
  9216  00998A                     _Lcd_Clear:
  9217                           	opt stack 22
  9218                           
  9219                           ;lcd.c: 56: TMR2ON = 0;
  9220                           
  9221                           ;incstack = 0
  9222  00998A  94CA               	bcf	4042,2,c	;volatile
  9223                           
  9224                           ;lcd.c: 57: PORTC &= 0xF0;
  9225  00998C  0EF0               	movlw	240
  9226  00998E  1682               	andwf	3970,f,c	;volatile
  9227                           
  9228                           ;lcd.c: 59: Lcd_Cmd(0);
  9229  009990  0E00               	movlw	0
  9230  009992  EC40  F04C         	call	_Lcd_Cmd
  9231                           
  9232                           ;lcd.c: 60: Lcd_Cmd(1);
  9233  009996  0E01               	movlw	1
  9234  009998  EC40  F04C         	call	_Lcd_Cmd
  9235                           
  9236                           ;lcd.c: 63: TMR2ON = 1;
  9237  00999C  84CA               	bsf	4042,2,c	;volatile
  9238  00999E  0012               	return		;funcret
  9239  0099A0                     __end_of_Lcd_Clear:
  9240                           	opt stack 0
  9241                           tblptru	equ	0xFF8
  9242                           tblptrh	equ	0xFF7
  9243                           tblptrl	equ	0xFF6
  9244                           tablat	equ	0xFF5
  9245                           intcon	equ	0xFF2
  9246                           intcon2	equ	0xFF1
  9247                           postinc0	equ	0xFEE
  9248                           wreg	equ	0xFE8
  9249                           postinc1	equ	0xFE6
  9250                           postdec2	equ	0xFDD
  9251                           fsr2l	equ	0xFD9
  9252                           status	equ	0xFD8
  9253                           
  9254 ;; *************** function _Function_H *****************
  9255 ;; Defined at:
  9256 ;;		line 1200 in file "menu.c"
  9257 ;; Parameters:    Size  Location     Type
  9258 ;;		None
  9259 ;; Auto vars:     Size  Location     Type
  9260 ;;		None
  9261 ;; Return value:  Size  Location     Type
  9262 ;;                  1    wreg      void 
  9263 ;; Registers used:
  9264 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9265 ;; Tracked objects:
  9266 ;;		On entry : 0/0
  9267 ;;		On exit  : 0/0
  9268 ;;		Unchanged: 0/0
  9269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9274 ;;Total ram usage:        0 bytes
  9275 ;; Hardware stack levels used:    1
  9276 ;; Hardware stack levels required when called:   18
  9277 ;; This function calls:
  9278 ;;		_Function_H_1
  9279 ;;		_Function_H_2
  9280 ;;		_Function_H_3
  9281 ;;		_Function_H_4
  9282 ;;		_Function_H_5
  9283 ;;		_Function_H_6
  9284 ;;		_Function_H_7
  9285 ;;		_Function_H_8
  9286 ;;		_Function_H_9
  9287 ;;		_Lcd_Print_String
  9288 ;;		___lbmod
  9289 ;;		___wmul
  9290 ;;		_clear_row2
  9291 ;;		_un_block_code
  9292 ;; This function is called by:
  9293 ;;		_menu_lcd
  9294 ;; This function uses a non-reentrant model
  9295 ;;
  9296                           
  9297                           	psect	text7
  9298  0076D8                     __ptext7:
  9299                           	opt stack 0
  9300  0076D8                     _Function_H:
  9301                           	opt stack 11
  9302                           
  9303                           ;menu.c: 1202: which_screen = ARPEGGIATOR_MENU;
  9304                           
  9305                           ;incstack = 0
  9306  0076D8  0E19               	movlw	25
  9307  0076DA  6E4F               	movwf	_which_screen,c
  9308                           
  9309                           ;menu.c: 1203: encoder_click = 0;
  9310  0076DC  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9311                           
  9312                           ;menu.c: 1204: lcd_print_once = 0;
  9313  0076DE  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9314                           
  9315                           ;menu.c: 1206: while(encoder_click == 0) {
  9316  0076E0  D023               	goto	l3773
  9317  0076E2                     
  9318                           ;menu.c: 1210: un_block_code();
  9319  0076E2  ECAD  F04C         	call	_un_block_code	;wreg free
  9320                           
  9321                           ;menu.c: 1212: if (lcd_print_once == 0) {
  9322  0076E6  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9323  0076E8  D01E               	goto	l3775
  9324                           
  9325                           ;menu.c: 1213: clear_row2();
  9326  0076EA  EC04  F04C         	call	_clear_row2	;wreg free
  9327                           
  9328                           ;menu.c: 1214: Lcd_Print_String(LCD_STRINGS[(arpeggiatorMenu.selector % arpeggiatorMenu.
      +                          number) + arpeggiatorMenu.address]);
  9329  0076EE  0100               	movlb	0	; () banked
  9330  0076F0  51DF               	movf	_arpeggiatorMenu& (0+255),w,b
  9331  0076F2  6EE6               	movwf	postinc1,c
  9332  0076F4  51E1               	movf	(_arpeggiatorMenu+2)& (0+255),w,b
  9333  0076F6  6EE6               	movwf	postinc1,c
  9334  0076F8  EC63  F041         	call	___lbmod	;wreg free
  9335  0076FC  503F               	movf	btemp,w,c
  9336  0076FE  0100               	movlb	0	; () banked
  9337  007700  25E0               	addwf	(_arpeggiatorMenu+1)& (0+255),w,b
  9338  007702  6F60               	movwf	___wmul@multiplier& (0+255),b
  9339  007704  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9340  007706  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9341  007708  0E00               	movlw	0
  9342  00770A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9343  00770C  0E11               	movlw	17
  9344  00770E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9345  007710  EC2C  F04C         	call	___wmul	;wreg free
  9346  007714  0E9E               	movlw	low _LCD_STRINGS
  9347  007716  0100               	movlb	0	; () banked
  9348  007718  2560               	addwf	?___wmul& (0+255),w,b
  9349  00771A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9350  00771C  0EF3               	movlw	high _LCD_STRINGS
  9351  00771E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9352  007720  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9353  007722  EC76  F042         	call	_Lcd_Print_String	;wreg free
  9354  007726                     l3775:
  9355                           
  9356                           ;menu.c: 1215: }
  9357                           ;menu.c: 1216: lcd_print_once = 1;
  9358  007726  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9359  007728                     l3773:
  9360  007728  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9361  00772A  D7DB               	goto	l3774
  9362                           
  9363                           ;menu.c: 1217: }
  9364                           ;menu.c: 1219: if(arpeggiatorMenu.selector == 0) {Function_H_1();}
  9365  00772C  0100               	movlb	0	; () banked
  9366  00772E  51E1               	movf	(_arpeggiatorMenu+2)& (0+255),w,b
  9367  007730  B4D8               	btfsc	status,2,c
  9368                           
  9369                           ; BSR set to: 0
  9370  007732  EC2D  F038         	call	_Function_H_1	;wreg free
  9371                           
  9372                           ;menu.c: 1220: if(arpeggiatorMenu.selector == 1) {Function_H_2();}
  9373  007736  0100               	movlb	0	; () banked
  9374  007738  05E1               	decf	(_arpeggiatorMenu+2)& (0+255),w,b
  9375  00773A  B4D8               	btfsc	status,2,c
  9376                           
  9377                           ; BSR set to: 0
  9378  00773C  EC16  F047         	call	_Function_H_2	;wreg free
  9379                           
  9380                           ;menu.c: 1221: if(arpeggiatorMenu.selector == 2) {Function_H_3();}
  9381  007740  0E02               	movlw	2
  9382  007742  0100               	movlb	0	; () banked
  9383  007744  19E1               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9384  007746  B4D8               	btfsc	status,2,c
  9385                           
  9386                           ; BSR set to: 0
  9387  007748  EC9C  F048         	call	_Function_H_3	;wreg free
  9388                           
  9389                           ;menu.c: 1222: if(arpeggiatorMenu.selector == 3) {Function_H_4();}
  9390  00774C  0E03               	movlw	3
  9391  00774E  0100               	movlb	0	; () banked
  9392  007750  19E1               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9393  007752  B4D8               	btfsc	status,2,c
  9394                           
  9395                           ; BSR set to: 0
  9396  007754  ECCC  F03B         	call	_Function_H_4	;wreg free
  9397                           
  9398                           ;menu.c: 1223: if(arpeggiatorMenu.selector == 4) {Function_H_5();}
  9399  007758  0E04               	movlw	4
  9400  00775A  0100               	movlb	0	; () banked
  9401  00775C  19E1               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9402  00775E  B4D8               	btfsc	status,2,c
  9403                           
  9404                           ; BSR set to: 0
  9405  007760  EC28  F03D         	call	_Function_H_5	;wreg free
  9406                           
  9407                           ;menu.c: 1224: if(arpeggiatorMenu.selector == 5) {Function_H_6();}
  9408  007764  0E05               	movlw	5
  9409  007766  0100               	movlb	0	; () banked
  9410  007768  19E1               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9411  00776A  B4D8               	btfsc	status,2,c
  9412                           
  9413                           ; BSR set to: 0
  9414  00776C  EC3E  F046         	call	_Function_H_6	;wreg free
  9415                           
  9416                           ;menu.c: 1225: if(arpeggiatorMenu.selector == 6) {Function_H_7();}
  9417  007770  0E06               	movlw	6
  9418  007772  0100               	movlb	0	; () banked
  9419  007774  19E1               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9420  007776  B4D8               	btfsc	status,2,c
  9421                           
  9422                           ; BSR set to: 0
  9423  007778  EC25  F03C         	call	_Function_H_7	;wreg free
  9424                           
  9425                           ;menu.c: 1226: if(arpeggiatorMenu.selector == 7) {Function_H_8();}
  9426  00777C  0E07               	movlw	7
  9427  00777E  0100               	movlb	0	; () banked
  9428  007780  19E1               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9429  007782  B4D8               	btfsc	status,2,c
  9430                           
  9431                           ; BSR set to: 0
  9432  007784  EC07  F046         	call	_Function_H_8	;wreg free
  9433                           
  9434                           ;menu.c: 1227: if(arpeggiatorMenu.selector == 8) {Function_H_9();}
  9435  007788  0E08               	movlw	8
  9436  00778A  0100               	movlb	0	; () banked
  9437  00778C  19E1               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9438  00778E  A4D8               	btfss	status,2,c
  9439  007790  0012               	return	
  9440                           
  9441                           ; BSR set to: 0
  9442  007792  ECF8  F03F         	call	_Function_H_9	;wreg free
  9443  007796  0012               	return	
  9444  007798                     __end_of_Function_H:
  9445                           	opt stack 0
  9446                           tblptru	equ	0xFF8
  9447                           tblptrh	equ	0xFF7
  9448                           tblptrl	equ	0xFF6
  9449                           tablat	equ	0xFF5
  9450                           intcon	equ	0xFF2
  9451                           intcon2	equ	0xFF1
  9452                           postinc0	equ	0xFEE
  9453                           wreg	equ	0xFE8
  9454                           postinc1	equ	0xFE6
  9455                           postdec2	equ	0xFDD
  9456                           fsr2l	equ	0xFD9
  9457                           status	equ	0xFD8
  9458                           
  9459 ;; *************** function _Function_H_9 *****************
  9460 ;; Defined at:
  9461 ;;		line 1829 in file "menu.c"
  9462 ;; Parameters:    Size  Location     Type
  9463 ;;		None
  9464 ;; Auto vars:     Size  Location     Type
  9465 ;;		None
  9466 ;; Return value:  Size  Location     Type
  9467 ;;                  1    wreg      void 
  9468 ;; Registers used:
  9469 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9470 ;; Tracked objects:
  9471 ;;		On entry : 0/0
  9472 ;;		On exit  : 0/0
  9473 ;;		Unchanged: 0/0
  9474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9479 ;;Total ram usage:        0 bytes
  9480 ;; Hardware stack levels used:    1
  9481 ;; Hardware stack levels required when called:   17
  9482 ;; This function calls:
  9483 ;;		_Function_H_9_1
  9484 ;;		_Function_H_9_2
  9485 ;;		_Function_H_9_3
  9486 ;;		_Function_H_9_4
  9487 ;;		_Lcd_Print_String
  9488 ;;		___lbmod
  9489 ;;		___wmul
  9490 ;;		_clear_row1
  9491 ;;		_clear_row2
  9492 ;;		_un_block_code
  9493 ;; This function is called by:
  9494 ;;		_Function_H
  9495 ;; This function uses a non-reentrant model
  9496 ;;
  9497                           
  9498                           	psect	text8
  9499  007FF0                     __ptext8:
  9500                           	opt stack 0
  9501  007FF0                     _Function_H_9:
  9502                           	opt stack 11
  9503                           
  9504                           ;menu.c: 1831: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_MENU,
  9505                           ;menu.c: 1832: lcd_print_once = 0;
  9506                           
  9507                           ;incstack = 0
  9508  007FF0  0E26               	movlw	38
  9509  007FF2  6E4F               	movwf	_which_screen,c
  9510  007FF4  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9511                           
  9512                           ;menu.c: 1833: encoder_click = 0;
  9513  007FF6  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9514                           
  9515                           ;menu.c: 1835: while(encoder_click == 0) {
  9516  007FF8  D02C               	goto	l3937
  9517  007FFA                     
  9518                           ;menu.c: 1839: un_block_code();
  9519  007FFA  ECAD  F04C         	call	_un_block_code	;wreg free
  9520                           
  9521                           ;menu.c: 1841: if (lcd_print_once == 0) {
  9522  007FFE  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9523  008000  D027               	goto	l3939
  9524                           
  9525                           ;menu.c: 1842: clear_row1();
  9526  008002  EC18  F04C         	call	_clear_row1	;wreg free
  9527                           
  9528                           ;menu.c: 1843: Lcd_Print_String("Last Note Mode:");
  9529  008006  0E0D               	movlw	low STR_75
  9530  008008  0100               	movlb	0	; () banked
  9531  00800A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9532  00800C  0EFE               	movlw	high STR_75
  9533  00800E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9534  008010  EC76  F042         	call	_Lcd_Print_String	;wreg free
  9535                           
  9536                           ;menu.c: 1844: clear_row2();
  9537  008014  EC04  F04C         	call	_clear_row2	;wreg free
  9538                           
  9539                           ;menu.c: 1845: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
  9540  008018  0100               	movlb	0	; () banked
  9541  00801A  51DC               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
  9542  00801C  6EE6               	movwf	postinc1,c
  9543  00801E  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9544  008020  6EE6               	movwf	postinc1,c
  9545  008022  EC63  F041         	call	___lbmod	;wreg free
  9546  008026  503F               	movf	btemp,w,c
  9547  008028  0100               	movlb	0	; () banked
  9548  00802A  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
  9549  00802C  6F60               	movwf	___wmul@multiplier& (0+255),b
  9550  00802E  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9551  008030  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9552  008032  0E00               	movlw	0
  9553  008034  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9554  008036  0E11               	movlw	17
  9555  008038  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9556  00803A  EC2C  F04C         	call	___wmul	;wreg free
  9557  00803E  0E9E               	movlw	low _LCD_STRINGS
  9558  008040  0100               	movlb	0	; () banked
  9559  008042  2560               	addwf	?___wmul& (0+255),w,b
  9560  008044  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9561  008046  0EF3               	movlw	high _LCD_STRINGS
  9562  008048  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9563  00804A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9564  00804C  EC76  F042         	call	_Lcd_Print_String	;wreg free
  9565  008050                     l3939:
  9566                           
  9567                           ;menu.c: 1846: }
  9568                           ;menu.c: 1847: lcd_print_once = 1;
  9569  008050  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9570  008052                     l3937:
  9571  008052  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9572  008054  D7D2               	goto	l3938
  9573                           
  9574                           ;menu.c: 1848: }
  9575                           ;menu.c: 1851: if(arpeggiatorLastNoteModeMenu.selector == 0) {Function_H_9_1();}
  9576  008056  0100               	movlb	0	; () banked
  9577  008058  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9578  00805A  B4D8               	btfsc	status,2,c
  9579                           
  9580                           ; BSR set to: 0
  9581  00805C  EC6D  F03E         	call	_Function_H_9_1	;wreg free
  9582                           
  9583                           ;menu.c: 1852: if(arpeggiatorLastNoteModeMenu.selector == 1) {Function_H_9_2();}
  9584  008060  0100               	movlb	0	; () banked
  9585  008062  05DE               	decf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9586  008064  B4D8               	btfsc	status,2,c
  9587                           
  9588                           ; BSR set to: 0
  9589  008066  EC1D  F03E         	call	_Function_H_9_2	;wreg free
  9590                           
  9591                           ;menu.c: 1853: if(arpeggiatorLastNoteModeMenu.selector == 2) {Function_H_9_3();}
  9592  00806A  0E02               	movlw	2
  9593  00806C  0100               	movlb	0	; () banked
  9594  00806E  19DE               	xorwf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9595  008070  B4D8               	btfsc	status,2,c
  9596                           
  9597                           ; BSR set to: 0
  9598  008072  ECCD  F03D         	call	_Function_H_9_3	;wreg free
  9599                           
  9600                           ;menu.c: 1854: if(arpeggiatorLastNoteModeMenu.selector == 3) {Function_H_9_4();}
  9601  008076  0E03               	movlw	3
  9602  008078  0100               	movlb	0	; () banked
  9603  00807A  19DE               	xorwf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9604  00807C  A4D8               	btfss	status,2,c
  9605  00807E  0012               	return	
  9606                           
  9607                           ; BSR set to: 0
  9608  008080  EC7D  F03D         	call	_Function_H_9_4	;wreg free
  9609  008084  0012               	return	
  9610  008086                     __end_of_Function_H_9:
  9611                           	opt stack 0
  9612                           tblptru	equ	0xFF8
  9613                           tblptrh	equ	0xFF7
  9614                           tblptrl	equ	0xFF6
  9615                           tablat	equ	0xFF5
  9616                           intcon	equ	0xFF2
  9617                           intcon2	equ	0xFF1
  9618                           postinc0	equ	0xFEE
  9619                           wreg	equ	0xFE8
  9620                           postinc1	equ	0xFE6
  9621                           postdec2	equ	0xFDD
  9622                           fsr2l	equ	0xFD9
  9623                           status	equ	0xFD8
  9624                           
  9625 ;; *************** function _Function_H_9_4 *****************
  9626 ;; Defined at:
  9627 ;;		line 1800 in file "menu.c"
  9628 ;; Parameters:    Size  Location     Type
  9629 ;;		None
  9630 ;; Auto vars:     Size  Location     Type
  9631 ;;		None
  9632 ;; Return value:  Size  Location     Type
  9633 ;;                  1    wreg      void 
  9634 ;; Registers used:
  9635 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9636 ;; Tracked objects:
  9637 ;;		On entry : 0/0
  9638 ;;		On exit  : 0/0
  9639 ;;		Unchanged: 0/0
  9640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9645 ;;Total ram usage:        0 bytes
  9646 ;; Hardware stack levels used:    1
  9647 ;; Hardware stack levels required when called:   16
  9648 ;; This function calls:
  9649 ;;		_Lcd_Print_String
  9650 ;;		___lbmod
  9651 ;;		___wmul
  9652 ;;		_clear_row1
  9653 ;;		_clear_row2
  9654 ;;		_un_block_code
  9655 ;; This function is called by:
  9656 ;;		_Function_H_9
  9657 ;; This function uses a non-reentrant model
  9658 ;;
  9659                           
  9660                           	psect	text9
  9661  007AFA                     __ptext9:
  9662                           	opt stack 0
  9663  007AFA                     _Function_H_9_4:
  9664                           	opt stack 11
  9665                           
  9666                           ;menu.c: 1802: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_RESET_MENU;
  9667                           
  9668                           ;incstack = 0
  9669  007AFA  0E2A               	movlw	42
  9670  007AFC  6E4F               	movwf	_which_screen,c
  9671                           
  9672                           ;menu.c: 1803: lcd_print_once = 0;
  9673  007AFE  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9674                           
  9675                           ;menu.c: 1804: encoder_click = 0;
  9676  007B00  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9677                           
  9678                           ;menu.c: 1806: arpeggiatorLastNoteModeResetMenu.selector = LAST_NOTE_MODE_RESET;
  9679  007B02  0E00               	movlw	0
  9680  007B04  BC02               	btfsc	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  9681  007B06  0E01               	movlw	1
  9682  007B08  0101               	movlb	1	; () banked
  9683  007B0A  6F0A               	movwf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),b
  9684                           
  9685                           ;menu.c: 1808: while(encoder_click == 0) {
  9686  007B0C  D03D               	goto	l3928
  9687  007B0E                     
  9688                           ;menu.c: 1812: un_block_code();
  9689                           
  9690                           ; BSR set to: 1
  9691  007B0E  ECAD  F04C         	call	_un_block_code	;wreg free
  9692                           
  9693                           ;menu.c: 1814: if (lcd_print_once == 0) {
  9694  007B12  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9695  007B14  D038               	goto	l3932
  9696                           
  9697                           ;menu.c: 1815: clear_row1();
  9698  007B16  EC18  F04C         	call	_clear_row1	;wreg free
  9699                           
  9700                           ;menu.c: 1816: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
  9701  007B1A  0100               	movlb	0	; () banked
  9702  007B1C  51DC               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
  9703  007B1E  6EE6               	movwf	postinc1,c
  9704  007B20  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9705  007B22  6EE6               	movwf	postinc1,c
  9706  007B24  EC63  F041         	call	___lbmod	;wreg free
  9707  007B28  503F               	movf	btemp,w,c
  9708  007B2A  0100               	movlb	0	; () banked
  9709  007B2C  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
  9710  007B2E  6F60               	movwf	___wmul@multiplier& (0+255),b
  9711  007B30  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9712  007B32  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9713  007B34  0E00               	movlw	0
  9714  007B36  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9715  007B38  0E11               	movlw	17
  9716  007B3A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9717  007B3C  EC2C  F04C         	call	___wmul	;wreg free
  9718  007B40  0E9E               	movlw	low _LCD_STRINGS
  9719  007B42  0100               	movlb	0	; () banked
  9720  007B44  2560               	addwf	?___wmul& (0+255),w,b
  9721  007B46  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9722  007B48  0EF3               	movlw	high _LCD_STRINGS
  9723  007B4A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9724  007B4C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9725  007B4E  EC76  F042         	call	_Lcd_Print_String	;wreg free
  9726                           
  9727                           ;menu.c: 1817: if(arpeggiatorLastNoteModeResetMenu.selector == 0) {clear_row2();Lcd_Prin
      +                          t_String("IMMEDIATE");}
  9728  007B52  0101               	movlb	1	; () banked
  9729  007B54  510A               	movf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),w,b
  9730  007B56  A4D8               	btfss	status,2,c
  9731  007B58  D009               	goto	l3931
  9732                           
  9733                           ; BSR set to: 1
  9734  007B5A  EC04  F04C         	call	_clear_row2	;wreg free
  9735  007B5E  0EA9               	movlw	low STR_67
  9736  007B60  0100               	movlb	0	; () banked
  9737  007B62  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9738  007B64  0EFF               	movlw	high STR_67
  9739  007B66  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9740  007B68  EC76  F042         	call	_Lcd_Print_String	;wreg free
  9741  007B6C                     l3931:
  9742                           
  9743                           ;menu.c: 1818: if(arpeggiatorLastNoteModeResetMenu.selector == 1) {clear_row2();Lcd_Prin
      +                          t_String("FINISH LAST");}
  9744  007B6C  0101               	movlb	1	; () banked
  9745  007B6E  050A               	decf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),w,b
  9746  007B70  A4D8               	btfss	status,2,c
  9747  007B72  D009               	goto	l3932
  9748                           
  9749                           ; BSR set to: 1
  9750  007B74  EC04  F04C         	call	_clear_row2	;wreg free
  9751  007B78  0E7C               	movlw	low STR_68
  9752  007B7A  0100               	movlb	0	; () banked
  9753  007B7C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9754  007B7E  0EFF               	movlw	high STR_68
  9755  007B80  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9756  007B82  EC76  F042         	call	_Lcd_Print_String	;wreg free
  9757  007B86                     l3932:
  9758                           
  9759                           ;menu.c: 1819: }
  9760                           ;menu.c: 1820: lcd_print_once = 1;
  9761  007B86  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9762  007B88                     l3928:
  9763  007B88  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9764  007B8A  D7C1               	goto	l3929
  9765                           
  9766                           ;menu.c: 1821: }
  9767                           ;menu.c: 1823: LAST_NOTE_MODE_RESET = arpeggiatorLastNoteModeResetMenu.selector;
  9768  007B8C  0101               	movlb	1	; () banked
  9769  007B8E  A10A               	btfss	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),0,b
  9770  007B90  D002               	goto	u58070
  9771  007B92  8C02               	bsf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  9772  007B94  0012               	return	
  9773  007B96                     u58070:
  9774  007B96  9C02               	bcf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  9775  007B98  0012               	return		;funcret
  9776  007B9A                     __end_of_Function_H_9_4:
  9777                           	opt stack 0
  9778                           tblptru	equ	0xFF8
  9779                           tblptrh	equ	0xFF7
  9780                           tblptrl	equ	0xFF6
  9781                           tablat	equ	0xFF5
  9782                           intcon	equ	0xFF2
  9783                           intcon2	equ	0xFF1
  9784                           postinc0	equ	0xFEE
  9785                           wreg	equ	0xFE8
  9786                           postinc1	equ	0xFE6
  9787                           postdec2	equ	0xFDD
  9788                           fsr2l	equ	0xFD9
  9789                           status	equ	0xFD8
  9790                           
  9791 ;; *************** function _Function_H_9_3 *****************
  9792 ;; Defined at:
  9793 ;;		line 1772 in file "menu.c"
  9794 ;; Parameters:    Size  Location     Type
  9795 ;;		None
  9796 ;; Auto vars:     Size  Location     Type
  9797 ;;		None
  9798 ;; Return value:  Size  Location     Type
  9799 ;;                  1    wreg      void 
  9800 ;; Registers used:
  9801 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9802 ;; Tracked objects:
  9803 ;;		On entry : 0/0
  9804 ;;		On exit  : 0/0
  9805 ;;		Unchanged: 0/0
  9806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9811 ;;Total ram usage:        0 bytes
  9812 ;; Hardware stack levels used:    1
  9813 ;; Hardware stack levels required when called:   16
  9814 ;; This function calls:
  9815 ;;		_Lcd_Print_String
  9816 ;;		___lbmod
  9817 ;;		___wmul
  9818 ;;		_clear_row1
  9819 ;;		_clear_row2
  9820 ;;		_un_block_code
  9821 ;; This function is called by:
  9822 ;;		_Function_H_9
  9823 ;; This function uses a non-reentrant model
  9824 ;;
  9825                           
  9826                           	psect	text10
  9827  007B9A                     __ptext10:
  9828                           	opt stack 0
  9829  007B9A                     _Function_H_9_3:
  9830                           	opt stack 11
  9831                           
  9832                           ;menu.c: 1774: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU;
  9833                           
  9834                           ;incstack = 0
  9835  007B9A  0E29               	movlw	41
  9836  007B9C  6E4F               	movwf	_which_screen,c
  9837                           
  9838                           ;menu.c: 1775: lcd_print_once = 0;
  9839  007B9E  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9840                           
  9841                           ;menu.c: 1776: encoder_click = 0;
  9842  007BA0  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9843                           
  9844                           ;menu.c: 1778: arpeggiatorLastNoteModeTransposeMenu.selector = LAST_NOTE_MODE_TRANSPOSE;
  9845  007BA2  0E00               	movlw	0
  9846  007BA4  BE02               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
  9847  007BA6  0E01               	movlw	1
  9848  007BA8  0101               	movlb	1	; () banked
  9849  007BAA  6F0D               	movwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),b
  9850                           
  9851                           ;menu.c: 1780: while(encoder_click == 0) {
  9852  007BAC  D03D               	goto	l3919
  9853  007BAE                     
  9854                           ;menu.c: 1784: un_block_code();
  9855                           
  9856                           ; BSR set to: 1
  9857  007BAE  ECAD  F04C         	call	_un_block_code	;wreg free
  9858                           
  9859                           ;menu.c: 1786: if (lcd_print_once == 0) {
  9860  007BB2  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9861  007BB4  D038               	goto	l3923
  9862                           
  9863                           ;menu.c: 1787: clear_row1();
  9864  007BB6  EC18  F04C         	call	_clear_row1	;wreg free
  9865                           
  9866                           ;menu.c: 1788: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
  9867  007BBA  0100               	movlb	0	; () banked
  9868  007BBC  51DC               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
  9869  007BBE  6EE6               	movwf	postinc1,c
  9870  007BC0  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9871  007BC2  6EE6               	movwf	postinc1,c
  9872  007BC4  EC63  F041         	call	___lbmod	;wreg free
  9873  007BC8  503F               	movf	btemp,w,c
  9874  007BCA  0100               	movlb	0	; () banked
  9875  007BCC  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
  9876  007BCE  6F60               	movwf	___wmul@multiplier& (0+255),b
  9877  007BD0  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9878  007BD2  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9879  007BD4  0E00               	movlw	0
  9880  007BD6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9881  007BD8  0E11               	movlw	17
  9882  007BDA  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9883  007BDC  EC2C  F04C         	call	___wmul	;wreg free
  9884  007BE0  0E9E               	movlw	low _LCD_STRINGS
  9885  007BE2  0100               	movlb	0	; () banked
  9886  007BE4  2560               	addwf	?___wmul& (0+255),w,b
  9887  007BE6  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9888  007BE8  0EF3               	movlw	high _LCD_STRINGS
  9889  007BEA  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9890  007BEC  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9891  007BEE  EC76  F042         	call	_Lcd_Print_String	;wreg free
  9892                           
  9893                           ;menu.c: 1789: if(arpeggiatorLastNoteModeTransposeMenu.selector == 0) {clear_row2();Lcd_
      +                          Print_String("IMMEDIATE");}
  9894  007BF2  0101               	movlb	1	; () banked
  9895  007BF4  510D               	movf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),w,b
  9896  007BF6  A4D8               	btfss	status,2,c
  9897  007BF8  D009               	goto	l3922
  9898                           
  9899                           ; BSR set to: 1
  9900  007BFA  EC04  F04C         	call	_clear_row2	;wreg free
  9901  007BFE  0EA9               	movlw	low STR_67
  9902  007C00  0100               	movlb	0	; () banked
  9903  007C02  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9904  007C04  0EFF               	movlw	high STR_67
  9905  007C06  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9906  007C08  EC76  F042         	call	_Lcd_Print_String	;wreg free
  9907  007C0C                     l3922:
  9908                           
  9909                           ;menu.c: 1790: if(arpeggiatorLastNoteModeTransposeMenu.selector == 1) {clear_row2();Lcd_
      +                          Print_String("FINISH LAST");}
  9910  007C0C  0101               	movlb	1	; () banked
  9911  007C0E  050D               	decf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),w,b
  9912  007C10  A4D8               	btfss	status,2,c
  9913  007C12  D009               	goto	l3923
  9914                           
  9915                           ; BSR set to: 1
  9916  007C14  EC04  F04C         	call	_clear_row2	;wreg free
  9917  007C18  0E7C               	movlw	low STR_68
  9918  007C1A  0100               	movlb	0	; () banked
  9919  007C1C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9920  007C1E  0EFF               	movlw	high STR_68
  9921  007C20  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9922  007C22  EC76  F042         	call	_Lcd_Print_String	;wreg free
  9923  007C26                     l3923:
  9924                           
  9925                           ;menu.c: 1791: }
  9926                           ;menu.c: 1792: lcd_print_once = 1;
  9927  007C26  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9928  007C28                     l3919:
  9929  007C28  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9930  007C2A  D7C1               	goto	l3920
  9931                           
  9932                           ;menu.c: 1793: }
  9933                           ;menu.c: 1795: LAST_NOTE_MODE_TRANSPOSE = arpeggiatorLastNoteModeTransposeMenu.selector;
  9934  007C2C  0101               	movlb	1	; () banked
  9935  007C2E  A10D               	btfss	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),0,b
  9936  007C30  D002               	goto	u58010
  9937  007C32  8E02               	bsf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
  9938  007C34  0012               	return	
  9939  007C36                     u58010:
  9940  007C36  9E02               	bcf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
  9941  007C38  0012               	return		;funcret
  9942  007C3A                     __end_of_Function_H_9_3:
  9943                           	opt stack 0
  9944                           tblptru	equ	0xFF8
  9945                           tblptrh	equ	0xFF7
  9946                           tblptrl	equ	0xFF6
  9947                           tablat	equ	0xFF5
  9948                           intcon	equ	0xFF2
  9949                           intcon2	equ	0xFF1
  9950                           postinc0	equ	0xFEE
  9951                           wreg	equ	0xFE8
  9952                           postinc1	equ	0xFE6
  9953                           postdec2	equ	0xFDD
  9954                           fsr2l	equ	0xFD9
  9955                           status	equ	0xFD8
  9956                           
  9957 ;; *************** function _Function_H_9_2 *****************
  9958 ;; Defined at:
  9959 ;;		line 1745 in file "menu.c"
  9960 ;; Parameters:    Size  Location     Type
  9961 ;;		None
  9962 ;; Auto vars:     Size  Location     Type
  9963 ;;		None
  9964 ;; Return value:  Size  Location     Type
  9965 ;;                  1    wreg      void 
  9966 ;; Registers used:
  9967 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9968 ;; Tracked objects:
  9969 ;;		On entry : 0/0
  9970 ;;		On exit  : 0/0
  9971 ;;		Unchanged: 0/0
  9972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9977 ;;Total ram usage:        0 bytes
  9978 ;; Hardware stack levels used:    1
  9979 ;; Hardware stack levels required when called:   16
  9980 ;; This function calls:
  9981 ;;		_Lcd_Print_String
  9982 ;;		___lbmod
  9983 ;;		___wmul
  9984 ;;		_clear_row1
  9985 ;;		_clear_row2
  9986 ;;		_un_block_code
  9987 ;; This function is called by:
  9988 ;;		_Function_H_9
  9989 ;; This function uses a non-reentrant model
  9990 ;;
  9991                           
  9992                           	psect	text11
  9993  007C3A                     __ptext11:
  9994                           	opt stack 0
  9995  007C3A                     _Function_H_9_2:
  9996                           	opt stack 11
  9997                           
  9998                           ;menu.c: 1747: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_KEY_RELEASE_MENU;
  9999                           
 10000                           ;incstack = 0
 10001  007C3A  0E28               	movlw	40
 10002  007C3C  6E4F               	movwf	_which_screen,c
 10003                           
 10004                           ;menu.c: 1748: lcd_print_once = 0;
 10005  007C3E  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10006                           
 10007                           ;menu.c: 1749: encoder_click = 0;
 10008  007C40  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10009                           
 10010                           ;menu.c: 1751: arpeggiatorLastNoteModeKeyReleaseMenu.selector = LAST_NOTE_MODE_KEY_RELEA
      +                          SE;
 10011  007C42  0E00               	movlw	0
 10012  007C44  B003               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 10013  007C46  0E01               	movlw	1
 10014  007C48  0101               	movlb	1	; () banked
 10015  007C4A  6F10               	movwf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),b
 10016                           
 10017                           ;menu.c: 1753: while(encoder_click == 0) {
 10018  007C4C  D03D               	goto	l3910
 10019  007C4E                     
 10020                           ;menu.c: 1757: un_block_code();
 10021                           
 10022                           ; BSR set to: 1
 10023  007C4E  ECAD  F04C         	call	_un_block_code	;wreg free
 10024                           
 10025                           ;menu.c: 1759: if (lcd_print_once == 0) {
 10026  007C52  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10027  007C54  D038               	goto	l3914
 10028                           
 10029                           ;menu.c: 1760: clear_row1();
 10030  007C56  EC18  F04C         	call	_clear_row1	;wreg free
 10031                           
 10032                           ;menu.c: 1761: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
 10033  007C5A  0100               	movlb	0	; () banked
 10034  007C5C  51DC               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
 10035  007C5E  6EE6               	movwf	postinc1,c
 10036  007C60  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 10037  007C62  6EE6               	movwf	postinc1,c
 10038  007C64  EC63  F041         	call	___lbmod	;wreg free
 10039  007C68  503F               	movf	btemp,w,c
 10040  007C6A  0100               	movlb	0	; () banked
 10041  007C6C  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
 10042  007C6E  6F60               	movwf	___wmul@multiplier& (0+255),b
 10043  007C70  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 10044  007C72  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10045  007C74  0E00               	movlw	0
 10046  007C76  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10047  007C78  0E11               	movlw	17
 10048  007C7A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10049  007C7C  EC2C  F04C         	call	___wmul	;wreg free
 10050  007C80  0E9E               	movlw	low _LCD_STRINGS
 10051  007C82  0100               	movlb	0	; () banked
 10052  007C84  2560               	addwf	?___wmul& (0+255),w,b
 10053  007C86  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10054  007C88  0EF3               	movlw	high _LCD_STRINGS
 10055  007C8A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10056  007C8C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10057  007C8E  EC76  F042         	call	_Lcd_Print_String	;wreg free
 10058                           
 10059                           ;menu.c: 1762: if(arpeggiatorLastNoteModeKeyReleaseMenu.selector == 0) {clear_row2();Lcd
      +                          _Print_String("IMMEDIATE");}
 10060  007C92  0101               	movlb	1	; () banked
 10061  007C94  5110               	movf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),w,b
 10062  007C96  A4D8               	btfss	status,2,c
 10063  007C98  D009               	goto	l3913
 10064                           
 10065                           ; BSR set to: 1
 10066  007C9A  EC04  F04C         	call	_clear_row2	;wreg free
 10067  007C9E  0EA9               	movlw	low STR_67
 10068  007CA0  0100               	movlb	0	; () banked
 10069  007CA2  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10070  007CA4  0EFF               	movlw	high STR_67
 10071  007CA6  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10072  007CA8  EC76  F042         	call	_Lcd_Print_String	;wreg free
 10073  007CAC                     l3913:
 10074                           
 10075                           ;menu.c: 1763: if(arpeggiatorLastNoteModeKeyReleaseMenu.selector == 1) {clear_row2();Lcd
      +                          _Print_String("FINISH LAST");}
 10076  007CAC  0101               	movlb	1	; () banked
 10077  007CAE  0510               	decf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),w,b
 10078  007CB0  A4D8               	btfss	status,2,c
 10079  007CB2  D009               	goto	l3914
 10080                           
 10081                           ; BSR set to: 1
 10082  007CB4  EC04  F04C         	call	_clear_row2	;wreg free
 10083  007CB8  0E7C               	movlw	low STR_68
 10084  007CBA  0100               	movlb	0	; () banked
 10085  007CBC  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10086  007CBE  0EFF               	movlw	high STR_68
 10087  007CC0  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10088  007CC2  EC76  F042         	call	_Lcd_Print_String	;wreg free
 10089  007CC6                     l3914:
 10090                           
 10091                           ;menu.c: 1764: }
 10092                           ;menu.c: 1765: lcd_print_once = 1;
 10093  007CC6  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10094  007CC8                     l3910:
 10095  007CC8  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10096  007CCA  D7C1               	goto	l3911
 10097                           
 10098                           ;menu.c: 1766: }
 10099                           ;menu.c: 1768: LAST_NOTE_MODE_KEY_RELEASE = arpeggiatorLastNoteModeKeyReleaseMenu.select
      +                          or;
 10100  007CCC  0101               	movlb	1	; () banked
 10101  007CCE  A110               	btfss	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),0,b
 10102  007CD0  D002               	goto	u57950
 10103  007CD2  8003               	bsf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 10104  007CD4  0012               	return	
 10105  007CD6                     u57950:
 10106  007CD6  9003               	bcf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 10107  007CD8  0012               	return		;funcret
 10108  007CDA                     __end_of_Function_H_9_2:
 10109                           	opt stack 0
 10110                           tblptru	equ	0xFF8
 10111                           tblptrh	equ	0xFF7
 10112                           tblptrl	equ	0xFF6
 10113                           tablat	equ	0xFF5
 10114                           intcon	equ	0xFF2
 10115                           intcon2	equ	0xFF1
 10116                           postinc0	equ	0xFEE
 10117                           wreg	equ	0xFE8
 10118                           postinc1	equ	0xFE6
 10119                           postdec2	equ	0xFDD
 10120                           fsr2l	equ	0xFD9
 10121                           status	equ	0xFD8
 10122                           
 10123 ;; *************** function _Function_H_9_1 *****************
 10124 ;; Defined at:
 10125 ;;		line 1718 in file "menu.c"
 10126 ;; Parameters:    Size  Location     Type
 10127 ;;		None
 10128 ;; Auto vars:     Size  Location     Type
 10129 ;;		None
 10130 ;; Return value:  Size  Location     Type
 10131 ;;                  1    wreg      void 
 10132 ;; Registers used:
 10133 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10134 ;; Tracked objects:
 10135 ;;		On entry : 0/0
 10136 ;;		On exit  : 0/0
 10137 ;;		Unchanged: 0/0
 10138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10143 ;;Total ram usage:        0 bytes
 10144 ;; Hardware stack levels used:    1
 10145 ;; Hardware stack levels required when called:   16
 10146 ;; This function calls:
 10147 ;;		_Lcd_Print_String
 10148 ;;		___lbmod
 10149 ;;		___wmul
 10150 ;;		_clear_row1
 10151 ;;		_clear_row2
 10152 ;;		_un_block_code
 10153 ;; This function is called by:
 10154 ;;		_Function_H_9
 10155 ;; This function uses a non-reentrant model
 10156 ;;
 10157                           
 10158                           	psect	text12
 10159  007CDA                     __ptext12:
 10160                           	opt stack 0
 10161  007CDA                     _Function_H_9_1:
 10162                           	opt stack 11
 10163                           
 10164                           ;menu.c: 1720: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_KEY_PRESS_MENU;
 10165                           
 10166                           ;incstack = 0
 10167  007CDA  0E27               	movlw	39
 10168  007CDC  6E4F               	movwf	_which_screen,c
 10169                           
 10170                           ;menu.c: 1721: lcd_print_once = 0;
 10171  007CDE  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10172                           
 10173                           ;menu.c: 1722: encoder_click = 0;
 10174  007CE0  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10175                           
 10176                           ;menu.c: 1724: arpeggiatorLastNoteModeKeyPressMenu.selector = LAST_NOTE_MODE_KEY_PRESS;
 10177  007CE2  0E00               	movlw	0
 10178  007CE4  B203               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 10179  007CE6  0E01               	movlw	1
 10180  007CE8  0101               	movlb	1	; () banked
 10181  007CEA  6F13               	movwf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),b
 10182                           
 10183                           ;menu.c: 1726: while(encoder_click == 0) {
 10184  007CEC  D03D               	goto	l3901
 10185  007CEE                     
 10186                           ;menu.c: 1730: un_block_code();
 10187                           
 10188                           ; BSR set to: 1
 10189  007CEE  ECAD  F04C         	call	_un_block_code	;wreg free
 10190                           
 10191                           ;menu.c: 1732: if (lcd_print_once == 0) {
 10192  007CF2  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10193  007CF4  D038               	goto	l3905
 10194                           
 10195                           ;menu.c: 1733: clear_row1();
 10196  007CF6  EC18  F04C         	call	_clear_row1	;wreg free
 10197                           
 10198                           ;menu.c: 1734: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
 10199  007CFA  0100               	movlb	0	; () banked
 10200  007CFC  51DC               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
 10201  007CFE  6EE6               	movwf	postinc1,c
 10202  007D00  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 10203  007D02  6EE6               	movwf	postinc1,c
 10204  007D04  EC63  F041         	call	___lbmod	;wreg free
 10205  007D08  503F               	movf	btemp,w,c
 10206  007D0A  0100               	movlb	0	; () banked
 10207  007D0C  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
 10208  007D0E  6F60               	movwf	___wmul@multiplier& (0+255),b
 10209  007D10  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 10210  007D12  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10211  007D14  0E00               	movlw	0
 10212  007D16  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10213  007D18  0E11               	movlw	17
 10214  007D1A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10215  007D1C  EC2C  F04C         	call	___wmul	;wreg free
 10216  007D20  0E9E               	movlw	low _LCD_STRINGS
 10217  007D22  0100               	movlb	0	; () banked
 10218  007D24  2560               	addwf	?___wmul& (0+255),w,b
 10219  007D26  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10220  007D28  0EF3               	movlw	high _LCD_STRINGS
 10221  007D2A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10222  007D2C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10223  007D2E  EC76  F042         	call	_Lcd_Print_String	;wreg free
 10224                           
 10225                           ;menu.c: 1735: if(arpeggiatorLastNoteModeKeyPressMenu.selector == 0) {clear_row2();Lcd_P
      +                          rint_String("IMMEDIATE");}
 10226  007D32  0101               	movlb	1	; () banked
 10227  007D34  5113               	movf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),w,b
 10228  007D36  A4D8               	btfss	status,2,c
 10229  007D38  D009               	goto	l3904
 10230                           
 10231                           ; BSR set to: 1
 10232  007D3A  EC04  F04C         	call	_clear_row2	;wreg free
 10233  007D3E  0EA9               	movlw	low STR_67
 10234  007D40  0100               	movlb	0	; () banked
 10235  007D42  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10236  007D44  0EFF               	movlw	high STR_67
 10237  007D46  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10238  007D48  EC76  F042         	call	_Lcd_Print_String	;wreg free
 10239  007D4C                     l3904:
 10240                           
 10241                           ;menu.c: 1736: if(arpeggiatorLastNoteModeKeyPressMenu.selector == 1) {clear_row2();Lcd_P
      +                          rint_String("FINISH LAST");}
 10242  007D4C  0101               	movlb	1	; () banked
 10243  007D4E  0513               	decf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),w,b
 10244  007D50  A4D8               	btfss	status,2,c
 10245  007D52  D009               	goto	l3905
 10246                           
 10247                           ; BSR set to: 1
 10248  007D54  EC04  F04C         	call	_clear_row2	;wreg free
 10249  007D58  0E7C               	movlw	low STR_68
 10250  007D5A  0100               	movlb	0	; () banked
 10251  007D5C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10252  007D5E  0EFF               	movlw	high STR_68
 10253  007D60  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10254  007D62  EC76  F042         	call	_Lcd_Print_String	;wreg free
 10255  007D66                     l3905:
 10256                           
 10257                           ;menu.c: 1737: }
 10258                           ;menu.c: 1738: lcd_print_once = 1;
 10259  007D66  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10260  007D68                     l3901:
 10261  007D68  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10262  007D6A  D7C1               	goto	l3902
 10263                           
 10264                           ;menu.c: 1739: }
 10265                           ;menu.c: 1741: LAST_NOTE_MODE_KEY_PRESS = arpeggiatorLastNoteModeKeyPressMenu.selector;
 10266  007D6C  0101               	movlb	1	; () banked
 10267  007D6E  A113               	btfss	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),0,b
 10268  007D70  D002               	goto	u57890
 10269  007D72  8203               	bsf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 10270  007D74  0012               	return	
 10271  007D76                     u57890:
 10272  007D76  9203               	bcf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 10273  007D78  0012               	return		;funcret
 10274  007D7A                     __end_of_Function_H_9_1:
 10275                           	opt stack 0
 10276                           tblptru	equ	0xFF8
 10277                           tblptrh	equ	0xFF7
 10278                           tblptrl	equ	0xFF6
 10279                           tablat	equ	0xFF5
 10280                           intcon	equ	0xFF2
 10281                           intcon2	equ	0xFF1
 10282                           postinc0	equ	0xFEE
 10283                           wreg	equ	0xFE8
 10284                           postinc1	equ	0xFE6
 10285                           postdec2	equ	0xFDD
 10286                           fsr2l	equ	0xFD9
 10287                           status	equ	0xFD8
 10288                           
 10289 ;; *************** function _Function_H_8 *****************
 10290 ;; Defined at:
 10291 ;;		line 1692 in file "menu.c"
 10292 ;; Parameters:    Size  Location     Type
 10293 ;;		None
 10294 ;; Auto vars:     Size  Location     Type
 10295 ;;		None
 10296 ;; Return value:  Size  Location     Type
 10297 ;;                  1    wreg      void 
 10298 ;; Registers used:
 10299 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10300 ;; Tracked objects:
 10301 ;;		On entry : 0/0
 10302 ;;		On exit  : 0/0
 10303 ;;		Unchanged: 0/0
 10304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10309 ;;Total ram usage:        0 bytes
 10310 ;; Hardware stack levels used:    1
 10311 ;; Hardware stack levels required when called:   17
 10312 ;; This function calls:
 10313 ;;		_Function_H_8_1
 10314 ;;		_Function_H_8_2
 10315 ;;		_Lcd_Print_String
 10316 ;;		___lbmod
 10317 ;;		___wmul
 10318 ;;		_clear_row2
 10319 ;;		_un_block_code
 10320 ;; This function is called by:
 10321 ;;		_Function_H
 10322 ;; This function uses a non-reentrant model
 10323 ;;
 10324                           
 10325                           	psect	text13
 10326  008C0E                     __ptext13:
 10327                           	opt stack 0
 10328  008C0E                     _Function_H_8:
 10329                           	opt stack 11
 10330                           
 10331                           ;menu.c: 1694: which_screen = ARPEGGIATOR_RANDOMIZE_SKIP_MENU;
 10332                           
 10333                           ;incstack = 0
 10334  008C0E  0E23               	movlw	35
 10335  008C10  6E4F               	movwf	_which_screen,c
 10336                           
 10337                           ;menu.c: 1695: lcd_print_once = 0;
 10338  008C12  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10339                           
 10340                           ;menu.c: 1696: encoder_click = 0;
 10341  008C14  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10342                           
 10343                           ;menu.c: 1698: while(encoder_click == 0) {
 10344  008C16  D024               	goto	l3892
 10345  008C18                     
 10346                           ;menu.c: 1702: un_block_code();
 10347  008C18  ECAD  F04C         	call	_un_block_code	;wreg free
 10348                           
 10349                           ;menu.c: 1704: if (lcd_print_once == 0) {
 10350  008C1C  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10351  008C1E  D01F               	goto	l3894
 10352                           
 10353                           ;menu.c: 1705: clear_row2();
 10354  008C20  EC04  F04C         	call	_clear_row2	;wreg free
 10355                           
 10356                           ;menu.c: 1706: Lcd_Print_String(LCD_STRINGS[(arpeggiatorRandomizeSkipMenu.selector % arp
      +                          eggiatorRandomizeSkipMenu.number) + arpeggiatorRandomizeSkipMenu.address]);
 10357  008C24  0101               	movlb	1	; () banked
 10358  008C26  511A               	movf	_arpeggiatorRandomizeSkipMenu& (0+255),w,b
 10359  008C28  6EE6               	movwf	postinc1,c
 10360  008C2A  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 10361  008C2C  6EE6               	movwf	postinc1,c
 10362  008C2E  EC63  F041         	call	___lbmod	;wreg free
 10363  008C32  503F               	movf	btemp,w,c
 10364  008C34  0101               	movlb	1	; () banked
 10365  008C36  251B               	addwf	(_arpeggiatorRandomizeSkipMenu+1)& (0+255),w,b
 10366  008C38  0100               	movlb	0	; () banked
 10367  008C3A  6F60               	movwf	___wmul@multiplier& (0+255),b
 10368  008C3C  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 10369  008C3E  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10370  008C40  0E00               	movlw	0
 10371  008C42  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10372  008C44  0E11               	movlw	17
 10373  008C46  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10374  008C48  EC2C  F04C         	call	___wmul	;wreg free
 10375  008C4C  0E9E               	movlw	low _LCD_STRINGS
 10376  008C4E  0100               	movlb	0	; () banked
 10377  008C50  2560               	addwf	?___wmul& (0+255),w,b
 10378  008C52  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10379  008C54  0EF3               	movlw	high _LCD_STRINGS
 10380  008C56  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10381  008C58  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10382  008C5A  EC76  F042         	call	_Lcd_Print_String	;wreg free
 10383  008C5E                     l3894:
 10384                           
 10385                           ;menu.c: 1707: }
 10386                           ;menu.c: 1708: lcd_print_once = 1;
 10387  008C5E  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10388  008C60                     l3892:
 10389  008C60  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10390  008C62  D7DA               	goto	l3893
 10391                           
 10392                           ;menu.c: 1709: }
 10393                           ;menu.c: 1712: if(arpeggiatorRandomizeSkipMenu.selector == 0) {Function_H_8_1();}
 10394  008C64  0101               	movlb	1	; () banked
 10395  008C66  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 10396  008C68  B4D8               	btfsc	status,2,c
 10397                           
 10398                           ; BSR set to: 1
 10399  008C6A  ECAB  F044         	call	_Function_H_8_1	;wreg free
 10400                           
 10401                           ;menu.c: 1713: if(arpeggiatorRandomizeSkipMenu.selector == 1) {Function_H_8_2();}
 10402  008C6E  0101               	movlb	1	; () banked
 10403  008C70  051C               	decf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 10404  008C72  A4D8               	btfss	status,2,c
 10405  008C74  0012               	return	
 10406                           
 10407                           ; BSR set to: 1
 10408  008C76  EC7C  F047         	call	_Function_H_8_2	;wreg free
 10409  008C7A  0012               	return	
 10410  008C7C                     __end_of_Function_H_8:
 10411                           	opt stack 0
 10412                           tblptru	equ	0xFF8
 10413                           tblptrh	equ	0xFF7
 10414                           tblptrl	equ	0xFF6
 10415                           tablat	equ	0xFF5
 10416                           intcon	equ	0xFF2
 10417                           intcon2	equ	0xFF1
 10418                           postinc0	equ	0xFEE
 10419                           wreg	equ	0xFE8
 10420                           postinc1	equ	0xFE6
 10421                           postdec2	equ	0xFDD
 10422                           fsr2l	equ	0xFD9
 10423                           status	equ	0xFD8
 10424                           
 10425 ;; *************** function _Function_H_8_2 *****************
 10426 ;; Defined at:
 10427 ;;		line 1666 in file "menu.c"
 10428 ;; Parameters:    Size  Location     Type
 10429 ;;		None
 10430 ;; Auto vars:     Size  Location     Type
 10431 ;;		None
 10432 ;; Return value:  Size  Location     Type
 10433 ;;                  1    wreg      void 
 10434 ;; Registers used:
 10435 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10436 ;; Tracked objects:
 10437 ;;		On entry : 0/0
 10438 ;;		On exit  : 0/0
 10439 ;;		Unchanged: 0/0
 10440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10445 ;;Total ram usage:        0 bytes
 10446 ;; Hardware stack levels used:    1
 10447 ;; Hardware stack levels required when called:   16
 10448 ;; This function calls:
 10449 ;;		_Lcd_Print_String
 10450 ;;		_clear_row2
 10451 ;;		_un_block_code
 10452 ;; This function is called by:
 10453 ;;		_Function_H_8
 10454 ;; This function uses a non-reentrant model
 10455 ;;
 10456                           
 10457                           	psect	text14
 10458  008EF8                     __ptext14:
 10459                           	opt stack 0
 10460  008EF8                     _Function_H_8_2:
 10461                           	opt stack 11
 10462                           
 10463                           ;menu.c: 1668: which_screen = ARPEGGIATOR_SKIP_FIRST_LAST_MENU;
 10464                           
 10465                           ;incstack = 0
 10466  008EF8  0E25               	movlw	37
 10467  008EFA  6E4F               	movwf	_which_screen,c
 10468                           
 10469                           ;menu.c: 1669: lcd_print_once = 0;
 10470  008EFC  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10471                           
 10472                           ;menu.c: 1670: encoder_click = 0;
 10473  008EFE  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10474                           
 10475                           ;menu.c: 1672: arpeggiatorSkipFirstLastMenu.selector = skipFirstLast;
 10476  008F00  0E00               	movlw	0
 10477  008F02  B603               	btfsc	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 10478  008F04  0E01               	movlw	1
 10479  008F06  0101               	movlb	1	; () banked
 10480  008F08  6F16               	movwf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),b
 10481                           
 10482                           ;menu.c: 1674: while(encoder_click == 0) {
 10483  008F0A  D01F               	goto	l3883
 10484  008F0C                     
 10485                           ;menu.c: 1678: un_block_code();
 10486                           
 10487                           ; BSR set to: 1
 10488  008F0C  ECAD  F04C         	call	_un_block_code	;wreg free
 10489                           
 10490                           ;menu.c: 1680: if (lcd_print_once == 0) {
 10491  008F10  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10492  008F12  D01A               	goto	l3887
 10493                           
 10494                           ;menu.c: 1681: if(arpeggiatorSkipFirstLastMenu.selector == 0) {clear_row2();Lcd_Print_St
      +                          ring("Skip F/L OFF");}
 10495  008F14  0101               	movlb	1	; () banked
 10496  008F16  5116               	movf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),w,b
 10497  008F18  A4D8               	btfss	status,2,c
 10498  008F1A  D009               	goto	l3886
 10499                           
 10500                           ; BSR set to: 1
 10501  008F1C  EC04  F04C         	call	_clear_row2	;wreg free
 10502  008F20  0E3F               	movlw	low STR_65
 10503  008F22  0100               	movlb	0	; () banked
 10504  008F24  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10505  008F26  0EFF               	movlw	high STR_65
 10506  008F28  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10507  008F2A  EC76  F042         	call	_Lcd_Print_String	;wreg free
 10508  008F2E                     l3886:
 10509                           
 10510                           ;menu.c: 1682: if(arpeggiatorSkipFirstLastMenu.selector == 1) {clear_row2();Lcd_Print_St
      +                          ring("Skip F/L ON");}
 10511  008F2E  0101               	movlb	1	; () banked
 10512  008F30  0516               	decf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),w,b
 10513  008F32  A4D8               	btfss	status,2,c
 10514  008F34  D009               	goto	l3887
 10515                           
 10516                           ; BSR set to: 1
 10517  008F36  EC04  F04C         	call	_clear_row2	;wreg free
 10518  008F3A  0E70               	movlw	low STR_66
 10519  008F3C  0100               	movlb	0	; () banked
 10520  008F3E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10521  008F40  0EFF               	movlw	high STR_66
 10522  008F42  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10523  008F44  EC76  F042         	call	_Lcd_Print_String	;wreg free
 10524  008F48                     l3887:
 10525                           
 10526                           ;menu.c: 1683: }
 10527                           ;menu.c: 1684: lcd_print_once = 1;
 10528  008F48  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10529  008F4A                     l3883:
 10530  008F4A  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10531  008F4C  D7DF               	goto	l3884
 10532                           
 10533                           ;menu.c: 1685: }
 10534                           ;menu.c: 1687: skipFirstLast = arpeggiatorSkipFirstLastMenu.selector;
 10535  008F4E  0101               	movlb	1	; () banked
 10536  008F50  A116               	btfss	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),0,b
 10537  008F52  D002               	goto	u57830
 10538  008F54  8603               	bsf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 10539  008F56  0012               	return	
 10540  008F58                     u57830:
 10541  008F58  9603               	bcf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 10542  008F5A  0012               	return		;funcret
 10543  008F5C                     __end_of_Function_H_8_2:
 10544                           	opt stack 0
 10545                           tblptru	equ	0xFF8
 10546                           tblptrh	equ	0xFF7
 10547                           tblptrl	equ	0xFF6
 10548                           tablat	equ	0xFF5
 10549                           intcon	equ	0xFF2
 10550                           intcon2	equ	0xFF1
 10551                           postinc0	equ	0xFEE
 10552                           wreg	equ	0xFE8
 10553                           postinc1	equ	0xFE6
 10554                           postdec2	equ	0xFDD
 10555                           fsr2l	equ	0xFD9
 10556                           status	equ	0xFD8
 10557                           
 10558 ;; *************** function _Function_H_8_1 *****************
 10559 ;; Defined at:
 10560 ;;		line 1636 in file "menu.c"
 10561 ;; Parameters:    Size  Location     Type
 10562 ;;		None
 10563 ;; Auto vars:     Size  Location     Type
 10564 ;;		None
 10565 ;; Return value:  Size  Location     Type
 10566 ;;                  1    wreg      void 
 10567 ;; Registers used:
 10568 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10569 ;; Tracked objects:
 10570 ;;		On entry : 0/0
 10571 ;;		On exit  : 0/0
 10572 ;;		Unchanged: 0/0
 10573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10578 ;;Total ram usage:        0 bytes
 10579 ;; Hardware stack levels used:    1
 10580 ;; Hardware stack levels required when called:   16
 10581 ;; This function calls:
 10582 ;;		_Lcd_Print_String
 10583 ;;		_clear_row1
 10584 ;;		_clear_row2
 10585 ;;		_un_block_code
 10586 ;; This function is called by:
 10587 ;;		_Function_H_8
 10588 ;; This function uses a non-reentrant model
 10589 ;;
 10590                           
 10591                           	psect	text15
 10592  008956                     __ptext15:
 10593                           	opt stack 0
 10594  008956                     _Function_H_8_1:
 10595                           	opt stack 11
 10596                           
 10597                           ;menu.c: 1638: which_screen = ARPEGGIATOR_RANDOMIZE_TYPE_MENU;
 10598                           
 10599                           ;incstack = 0
 10600  008956  0E24               	movlw	36
 10601  008958  6E4F               	movwf	_which_screen,c
 10602                           
 10603                           ;menu.c: 1639: lcd_print_once = 0;
 10604  00895A  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10605                           
 10606                           ;menu.c: 1640: encoder_click = 0;
 10607  00895C  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10608                           
 10609                           ;menu.c: 1642: arpeggiatorRandomizeTypeMenu.selector = AUTO_RANDOMIZE;
 10610  00895E  0E00               	movlw	0
 10611  008960  B803               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 10612  008962  0E01               	movlw	1
 10613  008964  0101               	movlb	1	; () banked
 10614  008966  6F19               	movwf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),b
 10615                           
 10616                           ;menu.c: 1644: while(encoder_click == 0) {
 10617  008968  D028               	goto	l3874
 10618  00896A                     
 10619                           ;menu.c: 1648: un_block_code();
 10620                           
 10621                           ; BSR set to: 1
 10622  00896A  ECAD  F04C         	call	_un_block_code	;wreg free
 10623                           
 10624                           ;menu.c: 1650: if (lcd_print_once == 0) {
 10625  00896E  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10626  008970  D023               	goto	l3878
 10627                           
 10628                           ;menu.c: 1651: clear_row1();
 10629  008972  EC18  F04C         	call	_clear_row1	;wreg free
 10630                           
 10631                           ;menu.c: 1652: Lcd_Print_String("Randomize Type:");
 10632  008976  0E1D               	movlw	low STR_62
 10633  008978  0100               	movlb	0	; () banked
 10634  00897A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10635  00897C  0EFE               	movlw	high STR_62
 10636  00897E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10637  008980  EC76  F042         	call	_Lcd_Print_String	;wreg free
 10638                           
 10639                           ;menu.c: 1655: if(arpeggiatorRandomizeTypeMenu.selector == 0) {clear_row2();Lcd_Print_St
      +                          ring("RANDOMIZE AUTO");}
 10640  008984  0101               	movlb	1	; () banked
 10641  008986  5119               	movf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),w,b
 10642  008988  A4D8               	btfss	status,2,c
 10643  00898A  D009               	goto	l3877
 10644                           
 10645                           ; BSR set to: 1
 10646  00898C  EC04  F04C         	call	_clear_row2	;wreg free
 10647  008990  0EA7               	movlw	low STR_63
 10648  008992  0100               	movlb	0	; () banked
 10649  008994  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10650  008996  0EFE               	movlw	high STR_63
 10651  008998  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10652  00899A  EC76  F042         	call	_Lcd_Print_String	;wreg free
 10653  00899E                     l3877:
 10654                           
 10655                           ;menu.c: 1656: if(arpeggiatorRandomizeTypeMenu.selector == 1) {clear_row2();Lcd_Print_St
      +                          ring("RANDOMIZE ONCE");}
 10656  00899E  0101               	movlb	1	; () banked
 10657  0089A0  0519               	decf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),w,b
 10658  0089A2  A4D8               	btfss	status,2,c
 10659  0089A4  D009               	goto	l3878
 10660                           
 10661                           ; BSR set to: 1
 10662  0089A6  EC04  F04C         	call	_clear_row2	;wreg free
 10663  0089AA  0E7A               	movlw	low STR_64
 10664  0089AC  0100               	movlb	0	; () banked
 10665  0089AE  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10666  0089B0  0EFE               	movlw	high STR_64
 10667  0089B2  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10668  0089B4  EC76  F042         	call	_Lcd_Print_String	;wreg free
 10669  0089B8                     l3878:
 10670                           
 10671                           ;menu.c: 1657: }
 10672                           ;menu.c: 1658: lcd_print_once = 1;
 10673  0089B8  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10674  0089BA                     l3874:
 10675  0089BA  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10676  0089BC  D7D6               	goto	l3875
 10677                           
 10678                           ;menu.c: 1659: }
 10679                           ;menu.c: 1661: AUTO_RANDOMIZE = arpeggiatorRandomizeTypeMenu.selector;
 10680  0089BE  0101               	movlb	1	; () banked
 10681  0089C0  A119               	btfss	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),0,b
 10682  0089C2  D002               	goto	u57770
 10683  0089C4  8803               	bsf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 10684  0089C6  0012               	return	
 10685  0089C8                     u57770:
 10686  0089C8  9803               	bcf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 10687  0089CA  0012               	return		;funcret
 10688  0089CC                     __end_of_Function_H_8_1:
 10689                           	opt stack 0
 10690                           tblptru	equ	0xFF8
 10691                           tblptrh	equ	0xFF7
 10692                           tblptrl	equ	0xFF6
 10693                           tablat	equ	0xFF5
 10694                           intcon	equ	0xFF2
 10695                           intcon2	equ	0xFF1
 10696                           postinc0	equ	0xFEE
 10697                           wreg	equ	0xFE8
 10698                           postinc1	equ	0xFE6
 10699                           postdec2	equ	0xFDD
 10700                           fsr2l	equ	0xFD9
 10701                           status	equ	0xFD8
 10702                           
 10703 ;; *************** function _Function_H_7 *****************
 10704 ;; Defined at:
 10705 ;;		line 1599 in file "menu.c"
 10706 ;; Parameters:    Size  Location     Type
 10707 ;;		None
 10708 ;; Auto vars:     Size  Location     Type
 10709 ;;		None
 10710 ;; Return value:  Size  Location     Type
 10711 ;;                  1    wreg      void 
 10712 ;; Registers used:
 10713 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10714 ;; Tracked objects:
 10715 ;;		On entry : 0/0
 10716 ;;		On exit  : 0/0
 10717 ;;		Unchanged: 0/0
 10718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10723 ;;Total ram usage:        0 bytes
 10724 ;; Hardware stack levels used:    1
 10725 ;; Hardware stack levels required when called:   16
 10726 ;; This function calls:
 10727 ;;		_Lcd_Print_String
 10728 ;;		_clear_row1
 10729 ;;		_clear_row2
 10730 ;;		_strcpy
 10731 ;;		_un_block_code
 10732 ;; This function is called by:
 10733 ;;		_Function_H
 10734 ;; This function uses a non-reentrant model
 10735 ;;
 10736                           
 10737                           	psect	text16
 10738  00784A                     __ptext16:
 10739                           	opt stack 0
 10740  00784A                     _Function_H_7:
 10741                           	opt stack 12
 10742                           
 10743                           ;menu.c: 1601: which_screen = ARPEGGIATOR_UN_LATCH_MODE_MENU;
 10744                           
 10745                           ;incstack = 0
 10746  00784A  0E22               	movlw	34
 10747  00784C  6E4F               	movwf	_which_screen,c
 10748                           
 10749                           ;menu.c: 1602: lcd_print_once = 0;
 10750  00784E  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10751                           
 10752                           ;menu.c: 1603: encoder_click = 0;
 10753  007850  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10754                           
 10755                           ;menu.c: 1605: arpeggiatorUnLatchModeMenu.selector = UN_LATCH_MODE;
 10756  007852  0E00               	movlw	0
 10757  007854  BE03               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 10758  007856  0E01               	movlw	1
 10759  007858  0101               	movlb	1	; () banked
 10760  00785A  6F1F               	movwf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),b
 10761                           
 10762                           ;menu.c: 1607: while(encoder_click == 0) {
 10763  00785C  D044               	goto	l3865
 10764  00785E                     
 10765                           ;menu.c: 1611: un_block_code();
 10766                           
 10767                           ; BSR set to: 1
 10768  00785E  ECAD  F04C         	call	_un_block_code	;wreg free
 10769                           
 10770                           ;menu.c: 1613: if (lcd_print_once == 0) {
 10771  007862  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10772  007864  D03F               	goto	l3869
 10773                           
 10774                           ;menu.c: 1614: clear_row1();
 10775  007866  EC18  F04C         	call	_clear_row1	;wreg free
 10776                           
 10777                           ;menu.c: 1615: Lcd_Print_String("Un-latch Mode:");
 10778  00786A  0E5C               	movlw	low STR_57
 10779  00786C  0100               	movlb	0	; () banked
 10780  00786E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10781  007870  0EFE               	movlw	high STR_57
 10782  007872  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10783  007874  EC76  F042         	call	_Lcd_Print_String	;wreg free
 10784                           
 10785                           ;menu.c: 1616: clear_row2();
 10786  007878  EC04  F04C         	call	_clear_row2	;wreg free
 10787                           
 10788                           ;menu.c: 1618: if(arpeggiatorUnLatchModeMenu.selector == 0) {
 10789  00787C  0101               	movlb	1	; () banked
 10790  00787E  511F               	movf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),w,b
 10791  007880  A4D8               	btfss	status,2,c
 10792  007882  D016               	goto	l3868
 10793                           
 10794                           ; BSR set to: 1
 10795                           ;menu.c: 1619: clear_row2();Lcd_Print_String("UNLATCH ALL");
 10796  007884  EC04  F04C         	call	_clear_row2	;wreg free
 10797  007888  0E64               	movlw	low STR_58
 10798  00788A  0100               	movlb	0	; () banked
 10799  00788C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10800  00788E  0EFF               	movlw	high STR_58
 10801  007890  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10802  007892  EC76  F042         	call	_Lcd_Print_String	;wreg free
 10803                           
 10804                           ;menu.c: 1620: DISPLAY_MODE = 1;
 10805  007896  0E01               	movlw	1
 10806  007898  0100               	movlb	0	; () banked
 10807  00789A  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 10808                           
 10809                           ; BSR set to: 0
 10810                           ;menu.c: 1621: strcpy(string_to_display, " ALL");
 10811  00789C  0EF8               	movlw	low _string_to_display
 10812  00789E  6F60               	movwf	strcpy@to& (0+255),b
 10813  0078A0  0E01               	movlw	high _string_to_display
 10814  0078A2  6F61               	movwf	(strcpy@to+1)& (0+255),b
 10815  0078A4  0E6B               	movlw	low (STR_58+7)
 10816  0078A6  6F62               	movwf	strcpy@from& (0+255),b
 10817  0078A8  0EFF               	movlw	high (STR_58+7)
 10818  0078AA  6F63               	movwf	(strcpy@from+1)& (0+255),b
 10819  0078AC  EC90  F04B         	call	_strcpy	;wreg free
 10820  0078B0                     l3868:
 10821                           
 10822                           ;menu.c: 1622: }
 10823                           ;menu.c: 1623: if(arpeggiatorUnLatchModeMenu.selector == 1) {
 10824  0078B0  0101               	movlb	1	; () banked
 10825  0078B2  051F               	decf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),w,b
 10826  0078B4  A4D8               	btfss	status,2,c
 10827  0078B6  D016               	goto	l3869
 10828                           
 10829                           ; BSR set to: 1
 10830                           ;menu.c: 1624: clear_row2();Lcd_Print_String("ONE AT A TIME");
 10831  0078B8  EC04  F04C         	call	_clear_row2	;wreg free
 10832  0078BC  0EFC               	movlw	low STR_60
 10833  0078BE  0100               	movlb	0	; () banked
 10834  0078C0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10835  0078C2  0EFE               	movlw	high STR_60
 10836  0078C4  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10837  0078C6  EC76  F042         	call	_Lcd_Print_String	;wreg free
 10838                           
 10839                           ;menu.c: 1625: DISPLAY_MODE = 1;
 10840  0078CA  0E01               	movlw	1
 10841  0078CC  0100               	movlb	0	; () banked
 10842  0078CE  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 10843                           
 10844                           ; BSR set to: 0
 10845                           ;menu.c: 1626: strcpy(string_to_display, " OnE");
 10846  0078D0  0EF8               	movlw	low _string_to_display
 10847  0078D2  6F60               	movwf	strcpy@to& (0+255),b
 10848  0078D4  0E01               	movlw	high _string_to_display
 10849  0078D6  6F61               	movwf	(strcpy@to+1)& (0+255),b
 10850  0078D8  0EC8               	movlw	low STR_61
 10851  0078DA  6F62               	movwf	strcpy@from& (0+255),b
 10852  0078DC  0EFF               	movlw	high STR_61
 10853  0078DE  6F63               	movwf	(strcpy@from+1)& (0+255),b
 10854  0078E0  EC90  F04B         	call	_strcpy	;wreg free
 10855  0078E4                     l3869:
 10856                           
 10857                           ;menu.c: 1627: }
 10858                           ;menu.c: 1628: }
 10859                           ;menu.c: 1629: lcd_print_once = 1;
 10860  0078E4  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10861  0078E6                     l3865:
 10862  0078E6  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10863  0078E8  D7BA               	goto	l3866
 10864                           
 10865                           ;menu.c: 1630: }
 10866                           ;menu.c: 1632: UN_LATCH_MODE = arpeggiatorUnLatchModeMenu.selector;
 10867  0078EA  0101               	movlb	1	; () banked
 10868  0078EC  A11F               	btfss	(_arpeggiatorUnLatchModeMenu+2)& (0+255),0,b
 10869  0078EE  D002               	goto	u59040
 10870  0078F0  8E03               	bsf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 10871  0078F2  0012               	return	
 10872  0078F4                     u59040:
 10873  0078F4  9E03               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 10874  0078F6  0012               	return		;funcret
 10875  0078F8                     __end_of_Function_H_7:
 10876                           	opt stack 0
 10877                           tblptru	equ	0xFF8
 10878                           tblptrh	equ	0xFF7
 10879                           tblptrl	equ	0xFF6
 10880                           tablat	equ	0xFF5
 10881                           intcon	equ	0xFF2
 10882                           intcon2	equ	0xFF1
 10883                           postinc0	equ	0xFEE
 10884                           wreg	equ	0xFE8
 10885                           postinc1	equ	0xFE6
 10886                           postdec2	equ	0xFDD
 10887                           fsr2l	equ	0xFD9
 10888                           status	equ	0xFD8
 10889                           
 10890 ;; *************** function _Function_H_6 *****************
 10891 ;; Defined at:
 10892 ;;		line 1574 in file "menu.c"
 10893 ;; Parameters:    Size  Location     Type
 10894 ;;		None
 10895 ;; Auto vars:     Size  Location     Type
 10896 ;;		None
 10897 ;; Return value:  Size  Location     Type
 10898 ;;                  1    wreg      void 
 10899 ;; Registers used:
 10900 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10901 ;; Tracked objects:
 10902 ;;		On entry : 0/0
 10903 ;;		On exit  : 0/0
 10904 ;;		Unchanged: 0/0
 10905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10910 ;;Total ram usage:        0 bytes
 10911 ;; Hardware stack levels used:    1
 10912 ;; Hardware stack levels required when called:   17
 10913 ;; This function calls:
 10914 ;;		_Function_H_6_1
 10915 ;;		_Function_H_6_2
 10916 ;;		_Lcd_Print_String
 10917 ;;		___lbmod
 10918 ;;		___wmul
 10919 ;;		_clear_row2
 10920 ;;		_un_block_code
 10921 ;; This function is called by:
 10922 ;;		_Function_H
 10923 ;; This function uses a non-reentrant model
 10924 ;;
 10925                           
 10926                           	psect	text17
 10927  008C7C                     __ptext17:
 10928                           	opt stack 0
 10929  008C7C                     _Function_H_6:
 10930                           	opt stack 11
 10931                           
 10932                           ;menu.c: 1576: which_screen = ARPEGGIATOR_LATCH_MENU;
 10933                           
 10934                           ;incstack = 0
 10935  008C7C  0E1F               	movlw	31
 10936  008C7E  6E4F               	movwf	_which_screen,c
 10937                           
 10938                           ;menu.c: 1577: lcd_print_once = 0;
 10939  008C80  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10940                           
 10941                           ;menu.c: 1578: encoder_click = 0;
 10942  008C82  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10943                           
 10944                           ;menu.c: 1580: while(encoder_click == 0) {
 10945  008C84  D024               	goto	l3856
 10946  008C86                     
 10947                           ;menu.c: 1584: un_block_code();
 10948  008C86  ECAD  F04C         	call	_un_block_code	;wreg free
 10949                           
 10950                           ;menu.c: 1586: if (lcd_print_once == 0) {
 10951  008C8A  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10952  008C8C  D01F               	goto	l3858
 10953                           
 10954                           ;menu.c: 1587: clear_row2();
 10955  008C8E  EC04  F04C         	call	_clear_row2	;wreg free
 10956                           
 10957                           ;menu.c: 1588: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLatchMenu.selector % arpeggiator
      +                          LatchMenu.number) + arpeggiatorLatchMenu.address]);
 10958  008C92  0101               	movlb	1	; () banked
 10959  008C94  5126               	movf	_arpeggiatorLatchMenu& (0+255),w,b
 10960  008C96  6EE6               	movwf	postinc1,c
 10961  008C98  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 10962  008C9A  6EE6               	movwf	postinc1,c
 10963  008C9C  EC63  F041         	call	___lbmod	;wreg free
 10964  008CA0  503F               	movf	btemp,w,c
 10965  008CA2  0101               	movlb	1	; () banked
 10966  008CA4  2527               	addwf	(_arpeggiatorLatchMenu+1)& (0+255),w,b
 10967  008CA6  0100               	movlb	0	; () banked
 10968  008CA8  6F60               	movwf	___wmul@multiplier& (0+255),b
 10969  008CAA  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 10970  008CAC  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10971  008CAE  0E00               	movlw	0
 10972  008CB0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10973  008CB2  0E11               	movlw	17
 10974  008CB4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10975  008CB6  EC2C  F04C         	call	___wmul	;wreg free
 10976  008CBA  0E9E               	movlw	low _LCD_STRINGS
 10977  008CBC  0100               	movlb	0	; () banked
 10978  008CBE  2560               	addwf	?___wmul& (0+255),w,b
 10979  008CC0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10980  008CC2  0EF3               	movlw	high _LCD_STRINGS
 10981  008CC4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10982  008CC6  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10983  008CC8  EC76  F042         	call	_Lcd_Print_String	;wreg free
 10984  008CCC                     l3858:
 10985                           
 10986                           ;menu.c: 1589: }
 10987                           ;menu.c: 1590: lcd_print_once = 1;
 10988  008CCC  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10989  008CCE                     l3856:
 10990  008CCE  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10991  008CD0  D7DA               	goto	l3857
 10992                           
 10993                           ;menu.c: 1591: }
 10994                           ;menu.c: 1594: if(arpeggiatorLatchMenu.selector == 0) {Function_H_6_1();}
 10995  008CD2  0101               	movlb	1	; () banked
 10996  008CD4  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 10997  008CD6  B4D8               	btfsc	status,2,c
 10998                           
 10999                           ; BSR set to: 1
 11000  008CD8  EC5D  F03F         	call	_Function_H_6_1	;wreg free
 11001                           
 11002                           ;menu.c: 1595: if(arpeggiatorLatchMenu.selector == 1) {Function_H_6_2();}
 11003  008CDC  0101               	movlb	1	; () banked
 11004  008CDE  0528               	decf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 11005  008CE0  A4D8               	btfss	status,2,c
 11006  008CE2  0012               	return	
 11007                           
 11008                           ; BSR set to: 1
 11009  008CE4  ECD3  F03C         	call	_Function_H_6_2	;wreg free
 11010  008CE8  0012               	return	
 11011  008CEA                     __end_of_Function_H_6:
 11012                           	opt stack 0
 11013                           tblptru	equ	0xFF8
 11014                           tblptrh	equ	0xFF7
 11015                           tblptrl	equ	0xFF6
 11016                           tablat	equ	0xFF5
 11017                           intcon	equ	0xFF2
 11018                           intcon2	equ	0xFF1
 11019                           postinc0	equ	0xFEE
 11020                           wreg	equ	0xFE8
 11021                           postinc1	equ	0xFE6
 11022                           postdec2	equ	0xFDD
 11023                           fsr2l	equ	0xFD9
 11024                           status	equ	0xFD8
 11025                           
 11026 ;; *************** function _Function_H_6_2 *****************
 11027 ;; Defined at:
 11028 ;;		line 1539 in file "menu.c"
 11029 ;; Parameters:    Size  Location     Type
 11030 ;;		None
 11031 ;; Auto vars:     Size  Location     Type
 11032 ;;		None
 11033 ;; Return value:  Size  Location     Type
 11034 ;;                  1    wreg      void 
 11035 ;; Registers used:
 11036 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11037 ;; Tracked objects:
 11038 ;;		On entry : 0/0
 11039 ;;		On exit  : 0/0
 11040 ;;		Unchanged: 0/0
 11041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11046 ;;Total ram usage:        0 bytes
 11047 ;; Hardware stack levels used:    1
 11048 ;; Hardware stack levels required when called:   16
 11049 ;; This function calls:
 11050 ;;		_Lcd_Print_String
 11051 ;;		_clear_row1
 11052 ;;		_clear_row2
 11053 ;;		_strcpy
 11054 ;;		_un_block_code
 11055 ;; This function is called by:
 11056 ;;		_Function_H_6
 11057 ;; This function uses a non-reentrant model
 11058 ;;
 11059                           
 11060                           	psect	text18
 11061  0079A6                     __ptext18:
 11062                           	opt stack 0
 11063  0079A6                     _Function_H_6_2:
 11064                           	opt stack 11
 11065                           
 11066                           ;menu.c: 1541: which_screen = ARPEGGIATOR_AUTO_LATCH_ON_OFF_MENU;
 11067                           
 11068                           ;incstack = 0
 11069  0079A6  0E21               	movlw	33
 11070  0079A8  6E4F               	movwf	_which_screen,c
 11071                           
 11072                           ;menu.c: 1542: lcd_print_once = 0;
 11073  0079AA  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11074                           
 11075                           ;menu.c: 1543: encoder_click = 0;
 11076  0079AC  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11077                           
 11078                           ;menu.c: 1545: arpeggiatorAutoLatchOnOffMenu.selector = AUTO_LATCH;
 11079  0079AE  0E00               	movlw	0
 11080  0079B0  BC03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 11081  0079B2  0E01               	movlw	1
 11082  0079B4  0101               	movlb	1	; () banked
 11083  0079B6  6F22               	movwf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),b
 11084                           
 11085                           ;menu.c: 1547: while(encoder_click == 0) {
 11086  0079B8  D042               	goto	l3847
 11087  0079BA                     
 11088                           ;menu.c: 1551: un_block_code();
 11089                           
 11090                           ; BSR set to: 1
 11091  0079BA  ECAD  F04C         	call	_un_block_code	;wreg free
 11092                           
 11093                           ;menu.c: 1553: if (lcd_print_once == 0) {
 11094  0079BE  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11095  0079C0  D03D               	goto	l3851
 11096                           
 11097                           ;menu.c: 1554: clear_row1();Lcd_Print_String("AutoLatch ON/OFF");
 11098  0079C2  EC18  F04C         	call	_clear_row1	;wreg free
 11099  0079C6  0EDB               	movlw	low STR_52
 11100  0079C8  0100               	movlb	0	; () banked
 11101  0079CA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11102  0079CC  0EFD               	movlw	high STR_52
 11103  0079CE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11104  0079D0  EC76  F042         	call	_Lcd_Print_String	;wreg free
 11105                           
 11106                           ;menu.c: 1555: if(arpeggiatorAutoLatchOnOffMenu.selector == 0) {
 11107  0079D4  0101               	movlb	1	; () banked
 11108  0079D6  5122               	movf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),w,b
 11109  0079D8  A4D8               	btfss	status,2,c
 11110  0079DA  D016               	goto	l3850
 11111                           
 11112                           ; BSR set to: 1
 11113                           ;menu.c: 1556: clear_row2();Lcd_Print_String("Auto Latch OFF");
 11114  0079DC  EC04  F04C         	call	_clear_row2	;wreg free
 11115  0079E0  0E89               	movlw	low STR_53
 11116  0079E2  0100               	movlb	0	; () banked
 11117  0079E4  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11118  0079E6  0EFE               	movlw	high STR_53
 11119  0079E8  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11120  0079EA  EC76  F042         	call	_Lcd_Print_String	;wreg free
 11121                           
 11122                           ;menu.c: 1557: DISPLAY_MODE = 1;
 11123  0079EE  0E01               	movlw	1
 11124  0079F0  0100               	movlb	0	; () banked
 11125  0079F2  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 11126                           
 11127                           ; BSR set to: 0
 11128                           ;menu.c: 1558: strcpy(string_to_display, " oFF");
 11129  0079F4  0EF8               	movlw	low _string_to_display
 11130  0079F6  6F60               	movwf	strcpy@to& (0+255),b
 11131  0079F8  0E01               	movlw	high _string_to_display
 11132  0079FA  6F61               	movwf	(strcpy@to+1)& (0+255),b
 11133  0079FC  0EDC               	movlw	low STR_5
 11134  0079FE  6F62               	movwf	strcpy@from& (0+255),b
 11135  007A00  0EFF               	movlw	high STR_5
 11136  007A02  6F63               	movwf	(strcpy@from+1)& (0+255),b
 11137  007A04  EC90  F04B         	call	_strcpy	;wreg free
 11138  007A08                     l3850:
 11139                           
 11140                           ;menu.c: 1559: }
 11141                           ;menu.c: 1560: if(arpeggiatorAutoLatchOnOffMenu.selector == 1) {
 11142  007A08  0101               	movlb	1	; () banked
 11143  007A0A  0522               	decf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),w,b
 11144  007A0C  A4D8               	btfss	status,2,c
 11145  007A0E  D016               	goto	l3851
 11146                           
 11147                           ; BSR set to: 1
 11148                           ;menu.c: 1561: clear_row2();Lcd_Print_String("Auto Latch ON");
 11149  007A10  EC04  F04C         	call	_clear_row2	;wreg free
 11150  007A14  0E0A               	movlw	low STR_55
 11151  007A16  0100               	movlb	0	; () banked
 11152  007A18  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11153  007A1A  0EFF               	movlw	high STR_55
 11154  007A1C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11155  007A1E  EC76  F042         	call	_Lcd_Print_String	;wreg free
 11156                           
 11157                           ;menu.c: 1562: DISPLAY_MODE = 1;
 11158  007A22  0E01               	movlw	1
 11159  007A24  0100               	movlb	0	; () banked
 11160  007A26  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 11161                           
 11162                           ; BSR set to: 0
 11163                           ;menu.c: 1563: strcpy(string_to_display, "Auto");
 11164  007A28  0EF8               	movlw	low _string_to_display
 11165  007A2A  6F60               	movwf	strcpy@to& (0+255),b
 11166  007A2C  0E01               	movlw	high _string_to_display
 11167  007A2E  6F61               	movwf	(strcpy@to+1)& (0+255),b
 11168  007A30  0EF0               	movlw	low STR_4
 11169  007A32  6F62               	movwf	strcpy@from& (0+255),b
 11170  007A34  0EFF               	movlw	high STR_4
 11171  007A36  6F63               	movwf	(strcpy@from+1)& (0+255),b
 11172  007A38  EC90  F04B         	call	_strcpy	;wreg free
 11173  007A3C                     l3851:
 11174                           
 11175                           ;menu.c: 1564: }
 11176                           ;menu.c: 1565: }
 11177                           ;menu.c: 1566: lcd_print_once = 1;
 11178  007A3C  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11179  007A3E                     l3847:
 11180  007A3E  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11181  007A40  D7BC               	goto	l3848
 11182                           
 11183                           ;menu.c: 1567: }
 11184                           ;menu.c: 1569: AUTO_LATCH = arpeggiatorAutoLatchOnOffMenu.selector;
 11185  007A42  0101               	movlb	1	; () banked
 11186  007A44  A122               	btfss	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),0,b
 11187  007A46  D002               	goto	u57710
 11188  007A48  8C03               	bsf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 11189  007A4A  0012               	return	
 11190  007A4C                     u57710:
 11191  007A4C  9C03               	bcf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 11192  007A4E  0012               	return		;funcret
 11193  007A50                     __end_of_Function_H_6_2:
 11194                           	opt stack 0
 11195                           tblptru	equ	0xFF8
 11196                           tblptrh	equ	0xFF7
 11197                           tblptrl	equ	0xFF6
 11198                           tablat	equ	0xFF5
 11199                           intcon	equ	0xFF2
 11200                           intcon2	equ	0xFF1
 11201                           postinc0	equ	0xFEE
 11202                           wreg	equ	0xFE8
 11203                           postinc1	equ	0xFE6
 11204                           postdec2	equ	0xFDD
 11205                           fsr2l	equ	0xFD9
 11206                           status	equ	0xFD8
 11207                           
 11208 ;; *************** function _Function_H_6_1 *****************
 11209 ;; Defined at:
 11210 ;;		line 1443 in file "menu.c"
 11211 ;; Parameters:    Size  Location     Type
 11212 ;;		None
 11213 ;; Auto vars:     Size  Location     Type
 11214 ;;  temp            1  103[BANK0 ] unsigned char 
 11215 ;; Return value:  Size  Location     Type
 11216 ;;                  1    wreg      void 
 11217 ;; Registers used:
 11218 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11219 ;; Tracked objects:
 11220 ;;		On entry : 0/0
 11221 ;;		On exit  : 0/0
 11222 ;;		Unchanged: 0/0
 11223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11225 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11227 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11228 ;;Total ram usage:        1 bytes
 11229 ;; Hardware stack levels used:    1
 11230 ;; Hardware stack levels required when called:   16
 11231 ;; This function calls:
 11232 ;;		_Lcd_Print_String
 11233 ;;		_clear_row1
 11234 ;;		_clear_row2
 11235 ;;		_doTheLatch
 11236 ;;		_doTheUnLatch
 11237 ;;		_un_block_code
 11238 ;; This function is called by:
 11239 ;;		_Function_H_6
 11240 ;; This function uses a non-reentrant model
 11241 ;;
 11242                           
 11243                           	psect	text19
 11244  007EBA                     __ptext19:
 11245                           	opt stack 0
 11246  007EBA                     _Function_H_6_1:
 11247                           	opt stack 11
 11248                           
 11249                           ;menu.c: 1445: which_screen = ARPEGGIATOR_LATCH_ON_OFF_MENU;
 11250                           
 11251                           ;incstack = 0
 11252  007EBA  0E20               	movlw	32
 11253  007EBC  6E4F               	movwf	_which_screen,c
 11254                           
 11255                           ;menu.c: 1446: lcd_print_once = 0;
 11256  007EBE  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11257                           
 11258                           ;menu.c: 1447: encoder_click = 0;
 11259  007EC0  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11260                           
 11261                           ;menu.c: 1449: arpeggiatorLatchOnOffMenu.selector = LATCH;
 11262  007EC2  0E00               	movlw	0
 11263  007EC4  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 11264  007EC6  0E01               	movlw	1
 11265  007EC8  0101               	movlb	1	; () banked
 11266  007ECA  6F25               	movwf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),b
 11267                           
 11268                           ;menu.c: 1451: while(encoder_click == 0) {
 11269  007ECC  D028               	goto	l3836
 11270  007ECE                     
 11271                           ;menu.c: 1455: un_block_code();
 11272                           
 11273                           ; BSR set to: 1
 11274  007ECE  ECAD  F04C         	call	_un_block_code	;wreg free
 11275                           
 11276                           ;menu.c: 1457: if (lcd_print_once == 0) {
 11277  007ED2  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11278  007ED4  D023               	goto	l3840
 11279                           
 11280                           ;menu.c: 1458: clear_row1();Lcd_Print_String("Latch ON/OFF");
 11281  007ED6  EC18  F04C         	call	_clear_row1	;wreg free
 11282  007EDA  0EDF               	movlw	low (STR_52+4)
 11283  007EDC  0100               	movlb	0	; () banked
 11284  007EDE  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11285  007EE0  0EFD               	movlw	high (STR_52+4)
 11286  007EE2  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11287  007EE4  EC76  F042         	call	_Lcd_Print_String	;wreg free
 11288                           
 11289                           ;menu.c: 1459: if(arpeggiatorLatchOnOffMenu.selector == 0) {
 11290  007EE8  0101               	movlb	1	; () banked
 11291  007EEA  5125               	movf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),w,b
 11292  007EEC  A4D8               	btfss	status,2,c
 11293  007EEE  D009               	goto	l3839
 11294                           
 11295                           ; BSR set to: 1
 11296                           ;menu.c: 1460: clear_row2();
 11297  007EF0  EC04  F04C         	call	_clear_row2	;wreg free
 11298                           
 11299                           ;menu.c: 1461: Lcd_Print_String("Latch OFF");
 11300  007EF4  0E8E               	movlw	low (STR_53+5)
 11301  007EF6  0100               	movlb	0	; () banked
 11302  007EF8  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11303  007EFA  0EFE               	movlw	high (STR_53+5)
 11304  007EFC  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11305  007EFE  EC76  F042         	call	_Lcd_Print_String	;wreg free
 11306  007F02                     l3839:
 11307                           
 11308                           ;menu.c: 1462: }
 11309                           ;menu.c: 1463: if(arpeggiatorLatchOnOffMenu.selector == 1) {
 11310  007F02  0101               	movlb	1	; () banked
 11311  007F04  0525               	decf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),w,b
 11312  007F06  A4D8               	btfss	status,2,c
 11313  007F08  D009               	goto	l3840
 11314                           
 11315                           ; BSR set to: 1
 11316                           ;menu.c: 1464: clear_row2();
 11317  007F0A  EC04  F04C         	call	_clear_row2	;wreg free
 11318                           
 11319                           ;menu.c: 1465: Lcd_Print_String("Latch ON");
 11320  007F0E  0E0F               	movlw	low (STR_55+5)
 11321  007F10  0100               	movlb	0	; () banked
 11322  007F12  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11323  007F14  0EFF               	movlw	high (STR_55+5)
 11324  007F16  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11325  007F18  EC76  F042         	call	_Lcd_Print_String	;wreg free
 11326  007F1C                     l3840:
 11327                           
 11328                           ;menu.c: 1466: }
 11329                           ;menu.c: 1467: }
 11330                           ;menu.c: 1468: lcd_print_once = 1;
 11331  007F1C  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11332  007F1E                     l3836:
 11333  007F1E  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11334  007F20  D7D6               	goto	l3837
 11335                           
 11336                           ;menu.c: 1469: }
 11337                           ;menu.c: 1471: LATCH = arpeggiatorLatchOnOffMenu.selector;
 11338  007F22  0101               	movlb	1	; () banked
 11339  007F24  A125               	btfss	(_arpeggiatorLatchOnOffMenu+2)& (0+255),0,b
 11340  007F26  D002               	goto	u57610
 11341  007F28  8004               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 11342  007F2A  D001               	goto	u57625
 11343  007F2C                     u57610:
 11344  007F2C  9004               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
 11345  007F2E                     u57625:
 11346                           
 11347                           ;menu.c: 1473: if(LATCH == 1){
 11348  007F2E  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 11349                           
 11350                           ;menu.c: 1480: doTheLatch();
 11351  007F30  EC74  F04C         	call	_doTheLatch	;wreg free
 11352                           
 11353                           ;menu.c: 1481: }
 11354                           ;menu.c: 1483: if(LATCH == 0){
 11355  007F34  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 11356  007F36  0012               	return	
 11357                           
 11358                           ;menu.c: 1486: unsigned char temp = UN_LATCH_MODE;
 11359  007F38  0E00               	movlw	0
 11360  007F3A  BE03               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11361  007F3C  0E01               	movlw	1
 11362  007F3E  0100               	movlb	0	; () banked
 11363  007F40  6FC7               	movwf	Function_H_6_1@temp& (0+255),b
 11364                           
 11365                           ; BSR set to: 0
 11366                           ;menu.c: 1488: UN_LATCH_MODE = 0;
 11367  007F42  9E03               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11368                           
 11369                           ; BSR set to: 0
 11370                           ;menu.c: 1489: doTheUnLatch();
 11371  007F44  ECF0  F028         	call	_doTheUnLatch	;wreg free
 11372                           
 11373                           ;menu.c: 1492: UN_LATCH_MODE = temp;
 11374  007F48  0100               	movlb	0	; () banked
 11375  007F4A  A1C7               	btfss	Function_H_6_1@temp& (0+255),0,b
 11376  007F4C  D002               	goto	u57650
 11377  007F4E  8E03               	bsf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11378  007F50  0012               	return	
 11379  007F52                     u57650:
 11380  007F52  9E03               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11381  007F54  0012               	return	
 11382  007F56                     __end_of_Function_H_6_1:
 11383                           	opt stack 0
 11384                           tblptru	equ	0xFF8
 11385                           tblptrh	equ	0xFF7
 11386                           tblptrl	equ	0xFF6
 11387                           tablat	equ	0xFF5
 11388                           intcon	equ	0xFF2
 11389                           intcon2	equ	0xFF1
 11390                           postinc0	equ	0xFEE
 11391                           wreg	equ	0xFE8
 11392                           postinc1	equ	0xFE6
 11393                           postdec2	equ	0xFDD
 11394                           fsr2l	equ	0xFD9
 11395                           status	equ	0xFD8
 11396                           
 11397 ;; *************** function _Function_H_5 *****************
 11398 ;; Defined at:
 11399 ;;		line 1406 in file "menu.c"
 11400 ;; Parameters:    Size  Location     Type
 11401 ;;		None
 11402 ;; Auto vars:     Size  Location     Type
 11403 ;;  i               1  104[BANK0 ] unsigned char 
 11404 ;; Return value:  Size  Location     Type
 11405 ;;                  1    wreg      void 
 11406 ;; Registers used:
 11407 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11408 ;; Tracked objects:
 11409 ;;		On entry : 0/0
 11410 ;;		On exit  : 0/0
 11411 ;;		Unchanged: 0/0
 11412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11414 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11415 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11416 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11417 ;;Total ram usage:        2 bytes
 11418 ;; Hardware stack levels used:    1
 11419 ;; Hardware stack levels required when called:   16
 11420 ;; This function calls:
 11421 ;;		_Lcd_Print_String
 11422 ;;		___lbmod
 11423 ;;		___wmul
 11424 ;;		_clear_row1
 11425 ;;		_clear_row2
 11426 ;;		_un_block_code
 11427 ;; This function is called by:
 11428 ;;		_Function_H
 11429 ;; This function uses a non-reentrant model
 11430 ;;
 11431                           
 11432                           	psect	text20
 11433  007A50                     __ptext20:
 11434                           	opt stack 0
 11435  007A50                     _Function_H_5:
 11436                           	opt stack 12
 11437                           
 11438                           ;menu.c: 1408: which_screen = ARPEGGIATOR_NOTE_LENGTH_MENU,
 11439                           ;menu.c: 1409: lcd_print_once = 0;
 11440                           
 11441                           ;incstack = 0
 11442  007A50  0E1E               	movlw	30
 11443  007A52  6E4F               	movwf	_which_screen,c
 11444  007A54  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11445                           
 11446                           ;menu.c: 1410: encoder_click = 0;
 11447  007A56  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11448                           
 11449                           ;menu.c: 1413: for(unsigned char i = 0; i < 12; i++) {
 11450  007A58  0E00               	movlw	0
 11451  007A5A  0100               	movlb	0	; () banked
 11452  007A5C  6FC8               	movwf	Function_H_5@i& (0+255),b
 11453  007A5E                     l32424:
 11454                           
 11455                           ; BSR set to: 0
 11456  007A5E  0E0B               	movlw	11
 11457  007A60  65C8               	cpfsgt	Function_H_5@i& (0+255),b
 11458  007A62  D001               	goto	l3826
 11459  007A64  D03C               	goto	l3829
 11460  007A66                     l3826:
 11461                           
 11462                           ; BSR set to: 0
 11463                           ;menu.c: 1414: if(NOTE_LENGTH_PULSES_ARRAY[i] == NOTE_LENGTH_PULSES) {
 11464                           
 11465                           ; BSR set to: 0
 11466  007A66  51C8               	movf	Function_H_5@i& (0+255),w,b
 11467  007A68  0D01               	mullw	1
 11468  007A6A  0EB8               	movlw	low _NOTE_LENGTH_PULSES_ARRAY
 11469  007A6C  24F3               	addwf	prodl,w,c
 11470  007A6E  6ED9               	movwf	fsr2l,c
 11471  007A70  0E02               	movlw	high _NOTE_LENGTH_PULSES_ARRAY
 11472  007A72  20F4               	addwfc	prodh,w,c
 11473  007A74  6EDA               	movwf	fsr2h,c
 11474  007A76  504D               	movf	_NOTE_LENGTH_PULSES,w,c
 11475  007A78  18DE               	xorwf	postinc2,w,c
 11476  007A7A  B4D8               	btfsc	status,2,c
 11477                           
 11478                           ; BSR set to: 0
 11479                           ;menu.c: 1416: arpeggiatorNoteLengthMenu.selector = i;
 11480  007A7C  C0C8  F12B         	movff	Function_H_5@i,_arpeggiatorNoteLengthMenu+2
 11481                           
 11482                           ; BSR set to: 0
 11483                           
 11484                           ; BSR set to: 0
 11485  007A80  2BC8               	incf	Function_H_5@i& (0+255),f,b
 11486  007A82  D7ED               	goto	l32424
 11487  007A84                     
 11488                           ;menu.c: 1426: un_block_code();
 11489                           
 11490                           ; BSR set to: 0
 11491  007A84  ECAD  F04C         	call	_un_block_code	;wreg free
 11492                           
 11493                           ;menu.c: 1428: if (lcd_print_once == 0) {
 11494  007A88  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11495  007A8A  D028               	goto	l3831
 11496                           
 11497                           ;menu.c: 1429: clear_row1();
 11498  007A8C  EC18  F04C         	call	_clear_row1	;wreg free
 11499                           
 11500                           ;menu.c: 1430: Lcd_Print_String("Note Length:");
 11501  007A90  0E32               	movlw	low STR_48
 11502  007A92  0100               	movlb	0	; () banked
 11503  007A94  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11504  007A96  0EFF               	movlw	high STR_48
 11505  007A98  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11506  007A9A  EC76  F042         	call	_Lcd_Print_String	;wreg free
 11507                           
 11508                           ;menu.c: 1431: clear_row2();
 11509  007A9E  EC04  F04C         	call	_clear_row2	;wreg free
 11510                           
 11511                           ;menu.c: 1432: Lcd_Print_String(LCD_STRINGS[(arpeggiatorNoteLengthMenu.selector % arpegg
      +                          iatorNoteLengthMenu.number) + arpeggiatorNoteLengthMenu.address]);
 11512  007AA2  0101               	movlb	1	; () banked
 11513  007AA4  5129               	movf	_arpeggiatorNoteLengthMenu& (0+255),w,b
 11514  007AA6  6EE6               	movwf	postinc1,c
 11515  007AA8  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 11516  007AAA  6EE6               	movwf	postinc1,c
 11517  007AAC  EC63  F041         	call	___lbmod	;wreg free
 11518  007AB0  503F               	movf	btemp,w,c
 11519  007AB2  0101               	movlb	1	; () banked
 11520  007AB4  252A               	addwf	(_arpeggiatorNoteLengthMenu+1)& (0+255),w,b
 11521  007AB6  0100               	movlb	0	; () banked
 11522  007AB8  6F60               	movwf	___wmul@multiplier& (0+255),b
 11523  007ABA  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 11524  007ABC  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 11525  007ABE  0E00               	movlw	0
 11526  007AC0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11527  007AC2  0E11               	movlw	17
 11528  007AC4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 11529  007AC6  EC2C  F04C         	call	___wmul	;wreg free
 11530  007ACA  0E9E               	movlw	low _LCD_STRINGS
 11531  007ACC  0100               	movlb	0	; () banked
 11532  007ACE  2560               	addwf	?___wmul& (0+255),w,b
 11533  007AD0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11534  007AD2  0EF3               	movlw	high _LCD_STRINGS
 11535  007AD4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 11536  007AD6  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11537  007AD8  EC76  F042         	call	_Lcd_Print_String	;wreg free
 11538  007ADC                     l3831:
 11539                           
 11540                           ;menu.c: 1433: }
 11541                           ;menu.c: 1434: lcd_print_once = 1;
 11542  007ADC  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11543  007ADE                     l3829:
 11544  007ADE  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11545  007AE0  D7D1               	goto	l3830
 11546                           
 11547                           ;menu.c: 1435: }
 11548                           ;menu.c: 1438: NOTE_LENGTH_PULSES = NOTE_LENGTH_PULSES_ARRAY[arpeggiatorNoteLengthMenu.s
      +                          elector];
 11549  007AE2  0101               	movlb	1	; () banked
 11550  007AE4  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 11551  007AE6  0D01               	mullw	1
 11552  007AE8  0EB8               	movlw	low _NOTE_LENGTH_PULSES_ARRAY
 11553  007AEA  24F3               	addwf	prodl,w,c
 11554  007AEC  6ED9               	movwf	fsr2l,c
 11555  007AEE  0E02               	movlw	high _NOTE_LENGTH_PULSES_ARRAY
 11556  007AF0  20F4               	addwfc	prodh,w,c
 11557  007AF2  6EDA               	movwf	fsr2h,c
 11558  007AF4  50DF               	movf	indf2,w,c
 11559  007AF6  6E4D               	movwf	_NOTE_LENGTH_PULSES,c
 11560                           
 11561                           ; BSR set to: 1
 11562  007AF8  0012               	return		;funcret
 11563  007AFA                     __end_of_Function_H_5:
 11564                           	opt stack 0
 11565                           tblptru	equ	0xFF8
 11566                           tblptrh	equ	0xFF7
 11567                           tblptrl	equ	0xFF6
 11568                           tablat	equ	0xFF5
 11569                           prodh	equ	0xFF4
 11570                           prodl	equ	0xFF3
 11571                           intcon	equ	0xFF2
 11572                           intcon2	equ	0xFF1
 11573                           postinc0	equ	0xFEE
 11574                           wreg	equ	0xFE8
 11575                           postinc1	equ	0xFE6
 11576                           indf2	equ	0xFDF
 11577                           postinc2	equ	0xFDE
 11578                           postdec2	equ	0xFDD
 11579                           fsr2h	equ	0xFDA
 11580                           fsr2l	equ	0xFD9
 11581                           status	equ	0xFD8
 11582                           
 11583 ;; *************** function _Function_H_4 *****************
 11584 ;; Defined at:
 11585 ;;		line 1367 in file "menu.c"
 11586 ;; Parameters:    Size  Location     Type
 11587 ;;		None
 11588 ;; Auto vars:     Size  Location     Type
 11589 ;;		None
 11590 ;; Return value:  Size  Location     Type
 11591 ;;                  1    wreg      void 
 11592 ;; Registers used:
 11593 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11594 ;; Tracked objects:
 11595 ;;		On entry : 0/0
 11596 ;;		On exit  : 0/0
 11597 ;;		Unchanged: 0/0
 11598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11603 ;;Total ram usage:        0 bytes
 11604 ;; Hardware stack levels used:    1
 11605 ;; Hardware stack levels required when called:   16
 11606 ;; This function calls:
 11607 ;;		_Lcd_Print_String
 11608 ;;		___lbmod
 11609 ;;		___wmul
 11610 ;;		_clear_row1
 11611 ;;		_clear_row2
 11612 ;;		_setupArpeggio
 11613 ;;		_un_block_code
 11614 ;; This function is called by:
 11615 ;;		_Function_H
 11616 ;; This function uses a non-reentrant model
 11617 ;;
 11618                           
 11619                           	psect	text21
 11620  007798                     __ptext21:
 11621                           	opt stack 0
 11622  007798                     _Function_H_4:
 11623                           	opt stack 12
 11624                           
 11625                           ;menu.c: 1369: which_screen = ARPEGGIATOR_ARPEGGIO_TYPE_MENU,
 11626                           ;menu.c: 1370: lcd_print_once = 0;
 11627                           
 11628                           ; BSR set to: 1
 11629                           ;incstack = 0
 11630  007798  0E1D               	movlw	29
 11631  00779A  6E4F               	movwf	_which_screen,c
 11632  00779C  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11633                           
 11634                           ;menu.c: 1371: encoder_click = 0;
 11635  00779E  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11636                           
 11637                           ;menu.c: 1373: arpeggiatorTypeMenu.selector = ARPEGGIO_TYPE;
 11638  0077A0  C035  F12E         	movff	_ARPEGGIO_TYPE,_arpeggiatorTypeMenu+2
 11639                           
 11640                           ;menu.c: 1375: while(encoder_click == 0) {
 11641  0077A4  D02D               	goto	l3813
 11642  0077A6                     
 11643                           ;menu.c: 1379: un_block_code();
 11644  0077A6  ECAD  F04C         	call	_un_block_code	;wreg free
 11645                           
 11646                           ;menu.c: 1381: if (lcd_print_once == 0) {
 11647  0077AA  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11648  0077AC  D028               	goto	l3815
 11649                           
 11650                           ;menu.c: 1382: clear_row1();
 11651  0077AE  EC18  F04C         	call	_clear_row1	;wreg free
 11652                           
 11653                           ;menu.c: 1383: Lcd_Print_String("Select Arpeggio:");
 11654  0077B2  0EB9               	movlw	low STR_47
 11655  0077B4  0100               	movlb	0	; () banked
 11656  0077B6  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11657  0077B8  0EFD               	movlw	high STR_47
 11658  0077BA  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11659  0077BC  EC76  F042         	call	_Lcd_Print_String	;wreg free
 11660                           
 11661                           ;menu.c: 1384: clear_row2();
 11662  0077C0  EC04  F04C         	call	_clear_row2	;wreg free
 11663                           
 11664                           ;menu.c: 1385: Lcd_Print_String(LCD_STRINGS[(arpeggiatorTypeMenu.selector % arpeggiatorT
      +                          ypeMenu.number) + arpeggiatorTypeMenu.address]);
 11665  0077C4  0101               	movlb	1	; () banked
 11666  0077C6  512C               	movf	_arpeggiatorTypeMenu& (0+255),w,b
 11667  0077C8  6EE6               	movwf	postinc1,c
 11668  0077CA  512E               	movf	(_arpeggiatorTypeMenu+2)& (0+255),w,b
 11669  0077CC  6EE6               	movwf	postinc1,c
 11670  0077CE  EC63  F041         	call	___lbmod	;wreg free
 11671  0077D2  503F               	movf	btemp,w,c
 11672  0077D4  0101               	movlb	1	; () banked
 11673  0077D6  252D               	addwf	(_arpeggiatorTypeMenu+1)& (0+255),w,b
 11674  0077D8  0100               	movlb	0	; () banked
 11675  0077DA  6F60               	movwf	___wmul@multiplier& (0+255),b
 11676  0077DC  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 11677  0077DE  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 11678  0077E0  0E00               	movlw	0
 11679  0077E2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11680  0077E4  0E11               	movlw	17
 11681  0077E6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 11682  0077E8  EC2C  F04C         	call	___wmul	;wreg free
 11683  0077EC  0E9E               	movlw	low _LCD_STRINGS
 11684  0077EE  0100               	movlb	0	; () banked
 11685  0077F0  2560               	addwf	?___wmul& (0+255),w,b
 11686  0077F2  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11687  0077F4  0EF3               	movlw	high _LCD_STRINGS
 11688  0077F6  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 11689  0077F8  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11690  0077FA  EC76  F042         	call	_Lcd_Print_String	;wreg free
 11691  0077FE                     l3815:
 11692                           
 11693                           ;menu.c: 1386: }
 11694                           ;menu.c: 1387: lcd_print_once = 1;
 11695  0077FE  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11696  007800                     l3813:
 11697  007800  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11698  007802  D7D1               	goto	l3814
 11699                           
 11700                           ;menu.c: 1388: }
 11701                           ;menu.c: 1390: ARPEGGIO_TYPE = arpeggiatorTypeMenu.selector;
 11702  007804  C12E  F035         	movff	_arpeggiatorTypeMenu+2,_ARPEGGIO_TYPE
 11703                           
 11704                           ;menu.c: 1393: if((ARPEGGIO_TYPE == AS_PRESSED) || (ARPEGGIO_TYPE == UP) || (ARPEGGIO_TY
      +                          PE == UP_DOWN) || (ARPEGGIO_TYPE == RANDOM) || (ARPEGGIO_TYPE == RANDOM_NON_REPEATING)) 
      +                          {
 11705  007808  0E06               	movlw	6
 11706  00780A  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 11707  00780C  B4D8               	btfsc	status,2,c
 11708  00780E  D00F               	goto	u58880
 11709  007810  5035               	movf	_ARPEGGIO_TYPE,w,c
 11710  007812  B4D8               	btfsc	status,2,c
 11711  007814  D00C               	goto	u58880
 11712  007816  0E02               	movlw	2
 11713  007818  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 11714  00781A  B4D8               	btfsc	status,2,c
 11715  00781C  D008               	goto	u58880
 11716  00781E  0E05               	movlw	5
 11717  007820  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 11718  007822  B4D8               	btfsc	status,2,c
 11719  007824  D004               	goto	u58880
 11720  007826  0E04               	movlw	4
 11721  007828  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 11722  00782A  A4D8               	btfss	status,2,c
 11723  00782C  D002               	goto	l3817
 11724  00782E                     u58880:
 11725                           
 11726                           ;menu.c: 1394: startingDirection = UP;
 11727  00782E  0E00               	movlw	0
 11728  007830  6E34               	movwf	_startingDirection,c
 11729  007832                     l3817:
 11730                           
 11731                           ;menu.c: 1395: }
 11732                           ;menu.c: 1397: if((ARPEGGIO_TYPE == DOWN) || (ARPEGGIO_TYPE == DOWN_UP)) {
 11733  007832  0435               	decf	_ARPEGGIO_TYPE,w,c
 11734  007834  B4D8               	btfsc	status,2,c
 11735  007836  D004               	goto	u58900
 11736  007838  0E03               	movlw	3
 11737  00783A  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 11738  00783C  A4D8               	btfss	status,2,c
 11739  00783E  D002               	goto	l3820
 11740  007840                     u58900:
 11741                           
 11742                           ;menu.c: 1398: startingDirection = DOWN;
 11743  007840  0E01               	movlw	1
 11744  007842  6E34               	movwf	_startingDirection,c
 11745  007844                     l3820:
 11746                           
 11747                           ;menu.c: 1399: }
 11748                           ;menu.c: 1401: setupArpeggio();
 11749  007844  EC5B  F045         	call	_setupArpeggio	;wreg free
 11750  007848  0012               	return		;funcret
 11751  00784A                     __end_of_Function_H_4:
 11752                           	opt stack 0
 11753                           tblptru	equ	0xFF8
 11754                           tblptrh	equ	0xFF7
 11755                           tblptrl	equ	0xFF6
 11756                           tablat	equ	0xFF5
 11757                           prodh	equ	0xFF4
 11758                           prodl	equ	0xFF3
 11759                           intcon	equ	0xFF2
 11760                           intcon2	equ	0xFF1
 11761                           postinc0	equ	0xFEE
 11762                           wreg	equ	0xFE8
 11763                           postinc1	equ	0xFE6
 11764                           indf2	equ	0xFDF
 11765                           postinc2	equ	0xFDE
 11766                           postdec2	equ	0xFDD
 11767                           fsr2h	equ	0xFDA
 11768                           fsr2l	equ	0xFD9
 11769                           status	equ	0xFD8
 11770                           
 11771 ;; *************** function _Function_H_3 *****************
 11772 ;; Defined at:
 11773 ;;		line 1336 in file "menu.c"
 11774 ;; Parameters:    Size  Location     Type
 11775 ;;		None
 11776 ;; Auto vars:     Size  Location     Type
 11777 ;;		None
 11778 ;; Return value:  Size  Location     Type
 11779 ;;                  1    wreg      void 
 11780 ;; Registers used:
 11781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11782 ;; Tracked objects:
 11783 ;;		On entry : 0/0
 11784 ;;		On exit  : 0/0
 11785 ;;		Unchanged: 0/0
 11786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11791 ;;Total ram usage:        0 bytes
 11792 ;; Hardware stack levels used:    1
 11793 ;; Hardware stack levels required when called:   16
 11794 ;; This function calls:
 11795 ;;		_Lcd_Print_String
 11796 ;;		_Lcd_Set_Cursor
 11797 ;;		_clear_row2
 11798 ;;		_int2string
 11799 ;;		_un_block_code
 11800 ;; This function is called by:
 11801 ;;		_Function_H
 11802 ;; This function uses a non-reentrant model
 11803 ;;
 11804                           
 11805                           	psect	text22
 11806  009138                     __ptext22:
 11807                           	opt stack 0
 11808  009138                     _Function_H_3:
 11809                           	opt stack 12
 11810                           
 11811                           ;menu.c: 1338: which_screen = ARPEGGIATOR_OCTAVES_MENU;
 11812                           
 11813                           ;incstack = 0
 11814  009138  0E1C               	movlw	28
 11815  00913A  6E4F               	movwf	_which_screen,c
 11816                           
 11817                           ;menu.c: 1339: lcd_print_once = 0;
 11818  00913C  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11819                           
 11820                           ;menu.c: 1340: encoder_click = 0;
 11821  00913E  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11822                           
 11823                           ;menu.c: 1342: arpeggiatorOctavesMenu.selector = OCTAVES;
 11824  009140  C04E  F131         	movff	_OCTAVES,_arpeggiatorOctavesMenu+2
 11825                           
 11826                           ;menu.c: 1344: while(encoder_click == 0) {
 11827  009144  D021               	goto	l3806
 11828  009146                     
 11829                           ;menu.c: 1348: un_block_code();
 11830  009146  ECAD  F04C         	call	_un_block_code	;wreg free
 11831                           
 11832                           ;menu.c: 1350: if (lcd_print_once == 0) {
 11833  00914A  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11834  00914C  D009               	goto	l3808
 11835                           
 11836                           ;menu.c: 1351: clear_row2();
 11837  00914E  EC04  F04C         	call	_clear_row2	;wreg free
 11838                           
 11839                           ;menu.c: 1352: Lcd_Print_String("Octave Range:");
 11840  009152  0EEE               	movlw	low STR_46
 11841  009154  0100               	movlb	0	; () banked
 11842  009156  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11843  009158  0EFE               	movlw	high STR_46
 11844  00915A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11845  00915C  EC76  F042         	call	_Lcd_Print_String	;wreg free
 11846  009160                     l3808:
 11847                           
 11848                           ;menu.c: 1353: }
 11849                           ;menu.c: 1354: lcd_print_once = 1;
 11850  009160  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11851                           
 11852                           ;menu.c: 1357: int2string(arpeggiatorOctavesMenu.selector);
 11853  009162  C131  F060         	movff	_arpeggiatorOctavesMenu+2,int2string@number
 11854  009166  0100               	movlb	0	; () banked
 11855  009168  6B61               	clrf	(int2string@number+1)& (0+255),b
 11856  00916A  EC0A  F03B         	call	_int2string	;wreg free
 11857                           
 11858                           ;menu.c: 1358: Lcd_Set_Cursor(2,13);
 11859  00916E  0E0D               	movlw	13
 11860  009170  0100               	movlb	0	; () banked
 11861  009172  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 11862  009174  0E02               	movlw	2
 11863  009176  ECDF  F047         	call	_Lcd_Set_Cursor
 11864                           
 11865                           ;menu.c: 1359: Lcd_Print_String(string2display);
 11866  00917A  0E92               	movlw	low _string2display
 11867  00917C  0100               	movlb	0	; () banked
 11868  00917E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11869  009180  0E01               	movlw	high _string2display
 11870  009182  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11871  009184  EC76  F042         	call	_Lcd_Print_String	;wreg free
 11872  009188                     l3806:
 11873  009188  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11874  00918A  D7DD               	goto	l3807
 11875                           
 11876                           ;menu.c: 1360: }
 11877                           ;menu.c: 1362: OCTAVES = arpeggiatorOctavesMenu.selector;
 11878  00918C  C131  F04E         	movff	_arpeggiatorOctavesMenu+2,_OCTAVES
 11879  009190  0012               	return		;funcret
 11880  009192                     __end_of_Function_H_3:
 11881                           	opt stack 0
 11882                           tblptru	equ	0xFF8
 11883                           tblptrh	equ	0xFF7
 11884                           tblptrl	equ	0xFF6
 11885                           tablat	equ	0xFF5
 11886                           prodh	equ	0xFF4
 11887                           prodl	equ	0xFF3
 11888                           intcon	equ	0xFF2
 11889                           intcon2	equ	0xFF1
 11890                           postinc0	equ	0xFEE
 11891                           wreg	equ	0xFE8
 11892                           postinc1	equ	0xFE6
 11893                           indf2	equ	0xFDF
 11894                           postinc2	equ	0xFDE
 11895                           postdec2	equ	0xFDD
 11896                           fsr2h	equ	0xFDA
 11897                           fsr2l	equ	0xFD9
 11898                           status	equ	0xFD8
 11899                           
 11900 ;; *************** function _Function_H_2 *****************
 11901 ;; Defined at:
 11902 ;;		line 1305 in file "menu.c"
 11903 ;; Parameters:    Size  Location     Type
 11904 ;;		None
 11905 ;; Auto vars:     Size  Location     Type
 11906 ;;		None
 11907 ;; Return value:  Size  Location     Type
 11908 ;;                  1    wreg      void 
 11909 ;; Registers used:
 11910 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11911 ;; Tracked objects:
 11912 ;;		On entry : 0/0
 11913 ;;		On exit  : 0/0
 11914 ;;		Unchanged: 0/0
 11915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11920 ;;Total ram usage:        0 bytes
 11921 ;; Hardware stack levels used:    1
 11922 ;; Hardware stack levels required when called:   16
 11923 ;; This function calls:
 11924 ;;		_Lcd_Print_String
 11925 ;;		_Lcd_Set_Cursor
 11926 ;;		_calculate_pulse_length
 11927 ;;		_clear_row2
 11928 ;;		_int2string
 11929 ;;		_un_block_code
 11930 ;; This function is called by:
 11931 ;;		_Function_H
 11932 ;; This function uses a non-reentrant model
 11933 ;;
 11934                           
 11935                           	psect	text23
 11936  008E2C                     __ptext23:
 11937                           	opt stack 0
 11938  008E2C                     _Function_H_2:
 11939                           	opt stack 12
 11940                           
 11941                           ;menu.c: 1307: which_screen = ARPEGGIATOR_TEMPO_MENU;
 11942                           
 11943                           ;incstack = 0
 11944  008E2C  0E1B               	movlw	27
 11945  008E2E  6E4F               	movwf	_which_screen,c
 11946                           
 11947                           ;menu.c: 1308: lcd_print_once = 0;
 11948  008E30  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11949                           
 11950                           ;menu.c: 1309: encoder_click = 0;
 11951  008E32  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11952                           
 11953                           ;menu.c: 1311: arpeggiatorTempoMenu.selector = BPM;
 11954  008E34  C0FF  F134         	movff	_BPM,_arpeggiatorTempoMenu+2
 11955                           
 11956                           ;menu.c: 1313: while(encoder_click == 0) {
 11957  008E38  D021               	goto	l3799
 11958  008E3A                     
 11959                           ;menu.c: 1317: un_block_code();
 11960  008E3A  ECAD  F04C         	call	_un_block_code	;wreg free
 11961                           
 11962                           ;menu.c: 1319: if (lcd_print_once == 0) {
 11963  008E3E  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11964  008E40  D009               	goto	l3801
 11965                           
 11966                           ;menu.c: 1320: clear_row2();
 11967  008E42  EC04  F04C         	call	_clear_row2	;wreg free
 11968                           
 11969                           ;menu.c: 1321: Lcd_Print_String("Tempo (BPM): ");
 11970  008E46  0EB6               	movlw	low STR_45
 11971  008E48  0100               	movlb	0	; () banked
 11972  008E4A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11973  008E4C  0EFE               	movlw	high STR_45
 11974  008E4E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11975  008E50  EC76  F042         	call	_Lcd_Print_String	;wreg free
 11976  008E54                     l3801:
 11977                           
 11978                           ;menu.c: 1322: }
 11979                           ;menu.c: 1323: lcd_print_once = 1;
 11980  008E54  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11981                           
 11982                           ;menu.c: 1326: int2string(arpeggiatorTempoMenu.selector);
 11983  008E56  C134  F060         	movff	_arpeggiatorTempoMenu+2,int2string@number
 11984  008E5A  0100               	movlb	0	; () banked
 11985  008E5C  6B61               	clrf	(int2string@number+1)& (0+255),b
 11986  008E5E  EC0A  F03B         	call	_int2string	;wreg free
 11987                           
 11988                           ;menu.c: 1327: Lcd_Set_Cursor(2,13);
 11989  008E62  0E0D               	movlw	13
 11990  008E64  0100               	movlb	0	; () banked
 11991  008E66  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 11992  008E68  0E02               	movlw	2
 11993  008E6A  ECDF  F047         	call	_Lcd_Set_Cursor
 11994                           
 11995                           ;menu.c: 1328: Lcd_Print_String(string2display);
 11996  008E6E  0E92               	movlw	low _string2display
 11997  008E70  0100               	movlb	0	; () banked
 11998  008E72  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11999  008E74  0E01               	movlw	high _string2display
 12000  008E76  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12001  008E78  EC76  F042         	call	_Lcd_Print_String	;wreg free
 12002  008E7C                     l3799:
 12003  008E7C  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12004  008E7E  D7DD               	goto	l3800
 12005                           
 12006                           ;menu.c: 1329: }
 12007                           ;menu.c: 1331: BPM = arpeggiatorTempoMenu.selector;
 12008  008E80  C134  F0FF         	movff	_arpeggiatorTempoMenu+2,_BPM
 12009                           
 12010                           ;menu.c: 1332: TIMER_PRELOAD = calculate_pulse_length();
 12011  008E84  EC41  F02F         	call	_calculate_pulse_length	;wreg free
 12012  008E88  C0C2  F17B         	movff	?_calculate_pulse_length,_TIMER_PRELOAD
 12013  008E8C  C0C3  F17C         	movff	?_calculate_pulse_length+1,_TIMER_PRELOAD+1
 12014  008E90  0012               	return		;funcret
 12015  008E92                     __end_of_Function_H_2:
 12016                           	opt stack 0
 12017                           tblptru	equ	0xFF8
 12018                           tblptrh	equ	0xFF7
 12019                           tblptrl	equ	0xFF6
 12020                           tablat	equ	0xFF5
 12021                           prodh	equ	0xFF4
 12022                           prodl	equ	0xFF3
 12023                           intcon	equ	0xFF2
 12024                           intcon2	equ	0xFF1
 12025                           postinc0	equ	0xFEE
 12026                           wreg	equ	0xFE8
 12027                           postinc1	equ	0xFE6
 12028                           indf2	equ	0xFDF
 12029                           postinc2	equ	0xFDE
 12030                           postdec2	equ	0xFDD
 12031                           fsr2h	equ	0xFDA
 12032                           fsr2l	equ	0xFD9
 12033                           status	equ	0xFD8
 12034                           
 12035 ;; *************** function _Function_H_1 *****************
 12036 ;; Defined at:
 12037 ;;		line 1248 in file "menu.c"
 12038 ;; Parameters:    Size  Location     Type
 12039 ;;		None
 12040 ;; Auto vars:     Size  Location     Type
 12041 ;;  temp            1  103[BANK0 ] unsigned char 
 12042 ;; Return value:  Size  Location     Type
 12043 ;;                  1    wreg      void 
 12044 ;; Registers used:
 12045 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12046 ;; Tracked objects:
 12047 ;;		On entry : 0/0
 12048 ;;		On exit  : 0/0
 12049 ;;		Unchanged: 0/0
 12050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12052 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12054 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12055 ;;Total ram usage:        1 bytes
 12056 ;; Hardware stack levels used:    1
 12057 ;; Hardware stack levels required when called:   16
 12058 ;; This function calls:
 12059 ;;		_Lcd_Print_String
 12060 ;;		_clear_row2
 12061 ;;		_doTheUnLatch
 12062 ;;		_strcpy
 12063 ;;		_un_block_code
 12064 ;; This function is called by:
 12065 ;;		_Function_H
 12066 ;; This function uses a non-reentrant model
 12067 ;;
 12068                           
 12069                           	psect	text24
 12070  00705A                     __ptext24:
 12071                           	opt stack 0
 12072  00705A                     _Function_H_1:
 12073                           	opt stack 12
 12074                           
 12075                           ;menu.c: 1250: which_screen = ARPEGGIATOR_ON_OFF_MENU;
 12076                           
 12077                           ;incstack = 0
 12078  00705A  0E1A               	movlw	26
 12079  00705C  6E4F               	movwf	_which_screen,c
 12080                           
 12081                           ;menu.c: 1251: lcd_print_once = 0;
 12082  00705E  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12083                           
 12084                           ;menu.c: 1252: encoder_click = 0;
 12085  007060  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12086                           
 12087                           ;menu.c: 1254: arpeggiatorOnOffMenu.selector = ARPEGGIO_ON;
 12088  007062  0E00               	movlw	0
 12089  007064  B604               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 12090  007066  0E01               	movlw	1
 12091  007068  0101               	movlb	1	; () banked
 12092  00706A  6F37               	movwf	(_arpeggiatorOnOffMenu+2)& (0+255),b
 12093                           
 12094                           ;menu.c: 1256: while(encoder_click == 0) {
 12095  00706C  D039               	goto	l3789
 12096  00706E                     
 12097                           ;menu.c: 1260: un_block_code();
 12098                           
 12099                           ; BSR set to: 1
 12100  00706E  ECAD  F04C         	call	_un_block_code	;wreg free
 12101                           
 12102                           ;menu.c: 1262: if (lcd_print_once == 0) {
 12103  007072  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12104  007074  D034               	goto	l3793
 12105                           
 12106                           ;menu.c: 1267: if(arpeggiatorOnOffMenu.selector == 0) {
 12107  007076  0101               	movlb	1	; () banked
 12108  007078  5137               	movf	(_arpeggiatorOnOffMenu+2)& (0+255),w,b
 12109  00707A  A4D8               	btfss	status,2,c
 12110  00707C  D016               	goto	l3792
 12111                           
 12112                           ; BSR set to: 1
 12113                           ;menu.c: 1268: clear_row2();
 12114  00707E  EC04  F04C         	call	_clear_row2	;wreg free
 12115                           
 12116                           ;menu.c: 1269: Lcd_Print_String("ARPEGGIATOR OFF");
 12117  007082  0E3D               	movlw	low STR_40
 12118  007084  0100               	movlb	0	; () banked
 12119  007086  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12120  007088  0EFE               	movlw	high STR_40
 12121  00708A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12122  00708C  EC76  F042         	call	_Lcd_Print_String	;wreg free
 12123                           
 12124                           ;menu.c: 1270: DISPLAY_MODE = 1;
 12125  007090  0E01               	movlw	1
 12126  007092  0100               	movlb	0	; () banked
 12127  007094  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 12128                           
 12129                           ; BSR set to: 0
 12130                           ;menu.c: 1271: strcpy(string_to_display, "AoFF");
 12131  007096  0EF8               	movlw	low _string_to_display
 12132  007098  6F60               	movwf	strcpy@to& (0+255),b
 12133  00709A  0E01               	movlw	high _string_to_display
 12134  00709C  6F61               	movwf	(strcpy@to+1)& (0+255),b
 12135  00709E  0ECD               	movlw	low STR_41
 12136  0070A0  6F62               	movwf	strcpy@from& (0+255),b
 12137  0070A2  0EFF               	movlw	high STR_41
 12138  0070A4  6F63               	movwf	(strcpy@from+1)& (0+255),b
 12139  0070A6  EC90  F04B         	call	_strcpy	;wreg free
 12140  0070AA                     l3792:
 12141                           
 12142                           ;menu.c: 1273: }
 12143                           ;menu.c: 1274: if(arpeggiatorOnOffMenu.selector == 1) {
 12144  0070AA  0101               	movlb	1	; () banked
 12145  0070AC  0537               	decf	(_arpeggiatorOnOffMenu+2)& (0+255),w,b
 12146  0070AE  A4D8               	btfss	status,2,c
 12147  0070B0  D016               	goto	l3793
 12148                           
 12149                           ; BSR set to: 1
 12150                           ;menu.c: 1275: clear_row2();
 12151  0070B2  EC04  F04C         	call	_clear_row2	;wreg free
 12152                           
 12153                           ;menu.c: 1276: Lcd_Print_String("ARPEGGIATOR ON");
 12154  0070B6  0E98               	movlw	low STR_42
 12155  0070B8  0100               	movlb	0	; () banked
 12156  0070BA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12157  0070BC  0EFE               	movlw	high STR_42
 12158  0070BE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12159  0070C0  EC76  F042         	call	_Lcd_Print_String	;wreg free
 12160                           
 12161                           ;menu.c: 1277: DISPLAY_MODE = 1;
 12162  0070C4  0E01               	movlw	1
 12163  0070C6  0100               	movlb	0	; () banked
 12164  0070C8  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 12165                           
 12166                           ; BSR set to: 0
 12167                           ;menu.c: 1278: strcpy(string_to_display, " ArP");
 12168  0070CA  0EF8               	movlw	low _string_to_display
 12169  0070CC  6F60               	movwf	strcpy@to& (0+255),b
 12170  0070CE  0E01               	movlw	high _string_to_display
 12171  0070D0  6F61               	movwf	(strcpy@to+1)& (0+255),b
 12172  0070D2  0ED2               	movlw	low STR_43
 12173  0070D4  6F62               	movwf	strcpy@from& (0+255),b
 12174  0070D6  0EFF               	movlw	high STR_43
 12175  0070D8  6F63               	movwf	(strcpy@from+1)& (0+255),b
 12176  0070DA  EC90  F04B         	call	_strcpy	;wreg free
 12177  0070DE                     l3793:
 12178                           
 12179                           ;menu.c: 1279: }
 12180                           ;menu.c: 1280: }
 12181                           ;menu.c: 1281: lcd_print_once = 1;
 12182  0070DE  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12183  0070E0                     l3789:
 12184  0070E0  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12185  0070E2  D7C5               	goto	l3790
 12186                           
 12187                           ;menu.c: 1282: }
 12188                           ;menu.c: 1285: if(arpeggiatorOnOffMenu.selector == 0){
 12189  0070E4  0101               	movlb	1	; () banked
 12190  0070E6  5137               	movf	(_arpeggiatorOnOffMenu+2)& (0+255),w,b
 12191  0070E8  A4D8               	btfss	status,2,c
 12192  0070EA  D01B               	goto	l3795
 12193                           
 12194                           ; BSR set to: 1
 12195                           ;menu.c: 1288: unsigned char temp = UN_LATCH_MODE;
 12196  0070EC  0E00               	movlw	0
 12197  0070EE  BE03               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 12198  0070F0  0E01               	movlw	1
 12199  0070F2  0100               	movlb	0	; () banked
 12200  0070F4  6FC7               	movwf	Function_H_1@temp& (0+255),b
 12201                           
 12202                           ; BSR set to: 0
 12203                           ;menu.c: 1290: UN_LATCH_MODE = 0;
 12204  0070F6  9E03               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 12205                           
 12206                           ; BSR set to: 0
 12207                           ;menu.c: 1291: doTheUnLatch();
 12208  0070F8  ECF0  F028         	call	_doTheUnLatch	;wreg free
 12209                           
 12210                           ;menu.c: 1294: UN_LATCH_MODE = temp;
 12211  0070FC  0100               	movlb	0	; () banked
 12212  0070FE  A1C7               	btfss	Function_H_1@temp& (0+255),0,b
 12213  007100  D002               	goto	u58740
 12214  007102  8E03               	bsf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 12215  007104  D001               	goto	u58755
 12216  007106                     u58740:
 12217  007106  9E03               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 12218  007108                     u58755:
 12219                           
 12220                           ;menu.c: 1297: DISPLAY_MODE = 1;
 12221  007108  0E01               	movlw	1
 12222  00710A  0100               	movlb	0	; () banked
 12223  00710C  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 12224                           
 12225                           ; BSR set to: 0
 12226                           ;menu.c: 1298: strcpy(string_to_display, "AoFF");
 12227  00710E  0EF8               	movlw	low _string_to_display
 12228  007110  6F60               	movwf	strcpy@to& (0+255),b
 12229  007112  0E01               	movlw	high _string_to_display
 12230  007114  6F61               	movwf	(strcpy@to+1)& (0+255),b
 12231  007116  0ECD               	movlw	low STR_41
 12232  007118  6F62               	movwf	strcpy@from& (0+255),b
 12233  00711A  0EFF               	movlw	high STR_41
 12234  00711C  6F63               	movwf	(strcpy@from+1)& (0+255),b
 12235  00711E  EC90  F04B         	call	_strcpy	;wreg free
 12236  007122                     l3795:
 12237                           
 12238                           ;menu.c: 1299: }
 12239                           ;menu.c: 1301: ARPEGGIO_ON = arpeggiatorOnOffMenu.selector;
 12240  007122  0101               	movlb	1	; () banked
 12241  007124  A137               	btfss	(_arpeggiatorOnOffMenu+2)& (0+255),0,b
 12242  007126  D002               	goto	u58760
 12243  007128  8604               	bsf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 12244  00712A  0012               	return	
 12245  00712C                     u58760:
 12246  00712C  9604               	bcf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 12247  00712E  0012               	return		;funcret
 12248  007130                     __end_of_Function_H_1:
 12249                           	opt stack 0
 12250                           tblptru	equ	0xFF8
 12251                           tblptrh	equ	0xFF7
 12252                           tblptrl	equ	0xFF6
 12253                           tablat	equ	0xFF5
 12254                           prodh	equ	0xFF4
 12255                           prodl	equ	0xFF3
 12256                           intcon	equ	0xFF2
 12257                           intcon2	equ	0xFF1
 12258                           postinc0	equ	0xFEE
 12259                           wreg	equ	0xFE8
 12260                           postinc1	equ	0xFE6
 12261                           indf2	equ	0xFDF
 12262                           postinc2	equ	0xFDE
 12263                           postdec2	equ	0xFDD
 12264                           fsr2h	equ	0xFDA
 12265                           fsr2l	equ	0xFD9
 12266                           status	equ	0xFD8
 12267                           
 12268 ;; *************** function _Function_G *****************
 12269 ;; Defined at:
 12270 ;;		line 1172 in file "menu.c"
 12271 ;; Parameters:    Size  Location     Type
 12272 ;;		None
 12273 ;; Auto vars:     Size  Location     Type
 12274 ;;		None
 12275 ;; Return value:  Size  Location     Type
 12276 ;;                  1    wreg      void 
 12277 ;; Registers used:
 12278 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12279 ;; Tracked objects:
 12280 ;;		On entry : 0/0
 12281 ;;		On exit  : 0/0
 12282 ;;		Unchanged: 0/0
 12283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12288 ;;Total ram usage:        0 bytes
 12289 ;; Hardware stack levels used:    1
 12290 ;; Hardware stack levels required when called:   17
 12291 ;; This function calls:
 12292 ;;		_Function_G_1
 12293 ;;		_Function_G_2
 12294 ;;		_Function_G_3
 12295 ;;		_Function_G_4
 12296 ;;		_Lcd_Print_String
 12297 ;;		___lbmod
 12298 ;;		___wmul
 12299 ;;		_clear_row2
 12300 ;;		_eepromExit
 12301 ;;		_un_block_code
 12302 ;; This function is called by:
 12303 ;;		_menu_lcd
 12304 ;; This function uses a non-reentrant model
 12305 ;;
 12306                           
 12307                           	psect	text25
 12308  008118                     __ptext25:
 12309                           	opt stack 0
 12310  008118                     _Function_G:
 12311                           	opt stack 12
 12312                           
 12313                           ;menu.c: 1174: which_screen = EEPROM_MENU;
 12314                           
 12315                           ;incstack = 0
 12316  008118  0E16               	movlw	22
 12317  00811A  6E4F               	movwf	_which_screen,c
 12318                           
 12319                           ;menu.c: 1175: lcd_print_once = 0;
 12320  00811C  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12321                           
 12322                           ;menu.c: 1177: while(encoder_click == 0) {
 12323  00811E  D024               	goto	l3761
 12324  008120                     
 12325                           ;menu.c: 1181: un_block_code();
 12326  008120  ECAD  F04C         	call	_un_block_code	;wreg free
 12327                           
 12328                           ;menu.c: 1183: if (lcd_print_once == 0) {
 12329  008124  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12330  008126  D01F               	goto	l3763
 12331                           
 12332                           ;menu.c: 1184: clear_row2();
 12333  008128  EC04  F04C         	call	_clear_row2	;wreg free
 12334                           
 12335                           ;menu.c: 1185: Lcd_Print_String(LCD_STRINGS[(eepromMenu.selector % eepromMenu.number) + 
      +                          eepromMenu.address]);
 12336  00812C  0101               	movlb	1	; () banked
 12337  00812E  513B               	movf	_eepromMenu& (0+255),w,b
 12338  008130  6EE6               	movwf	postinc1,c
 12339  008132  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 12340  008134  6EE6               	movwf	postinc1,c
 12341  008136  EC63  F041         	call	___lbmod	;wreg free
 12342  00813A  503F               	movf	btemp,w,c
 12343  00813C  0101               	movlb	1	; () banked
 12344  00813E  253C               	addwf	(_eepromMenu+1)& (0+255),w,b
 12345  008140  0100               	movlb	0	; () banked
 12346  008142  6F60               	movwf	___wmul@multiplier& (0+255),b
 12347  008144  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 12348  008146  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 12349  008148  0E00               	movlw	0
 12350  00814A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12351  00814C  0E11               	movlw	17
 12352  00814E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 12353  008150  EC2C  F04C         	call	___wmul	;wreg free
 12354  008154  0E9E               	movlw	low _LCD_STRINGS
 12355  008156  0100               	movlb	0	; () banked
 12356  008158  2560               	addwf	?___wmul& (0+255),w,b
 12357  00815A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12358  00815C  0EF3               	movlw	high _LCD_STRINGS
 12359  00815E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 12360  008160  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12361  008162  EC76  F042         	call	_Lcd_Print_String	;wreg free
 12362  008166                     l3763:
 12363                           
 12364                           ;menu.c: 1186: }
 12365                           ;menu.c: 1187: lcd_print_once = 1;
 12366  008166  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12367  008168                     l3761:
 12368  008168  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12369  00816A  D7DA               	goto	l3762
 12370                           
 12371                           ;menu.c: 1188: }
 12372                           ;menu.c: 1190: if(eepromMenu.selector == 0) {Function_G_1();}
 12373  00816C  0101               	movlb	1	; () banked
 12374  00816E  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 12375  008170  B4D8               	btfsc	status,2,c
 12376                           
 12377                           ; BSR set to: 1
 12378  008172  EC0D  F03F         	call	_Function_G_1	;wreg free
 12379                           
 12380                           ;menu.c: 1191: if(eepromMenu.selector == 1) {Function_G_2();}
 12381  008176  0101               	movlb	1	; () banked
 12382  008178  053D               	decf	(_eepromMenu+2)& (0+255),w,b
 12383  00817A  B4D8               	btfsc	status,2,c
 12384                           
 12385                           ; BSR set to: 1
 12386  00817C  ECBD  F03E         	call	_Function_G_2	;wreg free
 12387                           
 12388                           ;menu.c: 1192: if(eepromMenu.selector == 2) {Function_G_3();}
 12389  008180  0E02               	movlw	2
 12390  008182  0101               	movlb	1	; () banked
 12391  008184  193D               	xorwf	(_eepromMenu+2)& (0+255),w,b
 12392  008186  B4D8               	btfsc	status,2,c
 12393                           
 12394                           ; BSR set to: 1
 12395  008188  EC6E  F048         	call	_Function_G_3	;wreg free
 12396                           
 12397                           ;menu.c: 1193: if(eepromMenu.selector == 3) {Function_G_4();}
 12398  00818C  0E03               	movlw	3
 12399  00818E  0101               	movlb	1	; () banked
 12400  008190  193D               	xorwf	(_eepromMenu+2)& (0+255),w,b
 12401  008192  B4D8               	btfsc	status,2,c
 12402                           
 12403                           ; BSR set to: 1
 12404  008194  ECAB  F03F         	call	_Function_G_4	;wreg free
 12405                           
 12406                           ;menu.c: 1194: if(eepromMenu.selector == 4) {eepromExit();}
 12407  008198  0E04               	movlw	4
 12408  00819A  0101               	movlb	1	; () banked
 12409  00819C  193D               	xorwf	(_eepromMenu+2)& (0+255),w,b
 12410  00819E  A4D8               	btfss	status,2,c
 12411  0081A0  0012               	return	
 12412                           
 12413                           ; BSR set to: 1
 12414  0081A2  EC23  F04B         	call	_eepromExit	;wreg free
 12415  0081A6  0012               	return	
 12416  0081A8                     __end_of_Function_G:
 12417                           	opt stack 0
 12418                           tblptru	equ	0xFF8
 12419                           tblptrh	equ	0xFF7
 12420                           tblptrl	equ	0xFF6
 12421                           tablat	equ	0xFF5
 12422                           prodh	equ	0xFF4
 12423                           prodl	equ	0xFF3
 12424                           intcon	equ	0xFF2
 12425                           intcon2	equ	0xFF1
 12426                           postinc0	equ	0xFEE
 12427                           wreg	equ	0xFE8
 12428                           postinc1	equ	0xFE6
 12429                           indf2	equ	0xFDF
 12430                           postinc2	equ	0xFDE
 12431                           postdec2	equ	0xFDD
 12432                           fsr2h	equ	0xFDA
 12433                           fsr2l	equ	0xFD9
 12434                           status	equ	0xFD8
 12435                           
 12436 ;; *************** function _Function_G_4 *****************
 12437 ;; Defined at:
 12438 ;;		line 1139 in file "menu.c"
 12439 ;; Parameters:    Size  Location     Type
 12440 ;;		None
 12441 ;; Auto vars:     Size  Location     Type
 12442 ;;		None
 12443 ;; Return value:  Size  Location     Type
 12444 ;;                  1    wreg      void 
 12445 ;; Registers used:
 12446 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12447 ;; Tracked objects:
 12448 ;;		On entry : 0/0
 12449 ;;		On exit  : 0/0
 12450 ;;		Unchanged: 0/0
 12451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12456 ;;Total ram usage:        0 bytes
 12457 ;; Hardware stack levels used:    1
 12458 ;; Hardware stack levels required when called:   16
 12459 ;; This function calls:
 12460 ;;		_Busy_eep
 12461 ;;		_Lcd_Print_String
 12462 ;;		_Write_b_eep
 12463 ;;		___lbmod
 12464 ;;		___wmul
 12465 ;;		_clear_row1
 12466 ;;		_clear_row2
 12467 ;;		_exitFunction
 12468 ;;		_un_block_code
 12469 ;; This function is called by:
 12470 ;;		_Function_G
 12471 ;; This function uses a non-reentrant model
 12472 ;;
 12473                           
 12474                           	psect	text26
 12475  007F56                     __ptext26:
 12476                           	opt stack 0
 12477  007F56                     _Function_G_4:
 12478                           	opt stack 12
 12479                           
 12480                           ;menu.c: 1143: which_screen = ENCODER_POLARITY_MENU;
 12481                           
 12482                           ;incstack = 0
 12483  007F56  0E18               	movlw	24
 12484  007F58  6E4F               	movwf	_which_screen,c
 12485                           
 12486                           ;menu.c: 1144: lcd_print_once = 0;
 12487  007F5A  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12488                           
 12489                           ;menu.c: 1145: encoder_click = 0;
 12490  007F5C  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12491                           
 12492                           ;menu.c: 1147: encoderPolarityMenu.selector = encoderPolarity;
 12493  007F5E  0E00               	movlw	0
 12494  007F60  B405               	btfsc	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 12495  007F62  0E01               	movlw	1
 12496  007F64  0101               	movlb	1	; () banked
 12497  007F66  6F3A               	movwf	(_encoderPolarityMenu+2)& (0+255),b
 12498                           
 12499                           ;menu.c: 1149: while(encoder_click == 0) {
 12500  007F68  D02D               	goto	l3754
 12501  007F6A                     
 12502                           ;menu.c: 1153: un_block_code();
 12503                           
 12504                           ; BSR set to: 1
 12505  007F6A  ECAD  F04C         	call	_un_block_code	;wreg free
 12506                           
 12507                           ;menu.c: 1155: if (lcd_print_once == 0) {
 12508  007F6E  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12509  007F70  D028               	goto	l3756
 12510                           
 12511                           ;menu.c: 1156: clear_row1();
 12512  007F72  EC18  F04C         	call	_clear_row1	;wreg free
 12513                           
 12514                           ;menu.c: 1157: Lcd_Print_String("Encoder Polarity");
 12515  007F76  0EEC               	movlw	low STR_39
 12516  007F78  0100               	movlb	0	; () banked
 12517  007F7A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12518  007F7C  0EFD               	movlw	high STR_39
 12519  007F7E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12520  007F80  EC76  F042         	call	_Lcd_Print_String	;wreg free
 12521                           
 12522                           ;menu.c: 1158: clear_row2();
 12523  007F84  EC04  F04C         	call	_clear_row2	;wreg free
 12524                           
 12525                           ;menu.c: 1159: Lcd_Print_String(LCD_STRINGS[(encoderPolarityMenu.selector % encoderPolar
      +                          ityMenu.number) + encoderPolarityMenu.address]);
 12526  007F88  0101               	movlb	1	; () banked
 12527  007F8A  5138               	movf	_encoderPolarityMenu& (0+255),w,b
 12528  007F8C  6EE6               	movwf	postinc1,c
 12529  007F8E  513A               	movf	(_encoderPolarityMenu+2)& (0+255),w,b
 12530  007F90  6EE6               	movwf	postinc1,c
 12531  007F92  EC63  F041         	call	___lbmod	;wreg free
 12532  007F96  503F               	movf	btemp,w,c
 12533  007F98  0101               	movlb	1	; () banked
 12534  007F9A  2539               	addwf	(_encoderPolarityMenu+1)& (0+255),w,b
 12535  007F9C  0100               	movlb	0	; () banked
 12536  007F9E  6F60               	movwf	___wmul@multiplier& (0+255),b
 12537  007FA0  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 12538  007FA2  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 12539  007FA4  0E00               	movlw	0
 12540  007FA6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12541  007FA8  0E11               	movlw	17
 12542  007FAA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 12543  007FAC  EC2C  F04C         	call	___wmul	;wreg free
 12544  007FB0  0E9E               	movlw	low _LCD_STRINGS
 12545  007FB2  0100               	movlb	0	; () banked
 12546  007FB4  2560               	addwf	?___wmul& (0+255),w,b
 12547  007FB6  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12548  007FB8  0EF3               	movlw	high _LCD_STRINGS
 12549  007FBA  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 12550  007FBC  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12551  007FBE  EC76  F042         	call	_Lcd_Print_String	;wreg free
 12552  007FC2                     l3756:
 12553                           
 12554                           ;menu.c: 1160: }
 12555                           ;menu.c: 1161: lcd_print_once = 1;
 12556  007FC2  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12557  007FC4                     l3754:
 12558  007FC4  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12559  007FC6  D7D1               	goto	l3755
 12560                           
 12561                           ;menu.c: 1162: }
 12562                           ;menu.c: 1165: encoderPolarity = encoderPolarityMenu.selector;
 12563  007FC8  0101               	movlb	1	; () banked
 12564  007FCA  A13A               	btfss	(_encoderPolarityMenu+2)& (0+255),0,b
 12565  007FCC  D002               	goto	u58670
 12566  007FCE  8405               	bsf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 12567  007FD0  D001               	goto	u58685
 12568  007FD2                     u58670:
 12569  007FD2  9405               	bcf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 12570  007FD4                     u58685:
 12571                           
 12572                           ;menu.c: 1166: (Busy_eep(), Write_b_eep(0x02,encoderPolarityMenu.selector));
 12573  007FD4  ECFC  F04C         	call	_Busy_eep	;wreg free
 12574  007FD8  0E00               	movlw	0
 12575  007FDA  0100               	movlb	0	; () banked
 12576  007FDC  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 12577  007FDE  0E02               	movlw	2
 12578  007FE0  6F60               	movwf	Write_b_eep@badd& (0+255),b
 12579  007FE2  C13A  F062         	movff	_encoderPolarityMenu+2,Write_b_eep@bdat
 12580  007FE6  EC6E  F04A         	call	_Write_b_eep	;wreg free
 12581                           
 12582                           ;menu.c: 1167: exitFunction();
 12583  007FEA  ECCC  F04A         	call	_exitFunction	;wreg free
 12584  007FEE  0012               	return		;funcret
 12585  007FF0                     __end_of_Function_G_4:
 12586                           	opt stack 0
 12587                           tblptru	equ	0xFF8
 12588                           tblptrh	equ	0xFF7
 12589                           tblptrl	equ	0xFF6
 12590                           tablat	equ	0xFF5
 12591                           prodh	equ	0xFF4
 12592                           prodl	equ	0xFF3
 12593                           intcon	equ	0xFF2
 12594                           intcon2	equ	0xFF1
 12595                           postinc0	equ	0xFEE
 12596                           wreg	equ	0xFE8
 12597                           postinc1	equ	0xFE6
 12598                           indf2	equ	0xFDF
 12599                           postinc2	equ	0xFDE
 12600                           postdec2	equ	0xFDD
 12601                           fsr2h	equ	0xFDA
 12602                           fsr2l	equ	0xFD9
 12603                           status	equ	0xFD8
 12604                           
 12605 ;; *************** function _exitFunction *****************
 12606 ;; Defined at:
 12607 ;;		line 242 in file "menu.c"
 12608 ;; Parameters:    Size  Location     Type
 12609 ;;		None
 12610 ;; Auto vars:     Size  Location     Type
 12611 ;;		None
 12612 ;; Return value:  Size  Location     Type
 12613 ;;                  1    wreg      void 
 12614 ;; Registers used:
 12615 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12616 ;; Tracked objects:
 12617 ;;		On entry : 0/0
 12618 ;;		On exit  : 0/0
 12619 ;;		Unchanged: 0/0
 12620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12623 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12624 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12625 ;;Total ram usage:        2 bytes
 12626 ;; Hardware stack levels used:    1
 12627 ;; Hardware stack levels required when called:    9
 12628 ;; This function calls:
 12629 ;;		_Lcd_Print_String
 12630 ;;		_clear_row1
 12631 ;; This function is called by:
 12632 ;;		_menu_lcd
 12633 ;;		_Function_G_4
 12634 ;; This function uses a non-reentrant model
 12635 ;;
 12636                           
 12637                           	psect	text27
 12638  009598                     __ptext27:
 12639                           	opt stack 0
 12640  009598                     _exitFunction:
 12641                           	opt stack 20
 12642                           
 12643                           ;menu.c: 245: while(encoder_click == 0);
 12644                           
 12645                           ;incstack = 0
 12646  009598  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12647  00959A  D7FE               	goto	_exitFunction
 12648                           
 12649                           ;menu.c: 251: clear_row1();
 12650  00959C  EC18  F04C         	call	_clear_row1	;wreg free
 12651                           
 12652                           ;menu.c: 252: Lcd_Print_String("Set!");
 12653  0095A0  0EC3               	movlw	low STR_20
 12654  0095A2  0100               	movlb	0	; () banked
 12655  0095A4  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12656  0095A6  0EFF               	movlw	high STR_20
 12657  0095A8  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12658  0095AA  EC76  F042         	call	_Lcd_Print_String	;wreg free
 12659                           
 12660                           ;menu.c: 255: _delay((unsigned long)((500)*(20000000/4000.0)));
 12661  0095AE  0E0D               	movlw	13
 12662  0095B0  0100               	movlb	0	; () banked
 12663  0095B2  6F6F               	movwf	(??_exitFunction+1)& (0+255),b
 12664  0095B4  0EAF               	movlw	175
 12665  0095B6  6F6E               	movwf	??_exitFunction& (0+255),b
 12666  0095B8  0EB6               	movlw	182
 12667  0095BA                     u67107:
 12668  0095BA  2EE8               	decfsz	wreg,f,c
 12669  0095BC  D7FE               	bra	u67107
 12670  0095BE  2F6E               	decfsz	??_exitFunction& (0+255),f,b
 12671  0095C0  D7FC               	bra	u67107
 12672  0095C2  2F6F               	decfsz	(??_exitFunction+1)& (0+255),f,b
 12673  0095C4  D7FA               	bra	u67107
 12674  0095C6  F000               	nop	
 12675                           
 12676                           ;menu.c: 256: which_screen = MAIN_MENU;
 12677  0095C8  0E02               	movlw	2
 12678  0095CA  6E4F               	movwf	_which_screen,c
 12679                           
 12680                           ;menu.c: 257: lcd_print_once = 0;
 12681  0095CC  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12682                           
 12683                           ;menu.c: 258: encoder_click = 0;
 12684  0095CE  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12685  0095D0  0012               	return		;funcret
 12686  0095D2                     __end_of_exitFunction:
 12687                           	opt stack 0
 12688                           tblptru	equ	0xFF8
 12689                           tblptrh	equ	0xFF7
 12690                           tblptrl	equ	0xFF6
 12691                           tablat	equ	0xFF5
 12692                           prodh	equ	0xFF4
 12693                           prodl	equ	0xFF3
 12694                           intcon	equ	0xFF2
 12695                           intcon2	equ	0xFF1
 12696                           postinc0	equ	0xFEE
 12697                           wreg	equ	0xFE8
 12698                           postinc1	equ	0xFE6
 12699                           indf2	equ	0xFDF
 12700                           postinc2	equ	0xFDE
 12701                           postdec2	equ	0xFDD
 12702                           fsr2h	equ	0xFDA
 12703                           fsr2l	equ	0xFD9
 12704                           status	equ	0xFD8
 12705                           
 12706 ;; *************** function _Function_G_3 *****************
 12707 ;; Defined at:
 12708 ;;		line 1123 in file "menu.c"
 12709 ;; Parameters:    Size  Location     Type
 12710 ;;		None
 12711 ;; Auto vars:     Size  Location     Type
 12712 ;;		None
 12713 ;; Return value:  Size  Location     Type
 12714 ;;                  1    wreg      void 
 12715 ;; Registers used:
 12716 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12717 ;; Tracked objects:
 12718 ;;		On entry : 0/0
 12719 ;;		On exit  : 0/0
 12720 ;;		Unchanged: 0/0
 12721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12724 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12725 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12726 ;;Total ram usage:        2 bytes
 12727 ;; Hardware stack levels used:    1
 12728 ;; Hardware stack levels required when called:    9
 12729 ;; This function calls:
 12730 ;;		_Busy_eep
 12731 ;;		_Lcd_Print_String
 12732 ;;		_Write_b_eep
 12733 ;;		_clear_row1
 12734 ;;		_clear_row2
 12735 ;; This function is called by:
 12736 ;;		_Function_G
 12737 ;; This function uses a non-reentrant model
 12738 ;;
 12739                           
 12740                           	psect	text28
 12741  0090DC                     __ptext28:
 12742                           	opt stack 0
 12743  0090DC                     _Function_G_3:
 12744                           	opt stack 19
 12745                           
 12746                           ;menu.c: 1126: while(encoder_click == 0);
 12747                           
 12748                           ;incstack = 0
 12749  0090DC  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12750  0090DE  D7FE               	goto	_Function_G_3
 12751                           
 12752                           ;menu.c: 1128: (Busy_eep(), Write_b_eep(0,0x00));
 12753  0090E0  ECFC  F04C         	call	_Busy_eep	;wreg free
 12754  0090E4  0E00               	movlw	0
 12755  0090E6  0100               	movlb	0	; () banked
 12756  0090E8  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 12757  0090EA  0E00               	movlw	0
 12758  0090EC  6F60               	movwf	Write_b_eep@badd& (0+255),b
 12759  0090EE  0E00               	movlw	0
 12760  0090F0  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 12761  0090F2  EC6E  F04A         	call	_Write_b_eep	;wreg free
 12762                           
 12763                           ;menu.c: 1130: clear_row1();
 12764  0090F6  EC18  F04C         	call	_clear_row1	;wreg free
 12765                           
 12766                           ;menu.c: 1131: Lcd_Print_String("Restore Setting!");
 12767  0090FA  0E86               	movlw	low STR_37
 12768  0090FC  0100               	movlb	0	; () banked
 12769  0090FE  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12770  009100  0EFD               	movlw	high STR_37
 12771  009102  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12772  009104  EC76  F042         	call	_Lcd_Print_String	;wreg free
 12773                           
 12774                           ;menu.c: 1132: clear_row2();
 12775  009108  EC04  F04C         	call	_clear_row2	;wreg free
 12776                           
 12777                           ;menu.c: 1133: Lcd_Print_String("Rebooting...");
 12778  00910C  0E25               	movlw	low STR_38
 12779  00910E  0100               	movlb	0	; () banked
 12780  009110  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12781  009112  0EFF               	movlw	high STR_38
 12782  009114  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12783  009116  EC76  F042         	call	_Lcd_Print_String	;wreg free
 12784                           
 12785                           ;menu.c: 1134: _delay((unsigned long)((2500)*(20000000/4000.0)));
 12786  00911A  0E40               	movlw	64
 12787  00911C  0100               	movlb	0	; () banked
 12788  00911E  6F6F               	movwf	(??_Function_G_3+1)& (0+255),b
 12789  009120  0E6A               	movlw	106
 12790  009122  6F6E               	movwf	??_Function_G_3& (0+255),b
 12791  009124  0E97               	movlw	151
 12792  009126                     u67117:
 12793  009126  2EE8               	decfsz	wreg,f,c
 12794  009128  D7FE               	bra	u67117
 12795  00912A  2F6E               	decfsz	??_Function_G_3& (0+255),f,b
 12796  00912C  D7FC               	bra	u67117
 12797  00912E  2F6F               	decfsz	(??_Function_G_3+1)& (0+255),f,b
 12798  009130  D7FA               	bra	u67117
 12799  009132  D000               	nop2	
 12800  009134  00FF               	reset		;# 
 12801  009136  0012               	return		;funcret
 12802  009138                     __end_of_Function_G_3:
 12803                           	opt stack 0
 12804                           tblptru	equ	0xFF8
 12805                           tblptrh	equ	0xFF7
 12806                           tblptrl	equ	0xFF6
 12807                           tablat	equ	0xFF5
 12808                           prodh	equ	0xFF4
 12809                           prodl	equ	0xFF3
 12810                           intcon	equ	0xFF2
 12811                           intcon2	equ	0xFF1
 12812                           postinc0	equ	0xFEE
 12813                           wreg	equ	0xFE8
 12814                           postinc1	equ	0xFE6
 12815                           indf2	equ	0xFDF
 12816                           postinc2	equ	0xFDE
 12817                           postdec2	equ	0xFDD
 12818                           fsr2h	equ	0xFDA
 12819                           fsr2l	equ	0xFD9
 12820                           status	equ	0xFD8
 12821                           
 12822 ;; *************** function _Function_G_2 *****************
 12823 ;; Defined at:
 12824 ;;		line 1090 in file "menu.c"
 12825 ;; Parameters:    Size  Location     Type
 12826 ;;		None
 12827 ;; Auto vars:     Size  Location     Type
 12828 ;;		None
 12829 ;; Return value:  Size  Location     Type
 12830 ;;                  1    wreg      void 
 12831 ;; Registers used:
 12832 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12833 ;; Tracked objects:
 12834 ;;		On entry : 0/0
 12835 ;;		On exit  : 0/0
 12836 ;;		Unchanged: 0/0
 12837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12842 ;;Total ram usage:        0 bytes
 12843 ;; Hardware stack levels used:    1
 12844 ;; Hardware stack levels required when called:   16
 12845 ;; This function calls:
 12846 ;;		_Busy_eep
 12847 ;;		_Lcd_Print_String
 12848 ;;		_Write_b_eep
 12849 ;;		___lbmod
 12850 ;;		___wmul
 12851 ;;		_clear_row1
 12852 ;;		_clear_row2
 12853 ;;		_eepromExit
 12854 ;;		_exitLoad
 12855 ;;		_loadFromEEPROM
 12856 ;;		_un_block_code
 12857 ;; This function is called by:
 12858 ;;		_Function_G
 12859 ;; This function uses a non-reentrant model
 12860 ;;
 12861                           
 12862                           	psect	text29
 12863  007D7A                     __ptext29:
 12864                           	opt stack 0
 12865  007D7A                     _Function_G_2:
 12866                           	opt stack 12
 12867                           
 12868                           ;menu.c: 1092: which_screen = SAVES_MENU;
 12869                           
 12870                           ;incstack = 0
 12871  007D7A  0E17               	movlw	23
 12872  007D7C  6E4F               	movwf	_which_screen,c
 12873                           
 12874                           ;menu.c: 1093: encoder_click = 0;
 12875  007D7E  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12876                           
 12877                           ;menu.c: 1094: lcd_print_once = 0;
 12878  007D80  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12879                           
 12880                           ;menu.c: 1096: while(encoder_click == 0) {
 12881  007D82  D02C               	goto	l3739
 12882  007D84                     
 12883                           ;menu.c: 1100: un_block_code();
 12884  007D84  ECAD  F04C         	call	_un_block_code	;wreg free
 12885                           
 12886                           ;menu.c: 1102: if (lcd_print_once == 0) {
 12887  007D88  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12888  007D8A  D027               	goto	l3741
 12889                           
 12890                           ;menu.c: 1103: clear_row1();
 12891  007D8C  EC18  F04C         	call	_clear_row1	;wreg free
 12892                           
 12893                           ;menu.c: 1104: Lcd_Print_String("Load #:");
 12894  007D90  0EB3               	movlw	low STR_36
 12895  007D92  0100               	movlb	0	; () banked
 12896  007D94  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12897  007D96  0EFF               	movlw	high STR_36
 12898  007D98  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12899  007D9A  EC76  F042         	call	_Lcd_Print_String	;wreg free
 12900                           
 12901                           ;menu.c: 1105: clear_row2();
 12902  007D9E  EC04  F04C         	call	_clear_row2	;wreg free
 12903                           
 12904                           ;menu.c: 1106: Lcd_Print_String(LCD_STRINGS[(savesMenu.selector % savesMenu.number) + sa
      +                          vesMenu.address]);
 12905  007DA2  0100               	movlb	0	; () banked
 12906  007DA4  51E2               	movf	_savesMenu& (0+255),w,b
 12907  007DA6  6EE6               	movwf	postinc1,c
 12908  007DA8  51E4               	movf	(_savesMenu+2)& (0+255),w,b
 12909  007DAA  6EE6               	movwf	postinc1,c
 12910  007DAC  EC63  F041         	call	___lbmod	;wreg free
 12911  007DB0  503F               	movf	btemp,w,c
 12912  007DB2  0100               	movlb	0	; () banked
 12913  007DB4  25E3               	addwf	(_savesMenu+1)& (0+255),w,b
 12914  007DB6  6F60               	movwf	___wmul@multiplier& (0+255),b
 12915  007DB8  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 12916  007DBA  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 12917  007DBC  0E00               	movlw	0
 12918  007DBE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12919  007DC0  0E11               	movlw	17
 12920  007DC2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 12921  007DC4  EC2C  F04C         	call	___wmul	;wreg free
 12922  007DC8  0E9E               	movlw	low _LCD_STRINGS
 12923  007DCA  0100               	movlb	0	; () banked
 12924  007DCC  2560               	addwf	?___wmul& (0+255),w,b
 12925  007DCE  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12926  007DD0  0EF3               	movlw	high _LCD_STRINGS
 12927  007DD2  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 12928  007DD4  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12929  007DD6  EC76  F042         	call	_Lcd_Print_String	;wreg free
 12930  007DDA                     l3741:
 12931                           
 12932                           ;menu.c: 1107: }
 12933                           ;menu.c: 1108: lcd_print_once = 1;
 12934  007DDA  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12935  007DDC                     l3739:
 12936  007DDC  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12937  007DDE  D7D2               	goto	l3740
 12938                           
 12939                           ;menu.c: 1109: }
 12940                           ;menu.c: 1111: if(savesMenu.selector == 4){eepromExit();}
 12941  007DE0  0E04               	movlw	4
 12942  007DE2  0100               	movlb	0	; () banked
 12943  007DE4  19E4               	xorwf	(_savesMenu+2)& (0+255),w,b
 12944  007DE6  A4D8               	btfss	status,2,c
 12945  007DE8  D003               	goto	l3743
 12946                           
 12947                           ; BSR set to: 0
 12948  007DEA  EC23  F04B         	call	_eepromExit	;wreg free
 12949  007DEE  D011               	goto	l3744
 12950  007DF0                     l3743:
 12951                           
 12952                           ;menu.c: 1112: else {
 12953                           ;menu.c: 1114: (Busy_eep(), Write_b_eep(0,(savesMenu.selector + 1)));
 12954  007DF0  ECFC  F04C         	call	_Busy_eep	;wreg free
 12955  007DF4  0E00               	movlw	0
 12956  007DF6  0100               	movlb	0	; () banked
 12957  007DF8  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 12958  007DFA  0E00               	movlw	0
 12959  007DFC  6F60               	movwf	Write_b_eep@badd& (0+255),b
 12960  007DFE  29E4               	incf	(_savesMenu+2)& (0+255),w,b
 12961  007E00  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 12962  007E02  EC6E  F04A         	call	_Write_b_eep	;wreg free
 12963                           
 12964                           ;menu.c: 1115: loadFromEEPROM(savesMenu.selector + 1);
 12965  007E06  0100               	movlb	0	; () banked
 12966  007E08  29E4               	incf	(_savesMenu+2)& (0+255),w,b
 12967  007E0A  ECD7  F025         	call	_loadFromEEPROM
 12968                           
 12969                           ;menu.c: 1116: exitLoad();
 12970  007E0E  ECE9  F04A         	call	_exitLoad	;wreg free
 12971  007E12                     l3744:
 12972                           
 12973                           ;menu.c: 1117: }
 12974                           ;menu.c: 1119: savesMenu.selector = 0;
 12975  007E12  0E00               	movlw	0
 12976  007E14  0100               	movlb	0	; () banked
 12977  007E16  6FE4               	movwf	(_savesMenu+2)& (0+255),b
 12978                           
 12979                           ; BSR set to: 0
 12980  007E18  0012               	return		;funcret
 12981  007E1A                     __end_of_Function_G_2:
 12982                           	opt stack 0
 12983                           tblptru	equ	0xFF8
 12984                           tblptrh	equ	0xFF7
 12985                           tblptrl	equ	0xFF6
 12986                           tablat	equ	0xFF5
 12987                           prodh	equ	0xFF4
 12988                           prodl	equ	0xFF3
 12989                           intcon	equ	0xFF2
 12990                           intcon2	equ	0xFF1
 12991                           postinc0	equ	0xFEE
 12992                           wreg	equ	0xFE8
 12993                           postinc1	equ	0xFE6
 12994                           indf2	equ	0xFDF
 12995                           postinc2	equ	0xFDE
 12996                           postdec2	equ	0xFDD
 12997                           fsr2h	equ	0xFDA
 12998                           fsr2l	equ	0xFD9
 12999                           status	equ	0xFD8
 13000                           
 13001 ;; *************** function _loadFromEEPROM *****************
 13002 ;; Defined at:
 13003 ;;		line 54 in file "eeprom.c"
 13004 ;; Parameters:    Size  Location     Type
 13005 ;;  slotNumber      1    wreg     unsigned char 
 13006 ;; Auto vars:     Size  Location     Type
 13007 ;;  slotNumber      1   77[BANK1 ] unsigned char 
 13008 ;;  byte_count      2   78[BANK1 ] unsigned int 
 13009 ;;  to_load        75    0[BANK1 ] unsigned char [75]
 13010 ;;  baseAddress     2   75[BANK1 ] unsigned int 
 13011 ;; Return value:  Size  Location     Type
 13012 ;;                  1    wreg      void 
 13013 ;; Registers used:
 13014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13015 ;; Tracked objects:
 13016 ;;		On entry : 0/0
 13017 ;;		On exit  : 0/0
 13018 ;;		Unchanged: 0/0
 13019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13021 ;;      Locals:         0       0      80       0       0       0       0       0       0       0       0       0       
      +0       0
 13022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13023 ;;      Totals:         0       0      80       0       0       0       0       0       0       0       0       0       
      +0       0
 13024 ;;Total ram usage:       80 bytes
 13025 ;; Hardware stack levels used:    1
 13026 ;; Hardware stack levels required when called:    7
 13027 ;; This function calls:
 13028 ;;		_Read_b_eep
 13029 ;;		_calculate_pulse_length
 13030 ;; This function is called by:
 13031 ;;		_Function_G_2
 13032 ;;		_selectSlotOnBoot
 13033 ;; This function uses a non-reentrant model
 13034 ;;
 13035                           
 13036                           	psect	text30
 13037  004BAE                     __ptext30:
 13038                           	opt stack 0
 13039  004BAE                     _loadFromEEPROM:
 13040                           	opt stack 22
 13041                           
 13042                           ; BSR set to: 0
 13043                           ;incstack = 0
 13044                           ;loadFromEEPROM@slotNumber stored from wreg
 13045  004BAE  0101               	movlb	1	; () banked
 13046  004BB0  6FE4               	movwf	loadFromEEPROM@slotNumber& (0+255),b
 13047                           
 13048                           ;eeprom.c: 56: unsigned int baseAddress = 0;
 13049  004BB2  0E00               	movlw	0
 13050  004BB4  0101               	movlb	1	; () banked
 13051  004BB6  6FE3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13052  004BB8  0E00               	movlw	0
 13053  004BBA  6FE2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13054                           
 13055                           ; BSR set to: 1
 13056                           ;eeprom.c: 59: if (slotNumber == SLOT1) {baseAddress = 128;}
 13057  004BBC  05E4               	decf	loadFromEEPROM@slotNumber& (0+255),w,b
 13058  004BBE  A4D8               	btfss	status,2,c
 13059  004BC0  D004               	goto	l4451
 13060                           
 13061                           ; BSR set to: 1
 13062  004BC2  0E00               	movlw	0
 13063  004BC4  6FE3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13064  004BC6  0E80               	movlw	128
 13065  004BC8  6FE2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13066  004BCA                     l4451:
 13067                           
 13068                           ; BSR set to: 1
 13069                           ;eeprom.c: 60: if (slotNumber == SLOT2) {baseAddress = 256;}
 13070                           
 13071                           ; BSR set to: 1
 13072  004BCA  0E02               	movlw	2
 13073  004BCC  19E4               	xorwf	loadFromEEPROM@slotNumber& (0+255),w,b
 13074  004BCE  A4D8               	btfss	status,2,c
 13075  004BD0  D004               	goto	l4452
 13076                           
 13077                           ; BSR set to: 1
 13078  004BD2  0E01               	movlw	1
 13079  004BD4  6FE3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13080  004BD6  0E00               	movlw	0
 13081  004BD8  6FE2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13082  004BDA                     l4452:
 13083                           
 13084                           ; BSR set to: 1
 13085                           ;eeprom.c: 61: if (slotNumber == SLOT3) {baseAddress = 384;}
 13086                           
 13087                           ; BSR set to: 1
 13088  004BDA  0E03               	movlw	3
 13089  004BDC  19E4               	xorwf	loadFromEEPROM@slotNumber& (0+255),w,b
 13090  004BDE  A4D8               	btfss	status,2,c
 13091  004BE0  D004               	goto	l4453
 13092                           
 13093                           ; BSR set to: 1
 13094  004BE2  0E01               	movlw	1
 13095  004BE4  6FE3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13096  004BE6  0E80               	movlw	128
 13097  004BE8  6FE2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13098  004BEA                     l4453:
 13099                           
 13100                           ; BSR set to: 1
 13101                           ;eeprom.c: 62: if (slotNumber == SLOT4) {baseAddress = 512;}
 13102                           
 13103                           ; BSR set to: 1
 13104  004BEA  0E04               	movlw	4
 13105  004BEC  19E4               	xorwf	loadFromEEPROM@slotNumber& (0+255),w,b
 13106  004BEE  A4D8               	btfss	status,2,c
 13107  004BF0  D004               	goto	l4454
 13108                           
 13109                           ; BSR set to: 1
 13110  004BF2  0E02               	movlw	2
 13111  004BF4  6FE3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13112  004BF6  0E00               	movlw	0
 13113  004BF8  6FE2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13114  004BFA                     l4454:
 13115                           
 13116                           ; BSR set to: 1
 13117                           ;eeprom.c: 65: unsigned char to_load[75];
 13118                           ;eeprom.c: 68: for (unsigned int byte_count = 0; byte_count < 75; byte_count++){
 13119  004BFA  0E00               	movlw	0
 13120  004BFC  6FE6               	movwf	(loadFromEEPROM@byte_count+1)& (0+255),b
 13121  004BFE  0E00               	movlw	0
 13122  004C00  6FE5               	movwf	loadFromEEPROM@byte_count& (0+255),b
 13123                           
 13124                           ; BSR set to: 1
 13125  004C02  51E6               	movf	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13126  004C04  E11C               	bnz	l4456
 13127  004C06  D017               	goto	L1
 13128  004C08                     
 13129                           ; BSR set to: 1
 13130                           ;eeprom.c: 69: to_load[byte_count] = Read_b_eep(byte_count + baseAddress);
 13131                           
 13132                           ; BSR set to: 1
 13133  004C08  0E97               	movlw	low loadFromEEPROM@to_load
 13134  004C0A  25E5               	addwf	loadFromEEPROM@byte_count& (0+255),w,b
 13135  004C0C  6ED9               	movwf	fsr2l,c
 13136  004C0E  0E01               	movlw	high loadFromEEPROM@to_load
 13137  004C10  21E6               	addwfc	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13138  004C12  6EDA               	movwf	fsr2h,c
 13139  004C14  51E2               	movf	loadFromEEPROM@baseAddress& (0+255),w,b
 13140  004C16  25E5               	addwf	loadFromEEPROM@byte_count& (0+255),w,b
 13141  004C18  0100               	movlb	0	; () banked
 13142  004C1A  6F60               	movwf	Read_b_eep@badd& (0+255),b
 13143  004C1C  0101               	movlb	1	; () banked
 13144  004C1E  51E3               	movf	(loadFromEEPROM@baseAddress+1)& (0+255),w,b
 13145  004C20  21E6               	addwfc	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13146  004C22  0100               	movlb	0	; () banked
 13147  004C24  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
 13148  004C26  EC93  F04C         	call	_Read_b_eep	;wreg free
 13149  004C2A  6EDF               	movwf	indf2,c
 13150  004C2C  0101               	movlb	1	; () banked
 13151  004C2E  4BE5               	infsnz	loadFromEEPROM@byte_count& (0+255),f,b
 13152  004C30  2BE6               	incf	(loadFromEEPROM@byte_count+1)& (0+255),f,b
 13153                           
 13154                           ; BSR set to: 1
 13155  004C32  51E6               	movf	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13156  004C34  E104               	bnz	u57270
 13157  004C36                     L1:
 13158  004C36  0E4B               	movlw	75
 13159  004C38  5DE5               	subwf	loadFromEEPROM@byte_count& (0+255),w,b
 13160  004C3A  A0D8               	btfss	status,0,c
 13161  004C3C  D7E5               	goto	l4455
 13162  004C3E                     u57270:
 13163  004C3E                     l4456:
 13164                           
 13165                           ; BSR set to: 1
 13166                           ;eeprom.c: 70: }
 13167                           ;eeprom.c: 75: KEYBOARD_MODE = to_load[0];
 13168  004C3E  C197  F0F2         	movff	loadFromEEPROM@to_load,_KEYBOARD_MODE
 13169                           
 13170                           ;eeprom.c: 76: which_mode = to_load[1];
 13171  004C42  C198  F0F1         	movff	loadFromEEPROM@to_load+1,_which_mode
 13172                           
 13173                           ;eeprom.c: 77: which_triad = to_load[2];
 13174  004C46  C199  F0F0         	movff	loadFromEEPROM@to_load+2,_which_triad
 13175                           
 13176                           ;eeprom.c: 78: which_seventh = to_load[3];
 13177  004C4A  C19A  F0EF         	movff	loadFromEEPROM@to_load+3,_which_seventh
 13178                           
 13179                           ;eeprom.c: 81: TRANSPOSE_MODE = to_load[4];
 13180  004C4E  A19B               	btfss	(loadFromEEPROM@to_load+4)& (0+255),0,b
 13181  004C50  D002               	goto	u57280
 13182  004C52  8A04               	bsf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 13183  004C54  D001               	goto	u57295
 13184  004C56                     u57280:
 13185  004C56  9A04               	bcf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 13186  004C58                     u57295:
 13187                           
 13188                           ;eeprom.c: 84: DRUM_MODE = to_load[5];
 13189  004C58  0101               	movlb	1	; () banked
 13190  004C5A  A19C               	btfss	(loadFromEEPROM@to_load+5)& (0+255),0,b
 13191  004C5C  D002               	goto	u57300
 13192  004C5E  8801               	bsf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 13193  004C60  D001               	goto	u57315
 13194  004C62                     u57300:
 13195  004C62  9801               	bcf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 13196  004C64                     u57315:
 13197                           
 13198                           ;eeprom.c: 85: CONTROL_MODE = to_load[6];
 13199  004C64  0101               	movlb	1	; () banked
 13200  004C66  A19D               	btfss	(loadFromEEPROM@to_load+6)& (0+255),0,b
 13201  004C68  D002               	goto	u57320
 13202  004C6A  8601               	bsf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 13203  004C6C  D001               	goto	u57335
 13204  004C6E                     u57320:
 13205  004C6E  9601               	bcf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 13206  004C70                     u57335:
 13207                           
 13208                           ;eeprom.c: 88: DRUM_NOTE[0] = to_load[7];
 13209  004C70  C19E  F1E7         	movff	loadFromEEPROM@to_load+7,_DRUM_NOTE
 13210                           
 13211                           ;eeprom.c: 89: DRUM_NOTE[1] = to_load[8];
 13212  004C74  C19F  F1E8         	movff	loadFromEEPROM@to_load+8,_DRUM_NOTE+1
 13213                           
 13214                           ;eeprom.c: 90: DRUM_NOTE[2] = to_load[9];
 13215  004C78  C1A0  F1E9         	movff	loadFromEEPROM@to_load+9,_DRUM_NOTE+2
 13216                           
 13217                           ;eeprom.c: 91: DRUM_NOTE[3] = to_load[10];
 13218  004C7C  C1A1  F1EA         	movff	loadFromEEPROM@to_load+10,_DRUM_NOTE+3
 13219                           
 13220                           ;eeprom.c: 92: DRUM_NOTE[4] = to_load[11];
 13221  004C80  C1A2  F1EB         	movff	loadFromEEPROM@to_load+11,_DRUM_NOTE+4
 13222                           
 13223                           ;eeprom.c: 93: DRUM_NOTE[5] = to_load[12];
 13224  004C84  C1A3  F1EC         	movff	loadFromEEPROM@to_load+12,_DRUM_NOTE+5
 13225                           
 13226                           ;eeprom.c: 94: DRUM_NOTE[6] = to_load[13];
 13227  004C88  C1A4  F1ED         	movff	loadFromEEPROM@to_load+13,_DRUM_NOTE+6
 13228                           
 13229                           ;eeprom.c: 95: DRUM_NOTE[7] = to_load[14];
 13230  004C8C  C1A5  F1EE         	movff	loadFromEEPROM@to_load+14,_DRUM_NOTE+7
 13231                           
 13232                           ;eeprom.c: 98: DRUM_CC[0] = to_load[15];
 13233  004C90  C1A6  F0F5         	movff	loadFromEEPROM@to_load+15,_DRUM_CC
 13234                           
 13235                           ;eeprom.c: 99: DRUM_CC[1] = to_load[16];
 13236  004C94  C1A7  F0F6         	movff	loadFromEEPROM@to_load+16,_DRUM_CC+1
 13237                           
 13238                           ;eeprom.c: 100: DRUM_CC[2] = to_load[17];
 13239  004C98  C1A8  F0F7         	movff	loadFromEEPROM@to_load+17,_DRUM_CC+2
 13240                           
 13241                           ;eeprom.c: 101: DRUM_CC[3] = to_load[18];
 13242  004C9C  C1A9  F0F8         	movff	loadFromEEPROM@to_load+18,_DRUM_CC+3
 13243                           
 13244                           ;eeprom.c: 102: DRUM_CC[4] = to_load[19];
 13245  004CA0  C1AA  F0F9         	movff	loadFromEEPROM@to_load+19,_DRUM_CC+4
 13246                           
 13247                           ;eeprom.c: 103: DRUM_CC[5] = to_load[20];
 13248  004CA4  C1AB  F0FA         	movff	loadFromEEPROM@to_load+20,_DRUM_CC+5
 13249                           
 13250                           ;eeprom.c: 104: DRUM_CC[6] = to_load[21];
 13251  004CA8  C1AC  F0FB         	movff	loadFromEEPROM@to_load+21,_DRUM_CC+6
 13252                           
 13253                           ;eeprom.c: 105: DRUM_CC[7] = to_load[22];
 13254  004CAC  C1AD  F0FC         	movff	loadFromEEPROM@to_load+22,_DRUM_CC+7
 13255                           
 13256                           ;eeprom.c: 108: POT_MODE = to_load[23];
 13257  004CB0  0101               	movlb	1	; () banked
 13258  004CB2  A1AE               	btfss	(loadFromEEPROM@to_load+23)& (0+255),0,b
 13259  004CB4  D002               	goto	u57340
 13260  004CB6  8A05               	bsf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 13261  004CB8  D001               	goto	u57355
 13262  004CBA                     u57340:
 13263  004CBA  9A05               	bcf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 13264  004CBC                     u57355:
 13265                           
 13266                           ;eeprom.c: 111: inputPotsArray[0].controller_number = to_load[24];
 13267  004CBC  C1AF  F289         	movff	loadFromEEPROM@to_load+24,_inputPotsArray+1
 13268                           
 13269                           ;eeprom.c: 112: inputPotsArray[0].controller_number_two_byte = to_load[25];
 13270  004CC0  C1B0  F28A         	movff	loadFromEEPROM@to_load+25,_inputPotsArray+2
 13271                           
 13272                           ;eeprom.c: 114: inputPotsArray[1].controller_number = to_load[26];
 13273  004CC4  C1B1  F28C         	movff	loadFromEEPROM@to_load+26,_inputPotsArray+4
 13274                           
 13275                           ;eeprom.c: 115: inputPotsArray[1].controller_number_two_byte = to_load[27];
 13276  004CC8  C1B2  F28D         	movff	loadFromEEPROM@to_load+27,_inputPotsArray+5
 13277                           
 13278                           ;eeprom.c: 117: inputPotsArray[2].controller_number = to_load[28];
 13279  004CCC  C1B3  F28F         	movff	loadFromEEPROM@to_load+28,_inputPotsArray+7
 13280                           
 13281                           ;eeprom.c: 118: inputPotsArray[2].controller_number_two_byte = to_load[29];
 13282  004CD0  C1B4  F290         	movff	loadFromEEPROM@to_load+29,_inputPotsArray+8
 13283                           
 13284                           ;eeprom.c: 120: inputPotsArray[3].controller_number = to_load[30];
 13285  004CD4  C1B5  F292         	movff	loadFromEEPROM@to_load+30,_inputPotsArray+10
 13286                           
 13287                           ;eeprom.c: 121: inputPotsArray[3].controller_number_two_byte = to_load[31];
 13288  004CD8  C1B6  F293         	movff	loadFromEEPROM@to_load+31,_inputPotsArray+11
 13289                           
 13290                           ;eeprom.c: 123: inputPotsArray[4].controller_number = to_load[32];
 13291  004CDC  C1B7  F295         	movff	loadFromEEPROM@to_load+32,_inputPotsArray+13
 13292                           
 13293                           ;eeprom.c: 124: inputPotsArray[4].controller_number_two_byte = to_load[33];
 13294  004CE0  C1B8  F296         	movff	loadFromEEPROM@to_load+33,_inputPotsArray+14
 13295                           
 13296                           ;eeprom.c: 126: inputPotsArray[5].controller_number = to_load[34];
 13297  004CE4  C1B9  F298         	movff	loadFromEEPROM@to_load+34,_inputPotsArray+16
 13298                           
 13299                           ;eeprom.c: 127: inputPotsArray[5].controller_number_two_byte = to_load[35];
 13300  004CE8  C1BA  F299         	movff	loadFromEEPROM@to_load+35,_inputPotsArray+17
 13301                           
 13302                           ;eeprom.c: 129: inputPotsArray[6].controller_number = to_load[36];
 13303  004CEC  C1BB  F29B         	movff	loadFromEEPROM@to_load+36,_inputPotsArray+19
 13304                           
 13305                           ;eeprom.c: 130: inputPotsArray[6].controller_number_two_byte = to_load[37];
 13306  004CF0  C1BC  F29C         	movff	loadFromEEPROM@to_load+37,_inputPotsArray+20
 13307                           
 13308                           ;eeprom.c: 134: inputPotsArray[7].controller_number = to_load[38];
 13309  004CF4  C1BD  F29E         	movff	loadFromEEPROM@to_load+38,_inputPotsArray+22
 13310                           
 13311                           ;eeprom.c: 135: inputPotsArray[7].controller_number_two_byte = to_load[39];
 13312  004CF8  C1BE  F29F         	movff	loadFromEEPROM@to_load+39,_inputPotsArray+23
 13313                           
 13314                           ;eeprom.c: 137: inputPotsArray[8].controller_number = to_load[40];
 13315  004CFC  C1BF  F2A1         	movff	loadFromEEPROM@to_load+40,_inputPotsArray+25
 13316                           
 13317                           ;eeprom.c: 138: inputPotsArray[8].controller_number_two_byte = to_load[41];
 13318  004D00  C1C0  F2A2         	movff	loadFromEEPROM@to_load+41,_inputPotsArray+26
 13319                           
 13320                           ;eeprom.c: 140: inputPotsArray[9].controller_number = to_load[42];
 13321  004D04  C1C1  F2A4         	movff	loadFromEEPROM@to_load+42,_inputPotsArray+28
 13322                           
 13323                           ;eeprom.c: 141: inputPotsArray[9].controller_number_two_byte = to_load[43];
 13324  004D08  C1C2  F2A5         	movff	loadFromEEPROM@to_load+43,_inputPotsArray+29
 13325                           
 13326                           ;eeprom.c: 143: inputPotsArray[10].controller_number = to_load[44];
 13327  004D0C  C1C3  F2A7         	movff	loadFromEEPROM@to_load+44,_inputPotsArray+31
 13328                           
 13329                           ;eeprom.c: 144: inputPotsArray[10].controller_number_two_byte = to_load[45];
 13330  004D10  C1C4  F2A8         	movff	loadFromEEPROM@to_load+45,_inputPotsArray+32
 13331                           
 13332                           ;eeprom.c: 146: inputPotsArray[11].controller_number = to_load[46];
 13333  004D14  C1C5  F2AA         	movff	loadFromEEPROM@to_load+46,_inputPotsArray+34
 13334                           
 13335                           ;eeprom.c: 147: inputPotsArray[11].controller_number_two_byte = to_load[47];
 13336  004D18  C1C6  F2AB         	movff	loadFromEEPROM@to_load+47,_inputPotsArray+35
 13337                           
 13338                           ;eeprom.c: 149: inputPotsArray[12].controller_number = to_load[48];
 13339  004D1C  C1C7  F2AD         	movff	loadFromEEPROM@to_load+48,_inputPotsArray+37
 13340                           
 13341                           ;eeprom.c: 150: inputPotsArray[12].controller_number_two_byte = to_load[49];
 13342  004D20  C1C8  F2AE         	movff	loadFromEEPROM@to_load+49,_inputPotsArray+38
 13343                           
 13344                           ;eeprom.c: 152: inputPotsArray[13].controller_number = to_load[50];
 13345  004D24  C1C9  F2B0         	movff	loadFromEEPROM@to_load+50,_inputPotsArray+40
 13346                           
 13347                           ;eeprom.c: 153: inputPotsArray[13].controller_number_two_byte = to_load[51];
 13348  004D28  C1CA  F2B1         	movff	loadFromEEPROM@to_load+51,_inputPotsArray+41
 13349                           
 13350                           ;eeprom.c: 155: inputPotsArray[14].controller_number = to_load[52];
 13351  004D2C  C1CB  F2B3         	movff	loadFromEEPROM@to_load+52,_inputPotsArray+43
 13352                           
 13353                           ;eeprom.c: 156: inputPotsArray[14].controller_number_two_byte = to_load[53];
 13354  004D30  C1CC  F2B4         	movff	loadFromEEPROM@to_load+53,_inputPotsArray+44
 13355                           
 13356                           ;eeprom.c: 158: inputPotsArray[15].controller_number = to_load[54];
 13357  004D34  C1CD  F2B6         	movff	loadFromEEPROM@to_load+54,_inputPotsArray+46
 13358                           
 13359                           ;eeprom.c: 159: inputPotsArray[15].controller_number_two_byte = to_load[55];
 13360  004D38  C1CE  F2B7         	movff	loadFromEEPROM@to_load+55,_inputPotsArray+47
 13361                           
 13362                           ;eeprom.c: 163: channel = to_load[56];
 13363  004D3C  C1CF  F03E         	movff	loadFromEEPROM@to_load+56,_channel
 13364                           
 13365                           ;eeprom.c: 164: drumchannel = to_load[57];
 13366  004D40  C1D0  F052         	movff	loadFromEEPROM@to_load+57,_drumchannel
 13367                           
 13368                           ;eeprom.c: 167: octave = to_load[58];
 13369  004D44  C1D1  F050         	movff	loadFromEEPROM@to_load+58,_octave
 13370                           
 13371                           ;eeprom.c: 168: semitone = to_load[59];
 13372  004D48  C1D2  F03B         	movff	loadFromEEPROM@to_load+59,_semitone
 13373                           
 13374                           ;eeprom.c: 171: patch_number = to_load[60];
 13375  004D4C  C1D3  F0F3         	movff	loadFromEEPROM@to_load+60,_patch_number
 13376                           
 13377                           ;eeprom.c: 174: ARPEGGIO_ON = to_load[61];
 13378  004D50  0101               	movlb	1	; () banked
 13379  004D52  A1D4               	btfss	(loadFromEEPROM@to_load+61)& (0+255),0,b
 13380  004D54  D002               	goto	u57360
 13381  004D56  8604               	bsf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 13382  004D58  D001               	goto	u57375
 13383  004D5A                     u57360:
 13384  004D5A  9604               	bcf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 13385  004D5C                     u57375:
 13386                           
 13387                           ;eeprom.c: 175: BPM = to_load[62];
 13388  004D5C  C1D5  F0FF         	movff	loadFromEEPROM@to_load+62,_BPM
 13389                           
 13390                           ;eeprom.c: 177: TIMER_PRELOAD = calculate_pulse_length();
 13391  004D60  EC41  F02F         	call	_calculate_pulse_length	;wreg free
 13392  004D64  C0C2  F17B         	movff	?_calculate_pulse_length,_TIMER_PRELOAD
 13393  004D68  C0C3  F17C         	movff	?_calculate_pulse_length+1,_TIMER_PRELOAD+1
 13394                           
 13395                           ;eeprom.c: 179: OCTAVES = to_load[63];
 13396  004D6C  C1D6  F04E         	movff	loadFromEEPROM@to_load+63,_OCTAVES
 13397                           
 13398                           ;eeprom.c: 180: ARPEGGIO_TYPE = to_load[64];
 13399  004D70  C1D7  F035         	movff	loadFromEEPROM@to_load+64,_ARPEGGIO_TYPE
 13400                           
 13401                           ;eeprom.c: 181: NOTE_LENGTH_PULSES = to_load[65];
 13402  004D74  C1D8  F04D         	movff	loadFromEEPROM@to_load+65,_NOTE_LENGTH_PULSES
 13403                           
 13404                           ;eeprom.c: 182: LATCH = to_load[66];
 13405  004D78  0101               	movlb	1	; () banked
 13406  004D7A  A1D9               	btfss	(loadFromEEPROM@to_load+66)& (0+255),0,b
 13407  004D7C  D002               	goto	u57380
 13408  004D7E  8004               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 13409  004D80  D001               	goto	u57395
 13410  004D82                     u57380:
 13411  004D82  9004               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
 13412  004D84                     u57395:
 13413                           
 13414                           ;eeprom.c: 185: if(LATCH == 1){latch_was_pressed = 1;}
 13415  004D84  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 13416  004D86  8A03               	bsf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 13417                           
 13418                           ;eeprom.c: 187: AUTO_LATCH = to_load[67];
 13419  004D88  0101               	movlb	1	; () banked
 13420  004D8A  A1DA               	btfss	(loadFromEEPROM@to_load+67)& (0+255),0,b
 13421  004D8C  D002               	goto	u57410
 13422  004D8E  8C03               	bsf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 13423  004D90  D001               	goto	u57425
 13424  004D92                     u57410:
 13425  004D92  9C03               	bcf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 13426  004D94                     u57425:
 13427                           
 13428                           ;eeprom.c: 188: UN_LATCH_MODE = to_load[68];
 13429  004D94  0101               	movlb	1	; () banked
 13430  004D96  A1DB               	btfss	(loadFromEEPROM@to_load+68)& (0+255),0,b
 13431  004D98  D002               	goto	u57430
 13432  004D9A  8E03               	bsf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 13433  004D9C  D001               	goto	u57445
 13434  004D9E                     u57430:
 13435  004D9E  9E03               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 13436  004DA0                     u57445:
 13437                           
 13438                           ;eeprom.c: 189: AUTO_RANDOMIZE = to_load[69];
 13439  004DA0  0101               	movlb	1	; () banked
 13440  004DA2  A1DC               	btfss	(loadFromEEPROM@to_load+69)& (0+255),0,b
 13441  004DA4  D002               	goto	u57450
 13442  004DA6  8803               	bsf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 13443  004DA8  D001               	goto	u57465
 13444  004DAA                     u57450:
 13445  004DAA  9803               	bcf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 13446  004DAC                     u57465:
 13447                           
 13448                           ;eeprom.c: 190: skipFirstLast = to_load[70];
 13449  004DAC  0101               	movlb	1	; () banked
 13450  004DAE  A1DD               	btfss	(loadFromEEPROM@to_load+70)& (0+255),0,b
 13451  004DB0  D002               	goto	u57470
 13452  004DB2  8603               	bsf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 13453  004DB4  D001               	goto	u57485
 13454  004DB6                     u57470:
 13455  004DB6  9603               	bcf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 13456  004DB8                     u57485:
 13457                           
 13458                           ;eeprom.c: 191: LAST_NOTE_MODE_KEY_PRESS = to_load[71];
 13459  004DB8  0101               	movlb	1	; () banked
 13460  004DBA  A1DE               	btfss	(loadFromEEPROM@to_load+71)& (0+255),0,b
 13461  004DBC  D002               	goto	u57490
 13462  004DBE  8203               	bsf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 13463  004DC0  D001               	goto	u57505
 13464  004DC2                     u57490:
 13465  004DC2  9203               	bcf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 13466  004DC4                     u57505:
 13467                           
 13468                           ;eeprom.c: 192: LAST_NOTE_MODE_KEY_RELEASE = to_load[72];
 13469  004DC4  0101               	movlb	1	; () banked
 13470  004DC6  A1DF               	btfss	(loadFromEEPROM@to_load+72)& (0+255),0,b
 13471  004DC8  D002               	goto	u57510
 13472  004DCA  8003               	bsf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 13473  004DCC  D001               	goto	u57525
 13474  004DCE                     u57510:
 13475  004DCE  9003               	bcf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 13476  004DD0                     u57525:
 13477                           
 13478                           ;eeprom.c: 193: LAST_NOTE_MODE_TRANSPOSE = to_load[73];
 13479  004DD0  0101               	movlb	1	; () banked
 13480  004DD2  A1E0               	btfss	(loadFromEEPROM@to_load+73)& (0+255),0,b
 13481  004DD4  D002               	goto	u57530
 13482  004DD6  8E02               	bsf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 13483  004DD8  D001               	goto	u57545
 13484  004DDA                     u57530:
 13485  004DDA  9E02               	bcf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 13486  004DDC                     u57545:
 13487                           
 13488                           ;eeprom.c: 194: LAST_NOTE_MODE_RESET = to_load[74];
 13489  004DDC  0101               	movlb	1	; () banked
 13490  004DDE  A1E1               	btfss	(loadFromEEPROM@to_load+74)& (0+255),0,b
 13491  004DE0  D002               	goto	u57550
 13492  004DE2  8C02               	bsf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 13493  004DE4  0012               	return	
 13494  004DE6                     u57550:
 13495  004DE6  9C02               	bcf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 13496  004DE8  0012               	return		;funcret
 13497  004DEA                     __end_of_loadFromEEPROM:
 13498                           	opt stack 0
 13499                           tblptru	equ	0xFF8
 13500                           tblptrh	equ	0xFF7
 13501                           tblptrl	equ	0xFF6
 13502                           tablat	equ	0xFF5
 13503                           prodh	equ	0xFF4
 13504                           prodl	equ	0xFF3
 13505                           intcon	equ	0xFF2
 13506                           intcon2	equ	0xFF1
 13507                           postinc0	equ	0xFEE
 13508                           wreg	equ	0xFE8
 13509                           postinc1	equ	0xFE6
 13510                           indf2	equ	0xFDF
 13511                           postinc2	equ	0xFDE
 13512                           postdec2	equ	0xFDD
 13513                           fsr2h	equ	0xFDA
 13514                           fsr2l	equ	0xFD9
 13515                           status	equ	0xFD8
 13516                           
 13517 ;; *************** function _calculate_pulse_length *****************
 13518 ;; Defined at:
 13519 ;;		line 150 in file "arpeggio.c"
 13520 ;; Parameters:    Size  Location     Type
 13521 ;;		None
 13522 ;; Auto vars:     Size  Location     Type
 13523 ;;  s_tick          4  100[BANK0 ] void 
 13524 ;; Return value:  Size  Location     Type
 13525 ;;                  2   98[BANK0 ] unsigned short 
 13526 ;; Registers used:
 13527 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13528 ;; Tracked objects:
 13529 ;;		On entry : 0/0
 13530 ;;		On exit  : 0/0
 13531 ;;		Unchanged: 0/0
 13532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13533 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13534 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13536 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13537 ;;Total ram usage:       10 bytes
 13538 ;; Hardware stack levels used:    1
 13539 ;; Hardware stack levels required when called:    6
 13540 ;; This function calls:
 13541 ;;		___fladd
 13542 ;;		___fldiv
 13543 ;;		___flmul
 13544 ;;		___flneg
 13545 ;;		___fltol
 13546 ;;		___xxtofl
 13547 ;; This function is called by:
 13548 ;;		_Function_H_2
 13549 ;;		_loadFromEEPROM
 13550 ;;		_main
 13551 ;; This function uses a non-reentrant model
 13552 ;;
 13553                           
 13554                           	psect	text31
 13555  005E82                     __ptext31:
 13556                           	opt stack 0
 13557  005E82                     _calculate_pulse_length:
 13558                           	opt stack 22
 13559                           
 13560                           ;arpeggio.c: 157: double s_tick = 1.0 / ((BPM * PPQN) / 60.0);
 13561                           
 13562                           ;incstack = 0
 13563  005E82  0E00               	movlw	0
 13564  005E84  0100               	movlb	0	; () banked
 13565  005E86  6F8B               	movwf	___fldiv@a& (0+255),b
 13566  005E88  0E00               	movlw	0
 13567  005E8A  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 13568  005E8C  0E70               	movlw	112
 13569  005E8E  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 13570  005E90  0E42               	movlw	66
 13571  005E92  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 13572  005E94  51FF               	movf	_BPM& (0+255),w,b
 13573  005E96  0101               	movlb	1	; () banked
 13574  005E98  03F6               	mulwf	_PPQN& (0+255),b
 13575  005E9A  CFF3 F060          	movff	prodl,___xxtofl@val
 13576  005E9E  CFF4 F061          	movff	prodh,___xxtofl@val+1
 13577  005EA2  0100               	movlb	0	; () banked
 13578  005EA4  0E00               	movlw	0
 13579  005EA6  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 13580  005EA8  0EFF               	movlw	-1
 13581  005EAA  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 13582  005EAC  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 13583  005EAE  0E01               	movlw	1
 13584  005EB0  ECF4  F02F         	call	___xxtofl
 13585  005EB4  C060  F087         	movff	?___xxtofl,___fldiv@b
 13586  005EB8  C061  F088         	movff	?___xxtofl+1,___fldiv@b+1
 13587  005EBC  C062  F089         	movff	?___xxtofl+2,___fldiv@b+2
 13588  005EC0  C063  F08A         	movff	?___xxtofl+3,___fldiv@b+3
 13589  005EC4  EC1D  F01E         	call	___fldiv	;wreg free
 13590  005EC8  C087  F0C8         	movff	?___fldiv,_calculate_pulse_length$5908
 13591  005ECC  C088  F0C9         	movff	?___fldiv+1,_calculate_pulse_length$5908+1
 13592  005ED0  C089  F0CA         	movff	?___fldiv+2,_calculate_pulse_length$5908+2
 13593  005ED4  C08A  F0CB         	movff	?___fldiv+3,_calculate_pulse_length$5908+3
 13594                           
 13595                           ;arpeggio.c: 157: double s_tick = 1.0 / ((BPM * PPQN) / 60.0);
 13596  005ED8  0E00               	movlw	0
 13597  005EDA  0100               	movlb	0	; () banked
 13598  005EDC  6F87               	movwf	___fldiv@b& (0+255),b
 13599  005EDE  0E00               	movlw	0
 13600  005EE0  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 13601  005EE2  0E80               	movlw	128
 13602  005EE4  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 13603  005EE6  0E3F               	movlw	63
 13604  005EE8  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 13605  005EEA  C0C8  F08B         	movff	_calculate_pulse_length$5908,___fldiv@a
 13606  005EEE  C0C9  F08C         	movff	_calculate_pulse_length$5908+1,___fldiv@a+1
 13607  005EF2  C0CA  F08D         	movff	_calculate_pulse_length$5908+2,___fldiv@a+2
 13608  005EF6  C0CB  F08E         	movff	_calculate_pulse_length$5908+3,___fldiv@a+3
 13609  005EFA  EC1D  F01E         	call	___fldiv	;wreg free
 13610  005EFE  C087  F0C4         	movff	?___fldiv,calculate_pulse_length@s_tick
 13611  005F02  C088  F0C5         	movff	?___fldiv+1,calculate_pulse_length@s_tick+1
 13612  005F06  C089  F0C6         	movff	?___fldiv+2,calculate_pulse_length@s_tick+2
 13613  005F0A  C08A  F0C7         	movff	?___fldiv+3,calculate_pulse_length@s_tick+3
 13614                           
 13615                           ;arpeggio.c: 158: return (unsigned short) ((65535.0 - (s_tick * 20000000.0) / ( 4.0 * PR
      +                          ESCALER)) + 0.5);
 13616  005F0E  0E80               	movlw	128
 13617  005F10  0100               	movlb	0	; () banked
 13618  005F12  6FA8               	movwf	___fladd@a& (0+255),b
 13619  005F14  0EFF               	movlw	255
 13620  005F16  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 13621  005F18  0E7F               	movlw	127
 13622  005F1A  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 13623  005F1C  0E47               	movlw	71
 13624  005F1E  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 13625  005F20  0E00               	movlw	0
 13626  005F22  6F72               	movwf	___flmul@a& (0+255),b
 13627  005F24  0E00               	movlw	0
 13628  005F26  6F73               	movwf	(___flmul@a+1)& (0+255),b
 13629  005F28  0E80               	movlw	128
 13630  005F2A  6F74               	movwf	(___flmul@a+2)& (0+255),b
 13631  005F2C  0E40               	movlw	64
 13632  005F2E  6F75               	movwf	(___flmul@a+3)& (0+255),b
 13633  005F30  0101               	movlb	1	; () banked
 13634  005F32  51F5               	movf	_PRESCALER& (0+255),w,b
 13635  005F34  0100               	movlb	0	; () banked
 13636  005F36  6F60               	movwf	___xxtofl@val& (0+255),b
 13637  005F38  6B61               	clrf	(___xxtofl@val+1)& (0+255),b
 13638  005F3A  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 13639  005F3C  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 13640  005F3E  0E00               	movlw	0
 13641  005F40  ECF4  F02F         	call	___xxtofl
 13642  005F44  C060  F06E         	movff	?___xxtofl,___flmul@b
 13643  005F48  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 13644  005F4C  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 13645  005F50  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 13646  005F54  ECF2  F017         	call	___flmul	;wreg free
 13647  005F58  C06E  F08B         	movff	?___flmul,___fldiv@a
 13648  005F5C  C06F  F08C         	movff	?___flmul+1,___fldiv@a+1
 13649  005F60  C070  F08D         	movff	?___flmul+2,___fldiv@a+2
 13650  005F64  C071  F08E         	movff	?___flmul+3,___fldiv@a+3
 13651  005F68  0E80               	movlw	128
 13652  005F6A  0100               	movlb	0	; () banked
 13653  005F6C  6F72               	movwf	___flmul@a& (0+255),b
 13654  005F6E  0E96               	movlw	150
 13655  005F70  6F73               	movwf	(___flmul@a+1)& (0+255),b
 13656  005F72  0E98               	movlw	152
 13657  005F74  6F74               	movwf	(___flmul@a+2)& (0+255),b
 13658  005F76  0E4B               	movlw	75
 13659  005F78  6F75               	movwf	(___flmul@a+3)& (0+255),b
 13660  005F7A  C0C4  F06E         	movff	calculate_pulse_length@s_tick,___flmul@b
 13661  005F7E  C0C5  F06F         	movff	calculate_pulse_length@s_tick+1,___flmul@b+1
 13662  005F82  C0C6  F070         	movff	calculate_pulse_length@s_tick+2,___flmul@b+2
 13663  005F86  C0C7  F071         	movff	calculate_pulse_length@s_tick+3,___flmul@b+3
 13664  005F8A  ECF2  F017         	call	___flmul	;wreg free
 13665  005F8E  C06E  F087         	movff	?___flmul,___fldiv@b
 13666  005F92  C06F  F088         	movff	?___flmul+1,___fldiv@b+1
 13667  005F96  C070  F089         	movff	?___flmul+2,___fldiv@b+2
 13668  005F9A  C071  F08A         	movff	?___flmul+3,___fldiv@b+3
 13669  005F9E  EC1D  F01E         	call	___fldiv	;wreg free
 13670  005FA2  C087  F0A0         	movff	?___fldiv,___flneg@f1
 13671  005FA6  C088  F0A1         	movff	?___fldiv+1,___flneg@f1+1
 13672  005FAA  C089  F0A2         	movff	?___fldiv+2,___flneg@f1+2
 13673  005FAE  C08A  F0A3         	movff	?___fldiv+3,___flneg@f1+3
 13674  005FB2  ECA9  F04B         	call	___flneg	;wreg free
 13675  005FB6  C0A0  F0A4         	movff	?___flneg,___fladd@b
 13676  005FBA  C0A1  F0A5         	movff	?___flneg+1,___fladd@b+1
 13677  005FBE  C0A2  F0A6         	movff	?___flneg+2,___fladd@b+2
 13678  005FC2  C0A3  F0A7         	movff	?___flneg+3,___fladd@b+3
 13679  005FC6  EC9B  F019         	call	___fladd	;wreg free
 13680  005FCA  C0A4  F0B8         	movff	?___fladd,___fltol@f1
 13681  005FCE  C0A5  F0B9         	movff	?___fladd+1,___fltol@f1+1
 13682  005FD2  C0A6  F0BA         	movff	?___fladd+2,___fltol@f1+2
 13683  005FD6  C0A7  F0BB         	movff	?___fladd+3,___fltol@f1+3
 13684  005FDA  ECBE  F037         	call	___fltol	;wreg free
 13685  005FDE  C0B8  F0C2         	movff	?___fltol,?_calculate_pulse_length
 13686  005FE2  C0B9  F0C3         	movff	?___fltol+1,?_calculate_pulse_length+1
 13687  005FE6  0012               	return	
 13688  005FE8                     __end_of_calculate_pulse_length:
 13689                           	opt stack 0
 13690                           tblptru	equ	0xFF8
 13691                           tblptrh	equ	0xFF7
 13692                           tblptrl	equ	0xFF6
 13693                           tablat	equ	0xFF5
 13694                           prodh	equ	0xFF4
 13695                           prodl	equ	0xFF3
 13696                           intcon	equ	0xFF2
 13697                           intcon2	equ	0xFF1
 13698                           postinc0	equ	0xFEE
 13699                           wreg	equ	0xFE8
 13700                           postinc1	equ	0xFE6
 13701                           indf2	equ	0xFDF
 13702                           postinc2	equ	0xFDE
 13703                           postdec2	equ	0xFDD
 13704                           fsr2h	equ	0xFDA
 13705                           fsr2l	equ	0xFD9
 13706                           status	equ	0xFD8
 13707                           
 13708 ;; *************** function _exitLoad *****************
 13709 ;; Defined at:
 13710 ;;		line 285 in file "menu.c"
 13711 ;; Parameters:    Size  Location     Type
 13712 ;;		None
 13713 ;; Auto vars:     Size  Location     Type
 13714 ;;		None
 13715 ;; Return value:  Size  Location     Type
 13716 ;;                  1    wreg      void 
 13717 ;; Registers used:
 13718 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13719 ;; Tracked objects:
 13720 ;;		On entry : 0/0
 13721 ;;		On exit  : 0/0
 13722 ;;		Unchanged: 0/0
 13723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13726 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13727 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13728 ;;Total ram usage:        2 bytes
 13729 ;; Hardware stack levels used:    1
 13730 ;; Hardware stack levels required when called:    9
 13731 ;; This function calls:
 13732 ;;		_Lcd_Print_String
 13733 ;;		_clear_row1
 13734 ;; This function is called by:
 13735 ;;		_Function_G_2
 13736 ;; This function uses a non-reentrant model
 13737 ;;
 13738                           
 13739                           	psect	text32
 13740  0095D2                     __ptext32:
 13741                           	opt stack 0
 13742  0095D2                     _exitLoad:
 13743                           	opt stack 18
 13744                           
 13745                           ;menu.c: 287: while(encoder_click == 0);
 13746                           
 13747                           ;incstack = 0
 13748  0095D2  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 13749  0095D4  D7FE               	goto	_exitLoad
 13750                           
 13751                           ;menu.c: 293: clear_row1();
 13752  0095D6  EC18  F04C         	call	_clear_row1	;wreg free
 13753                           
 13754                           ;menu.c: 294: Lcd_Print_String("Settings Loaded!");
 13755  0095DA  0E75               	movlw	low STR_22
 13756  0095DC  0100               	movlb	0	; () banked
 13757  0095DE  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 13758  0095E0  0EFD               	movlw	high STR_22
 13759  0095E2  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 13760  0095E4  EC76  F042         	call	_Lcd_Print_String	;wreg free
 13761                           
 13762                           ;menu.c: 295: _delay((unsigned long)((500)*(20000000/4000.0)));
 13763  0095E8  0E0D               	movlw	13
 13764  0095EA  0100               	movlb	0	; () banked
 13765  0095EC  6F6F               	movwf	(??_exitLoad+1)& (0+255),b
 13766  0095EE  0EAF               	movlw	175
 13767  0095F0  6F6E               	movwf	??_exitLoad& (0+255),b
 13768  0095F2  0EB6               	movlw	182
 13769  0095F4                     u67127:
 13770  0095F4  2EE8               	decfsz	wreg,f,c
 13771  0095F6  D7FE               	bra	u67127
 13772  0095F8  2F6E               	decfsz	??_exitLoad& (0+255),f,b
 13773  0095FA  D7FC               	bra	u67127
 13774  0095FC  2F6F               	decfsz	(??_exitLoad+1)& (0+255),f,b
 13775  0095FE  D7FA               	bra	u67127
 13776  009600  F000               	nop	
 13777                           
 13778                           ;menu.c: 296: which_screen = MAIN_MENU;
 13779  009602  0E02               	movlw	2
 13780  009604  6E4F               	movwf	_which_screen,c
 13781                           
 13782                           ;menu.c: 297: lcd_print_once = 0;
 13783  009606  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13784                           
 13785                           ;menu.c: 298: encoder_click = 0;
 13786  009608  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 13787  00960A  0012               	return		;funcret
 13788  00960C                     __end_of_exitLoad:
 13789                           	opt stack 0
 13790                           tblptru	equ	0xFF8
 13791                           tblptrh	equ	0xFF7
 13792                           tblptrl	equ	0xFF6
 13793                           tablat	equ	0xFF5
 13794                           prodh	equ	0xFF4
 13795                           prodl	equ	0xFF3
 13796                           intcon	equ	0xFF2
 13797                           intcon2	equ	0xFF1
 13798                           postinc0	equ	0xFEE
 13799                           wreg	equ	0xFE8
 13800                           postinc1	equ	0xFE6
 13801                           indf2	equ	0xFDF
 13802                           postinc2	equ	0xFDE
 13803                           postdec2	equ	0xFDD
 13804                           fsr2h	equ	0xFDA
 13805                           fsr2l	equ	0xFD9
 13806                           status	equ	0xFD8
 13807                           
 13808 ;; *************** function _Function_G_1 *****************
 13809 ;; Defined at:
 13810 ;;		line 1057 in file "menu.c"
 13811 ;; Parameters:    Size  Location     Type
 13812 ;;		None
 13813 ;; Auto vars:     Size  Location     Type
 13814 ;;		None
 13815 ;; Return value:  Size  Location     Type
 13816 ;;                  1    wreg      void 
 13817 ;; Registers used:
 13818 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13819 ;; Tracked objects:
 13820 ;;		On entry : 0/0
 13821 ;;		On exit  : 0/0
 13822 ;;		Unchanged: 0/0
 13823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13828 ;;Total ram usage:        0 bytes
 13829 ;; Hardware stack levels used:    1
 13830 ;; Hardware stack levels required when called:   16
 13831 ;; This function calls:
 13832 ;;		_Busy_eep
 13833 ;;		_Lcd_Print_String
 13834 ;;		_Write_b_eep
 13835 ;;		___lbmod
 13836 ;;		___wmul
 13837 ;;		_clear_row1
 13838 ;;		_clear_row2
 13839 ;;		_eepromExit
 13840 ;;		_exitSave
 13841 ;;		_saveToEEPROM
 13842 ;;		_un_block_code
 13843 ;; This function is called by:
 13844 ;;		_Function_G
 13845 ;; This function uses a non-reentrant model
 13846 ;;
 13847                           
 13848                           	psect	text33
 13849  007E1A                     __ptext33:
 13850                           	opt stack 0
 13851  007E1A                     _Function_G_1:
 13852                           	opt stack 12
 13853                           
 13854                           ;menu.c: 1059: which_screen = SAVES_MENU;
 13855                           
 13856                           ;incstack = 0
 13857  007E1A  0E17               	movlw	23
 13858  007E1C  6E4F               	movwf	_which_screen,c
 13859                           
 13860                           ;menu.c: 1060: encoder_click = 0;
 13861  007E1E  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 13862                           
 13863                           ;menu.c: 1061: lcd_print_once = 0;
 13864  007E20  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13865                           
 13866                           ;menu.c: 1063: while(encoder_click == 0) {
 13867  007E22  D02C               	goto	l3730
 13868  007E24                     
 13869                           ;menu.c: 1067: un_block_code();
 13870  007E24  ECAD  F04C         	call	_un_block_code	;wreg free
 13871                           
 13872                           ;menu.c: 1069: if (lcd_print_once == 0) {
 13873  007E28  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13874  007E2A  D027               	goto	l3732
 13875                           
 13876                           ;menu.c: 1070: clear_row1();
 13877  007E2C  EC18  F04C         	call	_clear_row1	;wreg free
 13878                           
 13879                           ;menu.c: 1071: Lcd_Print_String("Save #:");
 13880  007E30  0EBB               	movlw	low STR_35
 13881  007E32  0100               	movlb	0	; () banked
 13882  007E34  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 13883  007E36  0EFF               	movlw	high STR_35
 13884  007E38  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 13885  007E3A  EC76  F042         	call	_Lcd_Print_String	;wreg free
 13886                           
 13887                           ;menu.c: 1072: clear_row2();
 13888  007E3E  EC04  F04C         	call	_clear_row2	;wreg free
 13889                           
 13890                           ;menu.c: 1073: Lcd_Print_String(LCD_STRINGS[(savesMenu.selector % savesMenu.number) + sa
      +                          vesMenu.address]);
 13891  007E42  0100               	movlb	0	; () banked
 13892  007E44  51E2               	movf	_savesMenu& (0+255),w,b
 13893  007E46  6EE6               	movwf	postinc1,c
 13894  007E48  51E4               	movf	(_savesMenu+2)& (0+255),w,b
 13895  007E4A  6EE6               	movwf	postinc1,c
 13896  007E4C  EC63  F041         	call	___lbmod	;wreg free
 13897  007E50  503F               	movf	btemp,w,c
 13898  007E52  0100               	movlb	0	; () banked
 13899  007E54  25E3               	addwf	(_savesMenu+1)& (0+255),w,b
 13900  007E56  6F60               	movwf	___wmul@multiplier& (0+255),b
 13901  007E58  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 13902  007E5A  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 13903  007E5C  0E00               	movlw	0
 13904  007E5E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13905  007E60  0E11               	movlw	17
 13906  007E62  6F62               	movwf	___wmul@multiplicand& (0+255),b
 13907  007E64  EC2C  F04C         	call	___wmul	;wreg free
 13908  007E68  0E9E               	movlw	low _LCD_STRINGS
 13909  007E6A  0100               	movlb	0	; () banked
 13910  007E6C  2560               	addwf	?___wmul& (0+255),w,b
 13911  007E6E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 13912  007E70  0EF3               	movlw	high _LCD_STRINGS
 13913  007E72  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 13914  007E74  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 13915  007E76  EC76  F042         	call	_Lcd_Print_String	;wreg free
 13916  007E7A                     l3732:
 13917                           
 13918                           ;menu.c: 1074: }
 13919                           ;menu.c: 1075: lcd_print_once = 1;
 13920  007E7A  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13921  007E7C                     l3730:
 13922  007E7C  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 13923  007E7E  D7D2               	goto	l3731
 13924                           
 13925                           ;menu.c: 1076: }
 13926                           ;menu.c: 1078: if(savesMenu.selector == 4){eepromExit();}
 13927  007E80  0E04               	movlw	4
 13928  007E82  0100               	movlb	0	; () banked
 13929  007E84  19E4               	xorwf	(_savesMenu+2)& (0+255),w,b
 13930  007E86  A4D8               	btfss	status,2,c
 13931  007E88  D003               	goto	l3734
 13932                           
 13933                           ; BSR set to: 0
 13934  007E8A  EC23  F04B         	call	_eepromExit	;wreg free
 13935  007E8E  D011               	goto	l3735
 13936  007E90                     l3734:
 13937                           
 13938                           ;menu.c: 1079: else {
 13939                           ;menu.c: 1081: (Busy_eep(), Write_b_eep(0,(savesMenu.selector + 1)));
 13940  007E90  ECFC  F04C         	call	_Busy_eep	;wreg free
 13941  007E94  0E00               	movlw	0
 13942  007E96  0100               	movlb	0	; () banked
 13943  007E98  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 13944  007E9A  0E00               	movlw	0
 13945  007E9C  6F60               	movwf	Write_b_eep@badd& (0+255),b
 13946  007E9E  29E4               	incf	(_savesMenu+2)& (0+255),w,b
 13947  007EA0  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 13948  007EA2  EC6E  F04A         	call	_Write_b_eep	;wreg free
 13949                           
 13950                           ;menu.c: 1082: saveToEEPROM(savesMenu.selector + 1);
 13951  007EA6  0100               	movlb	0	; () banked
 13952  007EA8  29E4               	incf	(_savesMenu+2)& (0+255),w,b
 13953  007EAA  ECF6  F027         	call	_saveToEEPROM
 13954                           
 13955                           ;menu.c: 1083: exitSave();
 13956  007EAE  EC06  F04B         	call	_exitSave	;wreg free
 13957  007EB2                     l3735:
 13958                           
 13959                           ;menu.c: 1084: }
 13960                           ;menu.c: 1086: savesMenu.selector = 0;
 13961  007EB2  0E00               	movlw	0
 13962  007EB4  0100               	movlb	0	; () banked
 13963  007EB6  6FE4               	movwf	(_savesMenu+2)& (0+255),b
 13964                           
 13965                           ; BSR set to: 0
 13966  007EB8  0012               	return		;funcret
 13967  007EBA                     __end_of_Function_G_1:
 13968                           	opt stack 0
 13969                           tblptru	equ	0xFF8
 13970                           tblptrh	equ	0xFF7
 13971                           tblptrl	equ	0xFF6
 13972                           tablat	equ	0xFF5
 13973                           prodh	equ	0xFF4
 13974                           prodl	equ	0xFF3
 13975                           intcon	equ	0xFF2
 13976                           intcon2	equ	0xFF1
 13977                           postinc0	equ	0xFEE
 13978                           wreg	equ	0xFE8
 13979                           postinc1	equ	0xFE6
 13980                           indf2	equ	0xFDF
 13981                           postinc2	equ	0xFDE
 13982                           postdec2	equ	0xFDD
 13983                           fsr2h	equ	0xFDA
 13984                           fsr2l	equ	0xFD9
 13985                           status	equ	0xFD8
 13986                           
 13987 ;; *************** function _exitSave *****************
 13988 ;; Defined at:
 13989 ;;		line 265 in file "menu.c"
 13990 ;; Parameters:    Size  Location     Type
 13991 ;;		None
 13992 ;; Auto vars:     Size  Location     Type
 13993 ;;		None
 13994 ;; Return value:  Size  Location     Type
 13995 ;;                  1    wreg      void 
 13996 ;; Registers used:
 13997 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13998 ;; Tracked objects:
 13999 ;;		On entry : 0/0
 14000 ;;		On exit  : 0/0
 14001 ;;		Unchanged: 0/0
 14002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14005 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14006 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14007 ;;Total ram usage:        2 bytes
 14008 ;; Hardware stack levels used:    1
 14009 ;; Hardware stack levels required when called:    9
 14010 ;; This function calls:
 14011 ;;		_Lcd_Print_String
 14012 ;;		_clear_row1
 14013 ;; This function is called by:
 14014 ;;		_Function_G_1
 14015 ;; This function uses a non-reentrant model
 14016 ;;
 14017                           
 14018                           	psect	text34
 14019  00960C                     __ptext34:
 14020                           	opt stack 0
 14021  00960C                     _exitSave:
 14022                           	opt stack 18
 14023                           
 14024                           ;menu.c: 267: while(encoder_click == 0);
 14025                           
 14026                           ; BSR set to: 0
 14027                           ;incstack = 0
 14028  00960C  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14029  00960E  D7FE               	goto	_exitSave
 14030                           
 14031                           ;menu.c: 273: clear_row1();
 14032  009610  EC18  F04C         	call	_clear_row1	;wreg free
 14033                           
 14034                           ;menu.c: 274: Lcd_Print_String("Settings Saved!");
 14035  009614  0EFD               	movlw	low STR_21
 14036  009616  0100               	movlb	0	; () banked
 14037  009618  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14038  00961A  0EFD               	movlw	high STR_21
 14039  00961C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14040  00961E  EC76  F042         	call	_Lcd_Print_String	;wreg free
 14041                           
 14042                           ;menu.c: 275: _delay((unsigned long)((500)*(20000000/4000.0)));
 14043  009622  0E0D               	movlw	13
 14044  009624  0100               	movlb	0	; () banked
 14045  009626  6F6F               	movwf	(??_exitSave+1)& (0+255),b
 14046  009628  0EAF               	movlw	175
 14047  00962A  6F6E               	movwf	??_exitSave& (0+255),b
 14048  00962C  0EB6               	movlw	182
 14049  00962E                     u67137:
 14050  00962E  2EE8               	decfsz	wreg,f,c
 14051  009630  D7FE               	bra	u67137
 14052  009632  2F6E               	decfsz	??_exitSave& (0+255),f,b
 14053  009634  D7FC               	bra	u67137
 14054  009636  2F6F               	decfsz	(??_exitSave+1)& (0+255),f,b
 14055  009638  D7FA               	bra	u67137
 14056  00963A  F000               	nop	
 14057                           
 14058                           ;menu.c: 276: which_screen = MAIN_MENU;
 14059  00963C  0E02               	movlw	2
 14060  00963E  6E4F               	movwf	_which_screen,c
 14061                           
 14062                           ;menu.c: 277: lcd_print_once = 0;
 14063  009640  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14064                           
 14065                           ;menu.c: 278: encoder_click = 0;
 14066  009642  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14067  009644  0012               	return		;funcret
 14068  009646                     __end_of_exitSave:
 14069                           	opt stack 0
 14070                           tblptru	equ	0xFF8
 14071                           tblptrh	equ	0xFF7
 14072                           tblptrl	equ	0xFF6
 14073                           tablat	equ	0xFF5
 14074                           prodh	equ	0xFF4
 14075                           prodl	equ	0xFF3
 14076                           intcon	equ	0xFF2
 14077                           intcon2	equ	0xFF1
 14078                           postinc0	equ	0xFEE
 14079                           wreg	equ	0xFE8
 14080                           postinc1	equ	0xFE6
 14081                           indf2	equ	0xFDF
 14082                           postinc2	equ	0xFDE
 14083                           postdec2	equ	0xFDD
 14084                           fsr2h	equ	0xFDA
 14085                           fsr2l	equ	0xFD9
 14086                           status	equ	0xFD8
 14087                           
 14088 ;; *************** function _eepromExit *****************
 14089 ;; Defined at:
 14090 ;;		line 305 in file "menu.c"
 14091 ;; Parameters:    Size  Location     Type
 14092 ;;		None
 14093 ;; Auto vars:     Size  Location     Type
 14094 ;;		None
 14095 ;; Return value:  Size  Location     Type
 14096 ;;                  1    wreg      void 
 14097 ;; Registers used:
 14098 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14099 ;; Tracked objects:
 14100 ;;		On entry : 0/0
 14101 ;;		On exit  : 0/0
 14102 ;;		Unchanged: 0/0
 14103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14106 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14107 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14108 ;;Total ram usage:        2 bytes
 14109 ;; Hardware stack levels used:    1
 14110 ;; Hardware stack levels required when called:    9
 14111 ;; This function calls:
 14112 ;;		_Lcd_Print_String
 14113 ;;		_clear_row1
 14114 ;; This function is called by:
 14115 ;;		_Function_G_1
 14116 ;;		_Function_G_2
 14117 ;;		_Function_G
 14118 ;; This function uses a non-reentrant model
 14119 ;;
 14120                           
 14121                           	psect	text35
 14122  009646                     __ptext35:
 14123                           	opt stack 0
 14124  009646                     _eepromExit:
 14125                           	opt stack 19
 14126                           
 14127                           ;menu.c: 307: while(encoder_click == 0);
 14128                           
 14129                           ;incstack = 0
 14130  009646  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14131  009648  D7FE               	goto	_eepromExit
 14132                           
 14133                           ;menu.c: 313: clear_row1();
 14134  00964A  EC18  F04C         	call	_clear_row1	;wreg free
 14135                           
 14136                           ;menu.c: 314: Lcd_Print_String("Exit EEPROM!");
 14137  00964E  0E18               	movlw	low STR_23
 14138  009650  0100               	movlb	0	; () banked
 14139  009652  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14140  009654  0EFF               	movlw	high STR_23
 14141  009656  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14142  009658  EC76  F042         	call	_Lcd_Print_String	;wreg free
 14143                           
 14144                           ;menu.c: 315: _delay((unsigned long)((500)*(20000000/4000.0)));
 14145  00965C  0E0D               	movlw	13
 14146  00965E  0100               	movlb	0	; () banked
 14147  009660  6F6F               	movwf	(??_eepromExit+1)& (0+255),b
 14148  009662  0EAF               	movlw	175
 14149  009664  6F6E               	movwf	??_eepromExit& (0+255),b
 14150  009666  0EB6               	movlw	182
 14151  009668                     u67147:
 14152  009668  2EE8               	decfsz	wreg,f,c
 14153  00966A  D7FE               	bra	u67147
 14154  00966C  2F6E               	decfsz	??_eepromExit& (0+255),f,b
 14155  00966E  D7FC               	bra	u67147
 14156  009670  2F6F               	decfsz	(??_eepromExit+1)& (0+255),f,b
 14157  009672  D7FA               	bra	u67147
 14158  009674  F000               	nop	
 14159                           
 14160                           ;menu.c: 316: which_screen = MAIN_MENU;
 14161  009676  0E02               	movlw	2
 14162  009678  6E4F               	movwf	_which_screen,c
 14163                           
 14164                           ;menu.c: 317: lcd_print_once = 0;
 14165  00967A  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14166                           
 14167                           ;menu.c: 318: encoder_click = 0;
 14168  00967C  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14169  00967E  0012               	return		;funcret
 14170  009680                     __end_of_eepromExit:
 14171                           	opt stack 0
 14172                           tblptru	equ	0xFF8
 14173                           tblptrh	equ	0xFF7
 14174                           tblptrl	equ	0xFF6
 14175                           tablat	equ	0xFF5
 14176                           prodh	equ	0xFF4
 14177                           prodl	equ	0xFF3
 14178                           intcon	equ	0xFF2
 14179                           intcon2	equ	0xFF1
 14180                           postinc0	equ	0xFEE
 14181                           wreg	equ	0xFE8
 14182                           postinc1	equ	0xFE6
 14183                           indf2	equ	0xFDF
 14184                           postinc2	equ	0xFDE
 14185                           postdec2	equ	0xFDD
 14186                           fsr2h	equ	0xFDA
 14187                           fsr2l	equ	0xFD9
 14188                           status	equ	0xFD8
 14189                           
 14190 ;; *************** function _Function_F *****************
 14191 ;; Defined at:
 14192 ;;		line 1026 in file "menu.c"
 14193 ;; Parameters:    Size  Location     Type
 14194 ;;		None
 14195 ;; Auto vars:     Size  Location     Type
 14196 ;;		None
 14197 ;; Return value:  Size  Location     Type
 14198 ;;                  1    wreg      void 
 14199 ;; Registers used:
 14200 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14201 ;; Tracked objects:
 14202 ;;		On entry : 0/0
 14203 ;;		On exit  : 0/0
 14204 ;;		Unchanged: 0/0
 14205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14210 ;;Total ram usage:        0 bytes
 14211 ;; Hardware stack levels used:    1
 14212 ;; Hardware stack levels required when called:   16
 14213 ;; This function calls:
 14214 ;;		_Lcd_Print_String
 14215 ;;		_Lcd_Set_Cursor
 14216 ;;		_clear_row2
 14217 ;;		_int2string
 14218 ;;		_programChange
 14219 ;;		_un_block_code
 14220 ;; This function is called by:
 14221 ;;		_menu_lcd
 14222 ;; This function uses a non-reentrant model
 14223 ;;
 14224                           
 14225                           	psect	text36
 14226  008E92                     __ptext36:
 14227                           	opt stack 0
 14228  008E92                     _Function_F:
 14229                           	opt stack 13
 14230                           
 14231                           ;menu.c: 1028: which_screen = PROGRAM_CHANGE_MENU;
 14232                           
 14233                           ;incstack = 0
 14234  008E92  0E08               	movlw	8
 14235  008E94  6E4F               	movwf	_which_screen,c
 14236                           
 14237                           ;menu.c: 1029: lcd_print_once = 0;
 14238  008E96  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14239                           
 14240                           ;menu.c: 1031: programChangeMenu.selector = patch_number;
 14241  008E98  C0F3  F146         	movff	_patch_number,_programChangeMenu+2
 14242                           
 14243                           ;menu.c: 1033: while(encoder_click == 0) {
 14244  008E9C  D021               	goto	l3723
 14245  008E9E                     
 14246                           ;menu.c: 1037: un_block_code();
 14247  008E9E  ECAD  F04C         	call	_un_block_code	;wreg free
 14248                           
 14249                           ;menu.c: 1039: if (lcd_print_once == 0) {
 14250  008EA2  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14251  008EA4  D009               	goto	l3725
 14252                           
 14253                           ;menu.c: 1040: clear_row2();
 14254  008EA6  EC04  F04C         	call	_clear_row2	;wreg free
 14255                           
 14256                           ;menu.c: 1041: Lcd_Print_String("Program #: ");
 14257  008EAA  0E4C               	movlw	low STR_34
 14258  008EAC  0100               	movlb	0	; () banked
 14259  008EAE  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14260  008EB0  0EFF               	movlw	high STR_34
 14261  008EB2  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14262  008EB4  EC76  F042         	call	_Lcd_Print_String	;wreg free
 14263  008EB8                     l3725:
 14264                           
 14265                           ;menu.c: 1042: }
 14266                           ;menu.c: 1043: lcd_print_once = 1;
 14267  008EB8  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14268                           
 14269                           ;menu.c: 1046: int2string(programChangeMenu.selector);
 14270  008EBA  C146  F060         	movff	_programChangeMenu+2,int2string@number
 14271  008EBE  0100               	movlb	0	; () banked
 14272  008EC0  6B61               	clrf	(int2string@number+1)& (0+255),b
 14273  008EC2  EC0A  F03B         	call	_int2string	;wreg free
 14274                           
 14275                           ;menu.c: 1047: Lcd_Set_Cursor(2,13);
 14276  008EC6  0E0D               	movlw	13
 14277  008EC8  0100               	movlb	0	; () banked
 14278  008ECA  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 14279  008ECC  0E02               	movlw	2
 14280  008ECE  ECDF  F047         	call	_Lcd_Set_Cursor
 14281                           
 14282                           ;menu.c: 1048: Lcd_Print_String(string2display);
 14283  008ED2  0E92               	movlw	low _string2display
 14284  008ED4  0100               	movlb	0	; () banked
 14285  008ED6  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14286  008ED8  0E01               	movlw	high _string2display
 14287  008EDA  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14288  008EDC  EC76  F042         	call	_Lcd_Print_String	;wreg free
 14289  008EE0                     l3723:
 14290  008EE0  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14291  008EE2  D7DD               	goto	l3724
 14292                           
 14293                           ;menu.c: 1049: }
 14294                           ;menu.c: 1051: patch_number = programChangeMenu.selector;
 14295  008EE4  C146  F0F3         	movff	_programChangeMenu+2,_patch_number
 14296                           
 14297                           ;menu.c: 1053: programChange(channel, programChangeMenu.selector, programChangeMenu.sele
      +                          ctor);
 14298  008EE8  C146  F060         	movff	_programChangeMenu+2,programChange@data1
 14299  008EEC  C146  F061         	movff	_programChangeMenu+2,programChange@data2
 14300  008EF0  503E               	movf	_channel,w,c
 14301  008EF2  ECDE  F049         	call	_programChange
 14302  008EF6  0012               	return		;funcret
 14303  008EF8                     __end_of_Function_F:
 14304                           	opt stack 0
 14305                           tblptru	equ	0xFF8
 14306                           tblptrh	equ	0xFF7
 14307                           tblptrl	equ	0xFF6
 14308                           tablat	equ	0xFF5
 14309                           prodh	equ	0xFF4
 14310                           prodl	equ	0xFF3
 14311                           intcon	equ	0xFF2
 14312                           intcon2	equ	0xFF1
 14313                           postinc0	equ	0xFEE
 14314                           wreg	equ	0xFE8
 14315                           postinc1	equ	0xFE6
 14316                           indf2	equ	0xFDF
 14317                           postinc2	equ	0xFDE
 14318                           postdec2	equ	0xFDD
 14319                           fsr2h	equ	0xFDA
 14320                           fsr2l	equ	0xFD9
 14321                           status	equ	0xFD8
 14322                           
 14323 ;; *************** function _programChange *****************
 14324 ;; Defined at:
 14325 ;;		line 225 in file "midi.c"
 14326 ;; Parameters:    Size  Location     Type
 14327 ;;  channel         1    wreg     unsigned char 
 14328 ;;  data1           1    0[BANK0 ] unsigned char 
 14329 ;;  data2           1    1[BANK0 ] unsigned char 
 14330 ;; Auto vars:     Size  Location     Type
 14331 ;;  channel         1    2[BANK0 ] unsigned char 
 14332 ;; Return value:  Size  Location     Type
 14333 ;;                  1    wreg      void 
 14334 ;; Registers used:
 14335 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
 14336 ;; Tracked objects:
 14337 ;;		On entry : 0/0
 14338 ;;		On exit  : 0/0
 14339 ;;		Unchanged: 0/0
 14340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14341 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14342 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14344 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14345 ;;Total ram usage:        3 bytes
 14346 ;; Hardware stack levels used:    1
 14347 ;; Hardware stack levels required when called:    8
 14348 ;; This function calls:
 14349 ;;		___lbmod
 14350 ;;		_key_press_release_note_off
 14351 ;;		_sendOut
 14352 ;;		_sendUSB
 14353 ;; This function is called by:
 14354 ;;		_Function_F
 14355 ;; This function uses a non-reentrant model
 14356 ;;
 14357                           
 14358                           	psect	text37
 14359  0093BC                     __ptext37:
 14360                           	opt stack 0
 14361  0093BC                     _programChange:
 14362                           	opt stack 20
 14363                           
 14364                           ;incstack = 0
 14365                           ;programChange@channel stored from wreg
 14366  0093BC  0100               	movlb	0	; () banked
 14367  0093BE  6F62               	movwf	programChange@channel& (0+255),b
 14368                           
 14369                           ;midi.c: 229: if((note_off_was_sent == 0) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 
      +                          0)){
 14370  0093C0  B002               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 14371  0093C2  D00A               	goto	l504
 14372  0093C4  504D               	movf	_NOTE_LENGTH_PULSES,w,c
 14373  0093C6  6EE6               	movwf	postinc1,c
 14374  0093C8  502E               	movf	_TIMER_OVERFLOWS,w,c
 14375  0093CA  6EE6               	movwf	postinc1,c
 14376  0093CC  EC63  F041         	call	___lbmod	;wreg free
 14377  0093D0  503F               	movf	btemp,w,c
 14378  0093D2  B4D8               	btfsc	status,2,c
 14379                           
 14380                           ;midi.c: 231: key_press_release_note_off();
 14381  0093D4  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 14382  0093D8                     l504:
 14383                           
 14384                           ;midi.c: 232: }
 14385                           ;midi.c: 234: statusByte = channel | program_change;
 14386  0093D8  0100               	movlb	0	; () banked
 14387  0093DA  5162               	movf	programChange@channel& (0+255),w,b
 14388  0093DC  09C0               	iorlw	192
 14389  0093DE  6E3D               	movwf	_statusByte,c
 14390                           
 14391                           ; BSR set to: 0
 14392                           ;midi.c: 237: sendUSB(statusByte, data1, data2);
 14393  0093E0  5161               	movf	programChange@data2& (0+255),w,b
 14394  0093E2  6EE6               	movwf	postinc1,c
 14395  0093E4  5160               	movf	programChange@data1& (0+255),w,b
 14396  0093E6  6EE6               	movwf	postinc1,c
 14397  0093E8  503D               	movf	_statusByte,w,c
 14398  0093EA  6EE6               	movwf	postinc1,c
 14399  0093EC  ECDD  F036         	call	_sendUSB	;wreg free
 14400                           
 14401                           ;midi.c: 240: sendOut(statusByte, data1, data2);
 14402  0093F0  0100               	movlb	0	; () banked
 14403  0093F2  5161               	movf	programChange@data2& (0+255),w,b
 14404  0093F4  6EE6               	movwf	postinc1,c
 14405  0093F6  5160               	movf	programChange@data1& (0+255),w,b
 14406  0093F8  6EE6               	movwf	postinc1,c
 14407  0093FA  503D               	movf	_statusByte,w,c
 14408  0093FC  6EE6               	movwf	postinc1,c
 14409  0093FE  EC66  F036         	call	_sendOut	;wreg free
 14410  009402  0012               	return		;funcret
 14411  009404                     __end_of_programChange:
 14412                           	opt stack 0
 14413                           tblptru	equ	0xFF8
 14414                           tblptrh	equ	0xFF7
 14415                           tblptrl	equ	0xFF6
 14416                           tablat	equ	0xFF5
 14417                           prodh	equ	0xFF4
 14418                           prodl	equ	0xFF3
 14419                           intcon	equ	0xFF2
 14420                           intcon2	equ	0xFF1
 14421                           postinc0	equ	0xFEE
 14422                           wreg	equ	0xFE8
 14423                           postinc1	equ	0xFE6
 14424                           indf2	equ	0xFDF
 14425                           postinc2	equ	0xFDE
 14426                           postdec2	equ	0xFDD
 14427                           fsr2h	equ	0xFDA
 14428                           fsr2l	equ	0xFD9
 14429                           status	equ	0xFD8
 14430                           
 14431 ;; *************** function _Function_E *****************
 14432 ;; Defined at:
 14433 ;;		line 1003 in file "menu.c"
 14434 ;; Parameters:    Size  Location     Type
 14435 ;;		None
 14436 ;; Auto vars:     Size  Location     Type
 14437 ;;		None
 14438 ;; Return value:  Size  Location     Type
 14439 ;;                  1    wreg      void 
 14440 ;; Registers used:
 14441 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14442 ;; Tracked objects:
 14443 ;;		On entry : 0/0
 14444 ;;		On exit  : 0/0
 14445 ;;		Unchanged: 0/0
 14446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14450 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14451 ;;Total ram usage:        0 bytes
 14452 ;; Hardware stack levels used:    1
 14453 ;; Hardware stack levels required when called:   17
 14454 ;; This function calls:
 14455 ;;		_Function_E_1
 14456 ;;		_Function_E_2
 14457 ;;		_Lcd_Print_String
 14458 ;;		___lbmod
 14459 ;;		___wmul
 14460 ;;		_clear_row2
 14461 ;;		_un_block_code
 14462 ;; This function is called by:
 14463 ;;		_menu_lcd
 14464 ;; This function uses a non-reentrant model
 14465 ;;
 14466                           
 14467                           	psect	text38
 14468  008CEA                     __ptext38:
 14469                           	opt stack 0
 14470  008CEA                     _Function_E:
 14471                           	opt stack 12
 14472                           
 14473                           ;menu.c: 1005: which_screen = MIDI_CHANNEL_MENU;
 14474                           
 14475                           ;incstack = 0
 14476  008CEA  0E07               	movlw	7
 14477  008CEC  6E4F               	movwf	_which_screen,c
 14478                           
 14479                           ;menu.c: 1006: lcd_print_once = 0;
 14480  008CEE  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14481                           
 14482                           ;menu.c: 1008: while(encoder_click == 0) {
 14483  008CF0  D024               	goto	l3714
 14484  008CF2                     
 14485                           ;menu.c: 1012: un_block_code();
 14486  008CF2  ECAD  F04C         	call	_un_block_code	;wreg free
 14487                           
 14488                           ;menu.c: 1014: if (lcd_print_once == 0) {
 14489  008CF6  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14490  008CF8  D01F               	goto	l3716
 14491                           
 14492                           ;menu.c: 1015: clear_row2();
 14493  008CFA  EC04  F04C         	call	_clear_row2	;wreg free
 14494                           
 14495                           ;menu.c: 1016: Lcd_Print_String(LCD_STRINGS[(midiChannelMenu.selector % midiChannelMenu.
      +                          number) + midiChannelMenu.address]);
 14496  008CFE  0101               	movlb	1	; () banked
 14497  008D00  5147               	movf	_midiChannelMenu& (0+255),w,b
 14498  008D02  6EE6               	movwf	postinc1,c
 14499  008D04  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 14500  008D06  6EE6               	movwf	postinc1,c
 14501  008D08  EC63  F041         	call	___lbmod	;wreg free
 14502  008D0C  503F               	movf	btemp,w,c
 14503  008D0E  0101               	movlb	1	; () banked
 14504  008D10  2548               	addwf	(_midiChannelMenu+1)& (0+255),w,b
 14505  008D12  0100               	movlb	0	; () banked
 14506  008D14  6F60               	movwf	___wmul@multiplier& (0+255),b
 14507  008D16  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 14508  008D18  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 14509  008D1A  0E00               	movlw	0
 14510  008D1C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14511  008D1E  0E11               	movlw	17
 14512  008D20  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14513  008D22  EC2C  F04C         	call	___wmul	;wreg free
 14514  008D26  0E9E               	movlw	low _LCD_STRINGS
 14515  008D28  0100               	movlb	0	; () banked
 14516  008D2A  2560               	addwf	?___wmul& (0+255),w,b
 14517  008D2C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14518  008D2E  0EF3               	movlw	high _LCD_STRINGS
 14519  008D30  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 14520  008D32  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14521  008D34  EC76  F042         	call	_Lcd_Print_String	;wreg free
 14522  008D38                     l3716:
 14523                           
 14524                           ;menu.c: 1017: }
 14525                           ;menu.c: 1018: lcd_print_once = 1;
 14526  008D38  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14527  008D3A                     l3714:
 14528  008D3A  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14529  008D3C  D7DA               	goto	l3715
 14530                           
 14531                           ;menu.c: 1019: }
 14532                           ;menu.c: 1021: if(midiChannelMenu.selector == 0) {Function_E_1();}
 14533  008D3E  0101               	movlb	1	; () banked
 14534  008D40  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 14535  008D42  B4D8               	btfsc	status,2,c
 14536                           
 14537                           ; BSR set to: 1
 14538  008D44  EC6E  F049         	call	_Function_E_1	;wreg free
 14539                           
 14540                           ;menu.c: 1022: if(midiChannelMenu.selector == 1) {Function_E_2();}
 14541  008D48  0101               	movlb	1	; () banked
 14542  008D4A  0549               	decf	(_midiChannelMenu+2)& (0+255),w,b
 14543  008D4C  A4D8               	btfss	status,2,c
 14544  008D4E  0012               	return	
 14545                           
 14546                           ; BSR set to: 1
 14547  008D50  EC48  F049         	call	_Function_E_2	;wreg free
 14548  008D54  0012               	return	
 14549  008D56                     __end_of_Function_E:
 14550                           	opt stack 0
 14551                           tblptru	equ	0xFF8
 14552                           tblptrh	equ	0xFF7
 14553                           tblptrl	equ	0xFF6
 14554                           tablat	equ	0xFF5
 14555                           prodh	equ	0xFF4
 14556                           prodl	equ	0xFF3
 14557                           intcon	equ	0xFF2
 14558                           intcon2	equ	0xFF1
 14559                           postinc0	equ	0xFEE
 14560                           wreg	equ	0xFE8
 14561                           postinc1	equ	0xFE6
 14562                           indf2	equ	0xFDF
 14563                           postinc2	equ	0xFDE
 14564                           postdec2	equ	0xFDD
 14565                           fsr2h	equ	0xFDA
 14566                           fsr2l	equ	0xFD9
 14567                           status	equ	0xFD8
 14568                           
 14569 ;; *************** function _Function_E_2 *****************
 14570 ;; Defined at:
 14571 ;;		line 980 in file "menu.c"
 14572 ;; Parameters:    Size  Location     Type
 14573 ;;		None
 14574 ;; Auto vars:     Size  Location     Type
 14575 ;;		None
 14576 ;; Return value:  Size  Location     Type
 14577 ;;                  1    wreg      void 
 14578 ;; Registers used:
 14579 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14580 ;; Tracked objects:
 14581 ;;		On entry : 0/0
 14582 ;;		On exit  : 0/0
 14583 ;;		Unchanged: 0/0
 14584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14589 ;;Total ram usage:        0 bytes
 14590 ;; Hardware stack levels used:    1
 14591 ;; Hardware stack levels required when called:   16
 14592 ;; This function calls:
 14593 ;;		_Lcd_Print_String
 14594 ;;		_Lcd_Set_Cursor
 14595 ;;		_int2string
 14596 ;;		_un_block_code
 14597 ;; This function is called by:
 14598 ;;		_Function_E
 14599 ;; This function uses a non-reentrant model
 14600 ;;
 14601                           
 14602                           	psect	text39
 14603  009290                     __ptext39:
 14604                           	opt stack 0
 14605  009290                     _Function_E_2:
 14606                           	opt stack 12
 14607                           
 14608                           ;menu.c: 982: which_screen = DRUM_CH_MENU;
 14609                           
 14610                           ;incstack = 0
 14611  009290  0E15               	movlw	21
 14612  009292  6E4F               	movwf	_which_screen,c
 14613                           
 14614                           ;menu.c: 983: lcd_print_once = 0;
 14615  009294  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14616                           
 14617                           ;menu.c: 984: encoder_click = 0;
 14618  009296  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14619                           
 14620                           ;menu.c: 985: drumChannelMenu.selector = drumchannel;
 14621  009298  C052  F140         	movff	_drumchannel,_drumChannelMenu+2
 14622                           
 14623                           ;menu.c: 987: while(encoder_click == 0) {
 14624  00929C  D01A               	goto	l3708
 14625  00929E                     
 14626                           ;menu.c: 991: un_block_code();
 14627  00929E  ECAD  F04C         	call	_un_block_code	;wreg free
 14628                           
 14629                           ;menu.c: 993: lcd_print_once = 1;
 14630  0092A2  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14631                           
 14632                           ;menu.c: 994: int2string((drumChannelMenu.selector) + 1);
 14633  0092A4  0E01               	movlw	1
 14634  0092A6  0101               	movlb	1	; () banked
 14635  0092A8  2540               	addwf	(_drumChannelMenu+2)& (0+255),w,b
 14636  0092AA  0100               	movlb	0	; () banked
 14637  0092AC  6F60               	movwf	int2string@number& (0+255),b
 14638  0092AE  6B61               	clrf	(int2string@number+1)& (0+255),b
 14639  0092B0  0E00               	movlw	0
 14640  0092B2  2361               	addwfc	(int2string@number+1)& (0+255),f,b
 14641  0092B4  EC0A  F03B         	call	_int2string	;wreg free
 14642                           
 14643                           ;menu.c: 995: Lcd_Set_Cursor(2,13);
 14644  0092B8  0E0D               	movlw	13
 14645  0092BA  0100               	movlb	0	; () banked
 14646  0092BC  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 14647  0092BE  0E02               	movlw	2
 14648  0092C0  ECDF  F047         	call	_Lcd_Set_Cursor
 14649                           
 14650                           ;menu.c: 996: Lcd_Print_String(string2display);
 14651  0092C4  0E92               	movlw	low _string2display
 14652  0092C6  0100               	movlb	0	; () banked
 14653  0092C8  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14654  0092CA  0E01               	movlw	high _string2display
 14655  0092CC  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14656  0092CE  EC76  F042         	call	_Lcd_Print_String	;wreg free
 14657  0092D2                     l3708:
 14658  0092D2  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14659  0092D4  D7E4               	goto	l3709
 14660                           
 14661                           ;menu.c: 997: }
 14662                           ;menu.c: 999: drumchannel = drumChannelMenu.selector;
 14663  0092D6  C140  F052         	movff	_drumChannelMenu+2,_drumchannel
 14664  0092DA  0012               	return		;funcret
 14665  0092DC                     __end_of_Function_E_2:
 14666                           	opt stack 0
 14667                           tblptru	equ	0xFF8
 14668                           tblptrh	equ	0xFF7
 14669                           tblptrl	equ	0xFF6
 14670                           tablat	equ	0xFF5
 14671                           prodh	equ	0xFF4
 14672                           prodl	equ	0xFF3
 14673                           intcon	equ	0xFF2
 14674                           intcon2	equ	0xFF1
 14675                           postinc0	equ	0xFEE
 14676                           wreg	equ	0xFE8
 14677                           postinc1	equ	0xFE6
 14678                           indf2	equ	0xFDF
 14679                           postinc2	equ	0xFDE
 14680                           postdec2	equ	0xFDD
 14681                           fsr2h	equ	0xFDA
 14682                           fsr2l	equ	0xFD9
 14683                           status	equ	0xFD8
 14684                           
 14685 ;; *************** function _Function_E_1 *****************
 14686 ;; Defined at:
 14687 ;;		line 955 in file "menu.c"
 14688 ;; Parameters:    Size  Location     Type
 14689 ;;		None
 14690 ;; Auto vars:     Size  Location     Type
 14691 ;;		None
 14692 ;; Return value:  Size  Location     Type
 14693 ;;                  1    wreg      void 
 14694 ;; Registers used:
 14695 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14696 ;; Tracked objects:
 14697 ;;		On entry : 0/0
 14698 ;;		On exit  : 0/0
 14699 ;;		Unchanged: 0/0
 14700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14705 ;;Total ram usage:        0 bytes
 14706 ;; Hardware stack levels used:    1
 14707 ;; Hardware stack levels required when called:   16
 14708 ;; This function calls:
 14709 ;;		_Lcd_Print_String
 14710 ;;		_Lcd_Set_Cursor
 14711 ;;		_int2string
 14712 ;;		_un_block_code
 14713 ;; This function is called by:
 14714 ;;		_Function_E
 14715 ;; This function uses a non-reentrant model
 14716 ;;
 14717                           
 14718                           	psect	text40
 14719  0092DC                     __ptext40:
 14720                           	opt stack 0
 14721  0092DC                     _Function_E_1:
 14722                           	opt stack 12
 14723                           
 14724                           ;menu.c: 957: which_screen = MAIN_CH_MENU;
 14725                           
 14726                           ;incstack = 0
 14727  0092DC  0E14               	movlw	20
 14728  0092DE  6E4F               	movwf	_which_screen,c
 14729                           
 14730                           ;menu.c: 958: lcd_print_once = 0;
 14731  0092E0  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14732                           
 14733                           ;menu.c: 959: encoder_click = 0;
 14734  0092E2  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14735                           
 14736                           ;menu.c: 960: mainChannelMenu.selector = channel;
 14737  0092E4  C03E  F143         	movff	_channel,_mainChannelMenu+2
 14738                           
 14739                           ;menu.c: 962: while(encoder_click == 0) {
 14740  0092E8  D01A               	goto	l3702
 14741  0092EA                     
 14742                           ;menu.c: 966: un_block_code();
 14743  0092EA  ECAD  F04C         	call	_un_block_code	;wreg free
 14744                           
 14745                           ;menu.c: 968: lcd_print_once = 1;
 14746  0092EE  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14747                           
 14748                           ;menu.c: 970: int2string((mainChannelMenu.selector) + 1);
 14749  0092F0  0E01               	movlw	1
 14750  0092F2  0101               	movlb	1	; () banked
 14751  0092F4  2543               	addwf	(_mainChannelMenu+2)& (0+255),w,b
 14752  0092F6  0100               	movlb	0	; () banked
 14753  0092F8  6F60               	movwf	int2string@number& (0+255),b
 14754  0092FA  6B61               	clrf	(int2string@number+1)& (0+255),b
 14755  0092FC  0E00               	movlw	0
 14756  0092FE  2361               	addwfc	(int2string@number+1)& (0+255),f,b
 14757  009300  EC0A  F03B         	call	_int2string	;wreg free
 14758                           
 14759                           ;menu.c: 972: Lcd_Set_Cursor(2,13);
 14760  009304  0E0D               	movlw	13
 14761  009306  0100               	movlb	0	; () banked
 14762  009308  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 14763  00930A  0E02               	movlw	2
 14764  00930C  ECDF  F047         	call	_Lcd_Set_Cursor
 14765                           
 14766                           ;menu.c: 973: Lcd_Print_String(string2display);
 14767  009310  0E92               	movlw	low _string2display
 14768  009312  0100               	movlb	0	; () banked
 14769  009314  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14770  009316  0E01               	movlw	high _string2display
 14771  009318  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14772  00931A  EC76  F042         	call	_Lcd_Print_String	;wreg free
 14773  00931E                     l3702:
 14774  00931E  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14775  009320  D7E4               	goto	l3703
 14776                           
 14777                           ;menu.c: 974: }
 14778                           ;menu.c: 976: channel = mainChannelMenu.selector;
 14779  009322  C143  F03E         	movff	_mainChannelMenu+2,_channel
 14780  009326  0012               	return		;funcret
 14781  009328                     __end_of_Function_E_1:
 14782                           	opt stack 0
 14783                           tblptru	equ	0xFF8
 14784                           tblptrh	equ	0xFF7
 14785                           tblptrl	equ	0xFF6
 14786                           tablat	equ	0xFF5
 14787                           prodh	equ	0xFF4
 14788                           prodl	equ	0xFF3
 14789                           intcon	equ	0xFF2
 14790                           intcon2	equ	0xFF1
 14791                           postinc0	equ	0xFEE
 14792                           wreg	equ	0xFE8
 14793                           postinc1	equ	0xFE6
 14794                           indf2	equ	0xFDF
 14795                           postinc2	equ	0xFDE
 14796                           postdec2	equ	0xFDD
 14797                           fsr2h	equ	0xFDA
 14798                           fsr2l	equ	0xFD9
 14799                           status	equ	0xFD8
 14800                           
 14801 ;; *************** function _Function_D *****************
 14802 ;; Defined at:
 14803 ;;		line 928 in file "menu.c"
 14804 ;; Parameters:    Size  Location     Type
 14805 ;;		None
 14806 ;; Auto vars:     Size  Location     Type
 14807 ;;		None
 14808 ;; Return value:  Size  Location     Type
 14809 ;;                  1    wreg      void 
 14810 ;; Registers used:
 14811 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14812 ;; Tracked objects:
 14813 ;;		On entry : 0/0
 14814 ;;		On exit  : 0/0
 14815 ;;		Unchanged: 0/0
 14816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14821 ;;Total ram usage:        0 bytes
 14822 ;; Hardware stack levels used:    1
 14823 ;; Hardware stack levels required when called:   17
 14824 ;; This function calls:
 14825 ;;		_Function_D_1
 14826 ;;		_Function_D_2
 14827 ;;		_Function_D_3
 14828 ;;		_Function_D_4
 14829 ;;		_Function_D_5
 14830 ;;		_Lcd_Print_String
 14831 ;;		___lbmod
 14832 ;;		___wmul
 14833 ;;		_clear_row2
 14834 ;;		_un_block_code
 14835 ;; This function is called by:
 14836 ;;		_menu_lcd
 14837 ;; This function uses a non-reentrant model
 14838 ;;
 14839                           
 14840                           	psect	text41
 14841  0081A8                     __ptext41:
 14842                           	opt stack 0
 14843  0081A8                     _Function_D:
 14844                           	opt stack 12
 14845                           
 14846                           ;menu.c: 930: which_screen = POTENTIOMETER_MENU;
 14847                           
 14848                           ;incstack = 0
 14849  0081A8  0E06               	movlw	6
 14850  0081AA  6E4F               	movwf	_which_screen,c
 14851                           
 14852                           ;menu.c: 931: lcd_print_once = 0;
 14853  0081AC  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14854                           
 14855                           ;menu.c: 933: while(encoder_click == 0) {
 14856  0081AE  D024               	goto	l3690
 14857  0081B0                     
 14858                           ;menu.c: 937: un_block_code();
 14859  0081B0  ECAD  F04C         	call	_un_block_code	;wreg free
 14860                           
 14861                           ;menu.c: 939: if (lcd_print_once == 0) {
 14862  0081B4  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14863  0081B6  D01F               	goto	l3692
 14864                           
 14865                           ;menu.c: 940: clear_row2();
 14866  0081B8  EC04  F04C         	call	_clear_row2	;wreg free
 14867                           
 14868                           ;menu.c: 941: Lcd_Print_String(LCD_STRINGS[(potsMenu.selector % potsMenu.number) + potsM
      +                          enu.address]);
 14869  0081BC  0101               	movlb	1	; () banked
 14870  0081BE  5159               	movf	_potsMenu& (0+255),w,b
 14871  0081C0  6EE6               	movwf	postinc1,c
 14872  0081C2  515B               	movf	(_potsMenu+2)& (0+255),w,b
 14873  0081C4  6EE6               	movwf	postinc1,c
 14874  0081C6  EC63  F041         	call	___lbmod	;wreg free
 14875  0081CA  503F               	movf	btemp,w,c
 14876  0081CC  0101               	movlb	1	; () banked
 14877  0081CE  255A               	addwf	(_potsMenu+1)& (0+255),w,b
 14878  0081D0  0100               	movlb	0	; () banked
 14879  0081D2  6F60               	movwf	___wmul@multiplier& (0+255),b
 14880  0081D4  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 14881  0081D6  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 14882  0081D8  0E00               	movlw	0
 14883  0081DA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14884  0081DC  0E11               	movlw	17
 14885  0081DE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14886  0081E0  EC2C  F04C         	call	___wmul	;wreg free
 14887  0081E4  0E9E               	movlw	low _LCD_STRINGS
 14888  0081E6  0100               	movlb	0	; () banked
 14889  0081E8  2560               	addwf	?___wmul& (0+255),w,b
 14890  0081EA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14891  0081EC  0EF3               	movlw	high _LCD_STRINGS
 14892  0081EE  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 14893  0081F0  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14894  0081F2  EC76  F042         	call	_Lcd_Print_String	;wreg free
 14895  0081F6                     l3692:
 14896                           
 14897                           ;menu.c: 942: }
 14898                           ;menu.c: 943: lcd_print_once = 1;
 14899  0081F6  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14900  0081F8                     l3690:
 14901  0081F8  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14902  0081FA  D7DA               	goto	l3691
 14903                           
 14904                           ;menu.c: 944: }
 14905                           ;menu.c: 946: if(potsMenu.selector == 0) {Function_D_1();}
 14906  0081FC  0101               	movlb	1	; () banked
 14907  0081FE  515B               	movf	(_potsMenu+2)& (0+255),w,b
 14908  008200  B4D8               	btfsc	status,2,c
 14909                           
 14910                           ; BSR set to: 1
 14911  008202  EC34  F042         	call	_Function_D_1	;wreg free
 14912                           
 14913                           ;menu.c: 947: if(potsMenu.selector == 1) {Function_D_2();}
 14914  008206  0101               	movlb	1	; () banked
 14915  008208  055B               	decf	(_potsMenu+2)& (0+255),w,b
 14916  00820A  B4D8               	btfsc	status,2,c
 14917                           
 14918                           ; BSR set to: 1
 14919  00820C  EC10  F048         	call	_Function_D_2	;wreg free
 14920                           
 14921                           ;menu.c: 948: if(potsMenu.selector == 2) {Function_D_3();}
 14922  008210  0E02               	movlw	2
 14923  008212  0101               	movlb	1	; () banked
 14924  008214  195B               	xorwf	(_potsMenu+2)& (0+255),w,b
 14925  008216  B4D8               	btfsc	status,2,c
 14926                           
 14927                           ; BSR set to: 1
 14928  008218  ECE6  F044         	call	_Function_D_3	;wreg free
 14929                           
 14930                           ;menu.c: 949: if(potsMenu.selector == 3) {Function_D_4();}
 14931  00821C  0E03               	movlw	3
 14932  00821E  0101               	movlb	1	; () banked
 14933  008220  195B               	xorwf	(_potsMenu+2)& (0+255),w,b
 14934  008222  B4D8               	btfsc	status,2,c
 14935                           
 14936                           ; BSR set to: 1
 14937  008224  ECF5  F043         	call	_Function_D_4	;wreg free
 14938                           
 14939                           ;menu.c: 950: if(potsMenu.selector == 4) {Function_D_5();}
 14940  008228  0E04               	movlw	4
 14941  00822A  0101               	movlb	1	; () banked
 14942  00822C  195B               	xorwf	(_potsMenu+2)& (0+255),w,b
 14943  00822E  A4D8               	btfss	status,2,c
 14944  008230  0012               	return	
 14945                           
 14946                           ; BSR set to: 1
 14947  008232  ECB8  F043         	call	_Function_D_5	;wreg free
 14948  008236  0012               	return	
 14949  008238                     __end_of_Function_D:
 14950                           	opt stack 0
 14951                           tblptru	equ	0xFF8
 14952                           tblptrh	equ	0xFF7
 14953                           tblptrl	equ	0xFF6
 14954                           tablat	equ	0xFF5
 14955                           prodh	equ	0xFF4
 14956                           prodl	equ	0xFF3
 14957                           intcon	equ	0xFF2
 14958                           intcon2	equ	0xFF1
 14959                           postinc0	equ	0xFEE
 14960                           wreg	equ	0xFE8
 14961                           postinc1	equ	0xFE6
 14962                           indf2	equ	0xFDF
 14963                           postinc2	equ	0xFDE
 14964                           postdec2	equ	0xFDD
 14965                           fsr2h	equ	0xFDA
 14966                           fsr2l	equ	0xFD9
 14967                           status	equ	0xFD8
 14968                           
 14969 ;; *************** function _Function_D_5 *****************
 14970 ;; Defined at:
 14971 ;;		line 898 in file "menu.c"
 14972 ;; Parameters:    Size  Location     Type
 14973 ;;		None
 14974 ;; Auto vars:     Size  Location     Type
 14975 ;;  array_index     1  103[BANK0 ] unsigned char 
 14976 ;; Return value:  Size  Location     Type
 14977 ;;                  1    wreg      void 
 14978 ;; Registers used:
 14979 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14980 ;; Tracked objects:
 14981 ;;		On entry : 0/0
 14982 ;;		On exit  : 0/0
 14983 ;;		Unchanged: 0/0
 14984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14986 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14988 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14989 ;;Total ram usage:        1 bytes
 14990 ;; Hardware stack levels used:    1
 14991 ;; Hardware stack levels required when called:   16
 14992 ;; This function calls:
 14993 ;;		_Lcd_Print_String
 14994 ;;		___lbmod
 14995 ;;		___wmul
 14996 ;;		_clear_row1
 14997 ;;		_clear_row2
 14998 ;;		_setControllerNumbers
 14999 ;;		_un_block_code
 15000 ;; This function is called by:
 15001 ;;		_Function_D
 15002 ;; This function uses a non-reentrant model
 15003 ;;
 15004                           
 15005                           	psect	text42
 15006  008770                     __ptext42:
 15007                           	opt stack 0
 15008  008770                     _Function_D_5:
 15009                           	opt stack 12
 15010                           
 15011                           ;menu.c: 900: which_screen = JOYSTICK_CC_MENU;
 15012                           
 15013                           ;incstack = 0
 15014  008770  0E13               	movlw	19
 15015  008772  6E4F               	movwf	_which_screen,c
 15016                           
 15017                           ;menu.c: 902: lcd_print_once = 0;
 15018  008774  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15019                           
 15020                           ;menu.c: 903: encoder_click = 0;
 15021  008776  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15022                           
 15023                           ;menu.c: 905: while(encoder_click == 0) {
 15024  008778  D02D               	goto	l3683
 15025  00877A                     
 15026                           ;menu.c: 909: un_block_code();
 15027  00877A  ECAD  F04C         	call	_un_block_code	;wreg free
 15028                           
 15029                           ;menu.c: 911: if (lcd_print_once == 0) {
 15030  00877E  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15031  008780  D028               	goto	l3685
 15032                           
 15033                           ;menu.c: 912: clear_row1();
 15034  008782  EC18  F04C         	call	_clear_row1	;wreg free
 15035                           
 15036                           ;menu.c: 913: Lcd_Print_String("Set Joystick CC#");
 15037  008786  0E97               	movlw	low STR_33
 15038  008788  0100               	movlb	0	; () banked
 15039  00878A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15040  00878C  0EFD               	movlw	high STR_33
 15041  00878E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15042  008790  EC76  F042         	call	_Lcd_Print_String	;wreg free
 15043                           
 15044                           ;menu.c: 914: clear_row2();
 15045  008794  EC04  F04C         	call	_clear_row2	;wreg free
 15046                           
 15047                           ;menu.c: 915: Lcd_Print_String(LCD_STRINGS[(joystickCCMenu.selector % joystickCCMenu.num
      +                          ber) + joystickCCMenu.address]);
 15048  008798  0101               	movlb	1	; () banked
 15049  00879A  514A               	movf	_joystickCCMenu& (0+255),w,b
 15050  00879C  6EE6               	movwf	postinc1,c
 15051  00879E  514C               	movf	(_joystickCCMenu+2)& (0+255),w,b
 15052  0087A0  6EE6               	movwf	postinc1,c
 15053  0087A2  EC63  F041         	call	___lbmod	;wreg free
 15054  0087A6  503F               	movf	btemp,w,c
 15055  0087A8  0101               	movlb	1	; () banked
 15056  0087AA  254B               	addwf	(_joystickCCMenu+1)& (0+255),w,b
 15057  0087AC  0100               	movlb	0	; () banked
 15058  0087AE  6F60               	movwf	___wmul@multiplier& (0+255),b
 15059  0087B0  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 15060  0087B2  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 15061  0087B4  0E00               	movlw	0
 15062  0087B6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15063  0087B8  0E11               	movlw	17
 15064  0087BA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15065  0087BC  EC2C  F04C         	call	___wmul	;wreg free
 15066  0087C0  0E9E               	movlw	low _LCD_STRINGS
 15067  0087C2  0100               	movlb	0	; () banked
 15068  0087C4  2560               	addwf	?___wmul& (0+255),w,b
 15069  0087C6  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15070  0087C8  0EF3               	movlw	high _LCD_STRINGS
 15071  0087CA  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 15072  0087CC  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15073  0087CE  EC76  F042         	call	_Lcd_Print_String	;wreg free
 15074  0087D2                     l3685:
 15075                           
 15076                           ;menu.c: 916: }
 15077                           ;menu.c: 917: lcd_print_once = 1;
 15078  0087D2  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15079  0087D4                     l3683:
 15080  0087D4  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 15081  0087D6  D7D1               	goto	l3684
 15082                           
 15083                           ;menu.c: 918: }
 15084                           ;menu.c: 922: unsigned char array_index = (joystickCCMenu.selector) + 14;
 15085  0087D8  0101               	movlb	1	; () banked
 15086  0087DA  514C               	movf	(_joystickCCMenu+2)& (0+255),w,b
 15087  0087DC  0F0E               	addlw	14
 15088  0087DE  0100               	movlb	0	; () banked
 15089  0087E0  6FC7               	movwf	Function_D_5@array_index& (0+255),b
 15090                           
 15091                           ; BSR set to: 0
 15092                           ;menu.c: 923: setControllerNumbers(array_index);
 15093  0087E2  51C7               	movf	Function_D_5@array_index& (0+255),w,b
 15094  0087E4  EC5C  F011         	call	_setControllerNumbers
 15095  0087E8  0012               	return		;funcret
 15096  0087EA                     __end_of_Function_D_5:
 15097                           	opt stack 0
 15098                           tblptru	equ	0xFF8
 15099                           tblptrh	equ	0xFF7
 15100                           tblptrl	equ	0xFF6
 15101                           tablat	equ	0xFF5
 15102                           prodh	equ	0xFF4
 15103                           prodl	equ	0xFF3
 15104                           intcon	equ	0xFF2
 15105                           intcon2	equ	0xFF1
 15106                           postinc0	equ	0xFEE
 15107                           wreg	equ	0xFE8
 15108                           postinc1	equ	0xFE6
 15109                           indf2	equ	0xFDF
 15110                           postinc2	equ	0xFDE
 15111                           postdec2	equ	0xFDD
 15112                           fsr2h	equ	0xFDA
 15113                           fsr2l	equ	0xFD9
 15114                           status	equ	0xFD8
 15115                           
 15116 ;; *************** function _Function_D_4 *****************
 15117 ;; Defined at:
 15118 ;;		line 867 in file "menu.c"
 15119 ;; Parameters:    Size  Location     Type
 15120 ;;		None
 15121 ;; Auto vars:     Size  Location     Type
 15122 ;;  array_index     1  103[BANK0 ] unsigned char 
 15123 ;; Return value:  Size  Location     Type
 15124 ;;                  1    wreg      void 
 15125 ;; Registers used:
 15126 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15127 ;; Tracked objects:
 15128 ;;		On entry : 0/0
 15129 ;;		On exit  : 0/0
 15130 ;;		Unchanged: 0/0
 15131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15133 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15135 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15136 ;;Total ram usage:        1 bytes
 15137 ;; Hardware stack levels used:    1
 15138 ;; Hardware stack levels required when called:   16
 15139 ;; This function calls:
 15140 ;;		_Lcd_Print_String
 15141 ;;		___lbmod
 15142 ;;		___wmul
 15143 ;;		_clear_row1
 15144 ;;		_clear_row2
 15145 ;;		_setControllerNumbers
 15146 ;;		_un_block_code
 15147 ;; This function is called by:
 15148 ;;		_Function_D
 15149 ;; This function uses a non-reentrant model
 15150 ;;
 15151                           
 15152                           	psect	text43
 15153  0087EA                     __ptext43:
 15154                           	opt stack 0
 15155  0087EA                     _Function_D_4:
 15156                           	opt stack 12
 15157                           
 15158                           ;menu.c: 869: which_screen = SLIDEPOTS_CC_MENU;
 15159                           
 15160                           ;incstack = 0
 15161  0087EA  0E12               	movlw	18
 15162  0087EC  6E4F               	movwf	_which_screen,c
 15163                           
 15164                           ;menu.c: 871: lcd_print_once = 0;
 15165  0087EE  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15166                           
 15167                           ;menu.c: 872: encoder_click = 0;
 15168  0087F0  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15169                           
 15170                           ;menu.c: 874: while(encoder_click == 0) {
 15171  0087F2  D02D               	goto	l3676
 15172  0087F4                     
 15173                           ;menu.c: 878: un_block_code();
 15174  0087F4  ECAD  F04C         	call	_un_block_code	;wreg free
 15175                           
 15176                           ;menu.c: 880: if (lcd_print_once == 0) {
 15177  0087F8  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15178  0087FA  D028               	goto	l3678
 15179                           
 15180                           ;menu.c: 881: clear_row1();
 15181  0087FC  EC18  F04C         	call	_clear_row1	;wreg free
 15182                           
 15183                           ;menu.c: 882: Lcd_Print_String("Slidepots CC#:");
 15184  008800  0E4D               	movlw	low STR_32
 15185  008802  0100               	movlb	0	; () banked
 15186  008804  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15187  008806  0EFE               	movlw	high STR_32
 15188  008808  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15189  00880A  EC76  F042         	call	_Lcd_Print_String	;wreg free
 15190                           
 15191                           ;menu.c: 883: clear_row2();
 15192  00880E  EC04  F04C         	call	_clear_row2	;wreg free
 15193                           
 15194                           ;menu.c: 884: Lcd_Print_String(LCD_STRINGS[(slidepotsCCMenu.selector % slidepotsCCMenu.n
      +                          umber) + slidepotsCCMenu.address]);
 15195  008812  0101               	movlb	1	; () banked
 15196  008814  514D               	movf	_slidepotsCCMenu& (0+255),w,b
 15197  008816  6EE6               	movwf	postinc1,c
 15198  008818  514F               	movf	(_slidepotsCCMenu+2)& (0+255),w,b
 15199  00881A  6EE6               	movwf	postinc1,c
 15200  00881C  EC63  F041         	call	___lbmod	;wreg free
 15201  008820  503F               	movf	btemp,w,c
 15202  008822  0101               	movlb	1	; () banked
 15203  008824  254E               	addwf	(_slidepotsCCMenu+1)& (0+255),w,b
 15204  008826  0100               	movlb	0	; () banked
 15205  008828  6F60               	movwf	___wmul@multiplier& (0+255),b
 15206  00882A  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 15207  00882C  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 15208  00882E  0E00               	movlw	0
 15209  008830  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15210  008832  0E11               	movlw	17
 15211  008834  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15212  008836  EC2C  F04C         	call	___wmul	;wreg free
 15213  00883A  0E9E               	movlw	low _LCD_STRINGS
 15214  00883C  0100               	movlb	0	; () banked
 15215  00883E  2560               	addwf	?___wmul& (0+255),w,b
 15216  008840  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15217  008842  0EF3               	movlw	high _LCD_STRINGS
 15218  008844  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 15219  008846  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15220  008848  EC76  F042         	call	_Lcd_Print_String	;wreg free
 15221  00884C                     l3678:
 15222                           
 15223                           ;menu.c: 885: }
 15224                           ;menu.c: 886: lcd_print_once = 1;
 15225  00884C  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15226  00884E                     l3676:
 15227  00884E  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 15228  008850  D7D1               	goto	l3677
 15229                           
 15230                           ;menu.c: 887: }
 15231                           ;menu.c: 892: unsigned char array_index = (slidepotsCCMenu.selector) + 7;
 15232  008852  0101               	movlb	1	; () banked
 15233  008854  514F               	movf	(_slidepotsCCMenu+2)& (0+255),w,b
 15234  008856  0F07               	addlw	7
 15235  008858  0100               	movlb	0	; () banked
 15236  00885A  6FC7               	movwf	Function_D_4@array_index& (0+255),b
 15237                           
 15238                           ; BSR set to: 0
 15239                           ;menu.c: 893: setControllerNumbers(array_index);
 15240  00885C  51C7               	movf	Function_D_4@array_index& (0+255),w,b
 15241  00885E  EC5C  F011         	call	_setControllerNumbers
 15242  008862  0012               	return		;funcret
 15243  008864                     __end_of_Function_D_4:
 15244                           	opt stack 0
 15245                           tblptru	equ	0xFF8
 15246                           tblptrh	equ	0xFF7
 15247                           tblptrl	equ	0xFF6
 15248                           tablat	equ	0xFF5
 15249                           prodh	equ	0xFF4
 15250                           prodl	equ	0xFF3
 15251                           intcon	equ	0xFF2
 15252                           intcon2	equ	0xFF1
 15253                           postinc0	equ	0xFEE
 15254                           wreg	equ	0xFE8
 15255                           postinc1	equ	0xFE6
 15256                           indf2	equ	0xFDF
 15257                           postinc2	equ	0xFDE
 15258                           postdec2	equ	0xFDD
 15259                           fsr2h	equ	0xFDA
 15260                           fsr2l	equ	0xFD9
 15261                           status	equ	0xFD8
 15262                           
 15263 ;; *************** function _Function_D_3 *****************
 15264 ;; Defined at:
 15265 ;;		line 839 in file "menu.c"
 15266 ;; Parameters:    Size  Location     Type
 15267 ;;		None
 15268 ;; Auto vars:     Size  Location     Type
 15269 ;;  array_index     1  103[BANK0 ] unsigned char 
 15270 ;; Return value:  Size  Location     Type
 15271 ;;                  1    wreg      void 
 15272 ;; Registers used:
 15273 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15274 ;; Tracked objects:
 15275 ;;		On entry : 0/0
 15276 ;;		On exit  : 0/0
 15277 ;;		Unchanged: 0/0
 15278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15280 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15282 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15283 ;;Total ram usage:        1 bytes
 15284 ;; Hardware stack levels used:    1
 15285 ;; Hardware stack levels required when called:   16
 15286 ;; This function calls:
 15287 ;;		_Lcd_Print_String
 15288 ;;		___lbmod
 15289 ;;		___wmul
 15290 ;;		_clear_row1
 15291 ;;		_clear_row2
 15292 ;;		_setControllerNumbers
 15293 ;;		_un_block_code
 15294 ;; This function is called by:
 15295 ;;		_Function_D
 15296 ;; This function uses a non-reentrant model
 15297 ;;
 15298                           
 15299                           	psect	text44
 15300  0089CC                     __ptext44:
 15301                           	opt stack 0
 15302  0089CC                     _Function_D_3:
 15303                           	opt stack 12
 15304                           
 15305                           ;menu.c: 841: which_screen = POTS_CC_MENU;
 15306                           
 15307                           ;incstack = 0
 15308  0089CC  0E11               	movlw	17
 15309  0089CE  6E4F               	movwf	_which_screen,c
 15310                           
 15311                           ;menu.c: 843: lcd_print_once = 0;
 15312  0089D0  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15313                           
 15314                           ;menu.c: 844: encoder_click = 0;
 15315  0089D2  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15316                           
 15317                           ;menu.c: 846: while(encoder_click == 0) {
 15318  0089D4  D02D               	goto	l3669
 15319  0089D6                     
 15320                           ;menu.c: 850: un_block_code();
 15321  0089D6  ECAD  F04C         	call	_un_block_code	;wreg free
 15322                           
 15323                           ;menu.c: 852: if (lcd_print_once == 0) {
 15324  0089DA  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15325  0089DC  D028               	goto	l3671
 15326                           
 15327                           ;menu.c: 853: clear_row1();
 15328  0089DE  EC18  F04C         	call	_clear_row1	;wreg free
 15329                           
 15330                           ;menu.c: 854: Lcd_Print_String("Set Pots CC#:");
 15331  0089E2  0EC4               	movlw	low STR_31
 15332  0089E4  0100               	movlb	0	; () banked
 15333  0089E6  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15334  0089E8  0EFE               	movlw	high STR_31
 15335  0089EA  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15336  0089EC  EC76  F042         	call	_Lcd_Print_String	;wreg free
 15337                           
 15338                           ;menu.c: 855: clear_row2();
 15339  0089F0  EC04  F04C         	call	_clear_row2	;wreg free
 15340                           
 15341                           ;menu.c: 856: Lcd_Print_String(LCD_STRINGS[(potsCCMenu.selector % potsCCMenu.number) + p
      +                          otsCCMenu.address]);
 15342  0089F4  0101               	movlb	1	; () banked
 15343  0089F6  5150               	movf	_potsCCMenu& (0+255),w,b
 15344  0089F8  6EE6               	movwf	postinc1,c
 15345  0089FA  5152               	movf	(_potsCCMenu+2)& (0+255),w,b
 15346  0089FC  6EE6               	movwf	postinc1,c
 15347  0089FE  EC63  F041         	call	___lbmod	;wreg free
 15348  008A02  503F               	movf	btemp,w,c
 15349  008A04  0101               	movlb	1	; () banked
 15350  008A06  2551               	addwf	(_potsCCMenu+1)& (0+255),w,b
 15351  008A08  0100               	movlb	0	; () banked
 15352  008A0A  6F60               	movwf	___wmul@multiplier& (0+255),b
 15353  008A0C  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 15354  008A0E  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 15355  008A10  0E00               	movlw	0
 15356  008A12  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15357  008A14  0E11               	movlw	17
 15358  008A16  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15359  008A18  EC2C  F04C         	call	___wmul	;wreg free
 15360  008A1C  0E9E               	movlw	low _LCD_STRINGS
 15361  008A1E  0100               	movlb	0	; () banked
 15362  008A20  2560               	addwf	?___wmul& (0+255),w,b
 15363  008A22  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15364  008A24  0EF3               	movlw	high _LCD_STRINGS
 15365  008A26  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 15366  008A28  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15367  008A2A  EC76  F042         	call	_Lcd_Print_String	;wreg free
 15368  008A2E                     l3671:
 15369                           
 15370                           ;menu.c: 857: }
 15371                           ;menu.c: 858: lcd_print_once = 1;
 15372  008A2E  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15373  008A30                     l3669:
 15374  008A30  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 15375  008A32  D7D1               	goto	l3670
 15376                           
 15377                           ;menu.c: 859: }
 15378                           ;menu.c: 861: unsigned char array_index = potsCCMenu.selector;
 15379  008A34  C152  F0C7         	movff	_potsCCMenu+2,Function_D_3@array_index
 15380                           
 15381                           ;menu.c: 862: setControllerNumbers(array_index);
 15382  008A38  0100               	movlb	0	; () banked
 15383  008A3A  51C7               	movf	Function_D_3@array_index& (0+255),w,b
 15384  008A3C  EC5C  F011         	call	_setControllerNumbers
 15385  008A40  0012               	return		;funcret
 15386  008A42                     __end_of_Function_D_3:
 15387                           	opt stack 0
 15388                           tblptru	equ	0xFF8
 15389                           tblptrh	equ	0xFF7
 15390                           tblptrl	equ	0xFF6
 15391                           tablat	equ	0xFF5
 15392                           prodh	equ	0xFF4
 15393                           prodl	equ	0xFF3
 15394                           intcon	equ	0xFF2
 15395                           intcon2	equ	0xFF1
 15396                           postinc0	equ	0xFEE
 15397                           wreg	equ	0xFE8
 15398                           postinc1	equ	0xFE6
 15399                           indf2	equ	0xFDF
 15400                           postinc2	equ	0xFDE
 15401                           postdec2	equ	0xFDD
 15402                           fsr2h	equ	0xFDA
 15403                           fsr2l	equ	0xFD9
 15404                           status	equ	0xFD8
 15405                           
 15406 ;; *************** function _setControllerNumbers *****************
 15407 ;; Defined at:
 15408 ;;		line 125 in file "menu.c"
 15409 ;; Parameters:    Size  Location     Type
 15410 ;;  array_index     1    wreg     unsigned char 
 15411 ;; Auto vars:     Size  Location     Type
 15412 ;;  array_index     1   15[BANK0 ] unsigned char 
 15413 ;; Return value:  Size  Location     Type
 15414 ;;                  1    wreg      void 
 15415 ;; Registers used:
 15416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh, cstack
 15417 ;; Tracked objects:
 15418 ;;		On entry : 0/0
 15419 ;;		On exit  : 0/0
 15420 ;;		Unchanged: 0/0
 15421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15423 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15424 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15425 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15426 ;;Total ram usage:        2 bytes
 15427 ;; Hardware stack levels used:    1
 15428 ;; Hardware stack levels required when called:    8
 15429 ;; This function calls:
 15430 ;;		_Lcd_Print_String
 15431 ;;		_Lcd_Set_Cursor
 15432 ;;		_int2string
 15433 ;; This function is called by:
 15434 ;;		_Function_D_3
 15435 ;;		_Function_D_4
 15436 ;;		_Function_D_5
 15437 ;;		_initializeControllerNumbers
 15438 ;; This function uses a non-reentrant model
 15439 ;;
 15440                           
 15441                           	psect	text45
 15442  0022B8                     __ptext45:
 15443                           	opt stack 0
 15444  0022B8                     _setControllerNumbers:
 15445                           	opt stack 19
 15446                           
 15447                           ;incstack = 0
 15448                           ;setControllerNumbers@array_index stored from wreg
 15449  0022B8  0100               	movlb	0	; () banked
 15450  0022BA  6F6F               	movwf	setControllerNumbers@array_index& (0+255),b
 15451                           
 15452                           ;menu.c: 127: which_screen = BLANK;
 15453  0022BC  0E00               	movlw	0
 15454  0022BE  6E4F               	movwf	_which_screen,c
 15455                           
 15456                           ;menu.c: 128: lcd_print_once = 0;
 15457  0022C0  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15458                           
 15459                           ;menu.c: 129: encoder_click = 0;
 15460  0022C2  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15461                           
 15462                           ;menu.c: 131: while(encoder_click == 0) {
 15463  0022C4  D271               	goto	l3503
 15464  0022C6                     l3476:
 15465                           
 15466                           ;menu.c: 136: if(lcd_print_once == 0) {
 15467  0022C6  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15468  0022C8  D1CF               	goto	l3497
 15469                           
 15470                           ;menu.c: 138: if (encoder_direction == 0x10) {
 15471  0022CA  0E10               	movlw	16
 15472  0022CC  1836               	xorwf	_encoder_direction,w,c
 15473  0022CE  A4D8               	btfss	status,2,c
 15474  0022D0  D075               	goto	l3478
 15475                           
 15476                           ;menu.c: 140: if(inputPotsArray[array_index].controller_resolution == 0){
 15477  0022D2  0100               	movlb	0	; () banked
 15478  0022D4  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15479  0022D6  0D03               	mullw	3
 15480  0022D8  0E88               	movlw	low _inputPotsArray
 15481  0022DA  24F3               	addwf	prodl,w,c
 15482  0022DC  6ED9               	movwf	fsr2l,c
 15483  0022DE  0E02               	movlw	high _inputPotsArray
 15484  0022E0  20F4               	addwfc	prodh,w,c
 15485  0022E2  6EDA               	movwf	fsr2h,c
 15486  0022E4  0102               	movlb	2	; () banked
 15487  0022E6  B0DF               	btfsc	indf2,0,c
 15488  0022E8  D03C               	goto	l3481
 15489                           
 15490                           ; BSR set to: 2
 15491                           ;menu.c: 141: if(inputPotsArray[array_index].controller_number < 119) {
 15492  0022EA  0100               	movlb	0	; () banked
 15493  0022EC  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15494  0022EE  0D03               	mullw	3
 15495  0022F0  0E01               	movlw	1
 15496  0022F2  26F3               	addwf	prodl,f,c
 15497  0022F4  0E00               	movlw	0
 15498  0022F6  22F4               	addwfc	prodh,f,c
 15499  0022F8  0E88               	movlw	low _inputPotsArray
 15500  0022FA  24F3               	addwf	prodl,w,c
 15501  0022FC  6ED9               	movwf	fsr2l,c
 15502  0022FE  0E02               	movlw	high _inputPotsArray
 15503  002300  20F4               	addwfc	prodh,w,c
 15504  002302  6EDA               	movwf	fsr2h,c
 15505  002304  50DF               	movf	indf2,w,c
 15506  002306  0A80               	xorlw	128
 15507  002308  0F09               	addlw	-247
 15508  00230A  B0D8               	btfsc	status,0,c
 15509  00230C  D02A               	goto	l3481
 15510                           
 15511                           ; BSR set to: 0
 15512                           ;menu.c: 142: inputPotsArray[array_index].controller_number++;
 15513  00230E  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15514  002310  0D03               	mullw	3
 15515  002312  0E01               	movlw	1
 15516  002314  26F3               	addwf	prodl,f,c
 15517  002316  0E00               	movlw	0
 15518  002318  22F4               	addwfc	prodh,f,c
 15519  00231A  0E88               	movlw	low _inputPotsArray
 15520  00231C  24F3               	addwf	prodl,w,c
 15521  00231E  6ED9               	movwf	fsr2l,c
 15522  002320  0E02               	movlw	high _inputPotsArray
 15523  002322  20F4               	addwfc	prodh,w,c
 15524  002324  6EDA               	movwf	fsr2h,c
 15525  002326  2ADF               	incf	indf2,f,c
 15526                           
 15527                           ;menu.c: 143: if(inputPotsArray[array_index].controller_number == 0){inputPotsArray[arra
      +                          y_index].controller_number = 64;}
 15528  002328  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15529  00232A  0D03               	mullw	3
 15530  00232C  0E01               	movlw	1
 15531  00232E  26F3               	addwf	prodl,f,c
 15532  002330  0E00               	movlw	0
 15533  002332  22F4               	addwfc	prodh,f,c
 15534  002334  0E88               	movlw	low _inputPotsArray
 15535  002336  24F3               	addwf	prodl,w,c
 15536  002338  6ED9               	movwf	fsr2l,c
 15537  00233A  0E02               	movlw	high _inputPotsArray
 15538  00233C  20F4               	addwfc	prodh,w,c
 15539  00233E  6EDA               	movwf	fsr2h,c
 15540  002340  50DF               	movf	indf2,w,c
 15541  002342  A4D8               	btfss	status,2,c
 15542  002344  D00E               	goto	l3481
 15543                           
 15544                           ; BSR set to: 0
 15545  002346  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15546  002348  0D03               	mullw	3
 15547  00234A  0E01               	movlw	1
 15548  00234C  26F3               	addwf	prodl,f,c
 15549  00234E  0E00               	movlw	0
 15550  002350  22F4               	addwfc	prodh,f,c
 15551  002352  0E88               	movlw	low _inputPotsArray
 15552  002354  24F3               	addwf	prodl,w,c
 15553  002356  6ED9               	movwf	fsr2l,c
 15554  002358  0E02               	movlw	high _inputPotsArray
 15555  00235A  20F4               	addwfc	prodh,w,c
 15556  00235C  6EDA               	movwf	fsr2h,c
 15557  00235E  0E40               	movlw	64
 15558  002360  6EDF               	movwf	indf2,c
 15559  002362                     l3481:
 15560                           
 15561                           ;menu.c: 144: }
 15562                           ;menu.c: 145: }
 15563                           ;menu.c: 147: if(inputPotsArray[array_index].controller_resolution == 1){
 15564                           
 15565                           ; BSR set to: 0
 15566                           
 15567                           ; BSR set to: 0
 15568  002362  0100               	movlb	0	; () banked
 15569  002364  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15570  002366  0D03               	mullw	3
 15571  002368  0E88               	movlw	low _inputPotsArray
 15572  00236A  24F3               	addwf	prodl,w,c
 15573  00236C  6ED9               	movwf	fsr2l,c
 15574  00236E  0E02               	movlw	high _inputPotsArray
 15575  002370  20F4               	addwfc	prodh,w,c
 15576  002372  6EDA               	movwf	fsr2h,c
 15577  002374  0102               	movlb	2	; () banked
 15578  002376  A0DF               	btfss	indf2,0,c
 15579  002378  D01F               	goto	l3483
 15580                           
 15581                           ; BSR set to: 2
 15582                           ;menu.c: 148: if(inputPotsArray[array_index].controller_number_two_byte < 31) {
 15583  00237A  0100               	movlb	0	; () banked
 15584  00237C  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15585  00237E  0D03               	mullw	3
 15586  002380  0E02               	movlw	2
 15587  002382  26F3               	addwf	prodl,f,c
 15588  002384  0E00               	movlw	0
 15589  002386  22F4               	addwfc	prodh,f,c
 15590  002388  0E88               	movlw	low _inputPotsArray
 15591  00238A  24F3               	addwf	prodl,w,c
 15592  00238C  6ED9               	movwf	fsr2l,c
 15593  00238E  0E02               	movlw	high _inputPotsArray
 15594  002390  20F4               	addwfc	prodh,w,c
 15595  002392  6EDA               	movwf	fsr2h,c
 15596  002394  50DF               	movf	indf2,w,c
 15597  002396  0A80               	xorlw	128
 15598  002398  0F61               	addlw	-159
 15599  00239A  B0D8               	btfsc	status,0,c
 15600  00239C  D00D               	goto	l3483
 15601                           
 15602                           ; BSR set to: 0
 15603                           ;menu.c: 149: inputPotsArray[array_index].controller_number_two_byte++;
 15604  00239E  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15605  0023A0  0D03               	mullw	3
 15606  0023A2  0E02               	movlw	2
 15607  0023A4  26F3               	addwf	prodl,f,c
 15608  0023A6  0E00               	movlw	0
 15609  0023A8  22F4               	addwfc	prodh,f,c
 15610  0023AA  0E88               	movlw	low _inputPotsArray
 15611  0023AC  24F3               	addwf	prodl,w,c
 15612  0023AE  6ED9               	movwf	fsr2l,c
 15613  0023B0  0E02               	movlw	high _inputPotsArray
 15614  0023B2  20F4               	addwfc	prodh,w,c
 15615  0023B4  6EDA               	movwf	fsr2h,c
 15616  0023B6  2ADF               	incf	indf2,f,c
 15617  0023B8                     l3483:
 15618                           
 15619                           ;menu.c: 150: }
 15620                           ;menu.c: 151: }
 15621                           ;menu.c: 153: encoder_direction = 0x00;
 15622                           
 15623                           ; BSR set to: 0
 15624                           
 15625                           ; BSR set to: 0
 15626  0023B8  0E00               	movlw	0
 15627  0023BA  6E36               	movwf	_encoder_direction,c
 15628  0023BC                     l3478:
 15629                           
 15630                           ;menu.c: 154: }
 15631                           ;menu.c: 158: if (encoder_direction == 0x20) {
 15632  0023BC  0E20               	movlw	32
 15633  0023BE  1836               	xorwf	_encoder_direction,w,c
 15634  0023C0  A4D8               	btfss	status,2,c
 15635  0023C2  D0B2               	goto	l3484
 15636                           
 15637                           ;menu.c: 160: if(inputPotsArray[array_index].controller_resolution == 0){
 15638  0023C4  0100               	movlb	0	; () banked
 15639  0023C6  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15640  0023C8  0D03               	mullw	3
 15641  0023CA  0E88               	movlw	low _inputPotsArray
 15642  0023CC  24F3               	addwf	prodl,w,c
 15643  0023CE  6ED9               	movwf	fsr2l,c
 15644  0023D0  0E02               	movlw	high _inputPotsArray
 15645  0023D2  20F4               	addwfc	prodh,w,c
 15646  0023D4  6EDA               	movwf	fsr2h,c
 15647  0023D6  0102               	movlb	2	; () banked
 15648  0023D8  B0DF               	btfsc	indf2,0,c
 15649  0023DA  D079               	goto	l3489
 15650                           
 15651                           ; BSR set to: 2
 15652                           ;menu.c: 162: if(inputPotsArray[array_index].controller_number > -3) {
 15653  0023DC  0100               	movlb	0	; () banked
 15654  0023DE  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15655  0023E0  0D03               	mullw	3
 15656  0023E2  0E01               	movlw	1
 15657  0023E4  26F3               	addwf	prodl,f,c
 15658  0023E6  0E00               	movlw	0
 15659  0023E8  22F4               	addwfc	prodh,f,c
 15660  0023EA  0E88               	movlw	low _inputPotsArray
 15661  0023EC  24F3               	addwf	prodl,w,c
 15662  0023EE  6ED9               	movwf	fsr2l,c
 15663  0023F0  0E02               	movlw	high _inputPotsArray
 15664  0023F2  20F4               	addwfc	prodh,w,c
 15665  0023F4  6EDA               	movwf	fsr2h,c
 15666  0023F6  50DF               	movf	indf2,w,c
 15667  0023F8  0A80               	xorlw	128
 15668  0023FA  0F82               	addlw	130
 15669  0023FC  A0D8               	btfss	status,0,c
 15670  0023FE  D00D               	goto	l3486
 15671                           
 15672                           ; BSR set to: 0
 15673                           ;menu.c: 163: inputPotsArray[array_index].controller_number--;
 15674  002400  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15675  002402  0D03               	mullw	3
 15676  002404  0E01               	movlw	1
 15677  002406  26F3               	addwf	prodl,f,c
 15678  002408  0E00               	movlw	0
 15679  00240A  22F4               	addwfc	prodh,f,c
 15680  00240C  0E88               	movlw	low _inputPotsArray
 15681  00240E  24F3               	addwf	prodl,w,c
 15682  002410  6ED9               	movwf	fsr2l,c
 15683  002412  0E02               	movlw	high _inputPotsArray
 15684  002414  20F4               	addwfc	prodh,w,c
 15685  002416  6EDA               	movwf	fsr2h,c
 15686  002418  06DF               	decf	indf2,f,c
 15687  00241A                     l3486:
 15688                           
 15689                           ; BSR set to: 0
 15690                           ;menu.c: 164: }
 15691                           ;menu.c: 165: if(inputPotsArray[array_index].controller_number == 61) {inputPotsArray[ar
      +                          ray_index].controller_number = -3;}
 15692  00241A  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15693  00241C  0D03               	mullw	3
 15694  00241E  0E01               	movlw	1
 15695  002420  26F3               	addwf	prodl,f,c
 15696  002422  0E00               	movlw	0
 15697  002424  22F4               	addwfc	prodh,f,c
 15698  002426  0E88               	movlw	low _inputPotsArray
 15699  002428  24F3               	addwf	prodl,w,c
 15700  00242A  6ED9               	movwf	fsr2l,c
 15701  00242C  0E02               	movlw	high _inputPotsArray
 15702  00242E  20F4               	addwfc	prodh,w,c
 15703  002430  6EDA               	movwf	fsr2h,c
 15704  002432  0E3D               	movlw	61
 15705  002434  18DE               	xorwf	postinc2,w,c
 15706  002436  A4D8               	btfss	status,2,c
 15707  002438  D00E               	goto	l3487
 15708                           
 15709                           ; BSR set to: 0
 15710  00243A  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15711  00243C  0D03               	mullw	3
 15712  00243E  0E01               	movlw	1
 15713  002440  26F3               	addwf	prodl,f,c
 15714  002442  0E00               	movlw	0
 15715  002444  22F4               	addwfc	prodh,f,c
 15716  002446  0E88               	movlw	low _inputPotsArray
 15717  002448  24F3               	addwf	prodl,w,c
 15718  00244A  6ED9               	movwf	fsr2l,c
 15719  00244C  0E02               	movlw	high _inputPotsArray
 15720  00244E  20F4               	addwfc	prodh,w,c
 15721  002450  6EDA               	movwf	fsr2h,c
 15722  002452  0EFD               	movlw	253
 15723  002454  6EDF               	movwf	indf2,c
 15724  002456                     l3487:
 15725                           
 15726                           ; BSR set to: 0
 15727                           ;menu.c: 166: if(inputPotsArray[array_index].controller_number == 62) {inputPotsArray[ar
      +                          ray_index].controller_number = -2;}
 15728  002456  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15729  002458  0D03               	mullw	3
 15730  00245A  0E01               	movlw	1
 15731  00245C  26F3               	addwf	prodl,f,c
 15732  00245E  0E00               	movlw	0
 15733  002460  22F4               	addwfc	prodh,f,c
 15734  002462  0E88               	movlw	low _inputPotsArray
 15735  002464  24F3               	addwf	prodl,w,c
 15736  002466  6ED9               	movwf	fsr2l,c
 15737  002468  0E02               	movlw	high _inputPotsArray
 15738  00246A  20F4               	addwfc	prodh,w,c
 15739  00246C  6EDA               	movwf	fsr2h,c
 15740  00246E  0E3E               	movlw	62
 15741  002470  18DE               	xorwf	postinc2,w,c
 15742  002472  A4D8               	btfss	status,2,c
 15743  002474  D00E               	goto	l3488
 15744                           
 15745                           ; BSR set to: 0
 15746  002476  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15747  002478  0D03               	mullw	3
 15748  00247A  0E01               	movlw	1
 15749  00247C  26F3               	addwf	prodl,f,c
 15750  00247E  0E00               	movlw	0
 15751  002480  22F4               	addwfc	prodh,f,c
 15752  002482  0E88               	movlw	low _inputPotsArray
 15753  002484  24F3               	addwf	prodl,w,c
 15754  002486  6ED9               	movwf	fsr2l,c
 15755  002488  0E02               	movlw	high _inputPotsArray
 15756  00248A  20F4               	addwfc	prodh,w,c
 15757  00248C  6EDA               	movwf	fsr2h,c
 15758  00248E  0EFE               	movlw	254
 15759  002490  6EDF               	movwf	indf2,c
 15760  002492                     l3488:
 15761                           
 15762                           ; BSR set to: 0
 15763                           ;menu.c: 167: if(inputPotsArray[array_index].controller_number == 63) {inputPotsArray[ar
      +                          ray_index].controller_number = -1;}
 15764  002492  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15765  002494  0D03               	mullw	3
 15766  002496  0E01               	movlw	1
 15767  002498  26F3               	addwf	prodl,f,c
 15768  00249A  0E00               	movlw	0
 15769  00249C  22F4               	addwfc	prodh,f,c
 15770  00249E  0E88               	movlw	low _inputPotsArray
 15771  0024A0  24F3               	addwf	prodl,w,c
 15772  0024A2  6ED9               	movwf	fsr2l,c
 15773  0024A4  0E02               	movlw	high _inputPotsArray
 15774  0024A6  20F4               	addwfc	prodh,w,c
 15775  0024A8  6EDA               	movwf	fsr2h,c
 15776  0024AA  0E3F               	movlw	63
 15777  0024AC  18DE               	xorwf	postinc2,w,c
 15778  0024AE  A4D8               	btfss	status,2,c
 15779  0024B0  D00E               	goto	l3489
 15780                           
 15781                           ; BSR set to: 0
 15782  0024B2  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15783  0024B4  0D03               	mullw	3
 15784  0024B6  0E01               	movlw	1
 15785  0024B8  26F3               	addwf	prodl,f,c
 15786  0024BA  0E00               	movlw	0
 15787  0024BC  22F4               	addwfc	prodh,f,c
 15788  0024BE  0E88               	movlw	low _inputPotsArray
 15789  0024C0  24F3               	addwf	prodl,w,c
 15790  0024C2  6ED9               	movwf	fsr2l,c
 15791  0024C4  0E02               	movlw	high _inputPotsArray
 15792  0024C6  20F4               	addwfc	prodh,w,c
 15793  0024C8  6EDA               	movwf	fsr2h,c
 15794  0024CA  0EFF               	movlw	255
 15795  0024CC  6EDF               	movwf	indf2,c
 15796  0024CE                     l3489:
 15797                           
 15798                           ;menu.c: 169: }
 15799                           ;menu.c: 171: if(inputPotsArray[array_index].controller_resolution == 1){
 15800                           
 15801                           ; BSR set to: 0
 15802  0024CE  0100               	movlb	0	; () banked
 15803  0024D0  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15804  0024D2  0D03               	mullw	3
 15805  0024D4  0E88               	movlw	low _inputPotsArray
 15806  0024D6  24F3               	addwf	prodl,w,c
 15807  0024D8  6ED9               	movwf	fsr2l,c
 15808  0024DA  0E02               	movlw	high _inputPotsArray
 15809  0024DC  20F4               	addwfc	prodh,w,c
 15810  0024DE  6EDA               	movwf	fsr2h,c
 15811  0024E0  0102               	movlb	2	; () banked
 15812  0024E2  A0DF               	btfss	indf2,0,c
 15813  0024E4  D01F               	goto	l3491
 15814                           
 15815                           ; BSR set to: 2
 15816                           ;menu.c: 173: if(inputPotsArray[array_index].controller_number_two_byte > -3) {
 15817  0024E6  0100               	movlb	0	; () banked
 15818  0024E8  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15819  0024EA  0D03               	mullw	3
 15820  0024EC  0E02               	movlw	2
 15821  0024EE  26F3               	addwf	prodl,f,c
 15822  0024F0  0E00               	movlw	0
 15823  0024F2  22F4               	addwfc	prodh,f,c
 15824  0024F4  0E88               	movlw	low _inputPotsArray
 15825  0024F6  24F3               	addwf	prodl,w,c
 15826  0024F8  6ED9               	movwf	fsr2l,c
 15827  0024FA  0E02               	movlw	high _inputPotsArray
 15828  0024FC  20F4               	addwfc	prodh,w,c
 15829  0024FE  6EDA               	movwf	fsr2h,c
 15830  002500  50DF               	movf	indf2,w,c
 15831  002502  0A80               	xorlw	128
 15832  002504  0F82               	addlw	130
 15833  002506  A0D8               	btfss	status,0,c
 15834  002508  D00D               	goto	l3491
 15835                           
 15836                           ; BSR set to: 0
 15837                           ;menu.c: 174: inputPotsArray[array_index].controller_number_two_byte--;
 15838  00250A  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15839  00250C  0D03               	mullw	3
 15840  00250E  0E02               	movlw	2
 15841  002510  26F3               	addwf	prodl,f,c
 15842  002512  0E00               	movlw	0
 15843  002514  22F4               	addwfc	prodh,f,c
 15844  002516  0E88               	movlw	low _inputPotsArray
 15845  002518  24F3               	addwf	prodl,w,c
 15846  00251A  6ED9               	movwf	fsr2l,c
 15847  00251C  0E02               	movlw	high _inputPotsArray
 15848  00251E  20F4               	addwfc	prodh,w,c
 15849  002520  6EDA               	movwf	fsr2h,c
 15850  002522  06DF               	decf	indf2,f,c
 15851  002524                     l3491:
 15852                           
 15853                           ;menu.c: 175: }
 15854                           ;menu.c: 177: }
 15855                           ;menu.c: 179: encoder_direction = 0x00;
 15856                           
 15857                           ; BSR set to: 0
 15858                           
 15859                           ; BSR set to: 0
 15860  002524  0E00               	movlw	0
 15861  002526  6E36               	movwf	_encoder_direction,c
 15862  002528                     l3484:
 15863                           
 15864                           ;menu.c: 180: }
 15865                           ;menu.c: 182: if(inputPotsArray[array_index].controller_resolution == 0){
 15866  002528  0100               	movlb	0	; () banked
 15867  00252A  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15868  00252C  0D03               	mullw	3
 15869  00252E  0E88               	movlw	low _inputPotsArray
 15870  002530  24F3               	addwf	prodl,w,c
 15871  002532  6ED9               	movwf	fsr2l,c
 15872  002534  0E02               	movlw	high _inputPotsArray
 15873  002536  20F4               	addwfc	prodh,w,c
 15874  002538  6EDA               	movwf	fsr2h,c
 15875  00253A  0102               	movlb	2	; () banked
 15876  00253C  B0DF               	btfsc	indf2,0,c
 15877  00253E  D094               	goto	l3497
 15878                           
 15879                           ; BSR set to: 2
 15880                           ;menu.c: 184: if(inputPotsArray[array_index].controller_number >= 0) {
 15881  002540  0100               	movlb	0	; () banked
 15882  002542  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15883  002544  0D03               	mullw	3
 15884  002546  0E01               	movlw	1
 15885  002548  26F3               	addwf	prodl,f,c
 15886  00254A  0E00               	movlw	0
 15887  00254C  22F4               	addwfc	prodh,f,c
 15888  00254E  0E88               	movlw	low _inputPotsArray
 15889  002550  24F3               	addwf	prodl,w,c
 15890  002552  6ED9               	movwf	fsr2l,c
 15891  002554  0E02               	movlw	high _inputPotsArray
 15892  002556  20F4               	addwfc	prodh,w,c
 15893  002558  6EDA               	movwf	fsr2h,c
 15894  00255A  0E00               	movlw	0
 15895  00255C  BEDB               	btfsc	plusw2,7,c
 15896  00255E  D02E               	goto	l3493
 15897                           
 15898                           ; BSR set to: 0
 15899                           ;menu.c: 186: int2string(inputPotsArray[array_index].controller_number);
 15900  002560  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15901  002562  0D03               	mullw	3
 15902  002564  0E01               	movlw	1
 15903  002566  26F3               	addwf	prodl,f,c
 15904  002568  0E00               	movlw	0
 15905  00256A  22F4               	addwfc	prodh,f,c
 15906  00256C  0E88               	movlw	low _inputPotsArray
 15907  00256E  24F3               	addwf	prodl,w,c
 15908  002570  6ED9               	movwf	fsr2l,c
 15909  002572  0E02               	movlw	high _inputPotsArray
 15910  002574  20F4               	addwfc	prodh,w,c
 15911  002576  6EDA               	movwf	fsr2h,c
 15912  002578  50DF               	movf	indf2,w,c
 15913  00257A  6F60               	movwf	int2string@number& (0+255),b
 15914  00257C  6B61               	clrf	(int2string@number+1)& (0+255),b
 15915  00257E  BF60               	btfsc	int2string@number& (0+255),7,b
 15916  002580  0761               	decf	(int2string@number+1)& (0+255),f,b
 15917  002582  EC0A  F03B         	call	_int2string	;wreg free
 15918                           
 15919                           ;menu.c: 188: Lcd_Set_Cursor(2,7);
 15920  002586  0E07               	movlw	7
 15921  002588  0100               	movlb	0	; () banked
 15922  00258A  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 15923  00258C  0E02               	movlw	2
 15924  00258E  ECDF  F047         	call	_Lcd_Set_Cursor
 15925                           
 15926                           ;menu.c: 189: Lcd_Print_String("         ");
 15927  002592  0E6B               	movlw	low (STR_10+7)
 15928  002594  0100               	movlb	0	; () banked
 15929  002596  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15930  002598  0EFD               	movlw	high (STR_10+7)
 15931  00259A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15932  00259C  EC76  F042         	call	_Lcd_Print_String	;wreg free
 15933                           
 15934                           ;menu.c: 190: Lcd_Set_Cursor(2,13);
 15935  0025A0  0E0D               	movlw	13
 15936  0025A2  0100               	movlb	0	; () banked
 15937  0025A4  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 15938  0025A6  0E02               	movlw	2
 15939  0025A8  ECDF  F047         	call	_Lcd_Set_Cursor
 15940                           
 15941                           ;menu.c: 191: Lcd_Print_String(string2display);
 15942  0025AC  0E92               	movlw	low _string2display
 15943  0025AE  0100               	movlb	0	; () banked
 15944  0025B0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15945  0025B2  0E01               	movlw	high _string2display
 15946  0025B4  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15947  0025B6  EC76  F042         	call	_Lcd_Print_String	;wreg free
 15948                           
 15949                           ;menu.c: 192: }
 15950  0025BA  D056               	goto	l3497
 15951  0025BC                     l3493:
 15952                           
 15953                           ;menu.c: 193: else {
 15954                           ;menu.c: 194: if(inputPotsArray[array_index].controller_number == -1) {
 15955  0025BC  0100               	movlb	0	; () banked
 15956  0025BE  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15957  0025C0  0D03               	mullw	3
 15958  0025C2  0E01               	movlw	1
 15959  0025C4  26F3               	addwf	prodl,f,c
 15960  0025C6  0E00               	movlw	0
 15961  0025C8  22F4               	addwfc	prodh,f,c
 15962  0025CA  0E88               	movlw	low _inputPotsArray
 15963  0025CC  24F3               	addwf	prodl,w,c
 15964  0025CE  6ED9               	movwf	fsr2l,c
 15965  0025D0  0E02               	movlw	high _inputPotsArray
 15966  0025D2  20F4               	addwfc	prodh,w,c
 15967  0025D4  6EDA               	movwf	fsr2h,c
 15968  0025D6  28DE               	incf	postinc2,w,c
 15969  0025D8  A4D8               	btfss	status,2,c
 15970  0025DA  D00C               	goto	l3495
 15971                           
 15972                           ; BSR set to: 0
 15973                           ;menu.c: 195: Lcd_Set_Cursor(2,7);
 15974  0025DC  0E07               	movlw	7
 15975  0025DE  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 15976  0025E0  0E02               	movlw	2
 15977  0025E2  ECDF  F047         	call	_Lcd_Set_Cursor
 15978                           
 15979                           ;menu.c: 196: Lcd_Print_String("  VELOCITY");
 15980  0025E6  0E9E               	movlw	low STR_13
 15981  0025E8  0100               	movlb	0	; () banked
 15982  0025EA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15983  0025EC  0EFF               	movlw	high STR_13
 15984  0025EE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15985  0025F0  EC76  F042         	call	_Lcd_Print_String	;wreg free
 15986  0025F4                     l3495:
 15987                           
 15988                           ;menu.c: 197: }
 15989                           ;menu.c: 199: if(inputPotsArray[array_index].controller_number == -2) {
 15990  0025F4  0100               	movlb	0	; () banked
 15991  0025F6  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15992  0025F8  0D03               	mullw	3
 15993  0025FA  0E01               	movlw	1
 15994  0025FC  26F3               	addwf	prodl,f,c
 15995  0025FE  0E00               	movlw	0
 15996  002600  22F4               	addwfc	prodh,f,c
 15997  002602  0E88               	movlw	low _inputPotsArray
 15998  002604  24F3               	addwf	prodl,w,c
 15999  002606  6ED9               	movwf	fsr2l,c
 16000  002608  0E02               	movlw	high _inputPotsArray
 16001  00260A  20F4               	addwfc	prodh,w,c
 16002  00260C  6EDA               	movwf	fsr2h,c
 16003  00260E  0EFE               	movlw	254
 16004  002610  18DE               	xorwf	postinc2,w,c
 16005  002612  A4D8               	btfss	status,2,c
 16006  002614  D00C               	goto	l3496
 16007                           
 16008                           ; BSR set to: 0
 16009                           ;menu.c: 200: Lcd_Set_Cursor(2,7);
 16010  002616  0E07               	movlw	7
 16011  002618  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16012  00261A  0E02               	movlw	2
 16013  00261C  ECDF  F047         	call	_Lcd_Set_Cursor
 16014                           
 16015                           ;menu.c: 201: Lcd_Print_String(" PITCHBEND");
 16016  002620  0E88               	movlw	low STR_14
 16017  002622  0100               	movlb	0	; () banked
 16018  002624  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16019  002626  0EFF               	movlw	high STR_14
 16020  002628  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16021  00262A  EC76  F042         	call	_Lcd_Print_String	;wreg free
 16022  00262E                     l3496:
 16023                           
 16024                           ;menu.c: 202: }
 16025                           ;menu.c: 203: if(inputPotsArray[array_index].controller_number == -3) {
 16026  00262E  0100               	movlb	0	; () banked
 16027  002630  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 16028  002632  0D03               	mullw	3
 16029  002634  0E01               	movlw	1
 16030  002636  26F3               	addwf	prodl,f,c
 16031  002638  0E00               	movlw	0
 16032  00263A  22F4               	addwfc	prodh,f,c
 16033  00263C  0E88               	movlw	low _inputPotsArray
 16034  00263E  24F3               	addwf	prodl,w,c
 16035  002640  6ED9               	movwf	fsr2l,c
 16036  002642  0E02               	movlw	high _inputPotsArray
 16037  002644  20F4               	addwfc	prodh,w,c
 16038  002646  6EDA               	movwf	fsr2h,c
 16039  002648  0EFD               	movlw	253
 16040  00264A  18DE               	xorwf	postinc2,w,c
 16041  00264C  A4D8               	btfss	status,2,c
 16042  00264E  D00C               	goto	l3497
 16043                           
 16044                           ; BSR set to: 0
 16045                           ;menu.c: 204: Lcd_Set_Cursor(2,7);
 16046  002650  0E07               	movlw	7
 16047  002652  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16048  002654  0E02               	movlw	2
 16049  002656  ECDF  F047         	call	_Lcd_Set_Cursor
 16050                           
 16051                           ;menu.c: 205: Lcd_Print_String(" MOD.WHEEL");
 16052  00265A  0E93               	movlw	low STR_15
 16053  00265C  0100               	movlb	0	; () banked
 16054  00265E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16055  002660  0EFF               	movlw	high STR_15
 16056  002662  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16057  002664  EC76  F042         	call	_Lcd_Print_String	;wreg free
 16058  002668                     l3497:
 16059                           
 16060                           ;menu.c: 206: }
 16061                           ;menu.c: 207: }
 16062                           ;menu.c: 208: }
 16063                           ;menu.c: 209: }
 16064                           ;menu.c: 211: if(inputPotsArray[array_index].controller_resolution == 1){
 16065  002668  0100               	movlb	0	; () banked
 16066  00266A  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 16067  00266C  0D03               	mullw	3
 16068  00266E  0E88               	movlw	low _inputPotsArray
 16069  002670  24F3               	addwf	prodl,w,c
 16070  002672  6ED9               	movwf	fsr2l,c
 16071  002674  0E02               	movlw	high _inputPotsArray
 16072  002676  20F4               	addwfc	prodh,w,c
 16073  002678  6EDA               	movwf	fsr2h,c
 16074  00267A  0102               	movlb	2	; () banked
 16075  00267C  A0DF               	btfss	indf2,0,c
 16076  00267E  D094               	goto	l3503
 16077                           
 16078                           ; BSR set to: 2
 16079                           ;menu.c: 213: if(inputPotsArray[array_index].controller_number_two_byte >= 0) {
 16080  002680  0100               	movlb	0	; () banked
 16081  002682  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 16082  002684  0D03               	mullw	3
 16083  002686  0E02               	movlw	2
 16084  002688  26F3               	addwf	prodl,f,c
 16085  00268A  0E00               	movlw	0
 16086  00268C  22F4               	addwfc	prodh,f,c
 16087  00268E  0E88               	movlw	low _inputPotsArray
 16088  002690  24F3               	addwf	prodl,w,c
 16089  002692  6ED9               	movwf	fsr2l,c
 16090  002694  0E02               	movlw	high _inputPotsArray
 16091  002696  20F4               	addwfc	prodh,w,c
 16092  002698  6EDA               	movwf	fsr2h,c
 16093  00269A  0E00               	movlw	0
 16094  00269C  BEDB               	btfsc	plusw2,7,c
 16095  00269E  D02E               	goto	l3499
 16096                           
 16097                           ; BSR set to: 0
 16098                           ;menu.c: 215: int2string(inputPotsArray[array_index].controller_number_two_byte);
 16099  0026A0  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 16100  0026A2  0D03               	mullw	3
 16101  0026A4  0E02               	movlw	2
 16102  0026A6  26F3               	addwf	prodl,f,c
 16103  0026A8  0E00               	movlw	0
 16104  0026AA  22F4               	addwfc	prodh,f,c
 16105  0026AC  0E88               	movlw	low _inputPotsArray
 16106  0026AE  24F3               	addwf	prodl,w,c
 16107  0026B0  6ED9               	movwf	fsr2l,c
 16108  0026B2  0E02               	movlw	high _inputPotsArray
 16109  0026B4  20F4               	addwfc	prodh,w,c
 16110  0026B6  6EDA               	movwf	fsr2h,c
 16111  0026B8  50DF               	movf	indf2,w,c
 16112  0026BA  6F60               	movwf	int2string@number& (0+255),b
 16113  0026BC  6B61               	clrf	(int2string@number+1)& (0+255),b
 16114  0026BE  BF60               	btfsc	int2string@number& (0+255),7,b
 16115  0026C0  0761               	decf	(int2string@number+1)& (0+255),f,b
 16116  0026C2  EC0A  F03B         	call	_int2string	;wreg free
 16117                           
 16118                           ;menu.c: 217: Lcd_Set_Cursor(2,7);
 16119  0026C6  0E07               	movlw	7
 16120  0026C8  0100               	movlb	0	; () banked
 16121  0026CA  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16122  0026CC  0E02               	movlw	2
 16123  0026CE  ECDF  F047         	call	_Lcd_Set_Cursor
 16124                           
 16125                           ;menu.c: 218: Lcd_Print_String("         ");
 16126  0026D2  0E6B               	movlw	low (STR_10+7)
 16127  0026D4  0100               	movlb	0	; () banked
 16128  0026D6  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16129  0026D8  0EFD               	movlw	high (STR_10+7)
 16130  0026DA  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16131  0026DC  EC76  F042         	call	_Lcd_Print_String	;wreg free
 16132                           
 16133                           ;menu.c: 219: Lcd_Set_Cursor(2,13);
 16134  0026E0  0E0D               	movlw	13
 16135  0026E2  0100               	movlb	0	; () banked
 16136  0026E4  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16137  0026E6  0E02               	movlw	2
 16138  0026E8  ECDF  F047         	call	_Lcd_Set_Cursor
 16139                           
 16140                           ;menu.c: 220: Lcd_Print_String(string2display);
 16141  0026EC  0E92               	movlw	low _string2display
 16142  0026EE  0100               	movlb	0	; () banked
 16143  0026F0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16144  0026F2  0E01               	movlw	high _string2display
 16145  0026F4  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16146  0026F6  EC76  F042         	call	_Lcd_Print_String	;wreg free
 16147                           
 16148                           ;menu.c: 221: }
 16149  0026FA  D056               	goto	l3503
 16150  0026FC                     l3499:
 16151                           
 16152                           ;menu.c: 222: else {
 16153                           ;menu.c: 223: if(inputPotsArray[array_index].controller_number_two_byte == -1) {
 16154  0026FC  0100               	movlb	0	; () banked
 16155  0026FE  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 16156  002700  0D03               	mullw	3
 16157  002702  0E02               	movlw	2
 16158  002704  26F3               	addwf	prodl,f,c
 16159  002706  0E00               	movlw	0
 16160  002708  22F4               	addwfc	prodh,f,c
 16161  00270A  0E88               	movlw	low _inputPotsArray
 16162  00270C  24F3               	addwf	prodl,w,c
 16163  00270E  6ED9               	movwf	fsr2l,c
 16164  002710  0E02               	movlw	high _inputPotsArray
 16165  002712  20F4               	addwfc	prodh,w,c
 16166  002714  6EDA               	movwf	fsr2h,c
 16167  002716  28DE               	incf	postinc2,w,c
 16168  002718  A4D8               	btfss	status,2,c
 16169  00271A  D00C               	goto	l3501
 16170                           
 16171                           ; BSR set to: 0
 16172                           ;menu.c: 224: Lcd_Set_Cursor(2,7);
 16173  00271C  0E07               	movlw	7
 16174  00271E  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16175  002720  0E02               	movlw	2
 16176  002722  ECDF  F047         	call	_Lcd_Set_Cursor
 16177                           
 16178                           ;menu.c: 225: Lcd_Print_String("  VELOCITY");
 16179  002726  0E9E               	movlw	low STR_13
 16180  002728  0100               	movlb	0	; () banked
 16181  00272A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16182  00272C  0EFF               	movlw	high STR_13
 16183  00272E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16184  002730  EC76  F042         	call	_Lcd_Print_String	;wreg free
 16185  002734                     l3501:
 16186                           
 16187                           ;menu.c: 226: }
 16188                           ;menu.c: 228: if(inputPotsArray[array_index].controller_number_two_byte == -2) {
 16189  002734  0100               	movlb	0	; () banked
 16190  002736  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 16191  002738  0D03               	mullw	3
 16192  00273A  0E02               	movlw	2
 16193  00273C  26F3               	addwf	prodl,f,c
 16194  00273E  0E00               	movlw	0
 16195  002740  22F4               	addwfc	prodh,f,c
 16196  002742  0E88               	movlw	low _inputPotsArray
 16197  002744  24F3               	addwf	prodl,w,c
 16198  002746  6ED9               	movwf	fsr2l,c
 16199  002748  0E02               	movlw	high _inputPotsArray
 16200  00274A  20F4               	addwfc	prodh,w,c
 16201  00274C  6EDA               	movwf	fsr2h,c
 16202  00274E  0EFE               	movlw	254
 16203  002750  18DE               	xorwf	postinc2,w,c
 16204  002752  A4D8               	btfss	status,2,c
 16205  002754  D00C               	goto	l3502
 16206                           
 16207                           ; BSR set to: 0
 16208                           ;menu.c: 229: Lcd_Set_Cursor(2,7);
 16209  002756  0E07               	movlw	7
 16210  002758  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16211  00275A  0E02               	movlw	2
 16212  00275C  ECDF  F047         	call	_Lcd_Set_Cursor
 16213                           
 16214                           ;menu.c: 230: Lcd_Print_String(" PITCHBEND");
 16215  002760  0E88               	movlw	low STR_14
 16216  002762  0100               	movlb	0	; () banked
 16217  002764  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16218  002766  0EFF               	movlw	high STR_14
 16219  002768  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16220  00276A  EC76  F042         	call	_Lcd_Print_String	;wreg free
 16221  00276E                     l3502:
 16222                           
 16223                           ;menu.c: 231: }
 16224                           ;menu.c: 232: if(inputPotsArray[array_index].controller_number_two_byte == -3) {
 16225  00276E  0100               	movlb	0	; () banked
 16226  002770  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 16227  002772  0D03               	mullw	3
 16228  002774  0E02               	movlw	2
 16229  002776  26F3               	addwf	prodl,f,c
 16230  002778  0E00               	movlw	0
 16231  00277A  22F4               	addwfc	prodh,f,c
 16232  00277C  0E88               	movlw	low _inputPotsArray
 16233  00277E  24F3               	addwf	prodl,w,c
 16234  002780  6ED9               	movwf	fsr2l,c
 16235  002782  0E02               	movlw	high _inputPotsArray
 16236  002784  20F4               	addwfc	prodh,w,c
 16237  002786  6EDA               	movwf	fsr2h,c
 16238  002788  0EFD               	movlw	253
 16239  00278A  18DE               	xorwf	postinc2,w,c
 16240  00278C  A4D8               	btfss	status,2,c
 16241  00278E  D00C               	goto	l3503
 16242                           
 16243                           ; BSR set to: 0
 16244                           ;menu.c: 233: Lcd_Set_Cursor(2,7);
 16245  002790  0E07               	movlw	7
 16246  002792  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16247  002794  0E02               	movlw	2
 16248  002796  ECDF  F047         	call	_Lcd_Set_Cursor
 16249                           
 16250                           ;menu.c: 234: Lcd_Print_String(" MOD.WHEEL");
 16251  00279A  0E93               	movlw	low STR_15
 16252  00279C  0100               	movlb	0	; () banked
 16253  00279E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16254  0027A0  0EFF               	movlw	high STR_15
 16255  0027A2  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16256  0027A4  EC76  F042         	call	_Lcd_Print_String	;wreg free
 16257  0027A8                     l3503:
 16258  0027A8  B205               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 16259  0027AA  0012               	return	
 16260  0027AC  D58C               	goto	l3476
 16261  0027AE                     __end_of_setControllerNumbers:
 16262                           	opt stack 0
 16263                           tblptru	equ	0xFF8
 16264                           tblptrh	equ	0xFF7
 16265                           tblptrl	equ	0xFF6
 16266                           tablat	equ	0xFF5
 16267                           prodh	equ	0xFF4
 16268                           prodl	equ	0xFF3
 16269                           intcon	equ	0xFF2
 16270                           intcon2	equ	0xFF1
 16271                           postinc0	equ	0xFEE
 16272                           wreg	equ	0xFE8
 16273                           postinc1	equ	0xFE6
 16274                           indf2	equ	0xFDF
 16275                           postinc2	equ	0xFDE
 16276                           postdec2	equ	0xFDD
 16277                           plusw2	equ	0xFDB
 16278                           fsr2h	equ	0xFDA
 16279                           fsr2l	equ	0xFD9
 16280                           status	equ	0xFD8
 16281                           
 16282 ;; *************** function _Function_D_2 *****************
 16283 ;; Defined at:
 16284 ;;		line 811 in file "menu.c"
 16285 ;; Parameters:    Size  Location     Type
 16286 ;;		None
 16287 ;; Auto vars:     Size  Location     Type
 16288 ;;		None
 16289 ;; Return value:  Size  Location     Type
 16290 ;;                  1    wreg      void 
 16291 ;; Registers used:
 16292 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16293 ;; Tracked objects:
 16294 ;;		On entry : 0/0
 16295 ;;		On exit  : 0/0
 16296 ;;		Unchanged: 0/0
 16297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16302 ;;Total ram usage:        0 bytes
 16303 ;; Hardware stack levels used:    1
 16304 ;; Hardware stack levels required when called:   16
 16305 ;; This function calls:
 16306 ;;		_Busy_eep
 16307 ;;		_Lcd_Print_String
 16308 ;;		_Lcd_Set_Cursor
 16309 ;;		_Write_b_eep
 16310 ;;		_calculate_alpha
 16311 ;;		_int2string
 16312 ;;		_un_block_code
 16313 ;; This function is called by:
 16314 ;;		_Function_D
 16315 ;; This function uses a non-reentrant model
 16316 ;;
 16317                           
 16318                           	psect	text46
 16319  009020                     __ptext46:
 16320                           	opt stack 0
 16321  009020                     _Function_D_2:
 16322                           	opt stack 12
 16323                           
 16324                           ;menu.c: 813: which_screen = POTS_ALPHA_MENU;
 16325                           
 16326                           ;incstack = 0
 16327  009020  0E10               	movlw	16
 16328  009022  6E4F               	movwf	_which_screen,c
 16329                           
 16330                           ;menu.c: 814: lcd_print_once = 0;
 16331  009024  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 16332                           
 16333                           ;menu.c: 815: encoder_click = 0;
 16334  009026  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 16335                           
 16336                           ;menu.c: 817: potsAlphaMenu.selector = ema_integer;
 16337  009028  C0FE  F155         	movff	_ema_integer,_potsAlphaMenu+2
 16338                           
 16339                           ;menu.c: 819: while(encoder_click == 0) {
 16340  00902C  D016               	goto	l3663
 16341  00902E                     
 16342                           ;menu.c: 823: un_block_code();
 16343  00902E  ECAD  F04C         	call	_un_block_code	;wreg free
 16344                           
 16345                           ;menu.c: 825: lcd_print_once = 1;
 16346  009032  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 16347                           
 16348                           ;menu.c: 827: int2string(potsAlphaMenu.selector);
 16349  009034  C155  F060         	movff	_potsAlphaMenu+2,int2string@number
 16350  009038  0100               	movlb	0	; () banked
 16351  00903A  6B61               	clrf	(int2string@number+1)& (0+255),b
 16352  00903C  EC0A  F03B         	call	_int2string	;wreg free
 16353                           
 16354                           ;menu.c: 828: Lcd_Set_Cursor(2,13);
 16355  009040  0E0D               	movlw	13
 16356  009042  0100               	movlb	0	; () banked
 16357  009044  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16358  009046  0E02               	movlw	2
 16359  009048  ECDF  F047         	call	_Lcd_Set_Cursor
 16360                           
 16361                           ;menu.c: 829: Lcd_Print_String(string2display);
 16362  00904C  0E92               	movlw	low _string2display
 16363  00904E  0100               	movlb	0	; () banked
 16364  009050  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16365  009052  0E01               	movlw	high _string2display
 16366  009054  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16367  009056  EC76  F042         	call	_Lcd_Print_String	;wreg free
 16368  00905A                     l3663:
 16369  00905A  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 16370  00905C  D7E8               	goto	l3664
 16371                           
 16372                           ;menu.c: 830: }
 16373                           ;menu.c: 832: ema_integer = potsAlphaMenu.selector;
 16374  00905E  C155  F0FE         	movff	_potsAlphaMenu+2,_ema_integer
 16375                           
 16376                           ;menu.c: 833: (Busy_eep(), Write_b_eep(0x03,ema_integer));
 16377  009062  ECFC  F04C         	call	_Busy_eep	;wreg free
 16378  009066  0E00               	movlw	0
 16379  009068  0100               	movlb	0	; () banked
 16380  00906A  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 16381  00906C  0E03               	movlw	3
 16382  00906E  6F60               	movwf	Write_b_eep@badd& (0+255),b
 16383  009070  C0FE  F062         	movff	_ema_integer,Write_b_eep@bdat
 16384  009074  EC6E  F04A         	call	_Write_b_eep	;wreg free
 16385                           
 16386                           ;menu.c: 834: calculate_alpha();
 16387  009078  EC94  F049         	call	_calculate_alpha	;wreg free
 16388  00907C  0012               	return		;funcret
 16389  00907E                     __end_of_Function_D_2:
 16390                           	opt stack 0
 16391                           tblptru	equ	0xFF8
 16392                           tblptrh	equ	0xFF7
 16393                           tblptrl	equ	0xFF6
 16394                           tablat	equ	0xFF5
 16395                           prodh	equ	0xFF4
 16396                           prodl	equ	0xFF3
 16397                           intcon	equ	0xFF2
 16398                           intcon2	equ	0xFF1
 16399                           postinc0	equ	0xFEE
 16400                           wreg	equ	0xFE8
 16401                           postinc1	equ	0xFE6
 16402                           indf2	equ	0xFDF
 16403                           postinc2	equ	0xFDE
 16404                           postdec2	equ	0xFDD
 16405                           plusw2	equ	0xFDB
 16406                           fsr2h	equ	0xFDA
 16407                           fsr2l	equ	0xFD9
 16408                           status	equ	0xFD8
 16409                           
 16410 ;; *************** function _calculate_alpha *****************
 16411 ;; Defined at:
 16412 ;;		line 24 in file "potentiometers.c"
 16413 ;; Parameters:    Size  Location     Type
 16414 ;;		None
 16415 ;; Auto vars:     Size  Location     Type
 16416 ;;		None
 16417 ;; Return value:  Size  Location     Type
 16418 ;;                  1    wreg      void 
 16419 ;; Registers used:
 16420 ;;		wreg, status,2, status,0, cstack
 16421 ;; Tracked objects:
 16422 ;;		On entry : 0/0
 16423 ;;		On exit  : 0/0
 16424 ;;		Unchanged: 0/0
 16425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16430 ;;Total ram usage:        0 bytes
 16431 ;; Hardware stack levels used:    1
 16432 ;; Hardware stack levels required when called:    6
 16433 ;; This function calls:
 16434 ;;		___fldiv
 16435 ;;		___xxtofl
 16436 ;; This function is called by:
 16437 ;;		_Function_D_2
 16438 ;;		_main
 16439 ;; This function uses a non-reentrant model
 16440 ;;
 16441                           
 16442                           	psect	text47
 16443  009328                     __ptext47:
 16444                           	opt stack 0
 16445  009328                     _calculate_alpha:
 16446                           	opt stack 21
 16447                           
 16448                           ;potentiometers.c: 25: (float)ema_alpha = (ema_integer / 100.0);
 16449                           
 16450                           ;incstack = 0
 16451  009328  0100               	movlb	0	; () banked
 16452  00932A  51FE               	movf	_ema_integer& (0+255),w,b
 16453  00932C  6F60               	movwf	___xxtofl@val& (0+255),b
 16454  00932E  6B61               	clrf	(___xxtofl@val+1)& (0+255),b
 16455  009330  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 16456  009332  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 16457  009334  0E00               	movlw	0
 16458  009336  ECF4  F02F         	call	___xxtofl
 16459  00933A  C060  F087         	movff	?___xxtofl,___fldiv@b
 16460  00933E  C061  F088         	movff	?___xxtofl+1,___fldiv@b+1
 16461  009342  C062  F089         	movff	?___xxtofl+2,___fldiv@b+2
 16462  009346  C063  F08A         	movff	?___xxtofl+3,___fldiv@b+3
 16463  00934A  0E00               	movlw	0
 16464  00934C  0100               	movlb	0	; () banked
 16465  00934E  6F8B               	movwf	___fldiv@a& (0+255),b
 16466  009350  0E00               	movlw	0
 16467  009352  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 16468  009354  0EC8               	movlw	200
 16469  009356  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 16470  009358  0E42               	movlw	66
 16471  00935A  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 16472  00935C  EC1D  F01E         	call	___fldiv	;wreg free
 16473  009360  C087  F104         	movff	?___fldiv,_ema_alpha
 16474  009364  C088  F105         	movff	?___fldiv+1,_ema_alpha+1
 16475  009368  C089  F106         	movff	?___fldiv+2,_ema_alpha+2
 16476  00936C  C08A  F107         	movff	?___fldiv+3,_ema_alpha+3
 16477  009370  0012               	return		;funcret
 16478  009372                     __end_of_calculate_alpha:
 16479                           	opt stack 0
 16480                           tblptru	equ	0xFF8
 16481                           tblptrh	equ	0xFF7
 16482                           tblptrl	equ	0xFF6
 16483                           tablat	equ	0xFF5
 16484                           prodh	equ	0xFF4
 16485                           prodl	equ	0xFF3
 16486                           intcon	equ	0xFF2
 16487                           intcon2	equ	0xFF1
 16488                           postinc0	equ	0xFEE
 16489                           wreg	equ	0xFE8
 16490                           postinc1	equ	0xFE6
 16491                           indf2	equ	0xFDF
 16492                           postinc2	equ	0xFDE
 16493                           postdec2	equ	0xFDD
 16494                           plusw2	equ	0xFDB
 16495                           fsr2h	equ	0xFDA
 16496                           fsr2l	equ	0xFD9
 16497                           status	equ	0xFD8
 16498                           
 16499 ;; *************** function ___fldiv *****************
 16500 ;; Defined at:
 16501 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcdiv.c"
 16502 ;; Parameters:    Size  Location     Type
 16503 ;;  b               4   39[BANK0 ] void 
 16504 ;;  a               4   43[BANK0 ] void 
 16505 ;; Auto vars:     Size  Location     Type
 16506 ;;  grs             4   58[BANK0 ] unsigned long 
 16507 ;;  rem             4   52[BANK0 ] unsigned long 
 16508 ;;  new_exp         2   56[BANK0 ] int 
 16509 ;;  aexp            1   63[BANK0 ] unsigned char 
 16510 ;;  bexp            1   62[BANK0 ] unsigned char 
 16511 ;;  sign            1   51[BANK0 ] unsigned char 
 16512 ;; Return value:  Size  Location     Type
 16513 ;;                  4   39[BANK0 ] unsigned char 
 16514 ;; Registers used:
 16515 ;;		wreg, status,2, status,0
 16516 ;; Tracked objects:
 16517 ;;		On entry : 0/0
 16518 ;;		On exit  : 0/0
 16519 ;;		Unchanged: 0/0
 16520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16521 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16522 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16523 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16524 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16525 ;;Total ram usage:       25 bytes
 16526 ;; Hardware stack levels used:    1
 16527 ;; Hardware stack levels required when called:    5
 16528 ;; This function calls:
 16529 ;;		Nothing
 16530 ;; This function is called by:
 16531 ;;		_calculate_alpha
 16532 ;;		_calculate_pulse_length
 16533 ;; This function uses a non-reentrant model
 16534 ;;
 16535                           
 16536                           	psect	text48
 16537  003C3A                     __ptext48:
 16538                           	opt stack 0
 16539  003C3A                     ___fldiv:
 16540                           	opt stack 22
 16541                           
 16542                           ;incstack = 0
 16543  003C3A  0100               	movlb	0	; () banked
 16544  003C3C  518A               	movf	(___fldiv@b+3)& (0+255),w,b
 16545  003C3E  0B80               	andlw	128
 16546  003C40  6F93               	movwf	___fldiv@sign& (0+255),b
 16547  003C42  518A               	movf	(___fldiv@b+3)& (0+255),w,b
 16548  003C44  258A               	addwf	(___fldiv@b+3)& (0+255),w,b
 16549  003C46  6F9E               	movwf	___fldiv@bexp& (0+255),b
 16550                           
 16551                           ; BSR set to: 0
 16552  003C48  BF89               	btfsc	(___fldiv@b+2)& (0+255),7,b
 16553                           
 16554                           ; BSR set to: 0
 16555  003C4A  819E               	bsf	___fldiv@bexp& (0+255),0,b
 16556                           
 16557                           ; BSR set to: 0
 16558                           
 16559                           ; BSR set to: 0
 16560  003C4C  519E               	movf	___fldiv@bexp& (0+255),w,b
 16561  003C4E  B4D8               	btfsc	status,2,c
 16562  003C50  D00D               	goto	l6136
 16563                           
 16564                           ; BSR set to: 0
 16565  003C52  299E               	incf	___fldiv@bexp& (0+255),w,b
 16566  003C54  A4D8               	btfss	status,2,c
 16567  003C56  D008               	goto	l6137
 16568                           
 16569                           ; BSR set to: 0
 16570  003C58  0E00               	movlw	0
 16571  003C5A  6F87               	movwf	___fldiv@b& (0+255),b
 16572  003C5C  0E00               	movlw	0
 16573  003C5E  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16574  003C60  0E00               	movlw	0
 16575  003C62  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16576  003C64  0E00               	movlw	0
 16577  003C66  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16578  003C68                     l6137:
 16579                           
 16580                           ; BSR set to: 0
 16581                           
 16582                           ; BSR set to: 0
 16583  003C68  8F89               	bsf	(___fldiv@b+2)& (0+255),7,b
 16584  003C6A  D006               	goto	L2
 16585  003C6C                     l6136:
 16586                           
 16587                           ; BSR set to: 0
 16588                           
 16589                           ; BSR set to: 0
 16590  003C6C  0E00               	movlw	0
 16591  003C6E  6F87               	movwf	___fldiv@b& (0+255),b
 16592  003C70  0E00               	movlw	0
 16593  003C72  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16594  003C74  0E00               	movlw	0
 16595  003C76  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16596  003C78                     L2:
 16597  003C78  0E00               	movlw	0
 16598  003C7A  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16599                           
 16600                           ; BSR set to: 0
 16601                           
 16602                           ; BSR set to: 0
 16603  003C7C  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 16604  003C7E  0B80               	andlw	128
 16605  003C80  1B93               	xorwf	___fldiv@sign& (0+255),f,b
 16606                           
 16607                           ; BSR set to: 0
 16608  003C82  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 16609  003C84  258E               	addwf	(___fldiv@a+3)& (0+255),w,b
 16610  003C86  6F9F               	movwf	___fldiv@aexp& (0+255),b
 16611                           
 16612                           ; BSR set to: 0
 16613  003C88  BF8D               	btfsc	(___fldiv@a+2)& (0+255),7,b
 16614                           
 16615                           ; BSR set to: 0
 16616  003C8A  819F               	bsf	___fldiv@aexp& (0+255),0,b
 16617                           
 16618                           ; BSR set to: 0
 16619                           
 16620                           ; BSR set to: 0
 16621  003C8C  519F               	movf	___fldiv@aexp& (0+255),w,b
 16622  003C8E  B4D8               	btfsc	status,2,c
 16623  003C90  D00D               	goto	l6140
 16624                           
 16625                           ; BSR set to: 0
 16626  003C92  299F               	incf	___fldiv@aexp& (0+255),w,b
 16627  003C94  A4D8               	btfss	status,2,c
 16628  003C96  D008               	goto	l6141
 16629                           
 16630                           ; BSR set to: 0
 16631  003C98  0E00               	movlw	0
 16632  003C9A  6F8B               	movwf	___fldiv@a& (0+255),b
 16633  003C9C  0E00               	movlw	0
 16634  003C9E  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 16635  003CA0  0E00               	movlw	0
 16636  003CA2  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 16637  003CA4  0E00               	movlw	0
 16638  003CA6  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 16639  003CA8                     l6141:
 16640                           
 16641                           ; BSR set to: 0
 16642                           
 16643                           ; BSR set to: 0
 16644  003CA8  8F8D               	bsf	(___fldiv@a+2)& (0+255),7,b
 16645  003CAA  D006               	goto	L3
 16646  003CAC                     l6140:
 16647                           
 16648                           ; BSR set to: 0
 16649                           
 16650                           ; BSR set to: 0
 16651  003CAC  0E00               	movlw	0
 16652  003CAE  6F8B               	movwf	___fldiv@a& (0+255),b
 16653  003CB0  0E00               	movlw	0
 16654  003CB2  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 16655  003CB4  0E00               	movlw	0
 16656  003CB6  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 16657  003CB8                     L3:
 16658  003CB8  0E00               	movlw	0
 16659  003CBA  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 16660                           
 16661                           ; BSR set to: 0
 16662                           
 16663                           ; BSR set to: 0
 16664  003CBC  518B               	movf	___fldiv@a& (0+255),w,b
 16665  003CBE  118C               	iorwf	(___fldiv@a+1)& (0+255),w,b
 16666  003CC0  118D               	iorwf	(___fldiv@a+2)& (0+255),w,b
 16667  003CC2  118E               	iorwf	(___fldiv@a+3)& (0+255),w,b
 16668  003CC4  A4D8               	btfss	status,2,c
 16669  003CC6  D015               	goto	l6143
 16670                           
 16671                           ; BSR set to: 0
 16672  003CC8  0E00               	movlw	0
 16673  003CCA  6F87               	movwf	___fldiv@b& (0+255),b
 16674  003CCC  0E00               	movlw	0
 16675  003CCE  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16676  003CD0  0E00               	movlw	0
 16677  003CD2  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16678  003CD4  0E00               	movlw	0
 16679  003CD6  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16680                           
 16681                           ; BSR set to: 0
 16682  003CD8  0E80               	movlw	128
 16683  003CDA  1389               	iorwf	(___fldiv@b+2)& (0+255),f,b
 16684  003CDC  0E7F               	movlw	127
 16685  003CDE  138A               	iorwf	(___fldiv@b+3)& (0+255),f,b
 16686                           
 16687                           ; BSR set to: 0
 16688  003CE0  C087  F087         	movff	___fldiv@b,?___fldiv
 16689  003CE4  C088  F088         	movff	___fldiv@b+1,?___fldiv+1
 16690  003CE8  C089  F089         	movff	___fldiv@b+2,?___fldiv+2
 16691  003CEC  C08A  F08A         	movff	___fldiv@b+3,?___fldiv+3
 16692                           
 16693                           ; BSR set to: 0
 16694  003CF0  0012               	return	
 16695  003CF2                     l6143:
 16696                           
 16697                           ; BSR set to: 0
 16698                           
 16699                           ; BSR set to: 0
 16700  003CF2  519E               	movf	___fldiv@bexp& (0+255),w,b
 16701  003CF4  A4D8               	btfss	status,2,c
 16702  003CF6  D011               	goto	l6145
 16703                           
 16704                           ; BSR set to: 0
 16705  003CF8  0E00               	movlw	0
 16706  003CFA  6F87               	movwf	___fldiv@b& (0+255),b
 16707  003CFC  0E00               	movlw	0
 16708  003CFE  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16709  003D00  0E00               	movlw	0
 16710  003D02  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16711  003D04  0E00               	movlw	0
 16712  003D06  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16713                           
 16714                           ; BSR set to: 0
 16715  003D08  C087  F087         	movff	___fldiv@b,?___fldiv
 16716  003D0C  C088  F088         	movff	___fldiv@b+1,?___fldiv+1
 16717  003D10  C089  F089         	movff	___fldiv@b+2,?___fldiv+2
 16718  003D14  C08A  F08A         	movff	___fldiv@b+3,?___fldiv+3
 16719                           
 16720                           ; BSR set to: 0
 16721  003D18  0012               	return	
 16722  003D1A                     l6145:
 16723                           
 16724                           ; BSR set to: 0
 16725                           
 16726                           ; BSR set to: 0
 16727  003D1A  519F               	movf	___fldiv@aexp& (0+255),w,b
 16728  003D1C  6F8F               	movwf	??___fldiv& (0+255),b
 16729  003D1E  6B90               	clrf	(??___fldiv+1)& (0+255),b
 16730  003D20  1F8F               	comf	??___fldiv& (0+255),f,b
 16731  003D22  1F90               	comf	(??___fldiv+1)& (0+255),f,b
 16732  003D24  4B8F               	infsnz	??___fldiv& (0+255),f,b
 16733  003D26  2B90               	incf	(??___fldiv+1)& (0+255),f,b
 16734  003D28  519E               	movf	___fldiv@bexp& (0+255),w,b
 16735  003D2A  6F91               	movwf	(??___fldiv+2)& (0+255),b
 16736  003D2C  6B92               	clrf	(??___fldiv+3)& (0+255),b
 16737  003D2E  518F               	movf	??___fldiv& (0+255),w,b
 16738  003D30  2791               	addwf	(??___fldiv+2)& (0+255),f,b
 16739  003D32  5190               	movf	(??___fldiv+1)& (0+255),w,b
 16740  003D34  2392               	addwfc	(??___fldiv+3)& (0+255),f,b
 16741  003D36  0E7F               	movlw	127
 16742  003D38  2591               	addwf	(??___fldiv+2)& (0+255),w,b
 16743  003D3A  6F98               	movwf	___fldiv@new_exp& (0+255),b
 16744  003D3C  0E00               	movlw	0
 16745  003D3E  2192               	addwfc	(??___fldiv+3)& (0+255),w,b
 16746  003D40  6F99               	movwf	(___fldiv@new_exp+1)& (0+255),b
 16747                           
 16748                           ; BSR set to: 0
 16749  003D42  C087  F094         	movff	___fldiv@b,___fldiv@rem
 16750  003D46  C088  F095         	movff	___fldiv@b+1,___fldiv@rem+1
 16751  003D4A  C089  F096         	movff	___fldiv@b+2,___fldiv@rem+2
 16752  003D4E  C08A  F097         	movff	___fldiv@b+3,___fldiv@rem+3
 16753                           
 16754                           ; BSR set to: 0
 16755  003D52  0E00               	movlw	0
 16756  003D54  6F87               	movwf	___fldiv@b& (0+255),b
 16757  003D56  0E00               	movlw	0
 16758  003D58  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16759  003D5A  0E00               	movlw	0
 16760  003D5C  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16761  003D5E  0E00               	movlw	0
 16762  003D60  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16763                           
 16764                           ; BSR set to: 0
 16765  003D62  0E00               	movlw	0
 16766  003D64  6F9A               	movwf	___fldiv@grs& (0+255),b
 16767  003D66  0E00               	movlw	0
 16768  003D68  6F9B               	movwf	(___fldiv@grs+1)& (0+255),b
 16769  003D6A  0E00               	movlw	0
 16770  003D6C  6F9C               	movwf	(___fldiv@grs+2)& (0+255),b
 16771  003D6E  0E00               	movlw	0
 16772  003D70  6F9D               	movwf	(___fldiv@grs+3)& (0+255),b
 16773                           
 16774                           ; BSR set to: 0
 16775  003D72  0E00               	movlw	0
 16776  003D74  6F9F               	movwf	___fldiv@aexp& (0+255),b
 16777  003D76  D028               	goto	l6146
 16778  003D78                     
 16779                           ; BSR set to: 0
 16780                           
 16781                           ; BSR set to: 0
 16782  003D78  519F               	movf	___fldiv@aexp& (0+255),w,b
 16783  003D7A  B4D8               	btfsc	status,2,c
 16784  003D7C  D011               	goto	l6148
 16785                           
 16786                           ; BSR set to: 0
 16787  003D7E  90D8               	bcf	status,0,c
 16788  003D80  3794               	rlcf	___fldiv@rem& (0+255),f,b
 16789  003D82  3795               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 16790  003D84  3796               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 16791  003D86  3797               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 16792  003D88  90D8               	bcf	status,0,c
 16793  003D8A  3787               	rlcf	___fldiv@b& (0+255),f,b
 16794  003D8C  3788               	rlcf	(___fldiv@b+1)& (0+255),f,b
 16795  003D8E  3789               	rlcf	(___fldiv@b+2)& (0+255),f,b
 16796  003D90  378A               	rlcf	(___fldiv@b+3)& (0+255),f,b
 16797                           
 16798                           ; BSR set to: 0
 16799  003D92  BF9D               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 16800                           
 16801                           ; BSR set to: 0
 16802  003D94  8187               	bsf	___fldiv@b& (0+255),0,b
 16803                           
 16804                           ; BSR set to: 0
 16805  003D96  90D8               	bcf	status,0,c
 16806  003D98  379A               	rlcf	___fldiv@grs& (0+255),f,b
 16807  003D9A  379B               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 16808  003D9C  379C               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 16809  003D9E  379D               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 16810  003DA0                     l6148:
 16811                           
 16812                           ; BSR set to: 0
 16813                           
 16814                           ; BSR set to: 0
 16815  003DA0  518B               	movf	___fldiv@a& (0+255),w,b
 16816  003DA2  5D94               	subwf	___fldiv@rem& (0+255),w,b
 16817  003DA4  518C               	movf	(___fldiv@a+1)& (0+255),w,b
 16818  003DA6  5995               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 16819  003DA8  518D               	movf	(___fldiv@a+2)& (0+255),w,b
 16820  003DAA  5996               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 16821  003DAC  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 16822  003DAE  5997               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 16823  003DB0  A0D8               	btfss	status,0,c
 16824  003DB2  D009               	goto	l6150
 16825                           
 16826                           ; BSR set to: 0
 16827  003DB4  8D9D               	bsf	(___fldiv@grs+3)& (0+255),6,b
 16828                           
 16829                           ; BSR set to: 0
 16830  003DB6  518B               	movf	___fldiv@a& (0+255),w,b
 16831  003DB8  5F94               	subwf	___fldiv@rem& (0+255),f,b
 16832  003DBA  518C               	movf	(___fldiv@a+1)& (0+255),w,b
 16833  003DBC  5B95               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 16834  003DBE  518D               	movf	(___fldiv@a+2)& (0+255),w,b
 16835  003DC0  5B96               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 16836  003DC2  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 16837  003DC4  5B97               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 16838  003DC6                     l6150:
 16839                           
 16840                           ; BSR set to: 0
 16841                           
 16842                           ; BSR set to: 0
 16843  003DC6  2B9F               	incf	___fldiv@aexp& (0+255),f,b
 16844  003DC8                     l6146:
 16845                           
 16846                           ; BSR set to: 0
 16847  003DC8  0E19               	movlw	25
 16848  003DCA  659F               	cpfsgt	___fldiv@aexp& (0+255),b
 16849  003DCC  D7D5               	goto	l6147
 16850                           
 16851                           ; BSR set to: 0
 16852                           
 16853                           ; BSR set to: 0
 16854  003DCE  5194               	movf	___fldiv@rem& (0+255),w,b
 16855  003DD0  1195               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 16856  003DD2  1196               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 16857  003DD4  1197               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 16858  003DD6  B4D8               	btfsc	status,2,c
 16859  003DD8  D011               	goto	l6153
 16860                           
 16861                           ; BSR set to: 0
 16862  003DDA  819A               	bsf	___fldiv@grs& (0+255),0,b
 16863                           
 16864                           ; BSR set to: 0
 16865  003DDC  D00F               	goto	l6153
 16866  003DDE                     
 16867                           ; BSR set to: 0
 16868                           
 16869                           ; BSR set to: 0
 16870  003DDE  90D8               	bcf	status,0,c
 16871  003DE0  3787               	rlcf	___fldiv@b& (0+255),f,b
 16872  003DE2  3788               	rlcf	(___fldiv@b+1)& (0+255),f,b
 16873  003DE4  3789               	rlcf	(___fldiv@b+2)& (0+255),f,b
 16874  003DE6  378A               	rlcf	(___fldiv@b+3)& (0+255),f,b
 16875                           
 16876                           ; BSR set to: 0
 16877  003DE8  BF9D               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 16878                           
 16879                           ; BSR set to: 0
 16880  003DEA  8187               	bsf	___fldiv@b& (0+255),0,b
 16881                           
 16882                           ; BSR set to: 0
 16883  003DEC  90D8               	bcf	status,0,c
 16884  003DEE  379A               	rlcf	___fldiv@grs& (0+255),f,b
 16885  003DF0  379B               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 16886  003DF2  379C               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 16887  003DF4  379D               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 16888  003DF6  0798               	decf	___fldiv@new_exp& (0+255),f,b
 16889  003DF8  A0D8               	btfss	status,0,c
 16890  003DFA  0799               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 16891  003DFC                     l6153:
 16892                           
 16893                           ; BSR set to: 0
 16894                           
 16895                           ; BSR set to: 0
 16896  003DFC  AF89               	btfss	(___fldiv@b+2)& (0+255),7,b
 16897  003DFE  D7EF               	goto	l6154
 16898                           
 16899                           ; BSR set to: 0
 16900                           
 16901                           ; BSR set to: 0
 16902  003E00  0E00               	movlw	0
 16903  003E02  6F9F               	movwf	___fldiv@aexp& (0+255),b
 16904                           
 16905                           ; BSR set to: 0
 16906  003E04  AF9D               	btfss	(___fldiv@grs+3)& (0+255),7,b
 16907  003E06  D016               	goto	l6160
 16908                           
 16909                           ; BSR set to: 0
 16910  003E08  0EFF               	movlw	255
 16911  003E0A  159A               	andwf	___fldiv@grs& (0+255),w,b
 16912  003E0C  6F8F               	movwf	??___fldiv& (0+255),b
 16913  003E0E  0EFF               	movlw	255
 16914  003E10  159B               	andwf	(___fldiv@grs+1)& (0+255),w,b
 16915  003E12  6F90               	movwf	(??___fldiv+1)& (0+255),b
 16916  003E14  0EFF               	movlw	255
 16917  003E16  159C               	andwf	(___fldiv@grs+2)& (0+255),w,b
 16918  003E18  6F91               	movwf	(??___fldiv+2)& (0+255),b
 16919  003E1A  0E7F               	movlw	127
 16920  003E1C  159D               	andwf	(___fldiv@grs+3)& (0+255),w,b
 16921  003E1E  6F92               	movwf	(??___fldiv+3)& (0+255),b
 16922  003E20  518F               	movf	??___fldiv& (0+255),w,b
 16923  003E22  1190               	iorwf	(??___fldiv+1)& (0+255),w,b
 16924  003E24  1191               	iorwf	(??___fldiv+2)& (0+255),w,b
 16925  003E26  1192               	iorwf	(??___fldiv+3)& (0+255),w,b
 16926  003E28  A4D8               	btfss	status,2,c
 16927  003E2A  D002               	goto	u56610
 16928                           
 16929                           ; BSR set to: 0
 16930                           
 16931                           ; BSR set to: 0
 16932  003E2C  A187               	btfss	___fldiv@b& (0+255),0,b
 16933  003E2E  D002               	goto	l6160
 16934  003E30                     u56610:
 16935                           
 16936                           ; BSR set to: 0
 16937  003E30  0E01               	movlw	1
 16938  003E32  6F9F               	movwf	___fldiv@aexp& (0+255),b
 16939  003E34                     l6160:
 16940                           
 16941                           ; BSR set to: 0
 16942                           
 16943                           ; BSR set to: 0
 16944                           
 16945                           ; BSR set to: 0
 16946  003E34  519F               	movf	___fldiv@aexp& (0+255),w,b
 16947  003E36  B4D8               	btfsc	status,2,c
 16948  003E38  D01F               	goto	l6162
 16949                           
 16950                           ; BSR set to: 0
 16951  003E3A  0E01               	movlw	1
 16952  003E3C  2787               	addwf	___fldiv@b& (0+255),f,b
 16953  003E3E  0E00               	movlw	0
 16954  003E40  2388               	addwfc	(___fldiv@b+1)& (0+255),f,b
 16955  003E42  2389               	addwfc	(___fldiv@b+2)& (0+255),f,b
 16956  003E44  238A               	addwfc	(___fldiv@b+3)& (0+255),f,b
 16957                           
 16958                           ; BSR set to: 0
 16959  003E46  A18A               	btfss	(___fldiv@b+3)& (0+255),0,b
 16960  003E48  D017               	goto	l6162
 16961                           
 16962                           ; BSR set to: 0
 16963  003E4A  C087  F08F         	movff	___fldiv@b,??___fldiv
 16964  003E4E  C088  F090         	movff	___fldiv@b+1,??___fldiv+1
 16965  003E52  C089  F091         	movff	___fldiv@b+2,??___fldiv+2
 16966  003E56  C08A  F092         	movff	___fldiv@b+3,??___fldiv+3
 16967  003E5A  3592               	rlcf	(??___fldiv+3)& (0+255),w,b
 16968  003E5C  3392               	rrcf	(??___fldiv+3)& (0+255),f,b
 16969  003E5E  3391               	rrcf	(??___fldiv+2)& (0+255),f,b
 16970  003E60  3390               	rrcf	(??___fldiv+1)& (0+255),f,b
 16971  003E62  338F               	rrcf	??___fldiv& (0+255),f,b
 16972  003E64  C08F  F087         	movff	??___fldiv,___fldiv@b
 16973  003E68  C090  F088         	movff	??___fldiv+1,___fldiv@b+1
 16974  003E6C  C091  F089         	movff	??___fldiv+2,___fldiv@b+2
 16975  003E70  C092  F08A         	movff	??___fldiv+3,___fldiv@b+3
 16976                           
 16977                           ; BSR set to: 0
 16978  003E74  4B98               	infsnz	___fldiv@new_exp& (0+255),f,b
 16979  003E76  2B99               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 16980  003E78                     l6162:
 16981                           
 16982                           ; BSR set to: 0
 16983                           
 16984                           ; BSR set to: 0
 16985                           
 16986                           ; BSR set to: 0
 16987  003E78  BF99               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 16988  003E7A  D010               	goto	l6163
 16989  003E7C  5199               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 16990  003E7E  E103               	bnz	u56640
 16991  003E80  2998               	incf	___fldiv@new_exp& (0+255),w,b
 16992  003E82  A0D8               	btfss	status,0,c
 16993  003E84  D00B               	goto	l6163
 16994  003E86                     u56640:
 16995                           
 16996                           ; BSR set to: 0
 16997  003E86  0E00               	movlw	0
 16998  003E88  6F99               	movwf	(___fldiv@new_exp+1)& (0+255),b
 16999  003E8A  6998               	setf	___fldiv@new_exp& (0+255),b
 17000  003E8C  0E00               	movlw	0
 17001  003E8E  6F87               	movwf	___fldiv@b& (0+255),b
 17002  003E90  0E00               	movlw	0
 17003  003E92  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 17004  003E94  0E00               	movlw	0
 17005  003E96  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 17006  003E98  0E00               	movlw	0
 17007  003E9A  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 17008  003E9C                     l6163:
 17009                           
 17010                           ; BSR set to: 0
 17011                           
 17012                           ; BSR set to: 0
 17013  003E9C  BF99               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 17014  003E9E  D005               	goto	u56650
 17015  003EA0  5199               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 17016  003EA2  E111               	bnz	l31004
 17017  003EA4  0598               	decf	___fldiv@new_exp& (0+255),w,b
 17018  003EA6  B0D8               	btfsc	status,0,c
 17019  003EA8  D00E               	goto	l6164
 17020  003EAA                     u56650:
 17021                           
 17022                           ; BSR set to: 0
 17023  003EAA  0E00               	movlw	0
 17024  003EAC  6F99               	movwf	(___fldiv@new_exp+1)& (0+255),b
 17025  003EAE  0E00               	movlw	0
 17026  003EB0  6F98               	movwf	___fldiv@new_exp& (0+255),b
 17027  003EB2  0E00               	movlw	0
 17028  003EB4  6F87               	movwf	___fldiv@b& (0+255),b
 17029  003EB6  0E00               	movlw	0
 17030  003EB8  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 17031  003EBA  0E00               	movlw	0
 17032  003EBC  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 17033  003EBE  0E00               	movlw	0
 17034  003EC0  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 17035  003EC2  0E00               	movlw	0
 17036  003EC4  6F93               	movwf	___fldiv@sign& (0+255),b
 17037  003EC6                     l6164:
 17038  003EC6                     l31004:
 17039                           
 17040                           ; BSR set to: 0
 17041  003EC6  C098  F09E         	movff	___fldiv@new_exp,___fldiv@bexp
 17042                           
 17043                           ; BSR set to: 0
 17044  003ECA  A19E               	btfss	___fldiv@bexp& (0+255),0,b
 17045  003ECC  D002               	goto	l6165
 17046                           
 17047                           ; BSR set to: 0
 17048  003ECE  8F89               	bsf	(___fldiv@b+2)& (0+255),7,b
 17049  003ED0  D001               	goto	l6166
 17050  003ED2                     l6165:
 17051                           
 17052                           ; BSR set to: 0
 17053                           
 17054                           ; BSR set to: 0
 17055  003ED2  9F89               	bcf	(___fldiv@b+2)& (0+255),7,b
 17056  003ED4                     l6166:
 17057                           
 17058                           ; BSR set to: 0
 17059                           
 17060                           ; BSR set to: 0
 17061  003ED4  90D8               	bcf	status,0,c
 17062  003ED6  319E               	rrcf	___fldiv@bexp& (0+255),w,b
 17063  003ED8  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 17064                           
 17065                           ; BSR set to: 0
 17066  003EDA  5193               	movf	___fldiv@sign& (0+255),w,b
 17067  003EDC  138A               	iorwf	(___fldiv@b+3)& (0+255),f,b
 17068                           
 17069                           ; BSR set to: 0
 17070  003EDE  C087  F087         	movff	___fldiv@b,?___fldiv
 17071  003EE2  C088  F088         	movff	___fldiv@b+1,?___fldiv+1
 17072  003EE6  C089  F089         	movff	___fldiv@b+2,?___fldiv+2
 17073  003EEA  C08A  F08A         	movff	___fldiv@b+3,?___fldiv+3
 17074  003EEE  0012               	return	
 17075  003EF0                     __end_of___fldiv:
 17076                           	opt stack 0
 17077                           tblptru	equ	0xFF8
 17078                           tblptrh	equ	0xFF7
 17079                           tblptrl	equ	0xFF6
 17080                           tablat	equ	0xFF5
 17081                           prodh	equ	0xFF4
 17082                           prodl	equ	0xFF3
 17083                           intcon	equ	0xFF2
 17084                           intcon2	equ	0xFF1
 17085                           postinc0	equ	0xFEE
 17086                           wreg	equ	0xFE8
 17087                           postinc1	equ	0xFE6
 17088                           indf2	equ	0xFDF
 17089                           postinc2	equ	0xFDE
 17090                           postdec2	equ	0xFDD
 17091                           plusw2	equ	0xFDB
 17092                           fsr2h	equ	0xFDA
 17093                           fsr2l	equ	0xFD9
 17094                           status	equ	0xFD8
 17095                           
 17096 ;; *************** function _Function_D_1 *****************
 17097 ;; Defined at:
 17098 ;;		line 778 in file "menu.c"
 17099 ;; Parameters:    Size  Location     Type
 17100 ;;		None
 17101 ;; Auto vars:     Size  Location     Type
 17102 ;;		None
 17103 ;; Return value:  Size  Location     Type
 17104 ;;                  1    wreg      void 
 17105 ;; Registers used:
 17106 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17107 ;; Tracked objects:
 17108 ;;		On entry : 0/0
 17109 ;;		On exit  : 0/0
 17110 ;;		Unchanged: 0/0
 17111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17116 ;;Total ram usage:        0 bytes
 17117 ;; Hardware stack levels used:    1
 17118 ;; Hardware stack levels required when called:   16
 17119 ;; This function calls:
 17120 ;;		_Lcd_Print_String
 17121 ;;		___lbmod
 17122 ;;		___wmul
 17123 ;;		_clear_row1
 17124 ;;		_clear_row2
 17125 ;;		_setControllerResolution
 17126 ;;		_un_block_code
 17127 ;; This function is called by:
 17128 ;;		_Function_D
 17129 ;; This function uses a non-reentrant model
 17130 ;;
 17131                           
 17132                           	psect	text49
 17133  008468                     __ptext49:
 17134                           	opt stack 0
 17135  008468                     _Function_D_1:
 17136                           	opt stack 12
 17137                           
 17138                           ;menu.c: 780: which_screen = POTS_RES_MENU;
 17139                           
 17140                           ; BSR set to: 0
 17141                           ;incstack = 0
 17142  008468  0E0F               	movlw	15
 17143  00846A  6E4F               	movwf	_which_screen,c
 17144                           
 17145                           ;menu.c: 781: lcd_print_once = 0;
 17146  00846C  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17147                           
 17148                           ;menu.c: 782: encoder_click = 0;
 17149  00846E  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17150                           
 17151                           ;menu.c: 784: potsResoMenu.selector = POT_MODE;
 17152  008470  0E00               	movlw	0
 17153  008472  BA05               	btfsc	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17154  008474  0E01               	movlw	1
 17155  008476  0101               	movlb	1	; () banked
 17156  008478  6F58               	movwf	(_potsResoMenu+2)& (0+255),b
 17157                           
 17158                           ;menu.c: 786: while(encoder_click == 0) {
 17159  00847A  D02D               	goto	l3656
 17160  00847C                     
 17161                           ;menu.c: 790: un_block_code();
 17162                           
 17163                           ; BSR set to: 1
 17164  00847C  ECAD  F04C         	call	_un_block_code	;wreg free
 17165                           
 17166                           ;menu.c: 792: if (lcd_print_once == 0) {
 17167  008480  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17168  008482  D028               	goto	l3658
 17169                           
 17170                           ;menu.c: 793: clear_row1();
 17171  008484  EC18  F04C         	call	_clear_row1	;wreg free
 17172                           
 17173                           ;menu.c: 794: Lcd_Print_String("Pots Resolution:");
 17174  008488  0EA8               	movlw	low STR_30
 17175  00848A  0100               	movlb	0	; () banked
 17176  00848C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17177  00848E  0EFD               	movlw	high STR_30
 17178  008490  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17179  008492  EC76  F042         	call	_Lcd_Print_String	;wreg free
 17180                           
 17181                           ;menu.c: 795: clear_row2();
 17182  008496  EC04  F04C         	call	_clear_row2	;wreg free
 17183                           
 17184                           ;menu.c: 796: Lcd_Print_String(LCD_STRINGS[(potsResoMenu.selector % potsResoMenu.number)
      +                           + potsResoMenu.address]);
 17185  00849A  0101               	movlb	1	; () banked
 17186  00849C  5156               	movf	_potsResoMenu& (0+255),w,b
 17187  00849E  6EE6               	movwf	postinc1,c
 17188  0084A0  5158               	movf	(_potsResoMenu+2)& (0+255),w,b
 17189  0084A2  6EE6               	movwf	postinc1,c
 17190  0084A4  EC63  F041         	call	___lbmod	;wreg free
 17191  0084A8  503F               	movf	btemp,w,c
 17192  0084AA  0101               	movlb	1	; () banked
 17193  0084AC  2557               	addwf	(_potsResoMenu+1)& (0+255),w,b
 17194  0084AE  0100               	movlb	0	; () banked
 17195  0084B0  6F60               	movwf	___wmul@multiplier& (0+255),b
 17196  0084B2  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 17197  0084B4  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 17198  0084B6  0E00               	movlw	0
 17199  0084B8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17200  0084BA  0E11               	movlw	17
 17201  0084BC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 17202  0084BE  EC2C  F04C         	call	___wmul	;wreg free
 17203  0084C2  0E9E               	movlw	low _LCD_STRINGS
 17204  0084C4  0100               	movlb	0	; () banked
 17205  0084C6  2560               	addwf	?___wmul& (0+255),w,b
 17206  0084C8  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17207  0084CA  0EF3               	movlw	high _LCD_STRINGS
 17208  0084CC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 17209  0084CE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17210  0084D0  EC76  F042         	call	_Lcd_Print_String	;wreg free
 17211  0084D4                     l3658:
 17212                           
 17213                           ;menu.c: 797: }
 17214                           ;menu.c: 798: lcd_print_once = 1;
 17215  0084D4  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17216  0084D6                     l3656:
 17217  0084D6  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 17218  0084D8  D7D1               	goto	l3657
 17219                           
 17220                           ;menu.c: 799: }
 17221                           ;menu.c: 805: POT_MODE = potsResoMenu.selector;
 17222  0084DA  0101               	movlb	1	; () banked
 17223  0084DC  A158               	btfss	(_potsResoMenu+2)& (0+255),0,b
 17224  0084DE  D002               	goto	u58470
 17225  0084E0  8A05               	bsf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17226  0084E2  D001               	goto	u58485
 17227  0084E4                     u58470:
 17228  0084E4  9A05               	bcf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17229  0084E6                     u58485:
 17230                           
 17231                           ;menu.c: 806: setControllerResolution();
 17232  0084E6  ECD9  F04B         	call	_setControllerResolution	;wreg free
 17233  0084EA  0012               	return		;funcret
 17234  0084EC                     __end_of_Function_D_1:
 17235                           	opt stack 0
 17236                           tblptru	equ	0xFF8
 17237                           tblptrh	equ	0xFF7
 17238                           tblptrl	equ	0xFF6
 17239                           tablat	equ	0xFF5
 17240                           prodh	equ	0xFF4
 17241                           prodl	equ	0xFF3
 17242                           intcon	equ	0xFF2
 17243                           intcon2	equ	0xFF1
 17244                           postinc0	equ	0xFEE
 17245                           wreg	equ	0xFE8
 17246                           postinc1	equ	0xFE6
 17247                           indf2	equ	0xFDF
 17248                           postinc2	equ	0xFDE
 17249                           postdec2	equ	0xFDD
 17250                           plusw2	equ	0xFDB
 17251                           fsr2h	equ	0xFDA
 17252                           fsr2l	equ	0xFD9
 17253                           status	equ	0xFD8
 17254                           
 17255 ;; *************** function _setControllerResolution *****************
 17256 ;; Defined at:
 17257 ;;		line 115 in file "menu.c"
 17258 ;; Parameters:    Size  Location     Type
 17259 ;;		None
 17260 ;; Auto vars:     Size  Location     Type
 17261 ;;  i               1    0[BANK0 ] unsigned char 
 17262 ;; Return value:  Size  Location     Type
 17263 ;;                  1    wreg      void 
 17264 ;; Registers used:
 17265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17266 ;; Tracked objects:
 17267 ;;		On entry : 0/0
 17268 ;;		On exit  : 0/0
 17269 ;;		Unchanged: 0/0
 17270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17272 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17274 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17275 ;;Total ram usage:        1 bytes
 17276 ;; Hardware stack levels used:    1
 17277 ;; Hardware stack levels required when called:    5
 17278 ;; This function calls:
 17279 ;;		Nothing
 17280 ;; This function is called by:
 17281 ;;		_Function_D_1
 17282 ;; This function uses a non-reentrant model
 17283 ;;
 17284                           
 17285                           	psect	text50
 17286  0097B2                     __ptext50:
 17287                           	opt stack 0
 17288  0097B2                     _setControllerResolution:
 17289                           	opt stack 22
 17290                           
 17291                           ;menu.c: 117: for(unsigned char i=0;i<16;i++){
 17292                           
 17293                           ;incstack = 0
 17294  0097B2  0E00               	movlw	0
 17295  0097B4  0100               	movlb	0	; () banked
 17296  0097B6  6F60               	movwf	setControllerResolution@i& (0+255),b
 17297  0097B8                     l31194:
 17298                           
 17299                           ; BSR set to: 0
 17300  0097B8  0E0F               	movlw	15
 17301  0097BA  6560               	cpfsgt	setControllerResolution@i& (0+255),b
 17302  0097BC  D001               	goto	l3470
 17303  0097BE  0012               	return	
 17304  0097C0                     l3470:
 17305                           
 17306                           ; BSR set to: 0
 17307                           ;menu.c: 119: inputPotsArray[i].controller_resolution = POT_MODE;
 17308                           
 17309                           ; BSR set to: 0
 17310  0097C0  5160               	movf	setControllerResolution@i& (0+255),w,b
 17311  0097C2  0D03               	mullw	3
 17312  0097C4  0E88               	movlw	low _inputPotsArray
 17313  0097C6  24F3               	addwf	prodl,w,c
 17314  0097C8  6ED9               	movwf	fsr2l,c
 17315  0097CA  0E02               	movlw	high _inputPotsArray
 17316  0097CC  20F4               	addwfc	prodh,w,c
 17317  0097CE  6EDA               	movwf	fsr2h,c
 17318  0097D0  0102               	movlb	2	; () banked
 17319  0097D2  90DF               	bcf	indf2,0,c
 17320  0097D4  BA05               	btfsc	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17321  0097D6  80DF               	bsf	indf2,0,c
 17322  0097D8  0100               	movlb	0	; () banked
 17323  0097DA  2B60               	incf	setControllerResolution@i& (0+255),f,b
 17324  0097DC  D7ED               	goto	l31194
 17325  0097DE                     __end_of_setControllerResolution:
 17326                           	opt stack 0
 17327                           tblptru	equ	0xFF8
 17328                           tblptrh	equ	0xFF7
 17329                           tblptrl	equ	0xFF6
 17330                           tablat	equ	0xFF5
 17331                           prodh	equ	0xFF4
 17332                           prodl	equ	0xFF3
 17333                           intcon	equ	0xFF2
 17334                           intcon2	equ	0xFF1
 17335                           postinc0	equ	0xFEE
 17336                           wreg	equ	0xFE8
 17337                           postinc1	equ	0xFE6
 17338                           indf2	equ	0xFDF
 17339                           postinc2	equ	0xFDE
 17340                           postdec2	equ	0xFDD
 17341                           plusw2	equ	0xFDB
 17342                           fsr2h	equ	0xFDA
 17343                           fsr2l	equ	0xFD9
 17344                           status	equ	0xFD8
 17345                           
 17346 ;; *************** function _Function_C *****************
 17347 ;; Defined at:
 17348 ;;		line 749 in file "menu.c"
 17349 ;; Parameters:    Size  Location     Type
 17350 ;;		None
 17351 ;; Auto vars:     Size  Location     Type
 17352 ;;		None
 17353 ;; Return value:  Size  Location     Type
 17354 ;;                  1    wreg      void 
 17355 ;; Registers used:
 17356 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17357 ;; Tracked objects:
 17358 ;;		On entry : 0/0
 17359 ;;		On exit  : 0/0
 17360 ;;		Unchanged: 0/0
 17361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17365 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17366 ;;Total ram usage:        0 bytes
 17367 ;; Hardware stack levels used:    1
 17368 ;; Hardware stack levels required when called:   17
 17369 ;; This function calls:
 17370 ;;		_Function_C_1
 17371 ;;		_Function_C_2
 17372 ;;		_Function_C_3
 17373 ;;		_Lcd_Print_String
 17374 ;;		___lbmod
 17375 ;;		___wmul
 17376 ;;		_clear_row2
 17377 ;;		_un_block_code
 17378 ;; This function is called by:
 17379 ;;		_menu_lcd
 17380 ;; This function uses a non-reentrant model
 17381 ;;
 17382                           
 17383                           	psect	text51
 17384  008086                     __ptext51:
 17385                           	opt stack 0
 17386  008086                     _Function_C:
 17387                           	opt stack 12
 17388                           
 17389                           ;menu.c: 751: which_screen = DRUM_MENU;
 17390                           
 17391                           ; BSR set to: 0
 17392                           ;incstack = 0
 17393  008086  0E05               	movlw	5
 17394  008088  6E4F               	movwf	_which_screen,c
 17395                           
 17396                           ;menu.c: 752: lcd_print_once = 0;
 17397  00808A  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17398                           
 17399                           ;menu.c: 754: drumMenu.selector = DRUM_MODE;
 17400  00808C  0E00               	movlw	0
 17401  00808E  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 17402  008090  0E01               	movlw	1
 17403  008092  0101               	movlb	1	; () banked
 17404  008094  6F67               	movwf	(_drumMenu+2)& (0+255),b
 17405                           
 17406                           ;menu.c: 756: while(encoder_click == 0) {
 17407  008096  D024               	goto	l3644
 17408  008098                     
 17409                           ;menu.c: 760: un_block_code();
 17410                           
 17411                           ; BSR set to: 1
 17412  008098  ECAD  F04C         	call	_un_block_code	;wreg free
 17413                           
 17414                           ;menu.c: 762: if (lcd_print_once == 0) {
 17415  00809C  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17416  00809E  D01F               	goto	l3646
 17417                           
 17418                           ;menu.c: 763: clear_row2();
 17419  0080A0  EC04  F04C         	call	_clear_row2	;wreg free
 17420                           
 17421                           ;menu.c: 764: Lcd_Print_String(LCD_STRINGS[(drumMenu.selector % drumMenu.number) + drumM
      +                          enu.address]);
 17422  0080A4  0101               	movlb	1	; () banked
 17423  0080A6  5165               	movf	_drumMenu& (0+255),w,b
 17424  0080A8  6EE6               	movwf	postinc1,c
 17425  0080AA  5167               	movf	(_drumMenu+2)& (0+255),w,b
 17426  0080AC  6EE6               	movwf	postinc1,c
 17427  0080AE  EC63  F041         	call	___lbmod	;wreg free
 17428  0080B2  503F               	movf	btemp,w,c
 17429  0080B4  0101               	movlb	1	; () banked
 17430  0080B6  2566               	addwf	(_drumMenu+1)& (0+255),w,b
 17431  0080B8  0100               	movlb	0	; () banked
 17432  0080BA  6F60               	movwf	___wmul@multiplier& (0+255),b
 17433  0080BC  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 17434  0080BE  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 17435  0080C0  0E00               	movlw	0
 17436  0080C2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17437  0080C4  0E11               	movlw	17
 17438  0080C6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 17439  0080C8  EC2C  F04C         	call	___wmul	;wreg free
 17440  0080CC  0E9E               	movlw	low _LCD_STRINGS
 17441  0080CE  0100               	movlb	0	; () banked
 17442  0080D0  2560               	addwf	?___wmul& (0+255),w,b
 17443  0080D2  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17444  0080D4  0EF3               	movlw	high _LCD_STRINGS
 17445  0080D6  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 17446  0080D8  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17447  0080DA  EC76  F042         	call	_Lcd_Print_String	;wreg free
 17448  0080DE                     l3646:
 17449                           
 17450                           ;menu.c: 766: }
 17451                           ;menu.c: 767: lcd_print_once = 1;
 17452  0080DE  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17453  0080E0                     l3644:
 17454  0080E0  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 17455  0080E2  D7DA               	goto	l3645
 17456                           
 17457                           ;menu.c: 768: }
 17458                           ;menu.c: 770: if(drumMenu.selector == 0){DRUM_MODE = 0;}
 17459  0080E4  0101               	movlb	1	; () banked
 17460  0080E6  5167               	movf	(_drumMenu+2)& (0+255),w,b
 17461  0080E8  B4D8               	btfsc	status,2,c
 17462                           
 17463                           ; BSR set to: 1
 17464  0080EA  9801               	bcf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 17465                           
 17466                           ; BSR set to: 1
 17467                           ;menu.c: 771: if(drumMenu.selector == 1){DRUM_MODE = 1;}
 17468                           
 17469                           ; BSR set to: 1
 17470  0080EC  0567               	decf	(_drumMenu+2)& (0+255),w,b
 17471  0080EE  B4D8               	btfsc	status,2,c
 17472                           
 17473                           ; BSR set to: 1
 17474  0080F0  8801               	bsf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 17475                           
 17476                           ; BSR set to: 1
 17477                           ;menu.c: 772: if(drumMenu.selector == 2) {Function_C_1();}
 17478                           
 17479                           ; BSR set to: 1
 17480  0080F2  0E02               	movlw	2
 17481  0080F4  1967               	xorwf	(_drumMenu+2)& (0+255),w,b
 17482  0080F6  B4D8               	btfsc	status,2,c
 17483                           
 17484                           ; BSR set to: 1
 17485  0080F8  EC1C  F041         	call	_Function_C_1	;wreg free
 17486                           
 17487                           ;menu.c: 773: if(drumMenu.selector == 3) {Function_C_2();}
 17488  0080FC  0E03               	movlw	3
 17489  0080FE  0101               	movlb	1	; () banked
 17490  008100  1967               	xorwf	(_drumMenu+2)& (0+255),w,b
 17491  008102  B4D8               	btfsc	status,2,c
 17492                           
 17493                           ; BSR set to: 1
 17494  008104  ECCA  F031         	call	_Function_C_2	;wreg free
 17495                           
 17496                           ;menu.c: 774: if(drumMenu.selector == 4) {Function_C_3();}
 17497  008108  0E04               	movlw	4
 17498  00810A  0101               	movlb	1	; () banked
 17499  00810C  1967               	xorwf	(_drumMenu+2)& (0+255),w,b
 17500  00810E  A4D8               	btfss	status,2,c
 17501  008110  0012               	return	
 17502                           
 17503                           ; BSR set to: 1
 17504  008112  EC37  F031         	call	_Function_C_3	;wreg free
 17505  008116  0012               	return	
 17506  008118                     __end_of_Function_C:
 17507                           	opt stack 0
 17508                           tblptru	equ	0xFF8
 17509                           tblptrh	equ	0xFF7
 17510                           tblptrl	equ	0xFF6
 17511                           tablat	equ	0xFF5
 17512                           prodh	equ	0xFF4
 17513                           prodl	equ	0xFF3
 17514                           intcon	equ	0xFF2
 17515                           intcon2	equ	0xFF1
 17516                           postinc0	equ	0xFEE
 17517                           wreg	equ	0xFE8
 17518                           postinc1	equ	0xFE6
 17519                           indf2	equ	0xFDF
 17520                           postinc2	equ	0xFDE
 17521                           postdec2	equ	0xFDD
 17522                           plusw2	equ	0xFDB
 17523                           fsr2h	equ	0xFDA
 17524                           fsr2l	equ	0xFD9
 17525                           status	equ	0xFD8
 17526                           
 17527 ;; *************** function _Function_C_3 *****************
 17528 ;; Defined at:
 17529 ;;		line 698 in file "menu.c"
 17530 ;; Parameters:    Size  Location     Type
 17531 ;;		None
 17532 ;; Auto vars:     Size  Location     Type
 17533 ;;  array_index     1  104[BANK0 ] unsigned char 
 17534 ;; Return value:  Size  Location     Type
 17535 ;;                  1    wreg      void 
 17536 ;; Registers used:
 17537 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17538 ;; Tracked objects:
 17539 ;;		On entry : 0/0
 17540 ;;		On exit  : 0/0
 17541 ;;		Unchanged: 0/0
 17542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17544 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17545 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17546 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17547 ;;Total ram usage:        2 bytes
 17548 ;; Hardware stack levels used:    1
 17549 ;; Hardware stack levels required when called:   16
 17550 ;; This function calls:
 17551 ;;		_Lcd_Print_String
 17552 ;;		_Lcd_Set_Cursor
 17553 ;;		___lbmod
 17554 ;;		___wmul
 17555 ;;		_clear_row1
 17556 ;;		_clear_row2
 17557 ;;		_int2string
 17558 ;;		_un_block_code
 17559 ;; This function is called by:
 17560 ;;		_Function_C
 17561 ;; This function uses a non-reentrant model
 17562 ;;
 17563                           
 17564                           	psect	text52
 17565  00626E                     __ptext52:
 17566                           	opt stack 0
 17567  00626E                     _Function_C_3:
 17568                           	opt stack 12
 17569                           
 17570                           ;menu.c: 700: which_screen = DRUMS_CC_MENU;
 17571                           
 17572                           ;incstack = 0
 17573  00626E  0E0E               	movlw	14
 17574  006270  6E4F               	movwf	_which_screen,c
 17575                           
 17576                           ;menu.c: 701: lcd_print_once = 0;
 17577  006272  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17578                           
 17579                           ;menu.c: 702: encoder_click = 0;
 17580  006274  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17581                           
 17582                           ;menu.c: 704: while(encoder_click == 0) {
 17583  006276  D02D               	goto	l3629
 17584  006278                     
 17585                           ;menu.c: 708: un_block_code();
 17586  006278  ECAD  F04C         	call	_un_block_code	;wreg free
 17587                           
 17588                           ;menu.c: 710: if (lcd_print_once == 0) {
 17589  00627C  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17590  00627E  D028               	goto	l3631
 17591                           
 17592                           ;menu.c: 711: clear_row1();
 17593  006280  EC18  F04C         	call	_clear_row1	;wreg free
 17594                           
 17595                           ;menu.c: 712: Lcd_Print_String("Set CC Number:");
 17596  006284  0E6B               	movlw	low STR_29
 17597  006286  0100               	movlb	0	; () banked
 17598  006288  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17599  00628A  0EFE               	movlw	high STR_29
 17600  00628C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17601  00628E  EC76  F042         	call	_Lcd_Print_String	;wreg free
 17602                           
 17603                           ;menu.c: 713: clear_row2();
 17604  006292  EC04  F04C         	call	_clear_row2	;wreg free
 17605                           
 17606                           ;menu.c: 714: Lcd_Print_String(LCD_STRINGS[(drumCCMenu.selector % drumCCMenu.number) + d
      +                          rumCCMenu.address]);
 17607  006296  0101               	movlb	1	; () banked
 17608  006298  515C               	movf	_drumCCMenu& (0+255),w,b
 17609  00629A  6EE6               	movwf	postinc1,c
 17610  00629C  515E               	movf	(_drumCCMenu+2)& (0+255),w,b
 17611  00629E  6EE6               	movwf	postinc1,c
 17612  0062A0  EC63  F041         	call	___lbmod	;wreg free
 17613  0062A4  503F               	movf	btemp,w,c
 17614  0062A6  0101               	movlb	1	; () banked
 17615  0062A8  255D               	addwf	(_drumCCMenu+1)& (0+255),w,b
 17616  0062AA  0100               	movlb	0	; () banked
 17617  0062AC  6F60               	movwf	___wmul@multiplier& (0+255),b
 17618  0062AE  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 17619  0062B0  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 17620  0062B2  0E00               	movlw	0
 17621  0062B4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17622  0062B6  0E11               	movlw	17
 17623  0062B8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 17624  0062BA  EC2C  F04C         	call	___wmul	;wreg free
 17625  0062BE  0E9E               	movlw	low _LCD_STRINGS
 17626  0062C0  0100               	movlb	0	; () banked
 17627  0062C2  2560               	addwf	?___wmul& (0+255),w,b
 17628  0062C4  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17629  0062C6  0EF3               	movlw	high _LCD_STRINGS
 17630  0062C8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 17631  0062CA  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17632  0062CC  EC76  F042         	call	_Lcd_Print_String	;wreg free
 17633  0062D0                     l3631:
 17634                           
 17635                           ;menu.c: 715: }
 17636                           ;menu.c: 716: lcd_print_once = 1;
 17637  0062D0  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17638  0062D2                     l3629:
 17639  0062D2  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 17640  0062D4  D7D1               	goto	l3630
 17641                           
 17642                           ;menu.c: 717: }
 17643                           ;menu.c: 719: which_screen = BLANK;
 17644  0062D6  0E00               	movlw	0
 17645  0062D8  6E4F               	movwf	_which_screen,c
 17646                           
 17647                           ;menu.c: 720: lcd_print_once = 0;
 17648  0062DA  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17649                           
 17650                           ;menu.c: 721: encoder_click = 0;
 17651  0062DC  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17652                           
 17653                           ;menu.c: 722: unsigned char array_index = drumCCMenu.selector;
 17654  0062DE  C15E  F0C8         	movff	_drumCCMenu+2,Function_C_3@array_index
 17655                           
 17656                           ;menu.c: 724: while(encoder_click == 0) {
 17657  0062E2  D055               	goto	l3635
 17658  0062E4                     l3634:
 17659                           
 17660                           ;menu.c: 726: if(lcd_print_once == 0) {
 17661  0062E4  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17662  0062E6  D053               	goto	l3635
 17663                           
 17664                           ;menu.c: 727: if (encoder_direction == 0x10) {
 17665  0062E8  0E10               	movlw	16
 17666  0062EA  1836               	xorwf	_encoder_direction,w,c
 17667  0062EC  A4D8               	btfss	status,2,c
 17668  0062EE  D017               	goto	l3636
 17669                           
 17670                           ;menu.c: 728: if(DRUM_CC[array_index] < 127) {
 17671  0062F0  0100               	movlb	0	; () banked
 17672  0062F2  51C8               	movf	Function_C_3@array_index& (0+255),w,b
 17673  0062F4  0D01               	mullw	1
 17674  0062F6  0EF5               	movlw	low _DRUM_CC
 17675  0062F8  24F3               	addwf	prodl,w,c
 17676  0062FA  6ED9               	movwf	fsr2l,c
 17677  0062FC  0E00               	movlw	high _DRUM_CC
 17678  0062FE  20F4               	addwfc	prodh,w,c
 17679  006300  6EDA               	movwf	fsr2h,c
 17680  006302  0E7F               	movlw	127
 17681  006304  60DF               	cpfslt	indf2,c
 17682  006306  D009               	goto	l3637
 17683                           
 17684                           ; BSR set to: 0
 17685                           ;menu.c: 729: DRUM_CC[array_index]++;
 17686  006308  51C8               	movf	Function_C_3@array_index& (0+255),w,b
 17687  00630A  0D01               	mullw	1
 17688  00630C  0EF5               	movlw	low _DRUM_CC
 17689  00630E  24F3               	addwf	prodl,w,c
 17690  006310  6ED9               	movwf	fsr2l,c
 17691  006312  0E00               	movlw	high _DRUM_CC
 17692  006314  20F4               	addwfc	prodh,w,c
 17693  006316  6EDA               	movwf	fsr2h,c
 17694  006318  2ADF               	incf	indf2,f,c
 17695  00631A                     l3637:
 17696                           
 17697                           ; BSR set to: 0
 17698                           ;menu.c: 730: }
 17699                           ;menu.c: 731: encoder_direction = 0x00;
 17700                           
 17701                           ; BSR set to: 0
 17702  00631A  0E00               	movlw	0
 17703  00631C  6E36               	movwf	_encoder_direction,c
 17704  00631E                     l3636:
 17705                           
 17706                           ;menu.c: 732: }
 17707                           ;menu.c: 734: if (encoder_direction == 0x20) {
 17708                           
 17709                           ; BSR set to: 0
 17710  00631E  0E20               	movlw	32
 17711  006320  1836               	xorwf	_encoder_direction,w,c
 17712  006322  A4D8               	btfss	status,2,c
 17713  006324  D017               	goto	l3638
 17714                           
 17715                           ;menu.c: 735: if(DRUM_CC[array_index] > 0) {
 17716  006326  0100               	movlb	0	; () banked
 17717  006328  51C8               	movf	Function_C_3@array_index& (0+255),w,b
 17718  00632A  0D01               	mullw	1
 17719  00632C  0EF5               	movlw	low _DRUM_CC
 17720  00632E  24F3               	addwf	prodl,w,c
 17721  006330  6ED9               	movwf	fsr2l,c
 17722  006332  0E00               	movlw	high _DRUM_CC
 17723  006334  20F4               	addwfc	prodh,w,c
 17724  006336  6EDA               	movwf	fsr2h,c
 17725  006338  50DF               	movf	indf2,w,c
 17726  00633A  B4D8               	btfsc	status,2,c
 17727  00633C  D009               	goto	l3639
 17728                           
 17729                           ; BSR set to: 0
 17730                           ;menu.c: 736: DRUM_CC[array_index]--;
 17731  00633E  51C8               	movf	Function_C_3@array_index& (0+255),w,b
 17732  006340  0D01               	mullw	1
 17733  006342  0EF5               	movlw	low _DRUM_CC
 17734  006344  24F3               	addwf	prodl,w,c
 17735  006346  6ED9               	movwf	fsr2l,c
 17736  006348  0E00               	movlw	high _DRUM_CC
 17737  00634A  20F4               	addwfc	prodh,w,c
 17738  00634C  6EDA               	movwf	fsr2h,c
 17739  00634E  06DF               	decf	indf2,f,c
 17740  006350                     l3639:
 17741                           
 17742                           ; BSR set to: 0
 17743                           ;menu.c: 737: }
 17744                           ;menu.c: 738: encoder_direction = 0x00;
 17745                           
 17746                           ; BSR set to: 0
 17747  006350  0E00               	movlw	0
 17748  006352  6E36               	movwf	_encoder_direction,c
 17749  006354                     l3638:
 17750                           
 17751                           ;menu.c: 739: }
 17752                           ;menu.c: 741: int2string(DRUM_CC[array_index]);
 17753                           
 17754                           ; BSR set to: 0
 17755  006354  0100               	movlb	0	; () banked
 17756  006356  51C8               	movf	Function_C_3@array_index& (0+255),w,b
 17757  006358  0D01               	mullw	1
 17758  00635A  0EF5               	movlw	low _DRUM_CC
 17759  00635C  24F3               	addwf	prodl,w,c
 17760  00635E  6ED9               	movwf	fsr2l,c
 17761  006360  0E00               	movlw	high _DRUM_CC
 17762  006362  20F4               	addwfc	prodh,w,c
 17763  006364  6EDA               	movwf	fsr2h,c
 17764  006366  50DF               	movf	indf2,w,c
 17765  006368  6FC7               	movwf	??_Function_C_3& (0+255),b
 17766  00636A  51C7               	movf	??_Function_C_3& (0+255),w,b
 17767  00636C  6F60               	movwf	int2string@number& (0+255),b
 17768  00636E  6B61               	clrf	(int2string@number+1)& (0+255),b
 17769  006370  EC0A  F03B         	call	_int2string	;wreg free
 17770                           
 17771                           ;menu.c: 742: Lcd_Set_Cursor(2,13);
 17772  006374  0E0D               	movlw	13
 17773  006376  0100               	movlb	0	; () banked
 17774  006378  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 17775  00637A  0E02               	movlw	2
 17776  00637C  ECDF  F047         	call	_Lcd_Set_Cursor
 17777                           
 17778                           ;menu.c: 743: Lcd_Print_String(string2display);
 17779  006380  0E92               	movlw	low _string2display
 17780  006382  0100               	movlb	0	; () banked
 17781  006384  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17782  006386  0E01               	movlw	high _string2display
 17783  006388  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17784  00638A  EC76  F042         	call	_Lcd_Print_String	;wreg free
 17785  00638E                     l3635:
 17786  00638E  B205               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 17787  006390  0012               	return	
 17788  006392  D7A8               	goto	l3634
 17789  006394                     __end_of_Function_C_3:
 17790                           	opt stack 0
 17791                           tblptru	equ	0xFF8
 17792                           tblptrh	equ	0xFF7
 17793                           tblptrl	equ	0xFF6
 17794                           tablat	equ	0xFF5
 17795                           prodh	equ	0xFF4
 17796                           prodl	equ	0xFF3
 17797                           intcon	equ	0xFF2
 17798                           intcon2	equ	0xFF1
 17799                           postinc0	equ	0xFEE
 17800                           wreg	equ	0xFE8
 17801                           postinc1	equ	0xFE6
 17802                           indf2	equ	0xFDF
 17803                           postinc2	equ	0xFDE
 17804                           postdec2	equ	0xFDD
 17805                           plusw2	equ	0xFDB
 17806                           fsr2h	equ	0xFDA
 17807                           fsr2l	equ	0xFD9
 17808                           status	equ	0xFD8
 17809                           
 17810 ;; *************** function _Function_C_2 *****************
 17811 ;; Defined at:
 17812 ;;		line 646 in file "menu.c"
 17813 ;; Parameters:    Size  Location     Type
 17814 ;;		None
 17815 ;; Auto vars:     Size  Location     Type
 17816 ;;  array_index     1  104[BANK0 ] unsigned char 
 17817 ;; Return value:  Size  Location     Type
 17818 ;;                  1    wreg      void 
 17819 ;; Registers used:
 17820 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17821 ;; Tracked objects:
 17822 ;;		On entry : 0/0
 17823 ;;		On exit  : 0/0
 17824 ;;		Unchanged: 0/0
 17825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17827 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17828 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17829 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17830 ;;Total ram usage:        2 bytes
 17831 ;; Hardware stack levels used:    1
 17832 ;; Hardware stack levels required when called:   16
 17833 ;; This function calls:
 17834 ;;		_Lcd_Print_String
 17835 ;;		_Lcd_Set_Cursor
 17836 ;;		___lbmod
 17837 ;;		___wmul
 17838 ;;		_clear_row1
 17839 ;;		_clear_row2
 17840 ;;		_int2string
 17841 ;;		_un_block_code
 17842 ;; This function is called by:
 17843 ;;		_Function_C
 17844 ;; This function uses a non-reentrant model
 17845 ;;
 17846                           
 17847                           	psect	text53
 17848  006394                     __ptext53:
 17849                           	opt stack 0
 17850  006394                     _Function_C_2:
 17851                           	opt stack 12
 17852                           
 17853                           ;menu.c: 648: which_screen = DRUMS_NN_MENU;
 17854                           
 17855                           ;incstack = 0
 17856  006394  0E0D               	movlw	13
 17857  006396  6E4F               	movwf	_which_screen,c
 17858                           
 17859                           ;menu.c: 649: lcd_print_once = 0;
 17860  006398  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17861                           
 17862                           ;menu.c: 650: encoder_click = 0;
 17863  00639A  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17864                           
 17865                           ;menu.c: 652: while(encoder_click == 0) {
 17866  00639C  D02D               	goto	l3614
 17867  00639E                     
 17868                           ;menu.c: 656: un_block_code();
 17869  00639E  ECAD  F04C         	call	_un_block_code	;wreg free
 17870                           
 17871                           ;menu.c: 658: if (lcd_print_once == 0) {
 17872  0063A2  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17873  0063A4  D028               	goto	l3616
 17874                           
 17875                           ;menu.c: 659: clear_row1();
 17876  0063A6  EC18  F04C         	call	_clear_row1	;wreg free
 17877                           
 17878                           ;menu.c: 660: Lcd_Print_String("Set Note Number:");
 17879  0063AA  0ECA               	movlw	low STR_28
 17880  0063AC  0100               	movlb	0	; () banked
 17881  0063AE  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17882  0063B0  0EFD               	movlw	high STR_28
 17883  0063B2  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17884  0063B4  EC76  F042         	call	_Lcd_Print_String	;wreg free
 17885                           
 17886                           ;menu.c: 661: clear_row2();
 17887  0063B8  EC04  F04C         	call	_clear_row2	;wreg free
 17888                           
 17889                           ;menu.c: 662: Lcd_Print_String(LCD_STRINGS[(drumNNMenu.selector % drumNNMenu.number) + d
      +                          rumNNMenu.address]);
 17890  0063BC  0101               	movlb	1	; () banked
 17891  0063BE  515F               	movf	_drumNNMenu& (0+255),w,b
 17892  0063C0  6EE6               	movwf	postinc1,c
 17893  0063C2  5161               	movf	(_drumNNMenu+2)& (0+255),w,b
 17894  0063C4  6EE6               	movwf	postinc1,c
 17895  0063C6  EC63  F041         	call	___lbmod	;wreg free
 17896  0063CA  503F               	movf	btemp,w,c
 17897  0063CC  0101               	movlb	1	; () banked
 17898  0063CE  2560               	addwf	(_drumNNMenu+1)& (0+255),w,b
 17899  0063D0  0100               	movlb	0	; () banked
 17900  0063D2  6F60               	movwf	___wmul@multiplier& (0+255),b
 17901  0063D4  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 17902  0063D6  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 17903  0063D8  0E00               	movlw	0
 17904  0063DA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17905  0063DC  0E11               	movlw	17
 17906  0063DE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 17907  0063E0  EC2C  F04C         	call	___wmul	;wreg free
 17908  0063E4  0E9E               	movlw	low _LCD_STRINGS
 17909  0063E6  0100               	movlb	0	; () banked
 17910  0063E8  2560               	addwf	?___wmul& (0+255),w,b
 17911  0063EA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17912  0063EC  0EF3               	movlw	high _LCD_STRINGS
 17913  0063EE  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 17914  0063F0  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17915  0063F2  EC76  F042         	call	_Lcd_Print_String	;wreg free
 17916  0063F6                     l3616:
 17917                           
 17918                           ;menu.c: 663: }
 17919                           ;menu.c: 664: lcd_print_once = 1;
 17920  0063F6  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17921  0063F8                     l3614:
 17922  0063F8  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 17923  0063FA  D7D1               	goto	l3615
 17924                           
 17925                           ;menu.c: 665: }
 17926                           ;menu.c: 667: which_screen = BLANK;
 17927  0063FC  0E00               	movlw	0
 17928  0063FE  6E4F               	movwf	_which_screen,c
 17929                           
 17930                           ;menu.c: 668: lcd_print_once = 0;
 17931  006400  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17932                           
 17933                           ;menu.c: 669: encoder_click = 0;
 17934  006402  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17935                           
 17936                           ;menu.c: 670: unsigned char array_index = drumNNMenu.selector;
 17937  006404  C161  F0C8         	movff	_drumNNMenu+2,Function_C_2@array_index
 17938                           
 17939                           ;menu.c: 672: while(encoder_click == 0) {
 17940  006408  D055               	goto	l3620
 17941  00640A                     l3619:
 17942                           
 17943                           ;menu.c: 674: if(lcd_print_once == 0) {
 17944  00640A  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17945  00640C  D053               	goto	l3620
 17946                           
 17947                           ;menu.c: 675: if (encoder_direction == 0x10) {
 17948  00640E  0E10               	movlw	16
 17949  006410  1836               	xorwf	_encoder_direction,w,c
 17950  006412  A4D8               	btfss	status,2,c
 17951  006414  D017               	goto	l3621
 17952                           
 17953                           ;menu.c: 676: if(DRUM_NOTE[array_index] < 81) {
 17954  006416  0100               	movlb	0	; () banked
 17955  006418  51C8               	movf	Function_C_2@array_index& (0+255),w,b
 17956  00641A  0D01               	mullw	1
 17957  00641C  0EE7               	movlw	low _DRUM_NOTE
 17958  00641E  24F3               	addwf	prodl,w,c
 17959  006420  6ED9               	movwf	fsr2l,c
 17960  006422  0E01               	movlw	high _DRUM_NOTE
 17961  006424  20F4               	addwfc	prodh,w,c
 17962  006426  6EDA               	movwf	fsr2h,c
 17963  006428  0E51               	movlw	81
 17964  00642A  60DF               	cpfslt	indf2,c
 17965  00642C  D009               	goto	l3622
 17966                           
 17967                           ; BSR set to: 0
 17968                           ;menu.c: 677: DRUM_NOTE[array_index]++;
 17969  00642E  51C8               	movf	Function_C_2@array_index& (0+255),w,b
 17970  006430  0D01               	mullw	1
 17971  006432  0EE7               	movlw	low _DRUM_NOTE
 17972  006434  24F3               	addwf	prodl,w,c
 17973  006436  6ED9               	movwf	fsr2l,c
 17974  006438  0E01               	movlw	high _DRUM_NOTE
 17975  00643A  20F4               	addwfc	prodh,w,c
 17976  00643C  6EDA               	movwf	fsr2h,c
 17977  00643E  2ADF               	incf	indf2,f,c
 17978  006440                     l3622:
 17979                           
 17980                           ; BSR set to: 0
 17981                           ;menu.c: 678: }
 17982                           ;menu.c: 679: encoder_direction = 0x00;
 17983                           
 17984                           ; BSR set to: 0
 17985  006440  0E00               	movlw	0
 17986  006442  6E36               	movwf	_encoder_direction,c
 17987  006444                     l3621:
 17988                           
 17989                           ;menu.c: 680: }
 17990                           ;menu.c: 682: if (encoder_direction == 0x20) {
 17991                           
 17992                           ; BSR set to: 0
 17993  006444  0E20               	movlw	32
 17994  006446  1836               	xorwf	_encoder_direction,w,c
 17995  006448  A4D8               	btfss	status,2,c
 17996  00644A  D017               	goto	l3623
 17997                           
 17998                           ;menu.c: 683: if(DRUM_NOTE[array_index] > 35) {
 17999  00644C  0100               	movlb	0	; () banked
 18000  00644E  51C8               	movf	Function_C_2@array_index& (0+255),w,b
 18001  006450  0D01               	mullw	1
 18002  006452  0EE7               	movlw	low _DRUM_NOTE
 18003  006454  24F3               	addwf	prodl,w,c
 18004  006456  6ED9               	movwf	fsr2l,c
 18005  006458  0E01               	movlw	high _DRUM_NOTE
 18006  00645A  20F4               	addwfc	prodh,w,c
 18007  00645C  6EDA               	movwf	fsr2h,c
 18008  00645E  0E23               	movlw	35
 18009  006460  64DF               	cpfsgt	indf2,c
 18010  006462  D009               	goto	l3624
 18011                           
 18012                           ; BSR set to: 0
 18013                           ;menu.c: 684: DRUM_NOTE[array_index]--;
 18014  006464  51C8               	movf	Function_C_2@array_index& (0+255),w,b
 18015  006466  0D01               	mullw	1
 18016  006468  0EE7               	movlw	low _DRUM_NOTE
 18017  00646A  24F3               	addwf	prodl,w,c
 18018  00646C  6ED9               	movwf	fsr2l,c
 18019  00646E  0E01               	movlw	high _DRUM_NOTE
 18020  006470  20F4               	addwfc	prodh,w,c
 18021  006472  6EDA               	movwf	fsr2h,c
 18022  006474  06DF               	decf	indf2,f,c
 18023  006476                     l3624:
 18024                           
 18025                           ; BSR set to: 0
 18026                           ;menu.c: 685: }
 18027                           ;menu.c: 686: encoder_direction = 0x00;
 18028                           
 18029                           ; BSR set to: 0
 18030  006476  0E00               	movlw	0
 18031  006478  6E36               	movwf	_encoder_direction,c
 18032  00647A                     l3623:
 18033                           
 18034                           ;menu.c: 687: }
 18035                           ;menu.c: 689: int2string(DRUM_NOTE[array_index]);
 18036                           
 18037                           ; BSR set to: 0
 18038  00647A  0100               	movlb	0	; () banked
 18039  00647C  51C8               	movf	Function_C_2@array_index& (0+255),w,b
 18040  00647E  0D01               	mullw	1
 18041  006480  0EE7               	movlw	low _DRUM_NOTE
 18042  006482  24F3               	addwf	prodl,w,c
 18043  006484  6ED9               	movwf	fsr2l,c
 18044  006486  0E01               	movlw	high _DRUM_NOTE
 18045  006488  20F4               	addwfc	prodh,w,c
 18046  00648A  6EDA               	movwf	fsr2h,c
 18047  00648C  50DF               	movf	indf2,w,c
 18048  00648E  6FC7               	movwf	??_Function_C_2& (0+255),b
 18049  006490  51C7               	movf	??_Function_C_2& (0+255),w,b
 18050  006492  6F60               	movwf	int2string@number& (0+255),b
 18051  006494  6B61               	clrf	(int2string@number+1)& (0+255),b
 18052  006496  EC0A  F03B         	call	_int2string	;wreg free
 18053                           
 18054                           ;menu.c: 690: Lcd_Set_Cursor(2,13);
 18055  00649A  0E0D               	movlw	13
 18056  00649C  0100               	movlb	0	; () banked
 18057  00649E  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 18058  0064A0  0E02               	movlw	2
 18059  0064A2  ECDF  F047         	call	_Lcd_Set_Cursor
 18060                           
 18061                           ;menu.c: 691: Lcd_Print_String(string2display);
 18062  0064A6  0E92               	movlw	low _string2display
 18063  0064A8  0100               	movlb	0	; () banked
 18064  0064AA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 18065  0064AC  0E01               	movlw	high _string2display
 18066  0064AE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18067  0064B0  EC76  F042         	call	_Lcd_Print_String	;wreg free
 18068  0064B4                     l3620:
 18069  0064B4  B205               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 18070  0064B6  0012               	return	
 18071  0064B8  D7A8               	goto	l3619
 18072  0064BA                     __end_of_Function_C_2:
 18073                           	opt stack 0
 18074                           tblptru	equ	0xFF8
 18075                           tblptrh	equ	0xFF7
 18076                           tblptrl	equ	0xFF6
 18077                           tablat	equ	0xFF5
 18078                           prodh	equ	0xFF4
 18079                           prodl	equ	0xFF3
 18080                           intcon	equ	0xFF2
 18081                           intcon2	equ	0xFF1
 18082                           postinc0	equ	0xFEE
 18083                           wreg	equ	0xFE8
 18084                           postinc1	equ	0xFE6
 18085                           indf2	equ	0xFDF
 18086                           postinc2	equ	0xFDE
 18087                           postdec2	equ	0xFDD
 18088                           plusw2	equ	0xFDB
 18089                           fsr2h	equ	0xFDA
 18090                           fsr2l	equ	0xFD9
 18091                           status	equ	0xFD8
 18092                           
 18093 ;; *************** function _int2string *****************
 18094 ;; Defined at:
 18095 ;;		line 86 in file "menu.c"
 18096 ;; Parameters:    Size  Location     Type
 18097 ;;  number          2    0[BANK0 ] int 
 18098 ;; Auto vars:     Size  Location     Type
 18099 ;;  number_to_di    2    4[BANK0 ] int 
 18100 ;; Return value:  Size  Location     Type
 18101 ;;                  1    wreg      void 
 18102 ;; Registers used:
 18103 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl
 18104 ;; Tracked objects:
 18105 ;;		On entry : 0/0
 18106 ;;		On exit  : 0/0
 18107 ;;		Unchanged: 0/0
 18108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18109 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18110 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18111 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18112 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18113 ;;Total ram usage:        6 bytes
 18114 ;; Hardware stack levels used:    1
 18115 ;; Hardware stack levels required when called:    6
 18116 ;; This function calls:
 18117 ;;		___awdiv
 18118 ;;		___awmod
 18119 ;; This function is called by:
 18120 ;;		_setControllerNumbers
 18121 ;;		_Function_C_2
 18122 ;;		_Function_C_3
 18123 ;;		_Function_D_2
 18124 ;;		_Function_E_1
 18125 ;;		_Function_E_2
 18126 ;;		_Function_F
 18127 ;;		_Function_H_2
 18128 ;;		_Function_H_3
 18129 ;; This function uses a non-reentrant model
 18130 ;;
 18131                           
 18132                           	psect	text54
 18133  007614                     __ptext54:
 18134                           	opt stack 0
 18135  007614                     _int2string:
 18136                           	opt stack 21
 18137                           
 18138                           ;menu.c: 88: static __bit isNegative = 0;
 18139                           ;menu.c: 89: signed int number_to_display_temp = 0;
 18140                           
 18141                           ;incstack = 0
 18142  007614  0E00               	movlw	0
 18143  007616  0100               	movlb	0	; () banked
 18144  007618  6F65               	movwf	(int2string@number_to_display_temp+1)& (0+255),b
 18145  00761A  0E00               	movlw	0
 18146  00761C  6F64               	movwf	int2string@number_to_display_temp& (0+255),b
 18147                           
 18148                           ; BSR set to: 0
 18149                           ;menu.c: 91: if(number < 0) {
 18150  00761E  AF61               	btfss	(int2string@number+1)& (0+255),7,b
 18151  007620  D00E               	goto	l3463
 18152                           
 18153                           ; BSR set to: 0
 18154                           ;menu.c: 92: isNegative = 1;
 18155  007622  8001               	bsf	int2string@isNegative/(0+8),int2string@isNegative& (0+7),c
 18156                           
 18157                           ;menu.c: 93: number_to_display_temp = (0 - number);
 18158  007624  C060  F062         	movff	int2string@number,??_int2string
 18159  007628  C061  F063         	movff	int2string@number+1,??_int2string+1
 18160  00762C  1F62               	comf	??_int2string& (0+255),f,b
 18161  00762E  1F63               	comf	(??_int2string+1)& (0+255),f,b
 18162  007630  4B62               	infsnz	??_int2string& (0+255),f,b
 18163  007632  2B63               	incf	(??_int2string+1)& (0+255),f,b
 18164  007634  C062  F064         	movff	??_int2string,int2string@number_to_display_temp
 18165  007638  C063  F065         	movff	??_int2string+1,int2string@number_to_display_temp+1
 18166                           
 18167                           ;menu.c: 94: }
 18168  00763C  D005               	goto	l3464
 18169  00763E                     l3463:
 18170                           
 18171                           ; BSR set to: 0
 18172                           ;menu.c: 95: else {
 18173                           ;menu.c: 96: isNegative = 0;
 18174  00763E  9001               	bcf	int2string@isNegative/(0+8),int2string@isNegative& (0+7),c
 18175                           
 18176                           ;menu.c: 97: number_to_display_temp = number;
 18177  007640  C060  F064         	movff	int2string@number,int2string@number_to_display_temp
 18178  007644  C061  F065         	movff	int2string@number+1,int2string@number_to_display_temp+1
 18179  007648                     l3464:
 18180                           
 18181                           ; BSR set to: 0
 18182                           ;menu.c: 98: }
 18183                           ;menu.c: 101: if(isNegative) {
 18184  007648  A001               	btfss	int2string@isNegative/(0+8),int2string@isNegative& (0+7),c
 18185  00764A  D002               	goto	l3465
 18186                           
 18187                           ; BSR set to: 0
 18188                           ;menu.c: 102: string2display[0] = '-';
 18189  00764C  0E2D               	movlw	45
 18190  00764E  D001               	goto	L4
 18191  007650                     l3465:
 18192                           
 18193                           ;menu.c: 104: else{string2display[0] = ' ';}
 18194                           
 18195                           ; BSR set to: 1
 18196  007650  0E20               	movlw	32
 18197  007652                     L4:
 18198  007652  0101               	movlb	1	; () banked
 18199  007654  6F92               	movwf	_string2display& (0+255),b
 18200                           
 18201                           ; BSR set to: 1
 18202                           ;menu.c: 107: string2display[1] = 48 + ((number_to_display_temp / 100) % 10);
 18203                           
 18204                           ; BSR set to: 1
 18205  007656  0E0A               	movlw	10
 18206  007658  6EE6               	movwf	postinc1,c
 18207  00765A  0E00               	movlw	0
 18208  00765C  6EE6               	movwf	postinc1,c
 18209  00765E  0E64               	movlw	100
 18210  007660  6EE6               	movwf	postinc1,c
 18211  007662  0E00               	movlw	0
 18212  007664  6EE6               	movwf	postinc1,c
 18213  007666  C064  FFE6         	movff	int2string@number_to_display_temp,postinc1
 18214  00766A  C065  FFE6         	movff	int2string@number_to_display_temp+1,postinc1
 18215  00766E  EC9E  F030         	call	___awdiv	;wreg free
 18216  007672  C03F  FFE6         	movff	btemp,postinc1
 18217  007676  C040  FFE6         	movff	btemp+1,postinc1
 18218  00767A  EC74  F034         	call	___awmod	;wreg free
 18219  00767E  503F               	movf	btemp,w,c
 18220  007680  0F30               	addlw	48
 18221  007682  0101               	movlb	1	; () banked
 18222  007684  6F93               	movwf	(_string2display+1)& (0+255),b
 18223                           
 18224                           ; BSR set to: 1
 18225                           ;menu.c: 108: string2display[2] = 48 + ((number_to_display_temp / 10) % 10);
 18226  007686  0E0A               	movlw	10
 18227  007688  6EE6               	movwf	postinc1,c
 18228  00768A  0E00               	movlw	0
 18229  00768C  6EE6               	movwf	postinc1,c
 18230  00768E  0E0A               	movlw	10
 18231  007690  6EE6               	movwf	postinc1,c
 18232  007692  0E00               	movlw	0
 18233  007694  6EE6               	movwf	postinc1,c
 18234  007696  C064  FFE6         	movff	int2string@number_to_display_temp,postinc1
 18235  00769A  C065  FFE6         	movff	int2string@number_to_display_temp+1,postinc1
 18236  00769E  EC9E  F030         	call	___awdiv	;wreg free
 18237  0076A2  C03F  FFE6         	movff	btemp,postinc1
 18238  0076A6  C040  FFE6         	movff	btemp+1,postinc1
 18239  0076AA  EC74  F034         	call	___awmod	;wreg free
 18240  0076AE  503F               	movf	btemp,w,c
 18241  0076B0  0F30               	addlw	48
 18242  0076B2  0101               	movlb	1	; () banked
 18243  0076B4  6F94               	movwf	(_string2display+2)& (0+255),b
 18244                           
 18245                           ; BSR set to: 1
 18246                           ;menu.c: 109: string2display[3] = 48 + (number_to_display_temp % 10);
 18247  0076B6  0E0A               	movlw	10
 18248  0076B8  6EE6               	movwf	postinc1,c
 18249  0076BA  0E00               	movlw	0
 18250  0076BC  6EE6               	movwf	postinc1,c
 18251  0076BE  C064  FFE6         	movff	int2string@number_to_display_temp,postinc1
 18252  0076C2  C065  FFE6         	movff	int2string@number_to_display_temp+1,postinc1
 18253  0076C6  EC74  F034         	call	___awmod	;wreg free
 18254  0076CA  503F               	movf	btemp,w,c
 18255  0076CC  0F30               	addlw	48
 18256  0076CE  0101               	movlb	1	; () banked
 18257  0076D0  6F95               	movwf	(_string2display+3)& (0+255),b
 18258                           
 18259                           ; BSR set to: 1
 18260                           ;menu.c: 110: string2display[4] = '\0';
 18261  0076D2  0E00               	movlw	0
 18262  0076D4  6F96               	movwf	(_string2display+4)& (0+255),b
 18263                           
 18264                           ; BSR set to: 1
 18265  0076D6  0012               	return		;funcret
 18266  0076D8                     __end_of_int2string:
 18267                           	opt stack 0
 18268                           tblptru	equ	0xFF8
 18269                           tblptrh	equ	0xFF7
 18270                           tblptrl	equ	0xFF6
 18271                           tablat	equ	0xFF5
 18272                           prodh	equ	0xFF4
 18273                           prodl	equ	0xFF3
 18274                           intcon	equ	0xFF2
 18275                           intcon2	equ	0xFF1
 18276                           postinc0	equ	0xFEE
 18277                           wreg	equ	0xFE8
 18278                           postinc1	equ	0xFE6
 18279                           indf2	equ	0xFDF
 18280                           postinc2	equ	0xFDE
 18281                           postdec2	equ	0xFDD
 18282                           plusw2	equ	0xFDB
 18283                           fsr2h	equ	0xFDA
 18284                           fsr2l	equ	0xFD9
 18285                           status	equ	0xFD8
 18286                           
 18287 ;; *************** function ___awdiv *****************
 18288 ;; Defined at:
 18289 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 18290 ;; Parameters:    Size  Location     Type
 18291 ;;  dividend        2  [STACK] int 
 18292 ;;  divisor         2  [STACK] int 
 18293 ;; Auto vars:     Size  Location     Type
 18294 ;;  quotient        2  [STACK] int 
 18295 ;;  sign            1  [STACK] unsigned char 
 18296 ;;  counter         1  [STACK] unsigned char 
 18297 ;; Return value:  Size  Location     Type
 18298 ;;                  2  [STACK] int 
 18299 ;; Registers used:
 18300 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl
 18301 ;; Tracked objects:
 18302 ;;		On entry : 3E/1
 18303 ;;		On exit  : 0/0
 18304 ;;		Unchanged: 0/0
 18305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18310 ;;Total ram usage:        0 bytes
 18311 ;; Hardware stack levels used:    1
 18312 ;; Hardware stack levels required when called:    5
 18313 ;; This function calls:
 18314 ;;		Nothing
 18315 ;; This function is called by:
 18316 ;;		_displayDigits
 18317 ;;		_int2string
 18318 ;; This function uses a reentrant model
 18319 ;;
 18320                           
 18321                           	psect	text55
 18322  00613C                     __ptext55:
 18323                           	opt stack 0
 18324  00613C                     ___awdiv:
 18325                           	opt stack 0
 18326                           
 18327                           ; BSR set to: 1
 18328                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
 18329  00613C  52E6               	movf	postinc1,f,c
 18330  00613E  52E6               	movf	postinc1,f,c
 18331  006140  52E6               	movf	postinc1,f,c
 18332  006142  52E6               	movf	postinc1,f,c
 18333                           
 18334                           ;stkvar	___awdiv@sign @ sp[(-4)+2]
 18335                           
 18336                           ;incstack = 0
 18337  006144  0EFE               	movlw	-2
 18338  006146  6AE3               	clrf	plusw1,c
 18339                           
 18340                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18341  006148  0EF9               	movlw	-7
 18342  00614A  AEE3               	btfss	plusw1,7,c
 18343  00614C  D009               	goto	l32584
 18344                           
 18345                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18346                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18347  00614E  0EF8               	movlw	-8
 18348  006150  6CE3               	negf	plusw1,c
 18349  006152  0EF9               	movlw	-7
 18350  006154  1EE3               	comf	plusw1,f,c
 18351  006156  B0D8               	btfsc	status,0,c
 18352  006158  2AE3               	incf	plusw1,f,c
 18353                           
 18354                           ;stkvar	___awdiv@sign @ sp[(-4)+2]
 18355  00615A  0EFE               	movlw	-2
 18356  00615C  6AE3               	clrf	plusw1,c
 18357  00615E  2AE3               	incf	plusw1,f,c
 18358  006160                     l32584:
 18359                           
 18360                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
 18361  006160  0EFB               	movlw	-5
 18362  006162  AEE3               	btfss	plusw1,7,c
 18363  006164  D008               	goto	l32590
 18364                           
 18365                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
 18366                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
 18367  006166  0EFA               	movlw	-6
 18368  006168  6CE3               	negf	plusw1,c
 18369  00616A  0EFB               	movlw	-5
 18370  00616C  1EE3               	comf	plusw1,f,c
 18371  00616E  B0D8               	btfsc	status,0,c
 18372  006170  2AE3               	incf	plusw1,f,c
 18373                           
 18374                           ;stkvar	___awdiv@sign @ sp[(-4)+2]
 18375  006172  0EFE               	movlw	-2
 18376  006174  70E3               	btg	plusw1,0,c
 18377  006176                     l32590:
 18378                           
 18379                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
 18380  006176  0EFC               	movlw	-4
 18381  006178  6AE3               	clrf	plusw1,c
 18382  00617A  0EFD               	movlw	-3
 18383  00617C  6AE3               	clrf	plusw1,c
 18384                           
 18385                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18386  00617E  0EF8               	movlw	-8
 18387  006180  CFE3 F03F          	movff	plusw1,btemp
 18388  006184  0EF9               	movlw	-7
 18389  006186  50E3               	movf	plusw1,w,c
 18390  006188  103F               	iorwf	btemp,w,c
 18391  00618A  B4D8               	btfsc	status,2,c
 18392  00618C  D05B               	goto	u59220
 18393                           
 18394                           ;stkvar	___awdiv@counter @ sp[(-4)+3]
 18395  00618E  0EFF               	movlw	-1
 18396  006190  6AE3               	clrf	plusw1,c
 18397  006192  D010               	goto	L5
 18398  006194                     l32596:
 18399                           
 18400                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18401  006194  0EF8               	movlw	-8
 18402  006196  50E3               	movf	plusw1,w,c
 18403  006198  90D8               	bcf	status,0,c
 18404  00619A  34E8               	rlcf	wreg,w,c
 18405  00619C  6E3F               	movwf	btemp,c
 18406  00619E  0EF8               	movlw	-8
 18407  0061A0  C03F  FFE3         	movff	btemp,plusw1
 18408  0061A4  0EF9               	movlw	-7
 18409  0061A6  50E3               	movf	plusw1,w,c
 18410  0061A8  34E8               	rlcf	wreg,w,c
 18411  0061AA  6E3F               	movwf	btemp,c
 18412  0061AC  0EF9               	movlw	-7
 18413  0061AE  C03F  FFE3         	movff	btemp,plusw1
 18414                           
 18415                           ;stkvar	___awdiv@counter @ sp[(-4)+3]
 18416  0061B2  0EFF               	movlw	-1
 18417  0061B4                     L5:
 18418  0061B4  2AE3               	incf	plusw1,f,c
 18419                           
 18420                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18421  0061B6  0EF9               	movlw	-7
 18422  0061B8  AEE3               	btfss	plusw1,7,c
 18423  0061BA  D7EC               	goto	l32596
 18424  0061BC                     u59200:
 18425                           
 18426                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
 18427  0061BC  0EFC               	movlw	-4
 18428  0061BE  50E3               	movf	plusw1,w,c
 18429  0061C0  90D8               	bcf	status,0,c
 18430  0061C2  34E8               	rlcf	wreg,w,c
 18431  0061C4  6E3F               	movwf	btemp,c
 18432  0061C6  0EFC               	movlw	-4
 18433  0061C8  C03F  FFE3         	movff	btemp,plusw1
 18434  0061CC  0EFD               	movlw	-3
 18435  0061CE  50E3               	movf	plusw1,w,c
 18436  0061D0  34E8               	rlcf	wreg,w,c
 18437  0061D2  6E3F               	movwf	btemp,c
 18438  0061D4  0EFD               	movlw	-3
 18439  0061D6  C03F  FFE3         	movff	btemp,plusw1
 18440                           
 18441                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18442  0061DA  0EF8               	movlw	-8
 18443  0061DC  CFE3 F040          	movff	plusw1,btemp+1
 18444  0061E0  0EF9               	movlw	-7
 18445  0061E2  CFE3 F041          	movff	plusw1,btemp+2
 18446                           
 18447                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
 18448  0061E6  0EFA               	movlw	-6
 18449  0061E8  CFE3 F049          	movff	plusw1,btemp+10
 18450  0061EC  0EFB               	movlw	-5
 18451  0061EE  CFE3 F04A          	movff	plusw1,btemp+11
 18452  0061F2  5040               	movf	btemp+1,w,c
 18453  0061F4  5C49               	subwf	btemp+10,w,c
 18454  0061F6  5041               	movf	btemp+2,w,c
 18455  0061F8  584A               	subwfb	btemp+11,w,c
 18456  0061FA  A0D8               	btfss	status,0,c
 18457  0061FC  D014               	goto	l32610
 18458                           
 18459                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18460                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
 18461  0061FE  0EFA               	movlw	-6
 18462  006200  50E3               	movf	plusw1,w,c
 18463  006202  6E3F               	movwf	btemp,c
 18464  006204  0EF8               	movlw	-8
 18465  006206  50E3               	movf	plusw1,w,c
 18466  006208  5E3F               	subwf	btemp,f,c
 18467  00620A  0EFA               	movlw	-6
 18468  00620C  C03F  FFE3         	movff	btemp,plusw1
 18469  006210  0EFB               	movlw	-5
 18470  006212  50E3               	movf	plusw1,w,c
 18471  006214  6E3F               	movwf	btemp,c
 18472  006216  0EF9               	movlw	-7
 18473  006218  50E3               	movf	plusw1,w,c
 18474  00621A  5A3F               	subwfb	btemp,f,c
 18475  00621C  0EFB               	movlw	-5
 18476  00621E  C03F  FFE3         	movff	btemp,plusw1
 18477                           
 18478                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
 18479  006222  0EFC               	movlw	-4
 18480  006224  80E3               	bsf	plusw1,0,c
 18481  006226                     l32610:
 18482                           
 18483                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18484  006226  90D8               	bcf	status,0,c
 18485  006228  0EF9               	movlw	-7
 18486  00622A  32E3               	rrcf	plusw1,f,c
 18487  00622C  0EF8               	movlw	-8
 18488  00622E  32E3               	rrcf	plusw1,f,c
 18489                           
 18490                           ;stkvar	___awdiv@counter @ sp[(-4)+3]
 18491  006230  0EFF               	movlw	-1
 18492  006232  50E3               	movf	plusw1,w,c
 18493  006234  6E3F               	movwf	btemp,c
 18494  006236  0E01               	movlw	1
 18495  006238  5E3F               	subwf	btemp,f,c
 18496  00623A  0EFF               	movlw	-1
 18497  00623C  C03F  FFE3         	movff	btemp,plusw1
 18498  006240  A4D8               	btfss	status,2,c
 18499  006242  D7BC               	goto	u59200
 18500  006244                     u59220:
 18501                           
 18502                           ;stkvar	___awdiv@sign @ sp[(-4)+2]
 18503  006244  0EFE               	movlw	-2
 18504  006246  50E3               	movf	plusw1,w,c
 18505  006248  B4D8               	btfsc	status,2,c
 18506  00624A  D006               	goto	l32618
 18507                           
 18508                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
 18509                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
 18510  00624C  0EFC               	movlw	-4
 18511  00624E  6CE3               	negf	plusw1,c
 18512  006250  0EFD               	movlw	-3
 18513  006252  1EE3               	comf	plusw1,f,c
 18514  006254  B0D8               	btfsc	status,0,c
 18515  006256  2AE3               	incf	plusw1,f,c
 18516  006258                     l32618:
 18517                           
 18518                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
 18519  006258  0EFC               	movlw	-4
 18520  00625A  CFE3 F03F          	movff	plusw1,btemp
 18521  00625E  0EFD               	movlw	-3
 18522  006260  CFE3 F040          	movff	plusw1,btemp+1
 18523                           
 18524                           ; ___awdiv: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
 18525  006264  0EF8               	movlw	248
 18526  006266  26E1               	addwf	fsr1l,f,c
 18527  006268  0EFF               	movlw	255
 18528  00626A  22E2               	addwfc	fsr1h,f,c
 18529  00626C  0012               	return		;funcret
 18530  00626E                     __end_of___awdiv:
 18531                           	opt stack 0
 18532                           tblptru	equ	0xFF8
 18533                           tblptrh	equ	0xFF7
 18534                           tblptrl	equ	0xFF6
 18535                           tablat	equ	0xFF5
 18536                           prodh	equ	0xFF4
 18537                           prodl	equ	0xFF3
 18538                           intcon	equ	0xFF2
 18539                           intcon2	equ	0xFF1
 18540                           postinc0	equ	0xFEE
 18541                           wreg	equ	0xFE8
 18542                           postinc1	equ	0xFE6
 18543                           plusw1	equ	0xFE3
 18544                           fsr1h	equ	0xFE2
 18545                           fsr1l	equ	0xFE1
 18546                           indf2	equ	0xFDF
 18547                           postinc2	equ	0xFDE
 18548                           postdec2	equ	0xFDD
 18549                           plusw2	equ	0xFDB
 18550                           fsr2h	equ	0xFDA
 18551                           fsr2l	equ	0xFD9
 18552                           status	equ	0xFD8
 18553                           
 18554 ;; *************** function _Function_C_1 *****************
 18555 ;; Defined at:
 18556 ;;		line 619 in file "menu.c"
 18557 ;; Parameters:    Size  Location     Type
 18558 ;;		None
 18559 ;; Auto vars:     Size  Location     Type
 18560 ;;		None
 18561 ;; Return value:  Size  Location     Type
 18562 ;;                  1    wreg      void 
 18563 ;; Registers used:
 18564 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18565 ;; Tracked objects:
 18566 ;;		On entry : 0/0
 18567 ;;		On exit  : 0/0
 18568 ;;		Unchanged: 0/0
 18569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18574 ;;Total ram usage:        0 bytes
 18575 ;; Hardware stack levels used:    1
 18576 ;; Hardware stack levels required when called:   16
 18577 ;; This function calls:
 18578 ;;		_Lcd_Print_String
 18579 ;;		___lbmod
 18580 ;;		___wmul
 18581 ;;		_clear_row1
 18582 ;;		_clear_row2
 18583 ;;		_un_block_code
 18584 ;; This function is called by:
 18585 ;;		_Function_C
 18586 ;; This function uses a non-reentrant model
 18587 ;;
 18588                           
 18589                           	psect	text56
 18590  008238                     __ptext56:
 18591                           	opt stack 0
 18592  008238                     _Function_C_1:
 18593                           	opt stack 12
 18594                           
 18595                           ;menu.c: 621: which_screen = DRUMS_CC_TYPE_MENU;
 18596                           
 18597                           ;incstack = 0
 18598  008238  0E0C               	movlw	12
 18599  00823A  6E4F               	movwf	_which_screen,c
 18600                           
 18601                           ;menu.c: 622: lcd_print_once = 0;
 18602  00823C  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18603                           
 18604                           ;menu.c: 623: encoder_click = 0;
 18605  00823E  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 18606                           
 18607                           ;menu.c: 625: drumCCTypeMenu.selector = CONTROL_MODE;
 18608  008240  0E00               	movlw	0
 18609  008242  B601               	btfsc	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 18610  008244  0E01               	movlw	1
 18611  008246  0101               	movlb	1	; () banked
 18612  008248  6F64               	movwf	(_drumCCTypeMenu+2)& (0+255),b
 18613                           
 18614                           ;menu.c: 627: while(encoder_click == 0) {
 18615  00824A  D02D               	goto	l3607
 18616  00824C                     
 18617                           ;menu.c: 631: un_block_code();
 18618                           
 18619                           ; BSR set to: 1
 18620  00824C  ECAD  F04C         	call	_un_block_code	;wreg free
 18621                           
 18622                           ;menu.c: 633: if (lcd_print_once == 0) {
 18623  008250  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18624  008252  D028               	goto	l3609
 18625                           
 18626                           ;menu.c: 634: clear_row1();
 18627  008254  EC18  F04C         	call	_clear_row1	;wreg free
 18628                           
 18629                           ;menu.c: 635: Lcd_Print_String("Drum CC Mode:");
 18630  008258  0EE0               	movlw	low STR_27
 18631  00825A  0100               	movlb	0	; () banked
 18632  00825C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 18633  00825E  0EFE               	movlw	high STR_27
 18634  008260  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18635  008262  EC76  F042         	call	_Lcd_Print_String	;wreg free
 18636                           
 18637                           ;menu.c: 636: clear_row2();
 18638  008266  EC04  F04C         	call	_clear_row2	;wreg free
 18639                           
 18640                           ;menu.c: 637: Lcd_Print_String(LCD_STRINGS[(drumCCTypeMenu.selector % drumCCTypeMenu.num
      +                          ber) + drumCCTypeMenu.address]);
 18641  00826A  0101               	movlb	1	; () banked
 18642  00826C  5162               	movf	_drumCCTypeMenu& (0+255),w,b
 18643  00826E  6EE6               	movwf	postinc1,c
 18644  008270  5164               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 18645  008272  6EE6               	movwf	postinc1,c
 18646  008274  EC63  F041         	call	___lbmod	;wreg free
 18647  008278  503F               	movf	btemp,w,c
 18648  00827A  0101               	movlb	1	; () banked
 18649  00827C  2563               	addwf	(_drumCCTypeMenu+1)& (0+255),w,b
 18650  00827E  0100               	movlb	0	; () banked
 18651  008280  6F60               	movwf	___wmul@multiplier& (0+255),b
 18652  008282  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 18653  008284  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 18654  008286  0E00               	movlw	0
 18655  008288  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18656  00828A  0E11               	movlw	17
 18657  00828C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 18658  00828E  EC2C  F04C         	call	___wmul	;wreg free
 18659  008292  0E9E               	movlw	low _LCD_STRINGS
 18660  008294  0100               	movlb	0	; () banked
 18661  008296  2560               	addwf	?___wmul& (0+255),w,b
 18662  008298  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 18663  00829A  0EF3               	movlw	high _LCD_STRINGS
 18664  00829C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 18665  00829E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18666  0082A0  EC76  F042         	call	_Lcd_Print_String	;wreg free
 18667  0082A4                     l3609:
 18668                           
 18669                           ;menu.c: 638: }
 18670                           ;menu.c: 639: lcd_print_once = 1;
 18671  0082A4  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18672  0082A6                     l3607:
 18673  0082A6  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 18674  0082A8  D7D1               	goto	l3608
 18675                           
 18676                           ;menu.c: 640: }
 18677                           ;menu.c: 642: CONTROL_MODE = drumCCTypeMenu.selector % drumCCTypeMenu.number;
 18678  0082AA  0101               	movlb	1	; () banked
 18679  0082AC  5162               	movf	_drumCCTypeMenu& (0+255),w,b
 18680  0082AE  6EE6               	movwf	postinc1,c
 18681  0082B0  5164               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 18682  0082B2  6EE6               	movwf	postinc1,c
 18683  0082B4  EC63  F041         	call	___lbmod	;wreg free
 18684  0082B8  303F               	rrcf	btemp,w,c
 18685  0082BA  A0D8               	btfss	status,0,c
 18686  0082BC  D002               	goto	u58270
 18687  0082BE  8601               	bsf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 18688  0082C0  0012               	return	
 18689  0082C2                     u58270:
 18690  0082C2  9601               	bcf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 18691  0082C4  0012               	return		;funcret
 18692  0082C6                     __end_of_Function_C_1:
 18693                           	opt stack 0
 18694                           tblptru	equ	0xFF8
 18695                           tblptrh	equ	0xFF7
 18696                           tblptrl	equ	0xFF6
 18697                           tablat	equ	0xFF5
 18698                           prodh	equ	0xFF4
 18699                           prodl	equ	0xFF3
 18700                           intcon	equ	0xFF2
 18701                           intcon2	equ	0xFF1
 18702                           postinc0	equ	0xFEE
 18703                           wreg	equ	0xFE8
 18704                           postinc1	equ	0xFE6
 18705                           plusw1	equ	0xFE3
 18706                           fsr1h	equ	0xFE2
 18707                           fsr1l	equ	0xFE1
 18708                           indf2	equ	0xFDF
 18709                           postinc2	equ	0xFDE
 18710                           postdec2	equ	0xFDD
 18711                           plusw2	equ	0xFDB
 18712                           fsr2h	equ	0xFDA
 18713                           fsr2l	equ	0xFD9
 18714                           status	equ	0xFD8
 18715                           
 18716 ;; *************** function _Function_B *****************
 18717 ;; Defined at:
 18718 ;;		line 596 in file "menu.c"
 18719 ;; Parameters:    Size  Location     Type
 18720 ;;		None
 18721 ;; Auto vars:     Size  Location     Type
 18722 ;;		None
 18723 ;; Return value:  Size  Location     Type
 18724 ;;                  1    wreg      void 
 18725 ;; Registers used:
 18726 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18727 ;; Tracked objects:
 18728 ;;		On entry : 0/0
 18729 ;;		On exit  : 0/0
 18730 ;;		Unchanged: 0/0
 18731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18736 ;;Total ram usage:        0 bytes
 18737 ;; Hardware stack levels used:    1
 18738 ;; Hardware stack levels required when called:   16
 18739 ;; This function calls:
 18740 ;;		_Lcd_Print_String
 18741 ;;		___lbmod
 18742 ;;		___wmul
 18743 ;;		_clear_row2
 18744 ;;		_un_block_code
 18745 ;; This function is called by:
 18746 ;;		_menu_lcd
 18747 ;; This function uses a non-reentrant model
 18748 ;;
 18749                           
 18750                           	psect	text57
 18751  008864                     __ptext57:
 18752                           	opt stack 0
 18753  008864                     _Function_B:
 18754                           	opt stack 13
 18755                           
 18756                           ;menu.c: 598: which_screen = TRANSPOSE_MENU;
 18757                           
 18758                           ;incstack = 0
 18759  008864  0E04               	movlw	4
 18760  008866  6E4F               	movwf	_which_screen,c
 18761                           
 18762                           ;menu.c: 599: lcd_print_once = 0;
 18763  008868  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18764                           
 18765                           ;menu.c: 601: transposeMenu.selector = TRANSPOSE_MODE;
 18766  00886A  0E00               	movlw	0
 18767  00886C  BA04               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 18768  00886E  0E01               	movlw	1
 18769  008870  0101               	movlb	1	; () banked
 18770  008872  6F6A               	movwf	(_transposeMenu+2)& (0+255),b
 18771                           
 18772                           ;menu.c: 603: while(encoder_click == 0) {
 18773  008874  D031               	goto	l3600
 18774  008876                     
 18775                           ;menu.c: 607: un_block_code();
 18776                           
 18777                           ; BSR set to: 1
 18778  008876  ECAD  F04C         	call	_un_block_code	;wreg free
 18779                           
 18780                           ;menu.c: 609: if (lcd_print_once == 0) {
 18781  00887A  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18782  00887C  D02C               	goto	u59965
 18783                           
 18784                           ;menu.c: 610: clear_row2();
 18785  00887E  EC04  F04C         	call	_clear_row2	;wreg free
 18786                           
 18787                           ;menu.c: 611: Lcd_Print_String(LCD_STRINGS[(transposeMenu.selector % transposeMenu.numbe
      +                          r) + transposeMenu.address]);
 18788  008882  0101               	movlb	1	; () banked
 18789  008884  5168               	movf	_transposeMenu& (0+255),w,b
 18790  008886  6EE6               	movwf	postinc1,c
 18791  008888  516A               	movf	(_transposeMenu+2)& (0+255),w,b
 18792  00888A  6EE6               	movwf	postinc1,c
 18793  00888C  EC63  F041         	call	___lbmod	;wreg free
 18794  008890  503F               	movf	btemp,w,c
 18795  008892  0101               	movlb	1	; () banked
 18796  008894  2569               	addwf	(_transposeMenu+1)& (0+255),w,b
 18797  008896  0100               	movlb	0	; () banked
 18798  008898  6F60               	movwf	___wmul@multiplier& (0+255),b
 18799  00889A  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 18800  00889C  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 18801  00889E  0E00               	movlw	0
 18802  0088A0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18803  0088A2  0E11               	movlw	17
 18804  0088A4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 18805  0088A6  EC2C  F04C         	call	___wmul	;wreg free
 18806  0088AA  0E9E               	movlw	low _LCD_STRINGS
 18807  0088AC  0100               	movlb	0	; () banked
 18808  0088AE  2560               	addwf	?___wmul& (0+255),w,b
 18809  0088B0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 18810  0088B2  0EF3               	movlw	high _LCD_STRINGS
 18811  0088B4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 18812  0088B6  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18813  0088B8  EC76  F042         	call	_Lcd_Print_String	;wreg free
 18814                           
 18815                           ;menu.c: 612: TRANSPOSE_MODE = transposeMenu.selector % transposeMenu.number;
 18816  0088BC  0101               	movlb	1	; () banked
 18817  0088BE  5168               	movf	_transposeMenu& (0+255),w,b
 18818  0088C0  6EE6               	movwf	postinc1,c
 18819  0088C2  516A               	movf	(_transposeMenu+2)& (0+255),w,b
 18820  0088C4  6EE6               	movwf	postinc1,c
 18821  0088C6  EC63  F041         	call	___lbmod	;wreg free
 18822  0088CA  303F               	rrcf	btemp,w,c
 18823  0088CC  A0D8               	btfss	status,0,c
 18824  0088CE  D002               	goto	u59950
 18825  0088D0  8A04               	bsf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 18826  0088D2  D001               	goto	u59965
 18827  0088D4                     u59950:
 18828  0088D4  9A04               	bcf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 18829  0088D6                     u59965:
 18830                           
 18831                           ;menu.c: 613: }
 18832                           ;menu.c: 614: lcd_print_once = 1;
 18833  0088D6  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18834  0088D8                     l3600:
 18835  0088D8  B205               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 18836  0088DA  0012               	return	
 18837  0088DC  D7CC               	goto	l3601
 18838  0088DE                     __end_of_Function_B:
 18839                           	opt stack 0
 18840                           tblptru	equ	0xFF8
 18841                           tblptrh	equ	0xFF7
 18842                           tblptrl	equ	0xFF6
 18843                           tablat	equ	0xFF5
 18844                           prodh	equ	0xFF4
 18845                           prodl	equ	0xFF3
 18846                           intcon	equ	0xFF2
 18847                           intcon2	equ	0xFF1
 18848                           postinc0	equ	0xFEE
 18849                           wreg	equ	0xFE8
 18850                           postinc1	equ	0xFE6
 18851                           plusw1	equ	0xFE3
 18852                           fsr1h	equ	0xFE2
 18853                           fsr1l	equ	0xFE1
 18854                           indf2	equ	0xFDF
 18855                           postinc2	equ	0xFDE
 18856                           postdec2	equ	0xFDD
 18857                           plusw2	equ	0xFDB
 18858                           fsr2h	equ	0xFDA
 18859                           fsr2l	equ	0xFD9
 18860                           status	equ	0xFD8
 18861                           
 18862 ;; *************** function _Function_A *****************
 18863 ;; Defined at:
 18864 ;;		line 539 in file "menu.c"
 18865 ;; Parameters:    Size  Location     Type
 18866 ;;		None
 18867 ;; Auto vars:     Size  Location     Type
 18868 ;;		None
 18869 ;; Return value:  Size  Location     Type
 18870 ;;                  1    wreg      void 
 18871 ;; Registers used:
 18872 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18873 ;; Tracked objects:
 18874 ;;		On entry : 0/0
 18875 ;;		On exit  : 0/0
 18876 ;;		Unchanged: 0/0
 18877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18882 ;;Total ram usage:        0 bytes
 18883 ;; Hardware stack levels used:    1
 18884 ;; Hardware stack levels required when called:   17
 18885 ;; This function calls:
 18886 ;;		_Function_A_1
 18887 ;;		_Function_A_2
 18888 ;;		_Function_A_3
 18889 ;;		_Lcd_Print_String
 18890 ;;		___lbmod
 18891 ;;		___wmul
 18892 ;;		_clear_row2
 18893 ;;		_un_block_code
 18894 ;; This function is called by:
 18895 ;;		_menu_lcd
 18896 ;; This function uses a non-reentrant model
 18897 ;;
 18898                           
 18899                           	psect	text58
 18900  0073B2                     __ptext58:
 18901                           	opt stack 0
 18902  0073B2                     _Function_A:
 18903                           	opt stack 12
 18904                           
 18905                           ;menu.c: 542: which_screen = KEYBOARD_MENU;
 18906                           
 18907                           ;incstack = 0
 18908  0073B2  0E03               	movlw	3
 18909  0073B4  6E4F               	movwf	_which_screen,c
 18910                           
 18911                           ;menu.c: 543: lcd_print_once = 0;
 18912  0073B6  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18913                           
 18914                           ;menu.c: 545: keyboardMenu.selector = KEYBOARD_MODE;
 18915  0073B8  C0F2  F0E7         	movff	_KEYBOARD_MODE,_keyboardMenu+2
 18916                           
 18917                           ;menu.c: 547: while(encoder_click == 0) {
 18918  0073BC  D04B               	goto	l3586
 18919  0073BE                     
 18920                           ;menu.c: 549: un_block_code();
 18921  0073BE  ECAD  F04C         	call	_un_block_code	;wreg free
 18922                           
 18923                           ;menu.c: 551: if (lcd_print_once == 0) {
 18924  0073C2  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18925  0073C4  D042               	goto	l3591
 18926                           
 18927                           ;menu.c: 552: clear_row2();
 18928  0073C6  EC04  F04C         	call	_clear_row2	;wreg free
 18929                           
 18930                           ;menu.c: 553: Lcd_Print_String(LCD_STRINGS[(keyboardMenu.selector % keyboardMenu.number)
      +                           + keyboardMenu.address]);
 18931  0073CA  0100               	movlb	0	; () banked
 18932  0073CC  51E5               	movf	_keyboardMenu& (0+255),w,b
 18933  0073CE  6EE6               	movwf	postinc1,c
 18934  0073D0  51E7               	movf	(_keyboardMenu+2)& (0+255),w,b
 18935  0073D2  6EE6               	movwf	postinc1,c
 18936  0073D4  EC63  F041         	call	___lbmod	;wreg free
 18937  0073D8  503F               	movf	btemp,w,c
 18938  0073DA  0100               	movlb	0	; () banked
 18939  0073DC  25E6               	addwf	(_keyboardMenu+1)& (0+255),w,b
 18940  0073DE  6F60               	movwf	___wmul@multiplier& (0+255),b
 18941  0073E0  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 18942  0073E2  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 18943  0073E4  0E00               	movlw	0
 18944  0073E6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18945  0073E8  0E11               	movlw	17
 18946  0073EA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 18947  0073EC  EC2C  F04C         	call	___wmul	;wreg free
 18948  0073F0  0E9E               	movlw	low _LCD_STRINGS
 18949  0073F2  0100               	movlb	0	; () banked
 18950  0073F4  2560               	addwf	?___wmul& (0+255),w,b
 18951  0073F6  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 18952  0073F8  0EF3               	movlw	high _LCD_STRINGS
 18953  0073FA  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 18954  0073FC  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18955  0073FE  EC76  F042         	call	_Lcd_Print_String	;wreg free
 18956                           
 18957                           ;menu.c: 555: }
 18958                           ;menu.c: 558: while(ON_OFF == 1){
 18959  007402  D023               	goto	l3591
 18960  007404                     
 18961                           ;menu.c: 560: un_block_code();
 18962  007404  ECAD  F04C         	call	_un_block_code	;wreg free
 18963                           
 18964                           ;menu.c: 563: if(print_row_2_once == 0){
 18965  007408  BC04               	btfsc	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 18966  00740A  D01F               	goto	l3591
 18967                           
 18968                           ;menu.c: 564: clear_row2();
 18969  00740C  EC04  F04C         	call	_clear_row2	;wreg free
 18970                           
 18971                           ;menu.c: 565: Lcd_Print_String(LCD_STRINGS[(keyboardMenu.selector % keyboardMenu.number)
      +                           + keyboardMenu.address]);
 18972  007410  0100               	movlb	0	; () banked
 18973  007412  51E5               	movf	_keyboardMenu& (0+255),w,b
 18974  007414  6EE6               	movwf	postinc1,c
 18975  007416  51E7               	movf	(_keyboardMenu+2)& (0+255),w,b
 18976  007418  6EE6               	movwf	postinc1,c
 18977  00741A  EC63  F041         	call	___lbmod	;wreg free
 18978  00741E  503F               	movf	btemp,w,c
 18979  007420  0100               	movlb	0	; () banked
 18980  007422  25E6               	addwf	(_keyboardMenu+1)& (0+255),w,b
 18981  007424  6F60               	movwf	___wmul@multiplier& (0+255),b
 18982  007426  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 18983  007428  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 18984  00742A  0E00               	movlw	0
 18985  00742C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18986  00742E  0E11               	movlw	17
 18987  007430  6F62               	movwf	___wmul@multiplicand& (0+255),b
 18988  007432  EC2C  F04C         	call	___wmul	;wreg free
 18989  007436  0E9E               	movlw	low _LCD_STRINGS
 18990  007438  0100               	movlb	0	; () banked
 18991  00743A  2560               	addwf	?___wmul& (0+255),w,b
 18992  00743C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 18993  00743E  0EF3               	movlw	high _LCD_STRINGS
 18994  007440  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 18995  007442  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18996  007444  EC76  F042         	call	_Lcd_Print_String	;wreg free
 18997                           
 18998                           ;menu.c: 566: print_row_2_once = 1;
 18999  007448  8C04               	bsf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19000  00744A                     l3591:
 19001  00744A  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 19002  00744C  D7DB               	goto	l3590
 19003                           
 19004                           ;menu.c: 567: }
 19005                           ;menu.c: 568: }
 19006                           ;menu.c: 571: KEYBOARD_MODE = keyboardMenu.selector;
 19007  00744E  C0E7  F0F2         	movff	_keyboardMenu+2,_KEYBOARD_MODE
 19008                           
 19009                           ;menu.c: 573: lcd_print_once = 1;
 19010  007452  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19011  007454                     l3586:
 19012  007454  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 19013  007456  D7B3               	goto	l3587
 19014                           
 19015                           ;menu.c: 574: }
 19016                           ;menu.c: 579: if(keyboardMenu.selector == MODES) {
 19017  007458  0E03               	movlw	3
 19018  00745A  0100               	movlb	0	; () banked
 19019  00745C  19E7               	xorwf	(_keyboardMenu+2)& (0+255),w,b
 19020  00745E  B4D8               	btfsc	status,2,c
 19021                           
 19022                           ; BSR set to: 0
 19023                           ;menu.c: 580: Function_A_1();
 19024  007460  EC6E  F039         	call	_Function_A_1	;wreg free
 19025                           
 19026                           ;menu.c: 581: }
 19027                           ;menu.c: 584: if(keyboardMenu.selector == TRIAD) {
 19028  007464  0E06               	movlw	6
 19029  007466  0100               	movlb	0	; () banked
 19030  007468  19E7               	xorwf	(_keyboardMenu+2)& (0+255),w,b
 19031  00746A  B4D8               	btfsc	status,2,c
 19032                           
 19033                           ; BSR set to: 0
 19034                           ;menu.c: 585: Function_A_2();
 19035  00746C  EC03  F039         	call	_Function_A_2	;wreg free
 19036                           
 19037                           ;menu.c: 587: }
 19038                           ;menu.c: 589: if(keyboardMenu.selector == SEVENTH){
 19039  007470  0E09               	movlw	9
 19040  007472  0100               	movlb	0	; () banked
 19041  007474  19E7               	xorwf	(_keyboardMenu+2)& (0+255),w,b
 19042  007476  A4D8               	btfss	status,2,c
 19043  007478  0012               	return	
 19044                           
 19045                           ; BSR set to: 0
 19046                           ;menu.c: 590: Function_A_3();
 19047  00747A  EC98  F038         	call	_Function_A_3	;wreg free
 19048  00747E  0012               	return	
 19049  007480                     __end_of_Function_A:
 19050                           	opt stack 0
 19051                           tblptru	equ	0xFF8
 19052                           tblptrh	equ	0xFF7
 19053                           tblptrl	equ	0xFF6
 19054                           tablat	equ	0xFF5
 19055                           prodh	equ	0xFF4
 19056                           prodl	equ	0xFF3
 19057                           intcon	equ	0xFF2
 19058                           intcon2	equ	0xFF1
 19059                           postinc0	equ	0xFEE
 19060                           wreg	equ	0xFE8
 19061                           postinc1	equ	0xFE6
 19062                           plusw1	equ	0xFE3
 19063                           fsr1h	equ	0xFE2
 19064                           fsr1l	equ	0xFE1
 19065                           indf2	equ	0xFDF
 19066                           postinc2	equ	0xFDE
 19067                           postdec2	equ	0xFDD
 19068                           plusw2	equ	0xFDB
 19069                           fsr2h	equ	0xFDA
 19070                           fsr2l	equ	0xFD9
 19071                           status	equ	0xFD8
 19072                           
 19073 ;; *************** function _Function_A_3 *****************
 19074 ;; Defined at:
 19075 ;;		line 501 in file "menu.c"
 19076 ;; Parameters:    Size  Location     Type
 19077 ;;		None
 19078 ;; Auto vars:     Size  Location     Type
 19079 ;;		None
 19080 ;; Return value:  Size  Location     Type
 19081 ;;                  1    wreg      void 
 19082 ;; Registers used:
 19083 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19084 ;; Tracked objects:
 19085 ;;		On entry : 0/0
 19086 ;;		On exit  : 0/0
 19087 ;;		Unchanged: 0/0
 19088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19093 ;;Total ram usage:        0 bytes
 19094 ;; Hardware stack levels used:    1
 19095 ;; Hardware stack levels required when called:   16
 19096 ;; This function calls:
 19097 ;;		_Lcd_Print_String
 19098 ;;		___lbmod
 19099 ;;		___wmul
 19100 ;;		_clear_row1
 19101 ;;		_clear_row2
 19102 ;;		_un_block_code
 19103 ;; This function is called by:
 19104 ;;		_Function_A
 19105 ;; This function uses a non-reentrant model
 19106 ;;
 19107                           
 19108                           	psect	text59
 19109  007130                     __ptext59:
 19110                           	opt stack 0
 19111  007130                     _Function_A_3:
 19112                           	opt stack 12
 19113                           
 19114                           ;menu.c: 502: KEYBOARD_MODE = SEVENTH;
 19115                           
 19116                           ;incstack = 0
 19117  007130  0E09               	movlw	9
 19118  007132  0100               	movlb	0	; () banked
 19119  007134  6FF2               	movwf	_KEYBOARD_MODE& (0+255),b
 19120                           
 19121                           ;menu.c: 503: which_screen = SEVENTHS_MENU;
 19122  007136  0E0B               	movlw	11
 19123  007138  6E4F               	movwf	_which_screen,c
 19124                           
 19125                           ; BSR set to: 0
 19126                           ;menu.c: 504: lcd_print_once = 0;
 19127  00713A  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19128                           
 19129                           ; BSR set to: 0
 19130                           ;menu.c: 505: encoder_click = 0;
 19131  00713C  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 19132                           
 19133                           ; BSR set to: 0
 19134                           ;menu.c: 507: seventhMenu.selector = which_seventh;
 19135  00713E  C0EF  F16D         	movff	_which_seventh,_seventhMenu+2
 19136                           
 19137                           ;menu.c: 509: while(encoder_click == 0) {
 19138  007142  D05E               	goto	l3575
 19139  007144                     
 19140                           ; BSR set to: 0
 19141                           ;menu.c: 511: un_block_code();
 19142                           
 19143                           ; BSR set to: 0
 19144  007144  ECAD  F04C         	call	_un_block_code	;wreg free
 19145                           
 19146                           ;menu.c: 513: if (lcd_print_once == 0) {
 19147  007148  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19148  00714A  D04D               	goto	l3580
 19149                           
 19150                           ;menu.c: 514: clear_row1();
 19151  00714C  EC18  F04C         	call	_clear_row1	;wreg free
 19152                           
 19153                           ;menu.c: 515: Lcd_Print_String("Select Seventh:");
 19154  007150  0E2D               	movlw	low STR_26
 19155  007152  0100               	movlb	0	; () banked
 19156  007154  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19157  007156  0EFE               	movlw	high STR_26
 19158  007158  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19159  00715A  EC76  F042         	call	_Lcd_Print_String	;wreg free
 19160                           
 19161                           ;menu.c: 516: clear_row2();
 19162  00715E  EC04  F04C         	call	_clear_row2	;wreg free
 19163                           
 19164                           ;menu.c: 517: Lcd_Print_String(LCD_STRINGS[(seventhMenu.selector % seventhMenu.number) +
      +                           seventhMenu.address]);
 19165  007162  0101               	movlb	1	; () banked
 19166  007164  516B               	movf	_seventhMenu& (0+255),w,b
 19167  007166  6EE6               	movwf	postinc1,c
 19168  007168  516D               	movf	(_seventhMenu+2)& (0+255),w,b
 19169  00716A  6EE6               	movwf	postinc1,c
 19170  00716C  EC63  F041         	call	___lbmod	;wreg free
 19171  007170  503F               	movf	btemp,w,c
 19172  007172  0101               	movlb	1	; () banked
 19173  007174  256C               	addwf	(_seventhMenu+1)& (0+255),w,b
 19174  007176  0100               	movlb	0	; () banked
 19175  007178  6F60               	movwf	___wmul@multiplier& (0+255),b
 19176  00717A  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19177  00717C  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19178  00717E  0E00               	movlw	0
 19179  007180  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19180  007182  0E11               	movlw	17
 19181  007184  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19182  007186  EC2C  F04C         	call	___wmul	;wreg free
 19183  00718A  0E9E               	movlw	low _LCD_STRINGS
 19184  00718C  0100               	movlb	0	; () banked
 19185  00718E  2560               	addwf	?___wmul& (0+255),w,b
 19186  007190  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19187  007192  0EF3               	movlw	high _LCD_STRINGS
 19188  007194  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19189  007196  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19190  007198  EC76  F042         	call	_Lcd_Print_String	;wreg free
 19191                           
 19192                           ;menu.c: 518: }
 19193                           ;menu.c: 521: while(ON_OFF == 1){
 19194  00719C  D024               	goto	l3580
 19195  00719E                     
 19196                           ;menu.c: 523: un_block_code();
 19197  00719E  ECAD  F04C         	call	_un_block_code	;wreg free
 19198                           
 19199                           ;menu.c: 526: if(print_row_2_once == 0){
 19200  0071A2  BC04               	btfsc	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19201  0071A4  D020               	goto	l3580
 19202                           
 19203                           ;menu.c: 527: clear_row2();
 19204  0071A6  EC04  F04C         	call	_clear_row2	;wreg free
 19205                           
 19206                           ;menu.c: 528: Lcd_Print_String(LCD_STRINGS[(seventhMenu.selector % seventhMenu.number) +
      +                           seventhMenu.address]);
 19207  0071AA  0101               	movlb	1	; () banked
 19208  0071AC  516B               	movf	_seventhMenu& (0+255),w,b
 19209  0071AE  6EE6               	movwf	postinc1,c
 19210  0071B0  516D               	movf	(_seventhMenu+2)& (0+255),w,b
 19211  0071B2  6EE6               	movwf	postinc1,c
 19212  0071B4  EC63  F041         	call	___lbmod	;wreg free
 19213  0071B8  503F               	movf	btemp,w,c
 19214  0071BA  0101               	movlb	1	; () banked
 19215  0071BC  256C               	addwf	(_seventhMenu+1)& (0+255),w,b
 19216  0071BE  0100               	movlb	0	; () banked
 19217  0071C0  6F60               	movwf	___wmul@multiplier& (0+255),b
 19218  0071C2  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19219  0071C4  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19220  0071C6  0E00               	movlw	0
 19221  0071C8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19222  0071CA  0E11               	movlw	17
 19223  0071CC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19224  0071CE  EC2C  F04C         	call	___wmul	;wreg free
 19225  0071D2  0E9E               	movlw	low _LCD_STRINGS
 19226  0071D4  0100               	movlb	0	; () banked
 19227  0071D6  2560               	addwf	?___wmul& (0+255),w,b
 19228  0071D8  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19229  0071DA  0EF3               	movlw	high _LCD_STRINGS
 19230  0071DC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19231  0071DE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19232  0071E0  EC76  F042         	call	_Lcd_Print_String	;wreg free
 19233                           
 19234                           ;menu.c: 529: print_row_2_once = 1;
 19235  0071E4  8C04               	bsf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19236  0071E6                     l3580:
 19237  0071E6  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 19238  0071E8  D7DA               	goto	l3579
 19239                           
 19240                           ;menu.c: 530: }
 19241                           ;menu.c: 531: }
 19242                           ;menu.c: 533: which_seventh = seventhMenu.selector % seventhMenu.number;
 19243  0071EA  0101               	movlb	1	; () banked
 19244  0071EC  516B               	movf	_seventhMenu& (0+255),w,b
 19245  0071EE  6EE6               	movwf	postinc1,c
 19246  0071F0  516D               	movf	(_seventhMenu+2)& (0+255),w,b
 19247  0071F2  6EE6               	movwf	postinc1,c
 19248  0071F4  EC63  F041         	call	___lbmod	;wreg free
 19249  0071F8  503F               	movf	btemp,w,c
 19250  0071FA  0100               	movlb	0	; () banked
 19251  0071FC  6FEF               	movwf	_which_seventh& (0+255),b
 19252                           
 19253                           ; BSR set to: 0
 19254                           ;menu.c: 534: lcd_print_once = 1;
 19255  0071FE  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19256  007200                     l3575:
 19257                           
 19258                           ; BSR set to: 0
 19259                           
 19260                           ; BSR set to: 0
 19261  007200  B205               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 19262  007202  0012               	return	
 19263  007204  D79F               	goto	l3576
 19264  007206                     __end_of_Function_A_3:
 19265                           	opt stack 0
 19266                           tblptru	equ	0xFF8
 19267                           tblptrh	equ	0xFF7
 19268                           tblptrl	equ	0xFF6
 19269                           tablat	equ	0xFF5
 19270                           prodh	equ	0xFF4
 19271                           prodl	equ	0xFF3
 19272                           intcon	equ	0xFF2
 19273                           intcon2	equ	0xFF1
 19274                           postinc0	equ	0xFEE
 19275                           wreg	equ	0xFE8
 19276                           postinc1	equ	0xFE6
 19277                           plusw1	equ	0xFE3
 19278                           fsr1h	equ	0xFE2
 19279                           fsr1l	equ	0xFE1
 19280                           indf2	equ	0xFDF
 19281                           postinc2	equ	0xFDE
 19282                           postdec2	equ	0xFDD
 19283                           plusw2	equ	0xFDB
 19284                           fsr2h	equ	0xFDA
 19285                           fsr2l	equ	0xFD9
 19286                           status	equ	0xFD8
 19287                           
 19288 ;; *************** function _Function_A_2 *****************
 19289 ;; Defined at:
 19290 ;;		line 462 in file "menu.c"
 19291 ;; Parameters:    Size  Location     Type
 19292 ;;		None
 19293 ;; Auto vars:     Size  Location     Type
 19294 ;;		None
 19295 ;; Return value:  Size  Location     Type
 19296 ;;                  1    wreg      void 
 19297 ;; Registers used:
 19298 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19299 ;; Tracked objects:
 19300 ;;		On entry : 0/0
 19301 ;;		On exit  : 0/0
 19302 ;;		Unchanged: 0/0
 19303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19308 ;;Total ram usage:        0 bytes
 19309 ;; Hardware stack levels used:    1
 19310 ;; Hardware stack levels required when called:   16
 19311 ;; This function calls:
 19312 ;;		_Lcd_Print_String
 19313 ;;		___lbmod
 19314 ;;		___wmul
 19315 ;;		_clear_row1
 19316 ;;		_clear_row2
 19317 ;;		_un_block_code
 19318 ;; This function is called by:
 19319 ;;		_Function_A
 19320 ;; This function uses a non-reentrant model
 19321 ;;
 19322                           
 19323                           	psect	text60
 19324  007206                     __ptext60:
 19325                           	opt stack 0
 19326  007206                     _Function_A_2:
 19327                           	opt stack 12
 19328                           
 19329                           ;menu.c: 464: KEYBOARD_MODE = TRIAD;
 19330                           
 19331                           ; BSR set to: 0
 19332                           ;incstack = 0
 19333  007206  0E06               	movlw	6
 19334  007208  0100               	movlb	0	; () banked
 19335  00720A  6FF2               	movwf	_KEYBOARD_MODE& (0+255),b
 19336                           
 19337                           ;menu.c: 465: which_screen = TRIADS_MENU;
 19338  00720C  0E0A               	movlw	10
 19339  00720E  6E4F               	movwf	_which_screen,c
 19340                           
 19341                           ; BSR set to: 0
 19342                           ;menu.c: 466: lcd_print_once = 0;
 19343  007210  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19344                           
 19345                           ; BSR set to: 0
 19346                           ;menu.c: 467: encoder_click = 0;
 19347  007212  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 19348                           
 19349                           ; BSR set to: 0
 19350                           ;menu.c: 469: triadMenu.selector = which_triad;
 19351  007214  C0F0  F170         	movff	_which_triad,_triadMenu+2
 19352                           
 19353                           ;menu.c: 471: while(encoder_click == 0) {
 19354  007218  D05E               	goto	l3564
 19355  00721A                     
 19356                           ; BSR set to: 0
 19357                           ;menu.c: 474: un_block_code();
 19358                           
 19359                           ; BSR set to: 0
 19360  00721A  ECAD  F04C         	call	_un_block_code	;wreg free
 19361                           
 19362                           ;menu.c: 476: if (lcd_print_once == 0) {
 19363  00721E  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19364  007220  D04D               	goto	l3569
 19365                           
 19366                           ;menu.c: 477: clear_row1();
 19367  007222  EC18  F04C         	call	_clear_row1	;wreg free
 19368                           
 19369                           ;menu.c: 478: Lcd_Print_String("Select Triad:");
 19370  007226  0ED2               	movlw	low STR_25
 19371  007228  0100               	movlb	0	; () banked
 19372  00722A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19373  00722C  0EFE               	movlw	high STR_25
 19374  00722E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19375  007230  EC76  F042         	call	_Lcd_Print_String	;wreg free
 19376                           
 19377                           ;menu.c: 479: clear_row2();
 19378  007234  EC04  F04C         	call	_clear_row2	;wreg free
 19379                           
 19380                           ;menu.c: 480: Lcd_Print_String(LCD_STRINGS[(triadMenu.selector % triadMenu.number) + tri
      +                          adMenu.address]);
 19381  007238  0101               	movlb	1	; () banked
 19382  00723A  516E               	movf	_triadMenu& (0+255),w,b
 19383  00723C  6EE6               	movwf	postinc1,c
 19384  00723E  5170               	movf	(_triadMenu+2)& (0+255),w,b
 19385  007240  6EE6               	movwf	postinc1,c
 19386  007242  EC63  F041         	call	___lbmod	;wreg free
 19387  007246  503F               	movf	btemp,w,c
 19388  007248  0101               	movlb	1	; () banked
 19389  00724A  256F               	addwf	(_triadMenu+1)& (0+255),w,b
 19390  00724C  0100               	movlb	0	; () banked
 19391  00724E  6F60               	movwf	___wmul@multiplier& (0+255),b
 19392  007250  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19393  007252  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19394  007254  0E00               	movlw	0
 19395  007256  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19396  007258  0E11               	movlw	17
 19397  00725A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19398  00725C  EC2C  F04C         	call	___wmul	;wreg free
 19399  007260  0E9E               	movlw	low _LCD_STRINGS
 19400  007262  0100               	movlb	0	; () banked
 19401  007264  2560               	addwf	?___wmul& (0+255),w,b
 19402  007266  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19403  007268  0EF3               	movlw	high _LCD_STRINGS
 19404  00726A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19405  00726C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19406  00726E  EC76  F042         	call	_Lcd_Print_String	;wreg free
 19407                           
 19408                           ;menu.c: 481: }
 19409                           ;menu.c: 484: while(ON_OFF == 1){
 19410  007272  D024               	goto	l3569
 19411  007274                     
 19412                           ;menu.c: 485: un_block_code();
 19413  007274  ECAD  F04C         	call	_un_block_code	;wreg free
 19414                           
 19415                           ;menu.c: 488: if(print_row_2_once == 0){
 19416  007278  BC04               	btfsc	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19417  00727A  D020               	goto	l3569
 19418                           
 19419                           ;menu.c: 489: clear_row2();
 19420  00727C  EC04  F04C         	call	_clear_row2	;wreg free
 19421                           
 19422                           ;menu.c: 490: Lcd_Print_String(LCD_STRINGS[(triadMenu.selector % triadMenu.number) + tri
      +                          adMenu.address]);
 19423  007280  0101               	movlb	1	; () banked
 19424  007282  516E               	movf	_triadMenu& (0+255),w,b
 19425  007284  6EE6               	movwf	postinc1,c
 19426  007286  5170               	movf	(_triadMenu+2)& (0+255),w,b
 19427  007288  6EE6               	movwf	postinc1,c
 19428  00728A  EC63  F041         	call	___lbmod	;wreg free
 19429  00728E  503F               	movf	btemp,w,c
 19430  007290  0101               	movlb	1	; () banked
 19431  007292  256F               	addwf	(_triadMenu+1)& (0+255),w,b
 19432  007294  0100               	movlb	0	; () banked
 19433  007296  6F60               	movwf	___wmul@multiplier& (0+255),b
 19434  007298  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19435  00729A  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19436  00729C  0E00               	movlw	0
 19437  00729E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19438  0072A0  0E11               	movlw	17
 19439  0072A2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19440  0072A4  EC2C  F04C         	call	___wmul	;wreg free
 19441  0072A8  0E9E               	movlw	low _LCD_STRINGS
 19442  0072AA  0100               	movlb	0	; () banked
 19443  0072AC  2560               	addwf	?___wmul& (0+255),w,b
 19444  0072AE  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19445  0072B0  0EF3               	movlw	high _LCD_STRINGS
 19446  0072B2  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19447  0072B4  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19448  0072B6  EC76  F042         	call	_Lcd_Print_String	;wreg free
 19449                           
 19450                           ;menu.c: 491: print_row_2_once = 1;
 19451  0072BA  8C04               	bsf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19452  0072BC                     l3569:
 19453  0072BC  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 19454  0072BE  D7DA               	goto	l3568
 19455                           
 19456                           ;menu.c: 492: }
 19457                           ;menu.c: 493: }
 19458                           ;menu.c: 495: which_triad = triadMenu.selector % triadMenu.number;
 19459  0072C0  0101               	movlb	1	; () banked
 19460  0072C2  516E               	movf	_triadMenu& (0+255),w,b
 19461  0072C4  6EE6               	movwf	postinc1,c
 19462  0072C6  5170               	movf	(_triadMenu+2)& (0+255),w,b
 19463  0072C8  6EE6               	movwf	postinc1,c
 19464  0072CA  EC63  F041         	call	___lbmod	;wreg free
 19465  0072CE  503F               	movf	btemp,w,c
 19466  0072D0  0100               	movlb	0	; () banked
 19467  0072D2  6FF0               	movwf	_which_triad& (0+255),b
 19468                           
 19469                           ; BSR set to: 0
 19470                           ;menu.c: 496: lcd_print_once = 1;
 19471  0072D4  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19472  0072D6                     l3564:
 19473                           
 19474                           ; BSR set to: 0
 19475                           
 19476                           ; BSR set to: 0
 19477  0072D6  B205               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 19478  0072D8  0012               	return	
 19479  0072DA  D79F               	goto	l3565
 19480  0072DC                     __end_of_Function_A_2:
 19481                           	opt stack 0
 19482                           tblptru	equ	0xFF8
 19483                           tblptrh	equ	0xFF7
 19484                           tblptrl	equ	0xFF6
 19485                           tablat	equ	0xFF5
 19486                           prodh	equ	0xFF4
 19487                           prodl	equ	0xFF3
 19488                           intcon	equ	0xFF2
 19489                           intcon2	equ	0xFF1
 19490                           postinc0	equ	0xFEE
 19491                           wreg	equ	0xFE8
 19492                           postinc1	equ	0xFE6
 19493                           plusw1	equ	0xFE3
 19494                           fsr1h	equ	0xFE2
 19495                           fsr1l	equ	0xFE1
 19496                           indf2	equ	0xFDF
 19497                           postinc2	equ	0xFDE
 19498                           postdec2	equ	0xFDD
 19499                           plusw2	equ	0xFDB
 19500                           fsr2h	equ	0xFDA
 19501                           fsr2l	equ	0xFD9
 19502                           status	equ	0xFD8
 19503                           
 19504 ;; *************** function _Function_A_1 *****************
 19505 ;; Defined at:
 19506 ;;		line 422 in file "menu.c"
 19507 ;; Parameters:    Size  Location     Type
 19508 ;;		None
 19509 ;; Auto vars:     Size  Location     Type
 19510 ;;		None
 19511 ;; Return value:  Size  Location     Type
 19512 ;;                  1    wreg      void 
 19513 ;; Registers used:
 19514 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19515 ;; Tracked objects:
 19516 ;;		On entry : 0/0
 19517 ;;		On exit  : 0/0
 19518 ;;		Unchanged: 0/0
 19519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19524 ;;Total ram usage:        0 bytes
 19525 ;; Hardware stack levels used:    1
 19526 ;; Hardware stack levels required when called:   16
 19527 ;; This function calls:
 19528 ;;		_Lcd_Print_String
 19529 ;;		___lbmod
 19530 ;;		___wmul
 19531 ;;		_clear_row1
 19532 ;;		_clear_row2
 19533 ;;		_un_block_code
 19534 ;; This function is called by:
 19535 ;;		_Function_A
 19536 ;; This function uses a non-reentrant model
 19537 ;;
 19538                           
 19539                           	psect	text61
 19540  0072DC                     __ptext61:
 19541                           	opt stack 0
 19542  0072DC                     _Function_A_1:
 19543                           	opt stack 12
 19544                           
 19545                           ;menu.c: 424: KEYBOARD_MODE = MODES;
 19546                           
 19547                           ; BSR set to: 0
 19548                           ;incstack = 0
 19549  0072DC  0E03               	movlw	3
 19550  0072DE  0100               	movlb	0	; () banked
 19551  0072E0  6FF2               	movwf	_KEYBOARD_MODE& (0+255),b
 19552                           
 19553                           ;menu.c: 425: which_screen = MODES_MENU;
 19554  0072E2  0E09               	movlw	9
 19555  0072E4  6E4F               	movwf	_which_screen,c
 19556                           
 19557                           ; BSR set to: 0
 19558                           ;menu.c: 426: lcd_print_once = 0;
 19559  0072E6  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19560                           
 19561                           ; BSR set to: 0
 19562                           ;menu.c: 427: encoder_click = 0;
 19563  0072E8  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 19564                           
 19565                           ; BSR set to: 0
 19566                           ;menu.c: 429: modeMenu.selector = which_mode;
 19567  0072EA  C0F1  F173         	movff	_which_mode,_modeMenu+2
 19568                           
 19569                           ;menu.c: 431: while(encoder_click == 0) {
 19570  0072EE  D05E               	goto	l3553
 19571  0072F0                     
 19572                           ; BSR set to: 0
 19573                           ;menu.c: 434: un_block_code();
 19574                           
 19575                           ; BSR set to: 0
 19576  0072F0  ECAD  F04C         	call	_un_block_code	;wreg free
 19577                           
 19578                           ;menu.c: 436: if (lcd_print_once == 0) {
 19579  0072F4  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19580  0072F6  D04D               	goto	l3558
 19581                           
 19582                           ;menu.c: 437: clear_row1();
 19583  0072F8  EC18  F04C         	call	_clear_row1	;wreg free
 19584                           
 19585                           ;menu.c: 438: Lcd_Print_String("Enter Mode:");
 19586  0072FC  0E58               	movlw	low STR_24
 19587  0072FE  0100               	movlb	0	; () banked
 19588  007300  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19589  007302  0EFF               	movlw	high STR_24
 19590  007304  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19591  007306  EC76  F042         	call	_Lcd_Print_String	;wreg free
 19592                           
 19593                           ;menu.c: 439: clear_row2();
 19594  00730A  EC04  F04C         	call	_clear_row2	;wreg free
 19595                           
 19596                           ;menu.c: 440: Lcd_Print_String(LCD_STRINGS[(modeMenu.selector % modeMenu.number) + modeM
      +                          enu.address]);
 19597  00730E  0101               	movlb	1	; () banked
 19598  007310  5171               	movf	_modeMenu& (0+255),w,b
 19599  007312  6EE6               	movwf	postinc1,c
 19600  007314  5173               	movf	(_modeMenu+2)& (0+255),w,b
 19601  007316  6EE6               	movwf	postinc1,c
 19602  007318  EC63  F041         	call	___lbmod	;wreg free
 19603  00731C  503F               	movf	btemp,w,c
 19604  00731E  0101               	movlb	1	; () banked
 19605  007320  2572               	addwf	(_modeMenu+1)& (0+255),w,b
 19606  007322  0100               	movlb	0	; () banked
 19607  007324  6F60               	movwf	___wmul@multiplier& (0+255),b
 19608  007326  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19609  007328  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19610  00732A  0E00               	movlw	0
 19611  00732C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19612  00732E  0E11               	movlw	17
 19613  007330  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19614  007332  EC2C  F04C         	call	___wmul	;wreg free
 19615  007336  0E9E               	movlw	low _LCD_STRINGS
 19616  007338  0100               	movlb	0	; () banked
 19617  00733A  2560               	addwf	?___wmul& (0+255),w,b
 19618  00733C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19619  00733E  0EF3               	movlw	high _LCD_STRINGS
 19620  007340  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19621  007342  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19622  007344  EC76  F042         	call	_Lcd_Print_String	;wreg free
 19623                           
 19624                           ;menu.c: 441: }
 19625                           ;menu.c: 444: while(ON_OFF == 1){
 19626  007348  D024               	goto	l3558
 19627  00734A                     
 19628                           ;menu.c: 446: un_block_code();
 19629  00734A  ECAD  F04C         	call	_un_block_code	;wreg free
 19630                           
 19631                           ;menu.c: 449: if(print_row_2_once == 0){
 19632  00734E  BC04               	btfsc	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19633  007350  D020               	goto	l3558
 19634                           
 19635                           ;menu.c: 450: clear_row2();
 19636  007352  EC04  F04C         	call	_clear_row2	;wreg free
 19637                           
 19638                           ;menu.c: 451: Lcd_Print_String(LCD_STRINGS[(modeMenu.selector % modeMenu.number) + modeM
      +                          enu.address]);
 19639  007356  0101               	movlb	1	; () banked
 19640  007358  5171               	movf	_modeMenu& (0+255),w,b
 19641  00735A  6EE6               	movwf	postinc1,c
 19642  00735C  5173               	movf	(_modeMenu+2)& (0+255),w,b
 19643  00735E  6EE6               	movwf	postinc1,c
 19644  007360  EC63  F041         	call	___lbmod	;wreg free
 19645  007364  503F               	movf	btemp,w,c
 19646  007366  0101               	movlb	1	; () banked
 19647  007368  2572               	addwf	(_modeMenu+1)& (0+255),w,b
 19648  00736A  0100               	movlb	0	; () banked
 19649  00736C  6F60               	movwf	___wmul@multiplier& (0+255),b
 19650  00736E  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19651  007370  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19652  007372  0E00               	movlw	0
 19653  007374  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19654  007376  0E11               	movlw	17
 19655  007378  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19656  00737A  EC2C  F04C         	call	___wmul	;wreg free
 19657  00737E  0E9E               	movlw	low _LCD_STRINGS
 19658  007380  0100               	movlb	0	; () banked
 19659  007382  2560               	addwf	?___wmul& (0+255),w,b
 19660  007384  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19661  007386  0EF3               	movlw	high _LCD_STRINGS
 19662  007388  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19663  00738A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19664  00738C  EC76  F042         	call	_Lcd_Print_String	;wreg free
 19665                           
 19666                           ;menu.c: 452: print_row_2_once = 1;
 19667  007390  8C04               	bsf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19668  007392                     l3558:
 19669  007392  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 19670  007394  D7DA               	goto	l3557
 19671                           
 19672                           ;menu.c: 453: }
 19673                           ;menu.c: 454: }
 19674                           ;menu.c: 456: which_mode = modeMenu.selector % modeMenu.number;
 19675  007396  0101               	movlb	1	; () banked
 19676  007398  5171               	movf	_modeMenu& (0+255),w,b
 19677  00739A  6EE6               	movwf	postinc1,c
 19678  00739C  5173               	movf	(_modeMenu+2)& (0+255),w,b
 19679  00739E  6EE6               	movwf	postinc1,c
 19680  0073A0  EC63  F041         	call	___lbmod	;wreg free
 19681  0073A4  503F               	movf	btemp,w,c
 19682  0073A6  0100               	movlb	0	; () banked
 19683  0073A8  6FF1               	movwf	_which_mode& (0+255),b
 19684                           
 19685                           ; BSR set to: 0
 19686                           ;menu.c: 457: lcd_print_once = 1;
 19687  0073AA  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19688  0073AC                     l3553:
 19689                           
 19690                           ; BSR set to: 0
 19691                           
 19692                           ; BSR set to: 0
 19693  0073AC  B205               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 19694  0073AE  0012               	return	
 19695  0073B0  D79F               	goto	l3554
 19696  0073B2                     __end_of_Function_A_1:
 19697                           	opt stack 0
 19698                           tblptru	equ	0xFF8
 19699                           tblptrh	equ	0xFF7
 19700                           tblptrl	equ	0xFF6
 19701                           tablat	equ	0xFF5
 19702                           prodh	equ	0xFF4
 19703                           prodl	equ	0xFF3
 19704                           intcon	equ	0xFF2
 19705                           intcon2	equ	0xFF1
 19706                           postinc0	equ	0xFEE
 19707                           wreg	equ	0xFE8
 19708                           postinc1	equ	0xFE6
 19709                           plusw1	equ	0xFE3
 19710                           fsr1h	equ	0xFE2
 19711                           fsr1l	equ	0xFE1
 19712                           indf2	equ	0xFDF
 19713                           postinc2	equ	0xFDE
 19714                           postdec2	equ	0xFDD
 19715                           plusw2	equ	0xFDB
 19716                           fsr2h	equ	0xFDA
 19717                           fsr2l	equ	0xFD9
 19718                           status	equ	0xFD8
 19719                           
 19720 ;; *************** function _un_block_code *****************
 19721 ;; Defined at:
 19722 ;;		line 389 in file "menu.c"
 19723 ;; Parameters:    Size  Location     Type
 19724 ;;		None
 19725 ;; Auto vars:     Size  Location     Type
 19726 ;;		None
 19727 ;; Return value:  Size  Location     Type
 19728 ;;                  1    wreg      void 
 19729 ;; Registers used:
 19730 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19731 ;; Tracked objects:
 19732 ;;		On entry : 0/0
 19733 ;;		On exit  : 0/0
 19734 ;;		Unchanged: 0/0
 19735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19740 ;;Total ram usage:        0 bytes
 19741 ;; Hardware stack levels used:    1
 19742 ;; Hardware stack levels required when called:   15
 19743 ;; This function calls:
 19744 ;;		_analogInputs
 19745 ;;		_digitalInputs
 19746 ;;		_processEncoderBuxton
 19747 ;; This function is called by:
 19748 ;;		_Function_A_1
 19749 ;;		_Function_A_2
 19750 ;;		_Function_A_3
 19751 ;;		_Function_A
 19752 ;;		_Function_B
 19753 ;;		_Function_C_1
 19754 ;;		_Function_C_2
 19755 ;;		_Function_C_3
 19756 ;;		_Function_C
 19757 ;;		_Function_D_1
 19758 ;;		_Function_D_2
 19759 ;;		_Function_D_3
 19760 ;;		_Function_D_4
 19761 ;;		_Function_D_5
 19762 ;;		_Function_D
 19763 ;;		_Function_E_1
 19764 ;;		_Function_E_2
 19765 ;;		_Function_E
 19766 ;;		_Function_F
 19767 ;;		_Function_G_1
 19768 ;;		_Function_G_2
 19769 ;;		_Function_G_4
 19770 ;;		_Function_G
 19771 ;;		_Function_H
 19772 ;;		_Function_H_1
 19773 ;;		_Function_H_2
 19774 ;;		_Function_H_3
 19775 ;;		_Function_H_4
 19776 ;;		_Function_H_5
 19777 ;;		_Function_H_6_1
 19778 ;;		_Function_H_6_2
 19779 ;;		_Function_H_6
 19780 ;;		_Function_H_7
 19781 ;;		_Function_H_8_1
 19782 ;;		_Function_H_8_2
 19783 ;;		_Function_H_8
 19784 ;;		_Function_H_9_1
 19785 ;;		_Function_H_9_2
 19786 ;;		_Function_H_9_3
 19787 ;;		_Function_H_9_4
 19788 ;;		_Function_H_9
 19789 ;; This function uses a non-reentrant model
 19790 ;;
 19791                           
 19792                           	psect	text62
 19793  00995A                     __ptext62:
 19794                           	opt stack 0
 19795  00995A                     _un_block_code:
 19796                           	opt stack 13
 19797                           
 19798                           ;menu.c: 397: if(which_functions_are_unblocked == 0){
 19799                           
 19800                           ; BSR set to: 0
 19801                           ;incstack = 0
 19802  00995A  A005               	btfss	_which_functions_are_unblocked/(0+8),_which_functions_are_unblocked& (0+7),c
 19803                           
 19804                           ;menu.c: 398: processEncoderBuxton();
 19805  00995C  EC0A  F000         	call	_processEncoderBuxton	;wreg free
 19806                           
 19807                           ;menu.c: 399: }
 19808                           ;menu.c: 402: if(which_functions_are_unblocked == 1){
 19809  009960  A005               	btfss	_which_functions_are_unblocked/(0+8),_which_functions_are_unblocked& (0+7),c
 19810  009962  0012               	return	
 19811                           
 19812                           ;menu.c: 403: digitalInputs();
 19813  009964  EC1F  F049         	call	_digitalInputs	;wreg free
 19814                           
 19815                           ;menu.c: 404: analogInputs();
 19816  009968  EC02  F04A         	call	_analogInputs	;wreg free
 19817                           
 19818                           ;menu.c: 405: processEncoderBuxton();
 19819  00996C  EC0A  F000         	call	_processEncoderBuxton	;wreg free
 19820  009970  0012               	return	
 19821  009972                     __end_of_un_block_code:
 19822                           	opt stack 0
 19823                           tblptru	equ	0xFF8
 19824                           tblptrh	equ	0xFF7
 19825                           tblptrl	equ	0xFF6
 19826                           tablat	equ	0xFF5
 19827                           prodh	equ	0xFF4
 19828                           prodl	equ	0xFF3
 19829                           intcon	equ	0xFF2
 19830                           intcon2	equ	0xFF1
 19831                           postinc0	equ	0xFEE
 19832                           wreg	equ	0xFE8
 19833                           postinc1	equ	0xFE6
 19834                           plusw1	equ	0xFE3
 19835                           fsr1h	equ	0xFE2
 19836                           fsr1l	equ	0xFE1
 19837                           indf2	equ	0xFDF
 19838                           postinc2	equ	0xFDE
 19839                           postdec2	equ	0xFDD
 19840                           plusw2	equ	0xFDB
 19841                           fsr2h	equ	0xFDA
 19842                           fsr2l	equ	0xFD9
 19843                           status	equ	0xFD8
 19844                           
 19845 ;; *************** function _processEncoderBuxton *****************
 19846 ;; Defined at:
 19847 ;;		line 51 in file "encoder.c"
 19848 ;; Parameters:    Size  Location     Type
 19849 ;;		None
 19850 ;; Auto vars:     Size  Location     Type
 19851 ;;		None
 19852 ;; Return value:  Size  Location     Type
 19853 ;;                  1    wreg      void 
 19854 ;; Registers used:
 19855 ;;		wreg, status,2, status,0
 19856 ;; Tracked objects:
 19857 ;;		On entry : 0/0
 19858 ;;		On exit  : 0/0
 19859 ;;		Unchanged: 0/0
 19860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19863 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19864 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19865 ;;Total ram usage:        7 bytes
 19866 ;; Hardware stack levels used:    1
 19867 ;; Hardware stack levels required when called:    5
 19868 ;; This function calls:
 19869 ;;		Nothing
 19870 ;; This function is called by:
 19871 ;;		_un_block_code
 19872 ;;		_main
 19873 ;; This function uses a non-reentrant model
 19874 ;;
 19875                           
 19876                           	psect	text63
 19877  000014                     __ptext63:
 19878                           	opt stack 0
 19879  000014                     _processEncoderBuxton:
 19880                           	opt stack 25
 19881                           
 19882                           ;encoder.c: 53: if (encoder_direction == 0x00) {return;}
 19883                           
 19884                           ;incstack = 0
 19885  000014  5036               	movf	_encoder_direction,w,c
 19886  000016  B4D8               	btfsc	status,2,c
 19887  000018  0012               	return	
 19888                           
 19889                           ;encoder.c: 56: if (encoder_direction == 0x10) {
 19890  00001A  0E10               	movlw	16
 19891  00001C  1836               	xorwf	_encoder_direction,w,c
 19892  00001E  A4D8               	btfss	status,2,c
 19893  000020  D3B9               	goto	l937
 19894                           
 19895                           ;encoder.c: 58: lcd_print_once = 0;
 19896  000022  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19897                           
 19898                           ;encoder.c: 59: print_row_2_once = 0;
 19899  000024  9C04               	bcf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19900                           
 19901                           ;encoder.c: 62: if (which_screen == MAIN_MENU) {
 19902  000026  0E02               	movlw	2
 19903  000028  184F               	xorwf	_which_screen,w,c
 19904  00002A  A4D8               	btfss	status,2,c
 19905  00002C  D01F               	goto	l867
 19906                           
 19907                           ;encoder.c: 63: if(mainMenu.selector < mainMenu.number - 1){
 19908  00002E  0EFF               	movlw	255
 19909  000030  0100               	movlb	0	; () banked
 19910  000032  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19911  000034  0EFF               	movlw	255
 19912  000036  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 19913  000038  0101               	movlb	1	; () banked
 19914  00003A  5174               	movf	_mainMenu& (0+255),w,b
 19915  00003C  0100               	movlb	0	; () banked
 19916  00003E  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 19917  000040  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 19918  000042  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 19919  000044  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 19920  000046  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 19921  000048  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 19922  00004A  0101               	movlb	1	; () banked
 19923  00004C  5176               	movf	(_mainMenu+2)& (0+255),w,b
 19924  00004E  0100               	movlb	0	; () banked
 19925  000050  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 19926  000052  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 19927  000054  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 19928  000056  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 19929  000058  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 19930  00005A  0A80               	xorlw	128
 19931  00005C  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 19932  00005E  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 19933  000060  0A80               	xorlw	128
 19934  000062  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 19935  000064  B0D8               	btfsc	status,0,c
 19936  000066  D002               	goto	l867
 19937                           
 19938                           ; BSR set to: 0
 19939                           ;encoder.c: 64: mainMenu.selector++;
 19940  000068  0101               	movlb	1	; () banked
 19941  00006A  2B76               	incf	(_mainMenu+2)& (0+255),f,b
 19942  00006C                     l867:
 19943                           
 19944                           ;encoder.c: 65: }
 19945                           ;encoder.c: 66: }
 19946                           ;encoder.c: 67: if (which_screen == KEYBOARD_MENU) {
 19947                           
 19948                           ; BSR set to: 1
 19949                           
 19950                           ; BSR set to: 1
 19951  00006C  0E03               	movlw	3
 19952  00006E  184F               	xorwf	_which_screen,w,c
 19953  000070  A4D8               	btfss	status,2,c
 19954  000072  D019               	goto	l869
 19955                           
 19956                           ;encoder.c: 68: if(keyboardMenu.selector < (keyboardMenu.number - 1)){
 19957  000074  0EFF               	movlw	255
 19958  000076  0100               	movlb	0	; () banked
 19959  000078  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19960  00007A  0EFF               	movlw	255
 19961  00007C  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 19962  00007E  51E5               	movf	_keyboardMenu& (0+255),w,b
 19963  000080  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 19964  000082  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 19965  000084  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 19966  000086  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 19967  000088  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 19968  00008A  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 19969  00008C  51E7               	movf	(_keyboardMenu+2)& (0+255),w,b
 19970  00008E  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 19971  000090  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 19972  000092  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 19973  000094  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 19974  000096  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 19975  000098  0A80               	xorlw	128
 19976  00009A  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 19977  00009C  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 19978  00009E  0A80               	xorlw	128
 19979  0000A0  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 19980  0000A2  A0D8               	btfss	status,0,c
 19981                           
 19982                           ; BSR set to: 0
 19983                           ;encoder.c: 69: keyboardMenu.selector++;
 19984  0000A4  2BE7               	incf	(_keyboardMenu+2)& (0+255),f,b
 19985  0000A6                     l869:
 19986                           
 19987                           ;encoder.c: 70: }
 19988                           ;encoder.c: 71: }
 19989                           ;encoder.c: 72: if (which_screen == TRANSPOSE_MENU) {
 19990                           
 19991                           ; BSR set to: 0
 19992                           
 19993                           ; BSR set to: 0
 19994  0000A6  0E04               	movlw	4
 19995  0000A8  184F               	xorwf	_which_screen,w,c
 19996  0000AA  A4D8               	btfss	status,2,c
 19997  0000AC  D01F               	goto	l871
 19998                           
 19999                           ;encoder.c: 73: if(transposeMenu.selector < (transposeMenu.number - 1)){
 20000  0000AE  0EFF               	movlw	255
 20001  0000B0  0100               	movlb	0	; () banked
 20002  0000B2  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20003  0000B4  0EFF               	movlw	255
 20004  0000B6  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20005  0000B8  0101               	movlb	1	; () banked
 20006  0000BA  5168               	movf	_transposeMenu& (0+255),w,b
 20007  0000BC  0100               	movlb	0	; () banked
 20008  0000BE  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20009  0000C0  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20010  0000C2  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20011  0000C4  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20012  0000C6  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20013  0000C8  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20014  0000CA  0101               	movlb	1	; () banked
 20015  0000CC  516A               	movf	(_transposeMenu+2)& (0+255),w,b
 20016  0000CE  0100               	movlb	0	; () banked
 20017  0000D0  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20018  0000D2  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20019  0000D4  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20020  0000D6  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20021  0000D8  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20022  0000DA  0A80               	xorlw	128
 20023  0000DC  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20024  0000DE  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20025  0000E0  0A80               	xorlw	128
 20026  0000E2  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20027  0000E4  B0D8               	btfsc	status,0,c
 20028  0000E6  D002               	goto	l871
 20029                           
 20030                           ; BSR set to: 0
 20031                           ;encoder.c: 74: transposeMenu.selector++;
 20032  0000E8  0101               	movlb	1	; () banked
 20033  0000EA  2B6A               	incf	(_transposeMenu+2)& (0+255),f,b
 20034  0000EC                     l871:
 20035                           
 20036                           ;encoder.c: 75: }
 20037                           ;encoder.c: 76: }
 20038                           ;encoder.c: 77: if (which_screen == DRUM_MENU) {
 20039                           
 20040                           ; BSR set to: 1
 20041                           
 20042                           ; BSR set to: 1
 20043  0000EC  0E05               	movlw	5
 20044  0000EE  184F               	xorwf	_which_screen,w,c
 20045  0000F0  A4D8               	btfss	status,2,c
 20046  0000F2  D01F               	goto	l873
 20047                           
 20048                           ;encoder.c: 78: if(drumMenu.selector < (drumMenu.number - 1)){
 20049  0000F4  0EFF               	movlw	255
 20050  0000F6  0100               	movlb	0	; () banked
 20051  0000F8  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20052  0000FA  0EFF               	movlw	255
 20053  0000FC  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20054  0000FE  0101               	movlb	1	; () banked
 20055  000100  5165               	movf	_drumMenu& (0+255),w,b
 20056  000102  0100               	movlb	0	; () banked
 20057  000104  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20058  000106  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20059  000108  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20060  00010A  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20061  00010C  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20062  00010E  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20063  000110  0101               	movlb	1	; () banked
 20064  000112  5167               	movf	(_drumMenu+2)& (0+255),w,b
 20065  000114  0100               	movlb	0	; () banked
 20066  000116  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20067  000118  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20068  00011A  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20069  00011C  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20070  00011E  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20071  000120  0A80               	xorlw	128
 20072  000122  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20073  000124  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20074  000126  0A80               	xorlw	128
 20075  000128  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20076  00012A  B0D8               	btfsc	status,0,c
 20077  00012C  D002               	goto	l873
 20078                           
 20079                           ; BSR set to: 0
 20080                           ;encoder.c: 79: drumMenu.selector++;
 20081  00012E  0101               	movlb	1	; () banked
 20082  000130  2B67               	incf	(_drumMenu+2)& (0+255),f,b
 20083  000132                     l873:
 20084                           
 20085                           ;encoder.c: 80: }
 20086                           ;encoder.c: 81: }
 20087                           ;encoder.c: 82: if (which_screen == POTENTIOMETER_MENU) {
 20088                           
 20089                           ; BSR set to: 1
 20090                           
 20091                           ; BSR set to: 1
 20092  000132  0E06               	movlw	6
 20093  000134  184F               	xorwf	_which_screen,w,c
 20094  000136  A4D8               	btfss	status,2,c
 20095  000138  D01F               	goto	l875
 20096                           
 20097                           ;encoder.c: 83: if(potsMenu.selector < (potsMenu.number - 1)){
 20098  00013A  0EFF               	movlw	255
 20099  00013C  0100               	movlb	0	; () banked
 20100  00013E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20101  000140  0EFF               	movlw	255
 20102  000142  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20103  000144  0101               	movlb	1	; () banked
 20104  000146  5159               	movf	_potsMenu& (0+255),w,b
 20105  000148  0100               	movlb	0	; () banked
 20106  00014A  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20107  00014C  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20108  00014E  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20109  000150  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20110  000152  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20111  000154  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20112  000156  0101               	movlb	1	; () banked
 20113  000158  515B               	movf	(_potsMenu+2)& (0+255),w,b
 20114  00015A  0100               	movlb	0	; () banked
 20115  00015C  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20116  00015E  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20117  000160  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20118  000162  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20119  000164  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20120  000166  0A80               	xorlw	128
 20121  000168  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20122  00016A  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20123  00016C  0A80               	xorlw	128
 20124  00016E  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20125  000170  B0D8               	btfsc	status,0,c
 20126  000172  D002               	goto	l875
 20127                           
 20128                           ; BSR set to: 0
 20129                           ;encoder.c: 84: potsMenu.selector++;
 20130  000174  0101               	movlb	1	; () banked
 20131  000176  2B5B               	incf	(_potsMenu+2)& (0+255),f,b
 20132  000178                     l875:
 20133                           
 20134                           ;encoder.c: 85: }
 20135                           ;encoder.c: 86: }
 20136                           ;encoder.c: 87: if (which_screen == MIDI_CHANNEL_MENU) {
 20137                           
 20138                           ; BSR set to: 1
 20139                           
 20140                           ; BSR set to: 1
 20141  000178  0E07               	movlw	7
 20142  00017A  184F               	xorwf	_which_screen,w,c
 20143  00017C  A4D8               	btfss	status,2,c
 20144  00017E  D01F               	goto	l877
 20145                           
 20146                           ;encoder.c: 88: if(midiChannelMenu.selector < (midiChannelMenu.number - 1)){
 20147  000180  0EFF               	movlw	255
 20148  000182  0100               	movlb	0	; () banked
 20149  000184  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20150  000186  0EFF               	movlw	255
 20151  000188  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20152  00018A  0101               	movlb	1	; () banked
 20153  00018C  5147               	movf	_midiChannelMenu& (0+255),w,b
 20154  00018E  0100               	movlb	0	; () banked
 20155  000190  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20156  000192  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20157  000194  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20158  000196  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20159  000198  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20160  00019A  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20161  00019C  0101               	movlb	1	; () banked
 20162  00019E  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 20163  0001A0  0100               	movlb	0	; () banked
 20164  0001A2  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20165  0001A4  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20166  0001A6  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20167  0001A8  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20168  0001AA  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20169  0001AC  0A80               	xorlw	128
 20170  0001AE  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20171  0001B0  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20172  0001B2  0A80               	xorlw	128
 20173  0001B4  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20174  0001B6  B0D8               	btfsc	status,0,c
 20175  0001B8  D002               	goto	l877
 20176                           
 20177                           ; BSR set to: 0
 20178                           ;encoder.c: 89: midiChannelMenu.selector++;
 20179  0001BA  0101               	movlb	1	; () banked
 20180  0001BC  2B49               	incf	(_midiChannelMenu+2)& (0+255),f,b
 20181  0001BE                     l877:
 20182                           
 20183                           ;encoder.c: 90: }
 20184                           ;encoder.c: 91: }
 20185                           ;encoder.c: 93: if (which_screen == MODES_MENU) {
 20186                           
 20187                           ; BSR set to: 1
 20188                           
 20189                           ; BSR set to: 1
 20190  0001BE  0E09               	movlw	9
 20191  0001C0  184F               	xorwf	_which_screen,w,c
 20192  0001C2  A4D8               	btfss	status,2,c
 20193  0001C4  D01F               	goto	l879
 20194                           
 20195                           ;encoder.c: 94: if(modeMenu.selector < (modeMenu.number - 1)){
 20196  0001C6  0EFF               	movlw	255
 20197  0001C8  0100               	movlb	0	; () banked
 20198  0001CA  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20199  0001CC  0EFF               	movlw	255
 20200  0001CE  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20201  0001D0  0101               	movlb	1	; () banked
 20202  0001D2  5171               	movf	_modeMenu& (0+255),w,b
 20203  0001D4  0100               	movlb	0	; () banked
 20204  0001D6  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20205  0001D8  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20206  0001DA  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20207  0001DC  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20208  0001DE  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20209  0001E0  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20210  0001E2  0101               	movlb	1	; () banked
 20211  0001E4  5173               	movf	(_modeMenu+2)& (0+255),w,b
 20212  0001E6  0100               	movlb	0	; () banked
 20213  0001E8  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20214  0001EA  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20215  0001EC  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20216  0001EE  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20217  0001F0  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20218  0001F2  0A80               	xorlw	128
 20219  0001F4  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20220  0001F6  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20221  0001F8  0A80               	xorlw	128
 20222  0001FA  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20223  0001FC  B0D8               	btfsc	status,0,c
 20224  0001FE  D002               	goto	l879
 20225                           
 20226                           ; BSR set to: 0
 20227                           ;encoder.c: 95: modeMenu.selector++;
 20228  000200  0101               	movlb	1	; () banked
 20229  000202  2B73               	incf	(_modeMenu+2)& (0+255),f,b
 20230  000204                     l879:
 20231                           
 20232                           ;encoder.c: 96: }
 20233                           ;encoder.c: 97: }
 20234                           ;encoder.c: 98: if (which_screen == TRIADS_MENU) {
 20235                           
 20236                           ; BSR set to: 1
 20237                           
 20238                           ; BSR set to: 1
 20239  000204  0E0A               	movlw	10
 20240  000206  184F               	xorwf	_which_screen,w,c
 20241  000208  A4D8               	btfss	status,2,c
 20242  00020A  D01F               	goto	l881
 20243                           
 20244                           ;encoder.c: 99: if(triadMenu.selector < (triadMenu.number - 1)){
 20245  00020C  0EFF               	movlw	255
 20246  00020E  0100               	movlb	0	; () banked
 20247  000210  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20248  000212  0EFF               	movlw	255
 20249  000214  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20250  000216  0101               	movlb	1	; () banked
 20251  000218  516E               	movf	_triadMenu& (0+255),w,b
 20252  00021A  0100               	movlb	0	; () banked
 20253  00021C  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20254  00021E  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20255  000220  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20256  000222  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20257  000224  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20258  000226  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20259  000228  0101               	movlb	1	; () banked
 20260  00022A  5170               	movf	(_triadMenu+2)& (0+255),w,b
 20261  00022C  0100               	movlb	0	; () banked
 20262  00022E  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20263  000230  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20264  000232  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20265  000234  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20266  000236  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20267  000238  0A80               	xorlw	128
 20268  00023A  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20269  00023C  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20270  00023E  0A80               	xorlw	128
 20271  000240  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20272  000242  B0D8               	btfsc	status,0,c
 20273  000244  D002               	goto	l881
 20274                           
 20275                           ; BSR set to: 0
 20276                           ;encoder.c: 100: triadMenu.selector++;
 20277  000246  0101               	movlb	1	; () banked
 20278  000248  2B70               	incf	(_triadMenu+2)& (0+255),f,b
 20279  00024A                     l881:
 20280                           
 20281                           ;encoder.c: 101: }
 20282                           ;encoder.c: 102: }
 20283                           ;encoder.c: 103: if (which_screen == SEVENTHS_MENU) {
 20284                           
 20285                           ; BSR set to: 1
 20286                           
 20287                           ; BSR set to: 1
 20288  00024A  0E0B               	movlw	11
 20289  00024C  184F               	xorwf	_which_screen,w,c
 20290  00024E  A4D8               	btfss	status,2,c
 20291  000250  D01F               	goto	l883
 20292                           
 20293                           ;encoder.c: 104: if(seventhMenu.selector < (seventhMenu.number - 1)){
 20294  000252  0EFF               	movlw	255
 20295  000254  0100               	movlb	0	; () banked
 20296  000256  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20297  000258  0EFF               	movlw	255
 20298  00025A  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20299  00025C  0101               	movlb	1	; () banked
 20300  00025E  516B               	movf	_seventhMenu& (0+255),w,b
 20301  000260  0100               	movlb	0	; () banked
 20302  000262  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20303  000264  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20304  000266  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20305  000268  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20306  00026A  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20307  00026C  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20308  00026E  0101               	movlb	1	; () banked
 20309  000270  516D               	movf	(_seventhMenu+2)& (0+255),w,b
 20310  000272  0100               	movlb	0	; () banked
 20311  000274  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20312  000276  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20313  000278  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20314  00027A  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20315  00027C  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20316  00027E  0A80               	xorlw	128
 20317  000280  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20318  000282  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20319  000284  0A80               	xorlw	128
 20320  000286  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20321  000288  B0D8               	btfsc	status,0,c
 20322  00028A  D002               	goto	l883
 20323                           
 20324                           ; BSR set to: 0
 20325                           ;encoder.c: 105: seventhMenu.selector++;
 20326  00028C  0101               	movlb	1	; () banked
 20327  00028E  2B6D               	incf	(_seventhMenu+2)& (0+255),f,b
 20328  000290                     l883:
 20329                           
 20330                           ;encoder.c: 106: }
 20331                           ;encoder.c: 107: }
 20332                           ;encoder.c: 108: if (which_screen == DRUMS_CC_TYPE_MENU) {
 20333                           
 20334                           ; BSR set to: 1
 20335                           
 20336                           ; BSR set to: 1
 20337  000290  0E0C               	movlw	12
 20338  000292  184F               	xorwf	_which_screen,w,c
 20339  000294  A4D8               	btfss	status,2,c
 20340  000296  D01F               	goto	l885
 20341                           
 20342                           ;encoder.c: 109: if(drumCCTypeMenu.selector < (drumCCTypeMenu.number - 1)){
 20343  000298  0EFF               	movlw	255
 20344  00029A  0100               	movlb	0	; () banked
 20345  00029C  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20346  00029E  0EFF               	movlw	255
 20347  0002A0  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20348  0002A2  0101               	movlb	1	; () banked
 20349  0002A4  5162               	movf	_drumCCTypeMenu& (0+255),w,b
 20350  0002A6  0100               	movlb	0	; () banked
 20351  0002A8  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20352  0002AA  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20353  0002AC  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20354  0002AE  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20355  0002B0  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20356  0002B2  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20357  0002B4  0101               	movlb	1	; () banked
 20358  0002B6  5164               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 20359  0002B8  0100               	movlb	0	; () banked
 20360  0002BA  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20361  0002BC  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20362  0002BE  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20363  0002C0  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20364  0002C2  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20365  0002C4  0A80               	xorlw	128
 20366  0002C6  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20367  0002C8  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20368  0002CA  0A80               	xorlw	128
 20369  0002CC  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20370  0002CE  B0D8               	btfsc	status,0,c
 20371  0002D0  D002               	goto	l885
 20372                           
 20373                           ; BSR set to: 0
 20374                           ;encoder.c: 110: drumCCTypeMenu.selector++;
 20375  0002D2  0101               	movlb	1	; () banked
 20376  0002D4  2B64               	incf	(_drumCCTypeMenu+2)& (0+255),f,b
 20377  0002D6                     l885:
 20378                           
 20379                           ;encoder.c: 111: }
 20380                           ;encoder.c: 112: }
 20381                           ;encoder.c: 114: if (which_screen == DRUMS_NN_MENU) {
 20382                           
 20383                           ; BSR set to: 1
 20384                           
 20385                           ; BSR set to: 1
 20386  0002D6  0E0D               	movlw	13
 20387  0002D8  184F               	xorwf	_which_screen,w,c
 20388  0002DA  A4D8               	btfss	status,2,c
 20389  0002DC  D01F               	goto	l887
 20390                           
 20391                           ;encoder.c: 115: if(drumNNMenu.selector < (drumNNMenu.number - 1)){
 20392  0002DE  0EFF               	movlw	255
 20393  0002E0  0100               	movlb	0	; () banked
 20394  0002E2  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20395  0002E4  0EFF               	movlw	255
 20396  0002E6  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20397  0002E8  0101               	movlb	1	; () banked
 20398  0002EA  515F               	movf	_drumNNMenu& (0+255),w,b
 20399  0002EC  0100               	movlb	0	; () banked
 20400  0002EE  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20401  0002F0  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20402  0002F2  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20403  0002F4  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20404  0002F6  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20405  0002F8  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20406  0002FA  0101               	movlb	1	; () banked
 20407  0002FC  5161               	movf	(_drumNNMenu+2)& (0+255),w,b
 20408  0002FE  0100               	movlb	0	; () banked
 20409  000300  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20410  000302  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20411  000304  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20412  000306  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20413  000308  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20414  00030A  0A80               	xorlw	128
 20415  00030C  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20416  00030E  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20417  000310  0A80               	xorlw	128
 20418  000312  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20419  000314  B0D8               	btfsc	status,0,c
 20420  000316  D002               	goto	l887
 20421                           
 20422                           ; BSR set to: 0
 20423                           ;encoder.c: 116: drumNNMenu.selector++;
 20424  000318  0101               	movlb	1	; () banked
 20425  00031A  2B61               	incf	(_drumNNMenu+2)& (0+255),f,b
 20426  00031C                     l887:
 20427                           
 20428                           ;encoder.c: 117: }
 20429                           ;encoder.c: 118: }
 20430                           ;encoder.c: 120: if (which_screen == DRUMS_CC_MENU) {
 20431                           
 20432                           ; BSR set to: 1
 20433                           
 20434                           ; BSR set to: 1
 20435  00031C  0E0E               	movlw	14
 20436  00031E  184F               	xorwf	_which_screen,w,c
 20437  000320  A4D8               	btfss	status,2,c
 20438  000322  D01F               	goto	l889
 20439                           
 20440                           ;encoder.c: 121: if(drumCCMenu.selector < (drumCCMenu.number - 1)){
 20441  000324  0EFF               	movlw	255
 20442  000326  0100               	movlb	0	; () banked
 20443  000328  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20444  00032A  0EFF               	movlw	255
 20445  00032C  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20446  00032E  0101               	movlb	1	; () banked
 20447  000330  515C               	movf	_drumCCMenu& (0+255),w,b
 20448  000332  0100               	movlb	0	; () banked
 20449  000334  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20450  000336  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20451  000338  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20452  00033A  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20453  00033C  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20454  00033E  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20455  000340  0101               	movlb	1	; () banked
 20456  000342  515E               	movf	(_drumCCMenu+2)& (0+255),w,b
 20457  000344  0100               	movlb	0	; () banked
 20458  000346  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20459  000348  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20460  00034A  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20461  00034C  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20462  00034E  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20463  000350  0A80               	xorlw	128
 20464  000352  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20465  000354  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20466  000356  0A80               	xorlw	128
 20467  000358  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20468  00035A  B0D8               	btfsc	status,0,c
 20469  00035C  D002               	goto	l889
 20470                           
 20471                           ; BSR set to: 0
 20472                           ;encoder.c: 122: drumCCMenu.selector++;
 20473  00035E  0101               	movlb	1	; () banked
 20474  000360  2B5E               	incf	(_drumCCMenu+2)& (0+255),f,b
 20475  000362                     l889:
 20476                           
 20477                           ;encoder.c: 123: }
 20478                           ;encoder.c: 124: }
 20479                           ;encoder.c: 126: if (which_screen == POTS_RES_MENU) {
 20480                           
 20481                           ; BSR set to: 1
 20482                           
 20483                           ; BSR set to: 1
 20484  000362  0E0F               	movlw	15
 20485  000364  184F               	xorwf	_which_screen,w,c
 20486  000366  A4D8               	btfss	status,2,c
 20487  000368  D01F               	goto	l891
 20488                           
 20489                           ;encoder.c: 127: if(potsResoMenu.selector < (potsResoMenu.number - 1)){
 20490  00036A  0EFF               	movlw	255
 20491  00036C  0100               	movlb	0	; () banked
 20492  00036E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20493  000370  0EFF               	movlw	255
 20494  000372  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20495  000374  0101               	movlb	1	; () banked
 20496  000376  5156               	movf	_potsResoMenu& (0+255),w,b
 20497  000378  0100               	movlb	0	; () banked
 20498  00037A  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20499  00037C  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20500  00037E  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20501  000380  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20502  000382  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20503  000384  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20504  000386  0101               	movlb	1	; () banked
 20505  000388  5158               	movf	(_potsResoMenu+2)& (0+255),w,b
 20506  00038A  0100               	movlb	0	; () banked
 20507  00038C  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20508  00038E  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20509  000390  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20510  000392  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20511  000394  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20512  000396  0A80               	xorlw	128
 20513  000398  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20514  00039A  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20515  00039C  0A80               	xorlw	128
 20516  00039E  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20517  0003A0  B0D8               	btfsc	status,0,c
 20518  0003A2  D002               	goto	l891
 20519                           
 20520                           ; BSR set to: 0
 20521                           ;encoder.c: 128: potsResoMenu.selector++;
 20522  0003A4  0101               	movlb	1	; () banked
 20523  0003A6  2B58               	incf	(_potsResoMenu+2)& (0+255),f,b
 20524  0003A8                     l891:
 20525                           
 20526                           ;encoder.c: 129: }
 20527                           ;encoder.c: 130: }
 20528                           ;encoder.c: 132: if (which_screen == ENCODER_POLARITY_MENU) {
 20529                           
 20530                           ; BSR set to: 1
 20531                           
 20532                           ; BSR set to: 1
 20533  0003A8  0E18               	movlw	24
 20534  0003AA  184F               	xorwf	_which_screen,w,c
 20535  0003AC  A4D8               	btfss	status,2,c
 20536  0003AE  D006               	goto	l893
 20537                           
 20538                           ;encoder.c: 136: if(encoderPolarityMenu.selector == 0){
 20539  0003B0  0101               	movlb	1	; () banked
 20540  0003B2  513A               	movf	(_encoderPolarityMenu+2)& (0+255),w,b
 20541  0003B4  A4D8               	btfss	status,2,c
 20542  0003B6  D002               	goto	l893
 20543                           
 20544                           ; BSR set to: 1
 20545                           ;encoder.c: 137: encoderPolarityMenu.selector = 1;
 20546  0003B8  0E01               	movlw	1
 20547  0003BA  6F3A               	movwf	(_encoderPolarityMenu+2)& (0+255),b
 20548  0003BC                     l893:
 20549                           
 20550                           ;encoder.c: 138: }
 20551                           ;encoder.c: 139: }
 20552                           ;encoder.c: 141: if (which_screen == POTS_ALPHA_MENU) {
 20553                           
 20554                           ; BSR set to: 1
 20555                           
 20556                           ; BSR set to: 1
 20557  0003BC  0E10               	movlw	16
 20558  0003BE  184F               	xorwf	_which_screen,w,c
 20559  0003C0  A4D8               	btfss	status,2,c
 20560  0003C2  D006               	goto	l895
 20561                           
 20562                           ;encoder.c: 142: if(potsAlphaMenu.selector <= 85){
 20563  0003C4  0E56               	movlw	86
 20564  0003C6  0101               	movlb	1	; () banked
 20565  0003C8  6155               	cpfslt	(_potsAlphaMenu+2)& (0+255),b
 20566  0003CA  D002               	goto	l895
 20567                           
 20568                           ; BSR set to: 1
 20569                           ;encoder.c: 143: potsAlphaMenu.selector += 5;
 20570  0003CC  0E05               	movlw	5
 20571  0003CE  2755               	addwf	(_potsAlphaMenu+2)& (0+255),f,b
 20572  0003D0                     l895:
 20573                           
 20574                           ;encoder.c: 144: }
 20575                           ;encoder.c: 145: }
 20576                           ;encoder.c: 147: if (which_screen == POTS_CC_MENU) {
 20577                           
 20578                           ; BSR set to: 1
 20579  0003D0  0E11               	movlw	17
 20580  0003D2  184F               	xorwf	_which_screen,w,c
 20581  0003D4  A4D8               	btfss	status,2,c
 20582  0003D6  D01F               	goto	l897
 20583                           
 20584                           ;encoder.c: 148: if(potsCCMenu.selector < (potsCCMenu.number - 1)){
 20585  0003D8  0EFF               	movlw	255
 20586  0003DA  0100               	movlb	0	; () banked
 20587  0003DC  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20588  0003DE  0EFF               	movlw	255
 20589  0003E0  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20590  0003E2  0101               	movlb	1	; () banked
 20591  0003E4  5150               	movf	_potsCCMenu& (0+255),w,b
 20592  0003E6  0100               	movlb	0	; () banked
 20593  0003E8  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20594  0003EA  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20595  0003EC  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20596  0003EE  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20597  0003F0  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20598  0003F2  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20599  0003F4  0101               	movlb	1	; () banked
 20600  0003F6  5152               	movf	(_potsCCMenu+2)& (0+255),w,b
 20601  0003F8  0100               	movlb	0	; () banked
 20602  0003FA  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20603  0003FC  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20604  0003FE  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20605  000400  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20606  000402  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20607  000404  0A80               	xorlw	128
 20608  000406  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20609  000408  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20610  00040A  0A80               	xorlw	128
 20611  00040C  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20612  00040E  B0D8               	btfsc	status,0,c
 20613  000410  D002               	goto	l897
 20614                           
 20615                           ; BSR set to: 0
 20616                           ;encoder.c: 149: potsCCMenu.selector++;
 20617  000412  0101               	movlb	1	; () banked
 20618  000414  2B52               	incf	(_potsCCMenu+2)& (0+255),f,b
 20619  000416                     l897:
 20620                           
 20621                           ;encoder.c: 150: }
 20622                           ;encoder.c: 151: }
 20623                           ;encoder.c: 153: if (which_screen == SLIDEPOTS_CC_MENU) {
 20624                           
 20625                           ; BSR set to: 1
 20626                           
 20627                           ; BSR set to: 1
 20628  000416  0E12               	movlw	18
 20629  000418  184F               	xorwf	_which_screen,w,c
 20630  00041A  A4D8               	btfss	status,2,c
 20631  00041C  D01F               	goto	l899
 20632                           
 20633                           ;encoder.c: 154: if(slidepotsCCMenu.selector < (slidepotsCCMenu.number - 1)){
 20634  00041E  0EFF               	movlw	255
 20635  000420  0100               	movlb	0	; () banked
 20636  000422  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20637  000424  0EFF               	movlw	255
 20638  000426  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20639  000428  0101               	movlb	1	; () banked
 20640  00042A  514D               	movf	_slidepotsCCMenu& (0+255),w,b
 20641  00042C  0100               	movlb	0	; () banked
 20642  00042E  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20643  000430  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20644  000432  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20645  000434  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20646  000436  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20647  000438  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20648  00043A  0101               	movlb	1	; () banked
 20649  00043C  514F               	movf	(_slidepotsCCMenu+2)& (0+255),w,b
 20650  00043E  0100               	movlb	0	; () banked
 20651  000440  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20652  000442  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20653  000444  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20654  000446  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20655  000448  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20656  00044A  0A80               	xorlw	128
 20657  00044C  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20658  00044E  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20659  000450  0A80               	xorlw	128
 20660  000452  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20661  000454  B0D8               	btfsc	status,0,c
 20662  000456  D002               	goto	l899
 20663                           
 20664                           ; BSR set to: 0
 20665                           ;encoder.c: 155: slidepotsCCMenu.selector++;
 20666  000458  0101               	movlb	1	; () banked
 20667  00045A  2B4F               	incf	(_slidepotsCCMenu+2)& (0+255),f,b
 20668  00045C                     l899:
 20669                           
 20670                           ;encoder.c: 156: }
 20671                           ;encoder.c: 157: }
 20672                           ;encoder.c: 159: if (which_screen == PROGRAM_CHANGE_MENU) {
 20673                           
 20674                           ; BSR set to: 1
 20675                           
 20676                           ; BSR set to: 1
 20677  00045C  0E08               	movlw	8
 20678  00045E  184F               	xorwf	_which_screen,w,c
 20679  000460  A4D8               	btfss	status,2,c
 20680  000462  D005               	goto	l901
 20681                           
 20682                           ;encoder.c: 160: if(programChangeMenu.selector < 127){
 20683  000464  0E7F               	movlw	127
 20684  000466  0101               	movlb	1	; () banked
 20685  000468  6146               	cpfslt	(_programChangeMenu+2)& (0+255),b
 20686  00046A  D001               	goto	l901
 20687                           
 20688                           ; BSR set to: 1
 20689                           ;encoder.c: 161: programChangeMenu.selector++;
 20690  00046C  2B46               	incf	(_programChangeMenu+2)& (0+255),f,b
 20691  00046E                     l901:
 20692                           
 20693                           ;encoder.c: 162: }
 20694                           ;encoder.c: 163: }
 20695                           ;encoder.c: 165: if (which_screen == MAIN_CH_MENU) {
 20696                           
 20697                           ; BSR set to: 1
 20698                           
 20699                           ; BSR set to: 1
 20700  00046E  0E14               	movlw	20
 20701  000470  184F               	xorwf	_which_screen,w,c
 20702  000472  A4D8               	btfss	status,2,c
 20703  000474  D005               	goto	l903
 20704                           
 20705                           ;encoder.c: 166: if(mainChannelMenu.selector < 15){
 20706  000476  0E0F               	movlw	15
 20707  000478  0101               	movlb	1	; () banked
 20708  00047A  6143               	cpfslt	(_mainChannelMenu+2)& (0+255),b
 20709  00047C  D001               	goto	l903
 20710                           
 20711                           ; BSR set to: 1
 20712                           ;encoder.c: 167: mainChannelMenu.selector++;
 20713  00047E  2B43               	incf	(_mainChannelMenu+2)& (0+255),f,b
 20714  000480                     l903:
 20715                           
 20716                           ;encoder.c: 168: }
 20717                           ;encoder.c: 169: }
 20718                           ;encoder.c: 171: if (which_screen == DRUM_CH_MENU) {
 20719                           
 20720                           ; BSR set to: 1
 20721                           
 20722                           ; BSR set to: 1
 20723  000480  0E15               	movlw	21
 20724  000482  184F               	xorwf	_which_screen,w,c
 20725  000484  A4D8               	btfss	status,2,c
 20726  000486  D005               	goto	l905
 20727                           
 20728                           ;encoder.c: 172: if(drumChannelMenu.selector < 15){
 20729  000488  0E0F               	movlw	15
 20730  00048A  0101               	movlb	1	; () banked
 20731  00048C  6140               	cpfslt	(_drumChannelMenu+2)& (0+255),b
 20732  00048E  D001               	goto	l905
 20733                           
 20734                           ; BSR set to: 1
 20735                           ;encoder.c: 173: drumChannelMenu.selector++;
 20736  000490  2B40               	incf	(_drumChannelMenu+2)& (0+255),f,b
 20737  000492                     l905:
 20738                           
 20739                           ;encoder.c: 174: }
 20740                           ;encoder.c: 175: }
 20741                           ;encoder.c: 176: if (which_screen == JOYSTICK_CC_MENU) {
 20742                           
 20743                           ; BSR set to: 1
 20744                           
 20745                           ; BSR set to: 1
 20746  000492  0E13               	movlw	19
 20747  000494  184F               	xorwf	_which_screen,w,c
 20748  000496  A4D8               	btfss	status,2,c
 20749  000498  D01F               	goto	l907
 20750                           
 20751                           ;encoder.c: 177: if(joystickCCMenu.selector < (joystickCCMenu.number - 1)){
 20752  00049A  0EFF               	movlw	255
 20753  00049C  0100               	movlb	0	; () banked
 20754  00049E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20755  0004A0  0EFF               	movlw	255
 20756  0004A2  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20757  0004A4  0101               	movlb	1	; () banked
 20758  0004A6  514A               	movf	_joystickCCMenu& (0+255),w,b
 20759  0004A8  0100               	movlb	0	; () banked
 20760  0004AA  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20761  0004AC  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20762  0004AE  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20763  0004B0  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20764  0004B2  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20765  0004B4  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20766  0004B6  0101               	movlb	1	; () banked
 20767  0004B8  514C               	movf	(_joystickCCMenu+2)& (0+255),w,b
 20768  0004BA  0100               	movlb	0	; () banked
 20769  0004BC  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20770  0004BE  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20771  0004C0  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20772  0004C2  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20773  0004C4  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20774  0004C6  0A80               	xorlw	128
 20775  0004C8  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20776  0004CA  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20777  0004CC  0A80               	xorlw	128
 20778  0004CE  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20779  0004D0  B0D8               	btfsc	status,0,c
 20780  0004D2  D002               	goto	l907
 20781                           
 20782                           ; BSR set to: 0
 20783                           ;encoder.c: 178: joystickCCMenu.selector++;
 20784  0004D4  0101               	movlb	1	; () banked
 20785  0004D6  2B4C               	incf	(_joystickCCMenu+2)& (0+255),f,b
 20786  0004D8                     l907:
 20787                           
 20788                           ;encoder.c: 179: }
 20789                           ;encoder.c: 180: }
 20790                           ;encoder.c: 181: if (which_screen == EEPROM_MENU) {
 20791                           
 20792                           ; BSR set to: 1
 20793                           
 20794                           ; BSR set to: 1
 20795  0004D8  0E16               	movlw	22
 20796  0004DA  184F               	xorwf	_which_screen,w,c
 20797  0004DC  A4D8               	btfss	status,2,c
 20798  0004DE  D01F               	goto	l909
 20799                           
 20800                           ;encoder.c: 182: if(eepromMenu.selector < (eepromMenu.number - 1)){
 20801  0004E0  0EFF               	movlw	255
 20802  0004E2  0100               	movlb	0	; () banked
 20803  0004E4  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20804  0004E6  0EFF               	movlw	255
 20805  0004E8  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20806  0004EA  0101               	movlb	1	; () banked
 20807  0004EC  513B               	movf	_eepromMenu& (0+255),w,b
 20808  0004EE  0100               	movlb	0	; () banked
 20809  0004F0  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20810  0004F2  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20811  0004F4  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20812  0004F6  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20813  0004F8  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20814  0004FA  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20815  0004FC  0101               	movlb	1	; () banked
 20816  0004FE  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 20817  000500  0100               	movlb	0	; () banked
 20818  000502  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20819  000504  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20820  000506  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20821  000508  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20822  00050A  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20823  00050C  0A80               	xorlw	128
 20824  00050E  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20825  000510  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20826  000512  0A80               	xorlw	128
 20827  000514  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20828  000516  B0D8               	btfsc	status,0,c
 20829  000518  D002               	goto	l909
 20830                           
 20831                           ; BSR set to: 0
 20832                           ;encoder.c: 183: eepromMenu.selector++;
 20833  00051A  0101               	movlb	1	; () banked
 20834  00051C  2B3D               	incf	(_eepromMenu+2)& (0+255),f,b
 20835  00051E                     l909:
 20836                           
 20837                           ;encoder.c: 184: }
 20838                           ;encoder.c: 185: }
 20839                           ;encoder.c: 186: if (which_screen == SAVES_MENU) {
 20840                           
 20841                           ; BSR set to: 1
 20842                           
 20843                           ; BSR set to: 1
 20844  00051E  0E17               	movlw	23
 20845  000520  184F               	xorwf	_which_screen,w,c
 20846  000522  A4D8               	btfss	status,2,c
 20847  000524  D019               	goto	l911
 20848                           
 20849                           ;encoder.c: 187: if(savesMenu.selector < (savesMenu.number - 1)){
 20850  000526  0EFF               	movlw	255
 20851  000528  0100               	movlb	0	; () banked
 20852  00052A  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20853  00052C  0EFF               	movlw	255
 20854  00052E  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20855  000530  51E2               	movf	_savesMenu& (0+255),w,b
 20856  000532  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20857  000534  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20858  000536  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20859  000538  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20860  00053A  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20861  00053C  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20862  00053E  51E4               	movf	(_savesMenu+2)& (0+255),w,b
 20863  000540  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20864  000542  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20865  000544  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20866  000546  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20867  000548  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20868  00054A  0A80               	xorlw	128
 20869  00054C  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20870  00054E  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20871  000550  0A80               	xorlw	128
 20872  000552  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20873  000554  A0D8               	btfss	status,0,c
 20874                           
 20875                           ; BSR set to: 0
 20876                           ;encoder.c: 188: savesMenu.selector++;
 20877  000556  2BE4               	incf	(_savesMenu+2)& (0+255),f,b
 20878  000558                     l911:
 20879                           
 20880                           ;encoder.c: 189: }
 20881                           ;encoder.c: 190: }
 20882                           ;encoder.c: 192: if (which_screen == ARPEGGIATOR_MENU) {
 20883                           
 20884                           ; BSR set to: 0
 20885                           
 20886                           ; BSR set to: 0
 20887  000558  0E19               	movlw	25
 20888  00055A  184F               	xorwf	_which_screen,w,c
 20889  00055C  A4D8               	btfss	status,2,c
 20890  00055E  D019               	goto	l913
 20891                           
 20892                           ;encoder.c: 193: if(arpeggiatorMenu.selector < (arpeggiatorMenu.number - 1)){
 20893  000560  0EFF               	movlw	255
 20894  000562  0100               	movlb	0	; () banked
 20895  000564  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20896  000566  0EFF               	movlw	255
 20897  000568  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20898  00056A  51DF               	movf	_arpeggiatorMenu& (0+255),w,b
 20899  00056C  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20900  00056E  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20901  000570  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20902  000572  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20903  000574  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20904  000576  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20905  000578  51E1               	movf	(_arpeggiatorMenu+2)& (0+255),w,b
 20906  00057A  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20907  00057C  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20908  00057E  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20909  000580  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20910  000582  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20911  000584  0A80               	xorlw	128
 20912  000586  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20913  000588  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20914  00058A  0A80               	xorlw	128
 20915  00058C  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20916  00058E  A0D8               	btfss	status,0,c
 20917                           
 20918                           ; BSR set to: 0
 20919                           ;encoder.c: 194: arpeggiatorMenu.selector++;
 20920  000590  2BE1               	incf	(_arpeggiatorMenu+2)& (0+255),f,b
 20921  000592                     l913:
 20922                           
 20923                           ;encoder.c: 195: }
 20924                           ;encoder.c: 196: }
 20925                           ;encoder.c: 198: if (which_screen == ARPEGGIATOR_ON_OFF_MENU) {
 20926                           
 20927                           ; BSR set to: 0
 20928                           
 20929                           ; BSR set to: 0
 20930  000592  0E1A               	movlw	26
 20931  000594  184F               	xorwf	_which_screen,w,c
 20932  000596  A4D8               	btfss	status,2,c
 20933  000598  D003               	goto	l914
 20934                           
 20935                           ;encoder.c: 199: arpeggiatorOnOffMenu.selector ^= 1;
 20936  00059A  0E01               	movlw	1
 20937  00059C  0101               	movlb	1	; () banked
 20938  00059E  1B37               	xorwf	(_arpeggiatorOnOffMenu+2)& (0+255),f,b
 20939  0005A0                     l914:
 20940                           
 20941                           ;encoder.c: 203: }
 20942                           ;encoder.c: 204: if (which_screen == ARPEGGIATOR_TEMPO_MENU) {
 20943  0005A0  0E1B               	movlw	27
 20944  0005A2  184F               	xorwf	_which_screen,w,c
 20945  0005A4  A4D8               	btfss	status,2,c
 20946  0005A6  D005               	goto	l916
 20947                           
 20948                           ;encoder.c: 205: if(arpeggiatorTempoMenu.selector < 250){
 20949  0005A8  0EFA               	movlw	250
 20950  0005AA  0101               	movlb	1	; () banked
 20951  0005AC  6134               	cpfslt	(_arpeggiatorTempoMenu+2)& (0+255),b
 20952  0005AE  D001               	goto	l916
 20953                           
 20954                           ; BSR set to: 1
 20955                           ;encoder.c: 206: arpeggiatorTempoMenu.selector++;
 20956  0005B0  2B34               	incf	(_arpeggiatorTempoMenu+2)& (0+255),f,b
 20957  0005B2                     l916:
 20958                           
 20959                           ;encoder.c: 207: }
 20960                           ;encoder.c: 208: }
 20961                           ;encoder.c: 209: if (which_screen == ARPEGGIATOR_OCTAVES_MENU) {
 20962                           
 20963                           ; BSR set to: 1
 20964                           
 20965                           ; BSR set to: 1
 20966  0005B2  0E1C               	movlw	28
 20967  0005B4  184F               	xorwf	_which_screen,w,c
 20968  0005B6  A4D8               	btfss	status,2,c
 20969  0005B8  D005               	goto	l918
 20970                           
 20971                           ;encoder.c: 210: if(arpeggiatorOctavesMenu.selector < 4){
 20972  0005BA  0E04               	movlw	4
 20973  0005BC  0101               	movlb	1	; () banked
 20974  0005BE  6131               	cpfslt	(_arpeggiatorOctavesMenu+2)& (0+255),b
 20975  0005C0  D001               	goto	l918
 20976                           
 20977                           ; BSR set to: 1
 20978                           ;encoder.c: 211: arpeggiatorOctavesMenu.selector++;
 20979  0005C2  2B31               	incf	(_arpeggiatorOctavesMenu+2)& (0+255),f,b
 20980  0005C4                     l918:
 20981                           
 20982                           ;encoder.c: 212: }
 20983                           ;encoder.c: 213: }
 20984                           ;encoder.c: 214: if (which_screen == ARPEGGIATOR_ARPEGGIO_TYPE_MENU) {
 20985                           
 20986                           ; BSR set to: 1
 20987                           
 20988                           ; BSR set to: 1
 20989  0005C4  0E1D               	movlw	29
 20990  0005C6  184F               	xorwf	_which_screen,w,c
 20991  0005C8  A4D8               	btfss	status,2,c
 20992  0005CA  D01F               	goto	l920
 20993                           
 20994                           ;encoder.c: 215: if(arpeggiatorTypeMenu.selector < (arpeggiatorTypeMenu.number - 1)){
 20995  0005CC  0EFF               	movlw	255
 20996  0005CE  0100               	movlb	0	; () banked
 20997  0005D0  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20998  0005D2  0EFF               	movlw	255
 20999  0005D4  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21000  0005D6  0101               	movlb	1	; () banked
 21001  0005D8  512C               	movf	_arpeggiatorTypeMenu& (0+255),w,b
 21002  0005DA  0100               	movlb	0	; () banked
 21003  0005DC  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21004  0005DE  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21005  0005E0  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21006  0005E2  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21007  0005E4  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21008  0005E6  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21009  0005E8  0101               	movlb	1	; () banked
 21010  0005EA  512E               	movf	(_arpeggiatorTypeMenu+2)& (0+255),w,b
 21011  0005EC  0100               	movlb	0	; () banked
 21012  0005EE  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21013  0005F0  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21014  0005F2  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21015  0005F4  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21016  0005F6  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21017  0005F8  0A80               	xorlw	128
 21018  0005FA  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21019  0005FC  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21020  0005FE  0A80               	xorlw	128
 21021  000600  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21022  000602  B0D8               	btfsc	status,0,c
 21023  000604  D002               	goto	l920
 21024                           
 21025                           ; BSR set to: 0
 21026                           ;encoder.c: 216: arpeggiatorTypeMenu.selector++;
 21027  000606  0101               	movlb	1	; () banked
 21028  000608  2B2E               	incf	(_arpeggiatorTypeMenu+2)& (0+255),f,b
 21029  00060A                     l920:
 21030                           
 21031                           ;encoder.c: 217: }
 21032                           ;encoder.c: 218: }
 21033                           ;encoder.c: 219: if (which_screen == ARPEGGIATOR_NOTE_LENGTH_MENU) {
 21034                           
 21035                           ; BSR set to: 1
 21036                           
 21037                           ; BSR set to: 1
 21038  00060A  0E1E               	movlw	30
 21039  00060C  184F               	xorwf	_which_screen,w,c
 21040  00060E  A4D8               	btfss	status,2,c
 21041  000610  D01F               	goto	l922
 21042                           
 21043                           ;encoder.c: 220: if(arpeggiatorNoteLengthMenu.selector < (arpeggiatorNoteLengthMenu.numb
      +                          er - 1)){
 21044  000612  0EFF               	movlw	255
 21045  000614  0100               	movlb	0	; () banked
 21046  000616  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21047  000618  0EFF               	movlw	255
 21048  00061A  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21049  00061C  0101               	movlb	1	; () banked
 21050  00061E  5129               	movf	_arpeggiatorNoteLengthMenu& (0+255),w,b
 21051  000620  0100               	movlb	0	; () banked
 21052  000622  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21053  000624  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21054  000626  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21055  000628  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21056  00062A  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21057  00062C  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21058  00062E  0101               	movlb	1	; () banked
 21059  000630  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 21060  000632  0100               	movlb	0	; () banked
 21061  000634  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21062  000636  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21063  000638  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21064  00063A  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21065  00063C  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21066  00063E  0A80               	xorlw	128
 21067  000640  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21068  000642  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21069  000644  0A80               	xorlw	128
 21070  000646  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21071  000648  B0D8               	btfsc	status,0,c
 21072  00064A  D002               	goto	l922
 21073                           
 21074                           ; BSR set to: 0
 21075                           ;encoder.c: 221: arpeggiatorNoteLengthMenu.selector++;
 21076  00064C  0101               	movlb	1	; () banked
 21077  00064E  2B2B               	incf	(_arpeggiatorNoteLengthMenu+2)& (0+255),f,b
 21078  000650                     l922:
 21079                           
 21080                           ;encoder.c: 222: }
 21081                           ;encoder.c: 223: }
 21082                           ;encoder.c: 224: if (which_screen == ARPEGGIATOR_LATCH_MENU) {
 21083                           
 21084                           ; BSR set to: 1
 21085                           
 21086                           ; BSR set to: 1
 21087  000650  0E1F               	movlw	31
 21088  000652  184F               	xorwf	_which_screen,w,c
 21089  000654  A4D8               	btfss	status,2,c
 21090  000656  D01F               	goto	l924
 21091                           
 21092                           ;encoder.c: 226: if(arpeggiatorLatchMenu.selector < (arpeggiatorLatchMenu.number - 1)){
 21093  000658  0EFF               	movlw	255
 21094  00065A  0100               	movlb	0	; () banked
 21095  00065C  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21096  00065E  0EFF               	movlw	255
 21097  000660  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21098  000662  0101               	movlb	1	; () banked
 21099  000664  5126               	movf	_arpeggiatorLatchMenu& (0+255),w,b
 21100  000666  0100               	movlb	0	; () banked
 21101  000668  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21102  00066A  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21103  00066C  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21104  00066E  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21105  000670  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21106  000672  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21107  000674  0101               	movlb	1	; () banked
 21108  000676  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 21109  000678  0100               	movlb	0	; () banked
 21110  00067A  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21111  00067C  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21112  00067E  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21113  000680  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21114  000682  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21115  000684  0A80               	xorlw	128
 21116  000686  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21117  000688  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21118  00068A  0A80               	xorlw	128
 21119  00068C  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21120  00068E  B0D8               	btfsc	status,0,c
 21121  000690  D002               	goto	l924
 21122                           
 21123                           ; BSR set to: 0
 21124                           ;encoder.c: 227: arpeggiatorLatchMenu.selector++;
 21125  000692  0101               	movlb	1	; () banked
 21126  000694  2B28               	incf	(_arpeggiatorLatchMenu+2)& (0+255),f,b
 21127  000696                     l924:
 21128                           
 21129                           ;encoder.c: 228: }
 21130                           ;encoder.c: 229: }
 21131                           ;encoder.c: 230: if (which_screen == ARPEGGIATOR_LATCH_ON_OFF_MENU) {
 21132                           
 21133                           ; BSR set to: 1
 21134                           
 21135                           ; BSR set to: 1
 21136  000696  0E20               	movlw	32
 21137  000698  184F               	xorwf	_which_screen,w,c
 21138  00069A  A4D8               	btfss	status,2,c
 21139  00069C  D003               	goto	l925
 21140                           
 21141                           ;encoder.c: 231: arpeggiatorLatchOnOffMenu.selector ^= 1;
 21142  00069E  0E01               	movlw	1
 21143  0006A0  0101               	movlb	1	; () banked
 21144  0006A2  1B25               	xorwf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),f,b
 21145  0006A4                     l925:
 21146                           
 21147                           ;encoder.c: 232: }
 21148                           ;encoder.c: 233: if (which_screen == ARPEGGIATOR_AUTO_LATCH_ON_OFF_MENU) {
 21149  0006A4  0E21               	movlw	33
 21150  0006A6  184F               	xorwf	_which_screen,w,c
 21151  0006A8  A4D8               	btfss	status,2,c
 21152  0006AA  D003               	goto	l926
 21153                           
 21154                           ;encoder.c: 234: arpeggiatorAutoLatchOnOffMenu.selector ^= 1;
 21155  0006AC  0E01               	movlw	1
 21156  0006AE  0101               	movlb	1	; () banked
 21157  0006B0  1B22               	xorwf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),f,b
 21158  0006B2                     l926:
 21159                           
 21160                           ;encoder.c: 235: }
 21161                           ;encoder.c: 236: if (which_screen == ARPEGGIATOR_UN_LATCH_MODE_MENU) {
 21162  0006B2  0E22               	movlw	34
 21163  0006B4  184F               	xorwf	_which_screen,w,c
 21164  0006B6  A4D8               	btfss	status,2,c
 21165  0006B8  D003               	goto	l927
 21166                           
 21167                           ;encoder.c: 237: arpeggiatorUnLatchModeMenu.selector ^= 1;
 21168  0006BA  0E01               	movlw	1
 21169  0006BC  0101               	movlb	1	; () banked
 21170  0006BE  1B1F               	xorwf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),f,b
 21171  0006C0                     l927:
 21172                           
 21173                           ;encoder.c: 238: }
 21174                           ;encoder.c: 239: if (which_screen == ARPEGGIATOR_RANDOMIZE_SKIP_MENU) {
 21175  0006C0  0E23               	movlw	35
 21176  0006C2  184F               	xorwf	_which_screen,w,c
 21177  0006C4  A4D8               	btfss	status,2,c
 21178  0006C6  D01F               	goto	l929
 21179                           
 21180                           ;encoder.c: 240: if(arpeggiatorRandomizeSkipMenu.selector < (arpeggiatorRandomizeSkipMen
      +                          u.number - 1)){
 21181  0006C8  0EFF               	movlw	255
 21182  0006CA  0100               	movlb	0	; () banked
 21183  0006CC  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21184  0006CE  0EFF               	movlw	255
 21185  0006D0  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21186  0006D2  0101               	movlb	1	; () banked
 21187  0006D4  511A               	movf	_arpeggiatorRandomizeSkipMenu& (0+255),w,b
 21188  0006D6  0100               	movlb	0	; () banked
 21189  0006D8  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21190  0006DA  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21191  0006DC  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21192  0006DE  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21193  0006E0  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21194  0006E2  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21195  0006E4  0101               	movlb	1	; () banked
 21196  0006E6  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 21197  0006E8  0100               	movlb	0	; () banked
 21198  0006EA  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21199  0006EC  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21200  0006EE  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21201  0006F0  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21202  0006F2  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21203  0006F4  0A80               	xorlw	128
 21204  0006F6  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21205  0006F8  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21206  0006FA  0A80               	xorlw	128
 21207  0006FC  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21208  0006FE  B0D8               	btfsc	status,0,c
 21209  000700  D002               	goto	l929
 21210                           
 21211                           ; BSR set to: 0
 21212                           ;encoder.c: 241: arpeggiatorRandomizeSkipMenu.selector++;
 21213  000702  0101               	movlb	1	; () banked
 21214  000704  2B1C               	incf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),f,b
 21215  000706                     l929:
 21216                           
 21217                           ;encoder.c: 242: }
 21218                           ;encoder.c: 243: }
 21219                           ;encoder.c: 244: if (which_screen == ARPEGGIATOR_RANDOMIZE_TYPE_MENU) {
 21220                           
 21221                           ; BSR set to: 1
 21222                           
 21223                           ; BSR set to: 1
 21224  000706  0E24               	movlw	36
 21225  000708  184F               	xorwf	_which_screen,w,c
 21226  00070A  A4D8               	btfss	status,2,c
 21227  00070C  D003               	goto	l930
 21228                           
 21229                           ;encoder.c: 245: arpeggiatorRandomizeTypeMenu.selector ^= 1;
 21230  00070E  0E01               	movlw	1
 21231  000710  0101               	movlb	1	; () banked
 21232  000712  1B19               	xorwf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),f,b
 21233  000714                     l930:
 21234                           
 21235                           ;encoder.c: 249: }
 21236                           ;encoder.c: 250: if (which_screen == ARPEGGIATOR_SKIP_FIRST_LAST_MENU) {
 21237  000714  0E25               	movlw	37
 21238  000716  184F               	xorwf	_which_screen,w,c
 21239  000718  A4D8               	btfss	status,2,c
 21240  00071A  D003               	goto	l931
 21241                           
 21242                           ;encoder.c: 251: arpeggiatorSkipFirstLastMenu.selector ^= 1;
 21243  00071C  0E01               	movlw	1
 21244  00071E  0101               	movlb	1	; () banked
 21245  000720  1B16               	xorwf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),f,b
 21246  000722                     l931:
 21247                           
 21248                           ;encoder.c: 252: }
 21249                           ;encoder.c: 253: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_MENU) {
 21250  000722  0E26               	movlw	38
 21251  000724  184F               	xorwf	_which_screen,w,c
 21252  000726  A4D8               	btfss	status,2,c
 21253  000728  D019               	goto	l933
 21254                           
 21255                           ;encoder.c: 254: if(arpeggiatorLastNoteModeMenu.selector < (arpeggiatorLastNoteModeMenu.
      +                          number - 1)){
 21256  00072A  0EFF               	movlw	255
 21257  00072C  0100               	movlb	0	; () banked
 21258  00072E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21259  000730  0EFF               	movlw	255
 21260  000732  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21261  000734  51DC               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
 21262  000736  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21263  000738  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21264  00073A  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21265  00073C  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21266  00073E  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21267  000740  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21268  000742  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 21269  000744  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21270  000746  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21271  000748  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21272  00074A  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21273  00074C  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21274  00074E  0A80               	xorlw	128
 21275  000750  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21276  000752  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21277  000754  0A80               	xorlw	128
 21278  000756  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21279  000758  A0D8               	btfss	status,0,c
 21280                           
 21281                           ; BSR set to: 0
 21282                           ;encoder.c: 255: arpeggiatorLastNoteModeMenu.selector++;
 21283  00075A  2BDE               	incf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),f,b
 21284  00075C                     l933:
 21285                           
 21286                           ;encoder.c: 256: }
 21287                           ;encoder.c: 257: }
 21288                           ;encoder.c: 258: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_PRESS_MENU) {
 21289                           
 21290                           ; BSR set to: 0
 21291                           
 21292                           ; BSR set to: 0
 21293  00075C  0E27               	movlw	39
 21294  00075E  184F               	xorwf	_which_screen,w,c
 21295  000760  A4D8               	btfss	status,2,c
 21296  000762  D003               	goto	l934
 21297                           
 21298                           ;encoder.c: 259: arpeggiatorLastNoteModeKeyPressMenu.selector ^= 1;
 21299  000764  0E01               	movlw	1
 21300  000766  0101               	movlb	1	; () banked
 21301  000768  1B13               	xorwf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),f,b
 21302  00076A                     l934:
 21303                           
 21304                           ;encoder.c: 260: }
 21305                           ;encoder.c: 261: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_RELEASE_MENU) {
 21306  00076A  0E28               	movlw	40
 21307  00076C  184F               	xorwf	_which_screen,w,c
 21308  00076E  A4D8               	btfss	status,2,c
 21309  000770  D003               	goto	l935
 21310                           
 21311                           ;encoder.c: 262: arpeggiatorLastNoteModeKeyReleaseMenu.selector ^= 1;
 21312  000772  0E01               	movlw	1
 21313  000774  0101               	movlb	1	; () banked
 21314  000776  1B10               	xorwf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),f,b
 21315  000778                     l935:
 21316                           
 21317                           ;encoder.c: 263: }
 21318                           ;encoder.c: 264: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU) {
 21319  000778  0E29               	movlw	41
 21320  00077A  184F               	xorwf	_which_screen,w,c
 21321  00077C  A4D8               	btfss	status,2,c
 21322  00077E  D003               	goto	l936
 21323                           
 21324                           ;encoder.c: 265: arpeggiatorLastNoteModeTransposeMenu.selector ^= 1;
 21325  000780  0E01               	movlw	1
 21326  000782  0101               	movlb	1	; () banked
 21327  000784  1B0D               	xorwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),f,b
 21328  000786                     l936:
 21329                           
 21330                           ;encoder.c: 266: }
 21331                           ;encoder.c: 267: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_RESET_MENU) {
 21332  000786  0E2A               	movlw	42
 21333  000788  184F               	xorwf	_which_screen,w,c
 21334  00078A  A4D8               	btfss	status,2,c
 21335  00078C  D003               	goto	l937
 21336                           
 21337                           ;encoder.c: 268: arpeggiatorLastNoteModeResetMenu.selector ^= 1;
 21338  00078E  0E01               	movlw	1
 21339  000790  0101               	movlb	1	; () banked
 21340  000792  1B0A               	xorwf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),f,b
 21341  000794                     l937:
 21342                           
 21343                           ;encoder.c: 269: }
 21344                           ;encoder.c: 270: }
 21345                           ;encoder.c: 273: if (encoder_direction == 0x20) {
 21346                           
 21347                           ; BSR set to: 1
 21348  000794  0E20               	movlw	32
 21349  000796  1836               	xorwf	_encoder_direction,w,c
 21350  000798  A4D8               	btfss	status,2,c
 21351  00079A  D147               	goto	l1011
 21352                           
 21353                           ;encoder.c: 275: lcd_print_once = 0;
 21354  00079C  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 21355                           
 21356                           ;encoder.c: 276: print_row_2_once = 0;
 21357  00079E  9C04               	bcf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 21358                           
 21359                           ;encoder.c: 279: if (which_screen == MAIN_MENU) {
 21360  0007A0  0E02               	movlw	2
 21361  0007A2  184F               	xorwf	_which_screen,w,c
 21362  0007A4  A4D8               	btfss	status,2,c
 21363  0007A6  D004               	goto	l940
 21364                           
 21365                           ;encoder.c: 280: if(mainMenu.selector > 0){
 21366  0007A8  0101               	movlb	1	; () banked
 21367  0007AA  5176               	movf	(_mainMenu+2)& (0+255),w,b
 21368  0007AC  A4D8               	btfss	status,2,c
 21369                           
 21370                           ; BSR set to: 1
 21371                           ;encoder.c: 281: mainMenu.selector--;
 21372  0007AE  0776               	decf	(_mainMenu+2)& (0+255),f,b
 21373  0007B0                     l940:
 21374                           
 21375                           ;encoder.c: 282: }
 21376                           ;encoder.c: 283: }
 21377                           ;encoder.c: 284: if (which_screen == KEYBOARD_MENU) {
 21378                           
 21379                           ; BSR set to: 1
 21380                           
 21381                           ; BSR set to: 1
 21382  0007B0  0E03               	movlw	3
 21383  0007B2  184F               	xorwf	_which_screen,w,c
 21384  0007B4  A4D8               	btfss	status,2,c
 21385  0007B6  D004               	goto	l942
 21386                           
 21387                           ;encoder.c: 285: if(keyboardMenu.selector > 0){
 21388  0007B8  0100               	movlb	0	; () banked
 21389  0007BA  51E7               	movf	(_keyboardMenu+2)& (0+255),w,b
 21390  0007BC  A4D8               	btfss	status,2,c
 21391                           
 21392                           ; BSR set to: 0
 21393                           ;encoder.c: 286: keyboardMenu.selector--;
 21394  0007BE  07E7               	decf	(_keyboardMenu+2)& (0+255),f,b
 21395  0007C0                     l942:
 21396                           
 21397                           ;encoder.c: 287: }
 21398                           ;encoder.c: 288: }
 21399                           ;encoder.c: 289: if (which_screen == TRANSPOSE_MENU) {
 21400                           
 21401                           ; BSR set to: 0
 21402                           
 21403                           ; BSR set to: 0
 21404  0007C0  0E04               	movlw	4
 21405  0007C2  184F               	xorwf	_which_screen,w,c
 21406  0007C4  A4D8               	btfss	status,2,c
 21407  0007C6  D004               	goto	l944
 21408                           
 21409                           ;encoder.c: 290: if(transposeMenu.selector > 0){
 21410  0007C8  0101               	movlb	1	; () banked
 21411  0007CA  516A               	movf	(_transposeMenu+2)& (0+255),w,b
 21412  0007CC  A4D8               	btfss	status,2,c
 21413                           
 21414                           ; BSR set to: 1
 21415                           ;encoder.c: 291: transposeMenu.selector--;
 21416  0007CE  076A               	decf	(_transposeMenu+2)& (0+255),f,b
 21417  0007D0                     l944:
 21418                           
 21419                           ;encoder.c: 292: }
 21420                           ;encoder.c: 293: }
 21421                           ;encoder.c: 294: if (which_screen == DRUM_MENU) {
 21422                           
 21423                           ; BSR set to: 1
 21424                           
 21425                           ; BSR set to: 1
 21426  0007D0  0E05               	movlw	5
 21427  0007D2  184F               	xorwf	_which_screen,w,c
 21428  0007D4  A4D8               	btfss	status,2,c
 21429  0007D6  D004               	goto	l946
 21430                           
 21431                           ;encoder.c: 295: if(drumMenu.selector > 0){
 21432  0007D8  0101               	movlb	1	; () banked
 21433  0007DA  5167               	movf	(_drumMenu+2)& (0+255),w,b
 21434  0007DC  A4D8               	btfss	status,2,c
 21435                           
 21436                           ; BSR set to: 1
 21437                           ;encoder.c: 296: drumMenu.selector--;
 21438  0007DE  0767               	decf	(_drumMenu+2)& (0+255),f,b
 21439  0007E0                     l946:
 21440                           
 21441                           ;encoder.c: 297: }
 21442                           ;encoder.c: 298: }
 21443                           ;encoder.c: 299: if (which_screen == POTENTIOMETER_MENU) {
 21444                           
 21445                           ; BSR set to: 1
 21446                           
 21447                           ; BSR set to: 1
 21448  0007E0  0E06               	movlw	6
 21449  0007E2  184F               	xorwf	_which_screen,w,c
 21450  0007E4  A4D8               	btfss	status,2,c
 21451  0007E6  D004               	goto	l948
 21452                           
 21453                           ;encoder.c: 300: if(potsMenu.selector > 0){
 21454  0007E8  0101               	movlb	1	; () banked
 21455  0007EA  515B               	movf	(_potsMenu+2)& (0+255),w,b
 21456  0007EC  A4D8               	btfss	status,2,c
 21457                           
 21458                           ; BSR set to: 1
 21459                           ;encoder.c: 301: potsMenu.selector--;
 21460  0007EE  075B               	decf	(_potsMenu+2)& (0+255),f,b
 21461  0007F0                     l948:
 21462                           
 21463                           ;encoder.c: 302: }
 21464                           ;encoder.c: 303: }
 21465                           ;encoder.c: 304: if (which_screen == MIDI_CHANNEL_MENU) {
 21466                           
 21467                           ; BSR set to: 1
 21468                           
 21469                           ; BSR set to: 1
 21470  0007F0  0E07               	movlw	7
 21471  0007F2  184F               	xorwf	_which_screen,w,c
 21472  0007F4  A4D8               	btfss	status,2,c
 21473  0007F6  D004               	goto	l950
 21474                           
 21475                           ;encoder.c: 305: if(midiChannelMenu.selector > 0){
 21476  0007F8  0101               	movlb	1	; () banked
 21477  0007FA  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 21478  0007FC  A4D8               	btfss	status,2,c
 21479                           
 21480                           ; BSR set to: 1
 21481                           ;encoder.c: 306: midiChannelMenu.selector--;
 21482  0007FE  0749               	decf	(_midiChannelMenu+2)& (0+255),f,b
 21483  000800                     l950:
 21484                           
 21485                           ;encoder.c: 307: }
 21486                           ;encoder.c: 308: }
 21487                           ;encoder.c: 310: if (which_screen == MODES_MENU) {
 21488                           
 21489                           ; BSR set to: 1
 21490                           
 21491                           ; BSR set to: 1
 21492  000800  0E09               	movlw	9
 21493  000802  184F               	xorwf	_which_screen,w,c
 21494  000804  A4D8               	btfss	status,2,c
 21495  000806  D004               	goto	l952
 21496                           
 21497                           ;encoder.c: 311: if(modeMenu.selector > 0){
 21498  000808  0101               	movlb	1	; () banked
 21499  00080A  5173               	movf	(_modeMenu+2)& (0+255),w,b
 21500  00080C  A4D8               	btfss	status,2,c
 21501                           
 21502                           ; BSR set to: 1
 21503                           ;encoder.c: 312: modeMenu.selector--;
 21504  00080E  0773               	decf	(_modeMenu+2)& (0+255),f,b
 21505  000810                     l952:
 21506                           
 21507                           ;encoder.c: 313: }
 21508                           ;encoder.c: 314: }
 21509                           ;encoder.c: 316: if (which_screen == TRIADS_MENU) {
 21510                           
 21511                           ; BSR set to: 1
 21512                           
 21513                           ; BSR set to: 1
 21514  000810  0E0A               	movlw	10
 21515  000812  184F               	xorwf	_which_screen,w,c
 21516  000814  A4D8               	btfss	status,2,c
 21517  000816  D004               	goto	l954
 21518                           
 21519                           ;encoder.c: 317: if(triadMenu.selector > 0){
 21520  000818  0101               	movlb	1	; () banked
 21521  00081A  5170               	movf	(_triadMenu+2)& (0+255),w,b
 21522  00081C  A4D8               	btfss	status,2,c
 21523                           
 21524                           ; BSR set to: 1
 21525                           ;encoder.c: 318: triadMenu.selector--;
 21526  00081E  0770               	decf	(_triadMenu+2)& (0+255),f,b
 21527  000820                     l954:
 21528                           
 21529                           ;encoder.c: 319: }
 21530                           ;encoder.c: 320: }
 21531                           ;encoder.c: 321: if (which_screen == SEVENTHS_MENU) {
 21532                           
 21533                           ; BSR set to: 1
 21534                           
 21535                           ; BSR set to: 1
 21536  000820  0E0B               	movlw	11
 21537  000822  184F               	xorwf	_which_screen,w,c
 21538  000824  A4D8               	btfss	status,2,c
 21539  000826  D004               	goto	l956
 21540                           
 21541                           ;encoder.c: 322: if(seventhMenu.selector > 0){
 21542  000828  0101               	movlb	1	; () banked
 21543  00082A  516D               	movf	(_seventhMenu+2)& (0+255),w,b
 21544  00082C  A4D8               	btfss	status,2,c
 21545                           
 21546                           ; BSR set to: 1
 21547                           ;encoder.c: 323: seventhMenu.selector--;
 21548  00082E  076D               	decf	(_seventhMenu+2)& (0+255),f,b
 21549  000830                     l956:
 21550                           
 21551                           ;encoder.c: 324: }
 21552                           ;encoder.c: 325: }
 21553                           ;encoder.c: 326: if (which_screen == DRUMS_CC_TYPE_MENU) {
 21554                           
 21555                           ; BSR set to: 1
 21556                           
 21557                           ; BSR set to: 1
 21558  000830  0E0C               	movlw	12
 21559  000832  184F               	xorwf	_which_screen,w,c
 21560  000834  A4D8               	btfss	status,2,c
 21561  000836  D004               	goto	l958
 21562                           
 21563                           ;encoder.c: 327: if(drumCCTypeMenu.selector > 0){
 21564  000838  0101               	movlb	1	; () banked
 21565  00083A  5164               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 21566  00083C  A4D8               	btfss	status,2,c
 21567                           
 21568                           ; BSR set to: 1
 21569                           ;encoder.c: 328: drumCCTypeMenu.selector--;
 21570  00083E  0764               	decf	(_drumCCTypeMenu+2)& (0+255),f,b
 21571  000840                     l958:
 21572                           
 21573                           ;encoder.c: 329: }
 21574                           ;encoder.c: 330: }
 21575                           ;encoder.c: 332: if (which_screen == DRUMS_NN_MENU) {
 21576                           
 21577                           ; BSR set to: 1
 21578                           
 21579                           ; BSR set to: 1
 21580  000840  0E0D               	movlw	13
 21581  000842  184F               	xorwf	_which_screen,w,c
 21582  000844  A4D8               	btfss	status,2,c
 21583  000846  D004               	goto	l960
 21584                           
 21585                           ;encoder.c: 333: if(drumNNMenu.selector > 0){
 21586  000848  0101               	movlb	1	; () banked
 21587  00084A  5161               	movf	(_drumNNMenu+2)& (0+255),w,b
 21588  00084C  A4D8               	btfss	status,2,c
 21589                           
 21590                           ; BSR set to: 1
 21591                           ;encoder.c: 334: drumNNMenu.selector--;
 21592  00084E  0761               	decf	(_drumNNMenu+2)& (0+255),f,b
 21593  000850                     l960:
 21594                           
 21595                           ;encoder.c: 335: }
 21596                           ;encoder.c: 336: }
 21597                           ;encoder.c: 338: if (which_screen == DRUMS_CC_MENU) {
 21598                           
 21599                           ; BSR set to: 1
 21600                           
 21601                           ; BSR set to: 1
 21602  000850  0E0E               	movlw	14
 21603  000852  184F               	xorwf	_which_screen,w,c
 21604  000854  A4D8               	btfss	status,2,c
 21605  000856  D004               	goto	l962
 21606                           
 21607                           ;encoder.c: 339: if(drumCCMenu.selector > 0){
 21608  000858  0101               	movlb	1	; () banked
 21609  00085A  515E               	movf	(_drumCCMenu+2)& (0+255),w,b
 21610  00085C  A4D8               	btfss	status,2,c
 21611                           
 21612                           ; BSR set to: 1
 21613                           ;encoder.c: 340: drumCCMenu.selector--;
 21614  00085E  075E               	decf	(_drumCCMenu+2)& (0+255),f,b
 21615  000860                     l962:
 21616                           
 21617                           ;encoder.c: 341: }
 21618                           ;encoder.c: 342: }
 21619                           ;encoder.c: 344: if (which_screen == POTS_RES_MENU) {
 21620                           
 21621                           ; BSR set to: 1
 21622                           
 21623                           ; BSR set to: 1
 21624  000860  0E0F               	movlw	15
 21625  000862  184F               	xorwf	_which_screen,w,c
 21626  000864  A4D8               	btfss	status,2,c
 21627  000866  D004               	goto	l964
 21628                           
 21629                           ;encoder.c: 345: if(potsResoMenu.selector > 0){
 21630  000868  0101               	movlb	1	; () banked
 21631  00086A  5158               	movf	(_potsResoMenu+2)& (0+255),w,b
 21632  00086C  A4D8               	btfss	status,2,c
 21633                           
 21634                           ; BSR set to: 1
 21635                           ;encoder.c: 346: potsResoMenu.selector--;
 21636  00086E  0758               	decf	(_potsResoMenu+2)& (0+255),f,b
 21637  000870                     l964:
 21638                           
 21639                           ;encoder.c: 347: }
 21640                           ;encoder.c: 348: }
 21641                           ;encoder.c: 350: if (which_screen == ENCODER_POLARITY_MENU) {
 21642                           
 21643                           ; BSR set to: 1
 21644                           
 21645                           ; BSR set to: 1
 21646  000870  0E18               	movlw	24
 21647  000872  184F               	xorwf	_which_screen,w,c
 21648  000874  A4D8               	btfss	status,2,c
 21649  000876  D006               	goto	l966
 21650                           
 21651                           ;encoder.c: 351: if(encoderPolarityMenu.selector == 1){
 21652  000878  0101               	movlb	1	; () banked
 21653  00087A  053A               	decf	(_encoderPolarityMenu+2)& (0+255),w,b
 21654  00087C  A4D8               	btfss	status,2,c
 21655  00087E  D002               	goto	l966
 21656                           
 21657                           ; BSR set to: 1
 21658                           ;encoder.c: 352: encoderPolarityMenu.selector = 0;
 21659  000880  0E00               	movlw	0
 21660  000882  6F3A               	movwf	(_encoderPolarityMenu+2)& (0+255),b
 21661  000884                     l966:
 21662                           
 21663                           ;encoder.c: 353: }
 21664                           ;encoder.c: 354: }
 21665                           ;encoder.c: 356: if (which_screen == POTS_ALPHA_MENU) {
 21666                           
 21667                           ; BSR set to: 1
 21668                           
 21669                           ; BSR set to: 1
 21670  000884  0E10               	movlw	16
 21671  000886  184F               	xorwf	_which_screen,w,c
 21672  000888  A4D8               	btfss	status,2,c
 21673  00088A  D006               	goto	l968
 21674                           
 21675                           ;encoder.c: 357: if(potsAlphaMenu.selector >= 15){
 21676  00088C  0E0E               	movlw	14
 21677  00088E  0101               	movlb	1	; () banked
 21678  000890  6555               	cpfsgt	(_potsAlphaMenu+2)& (0+255),b
 21679  000892  D002               	goto	l968
 21680                           
 21681                           ; BSR set to: 1
 21682                           ;encoder.c: 358: potsAlphaMenu.selector -= 5;
 21683  000894  0E05               	movlw	5
 21684  000896  5F55               	subwf	(_potsAlphaMenu+2)& (0+255),f,b
 21685  000898                     l968:
 21686                           
 21687                           ;encoder.c: 363: if(potsCCMenu.selector > -2){
 21688                           
 21689                           ; BSR set to: 1
 21690  000898  0E11               	movlw	17
 21691  00089A  184F               	xorwf	_which_screen,w,c
 21692  00089C  A4D8               	btfss	status,2,c
 21693  00089E  D002               	goto	l970
 21694                           
 21695                           ;encoder.c: 364: potsCCMenu.selector--;
 21696  0008A0  0101               	movlb	1	; () banked
 21697  0008A2  0752               	decf	(_potsCCMenu+2)& (0+255),f,b
 21698  0008A4                     l970:
 21699                           
 21700                           ;encoder.c: 369: if(slidepotsCCMenu.selector > -2){
 21701                           
 21702                           ; BSR set to: 1
 21703                           
 21704                           ; BSR set to: 1
 21705  0008A4  0E12               	movlw	18
 21706  0008A6  184F               	xorwf	_which_screen,w,c
 21707  0008A8  A4D8               	btfss	status,2,c
 21708  0008AA  D002               	goto	l972
 21709                           
 21710                           ;encoder.c: 370: slidepotsCCMenu.selector--;
 21711  0008AC  0101               	movlb	1	; () banked
 21712  0008AE  074F               	decf	(_slidepotsCCMenu+2)& (0+255),f,b
 21713  0008B0                     l972:
 21714                           
 21715                           ;encoder.c: 371: }
 21716                           ;encoder.c: 372: }
 21717                           ;encoder.c: 373: if (which_screen == PROGRAM_CHANGE_MENU) {
 21718                           
 21719                           ; BSR set to: 1
 21720                           
 21721                           ; BSR set to: 1
 21722  0008B0  0E08               	movlw	8
 21723  0008B2  184F               	xorwf	_which_screen,w,c
 21724  0008B4  A4D8               	btfss	status,2,c
 21725  0008B6  D004               	goto	l974
 21726                           
 21727                           ;encoder.c: 374: if(programChangeMenu.selector > 0){
 21728  0008B8  0101               	movlb	1	; () banked
 21729  0008BA  5146               	movf	(_programChangeMenu+2)& (0+255),w,b
 21730  0008BC  A4D8               	btfss	status,2,c
 21731                           
 21732                           ; BSR set to: 1
 21733                           ;encoder.c: 375: programChangeMenu.selector--;
 21734  0008BE  0746               	decf	(_programChangeMenu+2)& (0+255),f,b
 21735  0008C0                     l974:
 21736                           
 21737                           ;encoder.c: 376: }
 21738                           ;encoder.c: 377: }
 21739                           ;encoder.c: 379: if (which_screen == MAIN_CH_MENU) {
 21740                           
 21741                           ; BSR set to: 1
 21742                           
 21743                           ; BSR set to: 1
 21744  0008C0  0E14               	movlw	20
 21745  0008C2  184F               	xorwf	_which_screen,w,c
 21746  0008C4  A4D8               	btfss	status,2,c
 21747  0008C6  D004               	goto	l976
 21748                           
 21749                           ;encoder.c: 380: if(mainChannelMenu.selector > 0){
 21750  0008C8  0101               	movlb	1	; () banked
 21751  0008CA  5143               	movf	(_mainChannelMenu+2)& (0+255),w,b
 21752  0008CC  A4D8               	btfss	status,2,c
 21753                           
 21754                           ; BSR set to: 1
 21755                           ;encoder.c: 381: mainChannelMenu.selector--;
 21756  0008CE  0743               	decf	(_mainChannelMenu+2)& (0+255),f,b
 21757  0008D0                     l976:
 21758                           
 21759                           ;encoder.c: 382: }
 21760                           ;encoder.c: 383: }
 21761                           ;encoder.c: 385: if (which_screen == DRUM_CH_MENU) {
 21762                           
 21763                           ; BSR set to: 1
 21764                           
 21765                           ; BSR set to: 1
 21766  0008D0  0E15               	movlw	21
 21767  0008D2  184F               	xorwf	_which_screen,w,c
 21768  0008D4  A4D8               	btfss	status,2,c
 21769  0008D6  D004               	goto	l978
 21770                           
 21771                           ;encoder.c: 386: if(drumChannelMenu.selector > 0){
 21772  0008D8  0101               	movlb	1	; () banked
 21773  0008DA  5140               	movf	(_drumChannelMenu+2)& (0+255),w,b
 21774  0008DC  A4D8               	btfss	status,2,c
 21775                           
 21776                           ; BSR set to: 1
 21777                           ;encoder.c: 387: drumChannelMenu.selector--;
 21778  0008DE  0740               	decf	(_drumChannelMenu+2)& (0+255),f,b
 21779  0008E0                     l978:
 21780                           
 21781                           ;encoder.c: 392: if(joystickCCMenu.selector > -2){
 21782                           
 21783                           ; BSR set to: 1
 21784                           
 21785                           ; BSR set to: 1
 21786  0008E0  0E13               	movlw	19
 21787  0008E2  184F               	xorwf	_which_screen,w,c
 21788  0008E4  A4D8               	btfss	status,2,c
 21789  0008E6  D002               	goto	l980
 21790                           
 21791                           ;encoder.c: 393: joystickCCMenu.selector--;
 21792  0008E8  0101               	movlb	1	; () banked
 21793  0008EA  074C               	decf	(_joystickCCMenu+2)& (0+255),f,b
 21794  0008EC                     l980:
 21795                           
 21796                           ;encoder.c: 394: }
 21797                           ;encoder.c: 395: }
 21798                           ;encoder.c: 396: if (which_screen == EEPROM_MENU) {
 21799                           
 21800                           ; BSR set to: 1
 21801                           
 21802                           ; BSR set to: 1
 21803  0008EC  0E16               	movlw	22
 21804  0008EE  184F               	xorwf	_which_screen,w,c
 21805  0008F0  A4D8               	btfss	status,2,c
 21806  0008F2  D004               	goto	l982
 21807                           
 21808                           ;encoder.c: 397: if(eepromMenu.selector > 0){
 21809  0008F4  0101               	movlb	1	; () banked
 21810  0008F6  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 21811  0008F8  A4D8               	btfss	status,2,c
 21812                           
 21813                           ; BSR set to: 1
 21814                           ;encoder.c: 398: eepromMenu.selector--;
 21815  0008FA  073D               	decf	(_eepromMenu+2)& (0+255),f,b
 21816  0008FC                     l982:
 21817                           
 21818                           ;encoder.c: 399: }
 21819                           ;encoder.c: 400: }
 21820                           ;encoder.c: 401: if (which_screen == SAVES_MENU) {
 21821                           
 21822                           ; BSR set to: 1
 21823                           
 21824                           ; BSR set to: 1
 21825  0008FC  0E17               	movlw	23
 21826  0008FE  184F               	xorwf	_which_screen,w,c
 21827  000900  A4D8               	btfss	status,2,c
 21828  000902  D004               	goto	l984
 21829                           
 21830                           ;encoder.c: 402: if(savesMenu.selector > 0){
 21831  000904  0100               	movlb	0	; () banked
 21832  000906  51E4               	movf	(_savesMenu+2)& (0+255),w,b
 21833  000908  A4D8               	btfss	status,2,c
 21834                           
 21835                           ; BSR set to: 0
 21836                           ;encoder.c: 403: savesMenu.selector--;
 21837  00090A  07E4               	decf	(_savesMenu+2)& (0+255),f,b
 21838  00090C                     l984:
 21839                           
 21840                           ;encoder.c: 404: }
 21841                           ;encoder.c: 405: }
 21842                           ;encoder.c: 406: if (which_screen == ARPEGGIATOR_MENU) {
 21843                           
 21844                           ; BSR set to: 0
 21845                           
 21846                           ; BSR set to: 0
 21847  00090C  0E19               	movlw	25
 21848  00090E  184F               	xorwf	_which_screen,w,c
 21849  000910  A4D8               	btfss	status,2,c
 21850  000912  D004               	goto	l986
 21851                           
 21852                           ;encoder.c: 407: if(arpeggiatorMenu.selector > 0){
 21853  000914  0100               	movlb	0	; () banked
 21854  000916  51E1               	movf	(_arpeggiatorMenu+2)& (0+255),w,b
 21855  000918  A4D8               	btfss	status,2,c
 21856                           
 21857                           ; BSR set to: 0
 21858                           ;encoder.c: 408: arpeggiatorMenu.selector--;
 21859  00091A  07E1               	decf	(_arpeggiatorMenu+2)& (0+255),f,b
 21860  00091C                     l986:
 21861                           
 21862                           ;encoder.c: 409: }
 21863                           ;encoder.c: 410: }
 21864                           ;encoder.c: 411: if (which_screen == ARPEGGIATOR_ON_OFF_MENU) {
 21865                           
 21866                           ; BSR set to: 0
 21867                           
 21868                           ; BSR set to: 0
 21869  00091C  0E1A               	movlw	26
 21870  00091E  184F               	xorwf	_which_screen,w,c
 21871  000920  A4D8               	btfss	status,2,c
 21872  000922  D003               	goto	l987
 21873                           
 21874                           ;encoder.c: 412: arpeggiatorOnOffMenu.selector ^= 1;
 21875  000924  0E01               	movlw	1
 21876  000926  0101               	movlb	1	; () banked
 21877  000928  1B37               	xorwf	(_arpeggiatorOnOffMenu+2)& (0+255),f,b
 21878  00092A                     l987:
 21879                           
 21880                           ;encoder.c: 416: }
 21881                           ;encoder.c: 417: if (which_screen == ARPEGGIATOR_TEMPO_MENU) {
 21882  00092A  0E1B               	movlw	27
 21883  00092C  184F               	xorwf	_which_screen,w,c
 21884  00092E  A4D8               	btfss	status,2,c
 21885  000930  D005               	goto	l989
 21886                           
 21887                           ;encoder.c: 418: if(arpeggiatorTempoMenu.selector > 25){
 21888  000932  0E19               	movlw	25
 21889  000934  0101               	movlb	1	; () banked
 21890  000936  6534               	cpfsgt	(_arpeggiatorTempoMenu+2)& (0+255),b
 21891  000938  D001               	goto	l989
 21892                           
 21893                           ; BSR set to: 1
 21894                           ;encoder.c: 419: arpeggiatorTempoMenu.selector--;
 21895  00093A  0734               	decf	(_arpeggiatorTempoMenu+2)& (0+255),f,b
 21896  00093C                     l989:
 21897                           
 21898                           ;encoder.c: 420: }
 21899                           ;encoder.c: 421: }
 21900                           ;encoder.c: 422: if (which_screen == ARPEGGIATOR_OCTAVES_MENU) {
 21901                           
 21902                           ; BSR set to: 1
 21903                           
 21904                           ; BSR set to: 1
 21905  00093C  0E1C               	movlw	28
 21906  00093E  184F               	xorwf	_which_screen,w,c
 21907  000940  A4D8               	btfss	status,2,c
 21908  000942  D005               	goto	l991
 21909                           
 21910                           ;encoder.c: 423: if(arpeggiatorOctavesMenu.selector > 1){
 21911  000944  0E01               	movlw	1
 21912  000946  0101               	movlb	1	; () banked
 21913  000948  6531               	cpfsgt	(_arpeggiatorOctavesMenu+2)& (0+255),b
 21914  00094A  D001               	goto	l991
 21915                           
 21916                           ; BSR set to: 1
 21917                           ;encoder.c: 424: arpeggiatorOctavesMenu.selector--;
 21918  00094C  0731               	decf	(_arpeggiatorOctavesMenu+2)& (0+255),f,b
 21919  00094E                     l991:
 21920                           
 21921                           ;encoder.c: 425: }
 21922                           ;encoder.c: 426: }
 21923                           ;encoder.c: 427: if (which_screen == ARPEGGIATOR_ARPEGGIO_TYPE_MENU) {
 21924                           
 21925                           ; BSR set to: 1
 21926                           
 21927                           ; BSR set to: 1
 21928  00094E  0E1D               	movlw	29
 21929  000950  184F               	xorwf	_which_screen,w,c
 21930  000952  A4D8               	btfss	status,2,c
 21931  000954  D004               	goto	l993
 21932                           
 21933                           ;encoder.c: 428: if(arpeggiatorTypeMenu.selector > 0){
 21934  000956  0101               	movlb	1	; () banked
 21935  000958  512E               	movf	(_arpeggiatorTypeMenu+2)& (0+255),w,b
 21936  00095A  A4D8               	btfss	status,2,c
 21937                           
 21938                           ; BSR set to: 1
 21939                           ;encoder.c: 429: arpeggiatorTypeMenu.selector--;
 21940  00095C  072E               	decf	(_arpeggiatorTypeMenu+2)& (0+255),f,b
 21941  00095E                     l993:
 21942                           
 21943                           ;encoder.c: 430: }
 21944                           ;encoder.c: 431: }
 21945                           ;encoder.c: 432: if (which_screen == ARPEGGIATOR_NOTE_LENGTH_MENU) {
 21946                           
 21947                           ; BSR set to: 1
 21948                           
 21949                           ; BSR set to: 1
 21950  00095E  0E1E               	movlw	30
 21951  000960  184F               	xorwf	_which_screen,w,c
 21952  000962  A4D8               	btfss	status,2,c
 21953  000964  D004               	goto	l995
 21954                           
 21955                           ;encoder.c: 433: if(arpeggiatorNoteLengthMenu.selector > 0){
 21956  000966  0101               	movlb	1	; () banked
 21957  000968  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 21958  00096A  A4D8               	btfss	status,2,c
 21959                           
 21960                           ; BSR set to: 1
 21961                           ;encoder.c: 434: arpeggiatorNoteLengthMenu.selector--;
 21962  00096C  072B               	decf	(_arpeggiatorNoteLengthMenu+2)& (0+255),f,b
 21963  00096E                     l995:
 21964                           
 21965                           ;encoder.c: 435: }
 21966                           ;encoder.c: 436: }
 21967                           ;encoder.c: 437: if (which_screen == ARPEGGIATOR_LATCH_MENU) {
 21968                           
 21969                           ; BSR set to: 1
 21970                           
 21971                           ; BSR set to: 1
 21972  00096E  0E1F               	movlw	31
 21973  000970  184F               	xorwf	_which_screen,w,c
 21974  000972  A4D8               	btfss	status,2,c
 21975  000974  D004               	goto	l997
 21976                           
 21977                           ;encoder.c: 439: if(arpeggiatorLatchMenu.selector > 0){
 21978  000976  0101               	movlb	1	; () banked
 21979  000978  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 21980  00097A  A4D8               	btfss	status,2,c
 21981                           
 21982                           ; BSR set to: 1
 21983                           ;encoder.c: 440: arpeggiatorLatchMenu.selector--;
 21984  00097C  0728               	decf	(_arpeggiatorLatchMenu+2)& (0+255),f,b
 21985  00097E                     l997:
 21986                           
 21987                           ;encoder.c: 441: }
 21988                           ;encoder.c: 442: }
 21989                           ;encoder.c: 443: if (which_screen == ARPEGGIATOR_LATCH_ON_OFF_MENU) {
 21990                           
 21991                           ; BSR set to: 1
 21992                           
 21993                           ; BSR set to: 1
 21994  00097E  0E20               	movlw	32
 21995  000980  184F               	xorwf	_which_screen,w,c
 21996  000982  A4D8               	btfss	status,2,c
 21997  000984  D003               	goto	l998
 21998                           
 21999                           ;encoder.c: 444: arpeggiatorLatchOnOffMenu.selector ^= 1;
 22000  000986  0E01               	movlw	1
 22001  000988  0101               	movlb	1	; () banked
 22002  00098A  1B25               	xorwf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),f,b
 22003  00098C                     l998:
 22004                           
 22005                           ;encoder.c: 445: }
 22006                           ;encoder.c: 446: if (which_screen == ARPEGGIATOR_AUTO_LATCH_ON_OFF_MENU) {
 22007  00098C  0E21               	movlw	33
 22008  00098E  184F               	xorwf	_which_screen,w,c
 22009  000990  A4D8               	btfss	status,2,c
 22010  000992  D003               	goto	l999
 22011                           
 22012                           ;encoder.c: 447: arpeggiatorAutoLatchOnOffMenu.selector ^= 1;
 22013  000994  0E01               	movlw	1
 22014  000996  0101               	movlb	1	; () banked
 22015  000998  1B22               	xorwf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),f,b
 22016  00099A                     l999:
 22017                           
 22018                           ;encoder.c: 448: }
 22019                           ;encoder.c: 449: if (which_screen == ARPEGGIATOR_UN_LATCH_MODE_MENU) {
 22020  00099A  0E22               	movlw	34
 22021  00099C  184F               	xorwf	_which_screen,w,c
 22022  00099E  A4D8               	btfss	status,2,c
 22023  0009A0  D003               	goto	l1000
 22024                           
 22025                           ;encoder.c: 450: arpeggiatorUnLatchModeMenu.selector ^= 1;
 22026  0009A2  0E01               	movlw	1
 22027  0009A4  0101               	movlb	1	; () banked
 22028  0009A6  1B1F               	xorwf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),f,b
 22029  0009A8                     l1000:
 22030                           
 22031                           ;encoder.c: 451: }
 22032                           ;encoder.c: 452: if (which_screen == ARPEGGIATOR_RANDOMIZE_SKIP_MENU) {
 22033  0009A8  0E23               	movlw	35
 22034  0009AA  184F               	xorwf	_which_screen,w,c
 22035  0009AC  A4D8               	btfss	status,2,c
 22036  0009AE  D004               	goto	l1002
 22037                           
 22038                           ;encoder.c: 453: if(arpeggiatorRandomizeSkipMenu.selector > 0){
 22039  0009B0  0101               	movlb	1	; () banked
 22040  0009B2  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 22041  0009B4  A4D8               	btfss	status,2,c
 22042                           
 22043                           ; BSR set to: 1
 22044                           ;encoder.c: 454: arpeggiatorRandomizeSkipMenu.selector--;
 22045  0009B6  071C               	decf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),f,b
 22046  0009B8                     l1002:
 22047                           
 22048                           ;encoder.c: 455: }
 22049                           ;encoder.c: 456: }
 22050                           ;encoder.c: 457: if (which_screen == ARPEGGIATOR_RANDOMIZE_TYPE_MENU) {
 22051                           
 22052                           ; BSR set to: 1
 22053                           
 22054                           ; BSR set to: 1
 22055  0009B8  0E24               	movlw	36
 22056  0009BA  184F               	xorwf	_which_screen,w,c
 22057  0009BC  A4D8               	btfss	status,2,c
 22058  0009BE  D003               	goto	l1003
 22059                           
 22060                           ;encoder.c: 458: arpeggiatorRandomizeTypeMenu.selector ^= 1;
 22061  0009C0  0E01               	movlw	1
 22062  0009C2  0101               	movlb	1	; () banked
 22063  0009C4  1B19               	xorwf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),f,b
 22064  0009C6                     l1003:
 22065                           
 22066                           ;encoder.c: 462: }
 22067                           ;encoder.c: 463: if (which_screen == ARPEGGIATOR_SKIP_FIRST_LAST_MENU) {
 22068  0009C6  0E25               	movlw	37
 22069  0009C8  184F               	xorwf	_which_screen,w,c
 22070  0009CA  A4D8               	btfss	status,2,c
 22071  0009CC  D003               	goto	l1004
 22072                           
 22073                           ;encoder.c: 464: arpeggiatorSkipFirstLastMenu.selector ^= 1;
 22074  0009CE  0E01               	movlw	1
 22075  0009D0  0101               	movlb	1	; () banked
 22076  0009D2  1B16               	xorwf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),f,b
 22077  0009D4                     l1004:
 22078                           
 22079                           ;encoder.c: 465: }
 22080                           ;encoder.c: 466: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_MENU) {
 22081  0009D4  0E26               	movlw	38
 22082  0009D6  184F               	xorwf	_which_screen,w,c
 22083  0009D8  A4D8               	btfss	status,2,c
 22084  0009DA  D004               	goto	l1006
 22085                           
 22086                           ;encoder.c: 467: if(arpeggiatorLastNoteModeMenu.selector > 0){
 22087  0009DC  0100               	movlb	0	; () banked
 22088  0009DE  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 22089  0009E0  A4D8               	btfss	status,2,c
 22090                           
 22091                           ; BSR set to: 0
 22092                           ;encoder.c: 468: arpeggiatorLastNoteModeMenu.selector--;
 22093  0009E2  07DE               	decf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),f,b
 22094  0009E4                     l1006:
 22095                           
 22096                           ;encoder.c: 469: }
 22097                           ;encoder.c: 470: }
 22098                           ;encoder.c: 471: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_PRESS_MENU) {
 22099                           
 22100                           ; BSR set to: 0
 22101                           
 22102                           ; BSR set to: 0
 22103  0009E4  0E27               	movlw	39
 22104  0009E6  184F               	xorwf	_which_screen,w,c
 22105  0009E8  A4D8               	btfss	status,2,c
 22106  0009EA  D003               	goto	l1007
 22107                           
 22108                           ;encoder.c: 472: arpeggiatorLastNoteModeKeyPressMenu.selector ^= 1;
 22109  0009EC  0E01               	movlw	1
 22110  0009EE  0101               	movlb	1	; () banked
 22111  0009F0  1B13               	xorwf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),f,b
 22112  0009F2                     l1007:
 22113                           
 22114                           ;encoder.c: 473: }
 22115                           ;encoder.c: 474: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_RELEASE_MENU) {
 22116  0009F2  0E28               	movlw	40
 22117  0009F4  184F               	xorwf	_which_screen,w,c
 22118  0009F6  A4D8               	btfss	status,2,c
 22119  0009F8  D003               	goto	l1008
 22120                           
 22121                           ;encoder.c: 475: arpeggiatorLastNoteModeKeyReleaseMenu.selector ^= 1;
 22122  0009FA  0E01               	movlw	1
 22123  0009FC  0101               	movlb	1	; () banked
 22124  0009FE  1B10               	xorwf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),f,b
 22125  000A00                     l1008:
 22126                           
 22127                           ;encoder.c: 476: }
 22128                           ;encoder.c: 477: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU) {
 22129  000A00  0E29               	movlw	41
 22130  000A02  184F               	xorwf	_which_screen,w,c
 22131  000A04  A4D8               	btfss	status,2,c
 22132  000A06  D003               	goto	l1009
 22133                           
 22134                           ;encoder.c: 478: arpeggiatorLastNoteModeTransposeMenu.selector ^= 1;
 22135  000A08  0E01               	movlw	1
 22136  000A0A  0101               	movlb	1	; () banked
 22137  000A0C  1B0D               	xorwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),f,b
 22138  000A0E                     l1009:
 22139                           
 22140                           ;encoder.c: 479: }
 22141                           ;encoder.c: 480: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU) {
 22142  000A0E  0E29               	movlw	41
 22143  000A10  184F               	xorwf	_which_screen,w,c
 22144  000A12  A4D8               	btfss	status,2,c
 22145  000A14  D003               	goto	l1010
 22146                           
 22147                           ;encoder.c: 481: arpeggiatorLastNoteModeTransposeMenu.selector ^= 1;
 22148  000A16  0E01               	movlw	1
 22149  000A18  0101               	movlb	1	; () banked
 22150  000A1A  1B0D               	xorwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),f,b
 22151  000A1C                     l1010:
 22152                           
 22153                           ;encoder.c: 482: }
 22154                           ;encoder.c: 483: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_RESET_MENU) {
 22155  000A1C  0E2A               	movlw	42
 22156  000A1E  184F               	xorwf	_which_screen,w,c
 22157  000A20  A4D8               	btfss	status,2,c
 22158  000A22  D003               	goto	l1011
 22159                           
 22160                           ;encoder.c: 484: arpeggiatorLastNoteModeResetMenu.selector ^= 1;
 22161  000A24  0E01               	movlw	1
 22162  000A26  0101               	movlb	1	; () banked
 22163  000A28  1B0A               	xorwf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),f,b
 22164  000A2A                     l1011:
 22165                           
 22166                           ;encoder.c: 485: }
 22167                           ;encoder.c: 486: }
 22168                           ;encoder.c: 488: encoder_direction = 0x00;
 22169                           
 22170                           ; BSR set to: 1
 22171                           
 22172                           ; BSR set to: 1
 22173  000A2A  0E00               	movlw	0
 22174  000A2C  6E36               	movwf	_encoder_direction,c
 22175  000A2E  0012               	return		;funcret
 22176  000A30                     __end_of_processEncoderBuxton:
 22177                           	opt stack 0
 22178                           tblptru	equ	0xFF8
 22179                           tblptrh	equ	0xFF7
 22180                           tblptrl	equ	0xFF6
 22181                           tablat	equ	0xFF5
 22182                           prodh	equ	0xFF4
 22183                           prodl	equ	0xFF3
 22184                           intcon	equ	0xFF2
 22185                           intcon2	equ	0xFF1
 22186                           postinc0	equ	0xFEE
 22187                           wreg	equ	0xFE8
 22188                           postinc1	equ	0xFE6
 22189                           plusw1	equ	0xFE3
 22190                           fsr1h	equ	0xFE2
 22191                           fsr1l	equ	0xFE1
 22192                           indf2	equ	0xFDF
 22193                           postinc2	equ	0xFDE
 22194                           postdec2	equ	0xFDD
 22195                           plusw2	equ	0xFDB
 22196                           fsr2h	equ	0xFDA
 22197                           fsr2l	equ	0xFD9
 22198                           status	equ	0xFD8
 22199                           
 22200 ;; *************** function _digitalInputs *****************
 22201 ;; Defined at:
 22202 ;;		line 359 in file "main.c"
 22203 ;; Parameters:    Size  Location     Type
 22204 ;;		None
 22205 ;; Auto vars:     Size  Location     Type
 22206 ;;		None
 22207 ;; Return value:  Size  Location     Type
 22208 ;;                  1    wreg      void 
 22209 ;; Registers used:
 22210 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22211 ;; Tracked objects:
 22212 ;;		On entry : 0/0
 22213 ;;		On exit  : 0/0
 22214 ;;		Unchanged: 0/0
 22215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22220 ;;Total ram usage:        0 bytes
 22221 ;; Hardware stack levels used:    1
 22222 ;; Hardware stack levels required when called:   14
 22223 ;; This function calls:
 22224 ;;		_buttonInputsSerial
 22225 ;;		_keyboardTranspose
 22226 ;;		_processDrumpad
 22227 ;;		_processKeyboard
 22228 ;;		_processOctave
 22229 ;; This function is called by:
 22230 ;;		_un_block_code
 22231 ;;		_main
 22232 ;; This function uses a non-reentrant model
 22233 ;;
 22234                           
 22235                           	psect	text64
 22236  00923E                     __ptext64:
 22237                           	opt stack 0
 22238  00923E                     _digitalInputs:
 22239                           	opt stack 13
 22240                           
 22241                           ;main.c: 361: buttonInputsSerial();
 22242                           
 22243                           ;incstack = 0
 22244  00923E  EC7A  F043         	call	_buttonInputsSerial	;wreg free
 22245                           
 22246                           ;main.c: 364: if(button_state_now != button_state_last) {
 22247  009242  0100               	movlb	0	; () banked
 22248  009244  51D4               	movf	_button_state_last& (0+255),w,b
 22249  009246  19D8               	xorwf	_button_state_now& (0+255),w,b
 22250  009248  E10A               	bnz	u56380
 22251  00924A  51D5               	movf	(_button_state_last+1)& (0+255),w,b
 22252  00924C  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 22253  00924E  E107               	bnz	u56380
 22254  009250  51D6               	movf	(_button_state_last+2)& (0+255),w,b
 22255  009252  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 22256  009254  E104               	bnz	u56380
 22257  009256  51D7               	movf	(_button_state_last+3)& (0+255),w,b
 22258  009258  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 22259  00925A  B4D8               	btfsc	status,2,c
 22260  00925C  D00E               	goto	l4988
 22261  00925E                     u56380:
 22262                           
 22263                           ; BSR set to: 0
 22264                           ;main.c: 365: processOctave();
 22265  00925E  EC3A  F01B         	call	_processOctave	;wreg free
 22266                           
 22267                           ;main.c: 366: keyboardTranspose();
 22268  009262  EC23  F022         	call	_keyboardTranspose	;wreg free
 22269                           
 22270                           ;main.c: 367: processKeyboard();
 22271  009266  ECAB  F046         	call	_processKeyboard	;wreg free
 22272                           
 22273                           ;main.c: 368: button_state_last = button_state_now;
 22274  00926A  C0D8  F0D4         	movff	_button_state_now,_button_state_last
 22275  00926E  C0D9  F0D5         	movff	_button_state_now+1,_button_state_last+1
 22276  009272  C0DA  F0D6         	movff	_button_state_now+2,_button_state_last+2
 22277  009276  C0DB  F0D7         	movff	_button_state_now+3,_button_state_last+3
 22278  00927A                     l4988:
 22279                           
 22280                           ;main.c: 369: }
 22281                           ;main.c: 372: if(drum_button_state_now != drum_button_state_last) {
 22282  00927A  5038               	movf	_drum_button_state_last,w,c
 22283  00927C  1839               	xorwf	_drum_button_state_now,w,c
 22284  00927E  B4D8               	btfsc	status,2,c
 22285  009280  0012               	return	
 22286                           
 22287                           ;main.c: 373: processOctave();
 22288  009282  EC3A  F01B         	call	_processOctave	;wreg free
 22289                           
 22290                           ;main.c: 374: processDrumpad();
 22291  009286  ECD9  F00E         	call	_processDrumpad	;wreg free
 22292                           
 22293                           ;main.c: 375: drum_button_state_last = drum_button_state_now;
 22294  00928A  C039  F038         	movff	_drum_button_state_now,_drum_button_state_last
 22295  00928E  0012               	return	
 22296  009290                     __end_of_digitalInputs:
 22297                           	opt stack 0
 22298                           tblptru	equ	0xFF8
 22299                           tblptrh	equ	0xFF7
 22300                           tblptrl	equ	0xFF6
 22301                           tablat	equ	0xFF5
 22302                           prodh	equ	0xFF4
 22303                           prodl	equ	0xFF3
 22304                           intcon	equ	0xFF2
 22305                           intcon2	equ	0xFF1
 22306                           postinc0	equ	0xFEE
 22307                           wreg	equ	0xFE8
 22308                           postinc1	equ	0xFE6
 22309                           plusw1	equ	0xFE3
 22310                           fsr1h	equ	0xFE2
 22311                           fsr1l	equ	0xFE1
 22312                           indf2	equ	0xFDF
 22313                           postinc2	equ	0xFDE
 22314                           postdec2	equ	0xFDD
 22315                           plusw2	equ	0xFDB
 22316                           fsr2h	equ	0xFDA
 22317                           fsr2l	equ	0xFD9
 22318                           status	equ	0xFD8
 22319                           
 22320 ;; *************** function _processOctave *****************
 22321 ;; Defined at:
 22322 ;;		line 275 in file "octave.c"
 22323 ;; Parameters:    Size  Location     Type
 22324 ;;		None
 22325 ;; Auto vars:     Size  Location     Type
 22326 ;;		None
 22327 ;; Return value:  Size  Location     Type
 22328 ;;                  1    wreg      void 
 22329 ;; Registers used:
 22330 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22331 ;; Tracked objects:
 22332 ;;		On entry : 0/0
 22333 ;;		On exit  : 0/0
 22334 ;;		Unchanged: 0/0
 22335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22338 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22339 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22340 ;;Total ram usage:        2 bytes
 22341 ;; Hardware stack levels used:    1
 22342 ;; Hardware stack levels required when called:   13
 22343 ;; This function calls:
 22344 ;;		___awmod
 22345 ;;		___wmul
 22346 ;;		_doTheLatch
 22347 ;;		_doTheUnLatch
 22348 ;;		_key_press_release_note_off
 22349 ;;		_printThisNumber
 22350 ;;		_random_pitches
 22351 ;;		_random_pitches_non_repeating
 22352 ;;		_resetArpeggio
 22353 ;;		_strcpy
 22354 ;;		_wait_one_pulse
 22355 ;; This function is called by:
 22356 ;;		_digitalInputs
 22357 ;; This function uses a non-reentrant model
 22358 ;;
 22359                           
 22360                           	psect	text65
 22361  003674                     __ptext65:
 22362                           	opt stack 0
 22363  003674                     _processOctave:
 22364                           	opt stack 13
 22365                           
 22366                           ;octave.c: 280: if(ARPEGGIO_ON == 1) {
 22367                           
 22368                           ;incstack = 0
 22369  003674  A604               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 22370  003676  D044               	goto	l2886
 22371                           
 22372                           ;octave.c: 284: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x01))
 22373  003678  0100               	movlb	0	; () banked
 22374  00367A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 22375                           
 22376                           ; BSR set to: 0
 22377  00367C  A039               	btfss	_drum_button_state_now,0,c
 22378  00367E  D002               	goto	l2881
 22379                           
 22380                           ; BSR set to: 0
 22381                           ;octave.c: 285: {
 22382                           ;octave.c: 292: doTheLatch();
 22383  003680  EC74  F04C         	call	_doTheLatch	;wreg free
 22384  003684                     l2881:
 22385                           
 22386                           ;octave.c: 293: }
 22387                           ;octave.c: 297: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x02)) {
 22388  003684  0100               	movlb	0	; () banked
 22389  003686  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 22390                           
 22391                           ; BSR set to: 0
 22392  003688  A239               	btfss	_drum_button_state_now,1,c
 22393  00368A  D002               	goto	l2882
 22394                           
 22395                           ; BSR set to: 0
 22396                           ;octave.c: 299: doTheUnLatch();
 22397  00368C  ECF0  F028         	call	_doTheUnLatch	;wreg free
 22398  003690                     l2882:
 22399                           
 22400                           ;octave.c: 378: }
 22401                           ;octave.c: 382: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x04)){
 22402  003690  0100               	movlb	0	; () banked
 22403  003692  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 22404                           
 22405                           ; BSR set to: 0
 22406  003694  A439               	btfss	_drum_button_state_now,2,c
 22407  003696  D017               	goto	l2883
 22408                           
 22409                           ; BSR set to: 0
 22410                           ;octave.c: 385: if(ARPEGGIO_TYPE == RANDOM) {random_pitches();}
 22411  003698  0E05               	movlw	5
 22412  00369A  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 22413  00369C  B4D8               	btfsc	status,2,c
 22414                           
 22415                           ; BSR set to: 0
 22416  00369E  ECCE  F045         	call	_random_pitches	;wreg free
 22417                           
 22418                           ;octave.c: 386: if(ARPEGGIO_TYPE == RANDOM_NON_REPEATING){random_pitches_non_repeating()
      +                          ;}
 22419  0036A2  0E04               	movlw	4
 22420  0036A4  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 22421  0036A6  B4D8               	btfsc	status,2,c
 22422  0036A8  EC7C  F03C         	call	_random_pitches_non_repeating	;wreg free
 22423                           
 22424                           ;octave.c: 388: DISPLAY_MODE = 1;
 22425  0036AC  0E01               	movlw	1
 22426  0036AE  0100               	movlb	0	; () banked
 22427  0036B0  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 22428                           
 22429                           ; BSR set to: 0
 22430                           ;octave.c: 389: strcpy(string_to_display, "rAnd");
 22431  0036B2  0EF8               	movlw	low _string_to_display
 22432  0036B4  6F60               	movwf	strcpy@to& (0+255),b
 22433  0036B6  0E01               	movlw	high _string_to_display
 22434  0036B8  6F61               	movwf	(strcpy@to+1)& (0+255),b
 22435  0036BA  0EEB               	movlw	low STR_6
 22436  0036BC  6F62               	movwf	strcpy@from& (0+255),b
 22437  0036BE  0EFF               	movlw	high STR_6
 22438  0036C0  6F63               	movwf	(strcpy@from+1)& (0+255),b
 22439  0036C2  EC90  F04B         	call	_strcpy	;wreg free
 22440  0036C6                     l2883:
 22441                           
 22442                           ;octave.c: 391: }
 22443                           ;octave.c: 395: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x08)){
 22444  0036C6  0100               	movlb	0	; () banked
 22445  0036C8  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 22446                           
 22447                           ; BSR set to: 0
 22448  0036CA  A639               	btfss	_drum_button_state_now,3,c
 22449  0036CC  D019               	goto	l2886
 22450                           
 22451                           ; BSR set to: 0
 22452                           ;octave.c: 398: wait_one_pulse(LAST_NOTE_MODE_RESET);
 22453  0036CE  0E00               	movlw	0
 22454  0036D0  BC02               	btfsc	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 22455  0036D2  0E01               	movlw	1
 22456  0036D4  ECEF  F04B         	call	_wait_one_pulse
 22457                           
 22458                           ;octave.c: 399: note_off_was_sent = 1;
 22459  0036D8  8002               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 22460                           
 22461                           ;octave.c: 400: key_press_release_note_off();
 22462  0036DA  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 22463                           
 22464                           ;octave.c: 403: resetArpeggio();
 22465  0036DE  EC8F  F04A         	call	_resetArpeggio	;wreg free
 22466                           
 22467                           ;octave.c: 406: TIMER_OVERFLOWS = 0;
 22468  0036E2  0E00               	movlw	0
 22469  0036E4  6E2E               	movwf	_TIMER_OVERFLOWS,c
 22470                           
 22471                           ;octave.c: 408: DISPLAY_MODE = 1;
 22472  0036E6  0E01               	movlw	1
 22473  0036E8  0100               	movlb	0	; () banked
 22474  0036EA  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 22475                           
 22476                           ; BSR set to: 0
 22477                           ;octave.c: 409: strcpy(string_to_display, "rSEt");
 22478  0036EC  0EF8               	movlw	low _string_to_display
 22479  0036EE  6F60               	movwf	strcpy@to& (0+255),b
 22480  0036F0  0E01               	movlw	high _string_to_display
 22481  0036F2  6F61               	movwf	(strcpy@to+1)& (0+255),b
 22482  0036F4  0EF5               	movlw	low STR_7
 22483  0036F6  6F62               	movwf	strcpy@from& (0+255),b
 22484  0036F8  0EFF               	movlw	high STR_7
 22485  0036FA  6F63               	movwf	(strcpy@from+1)& (0+255),b
 22486  0036FC  EC90  F04B         	call	_strcpy	;wreg free
 22487  003700                     l2886:
 22488                           
 22489                           ;octave.c: 410: }
 22490                           ;octave.c: 411: }
 22491                           ;octave.c: 414: if(button_state_now == 0x04000000){
 22492  003700  0E04               	movlw	4
 22493  003702  0100               	movlb	0	; () banked
 22494  003704  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 22495  003706  11D8               	iorwf	_button_state_now& (0+255),w,b
 22496  003708  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 22497  00370A  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 22498  00370C  A4D8               	btfss	status,2,c
 22499  00370E  D03D               	goto	l2888
 22500                           
 22501                           ; BSR set to: 0
 22502                           ;octave.c: 415: if ((octave * 12 + semitone) <= 60) {
 22503  003710  C03B  F07E         	movff	_semitone,??_processOctave
 22504  003714  6B7F               	clrf	(??_processOctave+1)& (0+255),b
 22505  003716  BF7E               	btfsc	??_processOctave& (0+255),7,b
 22506  003718  077F               	decf	(??_processOctave+1)& (0+255),f,b
 22507  00371A  5050               	movf	_octave,w,c
 22508  00371C  6F60               	movwf	___wmul@multiplier& (0+255),b
 22509  00371E  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 22510  003720  BF60               	btfsc	___wmul@multiplier& (0+255),7,b
 22511  003722  0761               	decf	(___wmul@multiplier+1)& (0+255),f,b
 22512  003724  0E00               	movlw	0
 22513  003726  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22514  003728  0E0C               	movlw	12
 22515  00372A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22516  00372C  EC2C  F04C         	call	___wmul	;wreg free
 22517  003730  0100               	movlb	0	; () banked
 22518  003732  517E               	movf	??_processOctave& (0+255),w,b
 22519  003734  2760               	addwf	?___wmul& (0+255),f,b
 22520  003736  517F               	movf	(??_processOctave+1)& (0+255),w,b
 22521  003738  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22522  00373A  BF61               	btfsc	(?___wmul+1)& (0+255),7,b
 22523  00373C  D006               	goto	u54310
 22524  00373E  5161               	movf	(?___wmul+1)& (0+255),w,b
 22525  003740  E124               	bnz	l30168
 22526  003742  0E3D               	movlw	61
 22527  003744  5D60               	subwf	?___wmul& (0+255),w,b
 22528  003746  B0D8               	btfsc	status,0,c
 22529  003748  D020               	goto	l2888
 22530  00374A                     u54310:
 22531                           
 22532                           ; BSR set to: 0
 22533                           ;octave.c: 418: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 22534  00374A  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 22535  00374C  D00E               	goto	l2889
 22536                           
 22537                           ; BSR set to: 0
 22538  00374E  502F               	movf	_NUM_NOTES_PRESSED,w,c
 22539  003750  B4D8               	btfsc	status,2,c
 22540  003752  D00B               	goto	l2889
 22541                           
 22542                           ; BSR set to: 0
 22543                           ;octave.c: 421: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 22544  003754  0E00               	movlw	0
 22545  003756  BE02               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 22546  003758  0E01               	movlw	1
 22547  00375A  ECEF  F04B         	call	_wait_one_pulse
 22548                           
 22549                           ;octave.c: 425: if(note_off_was_sent == 0) {key_press_release_note_off();}
 22550  00375E  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 22551  003760  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 22552                           
 22553                           ;octave.c: 428: suppress_note_off = 1;
 22554  003764  8602               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 22555                           
 22556                           ;octave.c: 430: flag1 = 1;
 22557  003766  8E01               	bsf	_flag1/(0+8),_flag1& (0+7),c
 22558                           
 22559                           ;octave.c: 431: flag2 = 1;
 22560  003768  8C01               	bsf	_flag2/(0+8),_flag2& (0+7),c
 22561  00376A                     l2889:
 22562                           
 22563                           ;octave.c: 432: }
 22564                           ;octave.c: 434: octave++;
 22565  00376A  2A50               	incf	_octave,f,c
 22566                           
 22567                           ;octave.c: 435: if (octave > 7) {octave = 7;}
 22568  00376C  5050               	movf	_octave,w,c
 22569  00376E  0A80               	xorlw	128
 22570  003770  0F78               	addlw	-136
 22571  003772  A0D8               	btfss	status,0,c
 22572  003774  D002               	goto	l2891
 22573  003776  0E07               	movlw	7
 22574  003778  6E50               	movwf	_octave,c
 22575  00377A                     l2891:
 22576                           
 22577                           ;octave.c: 437: printThisNumber(octave);
 22578  00377A  5050               	movf	_octave,w,c
 22579  00377C  0100               	movlb	0	; () banked
 22580  00377E  6F60               	movwf	printThisNumber@n& (0+255),b
 22581  003780  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 22582  003782  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 22583  003784  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 22584  003786  ECD0  F04C         	call	_printThisNumber	;wreg free
 22585  00378A                     l2888:
 22586  00378A                     l30168:
 22587                           
 22588                           ;octave.c: 438: }
 22589                           ;octave.c: 439: }
 22590                           ;octave.c: 442: if(button_state_now == 0x02000000){
 22591  00378A  0E02               	movlw	2
 22592  00378C  0100               	movlb	0	; () banked
 22593  00378E  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 22594  003790  11D8               	iorwf	_button_state_now& (0+255),w,b
 22595  003792  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 22596  003794  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 22597  003796  A4D8               	btfss	status,2,c
 22598  003798  D03A               	goto	l2893
 22599                           
 22600                           ; BSR set to: 0
 22601                           ;octave.c: 443: if ((octave * 12 + semitone) >= 12) {
 22602  00379A  C03B  F07E         	movff	_semitone,??_processOctave
 22603  00379E  6B7F               	clrf	(??_processOctave+1)& (0+255),b
 22604  0037A0  BF7E               	btfsc	??_processOctave& (0+255),7,b
 22605  0037A2  077F               	decf	(??_processOctave+1)& (0+255),f,b
 22606  0037A4  5050               	movf	_octave,w,c
 22607  0037A6  6F60               	movwf	___wmul@multiplier& (0+255),b
 22608  0037A8  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 22609  0037AA  BF60               	btfsc	___wmul@multiplier& (0+255),7,b
 22610  0037AC  0761               	decf	(___wmul@multiplier+1)& (0+255),f,b
 22611  0037AE  0E00               	movlw	0
 22612  0037B0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22613  0037B2  0E0C               	movlw	12
 22614  0037B4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22615  0037B6  EC2C  F04C         	call	___wmul	;wreg free
 22616  0037BA  0100               	movlb	0	; () banked
 22617  0037BC  517E               	movf	??_processOctave& (0+255),w,b
 22618  0037BE  2760               	addwf	?___wmul& (0+255),f,b
 22619  0037C0  517F               	movf	(??_processOctave+1)& (0+255),w,b
 22620  0037C2  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22621  0037C4  BF61               	btfsc	(?___wmul+1)& (0+255),7,b
 22622  0037C6  D023               	goto	l2893
 22623  0037C8  5161               	movf	(?___wmul+1)& (0+255),w,b
 22624  0037CA  E104               	bnz	u54370
 22625  0037CC  0E0C               	movlw	12
 22626  0037CE  5D60               	subwf	?___wmul& (0+255),w,b
 22627  0037D0  A0D8               	btfss	status,0,c
 22628  0037D2  D01D               	goto	l2893
 22629  0037D4                     u54370:
 22630                           
 22631                           ; BSR set to: 0
 22632                           ;octave.c: 446: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 22633  0037D4  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 22634  0037D6  D00E               	goto	l2894
 22635                           
 22636                           ; BSR set to: 0
 22637  0037D8  502F               	movf	_NUM_NOTES_PRESSED,w,c
 22638  0037DA  B4D8               	btfsc	status,2,c
 22639  0037DC  D00B               	goto	l2894
 22640                           
 22641                           ; BSR set to: 0
 22642                           ;octave.c: 449: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 22643  0037DE  0E00               	movlw	0
 22644  0037E0  BE02               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 22645  0037E2  0E01               	movlw	1
 22646  0037E4  ECEF  F04B         	call	_wait_one_pulse
 22647                           
 22648                           ;octave.c: 453: if(note_off_was_sent == 0) {key_press_release_note_off();}
 22649  0037E8  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 22650  0037EA  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 22651                           
 22652                           ;octave.c: 456: suppress_note_off = 1;
 22653  0037EE  8602               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 22654                           
 22655                           ;octave.c: 458: flag1 = 1;
 22656  0037F0  8E01               	bsf	_flag1/(0+8),_flag1& (0+7),c
 22657                           
 22658                           ;octave.c: 460: flag2 = 1;
 22659  0037F2  8C01               	bsf	_flag2/(0+8),_flag2& (0+7),c
 22660  0037F4                     l2894:
 22661                           
 22662                           ;octave.c: 461: }
 22663                           ;octave.c: 463: octave--;
 22664  0037F4  0650               	decf	_octave,f,c
 22665                           
 22666                           ;octave.c: 464: if (octave < 0) {octave = 0;}
 22667  0037F6  AE50               	btfss	_octave,7,c
 22668  0037F8  D002               	goto	l2896
 22669  0037FA  0E00               	movlw	0
 22670  0037FC  6E50               	movwf	_octave,c
 22671  0037FE                     l2896:
 22672                           
 22673                           ;octave.c: 466: printThisNumber(octave);
 22674  0037FE  5050               	movf	_octave,w,c
 22675  003800  0100               	movlb	0	; () banked
 22676  003802  6F60               	movwf	printThisNumber@n& (0+255),b
 22677  003804  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 22678  003806  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 22679  003808  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 22680  00380A  ECD0  F04C         	call	_printThisNumber	;wreg free
 22681  00380E                     l2893:
 22682                           
 22683                           ;octave.c: 468: }
 22684                           ;octave.c: 469: }
 22685                           ;octave.c: 475: if(button_state_now == (0x04000000 | 0x08000000)){
 22686  00380E  0E0C               	movlw	12
 22687  003810  0100               	movlb	0	; () banked
 22688  003812  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 22689  003814  11D8               	iorwf	_button_state_now& (0+255),w,b
 22690  003816  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 22691  003818  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 22692  00381A  A4D8               	btfss	status,2,c
 22693  00381C  D055               	goto	l2898
 22694                           
 22695                           ; BSR set to: 0
 22696                           ;octave.c: 477: if ((octave * 12 + semitone) < 72) {
 22697  00381E  C03B  F07E         	movff	_semitone,??_processOctave
 22698  003822  6B7F               	clrf	(??_processOctave+1)& (0+255),b
 22699  003824  BF7E               	btfsc	??_processOctave& (0+255),7,b
 22700  003826  077F               	decf	(??_processOctave+1)& (0+255),f,b
 22701  003828  5050               	movf	_octave,w,c
 22702  00382A  6F60               	movwf	___wmul@multiplier& (0+255),b
 22703  00382C  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 22704  00382E  BF60               	btfsc	___wmul@multiplier& (0+255),7,b
 22705  003830  0761               	decf	(___wmul@multiplier+1)& (0+255),f,b
 22706  003832  0E00               	movlw	0
 22707  003834  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22708  003836  0E0C               	movlw	12
 22709  003838  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22710  00383A  EC2C  F04C         	call	___wmul	;wreg free
 22711  00383E  0100               	movlb	0	; () banked
 22712  003840  517E               	movf	??_processOctave& (0+255),w,b
 22713  003842  2760               	addwf	?___wmul& (0+255),f,b
 22714  003844  517F               	movf	(??_processOctave+1)& (0+255),w,b
 22715  003846  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22716  003848  BF61               	btfsc	(?___wmul+1)& (0+255),7,b
 22717  00384A  D006               	goto	u54430
 22718  00384C  5161               	movf	(?___wmul+1)& (0+255),w,b
 22719  00384E  E13C               	bnz	l30230
 22720  003850  0E48               	movlw	72
 22721  003852  5D60               	subwf	?___wmul& (0+255),w,b
 22722  003854  B0D8               	btfsc	status,0,c
 22723  003856  D038               	goto	l2898
 22724  003858                     u54430:
 22725                           
 22726                           ; BSR set to: 0
 22727                           ;octave.c: 480: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 22728  003858  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 22729  00385A  D00E               	goto	l2899
 22730                           
 22731                           ; BSR set to: 0
 22732  00385C  502F               	movf	_NUM_NOTES_PRESSED,w,c
 22733  00385E  B4D8               	btfsc	status,2,c
 22734  003860  D00B               	goto	l2899
 22735                           
 22736                           ; BSR set to: 0
 22737                           ;octave.c: 483: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 22738  003862  0E00               	movlw	0
 22739  003864  BE02               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 22740  003866  0E01               	movlw	1
 22741  003868  ECEF  F04B         	call	_wait_one_pulse
 22742                           
 22743                           ;octave.c: 487: if(note_off_was_sent == 0) {key_press_release_note_off();}
 22744  00386C  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 22745  00386E  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 22746                           
 22747                           ;octave.c: 490: suppress_note_off = 1;
 22748  003872  8602               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 22749                           
 22750                           ;octave.c: 492: flag1 = 1;
 22751  003874  8E01               	bsf	_flag1/(0+8),_flag1& (0+7),c
 22752                           
 22753                           ;octave.c: 493: flag2 = 1;
 22754  003876  8C01               	bsf	_flag2/(0+8),_flag2& (0+7),c
 22755  003878                     l2899:
 22756                           
 22757                           ;octave.c: 494: }
 22758                           ;octave.c: 496: if (TRANSPOSE_MODE == 0) {
 22759  003878  BA04               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 22760  00387A  D008               	goto	l2902
 22761                           
 22762                           ;octave.c: 497: semitone++;
 22763  00387C  2A3B               	incf	_semitone,f,c
 22764                           
 22765                           ;octave.c: 498: if (semitone > 12) {semitone = 12;}
 22766  00387E  503B               	movf	_semitone,w,c
 22767  003880  0A80               	xorlw	128
 22768  003882  0F73               	addlw	-141
 22769  003884  A0D8               	btfss	status,0,c
 22770  003886  D002               	goto	l2902
 22771  003888  0E0C               	movlw	12
 22772  00388A  6E3B               	movwf	_semitone,c
 22773  00388C                     l2902:
 22774                           
 22775                           ;octave.c: 499: }
 22776                           ;octave.c: 501: if (TRANSPOSE_MODE == 1) {
 22777  00388C  AA04               	btfss	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 22778  00388E  D014               	goto	l2903
 22779                           
 22780                           ;octave.c: 502: semitone = (semitone +=7) % 12;
 22781  003890  0E0C               	movlw	12
 22782  003892  6EE6               	movwf	postinc1,c
 22783  003894  0E00               	movlw	0
 22784  003896  6EE6               	movwf	postinc1,c
 22785  003898  0E07               	movlw	7
 22786  00389A  263B               	addwf	_semitone,f,c
 22787  00389C  C03B  F07E         	movff	_semitone,??_processOctave
 22788  0038A0  0100               	movlb	0	; () banked
 22789  0038A2  6B7F               	clrf	(??_processOctave+1)& (0+255),b
 22790  0038A4  BF7E               	btfsc	??_processOctave& (0+255),7,b
 22791  0038A6  077F               	decf	(??_processOctave+1)& (0+255),f,b
 22792  0038A8  C07E  FFE6         	movff	??_processOctave,postinc1
 22793  0038AC  C07F  FFE6         	movff	??_processOctave+1,postinc1
 22794  0038B0  EC74  F034         	call	___awmod	;wreg free
 22795  0038B4  503F               	movf	btemp,w,c
 22796  0038B6  6E3B               	movwf	_semitone,c
 22797  0038B8                     l2903:
 22798                           
 22799                           ;octave.c: 503: }
 22800                           ;octave.c: 505: printThisNumber(semitone);
 22801  0038B8  503B               	movf	_semitone,w,c
 22802  0038BA  0100               	movlb	0	; () banked
 22803  0038BC  6F60               	movwf	printThisNumber@n& (0+255),b
 22804  0038BE  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 22805  0038C0  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 22806  0038C2  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 22807  0038C4  ECD0  F04C         	call	_printThisNumber	;wreg free
 22808  0038C8                     l2898:
 22809  0038C8                     l30230:
 22810                           
 22811                           ;octave.c: 506: }
 22812                           ;octave.c: 507: }
 22813                           ;octave.c: 510: if(button_state_now == (0x02000000 | 0x08000000)){
 22814  0038C8  0E0A               	movlw	10
 22815  0038CA  0100               	movlb	0	; () banked
 22816  0038CC  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 22817  0038CE  11D8               	iorwf	_button_state_now& (0+255),w,b
 22818  0038D0  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 22819  0038D2  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 22820  0038D4  A4D8               	btfss	status,2,c
 22821  0038D6  0012               	return	
 22822                           
 22823                           ; BSR set to: 0
 22824                           ;octave.c: 512: if ((octave * 12 + semitone) > 0 ) {
 22825  0038D8  C03B  F07E         	movff	_semitone,??_processOctave
 22826  0038DC  6B7F               	clrf	(??_processOctave+1)& (0+255),b
 22827  0038DE  BF7E               	btfsc	??_processOctave& (0+255),7,b
 22828  0038E0  077F               	decf	(??_processOctave+1)& (0+255),f,b
 22829  0038E2  5050               	movf	_octave,w,c
 22830  0038E4  6F60               	movwf	___wmul@multiplier& (0+255),b
 22831  0038E6  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 22832  0038E8  BF60               	btfsc	___wmul@multiplier& (0+255),7,b
 22833  0038EA  0761               	decf	(___wmul@multiplier+1)& (0+255),f,b
 22834  0038EC  0E00               	movlw	0
 22835  0038EE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22836  0038F0  0E0C               	movlw	12
 22837  0038F2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22838  0038F4  EC2C  F04C         	call	___wmul	;wreg free
 22839  0038F8  0100               	movlb	0	; () banked
 22840  0038FA  517E               	movf	??_processOctave& (0+255),w,b
 22841  0038FC  2760               	addwf	?___wmul& (0+255),f,b
 22842  0038FE  517F               	movf	(??_processOctave+1)& (0+255),w,b
 22843  003900  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22844  003902  BF61               	btfsc	(?___wmul+1)& (0+255),7,b
 22845  003904  0012               	return	
 22846  003906  5161               	movf	(?___wmul+1)& (0+255),w,b
 22847  003908  E103               	bnz	u54510
 22848  00390A  0560               	decf	?___wmul& (0+255),w,b
 22849  00390C  A0D8               	btfss	status,0,c
 22850  00390E  0012               	return	
 22851  003910                     u54510:
 22852                           
 22853                           ; BSR set to: 0
 22854                           ;octave.c: 516: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 22855  003910  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 22856  003912  D00E               	goto	l2906
 22857                           
 22858                           ; BSR set to: 0
 22859  003914  502F               	movf	_NUM_NOTES_PRESSED,w,c
 22860  003916  B4D8               	btfsc	status,2,c
 22861  003918  D00B               	goto	l2906
 22862                           
 22863                           ; BSR set to: 0
 22864                           ;octave.c: 519: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 22865  00391A  0E00               	movlw	0
 22866  00391C  BE02               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 22867  00391E  0E01               	movlw	1
 22868  003920  ECEF  F04B         	call	_wait_one_pulse
 22869                           
 22870                           ;octave.c: 523: if(note_off_was_sent == 0) {key_press_release_note_off();}
 22871  003924  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 22872  003926  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 22873                           
 22874                           ;octave.c: 526: suppress_note_off = 1;
 22875  00392A  8602               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 22876                           
 22877                           ;octave.c: 528: flag1 = 1;
 22878  00392C  8E01               	bsf	_flag1/(0+8),_flag1& (0+7),c
 22879                           
 22880                           ;octave.c: 529: flag2 = 1;
 22881  00392E  8C01               	bsf	_flag2/(0+8),_flag2& (0+7),c
 22882  003930                     l2906:
 22883                           
 22884                           ;octave.c: 530: }
 22885                           ;octave.c: 532: if (TRANSPOSE_MODE == 0) {
 22886  003930  BA04               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 22887  003932  D008               	goto	l2909
 22888                           
 22889                           ;octave.c: 533: semitone--;
 22890  003934  063B               	decf	_semitone,f,c
 22891                           
 22892                           ;octave.c: 534: if (semitone < -12) {semitone = -12;}
 22893  003936  503B               	movf	_semitone,w,c
 22894  003938  0A80               	xorlw	128
 22895  00393A  0F8C               	addlw	140
 22896  00393C  B0D8               	btfsc	status,0,c
 22897  00393E  D002               	goto	l2909
 22898  003940  0EF4               	movlw	244
 22899  003942  6E3B               	movwf	_semitone,c
 22900  003944                     l2909:
 22901                           
 22902                           ;octave.c: 535: }
 22903                           ;octave.c: 537: if (TRANSPOSE_MODE == 1) {
 22904  003944  AA04               	btfss	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 22905  003946  D014               	goto	l2910
 22906                           
 22907                           ;octave.c: 538: semitone = (semitone -=7) % 12;
 22908  003948  0E0C               	movlw	12
 22909  00394A  6EE6               	movwf	postinc1,c
 22910  00394C  0E00               	movlw	0
 22911  00394E  6EE6               	movwf	postinc1,c
 22912  003950  0EF9               	movlw	249
 22913  003952  263B               	addwf	_semitone,f,c
 22914  003954  C03B  F07E         	movff	_semitone,??_processOctave
 22915  003958  0100               	movlb	0	; () banked
 22916  00395A  6B7F               	clrf	(??_processOctave+1)& (0+255),b
 22917  00395C  BF7E               	btfsc	??_processOctave& (0+255),7,b
 22918  00395E  077F               	decf	(??_processOctave+1)& (0+255),f,b
 22919  003960  C07E  FFE6         	movff	??_processOctave,postinc1
 22920  003964  C07F  FFE6         	movff	??_processOctave+1,postinc1
 22921  003968  EC74  F034         	call	___awmod	;wreg free
 22922  00396C  503F               	movf	btemp,w,c
 22923  00396E  6E3B               	movwf	_semitone,c
 22924  003970                     l2910:
 22925                           
 22926                           ;octave.c: 539: }
 22927                           ;octave.c: 541: printThisNumber(semitone);
 22928  003970  503B               	movf	_semitone,w,c
 22929  003972  0100               	movlb	0	; () banked
 22930  003974  6F60               	movwf	printThisNumber@n& (0+255),b
 22931  003976  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 22932  003978  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 22933  00397A  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 22934  00397C  ECD0  F04C         	call	_printThisNumber	;wreg free
 22935  003980  0012               	return	
 22936  003982                     __end_of_processOctave:
 22937                           	opt stack 0
 22938                           tblptru	equ	0xFF8
 22939                           tblptrh	equ	0xFF7
 22940                           tblptrl	equ	0xFF6
 22941                           tablat	equ	0xFF5
 22942                           prodh	equ	0xFF4
 22943                           prodl	equ	0xFF3
 22944                           intcon	equ	0xFF2
 22945                           intcon2	equ	0xFF1
 22946                           postinc0	equ	0xFEE
 22947                           wreg	equ	0xFE8
 22948                           postinc1	equ	0xFE6
 22949                           plusw1	equ	0xFE3
 22950                           fsr1h	equ	0xFE2
 22951                           fsr1l	equ	0xFE1
 22952                           indf2	equ	0xFDF
 22953                           postinc2	equ	0xFDE
 22954                           postdec2	equ	0xFDD
 22955                           plusw2	equ	0xFDB
 22956                           fsr2h	equ	0xFDA
 22957                           fsr2l	equ	0xFD9
 22958                           status	equ	0xFD8
 22959                           
 22960 ;; *************** function _doTheUnLatch *****************
 22961 ;; Defined at:
 22962 ;;		line 195 in file "octave.c"
 22963 ;; Parameters:    Size  Location     Type
 22964 ;;		None
 22965 ;; Auto vars:     Size  Location     Type
 22966 ;;		None
 22967 ;; Return value:  Size  Location     Type
 22968 ;;                  1    wreg      void 
 22969 ;; Registers used:
 22970 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22971 ;; Tracked objects:
 22972 ;;		On entry : 0/0
 22973 ;;		On exit  : 0/0
 22974 ;;		Unchanged: 0/0
 22975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22978 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22979 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22980 ;;Total ram usage:        4 bytes
 22981 ;; Hardware stack levels used:    1
 22982 ;; Hardware stack levels required when called:   12
 22983 ;; This function calls:
 22984 ;;		_playThisNote
 22985 ;;		_playThisNote8
 22986 ;;		_playThisNotePentatonic
 22987 ;;		_strcpy
 22988 ;; This function is called by:
 22989 ;;		_processOctave
 22990 ;;		_Function_H_1
 22991 ;;		_Function_H_6_1
 22992 ;; This function uses a non-reentrant model
 22993 ;;
 22994                           
 22995                           	psect	text66
 22996  0051E0                     __ptext66:
 22997                           	opt stack 0
 22998  0051E0                     _doTheUnLatch:
 22999                           	opt stack 13
 23000                           
 23001                           ;octave.c: 197: LATCH = 0;
 23002                           
 23003                           ;incstack = 0
 23004  0051E0  9004               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
 23005                           
 23006                           ;octave.c: 198: ON_OFF = 0;
 23007  0051E2  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23008                           
 23009                           ;octave.c: 202: if(NUM_NOTES_PRESSED > 0) {
 23010  0051E4  502F               	movf	_NUM_NOTES_PRESSED,w,c
 23011  0051E6  B4D8               	btfsc	status,2,c
 23012  0051E8  D07F               	goto	l2848
 23013                           
 23014                           ;octave.c: 204: static __bit once;
 23015                           ;octave.c: 206: parallel = 25;
 23016  0051EA  0E19               	movlw	25
 23017  0051EC  6E30               	movwf	_parallel,c
 23018                           
 23019                           ;octave.c: 209: if ((KEYBOARD_MODE == CHROMATIC) || KEYBOARD_MODE == TRIAD || KEYBOARD_M
      +                          ODE == SEVENTH){
 23020  0051EE  0100               	movlb	0	; () banked
 23021  0051F0  51F2               	movf	_KEYBOARD_MODE& (0+255),w,b
 23022  0051F2  B4D8               	btfsc	status,2,c
 23023  0051F4  D008               	goto	u51050
 23024                           
 23025                           ; BSR set to: 0
 23026  0051F6  0E06               	movlw	6
 23027  0051F8  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23028  0051FA  B4D8               	btfsc	status,2,c
 23029  0051FC  D004               	goto	u51050
 23030                           
 23031                           ; BSR set to: 0
 23032  0051FE  0E09               	movlw	9
 23033  005200  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23034  005202  A4D8               	btfss	status,2,c
 23035  005204  D03D               	goto	l2860
 23036  005206                     u51050:
 23037                           
 23038                           ; BSR set to: 0
 23039                           ;octave.c: 211: if((ARPEGGIO_TYPE == AS_PRESSED) || (ARPEGGIO_TYPE == RANDOM) || (ARPEGG
      +                          IO_TYPE == RANDOM_NON_REPEATING) && (once == 0)){
 23040                           
 23041                           ; BSR set to: 0
 23042  005206  0E06               	movlw	6
 23043  005208  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 23044  00520A  B4D8               	btfsc	status,2,c
 23045  00520C  D009               	goto	u51090
 23046                           
 23047                           ; BSR set to: 0
 23048  00520E  0E05               	movlw	5
 23049  005210  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 23050  005212  B4D8               	btfsc	status,2,c
 23051  005214  D005               	goto	u51090
 23052                           
 23053                           ; BSR set to: 0
 23054  005216  0E04               	movlw	4
 23055  005218  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 23056  00521A  B4D8               	btfsc	status,2,c
 23057                           
 23058                           ; BSR set to: 0
 23059  00521C  B201               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23060  00521E  D005               	goto	l2854
 23061  005220                     u51090:
 23062                           
 23063                           ; BSR set to: 0
 23064                           ;octave.c: 212: playThisNote(ARPEGGIO[0]);
 23065                           
 23066                           ; BSR set to: 0
 23067  005220  0101               	movlb	1	; () banked
 23068  005222  5182               	movf	_ARPEGGIO& (0+255),w,b
 23069  005224  ECF2  F033         	call	_playThisNote
 23070                           
 23071                           ;octave.c: 213: once = 1;
 23072  005228  8201               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23073  00522A                     l2854:
 23074                           
 23075                           ;octave.c: 214: }
 23076                           ;octave.c: 215: if((ARPEGGIO_TYPE == UP) || (ARPEGGIO_TYPE == UP_DOWN) && (once == 0)){
 23077  00522A  5035               	movf	_ARPEGGIO_TYPE,w,c
 23078  00522C  B4D8               	btfsc	status,2,c
 23079  00522E  D005               	goto	u51120
 23080  005230  0E02               	movlw	2
 23081  005232  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 23082  005234  B4D8               	btfsc	status,2,c
 23083  005236  B201               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23084  005238  D005               	goto	l2857
 23085  00523A                     u51120:
 23086                           
 23087                           ;octave.c: 216: playThisNote(ARPEGGIO_SORTED[0]);
 23088  00523A  0102               	movlb	2	; () banked
 23089  00523C  5178               	movf	_ARPEGGIO_SORTED& (0+255),w,b
 23090  00523E  ECF2  F033         	call	_playThisNote
 23091                           
 23092                           ;octave.c: 217: once = 1;
 23093  005242  8201               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23094  005244                     l2857:
 23095                           
 23096                           ;octave.c: 218: }
 23097                           ;octave.c: 219: if((ARPEGGIO_TYPE == DOWN) || (ARPEGGIO_TYPE == DOWN_UP) && (once == 0))
      +                          {
 23098  005244  0435               	decf	_ARPEGGIO_TYPE,w,c
 23099  005246  B4D8               	btfsc	status,2,c
 23100  005248  D005               	goto	u51150
 23101  00524A  0E03               	movlw	3
 23102  00524C  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 23103  00524E  B4D8               	btfsc	status,2,c
 23104  005250  B201               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23105  005252  D016               	goto	l2860
 23106  005254                     u51150:
 23107                           
 23108                           ;octave.c: 220: playThisNote(ARPEGGIO_SORTED[NUM_NOTES_PRESSED - 1]);
 23109  005254  0EFF               	movlw	255
 23110  005256  0100               	movlb	0	; () banked
 23111  005258  6F7A               	movwf	??_doTheUnLatch& (0+255),b
 23112  00525A  0EFF               	movlw	255
 23113  00525C  6F7B               	movwf	(??_doTheUnLatch+1)& (0+255),b
 23114  00525E  502F               	movf	_NUM_NOTES_PRESSED,w,c
 23115  005260  6F7C               	movwf	(??_doTheUnLatch+2)& (0+255),b
 23116  005262  6B7D               	clrf	(??_doTheUnLatch+3)& (0+255),b
 23117  005264  517A               	movf	??_doTheUnLatch& (0+255),w,b
 23118  005266  277C               	addwf	(??_doTheUnLatch+2)& (0+255),f,b
 23119  005268  517B               	movf	(??_doTheUnLatch+1)& (0+255),w,b
 23120  00526A  237D               	addwfc	(??_doTheUnLatch+3)& (0+255),f,b
 23121  00526C  0E78               	movlw	low _ARPEGGIO_SORTED
 23122  00526E  257C               	addwf	(??_doTheUnLatch+2)& (0+255),w,b
 23123  005270  6ED9               	movwf	fsr2l,c
 23124  005272  0E02               	movlw	high _ARPEGGIO_SORTED
 23125  005274  217D               	addwfc	(??_doTheUnLatch+3)& (0+255),w,b
 23126  005276  6EDA               	movwf	fsr2h,c
 23127  005278  50DF               	movf	indf2,w,c
 23128  00527A  ECF2  F033         	call	_playThisNote
 23129                           
 23130                           ;octave.c: 221: once = 1;
 23131  00527E  8201               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23132  005280                     l2860:
 23133                           
 23134                           ;octave.c: 222: }
 23135                           ;octave.c: 223: }
 23136                           ;octave.c: 225: if ((KEYBOARD_MODE == MAJOR) || (KEYBOARD_MODE == MINOR) || (KEYBOARD_MO
      +                          DE == MODES) || (KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) || (KEYBOARD_MODE == DIATONIC_TR
      +                          IAD_MINOR)|| (KEYBOARD_MODE == DIATONIC_7TH_MAJOR) || (KEYBOARD_MODE == DIATONIC_7TH_MIN
      +                          OR
 23137  005280  0100               	movlb	0	; () banked
 23138  005282  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 23139  005284  B4D8               	btfsc	status,2,c
 23140  005286  D019               	goto	u51230
 23141                           
 23142                           ; BSR set to: 0
 23143  005288  0E02               	movlw	2
 23144  00528A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23145  00528C  B4D8               	btfsc	status,2,c
 23146  00528E  D015               	goto	u51230
 23147                           
 23148                           ; BSR set to: 0
 23149  005290  0E03               	movlw	3
 23150  005292  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23151  005294  B4D8               	btfsc	status,2,c
 23152  005296  D011               	goto	u51230
 23153                           
 23154                           ; BSR set to: 0
 23155  005298  0E07               	movlw	7
 23156  00529A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23157  00529C  B4D8               	btfsc	status,2,c
 23158  00529E  D00D               	goto	u51230
 23159                           
 23160                           ; BSR set to: 0
 23161  0052A0  0E08               	movlw	8
 23162  0052A2  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23163  0052A4  B4D8               	btfsc	status,2,c
 23164  0052A6  D009               	goto	u51230
 23165                           
 23166                           ; BSR set to: 0
 23167  0052A8  0E0A               	movlw	10
 23168  0052AA  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23169  0052AC  B4D8               	btfsc	status,2,c
 23170  0052AE  D005               	goto	u51230
 23171                           
 23172                           ; BSR set to: 0
 23173  0052B0  0E0B               	movlw	11
 23174  0052B2  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23175  0052B4  B4D8               	btfsc	status,2,c
 23176                           
 23177                           ; BSR set to: 0
 23178  0052B6  B201               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23179  0052B8  D006               	goto	l2863
 23180  0052BA                     u51230:
 23181                           
 23182                           ; BSR set to: 0
 23183                           ;octave.c: 226: playThisNote8(0,0);
 23184                           
 23185                           ; BSR set to: 0
 23186  0052BA  0E00               	movlw	0
 23187  0052BC  6F71               	movwf	playThisNote8@index& (0+255),b
 23188  0052BE  0E00               	movlw	0
 23189  0052C0  ECD7  F013         	call	_playThisNote8
 23190                           
 23191                           ;octave.c: 227: once = 1;
 23192  0052C4  8201               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23193  0052C6                     l2863:
 23194                           
 23195                           ;octave.c: 228: }
 23196                           ;octave.c: 230: if ((KEYBOARD_MODE == PENTATONIC_MAJOR) || (KEYBOARD_MODE == PENTATONIC_
      +                          MINOR) && (once == 0)){
 23197  0052C6  0E04               	movlw	4
 23198  0052C8  0100               	movlb	0	; () banked
 23199  0052CA  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23200  0052CC  B4D8               	btfsc	status,2,c
 23201  0052CE  D005               	goto	u51260
 23202                           
 23203                           ; BSR set to: 0
 23204  0052D0  0E05               	movlw	5
 23205  0052D2  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23206  0052D4  B4D8               	btfsc	status,2,c
 23207                           
 23208                           ; BSR set to: 0
 23209  0052D6  B201               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23210  0052D8  D006               	goto	l2866
 23211  0052DA                     u51260:
 23212                           
 23213                           ; BSR set to: 0
 23214                           ;octave.c: 231: playThisNotePentatonic(0,0);
 23215                           
 23216                           ; BSR set to: 0
 23217  0052DA  0E00               	movlw	0
 23218  0052DC  6F71               	movwf	playThisNotePentatonic@index& (0+255),b
 23219  0052DE  0E00               	movlw	0
 23220  0052E0  ECA4  F02A         	call	_playThisNotePentatonic
 23221                           
 23222                           ;octave.c: 232: once = 1;
 23223  0052E4  8201               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23224  0052E6                     l2866:
 23225                           
 23226                           ;octave.c: 233: }
 23227                           ;octave.c: 235: once = 0;
 23228  0052E6  9201               	bcf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23229  0052E8                     l2848:
 23230                           
 23231                           ;octave.c: 236: }
 23232                           ;octave.c: 239: if((UN_LATCH_MODE == 1) && (latch_was_pressed == 1) && (NUM_NOTES_PRESSE
      +                          D > 1)){
 23233  0052E8  BE03               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23234  0052EA  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 23235  0052EC  D010               	goto	l2869
 23236  0052EE  0E01               	movlw	1
 23237  0052F0  642F               	cpfsgt	_NUM_NOTES_PRESSED,c
 23238  0052F2  D00D               	goto	l2869
 23239                           
 23240                           ;octave.c: 240: DISPLAY_MODE = 1;
 23241  0052F4  0E01               	movlw	1
 23242  0052F6  0100               	movlb	0	; () banked
 23243  0052F8  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 23244                           
 23245                           ; BSR set to: 0
 23246                           ;octave.c: 241: strcpy(string_to_display, " dEL");
 23247  0052FA  0EF8               	movlw	low _string_to_display
 23248  0052FC  6F60               	movwf	strcpy@to& (0+255),b
 23249  0052FE  0E01               	movlw	high _string_to_display
 23250  005300  6F61               	movwf	(strcpy@to+1)& (0+255),b
 23251  005302  0EE1               	movlw	low STR_2
 23252  005304  6F62               	movwf	strcpy@from& (0+255),b
 23253  005306  0EFF               	movlw	high STR_2
 23254  005308  6F63               	movwf	(strcpy@from+1)& (0+255),b
 23255  00530A  EC90  F04B         	call	_strcpy	;wreg free
 23256  00530E                     l2869:
 23257                           
 23258                           ;octave.c: 242: }
 23259                           ;octave.c: 246: if((UN_LATCH_MODE == 1) && (NUM_NOTES_PRESSED == 1)){
 23260  00530E  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23261  005310  D010               	goto	l2870
 23262  005312  042F               	decf	_NUM_NOTES_PRESSED,w,c
 23263  005314  A4D8               	btfss	status,2,c
 23264  005316  D00D               	goto	l2870
 23265                           
 23266                           ;octave.c: 247: DISPLAY_MODE = 1;
 23267  005318  0E01               	movlw	1
 23268  00531A  0100               	movlb	0	; () banked
 23269  00531C  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 23270                           
 23271                           ; BSR set to: 0
 23272                           ;octave.c: 248: strcpy(string_to_display, "LaSt");
 23273  00531E  0EF8               	movlw	low _string_to_display
 23274  005320  6F60               	movwf	strcpy@to& (0+255),b
 23275  005322  0E01               	movlw	high _string_to_display
 23276  005324  6F61               	movwf	(strcpy@to+1)& (0+255),b
 23277  005326  0EFA               	movlw	low STR_3
 23278  005328  6F62               	movwf	strcpy@from& (0+255),b
 23279  00532A  0EFF               	movlw	high STR_3
 23280  00532C  6F63               	movwf	(strcpy@from+1)& (0+255),b
 23281  00532E  EC90  F04B         	call	_strcpy	;wreg free
 23282  005332                     l2870:
 23283                           
 23284                           ;octave.c: 249: }
 23285                           ;octave.c: 253: if((AUTO_LATCH == 1) && (latch_was_pressed == 1) && ((UN_LATCH_MODE == 0
      +                          ) || (UN_LATCH_MODE == 1)) && (NUM_NOTES_PRESSED == 0)){
 23286  005332  BC03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 23287  005334  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 23288  005336  D018               	goto	l2871
 23289  005338  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23290  00533A  D002               	goto	u51350
 23291  00533C  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23292  00533E  D014               	goto	l2871
 23293  005340                     u51350:
 23294  005340  502F               	movf	_NUM_NOTES_PRESSED,w,c
 23295  005342  A4D8               	btfss	status,2,c
 23296  005344  D011               	goto	l2871
 23297                           
 23298                           ;octave.c: 254: NUM_NOTES_PRESSED = 0;
 23299  005346  0E00               	movlw	0
 23300  005348  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 23301                           
 23302                           ;octave.c: 255: ARRAY_INDEX = 0;
 23303  00534A  0E00               	movlw	0
 23304  00534C  0100               	movlb	0	; () banked
 23305  00534E  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 23306                           
 23307                           ;octave.c: 257: DISPLAY_MODE = 1;
 23308  005350  0E01               	movlw	1
 23309  005352  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 23310                           
 23311                           ; BSR set to: 0
 23312                           ;octave.c: 258: strcpy(string_to_display, "Auto");
 23313  005354  0EF8               	movlw	low _string_to_display
 23314  005356  6F60               	movwf	strcpy@to& (0+255),b
 23315  005358  0E01               	movlw	high _string_to_display
 23316  00535A  6F61               	movwf	(strcpy@to+1)& (0+255),b
 23317  00535C  0EF0               	movlw	low STR_4
 23318  00535E  6F62               	movwf	strcpy@from& (0+255),b
 23319  005360  0EFF               	movlw	high STR_4
 23320  005362  6F63               	movwf	(strcpy@from+1)& (0+255),b
 23321  005364  EC90  F04B         	call	_strcpy	;wreg free
 23322  005368                     l2871:
 23323                           
 23324                           ;octave.c: 259: }
 23325                           ;octave.c: 266: if((LATCH == 0) && ((UN_LATCH_MODE == 0) || (UN_LATCH_MODE == 1)) && (NU
      +                          M_NOTES_PRESSED == 0)){
 23326  005368  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 23327  00536A  0012               	return	
 23328  00536C  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23329  00536E  D002               	goto	u51390
 23330  005370  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23331  005372  0012               	return	
 23332  005374                     u51390:
 23333  005374  502F               	movf	_NUM_NOTES_PRESSED,w,c
 23334  005376  A4D8               	btfss	status,2,c
 23335  005378  0012               	return	
 23336                           
 23337                           ;octave.c: 267: NUM_NOTES_PRESSED = 0;
 23338  00537A  0E00               	movlw	0
 23339  00537C  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 23340                           
 23341                           ;octave.c: 268: ARRAY_INDEX = 0;
 23342  00537E  0E00               	movlw	0
 23343  005380  0100               	movlb	0	; () banked
 23344  005382  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 23345                           
 23346                           ;octave.c: 269: DISPLAY_MODE = 1;
 23347  005384  0E01               	movlw	1
 23348  005386  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 23349                           
 23350                           ; BSR set to: 0
 23351                           ;octave.c: 270: strcpy(string_to_display, " oFF");
 23352  005388  0EF8               	movlw	low _string_to_display
 23353  00538A  6F60               	movwf	strcpy@to& (0+255),b
 23354  00538C  0E01               	movlw	high _string_to_display
 23355  00538E  6F61               	movwf	(strcpy@to+1)& (0+255),b
 23356  005390  0EDC               	movlw	low STR_5
 23357  005392  6F62               	movwf	strcpy@from& (0+255),b
 23358  005394  0EFF               	movlw	high STR_5
 23359  005396  6F63               	movwf	(strcpy@from+1)& (0+255),b
 23360  005398  EC90  F04B         	call	_strcpy	;wreg free
 23361  00539C  0012               	return	
 23362  00539E                     __end_of_doTheUnLatch:
 23363                           	opt stack 0
 23364                           tblptru	equ	0xFF8
 23365                           tblptrh	equ	0xFF7
 23366                           tblptrl	equ	0xFF6
 23367                           tablat	equ	0xFF5
 23368                           prodh	equ	0xFF4
 23369                           prodl	equ	0xFF3
 23370                           intcon	equ	0xFF2
 23371                           intcon2	equ	0xFF1
 23372                           postinc0	equ	0xFEE
 23373                           wreg	equ	0xFE8
 23374                           postinc1	equ	0xFE6
 23375                           plusw1	equ	0xFE3
 23376                           fsr1h	equ	0xFE2
 23377                           fsr1l	equ	0xFE1
 23378                           indf2	equ	0xFDF
 23379                           postinc2	equ	0xFDE
 23380                           postdec2	equ	0xFDD
 23381                           plusw2	equ	0xFDB
 23382                           fsr2h	equ	0xFDA
 23383                           fsr2l	equ	0xFD9
 23384                           status	equ	0xFD8
 23385                           
 23386 ;; *************** function _doTheLatch *****************
 23387 ;; Defined at:
 23388 ;;		line 188 in file "octave.c"
 23389 ;; Parameters:    Size  Location     Type
 23390 ;;		None
 23391 ;; Auto vars:     Size  Location     Type
 23392 ;;		None
 23393 ;; Return value:  Size  Location     Type
 23394 ;;                  1    wreg      void 
 23395 ;; Registers used:
 23396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23397 ;; Tracked objects:
 23398 ;;		On entry : 0/0
 23399 ;;		On exit  : 0/0
 23400 ;;		Unchanged: 0/0
 23401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23406 ;;Total ram usage:        0 bytes
 23407 ;; Hardware stack levels used:    1
 23408 ;; Hardware stack levels required when called:    6
 23409 ;; This function calls:
 23410 ;;		_strcpy
 23411 ;; This function is called by:
 23412 ;;		_processOctave
 23413 ;;		_Function_H_6_1
 23414 ;; This function uses a non-reentrant model
 23415 ;;
 23416                           
 23417                           	psect	text67
 23418  0098E8                     __ptext67:
 23419                           	opt stack 0
 23420  0098E8                     _doTheLatch:
 23421                           	opt stack 19
 23422                           
 23423                           ;octave.c: 189: LATCH = 1;
 23424                           
 23425                           ;incstack = 0
 23426  0098E8  8004               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 23427                           
 23428                           ;octave.c: 190: latch_was_pressed = 1;
 23429  0098EA  8A03               	bsf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 23430                           
 23431                           ;octave.c: 191: DISPLAY_MODE = 1;
 23432  0098EC  0E01               	movlw	1
 23433  0098EE  0100               	movlb	0	; () banked
 23434  0098F0  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 23435                           
 23436                           ; BSR set to: 0
 23437                           ;octave.c: 192: strcpy(string_to_display, "HoLd");
 23438  0098F2  0EF8               	movlw	low _string_to_display
 23439  0098F4  6F60               	movwf	strcpy@to& (0+255),b
 23440  0098F6  0E01               	movlw	high _string_to_display
 23441  0098F8  6F61               	movwf	(strcpy@to+1)& (0+255),b
 23442  0098FA  0EE6               	movlw	low STR_1
 23443  0098FC  6F62               	movwf	strcpy@from& (0+255),b
 23444  0098FE  0EFF               	movlw	high STR_1
 23445  009900  6F63               	movwf	(strcpy@from+1)& (0+255),b
 23446  009902  EC90  F04B         	call	_strcpy	;wreg free
 23447  009906  0012               	return		;funcret
 23448  009908                     __end_of_doTheLatch:
 23449                           	opt stack 0
 23450                           tblptru	equ	0xFF8
 23451                           tblptrh	equ	0xFF7
 23452                           tblptrl	equ	0xFF6
 23453                           tablat	equ	0xFF5
 23454                           prodh	equ	0xFF4
 23455                           prodl	equ	0xFF3
 23456                           intcon	equ	0xFF2
 23457                           intcon2	equ	0xFF1
 23458                           postinc0	equ	0xFEE
 23459                           wreg	equ	0xFE8
 23460                           postinc1	equ	0xFE6
 23461                           plusw1	equ	0xFE3
 23462                           fsr1h	equ	0xFE2
 23463                           fsr1l	equ	0xFE1
 23464                           indf2	equ	0xFDF
 23465                           postinc2	equ	0xFDE
 23466                           postdec2	equ	0xFDD
 23467                           plusw2	equ	0xFDB
 23468                           fsr2h	equ	0xFDA
 23469                           fsr2l	equ	0xFD9
 23470                           status	equ	0xFD8
 23471                           
 23472 ;; *************** function _processKeyboard *****************
 23473 ;; Defined at:
 23474 ;;		line 23 in file "keyboard.c"
 23475 ;; Parameters:    Size  Location     Type
 23476 ;;		None
 23477 ;; Auto vars:     Size  Location     Type
 23478 ;;		None
 23479 ;; Return value:  Size  Location     Type
 23480 ;;                  1    wreg      void 
 23481 ;; Registers used:
 23482 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23483 ;; Tracked objects:
 23484 ;;		On entry : 0/0
 23485 ;;		On exit  : 0/0
 23486 ;;		Unchanged: 0/0
 23487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23492 ;;Total ram usage:        0 bytes
 23493 ;; Hardware stack levels used:    1
 23494 ;; Hardware stack levels required when called:   13
 23495 ;; This function calls:
 23496 ;;		_keyboard_all_note_efficient
 23497 ;;		_keyboard_eight_note_efficient
 23498 ;;		_keyboard_sharps_only_efficient
 23499 ;; This function is called by:
 23500 ;;		_digitalInputs
 23501 ;; This function uses a non-reentrant model
 23502 ;;
 23503                           
 23504                           	psect	text68
 23505  008D56                     __ptext68:
 23506                           	opt stack 0
 23507  008D56                     _processKeyboard:
 23508                           	opt stack 13
 23509                           
 23510                           ;keyboard.c: 25: if ((KEYBOARD_MODE == CHROMATIC) || KEYBOARD_MODE == TRIAD || KEYBOARD_
      +                          MODE == SEVENTH) {keyboard_all_note_efficient();}
 23511                           
 23512                           ;incstack = 0
 23513  008D56  0100               	movlb	0	; () banked
 23514  008D58  51F2               	movf	_KEYBOARD_MODE& (0+255),w,b
 23515  008D5A  B4D8               	btfsc	status,2,c
 23516  008D5C  D007               	goto	u52340
 23517                           
 23518                           ; BSR set to: 0
 23519  008D5E  0E06               	movlw	6
 23520  008D60  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23521  008D62  B4D8               	btfsc	status,2,c
 23522  008D64  D003               	goto	u52340
 23523                           
 23524                           ; BSR set to: 0
 23525  008D66  0E09               	movlw	9
 23526  008D68  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23527  008D6A  B4D8               	btfsc	status,2,c
 23528  008D6C                     u52340:
 23529                           
 23530                           ; BSR set to: 0
 23531                           
 23532                           ; BSR set to: 0
 23533  008D6C  EC4C  F00C         	call	_keyboard_all_note_efficient	;wreg free
 23534                           
 23535                           ;keyboard.c: 27: if ((KEYBOARD_MODE == MAJOR) || (KEYBOARD_MODE == MINOR) || (KEYBOARD_M
      +                          ODE == MODES) || (KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) || (KEYBOARD_MODE == DIATONIC_T
      +                          RIAD_MINOR)|| (KEYBOARD_MODE == DIATONIC_7TH_MAJOR) || (KEYBOARD_MODE == DIATONIC_7TH_MI
      +                          NOR
 23536  008D70  0100               	movlb	0	; () banked
 23537  008D72  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 23538  008D74  B4D8               	btfsc	status,2,c
 23539  008D76  D017               	goto	u52410
 23540                           
 23541                           ; BSR set to: 0
 23542  008D78  0E02               	movlw	2
 23543  008D7A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23544  008D7C  B4D8               	btfsc	status,2,c
 23545  008D7E  D013               	goto	u52410
 23546                           
 23547                           ; BSR set to: 0
 23548  008D80  0E03               	movlw	3
 23549  008D82  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23550  008D84  B4D8               	btfsc	status,2,c
 23551  008D86  D00F               	goto	u52410
 23552                           
 23553                           ; BSR set to: 0
 23554  008D88  0E07               	movlw	7
 23555  008D8A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23556  008D8C  B4D8               	btfsc	status,2,c
 23557  008D8E  D00B               	goto	u52410
 23558                           
 23559                           ; BSR set to: 0
 23560  008D90  0E08               	movlw	8
 23561  008D92  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23562  008D94  B4D8               	btfsc	status,2,c
 23563  008D96  D007               	goto	u52410
 23564                           
 23565                           ; BSR set to: 0
 23566  008D98  0E0A               	movlw	10
 23567  008D9A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23568  008D9C  B4D8               	btfsc	status,2,c
 23569  008D9E  D003               	goto	u52410
 23570                           
 23571                           ; BSR set to: 0
 23572  008DA0  0E0B               	movlw	11
 23573  008DA2  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23574  008DA4  B4D8               	btfsc	status,2,c
 23575  008DA6                     u52410:
 23576                           
 23577                           ; BSR set to: 0
 23578                           
 23579                           ; BSR set to: 0
 23580  008DA6  ECF1  F015         	call	_keyboard_eight_note_efficient	;wreg free
 23581                           
 23582                           ;keyboard.c: 30: if ((KEYBOARD_MODE == PENTATONIC_MAJOR) || (KEYBOARD_MODE == PENTATONIC
      +                          _MINOR)) {keyboard_sharps_only_efficient();}
 23583  008DAA  0E04               	movlw	4
 23584  008DAC  0100               	movlb	0	; () banked
 23585  008DAE  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23586  008DB0  B4D8               	btfsc	status,2,c
 23587  008DB2  D004               	goto	u52430
 23588                           
 23589                           ; BSR set to: 0
 23590  008DB4  0E05               	movlw	5
 23591  008DB6  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23592  008DB8  A4D8               	btfss	status,2,c
 23593  008DBA  0012               	return	
 23594  008DBC                     u52430:
 23595                           
 23596                           ; BSR set to: 0
 23597                           
 23598                           ; BSR set to: 0
 23599  008DBC  EC78  F01F         	call	_keyboard_sharps_only_efficient	;wreg free
 23600  008DC0  0012               	return	
 23601  008DC2                     __end_of_processKeyboard:
 23602                           	opt stack 0
 23603                           tblptru	equ	0xFF8
 23604                           tblptrh	equ	0xFF7
 23605                           tblptrl	equ	0xFF6
 23606                           tablat	equ	0xFF5
 23607                           prodh	equ	0xFF4
 23608                           prodl	equ	0xFF3
 23609                           intcon	equ	0xFF2
 23610                           intcon2	equ	0xFF1
 23611                           postinc0	equ	0xFEE
 23612                           wreg	equ	0xFE8
 23613                           postinc1	equ	0xFE6
 23614                           plusw1	equ	0xFE3
 23615                           fsr1h	equ	0xFE2
 23616                           fsr1l	equ	0xFE1
 23617                           indf2	equ	0xFDF
 23618                           postinc2	equ	0xFDE
 23619                           postdec2	equ	0xFDD
 23620                           plusw2	equ	0xFDB
 23621                           fsr2h	equ	0xFDA
 23622                           fsr2l	equ	0xFD9
 23623                           status	equ	0xFD8
 23624                           
 23625 ;; *************** function _keyboard_sharps_only_efficient *****************
 23626 ;; Defined at:
 23627 ;;		line 140 in file "keyboard.c"
 23628 ;; Parameters:    Size  Location     Type
 23629 ;;		None
 23630 ;; Auto vars:     Size  Location     Type
 23631 ;;  index           1   24[BANK0 ] unsigned char 
 23632 ;;  pitch           1   23[BANK0 ] unsigned char 
 23633 ;; Return value:  Size  Location     Type
 23634 ;;                  1    wreg      void 
 23635 ;; Registers used:
 23636 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23637 ;; Tracked objects:
 23638 ;;		On entry : 0/0
 23639 ;;		On exit  : 0/0
 23640 ;;		Unchanged: 0/0
 23641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23643 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23645 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23646 ;;Total ram usage:        2 bytes
 23647 ;; Hardware stack levels used:    1
 23648 ;; Hardware stack levels required when called:   11
 23649 ;; This function calls:
 23650 ;;		_playThisNotePentatonic
 23651 ;; This function is called by:
 23652 ;;		_processKeyboard
 23653 ;; This function uses a non-reentrant model
 23654 ;;
 23655                           
 23656                           	psect	text69
 23657  003EF0                     __ptext69:
 23658                           	opt stack 0
 23659  003EF0                     _keyboard_sharps_only_efficient:
 23660                           	opt stack 14
 23661                           
 23662                           ;keyboard.c: 142: unsigned char pitch;
 23663                           ;keyboard.c: 143: unsigned char index;
 23664                           ;keyboard.c: 146: if((button_state_now & 0x00000002) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW2){
 23665                           
 23666                           ;incstack = 0
 23667  003EF0  0100               	movlb	0	; () banked
 23668  003EF2  B3D8               	btfsc	_button_state_now& (0+255),1,b
 23669                           
 23670                           ; BSR set to: 0
 23671  003EF4  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23672  003EF6  D00E               	goto	l1425
 23673                           
 23674                           ; BSR set to: 0
 23675  003EF8  B3D0               	btfsc	_keyboard& (0+255),1,b
 23676  003EFA  D00C               	goto	l1425
 23677                           
 23678                           ; BSR set to: 0
 23679                           ;keyboard.c: 147: pitch = Cs;
 23680  003EFC  0E01               	movlw	1
 23681  003EFE  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23682                           
 23683                           ;keyboard.c: 148: index = 0;
 23684  003F00  0E00               	movlw	0
 23685  003F02  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23686                           
 23687                           ; BSR set to: 0
 23688                           ;keyboard.c: 149: ON_OFF = 1;
 23689  003F04  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23690                           
 23691                           ; BSR set to: 0
 23692                           ;keyboard.c: 150: playThisNotePentatonic(pitch, index);
 23693  003F06  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23694  003F0A  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23695  003F0C  ECA4  F02A         	call	_playThisNotePentatonic
 23696                           
 23697                           ;keyboard.c: 151: keyboard.SW2 = 1;
 23698  003F10  0100               	movlb	0	; () banked
 23699  003F12  83D0               	bsf	_keyboard& (0+255),1,b
 23700  003F14                     l1425:
 23701                           
 23702                           ; BSR set to: 0
 23703                           ;keyboard.c: 152: }
 23704                           ;keyboard.c: 153: if((button_state_now & 0x00000008) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW4){
 23705                           
 23706                           ; BSR set to: 0
 23707  003F14  B7D8               	btfsc	_button_state_now& (0+255),3,b
 23708                           
 23709                           ; BSR set to: 0
 23710  003F16  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23711  003F18  D00E               	goto	l1426
 23712                           
 23713                           ; BSR set to: 0
 23714  003F1A  B7D0               	btfsc	_keyboard& (0+255),3,b
 23715  003F1C  D00C               	goto	l1426
 23716                           
 23717                           ; BSR set to: 0
 23718                           ;keyboard.c: 154: pitch = Ds;
 23719  003F1E  0E03               	movlw	3
 23720  003F20  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23721                           
 23722                           ;keyboard.c: 155: index = 1;
 23723  003F22  0E01               	movlw	1
 23724  003F24  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23725                           
 23726                           ; BSR set to: 0
 23727                           ;keyboard.c: 156: ON_OFF = 1;
 23728  003F26  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23729                           
 23730                           ; BSR set to: 0
 23731                           ;keyboard.c: 157: playThisNotePentatonic(pitch, index);
 23732  003F28  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23733  003F2C  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23734  003F2E  ECA4  F02A         	call	_playThisNotePentatonic
 23735                           
 23736                           ;keyboard.c: 158: keyboard.SW4 = 1;
 23737  003F32  0100               	movlb	0	; () banked
 23738  003F34  87D0               	bsf	_keyboard& (0+255),3,b
 23739  003F36                     l1426:
 23740                           
 23741                           ; BSR set to: 0
 23742                           ;keyboard.c: 159: }
 23743                           ;keyboard.c: 160: if((button_state_now & 0x00000040) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW7){
 23744                           
 23745                           ; BSR set to: 0
 23746  003F36  BDD8               	btfsc	_button_state_now& (0+255),6,b
 23747                           
 23748                           ; BSR set to: 0
 23749  003F38  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23750  003F3A  D00E               	goto	l1427
 23751                           
 23752                           ; BSR set to: 0
 23753  003F3C  BDD0               	btfsc	_keyboard& (0+255),6,b
 23754  003F3E  D00C               	goto	l1427
 23755                           
 23756                           ; BSR set to: 0
 23757                           ;keyboard.c: 161: pitch = Fs;
 23758  003F40  0E06               	movlw	6
 23759  003F42  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23760                           
 23761                           ;keyboard.c: 162: index = 2;
 23762  003F44  0E02               	movlw	2
 23763  003F46  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23764                           
 23765                           ; BSR set to: 0
 23766                           ;keyboard.c: 163: ON_OFF = 1;
 23767  003F48  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23768                           
 23769                           ; BSR set to: 0
 23770                           ;keyboard.c: 164: playThisNotePentatonic(pitch, index);
 23771  003F4A  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23772  003F4E  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23773  003F50  ECA4  F02A         	call	_playThisNotePentatonic
 23774                           
 23775                           ;keyboard.c: 165: keyboard.SW7 = 1;
 23776  003F54  0100               	movlb	0	; () banked
 23777  003F56  8DD0               	bsf	_keyboard& (0+255),6,b
 23778  003F58                     l1427:
 23779                           
 23780                           ; BSR set to: 0
 23781                           ;keyboard.c: 166: }
 23782                           ;keyboard.c: 167: if((button_state_now & 0x00000100) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW9){
 23783                           
 23784                           ; BSR set to: 0
 23785  003F58  B1D9               	btfsc	(_button_state_now+1)& (0+255),0,b
 23786                           
 23787                           ; BSR set to: 0
 23788  003F5A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23789  003F5C  D00E               	goto	l1428
 23790                           
 23791                           ; BSR set to: 0
 23792  003F5E  B1D1               	btfsc	(_keyboard+1)& (0+255),0,b
 23793  003F60  D00C               	goto	l1428
 23794                           
 23795                           ; BSR set to: 0
 23796                           ;keyboard.c: 168: pitch = Gs;
 23797  003F62  0E08               	movlw	8
 23798  003F64  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23799                           
 23800                           ;keyboard.c: 169: index = 3;
 23801  003F66  0E03               	movlw	3
 23802  003F68  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23803                           
 23804                           ; BSR set to: 0
 23805                           ;keyboard.c: 170: ON_OFF = 1;
 23806  003F6A  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23807                           
 23808                           ; BSR set to: 0
 23809                           ;keyboard.c: 171: playThisNotePentatonic(pitch, index);
 23810  003F6C  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23811  003F70  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23812  003F72  ECA4  F02A         	call	_playThisNotePentatonic
 23813                           
 23814                           ;keyboard.c: 172: keyboard.SW9 = 1;
 23815  003F76  0100               	movlb	0	; () banked
 23816  003F78  81D1               	bsf	(_keyboard+1)& (0+255),0,b
 23817  003F7A                     l1428:
 23818                           
 23819                           ; BSR set to: 0
 23820                           ;keyboard.c: 173: }
 23821                           ;keyboard.c: 174: if((button_state_now & 0x00000400) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW11){
 23822                           
 23823                           ; BSR set to: 0
 23824  003F7A  B5D9               	btfsc	(_button_state_now+1)& (0+255),2,b
 23825                           
 23826                           ; BSR set to: 0
 23827  003F7C  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23828  003F7E  D00E               	goto	l1429
 23829                           
 23830                           ; BSR set to: 0
 23831  003F80  B5D1               	btfsc	(_keyboard+1)& (0+255),2,b
 23832  003F82  D00C               	goto	l1429
 23833                           
 23834                           ; BSR set to: 0
 23835                           ;keyboard.c: 175: pitch = As;
 23836  003F84  0E0A               	movlw	10
 23837  003F86  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23838                           
 23839                           ;keyboard.c: 176: index = 4;
 23840  003F88  0E04               	movlw	4
 23841  003F8A  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23842                           
 23843                           ; BSR set to: 0
 23844                           ;keyboard.c: 177: ON_OFF = 1;
 23845  003F8C  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23846                           
 23847                           ; BSR set to: 0
 23848                           ;keyboard.c: 178: playThisNotePentatonic(pitch, index);
 23849  003F8E  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23850  003F92  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23851  003F94  ECA4  F02A         	call	_playThisNotePentatonic
 23852                           
 23853                           ;keyboard.c: 179: keyboard.SW11 = 1;
 23854  003F98  0100               	movlb	0	; () banked
 23855  003F9A  85D1               	bsf	(_keyboard+1)& (0+255),2,b
 23856  003F9C                     l1429:
 23857                           
 23858                           ; BSR set to: 0
 23859                           ;keyboard.c: 180: }
 23860                           ;keyboard.c: 182: if((button_state_now & 0x00002000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW14){
 23861                           
 23862                           ; BSR set to: 0
 23863  003F9C  BBD9               	btfsc	(_button_state_now+1)& (0+255),5,b
 23864                           
 23865                           ; BSR set to: 0
 23866  003F9E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23867  003FA0  D00E               	goto	l1430
 23868                           
 23869                           ; BSR set to: 0
 23870  003FA2  BBD1               	btfsc	(_keyboard+1)& (0+255),5,b
 23871  003FA4  D00C               	goto	l1430
 23872                           
 23873                           ; BSR set to: 0
 23874                           ;keyboard.c: 183: pitch = C2s;
 23875  003FA6  0E0D               	movlw	13
 23876  003FA8  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23877                           
 23878                           ;keyboard.c: 184: index = 5;
 23879  003FAA  0E05               	movlw	5
 23880  003FAC  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23881                           
 23882                           ; BSR set to: 0
 23883                           ;keyboard.c: 185: ON_OFF = 1;
 23884  003FAE  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23885                           
 23886                           ; BSR set to: 0
 23887                           ;keyboard.c: 186: playThisNotePentatonic(pitch, index);
 23888  003FB0  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23889  003FB4  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23890  003FB6  ECA4  F02A         	call	_playThisNotePentatonic
 23891                           
 23892                           ;keyboard.c: 187: keyboard.SW14 = 1;
 23893  003FBA  0100               	movlb	0	; () banked
 23894  003FBC  8BD1               	bsf	(_keyboard+1)& (0+255),5,b
 23895  003FBE                     l1430:
 23896                           
 23897                           ; BSR set to: 0
 23898                           ;keyboard.c: 188: }
 23899                           ;keyboard.c: 189: if((button_state_now & 0x00008000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW16){
 23900                           
 23901                           ; BSR set to: 0
 23902  003FBE  BFD9               	btfsc	(_button_state_now+1)& (0+255),7,b
 23903                           
 23904                           ; BSR set to: 0
 23905  003FC0  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23906  003FC2  D00E               	goto	l1431
 23907                           
 23908                           ; BSR set to: 0
 23909  003FC4  BFD1               	btfsc	(_keyboard+1)& (0+255),7,b
 23910  003FC6  D00C               	goto	l1431
 23911                           
 23912                           ; BSR set to: 0
 23913                           ;keyboard.c: 190: pitch = D2s;
 23914  003FC8  0E0F               	movlw	15
 23915  003FCA  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23916                           
 23917                           ;keyboard.c: 191: index = 6;
 23918  003FCC  0E06               	movlw	6
 23919  003FCE  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23920                           
 23921                           ; BSR set to: 0
 23922                           ;keyboard.c: 192: ON_OFF = 1;
 23923  003FD0  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23924                           
 23925                           ; BSR set to: 0
 23926                           ;keyboard.c: 193: playThisNotePentatonic(pitch, index);
 23927  003FD2  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23928  003FD6  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23929  003FD8  ECA4  F02A         	call	_playThisNotePentatonic
 23930                           
 23931                           ;keyboard.c: 194: keyboard.SW16 = 1;
 23932  003FDC  0100               	movlb	0	; () banked
 23933  003FDE  8FD1               	bsf	(_keyboard+1)& (0+255),7,b
 23934  003FE0                     l1431:
 23935                           
 23936                           ; BSR set to: 0
 23937                           ;keyboard.c: 195: }
 23938                           ;keyboard.c: 196: if((button_state_now & 0x00040000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW19){
 23939                           
 23940                           ; BSR set to: 0
 23941  003FE0  B5DA               	btfsc	(_button_state_now+2)& (0+255),2,b
 23942                           
 23943                           ; BSR set to: 0
 23944  003FE2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23945  003FE4  D00E               	goto	l1432
 23946                           
 23947                           ; BSR set to: 0
 23948  003FE6  B5D2               	btfsc	(_keyboard+2)& (0+255),2,b
 23949  003FE8  D00C               	goto	l1432
 23950                           
 23951                           ; BSR set to: 0
 23952                           ;keyboard.c: 197: pitch = F2s;
 23953  003FEA  0E12               	movlw	18
 23954  003FEC  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23955                           
 23956                           ;keyboard.c: 198: index = 7;
 23957  003FEE  0E07               	movlw	7
 23958  003FF0  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23959                           
 23960                           ; BSR set to: 0
 23961                           ;keyboard.c: 199: ON_OFF = 1;
 23962  003FF2  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23963                           
 23964                           ; BSR set to: 0
 23965                           ;keyboard.c: 200: playThisNotePentatonic(pitch, index);
 23966  003FF4  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23967  003FF8  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23968  003FFA  ECA4  F02A         	call	_playThisNotePentatonic
 23969                           
 23970                           ;keyboard.c: 201: keyboard.SW19 = 1;
 23971  003FFE  0100               	movlb	0	; () banked
 23972  004000  85D2               	bsf	(_keyboard+2)& (0+255),2,b
 23973  004002                     l1432:
 23974                           
 23975                           ; BSR set to: 0
 23976                           ;keyboard.c: 202: }
 23977                           ;keyboard.c: 203: if((button_state_now & 0x00100000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW21){
 23978                           
 23979                           ; BSR set to: 0
 23980  004002  B9DA               	btfsc	(_button_state_now+2)& (0+255),4,b
 23981                           
 23982                           ; BSR set to: 0
 23983  004004  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23984  004006  D00E               	goto	l1433
 23985                           
 23986                           ; BSR set to: 0
 23987  004008  B9D2               	btfsc	(_keyboard+2)& (0+255),4,b
 23988  00400A  D00C               	goto	l1433
 23989                           
 23990                           ; BSR set to: 0
 23991                           ;keyboard.c: 204: pitch = G2s;
 23992  00400C  0E14               	movlw	20
 23993  00400E  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23994                           
 23995                           ;keyboard.c: 205: index = 8;
 23996  004010  0E08               	movlw	8
 23997  004012  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23998                           
 23999                           ; BSR set to: 0
 24000                           ;keyboard.c: 206: ON_OFF = 1;
 24001  004014  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24002                           
 24003                           ; BSR set to: 0
 24004                           ;keyboard.c: 207: playThisNotePentatonic(pitch, index);
 24005  004016  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24006  00401A  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24007  00401C  ECA4  F02A         	call	_playThisNotePentatonic
 24008                           
 24009                           ;keyboard.c: 208: keyboard.SW21 = 1;
 24010  004020  0100               	movlb	0	; () banked
 24011  004022  89D2               	bsf	(_keyboard+2)& (0+255),4,b
 24012  004024                     l1433:
 24013                           
 24014                           ; BSR set to: 0
 24015                           ;keyboard.c: 209: }
 24016                           ;keyboard.c: 210: if((button_state_now & 0x00400000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW23){
 24017                           
 24018                           ; BSR set to: 0
 24019  004024  BDDA               	btfsc	(_button_state_now+2)& (0+255),6,b
 24020                           
 24021                           ; BSR set to: 0
 24022  004026  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 24023  004028  D00E               	goto	l1434
 24024                           
 24025                           ; BSR set to: 0
 24026  00402A  BDD2               	btfsc	(_keyboard+2)& (0+255),6,b
 24027  00402C  D00C               	goto	l1434
 24028                           
 24029                           ; BSR set to: 0
 24030                           ;keyboard.c: 211: pitch = A2s;
 24031  00402E  0E16               	movlw	22
 24032  004030  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24033                           
 24034                           ;keyboard.c: 212: index = 9;
 24035  004032  0E09               	movlw	9
 24036  004034  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24037                           
 24038                           ; BSR set to: 0
 24039                           ;keyboard.c: 213: ON_OFF = 1;
 24040  004036  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24041                           
 24042                           ; BSR set to: 0
 24043                           ;keyboard.c: 214: playThisNotePentatonic(pitch, index);
 24044  004038  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24045  00403C  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24046  00403E  ECA4  F02A         	call	_playThisNotePentatonic
 24047                           
 24048                           ;keyboard.c: 215: keyboard.SW23 = 1;
 24049  004042  0100               	movlb	0	; () banked
 24050  004044  8DD2               	bsf	(_keyboard+2)& (0+255),6,b
 24051  004046                     l1434:
 24052                           
 24053                           ; BSR set to: 0
 24054                           ;keyboard.c: 216: }
 24055                           ;keyboard.c: 219: if(((button_state_last & 0x00000002)) && ((button_state_now & 0x000000
      +                          02) == 0) && keyboard.SW2) {
 24056                           
 24057                           ; BSR set to: 0
 24058  004046  B3D4               	btfsc	_button_state_last& (0+255),1,b
 24059                           
 24060                           ; BSR set to: 0
 24061  004048  B3D8               	btfsc	_button_state_now& (0+255),1,b
 24062  00404A  D00E               	goto	l1435
 24063                           
 24064                           ; BSR set to: 0
 24065  00404C  A3D0               	btfss	_keyboard& (0+255),1,b
 24066  00404E  D00C               	goto	l1435
 24067                           
 24068                           ; BSR set to: 0
 24069                           ;keyboard.c: 220: pitch = Cs;
 24070  004050  0E01               	movlw	1
 24071  004052  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24072                           
 24073                           ;keyboard.c: 221: index = 0;
 24074  004054  0E00               	movlw	0
 24075  004056  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24076                           
 24077                           ; BSR set to: 0
 24078                           ;keyboard.c: 222: ON_OFF = 0;
 24079  004058  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24080                           
 24081                           ; BSR set to: 0
 24082                           ;keyboard.c: 223: playThisNotePentatonic(pitch, index);
 24083  00405A  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24084  00405E  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24085  004060  ECA4  F02A         	call	_playThisNotePentatonic
 24086                           
 24087                           ;keyboard.c: 224: keyboard.SW2 = 0;
 24088  004064  0100               	movlb	0	; () banked
 24089  004066  93D0               	bcf	_keyboard& (0+255),1,b
 24090  004068                     l1435:
 24091                           
 24092                           ; BSR set to: 0
 24093                           ;keyboard.c: 225: }
 24094                           ;keyboard.c: 226: if(((button_state_last & 0x00000008)) && ((button_state_now & 0x000000
      +                          08) == 0) && keyboard.SW4) {
 24095                           
 24096                           ; BSR set to: 0
 24097  004068  B7D4               	btfsc	_button_state_last& (0+255),3,b
 24098                           
 24099                           ; BSR set to: 0
 24100  00406A  B7D8               	btfsc	_button_state_now& (0+255),3,b
 24101  00406C  D00E               	goto	l1436
 24102                           
 24103                           ; BSR set to: 0
 24104  00406E  A7D0               	btfss	_keyboard& (0+255),3,b
 24105  004070  D00C               	goto	l1436
 24106                           
 24107                           ; BSR set to: 0
 24108                           ;keyboard.c: 227: pitch = Ds;
 24109  004072  0E03               	movlw	3
 24110  004074  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24111                           
 24112                           ;keyboard.c: 228: index = 1;
 24113  004076  0E01               	movlw	1
 24114  004078  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24115                           
 24116                           ; BSR set to: 0
 24117                           ;keyboard.c: 229: ON_OFF = 0;
 24118  00407A  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24119                           
 24120                           ; BSR set to: 0
 24121                           ;keyboard.c: 230: playThisNotePentatonic(pitch, index);
 24122  00407C  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24123  004080  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24124  004082  ECA4  F02A         	call	_playThisNotePentatonic
 24125                           
 24126                           ;keyboard.c: 231: keyboard.SW4 = 0;
 24127  004086  0100               	movlb	0	; () banked
 24128  004088  97D0               	bcf	_keyboard& (0+255),3,b
 24129  00408A                     l1436:
 24130                           
 24131                           ; BSR set to: 0
 24132                           ;keyboard.c: 232: }
 24133                           ;keyboard.c: 233: if(((button_state_last & 0x00000040)) && ((button_state_now & 0x000000
      +                          40) == 0) && keyboard.SW7) {
 24134                           
 24135                           ; BSR set to: 0
 24136  00408A  BDD4               	btfsc	_button_state_last& (0+255),6,b
 24137                           
 24138                           ; BSR set to: 0
 24139  00408C  BDD8               	btfsc	_button_state_now& (0+255),6,b
 24140  00408E  D00E               	goto	l1437
 24141                           
 24142                           ; BSR set to: 0
 24143  004090  ADD0               	btfss	_keyboard& (0+255),6,b
 24144  004092  D00C               	goto	l1437
 24145                           
 24146                           ; BSR set to: 0
 24147                           ;keyboard.c: 234: pitch = Fs;
 24148  004094  0E06               	movlw	6
 24149  004096  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24150                           
 24151                           ;keyboard.c: 235: index = 2;
 24152  004098  0E02               	movlw	2
 24153  00409A  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24154                           
 24155                           ; BSR set to: 0
 24156                           ;keyboard.c: 236: ON_OFF = 0;
 24157  00409C  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24158                           
 24159                           ; BSR set to: 0
 24160                           ;keyboard.c: 237: playThisNotePentatonic(pitch, index);
 24161  00409E  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24162  0040A2  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24163  0040A4  ECA4  F02A         	call	_playThisNotePentatonic
 24164                           
 24165                           ;keyboard.c: 238: keyboard.SW7 = 0;
 24166  0040A8  0100               	movlb	0	; () banked
 24167  0040AA  9DD0               	bcf	_keyboard& (0+255),6,b
 24168  0040AC                     l1437:
 24169                           
 24170                           ; BSR set to: 0
 24171                           ;keyboard.c: 239: }
 24172                           ;keyboard.c: 240: if(((button_state_last & 0x00000100)) && ((button_state_now & 0x000001
      +                          00) == 0) && keyboard.SW9) {
 24173                           
 24174                           ; BSR set to: 0
 24175  0040AC  B1D5               	btfsc	(_button_state_last+1)& (0+255),0,b
 24176                           
 24177                           ; BSR set to: 0
 24178  0040AE  B1D9               	btfsc	(_button_state_now+1)& (0+255),0,b
 24179  0040B0  D00E               	goto	l1438
 24180                           
 24181                           ; BSR set to: 0
 24182  0040B2  A1D1               	btfss	(_keyboard+1)& (0+255),0,b
 24183  0040B4  D00C               	goto	l1438
 24184                           
 24185                           ; BSR set to: 0
 24186                           ;keyboard.c: 241: pitch = Gs;
 24187  0040B6  0E08               	movlw	8
 24188  0040B8  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24189                           
 24190                           ;keyboard.c: 242: index = 3;
 24191  0040BA  0E03               	movlw	3
 24192  0040BC  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24193                           
 24194                           ; BSR set to: 0
 24195                           ;keyboard.c: 243: ON_OFF = 0;
 24196  0040BE  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24197                           
 24198                           ; BSR set to: 0
 24199                           ;keyboard.c: 244: playThisNotePentatonic(pitch, index);
 24200  0040C0  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24201  0040C4  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24202  0040C6  ECA4  F02A         	call	_playThisNotePentatonic
 24203                           
 24204                           ;keyboard.c: 245: keyboard.SW9 = 0;
 24205  0040CA  0100               	movlb	0	; () banked
 24206  0040CC  91D1               	bcf	(_keyboard+1)& (0+255),0,b
 24207  0040CE                     l1438:
 24208                           
 24209                           ; BSR set to: 0
 24210                           ;keyboard.c: 246: }
 24211                           ;keyboard.c: 247: if(((button_state_last & 0x00000400)) && ((button_state_now & 0x000004
      +                          00) == 0) && keyboard.SW11) {
 24212                           
 24213                           ; BSR set to: 0
 24214  0040CE  B5D5               	btfsc	(_button_state_last+1)& (0+255),2,b
 24215                           
 24216                           ; BSR set to: 0
 24217  0040D0  B5D9               	btfsc	(_button_state_now+1)& (0+255),2,b
 24218  0040D2  D00E               	goto	l1439
 24219                           
 24220                           ; BSR set to: 0
 24221  0040D4  A5D1               	btfss	(_keyboard+1)& (0+255),2,b
 24222  0040D6  D00C               	goto	l1439
 24223                           
 24224                           ; BSR set to: 0
 24225                           ;keyboard.c: 248: pitch = As;
 24226  0040D8  0E0A               	movlw	10
 24227  0040DA  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24228                           
 24229                           ;keyboard.c: 249: index = 4;
 24230  0040DC  0E04               	movlw	4
 24231  0040DE  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24232                           
 24233                           ; BSR set to: 0
 24234                           ;keyboard.c: 250: ON_OFF = 0;
 24235  0040E0  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24236                           
 24237                           ; BSR set to: 0
 24238                           ;keyboard.c: 251: playThisNotePentatonic(pitch, index);
 24239  0040E2  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24240  0040E6  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24241  0040E8  ECA4  F02A         	call	_playThisNotePentatonic
 24242                           
 24243                           ;keyboard.c: 252: keyboard.SW11 = 0;
 24244  0040EC  0100               	movlb	0	; () banked
 24245  0040EE  95D1               	bcf	(_keyboard+1)& (0+255),2,b
 24246  0040F0                     l1439:
 24247                           
 24248                           ; BSR set to: 0
 24249                           ;keyboard.c: 253: }
 24250                           ;keyboard.c: 256: if(((button_state_last & 0x00002000)) && ((button_state_now & 0x000020
      +                          00) == 0) && keyboard.SW14) {
 24251                           
 24252                           ; BSR set to: 0
 24253  0040F0  BBD5               	btfsc	(_button_state_last+1)& (0+255),5,b
 24254                           
 24255                           ; BSR set to: 0
 24256  0040F2  BBD9               	btfsc	(_button_state_now+1)& (0+255),5,b
 24257  0040F4  D00E               	goto	l1440
 24258                           
 24259                           ; BSR set to: 0
 24260  0040F6  ABD1               	btfss	(_keyboard+1)& (0+255),5,b
 24261  0040F8  D00C               	goto	l1440
 24262                           
 24263                           ; BSR set to: 0
 24264                           ;keyboard.c: 257: pitch = C2s;
 24265  0040FA  0E0D               	movlw	13
 24266  0040FC  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24267                           
 24268                           ;keyboard.c: 258: index = 5;
 24269  0040FE  0E05               	movlw	5
 24270  004100  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24271                           
 24272                           ; BSR set to: 0
 24273                           ;keyboard.c: 259: ON_OFF = 0;
 24274  004102  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24275                           
 24276                           ; BSR set to: 0
 24277                           ;keyboard.c: 260: playThisNotePentatonic(pitch, index);
 24278  004104  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24279  004108  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24280  00410A  ECA4  F02A         	call	_playThisNotePentatonic
 24281                           
 24282                           ;keyboard.c: 261: keyboard.SW14 = 0;
 24283  00410E  0100               	movlb	0	; () banked
 24284  004110  9BD1               	bcf	(_keyboard+1)& (0+255),5,b
 24285  004112                     l1440:
 24286                           
 24287                           ; BSR set to: 0
 24288                           ;keyboard.c: 262: }
 24289                           ;keyboard.c: 263: if(((button_state_last & 0x00008000)) && ((button_state_now & 0x000080
      +                          00) == 0) && keyboard.SW16) {
 24290                           
 24291                           ; BSR set to: 0
 24292  004112  BFD5               	btfsc	(_button_state_last+1)& (0+255),7,b
 24293                           
 24294                           ; BSR set to: 0
 24295  004114  BFD9               	btfsc	(_button_state_now+1)& (0+255),7,b
 24296  004116  D00E               	goto	l1441
 24297                           
 24298                           ; BSR set to: 0
 24299  004118  AFD1               	btfss	(_keyboard+1)& (0+255),7,b
 24300  00411A  D00C               	goto	l1441
 24301                           
 24302                           ; BSR set to: 0
 24303                           ;keyboard.c: 264: pitch = D2s;
 24304  00411C  0E0F               	movlw	15
 24305  00411E  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24306                           
 24307                           ;keyboard.c: 265: index = 6;
 24308  004120  0E06               	movlw	6
 24309  004122  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24310                           
 24311                           ; BSR set to: 0
 24312                           ;keyboard.c: 266: ON_OFF = 0;
 24313  004124  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24314                           
 24315                           ; BSR set to: 0
 24316                           ;keyboard.c: 267: playThisNotePentatonic(pitch, index);
 24317  004126  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24318  00412A  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24319  00412C  ECA4  F02A         	call	_playThisNotePentatonic
 24320                           
 24321                           ;keyboard.c: 268: keyboard.SW16 = 0;
 24322  004130  0100               	movlb	0	; () banked
 24323  004132  9FD1               	bcf	(_keyboard+1)& (0+255),7,b
 24324  004134                     l1441:
 24325                           
 24326                           ; BSR set to: 0
 24327                           ;keyboard.c: 269: }
 24328                           ;keyboard.c: 270: if(((button_state_last & 0x00040000)) && ((button_state_now & 0x000400
      +                          00) == 0) && keyboard.SW19) {
 24329                           
 24330                           ; BSR set to: 0
 24331  004134  B5D6               	btfsc	(_button_state_last+2)& (0+255),2,b
 24332                           
 24333                           ; BSR set to: 0
 24334  004136  B5DA               	btfsc	(_button_state_now+2)& (0+255),2,b
 24335  004138  D00E               	goto	l1442
 24336                           
 24337                           ; BSR set to: 0
 24338  00413A  A5D2               	btfss	(_keyboard+2)& (0+255),2,b
 24339  00413C  D00C               	goto	l1442
 24340                           
 24341                           ; BSR set to: 0
 24342                           ;keyboard.c: 271: pitch = F2s;
 24343  00413E  0E12               	movlw	18
 24344  004140  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24345                           
 24346                           ;keyboard.c: 272: index = 7;
 24347  004142  0E07               	movlw	7
 24348  004144  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24349                           
 24350                           ; BSR set to: 0
 24351                           ;keyboard.c: 273: ON_OFF = 0;
 24352  004146  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24353                           
 24354                           ; BSR set to: 0
 24355                           ;keyboard.c: 274: playThisNotePentatonic(pitch, index);
 24356  004148  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24357  00414C  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24358  00414E  ECA4  F02A         	call	_playThisNotePentatonic
 24359                           
 24360                           ;keyboard.c: 275: keyboard.SW19 = 0;
 24361  004152  0100               	movlb	0	; () banked
 24362  004154  95D2               	bcf	(_keyboard+2)& (0+255),2,b
 24363  004156                     l1442:
 24364                           
 24365                           ; BSR set to: 0
 24366                           ;keyboard.c: 276: }
 24367                           ;keyboard.c: 277: if(((button_state_last & 0x00100000)) && ((button_state_now & 0x001000
      +                          00) == 0) && keyboard.SW21) {
 24368                           
 24369                           ; BSR set to: 0
 24370  004156  B9D6               	btfsc	(_button_state_last+2)& (0+255),4,b
 24371                           
 24372                           ; BSR set to: 0
 24373  004158  B9DA               	btfsc	(_button_state_now+2)& (0+255),4,b
 24374  00415A  D00E               	goto	l1443
 24375                           
 24376                           ; BSR set to: 0
 24377  00415C  A9D2               	btfss	(_keyboard+2)& (0+255),4,b
 24378  00415E  D00C               	goto	l1443
 24379                           
 24380                           ; BSR set to: 0
 24381                           ;keyboard.c: 278: pitch = G2s;
 24382  004160  0E14               	movlw	20
 24383  004162  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24384                           
 24385                           ;keyboard.c: 279: index = 8;
 24386  004164  0E08               	movlw	8
 24387  004166  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24388                           
 24389                           ; BSR set to: 0
 24390                           ;keyboard.c: 280: ON_OFF = 0;
 24391  004168  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24392                           
 24393                           ; BSR set to: 0
 24394                           ;keyboard.c: 281: playThisNotePentatonic(pitch, index);
 24395  00416A  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24396  00416E  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24397  004170  ECA4  F02A         	call	_playThisNotePentatonic
 24398                           
 24399                           ;keyboard.c: 282: keyboard.SW21 = 0;
 24400  004174  0100               	movlb	0	; () banked
 24401  004176  99D2               	bcf	(_keyboard+2)& (0+255),4,b
 24402  004178                     l1443:
 24403                           
 24404                           ; BSR set to: 0
 24405                           ;keyboard.c: 283: }
 24406                           ;keyboard.c: 284: if(((button_state_last & 0x00400000)) && ((button_state_now & 0x004000
      +                          00) == 0) && keyboard.SW23) {
 24407                           
 24408                           ; BSR set to: 0
 24409  004178  ADD6               	btfss	(_button_state_last+2)& (0+255),6,b
 24410  00417A  0012               	return	
 24411                           
 24412                           ; BSR set to: 0
 24413  00417C  BDDA               	btfsc	(_button_state_now+2)& (0+255),6,b
 24414  00417E  0012               	return	
 24415                           
 24416                           ; BSR set to: 0
 24417  004180  ADD2               	btfss	(_keyboard+2)& (0+255),6,b
 24418  004182  0012               	return	
 24419                           
 24420                           ; BSR set to: 0
 24421                           ;keyboard.c: 285: pitch = A2s;
 24422  004184  0E16               	movlw	22
 24423  004186  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24424                           
 24425                           ;keyboard.c: 286: index = 9;
 24426  004188  0E09               	movlw	9
 24427  00418A  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24428                           
 24429                           ; BSR set to: 0
 24430                           ;keyboard.c: 287: ON_OFF = 0;
 24431  00418C  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24432                           
 24433                           ; BSR set to: 0
 24434                           ;keyboard.c: 288: playThisNotePentatonic(pitch, index);
 24435  00418E  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24436  004192  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24437  004194  ECA4  F02A         	call	_playThisNotePentatonic
 24438                           
 24439                           ;keyboard.c: 289: keyboard.SW23 = 0;
 24440  004198  0100               	movlb	0	; () banked
 24441  00419A  9DD2               	bcf	(_keyboard+2)& (0+255),6,b
 24442  00419C  0012               	return	
 24443  00419E                     __end_of_keyboard_sharps_only_efficient:
 24444                           	opt stack 0
 24445                           tblptru	equ	0xFF8
 24446                           tblptrh	equ	0xFF7
 24447                           tblptrl	equ	0xFF6
 24448                           tablat	equ	0xFF5
 24449                           prodh	equ	0xFF4
 24450                           prodl	equ	0xFF3
 24451                           intcon	equ	0xFF2
 24452                           intcon2	equ	0xFF1
 24453                           postinc0	equ	0xFEE
 24454                           wreg	equ	0xFE8
 24455                           postinc1	equ	0xFE6
 24456                           plusw1	equ	0xFE3
 24457                           fsr1h	equ	0xFE2
 24458                           fsr1l	equ	0xFE1
 24459                           indf2	equ	0xFDF
 24460                           postinc2	equ	0xFDE
 24461                           postdec2	equ	0xFDD
 24462                           plusw2	equ	0xFDB
 24463                           fsr2h	equ	0xFDA
 24464                           fsr2l	equ	0xFD9
 24465                           status	equ	0xFD8
 24466                           
 24467 ;; *************** function _playThisNotePentatonic *****************
 24468 ;; Defined at:
 24469 ;;		line 33 in file "keyboard.c"
 24470 ;; Parameters:    Size  Location     Type
 24471 ;;  pitch           1    wreg     unsigned char 
 24472 ;;  index           1   17[BANK0 ] unsigned char 
 24473 ;; Auto vars:     Size  Location     Type
 24474 ;;  pitch           1    0[COMRAM] unsigned char 
 24475 ;;  temp_pitch      1   22[BANK0 ] unsigned char 
 24476 ;; Return value:  Size  Location     Type
 24477 ;;                  1    wreg      void 
 24478 ;; Registers used:
 24479 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24480 ;; Tracked objects:
 24481 ;;		On entry : 0/0
 24482 ;;		On exit  : 0/0
 24483 ;;		Unchanged: 0/0
 24484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 24485 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24486 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24487 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24488 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24489 ;;Total ram usage:        6 bytes
 24490 ;; Hardware stack levels used:    1
 24491 ;; Hardware stack levels required when called:   10
 24492 ;; This function calls:
 24493 ;;		_add_notes_to_arpeggio
 24494 ;;		_delete_notes_from_arpeggio
 24495 ;;		_finish_arpeggio_setup
 24496 ;;		_key_press_release_note_off
 24497 ;;		_noteOff
 24498 ;;		_noteOn
 24499 ;;		_wait_one_pulse
 24500 ;; This function is called by:
 24501 ;;		_keyboard_sharps_only_efficient
 24502 ;;		_doTheUnLatch
 24503 ;; This function uses a non-reentrant model
 24504 ;;
 24505                           
 24506                           	psect	text70
 24507  005548                     __ptext70:
 24508                           	opt stack 0
 24509  005548                     _playThisNotePentatonic:
 24510                           	opt stack 14
 24511                           
 24512                           ;keyboard.c: 35: if(ARPEGGIO_ON == 0){
 24513                           
 24514                           ; BSR set to: 0
 24515                           ;incstack = 0
 24516  005548  B604               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 24517  00554A  D058               	goto	l1408
 24518                           
 24519                           ;keyboard.c: 37: if(KEYBOARD_MODE == PENTATONIC_MAJOR) {
 24520  00554C  0E04               	movlw	4
 24521  00554E  0100               	movlb	0	; () banked
 24522  005550  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24523  005552  A4D8               	btfss	status,2,c
 24524  005554  D027               	goto	l1405
 24525                           
 24526                           ; BSR set to: 0
 24527                           ;keyboard.c: 38: if(ON_OFF == 1) {noteOn(channel,pentatonic_major_key[index],velocity);}
 24528  005556  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24529  005558  D011               	goto	l1404
 24530                           
 24531                           ; BSR set to: 0
 24532  00555A  5051               	movf	_velocity,w,c
 24533  00555C  6EE6               	movwf	postinc1,c
 24534  00555E  5171               	movf	playThisNotePentatonic@index& (0+255),w,b
 24535  005560  0D01               	mullw	1
 24536  005562  0E92               	movlw	low _pentatonic_major_key
 24537  005564  24F3               	addwf	prodl,w,c
 24538  005566  6EF6               	movwf	tblptrl,c
 24539  005568  0EF3               	movlw	high _pentatonic_major_key
 24540  00556A  20F4               	addwfc	prodh,w,c
 24541  00556C  6EF7               	movwf	tblptrh,c
 24542  00556E                     	if	0	;There are less than 3 active tblptr bytes
 24543  00556E                     	endif
 24544  00556E  0008               	tblrd		*
 24545  005570  50F5               	movf	tablat,w,c
 24546  005572  6EE6               	movwf	postinc1,c
 24547  005574  503E               	movf	_channel,w,c
 24548  005576  6EE6               	movwf	postinc1,c
 24549  005578  EC95  F045         	call	_noteOn	;wreg free
 24550  00557C                     l1404:
 24551                           
 24552                           ;keyboard.c: 39: if(ON_OFF == 0) {noteOff(channel,pentatonic_major_key[index],velocity);
      +                          }
 24553  00557C  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24554  00557E  D012               	goto	l1405
 24555  005580  5051               	movf	_velocity,w,c
 24556  005582  6EE6               	movwf	postinc1,c
 24557  005584  0100               	movlb	0	; () banked
 24558  005586  5171               	movf	playThisNotePentatonic@index& (0+255),w,b
 24559  005588  0D01               	mullw	1
 24560  00558A  0E92               	movlw	low _pentatonic_major_key
 24561  00558C  24F3               	addwf	prodl,w,c
 24562  00558E  6EF6               	movwf	tblptrl,c
 24563  005590  0EF3               	movlw	high _pentatonic_major_key
 24564  005592  20F4               	addwfc	prodh,w,c
 24565  005594  6EF7               	movwf	tblptrh,c
 24566  005596                     	if	0	;There are less than 3 active tblptr bytes
 24567  005596                     	endif
 24568  005596  0008               	tblrd		*
 24569  005598  50F5               	movf	tablat,w,c
 24570  00559A  6EE6               	movwf	postinc1,c
 24571  00559C  503E               	movf	_channel,w,c
 24572  00559E  6EE6               	movwf	postinc1,c
 24573  0055A0  EC4A  F04A         	call	_noteOff	;wreg free
 24574  0055A4                     l1405:
 24575                           
 24576                           ;keyboard.c: 40: }
 24577                           ;keyboard.c: 42: if(KEYBOARD_MODE == PENTATONIC_MINOR) {
 24578  0055A4  0E05               	movlw	5
 24579  0055A6  0100               	movlb	0	; () banked
 24580  0055A8  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24581  0055AA  A4D8               	btfss	status,2,c
 24582  0055AC  D027               	goto	l1408
 24583                           
 24584                           ; BSR set to: 0
 24585                           ;keyboard.c: 43: if(ON_OFF == 1) {noteOn(channel,pentatonic_minor_key[index],velocity);}
 24586  0055AE  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24587  0055B0  D011               	goto	l1407
 24588                           
 24589                           ; BSR set to: 0
 24590  0055B2  5051               	movf	_velocity,w,c
 24591  0055B4  6EE6               	movwf	postinc1,c
 24592  0055B6  5171               	movf	playThisNotePentatonic@index& (0+255),w,b
 24593  0055B8  0D01               	mullw	1
 24594  0055BA  0E87               	movlw	low _pentatonic_minor_key
 24595  0055BC  24F3               	addwf	prodl,w,c
 24596  0055BE  6EF6               	movwf	tblptrl,c
 24597  0055C0  0EF3               	movlw	high _pentatonic_minor_key
 24598  0055C2  20F4               	addwfc	prodh,w,c
 24599  0055C4  6EF7               	movwf	tblptrh,c
 24600  0055C6                     	if	0	;There are less than 3 active tblptr bytes
 24601  0055C6                     	endif
 24602  0055C6  0008               	tblrd		*
 24603  0055C8  50F5               	movf	tablat,w,c
 24604  0055CA  6EE6               	movwf	postinc1,c
 24605  0055CC  503E               	movf	_channel,w,c
 24606  0055CE  6EE6               	movwf	postinc1,c
 24607  0055D0  EC95  F045         	call	_noteOn	;wreg free
 24608  0055D4                     l1407:
 24609                           
 24610                           ;keyboard.c: 44: if(ON_OFF == 0) {noteOff(channel,pentatonic_minor_key[index],velocity);
      +                          }
 24611  0055D4  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24612  0055D6  D012               	goto	l1408
 24613  0055D8  5051               	movf	_velocity,w,c
 24614  0055DA  6EE6               	movwf	postinc1,c
 24615  0055DC  0100               	movlb	0	; () banked
 24616  0055DE  5171               	movf	playThisNotePentatonic@index& (0+255),w,b
 24617  0055E0  0D01               	mullw	1
 24618  0055E2  0E87               	movlw	low _pentatonic_minor_key
 24619  0055E4  24F3               	addwf	prodl,w,c
 24620  0055E6  6EF6               	movwf	tblptrl,c
 24621  0055E8  0EF3               	movlw	high _pentatonic_minor_key
 24622  0055EA  20F4               	addwfc	prodh,w,c
 24623  0055EC  6EF7               	movwf	tblptrh,c
 24624  0055EE                     	if	0	;There are less than 3 active tblptr bytes
 24625  0055EE                     	endif
 24626  0055EE  0008               	tblrd		*
 24627  0055F0  50F5               	movf	tablat,w,c
 24628  0055F2  6EE6               	movwf	postinc1,c
 24629  0055F4  503E               	movf	_channel,w,c
 24630  0055F6  6EE6               	movwf	postinc1,c
 24631  0055F8  EC4A  F04A         	call	_noteOff	;wreg free
 24632  0055FC                     l1408:
 24633                           
 24634                           ;keyboard.c: 45: }
 24635                           ;keyboard.c: 46: }
 24636                           ;keyboard.c: 49: if(ARPEGGIO_ON == 1){
 24637  0055FC  A604               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 24638  0055FE  0012               	return	
 24639                           
 24640                           ;keyboard.c: 51: unsigned char temp_pitch;
 24641                           ;keyboard.c: 53: if(KEYBOARD_MODE == PENTATONIC_MAJOR) {
 24642  005600  0E04               	movlw	4
 24643  005602  0100               	movlb	0	; () banked
 24644  005604  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24645  005606  A4D8               	btfss	status,2,c
 24646  005608  D00B               	goto	l1410
 24647                           
 24648                           ; BSR set to: 0
 24649                           ;keyboard.c: 54: temp_pitch = pentatonic_major_key[index];
 24650  00560A  5171               	movf	playThisNotePentatonic@index& (0+255),w,b
 24651  00560C  0D01               	mullw	1
 24652  00560E  0E92               	movlw	low _pentatonic_major_key
 24653  005610  24F3               	addwf	prodl,w,c
 24654  005612  6EF6               	movwf	tblptrl,c
 24655  005614  0EF3               	movlw	high _pentatonic_major_key
 24656  005616  20F4               	addwfc	prodh,w,c
 24657  005618  6EF7               	movwf	tblptrh,c
 24658  00561A                     	if	0	;There are less than 3 active tblptr bytes
 24659  00561A                     	endif
 24660  00561A  0008               	tblrd		*
 24661  00561C  CFF5 F076          	movff	tablat,playThisNotePentatonic@temp_pitch
 24662  005620                     l1410:
 24663                           
 24664                           ; BSR set to: 0
 24665                           ;keyboard.c: 55: }
 24666                           ;keyboard.c: 57: if(KEYBOARD_MODE == PENTATONIC_MINOR) {
 24667                           
 24668                           ; BSR set to: 0
 24669  005620  0E05               	movlw	5
 24670  005622  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24671  005624  A4D8               	btfss	status,2,c
 24672  005626  D00B               	goto	l1411
 24673                           
 24674                           ; BSR set to: 0
 24675                           ;keyboard.c: 58: temp_pitch = pentatonic_minor_key[index];
 24676  005628  5171               	movf	playThisNotePentatonic@index& (0+255),w,b
 24677  00562A  0D01               	mullw	1
 24678  00562C  0E87               	movlw	low _pentatonic_minor_key
 24679  00562E  24F3               	addwf	prodl,w,c
 24680  005630  6EF6               	movwf	tblptrl,c
 24681  005632  0EF3               	movlw	high _pentatonic_minor_key
 24682  005634  20F4               	addwfc	prodh,w,c
 24683  005636  6EF7               	movwf	tblptrh,c
 24684  005638                     	if	0	;There are less than 3 active tblptr bytes
 24685  005638                     	endif
 24686  005638  0008               	tblrd		*
 24687  00563A  CFF5 F076          	movff	tablat,playThisNotePentatonic@temp_pitch
 24688  00563E                     l1411:
 24689                           
 24690                           ; BSR set to: 0
 24691                           ;keyboard.c: 59: }
 24692                           ;keyboard.c: 61: if(ON_OFF == 1) {
 24693                           
 24694                           ; BSR set to: 0
 24695  00563E  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24696  005640  D019               	goto	l1412
 24697                           
 24698                           ; BSR set to: 0
 24699                           ;keyboard.c: 64: TMR0ON = 0;
 24700  005642  9ED5               	bcf	4053,7,c	;volatile
 24701                           
 24702                           ;keyboard.c: 66: parallel = temp_pitch;
 24703  005644  C076  F030         	movff	playThisNotePentatonic@temp_pitch,_parallel
 24704                           
 24705                           ; BSR set to: 0
 24706                           ;keyboard.c: 69: if(NUM_NOTES_PRESSED > 0){
 24707  005648  502F               	movf	_NUM_NOTES_PRESSED,w,c
 24708  00564A  B4D8               	btfsc	status,2,c
 24709  00564C  D00A               	goto	l1413
 24710                           
 24711                           ; BSR set to: 0
 24712                           ;keyboard.c: 70: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 24713  00564E  0E00               	movlw	0
 24714  005650  B203               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 24715  005652  0E01               	movlw	1
 24716  005654  ECEF  F04B         	call	_wait_one_pulse
 24717                           
 24718                           ;keyboard.c: 71: if(note_off_was_sent == 0) {key_press_release_note_off();}
 24719  005658  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 24720  00565A  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 24721                           
 24722                           ;keyboard.c: 72: TIMER_OVERFLOWS = 0;
 24723  00565E  0E00               	movlw	0
 24724  005660  6E2E               	movwf	_TIMER_OVERFLOWS,c
 24725  005662                     l1413:
 24726                           
 24727                           ;keyboard.c: 73: }
 24728                           ;keyboard.c: 75: add_notes_to_arpeggio(temp_pitch);
 24729  005662  0100               	movlb	0	; () banked
 24730  005664  5176               	movf	playThisNotePentatonic@temp_pitch& (0+255),w,b
 24731  005666  ECF4  F034         	call	_add_notes_to_arpeggio
 24732                           
 24733                           ;keyboard.c: 87: if(LATCH == 0) {latch_was_pressed = 0;}
 24734  00566A  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 24735  00566C  9A03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 24736                           
 24737                           ;keyboard.c: 90: finish_arpeggio_setup();
 24738  00566E  EC84  F04C         	call	_finish_arpeggio_setup	;wreg free
 24739                           
 24740                           ;keyboard.c: 93: TMR0ON = 1;
 24741  005672  8ED5               	bsf	4053,7,c	;volatile
 24742  005674                     l1412:
 24743                           
 24744                           ;keyboard.c: 94: }
 24745                           ;keyboard.c: 96: if((ON_OFF == 0) && (LATCH == 0)) {
 24746  005674  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24747  005676  0012               	return	
 24748  005678  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 24749  00567A  0012               	return	
 24750                           
 24751                           ;keyboard.c: 99: TMR0ON = 0;
 24752  00567C  9ED5               	bcf	4053,7,c	;volatile
 24753                           
 24754                           ;keyboard.c: 102: if(NUM_NOTES_PRESSED > 0){
 24755  00567E  502F               	movf	_NUM_NOTES_PRESSED,w,c
 24756  005680  B4D8               	btfsc	status,2,c
 24757  005682  D00A               	goto	l1417
 24758                           
 24759                           ;keyboard.c: 103: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 24760  005684  0E00               	movlw	0
 24761  005686  B003               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 24762  005688  0E01               	movlw	1
 24763  00568A  ECEF  F04B         	call	_wait_one_pulse
 24764                           
 24765                           ;keyboard.c: 104: if(note_off_was_sent == 0) {key_press_release_note_off();}
 24766  00568E  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 24767  005690  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 24768                           
 24769                           ;keyboard.c: 105: TIMER_OVERFLOWS = 0;
 24770  005694  0E00               	movlw	0
 24771  005696  6E2E               	movwf	_TIMER_OVERFLOWS,c
 24772  005698                     l1417:
 24773                           
 24774                           ;keyboard.c: 106: }
 24775                           ;keyboard.c: 108: delete_notes_from_arpeggio(temp_pitch);
 24776  005698  0100               	movlb	0	; () banked
 24777  00569A  5176               	movf	playThisNotePentatonic@temp_pitch& (0+255),w,b
 24778  00569C  EC5C  F04B         	call	_delete_notes_from_arpeggio
 24779                           
 24780                           ;keyboard.c: 118: if(temp_pitch == parallel){NUM_NOTES_PRESSED = 0;}
 24781  0056A0  C030  F072         	movff	_parallel,??_playThisNotePentatonic
 24782  0056A4  0100               	movlb	0	; () banked
 24783  0056A6  6B73               	clrf	(??_playThisNotePentatonic+1)& (0+255),b
 24784  0056A8  BF72               	btfsc	??_playThisNotePentatonic& (0+255),7,b
 24785  0056AA  0773               	decf	(??_playThisNotePentatonic+1)& (0+255),f,b
 24786  0056AC  5176               	movf	playThisNotePentatonic@temp_pitch& (0+255),w,b
 24787  0056AE  6F74               	movwf	(??_playThisNotePentatonic+2)& (0+255),b
 24788  0056B0  6B75               	clrf	(??_playThisNotePentatonic+3)& (0+255),b
 24789  0056B2  5172               	movf	??_playThisNotePentatonic& (0+255),w,b
 24790  0056B4  1974               	xorwf	(??_playThisNotePentatonic+2)& (0+255),w,b
 24791  0056B6  E106               	bnz	l27044
 24792  0056B8  5173               	movf	(??_playThisNotePentatonic+1)& (0+255),w,b
 24793  0056BA  1975               	xorwf	(??_playThisNotePentatonic+3)& (0+255),w,b
 24794  0056BC  A4D8               	btfss	status,2,c
 24795  0056BE  D002               	goto	l1419
 24796                           
 24797                           ; BSR set to: 0
 24798  0056C0  0E00               	movlw	0
 24799  0056C2  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 24800  0056C4                     l1419:
 24801  0056C4                     l27044:
 24802                           
 24803                           ; BSR set to: 0
 24804                           ;keyboard.c: 121: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 24805  0056C4  BC03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 24806                           
 24807                           ; BSR set to: 0
 24808  0056C6  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 24809  0056C8  D001               	goto	l1420
 24810                           
 24811                           ; BSR set to: 0
 24812                           ;keyboard.c: 122: LATCH = 1;
 24813  0056CA  8004               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 24814  0056CC                     l1420:
 24815                           
 24816                           ; BSR set to: 0
 24817                           ;keyboard.c: 123: }
 24818                           ;keyboard.c: 126: if((UN_LATCH_MODE == 0) && (latch_was_pressed == 1)){
 24819  0056CC  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 24820                           
 24821                           ; BSR set to: 0
 24822  0056CE  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 24823  0056D0  D004               	goto	l1421
 24824                           
 24825                           ; BSR set to: 0
 24826                           ;keyboard.c: 127: NUM_NOTES_PRESSED = 0;
 24827  0056D2  0E00               	movlw	0
 24828  0056D4  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 24829                           
 24830                           ;keyboard.c: 128: ARRAY_INDEX = 0;
 24831  0056D6  0E00               	movlw	0
 24832  0056D8  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 24833  0056DA                     l1421:
 24834                           
 24835                           ; BSR set to: 0
 24836                           ;keyboard.c: 129: }
 24837                           ;keyboard.c: 132: finish_arpeggio_setup();
 24838                           
 24839                           ; BSR set to: 0
 24840  0056DA  EC84  F04C         	call	_finish_arpeggio_setup	;wreg free
 24841                           
 24842                           ;keyboard.c: 135: TMR0ON = 1;
 24843  0056DE  8ED5               	bsf	4053,7,c	;volatile
 24844  0056E0  0012               	return	
 24845  0056E2                     __end_of_playThisNotePentatonic:
 24846                           	opt stack 0
 24847                           tblptru	equ	0xFF8
 24848                           tblptrh	equ	0xFF7
 24849                           tblptrl	equ	0xFF6
 24850                           tablat	equ	0xFF5
 24851                           prodh	equ	0xFF4
 24852                           prodl	equ	0xFF3
 24853                           intcon	equ	0xFF2
 24854                           intcon2	equ	0xFF1
 24855                           postinc0	equ	0xFEE
 24856                           wreg	equ	0xFE8
 24857                           postinc1	equ	0xFE6
 24858                           plusw1	equ	0xFE3
 24859                           fsr1h	equ	0xFE2
 24860                           fsr1l	equ	0xFE1
 24861                           indf2	equ	0xFDF
 24862                           postinc2	equ	0xFDE
 24863                           postdec2	equ	0xFDD
 24864                           plusw2	equ	0xFDB
 24865                           fsr2h	equ	0xFDA
 24866                           fsr2l	equ	0xFD9
 24867                           status	equ	0xFD8
 24868                           
 24869 ;; *************** function _keyboard_eight_note_efficient *****************
 24870 ;; Defined at:
 24871 ;;		line 1369 in file "keyboard.c"
 24872 ;; Parameters:    Size  Location     Type
 24873 ;;		None
 24874 ;; Auto vars:     Size  Location     Type
 24875 ;;  index           1   27[BANK0 ] unsigned char 
 24876 ;;  pitch           1   26[BANK0 ] unsigned char 
 24877 ;; Return value:  Size  Location     Type
 24878 ;;                  1    wreg      void 
 24879 ;; Registers used:
 24880 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24881 ;; Tracked objects:
 24882 ;;		On entry : 0/0
 24883 ;;		On exit  : 0/0
 24884 ;;		Unchanged: 0/0
 24885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 24886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24887 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24889 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24890 ;;Total ram usage:        2 bytes
 24891 ;; Hardware stack levels used:    1
 24892 ;; Hardware stack levels required when called:   12
 24893 ;; This function calls:
 24894 ;;		_playThisNote8
 24895 ;; This function is called by:
 24896 ;;		_processKeyboard
 24897 ;; This function uses a non-reentrant model
 24898 ;;
 24899                           
 24900                           	psect	text71
 24901  002BE2                     __ptext71:
 24902                           	opt stack 0
 24903  002BE2                     _keyboard_eight_note_efficient:
 24904                           	opt stack 13
 24905                           
 24906                           ;keyboard.c: 1371: unsigned char pitch;
 24907                           ;keyboard.c: 1372: unsigned char index;
 24908                           ;keyboard.c: 1375: if((button_state_now & 0x00000001) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW1){
 24909                           
 24910                           ;incstack = 0
 24911  002BE2  0100               	movlb	0	; () banked
 24912  002BE4  B1D8               	btfsc	_button_state_now& (0+255),0,b
 24913                           
 24914                           ; BSR set to: 0
 24915  002BE6  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 24916  002BE8  D00E               	goto	l1746
 24917                           
 24918                           ; BSR set to: 0
 24919  002BEA  B1D0               	btfsc	_keyboard& (0+255),0,b
 24920  002BEC  D00C               	goto	l1746
 24921                           
 24922                           ; BSR set to: 0
 24923                           ;keyboard.c: 1376: pitch = C;
 24924  002BEE  0E00               	movlw	0
 24925  002BF0  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 24926                           
 24927                           ;keyboard.c: 1377: index = 0;
 24928  002BF2  0E00               	movlw	0
 24929  002BF4  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 24930                           
 24931                           ; BSR set to: 0
 24932                           ;keyboard.c: 1378: ON_OFF = 1;
 24933  002BF6  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24934                           
 24935                           ; BSR set to: 0
 24936                           ;keyboard.c: 1379: playThisNote8(pitch, index);
 24937  002BF8  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 24938  002BFC  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 24939  002BFE  ECD7  F013         	call	_playThisNote8
 24940                           
 24941                           ;keyboard.c: 1380: keyboard.SW1 = 1;
 24942  002C02  0100               	movlb	0	; () banked
 24943  002C04  81D0               	bsf	_keyboard& (0+255),0,b
 24944  002C06                     l1746:
 24945                           
 24946                           ; BSR set to: 0
 24947                           ;keyboard.c: 1381: }
 24948                           ;keyboard.c: 1382: if((button_state_now & 0x00000004) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW3){
 24949                           
 24950                           ; BSR set to: 0
 24951  002C06  B5D8               	btfsc	_button_state_now& (0+255),2,b
 24952                           
 24953                           ; BSR set to: 0
 24954  002C08  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 24955  002C0A  D00E               	goto	l1747
 24956                           
 24957                           ; BSR set to: 0
 24958  002C0C  B5D0               	btfsc	_keyboard& (0+255),2,b
 24959  002C0E  D00C               	goto	l1747
 24960                           
 24961                           ; BSR set to: 0
 24962                           ;keyboard.c: 1383: pitch = D;
 24963  002C10  0E02               	movlw	2
 24964  002C12  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 24965                           
 24966                           ;keyboard.c: 1384: index = 1;
 24967  002C14  0E01               	movlw	1
 24968  002C16  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 24969                           
 24970                           ; BSR set to: 0
 24971                           ;keyboard.c: 1385: ON_OFF = 1;
 24972  002C18  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24973                           
 24974                           ; BSR set to: 0
 24975                           ;keyboard.c: 1386: playThisNote8(pitch, index);
 24976  002C1A  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 24977  002C1E  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 24978  002C20  ECD7  F013         	call	_playThisNote8
 24979                           
 24980                           ;keyboard.c: 1387: keyboard.SW3 = 1;
 24981  002C24  0100               	movlb	0	; () banked
 24982  002C26  85D0               	bsf	_keyboard& (0+255),2,b
 24983  002C28                     l1747:
 24984                           
 24985                           ; BSR set to: 0
 24986                           ;keyboard.c: 1388: }
 24987                           ;keyboard.c: 1389: if((button_state_now & 0x00000010) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW5){
 24988                           
 24989                           ; BSR set to: 0
 24990  002C28  B9D8               	btfsc	_button_state_now& (0+255),4,b
 24991                           
 24992                           ; BSR set to: 0
 24993  002C2A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 24994  002C2C  D00E               	goto	l1748
 24995                           
 24996                           ; BSR set to: 0
 24997  002C2E  B9D0               	btfsc	_keyboard& (0+255),4,b
 24998  002C30  D00C               	goto	l1748
 24999                           
 25000                           ; BSR set to: 0
 25001                           ;keyboard.c: 1390: pitch = E;
 25002  002C32  0E04               	movlw	4
 25003  002C34  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25004                           
 25005                           ;keyboard.c: 1391: index = 2;
 25006  002C36  0E02               	movlw	2
 25007  002C38  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25008                           
 25009                           ; BSR set to: 0
 25010                           ;keyboard.c: 1392: ON_OFF = 1;
 25011  002C3A  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25012                           
 25013                           ; BSR set to: 0
 25014                           ;keyboard.c: 1393: playThisNote8(pitch, index);
 25015  002C3C  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25016  002C40  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25017  002C42  ECD7  F013         	call	_playThisNote8
 25018                           
 25019                           ;keyboard.c: 1394: keyboard.SW5 = 5;
 25020  002C46  0100               	movlb	0	; () banked
 25021  002C48  89D0               	bsf	_keyboard& (0+255),4,b
 25022  002C4A                     l1748:
 25023                           
 25024                           ; BSR set to: 0
 25025                           ;keyboard.c: 1395: }
 25026                           ;keyboard.c: 1396: if((button_state_now & 0x00000020) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW6){
 25027                           
 25028                           ; BSR set to: 0
 25029  002C4A  BBD8               	btfsc	_button_state_now& (0+255),5,b
 25030                           
 25031                           ; BSR set to: 0
 25032  002C4C  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25033  002C4E  D00E               	goto	l1749
 25034                           
 25035                           ; BSR set to: 0
 25036  002C50  BBD0               	btfsc	_keyboard& (0+255),5,b
 25037  002C52  D00C               	goto	l1749
 25038                           
 25039                           ; BSR set to: 0
 25040                           ;keyboard.c: 1397: pitch = F;
 25041  002C54  0E05               	movlw	5
 25042  002C56  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25043                           
 25044                           ;keyboard.c: 1398: index = 3;
 25045  002C58  0E03               	movlw	3
 25046  002C5A  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25047                           
 25048                           ; BSR set to: 0
 25049                           ;keyboard.c: 1399: ON_OFF = 1;
 25050  002C5C  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25051                           
 25052                           ; BSR set to: 0
 25053                           ;keyboard.c: 1400: playThisNote8(pitch, index);
 25054  002C5E  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25055  002C62  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25056  002C64  ECD7  F013         	call	_playThisNote8
 25057                           
 25058                           ;keyboard.c: 1401: keyboard.SW6 = 1;
 25059  002C68  0100               	movlb	0	; () banked
 25060  002C6A  8BD0               	bsf	_keyboard& (0+255),5,b
 25061  002C6C                     l1749:
 25062                           
 25063                           ; BSR set to: 0
 25064                           ;keyboard.c: 1402: }
 25065                           ;keyboard.c: 1403: if((button_state_now & 0x00000080) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW8){
 25066                           
 25067                           ; BSR set to: 0
 25068  002C6C  BFD8               	btfsc	_button_state_now& (0+255),7,b
 25069                           
 25070                           ; BSR set to: 0
 25071  002C6E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25072  002C70  D00E               	goto	l1750
 25073                           
 25074                           ; BSR set to: 0
 25075  002C72  BFD0               	btfsc	_keyboard& (0+255),7,b
 25076  002C74  D00C               	goto	l1750
 25077                           
 25078                           ; BSR set to: 0
 25079                           ;keyboard.c: 1404: pitch = G;
 25080  002C76  0E07               	movlw	7
 25081  002C78  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25082                           
 25083                           ;keyboard.c: 1405: index = 4;
 25084  002C7A  0E04               	movlw	4
 25085  002C7C  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25086                           
 25087                           ; BSR set to: 0
 25088                           ;keyboard.c: 1406: ON_OFF = 1;
 25089  002C7E  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25090                           
 25091                           ; BSR set to: 0
 25092                           ;keyboard.c: 1407: playThisNote8(pitch, index);
 25093  002C80  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25094  002C84  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25095  002C86  ECD7  F013         	call	_playThisNote8
 25096                           
 25097                           ;keyboard.c: 1408: keyboard.SW8 = 1;
 25098  002C8A  0100               	movlb	0	; () banked
 25099  002C8C  8FD0               	bsf	_keyboard& (0+255),7,b
 25100  002C8E                     l1750:
 25101                           
 25102                           ; BSR set to: 0
 25103                           ;keyboard.c: 1409: }
 25104                           ;keyboard.c: 1410: if((button_state_now & 0x00000200) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW10){
 25105                           
 25106                           ; BSR set to: 0
 25107  002C8E  B3D9               	btfsc	(_button_state_now+1)& (0+255),1,b
 25108                           
 25109                           ; BSR set to: 0
 25110  002C90  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25111  002C92  D00E               	goto	l1751
 25112                           
 25113                           ; BSR set to: 0
 25114  002C94  B3D1               	btfsc	(_keyboard+1)& (0+255),1,b
 25115  002C96  D00C               	goto	l1751
 25116                           
 25117                           ; BSR set to: 0
 25118                           ;keyboard.c: 1411: pitch = A;
 25119  002C98  0E09               	movlw	9
 25120  002C9A  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25121                           
 25122                           ;keyboard.c: 1412: index = 5;
 25123  002C9C  0E05               	movlw	5
 25124  002C9E  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25125                           
 25126                           ; BSR set to: 0
 25127                           ;keyboard.c: 1413: ON_OFF = 1;
 25128  002CA0  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25129                           
 25130                           ; BSR set to: 0
 25131                           ;keyboard.c: 1414: playThisNote8(pitch, index);
 25132  002CA2  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25133  002CA6  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25134  002CA8  ECD7  F013         	call	_playThisNote8
 25135                           
 25136                           ;keyboard.c: 1415: keyboard.SW10 = 1;
 25137  002CAC  0100               	movlb	0	; () banked
 25138  002CAE  83D1               	bsf	(_keyboard+1)& (0+255),1,b
 25139  002CB0                     l1751:
 25140                           
 25141                           ; BSR set to: 0
 25142                           ;keyboard.c: 1416: }
 25143                           ;keyboard.c: 1417: if((button_state_now & 0x00000800) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW12){
 25144                           
 25145                           ; BSR set to: 0
 25146  002CB0  B7D9               	btfsc	(_button_state_now+1)& (0+255),3,b
 25147                           
 25148                           ; BSR set to: 0
 25149  002CB2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25150  002CB4  D00E               	goto	l1752
 25151                           
 25152                           ; BSR set to: 0
 25153  002CB6  B7D1               	btfsc	(_keyboard+1)& (0+255),3,b
 25154  002CB8  D00C               	goto	l1752
 25155                           
 25156                           ; BSR set to: 0
 25157                           ;keyboard.c: 1418: pitch = B;
 25158  002CBA  0E0B               	movlw	11
 25159  002CBC  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25160                           
 25161                           ;keyboard.c: 1419: index = 6;
 25162  002CBE  0E06               	movlw	6
 25163  002CC0  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25164                           
 25165                           ; BSR set to: 0
 25166                           ;keyboard.c: 1420: ON_OFF = 1;
 25167  002CC2  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25168                           
 25169                           ; BSR set to: 0
 25170                           ;keyboard.c: 1421: playThisNote8(pitch, index);
 25171  002CC4  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25172  002CC8  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25173  002CCA  ECD7  F013         	call	_playThisNote8
 25174                           
 25175                           ;keyboard.c: 1422: keyboard.SW12 = 1;
 25176  002CCE  0100               	movlb	0	; () banked
 25177  002CD0  87D1               	bsf	(_keyboard+1)& (0+255),3,b
 25178  002CD2                     l1752:
 25179                           
 25180                           ; BSR set to: 0
 25181                           ;keyboard.c: 1423: }
 25182                           ;keyboard.c: 1424: if((button_state_now & 0x00001000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW13){
 25183                           
 25184                           ; BSR set to: 0
 25185  002CD2  B9D9               	btfsc	(_button_state_now+1)& (0+255),4,b
 25186                           
 25187                           ; BSR set to: 0
 25188  002CD4  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25189  002CD6  D00E               	goto	l1753
 25190                           
 25191                           ; BSR set to: 0
 25192  002CD8  B9D1               	btfsc	(_keyboard+1)& (0+255),4,b
 25193  002CDA  D00C               	goto	l1753
 25194                           
 25195                           ; BSR set to: 0
 25196                           ;keyboard.c: 1425: pitch = C2;
 25197  002CDC  0E0C               	movlw	12
 25198  002CDE  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25199                           
 25200                           ;keyboard.c: 1426: index = 7;
 25201  002CE0  0E07               	movlw	7
 25202  002CE2  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25203                           
 25204                           ; BSR set to: 0
 25205                           ;keyboard.c: 1427: ON_OFF = 1;
 25206  002CE4  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25207                           
 25208                           ; BSR set to: 0
 25209                           ;keyboard.c: 1428: playThisNote8(pitch, index);
 25210  002CE6  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25211  002CEA  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25212  002CEC  ECD7  F013         	call	_playThisNote8
 25213                           
 25214                           ;keyboard.c: 1429: keyboard.SW13 = 1;
 25215  002CF0  0100               	movlb	0	; () banked
 25216  002CF2  89D1               	bsf	(_keyboard+1)& (0+255),4,b
 25217  002CF4                     l1753:
 25218                           
 25219                           ; BSR set to: 0
 25220                           ;keyboard.c: 1430: }
 25221                           ;keyboard.c: 1431: if((button_state_now & 0x00004000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW15){
 25222                           
 25223                           ; BSR set to: 0
 25224  002CF4  BDD9               	btfsc	(_button_state_now+1)& (0+255),6,b
 25225                           
 25226                           ; BSR set to: 0
 25227  002CF6  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25228  002CF8  D00E               	goto	l1754
 25229                           
 25230                           ; BSR set to: 0
 25231  002CFA  BDD1               	btfsc	(_keyboard+1)& (0+255),6,b
 25232  002CFC  D00C               	goto	l1754
 25233                           
 25234                           ; BSR set to: 0
 25235                           ;keyboard.c: 1432: pitch = D2;
 25236  002CFE  0E0E               	movlw	14
 25237  002D00  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25238                           
 25239                           ;keyboard.c: 1433: index = 8;
 25240  002D02  0E08               	movlw	8
 25241  002D04  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25242                           
 25243                           ; BSR set to: 0
 25244                           ;keyboard.c: 1434: ON_OFF = 1;
 25245  002D06  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25246                           
 25247                           ; BSR set to: 0
 25248                           ;keyboard.c: 1435: playThisNote8(pitch, index);
 25249  002D08  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25250  002D0C  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25251  002D0E  ECD7  F013         	call	_playThisNote8
 25252                           
 25253                           ;keyboard.c: 1436: keyboard.SW15 = 1;
 25254  002D12  0100               	movlb	0	; () banked
 25255  002D14  8DD1               	bsf	(_keyboard+1)& (0+255),6,b
 25256  002D16                     l1754:
 25257                           
 25258                           ; BSR set to: 0
 25259                           ;keyboard.c: 1437: }
 25260                           ;keyboard.c: 1438: if((button_state_now & 0x00010000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW17){
 25261                           
 25262                           ; BSR set to: 0
 25263  002D16  B1DA               	btfsc	(_button_state_now+2)& (0+255),0,b
 25264                           
 25265                           ; BSR set to: 0
 25266  002D18  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25267  002D1A  D00E               	goto	l1755
 25268                           
 25269                           ; BSR set to: 0
 25270  002D1C  B1D2               	btfsc	(_keyboard+2)& (0+255),0,b
 25271  002D1E  D00C               	goto	l1755
 25272                           
 25273                           ; BSR set to: 0
 25274                           ;keyboard.c: 1439: pitch = E2;
 25275  002D20  0E10               	movlw	16
 25276  002D22  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25277                           
 25278                           ;keyboard.c: 1440: index = 9;
 25279  002D24  0E09               	movlw	9
 25280  002D26  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25281                           
 25282                           ; BSR set to: 0
 25283                           ;keyboard.c: 1441: ON_OFF = 1;
 25284  002D28  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25285                           
 25286                           ; BSR set to: 0
 25287                           ;keyboard.c: 1442: playThisNote8(pitch, index);
 25288  002D2A  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25289  002D2E  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25290  002D30  ECD7  F013         	call	_playThisNote8
 25291                           
 25292                           ;keyboard.c: 1443: keyboard.SW17 = 1;
 25293  002D34  0100               	movlb	0	; () banked
 25294  002D36  81D2               	bsf	(_keyboard+2)& (0+255),0,b
 25295  002D38                     l1755:
 25296                           
 25297                           ; BSR set to: 0
 25298                           ;keyboard.c: 1444: }
 25299                           ;keyboard.c: 1445: if((button_state_now & 0x00020000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW18){
 25300                           
 25301                           ; BSR set to: 0
 25302  002D38  B3DA               	btfsc	(_button_state_now+2)& (0+255),1,b
 25303                           
 25304                           ; BSR set to: 0
 25305  002D3A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25306  002D3C  D00E               	goto	l1756
 25307                           
 25308                           ; BSR set to: 0
 25309  002D3E  B3D2               	btfsc	(_keyboard+2)& (0+255),1,b
 25310  002D40  D00C               	goto	l1756
 25311                           
 25312                           ; BSR set to: 0
 25313                           ;keyboard.c: 1446: pitch = F2;
 25314  002D42  0E11               	movlw	17
 25315  002D44  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25316                           
 25317                           ;keyboard.c: 1447: index = 10;
 25318  002D46  0E0A               	movlw	10
 25319  002D48  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25320                           
 25321                           ; BSR set to: 0
 25322                           ;keyboard.c: 1448: ON_OFF = 1;
 25323  002D4A  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25324                           
 25325                           ; BSR set to: 0
 25326                           ;keyboard.c: 1449: playThisNote8(pitch, index);
 25327  002D4C  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25328  002D50  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25329  002D52  ECD7  F013         	call	_playThisNote8
 25330                           
 25331                           ;keyboard.c: 1450: keyboard.SW18 = 1;
 25332  002D56  0100               	movlb	0	; () banked
 25333  002D58  83D2               	bsf	(_keyboard+2)& (0+255),1,b
 25334  002D5A                     l1756:
 25335                           
 25336                           ; BSR set to: 0
 25337                           ;keyboard.c: 1451: }
 25338                           ;keyboard.c: 1452: if((button_state_now & 0x00080000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW20){
 25339                           
 25340                           ; BSR set to: 0
 25341  002D5A  B7DA               	btfsc	(_button_state_now+2)& (0+255),3,b
 25342                           
 25343                           ; BSR set to: 0
 25344  002D5C  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25345  002D5E  D00E               	goto	l1757
 25346                           
 25347                           ; BSR set to: 0
 25348  002D60  B7D2               	btfsc	(_keyboard+2)& (0+255),3,b
 25349  002D62  D00C               	goto	l1757
 25350                           
 25351                           ; BSR set to: 0
 25352                           ;keyboard.c: 1453: pitch = G2;
 25353  002D64  0E13               	movlw	19
 25354  002D66  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25355                           
 25356                           ;keyboard.c: 1454: index = 11;
 25357  002D68  0E0B               	movlw	11
 25358  002D6A  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25359                           
 25360                           ; BSR set to: 0
 25361                           ;keyboard.c: 1455: ON_OFF = 1;
 25362  002D6C  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25363                           
 25364                           ; BSR set to: 0
 25365                           ;keyboard.c: 1456: playThisNote8(pitch, index);
 25366  002D6E  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25367  002D72  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25368  002D74  ECD7  F013         	call	_playThisNote8
 25369                           
 25370                           ;keyboard.c: 1457: keyboard.SW20 = 1;
 25371  002D78  0100               	movlb	0	; () banked
 25372  002D7A  87D2               	bsf	(_keyboard+2)& (0+255),3,b
 25373  002D7C                     l1757:
 25374                           
 25375                           ; BSR set to: 0
 25376                           ;keyboard.c: 1458: }
 25377                           ;keyboard.c: 1459: if((button_state_now & 0x00200000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW22){
 25378                           
 25379                           ; BSR set to: 0
 25380  002D7C  BBDA               	btfsc	(_button_state_now+2)& (0+255),5,b
 25381                           
 25382                           ; BSR set to: 0
 25383  002D7E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25384  002D80  D00E               	goto	l1758
 25385                           
 25386                           ; BSR set to: 0
 25387  002D82  BBD2               	btfsc	(_keyboard+2)& (0+255),5,b
 25388  002D84  D00C               	goto	l1758
 25389                           
 25390                           ; BSR set to: 0
 25391                           ;keyboard.c: 1460: pitch = A2;
 25392  002D86  0E15               	movlw	21
 25393  002D88  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25394                           
 25395                           ;keyboard.c: 1461: index = 12;
 25396  002D8A  0E0C               	movlw	12
 25397  002D8C  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25398                           
 25399                           ; BSR set to: 0
 25400                           ;keyboard.c: 1462: ON_OFF = 1;
 25401  002D8E  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25402                           
 25403                           ; BSR set to: 0
 25404                           ;keyboard.c: 1463: playThisNote8(pitch, index);
 25405  002D90  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25406  002D94  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25407  002D96  ECD7  F013         	call	_playThisNote8
 25408                           
 25409                           ;keyboard.c: 1464: keyboard.SW22 = 1;
 25410  002D9A  0100               	movlb	0	; () banked
 25411  002D9C  8BD2               	bsf	(_keyboard+2)& (0+255),5,b
 25412  002D9E                     l1758:
 25413                           
 25414                           ; BSR set to: 0
 25415                           ;keyboard.c: 1465: }
 25416                           ;keyboard.c: 1466: if((button_state_now & 0x00800000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW24){
 25417                           
 25418                           ; BSR set to: 0
 25419  002D9E  BFDA               	btfsc	(_button_state_now+2)& (0+255),7,b
 25420                           
 25421                           ; BSR set to: 0
 25422  002DA0  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25423  002DA2  D00E               	goto	l1759
 25424                           
 25425                           ; BSR set to: 0
 25426  002DA4  BFD2               	btfsc	(_keyboard+2)& (0+255),7,b
 25427  002DA6  D00C               	goto	l1759
 25428                           
 25429                           ; BSR set to: 0
 25430                           ;keyboard.c: 1467: pitch = B2;
 25431  002DA8  0E17               	movlw	23
 25432  002DAA  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25433                           
 25434                           ;keyboard.c: 1468: index = 13;
 25435  002DAC  0E0D               	movlw	13
 25436  002DAE  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25437                           
 25438                           ; BSR set to: 0
 25439                           ;keyboard.c: 1469: ON_OFF = 1;
 25440  002DB0  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25441                           
 25442                           ; BSR set to: 0
 25443                           ;keyboard.c: 1470: playThisNote8(pitch, index);
 25444  002DB2  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25445  002DB6  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25446  002DB8  ECD7  F013         	call	_playThisNote8
 25447                           
 25448                           ;keyboard.c: 1471: keyboard.SW24 = 1;
 25449  002DBC  0100               	movlb	0	; () banked
 25450  002DBE  8FD2               	bsf	(_keyboard+2)& (0+255),7,b
 25451  002DC0                     l1759:
 25452                           
 25453                           ; BSR set to: 0
 25454                           ;keyboard.c: 1472: }
 25455                           ;keyboard.c: 1473: if((button_state_now & 0x01000000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW25){
 25456                           
 25457                           ; BSR set to: 0
 25458  002DC0  B1DB               	btfsc	(_button_state_now+3)& (0+255),0,b
 25459                           
 25460                           ; BSR set to: 0
 25461  002DC2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25462  002DC4  D00E               	goto	l1760
 25463                           
 25464                           ; BSR set to: 0
 25465  002DC6  B1D3               	btfsc	(_keyboard+3)& (0+255),0,b
 25466  002DC8  D00C               	goto	l1760
 25467                           
 25468                           ; BSR set to: 0
 25469                           ;keyboard.c: 1474: pitch = C3;
 25470  002DCA  0E18               	movlw	24
 25471  002DCC  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25472                           
 25473                           ;keyboard.c: 1475: index = 14;
 25474  002DCE  0E0E               	movlw	14
 25475  002DD0  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25476                           
 25477                           ; BSR set to: 0
 25478                           ;keyboard.c: 1476: ON_OFF = 1;
 25479  002DD2  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25480                           
 25481                           ; BSR set to: 0
 25482                           ;keyboard.c: 1477: playThisNote8(pitch, index);
 25483  002DD4  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25484  002DD8  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25485  002DDA  ECD7  F013         	call	_playThisNote8
 25486                           
 25487                           ;keyboard.c: 1478: keyboard.SW25 = 1;
 25488  002DDE  0100               	movlb	0	; () banked
 25489  002DE0  81D3               	bsf	(_keyboard+3)& (0+255),0,b
 25490  002DE2                     l1760:
 25491                           
 25492                           ; BSR set to: 0
 25493                           ;keyboard.c: 1479: }
 25494                           ;keyboard.c: 1482: if(((button_state_last & 0x00000001)) && ((button_state_now & 0x00000
      +                          001) == 0) && keyboard.SW1) {
 25495                           
 25496                           ; BSR set to: 0
 25497  002DE2  B1D4               	btfsc	_button_state_last& (0+255),0,b
 25498                           
 25499                           ; BSR set to: 0
 25500  002DE4  B1D8               	btfsc	_button_state_now& (0+255),0,b
 25501  002DE6  D00E               	goto	l1761
 25502                           
 25503                           ; BSR set to: 0
 25504  002DE8  A1D0               	btfss	_keyboard& (0+255),0,b
 25505  002DEA  D00C               	goto	l1761
 25506                           
 25507                           ; BSR set to: 0
 25508                           ;keyboard.c: 1483: pitch = C;
 25509  002DEC  0E00               	movlw	0
 25510  002DEE  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25511                           
 25512                           ;keyboard.c: 1484: index = 0;
 25513  002DF0  0E00               	movlw	0
 25514  002DF2  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25515                           
 25516                           ; BSR set to: 0
 25517                           ;keyboard.c: 1485: ON_OFF = 0;
 25518  002DF4  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25519                           
 25520                           ; BSR set to: 0
 25521                           ;keyboard.c: 1486: playThisNote8(pitch, index);
 25522  002DF6  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25523  002DFA  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25524  002DFC  ECD7  F013         	call	_playThisNote8
 25525                           
 25526                           ;keyboard.c: 1487: keyboard.SW1 = 0;
 25527  002E00  0100               	movlb	0	; () banked
 25528  002E02  91D0               	bcf	_keyboard& (0+255),0,b
 25529  002E04                     l1761:
 25530                           
 25531                           ; BSR set to: 0
 25532                           ;keyboard.c: 1488: }
 25533                           ;keyboard.c: 1489: if(((button_state_last & 0x00000004)) && ((button_state_now & 0x00000
      +                          004) == 0) && keyboard.SW3) {
 25534                           
 25535                           ; BSR set to: 0
 25536  002E04  B5D4               	btfsc	_button_state_last& (0+255),2,b
 25537                           
 25538                           ; BSR set to: 0
 25539  002E06  B5D8               	btfsc	_button_state_now& (0+255),2,b
 25540  002E08  D00E               	goto	l1762
 25541                           
 25542                           ; BSR set to: 0
 25543  002E0A  A5D0               	btfss	_keyboard& (0+255),2,b
 25544  002E0C  D00C               	goto	l1762
 25545                           
 25546                           ; BSR set to: 0
 25547                           ;keyboard.c: 1490: pitch = D;
 25548  002E0E  0E02               	movlw	2
 25549  002E10  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25550                           
 25551                           ;keyboard.c: 1491: index = 1;
 25552  002E12  0E01               	movlw	1
 25553  002E14  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25554                           
 25555                           ; BSR set to: 0
 25556                           ;keyboard.c: 1492: ON_OFF = 0;
 25557  002E16  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25558                           
 25559                           ; BSR set to: 0
 25560                           ;keyboard.c: 1493: playThisNote8(pitch, index);
 25561  002E18  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25562  002E1C  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25563  002E1E  ECD7  F013         	call	_playThisNote8
 25564                           
 25565                           ;keyboard.c: 1494: keyboard.SW3 = 0;
 25566  002E22  0100               	movlb	0	; () banked
 25567  002E24  95D0               	bcf	_keyboard& (0+255),2,b
 25568  002E26                     l1762:
 25569                           
 25570                           ; BSR set to: 0
 25571                           ;keyboard.c: 1495: }
 25572                           ;keyboard.c: 1496: if(((button_state_last & 0x00000010)) && ((button_state_now & 0x00000
      +                          010) == 0) && keyboard.SW5) {
 25573                           
 25574                           ; BSR set to: 0
 25575  002E26  B9D4               	btfsc	_button_state_last& (0+255),4,b
 25576                           
 25577                           ; BSR set to: 0
 25578  002E28  B9D8               	btfsc	_button_state_now& (0+255),4,b
 25579  002E2A  D00E               	goto	l1763
 25580                           
 25581                           ; BSR set to: 0
 25582  002E2C  A9D0               	btfss	_keyboard& (0+255),4,b
 25583  002E2E  D00C               	goto	l1763
 25584                           
 25585                           ; BSR set to: 0
 25586                           ;keyboard.c: 1497: pitch = E;
 25587  002E30  0E04               	movlw	4
 25588  002E32  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25589                           
 25590                           ;keyboard.c: 1498: index = 2;
 25591  002E34  0E02               	movlw	2
 25592  002E36  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25593                           
 25594                           ; BSR set to: 0
 25595                           ;keyboard.c: 1499: ON_OFF = 0;
 25596  002E38  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25597                           
 25598                           ; BSR set to: 0
 25599                           ;keyboard.c: 1500: playThisNote8(pitch, index);
 25600  002E3A  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25601  002E3E  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25602  002E40  ECD7  F013         	call	_playThisNote8
 25603                           
 25604                           ;keyboard.c: 1501: keyboard.SW5 = 0;
 25605  002E44  0100               	movlb	0	; () banked
 25606  002E46  99D0               	bcf	_keyboard& (0+255),4,b
 25607  002E48                     l1763:
 25608                           
 25609                           ; BSR set to: 0
 25610                           ;keyboard.c: 1502: }
 25611                           ;keyboard.c: 1503: if(((button_state_last & 0x00000020)) && ((button_state_now & 0x00000
      +                          020) == 0) && keyboard.SW6) {
 25612                           
 25613                           ; BSR set to: 0
 25614  002E48  BBD4               	btfsc	_button_state_last& (0+255),5,b
 25615                           
 25616                           ; BSR set to: 0
 25617  002E4A  BBD8               	btfsc	_button_state_now& (0+255),5,b
 25618  002E4C  D00E               	goto	l1764
 25619                           
 25620                           ; BSR set to: 0
 25621  002E4E  ABD0               	btfss	_keyboard& (0+255),5,b
 25622  002E50  D00C               	goto	l1764
 25623                           
 25624                           ; BSR set to: 0
 25625                           ;keyboard.c: 1504: pitch = F;
 25626  002E52  0E05               	movlw	5
 25627  002E54  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25628                           
 25629                           ;keyboard.c: 1505: index = 3;
 25630  002E56  0E03               	movlw	3
 25631  002E58  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25632                           
 25633                           ; BSR set to: 0
 25634                           ;keyboard.c: 1506: ON_OFF = 0;
 25635  002E5A  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25636                           
 25637                           ; BSR set to: 0
 25638                           ;keyboard.c: 1507: playThisNote8(pitch, index);
 25639  002E5C  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25640  002E60  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25641  002E62  ECD7  F013         	call	_playThisNote8
 25642                           
 25643                           ;keyboard.c: 1508: keyboard.SW6 = 0;
 25644  002E66  0100               	movlb	0	; () banked
 25645  002E68  9BD0               	bcf	_keyboard& (0+255),5,b
 25646  002E6A                     l1764:
 25647                           
 25648                           ; BSR set to: 0
 25649                           ;keyboard.c: 1509: }
 25650                           ;keyboard.c: 1510: if(((button_state_last & 0x00000080)) && ((button_state_now & 0x00000
      +                          080) == 0) && keyboard.SW8) {
 25651                           
 25652                           ; BSR set to: 0
 25653  002E6A  BFD4               	btfsc	_button_state_last& (0+255),7,b
 25654                           
 25655                           ; BSR set to: 0
 25656  002E6C  BFD8               	btfsc	_button_state_now& (0+255),7,b
 25657  002E6E  D00E               	goto	l1765
 25658                           
 25659                           ; BSR set to: 0
 25660  002E70  AFD0               	btfss	_keyboard& (0+255),7,b
 25661  002E72  D00C               	goto	l1765
 25662                           
 25663                           ; BSR set to: 0
 25664                           ;keyboard.c: 1511: pitch = G;
 25665  002E74  0E07               	movlw	7
 25666  002E76  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25667                           
 25668                           ;keyboard.c: 1512: index = 4;
 25669  002E78  0E04               	movlw	4
 25670  002E7A  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25671                           
 25672                           ; BSR set to: 0
 25673                           ;keyboard.c: 1513: ON_OFF = 0;
 25674  002E7C  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25675                           
 25676                           ; BSR set to: 0
 25677                           ;keyboard.c: 1514: playThisNote8(pitch, index);
 25678  002E7E  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25679  002E82  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25680  002E84  ECD7  F013         	call	_playThisNote8
 25681                           
 25682                           ;keyboard.c: 1515: keyboard.SW8 = 0;
 25683  002E88  0100               	movlb	0	; () banked
 25684  002E8A  9FD0               	bcf	_keyboard& (0+255),7,b
 25685  002E8C                     l1765:
 25686                           
 25687                           ; BSR set to: 0
 25688                           ;keyboard.c: 1516: }
 25689                           ;keyboard.c: 1517: if(((button_state_last & 0x00000200)) && ((button_state_now & 0x00000
      +                          200) == 0) && keyboard.SW10) {
 25690                           
 25691                           ; BSR set to: 0
 25692  002E8C  B3D5               	btfsc	(_button_state_last+1)& (0+255),1,b
 25693                           
 25694                           ; BSR set to: 0
 25695  002E8E  B3D9               	btfsc	(_button_state_now+1)& (0+255),1,b
 25696  002E90  D00E               	goto	l1766
 25697                           
 25698                           ; BSR set to: 0
 25699  002E92  A3D1               	btfss	(_keyboard+1)& (0+255),1,b
 25700  002E94  D00C               	goto	l1766
 25701                           
 25702                           ; BSR set to: 0
 25703                           ;keyboard.c: 1518: pitch = A;
 25704  002E96  0E09               	movlw	9
 25705  002E98  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25706                           
 25707                           ;keyboard.c: 1519: index = 5;
 25708  002E9A  0E05               	movlw	5
 25709  002E9C  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25710                           
 25711                           ; BSR set to: 0
 25712                           ;keyboard.c: 1520: ON_OFF = 0;
 25713  002E9E  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25714                           
 25715                           ; BSR set to: 0
 25716                           ;keyboard.c: 1521: playThisNote8(pitch, index);
 25717  002EA0  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25718  002EA4  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25719  002EA6  ECD7  F013         	call	_playThisNote8
 25720                           
 25721                           ;keyboard.c: 1522: keyboard.SW10 = 10;
 25722  002EAA  0100               	movlb	0	; () banked
 25723  002EAC  93D1               	bcf	(_keyboard+1)& (0+255),1,b
 25724  002EAE                     l1766:
 25725                           
 25726                           ; BSR set to: 0
 25727                           ;keyboard.c: 1523: }
 25728                           ;keyboard.c: 1524: if(((button_state_last & 0x00000800)) && ((button_state_now & 0x00000
      +                          800) == 0) && keyboard.SW12) {
 25729                           
 25730                           ; BSR set to: 0
 25731  002EAE  B7D5               	btfsc	(_button_state_last+1)& (0+255),3,b
 25732                           
 25733                           ; BSR set to: 0
 25734  002EB0  B7D9               	btfsc	(_button_state_now+1)& (0+255),3,b
 25735  002EB2  D00E               	goto	l1767
 25736                           
 25737                           ; BSR set to: 0
 25738  002EB4  A7D1               	btfss	(_keyboard+1)& (0+255),3,b
 25739  002EB6  D00C               	goto	l1767
 25740                           
 25741                           ; BSR set to: 0
 25742                           ;keyboard.c: 1525: pitch = B;
 25743  002EB8  0E0B               	movlw	11
 25744  002EBA  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25745                           
 25746                           ;keyboard.c: 1526: index = 6;
 25747  002EBC  0E06               	movlw	6
 25748  002EBE  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25749                           
 25750                           ; BSR set to: 0
 25751                           ;keyboard.c: 1527: ON_OFF = 0;
 25752  002EC0  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25753                           
 25754                           ; BSR set to: 0
 25755                           ;keyboard.c: 1528: playThisNote8(pitch, index);
 25756  002EC2  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25757  002EC6  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25758  002EC8  ECD7  F013         	call	_playThisNote8
 25759                           
 25760                           ;keyboard.c: 1529: keyboard.SW12 = 0;
 25761  002ECC  0100               	movlb	0	; () banked
 25762  002ECE  97D1               	bcf	(_keyboard+1)& (0+255),3,b
 25763  002ED0                     l1767:
 25764                           
 25765                           ; BSR set to: 0
 25766                           ;keyboard.c: 1530: }
 25767                           ;keyboard.c: 1531: if(((button_state_last & 0x00001000)) && ((button_state_now & 0x00001
      +                          000) == 0) && keyboard.SW13) {
 25768                           
 25769                           ; BSR set to: 0
 25770  002ED0  B9D5               	btfsc	(_button_state_last+1)& (0+255),4,b
 25771                           
 25772                           ; BSR set to: 0
 25773  002ED2  B9D9               	btfsc	(_button_state_now+1)& (0+255),4,b
 25774  002ED4  D00E               	goto	l1768
 25775                           
 25776                           ; BSR set to: 0
 25777  002ED6  A9D1               	btfss	(_keyboard+1)& (0+255),4,b
 25778  002ED8  D00C               	goto	l1768
 25779                           
 25780                           ; BSR set to: 0
 25781                           ;keyboard.c: 1532: pitch = C2;
 25782  002EDA  0E0C               	movlw	12
 25783  002EDC  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25784                           
 25785                           ;keyboard.c: 1533: index = 7;
 25786  002EDE  0E07               	movlw	7
 25787  002EE0  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25788                           
 25789                           ; BSR set to: 0
 25790                           ;keyboard.c: 1534: ON_OFF = 0;
 25791  002EE2  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25792                           
 25793                           ; BSR set to: 0
 25794                           ;keyboard.c: 1535: playThisNote8(pitch, index);
 25795  002EE4  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25796  002EE8  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25797  002EEA  ECD7  F013         	call	_playThisNote8
 25798                           
 25799                           ;keyboard.c: 1536: keyboard.SW13 = 0;
 25800  002EEE  0100               	movlb	0	; () banked
 25801  002EF0  99D1               	bcf	(_keyboard+1)& (0+255),4,b
 25802  002EF2                     l1768:
 25803                           
 25804                           ; BSR set to: 0
 25805                           ;keyboard.c: 1537: }
 25806                           ;keyboard.c: 1538: if(((button_state_last & 0x00004000)) && ((button_state_now & 0x00004
      +                          000) == 0) && keyboard.SW15) {
 25807                           
 25808                           ; BSR set to: 0
 25809  002EF2  BDD5               	btfsc	(_button_state_last+1)& (0+255),6,b
 25810                           
 25811                           ; BSR set to: 0
 25812  002EF4  BDD9               	btfsc	(_button_state_now+1)& (0+255),6,b
 25813  002EF6  D00E               	goto	l1769
 25814                           
 25815                           ; BSR set to: 0
 25816  002EF8  ADD1               	btfss	(_keyboard+1)& (0+255),6,b
 25817  002EFA  D00C               	goto	l1769
 25818                           
 25819                           ; BSR set to: 0
 25820                           ;keyboard.c: 1539: pitch = D2;
 25821  002EFC  0E0E               	movlw	14
 25822  002EFE  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25823                           
 25824                           ;keyboard.c: 1540: index = 8;
 25825  002F00  0E08               	movlw	8
 25826  002F02  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25827                           
 25828                           ; BSR set to: 0
 25829                           ;keyboard.c: 1541: ON_OFF = 0;
 25830  002F04  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25831                           
 25832                           ; BSR set to: 0
 25833                           ;keyboard.c: 1542: playThisNote8(pitch, index);
 25834  002F06  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25835  002F0A  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25836  002F0C  ECD7  F013         	call	_playThisNote8
 25837                           
 25838                           ;keyboard.c: 1543: keyboard.SW15 = 0;
 25839  002F10  0100               	movlb	0	; () banked
 25840  002F12  9DD1               	bcf	(_keyboard+1)& (0+255),6,b
 25841  002F14                     l1769:
 25842                           
 25843                           ; BSR set to: 0
 25844                           ;keyboard.c: 1544: }
 25845                           ;keyboard.c: 1545: if(((button_state_last & 0x00010000)) && ((button_state_now & 0x00010
      +                          000) == 0) && keyboard.SW17) {
 25846                           
 25847                           ; BSR set to: 0
 25848  002F14  B1D6               	btfsc	(_button_state_last+2)& (0+255),0,b
 25849                           
 25850                           ; BSR set to: 0
 25851  002F16  B1DA               	btfsc	(_button_state_now+2)& (0+255),0,b
 25852  002F18  D00E               	goto	l1770
 25853                           
 25854                           ; BSR set to: 0
 25855  002F1A  A1D2               	btfss	(_keyboard+2)& (0+255),0,b
 25856  002F1C  D00C               	goto	l1770
 25857                           
 25858                           ; BSR set to: 0
 25859                           ;keyboard.c: 1546: pitch = E2;
 25860  002F1E  0E10               	movlw	16
 25861  002F20  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25862                           
 25863                           ;keyboard.c: 1547: index = 9;
 25864  002F22  0E09               	movlw	9
 25865  002F24  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25866                           
 25867                           ; BSR set to: 0
 25868                           ;keyboard.c: 1548: ON_OFF = 0;
 25869  002F26  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25870                           
 25871                           ; BSR set to: 0
 25872                           ;keyboard.c: 1549: playThisNote8(pitch, index);
 25873  002F28  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25874  002F2C  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25875  002F2E  ECD7  F013         	call	_playThisNote8
 25876                           
 25877                           ;keyboard.c: 1550: keyboard.SW17 = 0;
 25878  002F32  0100               	movlb	0	; () banked
 25879  002F34  91D2               	bcf	(_keyboard+2)& (0+255),0,b
 25880  002F36                     l1770:
 25881                           
 25882                           ; BSR set to: 0
 25883                           ;keyboard.c: 1551: }
 25884                           ;keyboard.c: 1552: if(((button_state_last & 0x00020000)) && ((button_state_now & 0x00020
      +                          000) == 0) && keyboard.SW18) {
 25885                           
 25886                           ; BSR set to: 0
 25887  002F36  B3D6               	btfsc	(_button_state_last+2)& (0+255),1,b
 25888                           
 25889                           ; BSR set to: 0
 25890  002F38  B3DA               	btfsc	(_button_state_now+2)& (0+255),1,b
 25891  002F3A  D00E               	goto	l1771
 25892                           
 25893                           ; BSR set to: 0
 25894  002F3C  A3D2               	btfss	(_keyboard+2)& (0+255),1,b
 25895  002F3E  D00C               	goto	l1771
 25896                           
 25897                           ; BSR set to: 0
 25898                           ;keyboard.c: 1553: pitch = F2;
 25899  002F40  0E11               	movlw	17
 25900  002F42  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25901                           
 25902                           ;keyboard.c: 1554: index = 10;
 25903  002F44  0E0A               	movlw	10
 25904  002F46  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25905                           
 25906                           ; BSR set to: 0
 25907                           ;keyboard.c: 1555: ON_OFF = 0;
 25908  002F48  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25909                           
 25910                           ; BSR set to: 0
 25911                           ;keyboard.c: 1556: playThisNote8(pitch, index);
 25912  002F4A  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25913  002F4E  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25914  002F50  ECD7  F013         	call	_playThisNote8
 25915                           
 25916                           ;keyboard.c: 1557: keyboard.SW18 = 0;
 25917  002F54  0100               	movlb	0	; () banked
 25918  002F56  93D2               	bcf	(_keyboard+2)& (0+255),1,b
 25919  002F58                     l1771:
 25920                           
 25921                           ; BSR set to: 0
 25922                           ;keyboard.c: 1558: }
 25923                           ;keyboard.c: 1559: if(((button_state_last & 0x00080000)) && ((button_state_now & 0x00080
      +                          000) == 0) && keyboard.SW20) {
 25924                           
 25925                           ; BSR set to: 0
 25926  002F58  B7D6               	btfsc	(_button_state_last+2)& (0+255),3,b
 25927                           
 25928                           ; BSR set to: 0
 25929  002F5A  B7DA               	btfsc	(_button_state_now+2)& (0+255),3,b
 25930  002F5C  D00E               	goto	l1772
 25931                           
 25932                           ; BSR set to: 0
 25933  002F5E  A7D2               	btfss	(_keyboard+2)& (0+255),3,b
 25934  002F60  D00C               	goto	l1772
 25935                           
 25936                           ; BSR set to: 0
 25937                           ;keyboard.c: 1560: pitch = G2;
 25938  002F62  0E13               	movlw	19
 25939  002F64  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25940                           
 25941                           ;keyboard.c: 1561: index = 11;
 25942  002F66  0E0B               	movlw	11
 25943  002F68  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25944                           
 25945                           ; BSR set to: 0
 25946                           ;keyboard.c: 1562: ON_OFF = 0;
 25947  002F6A  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25948                           
 25949                           ; BSR set to: 0
 25950                           ;keyboard.c: 1563: playThisNote8(pitch, index);
 25951  002F6C  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25952  002F70  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25953  002F72  ECD7  F013         	call	_playThisNote8
 25954                           
 25955                           ;keyboard.c: 1564: keyboard.SW20 = 0;
 25956  002F76  0100               	movlb	0	; () banked
 25957  002F78  97D2               	bcf	(_keyboard+2)& (0+255),3,b
 25958  002F7A                     l1772:
 25959                           
 25960                           ; BSR set to: 0
 25961                           ;keyboard.c: 1565: }
 25962                           ;keyboard.c: 1566: if(((button_state_last & 0x00200000)) && ((button_state_now & 0x00200
      +                          000) == 0) && keyboard.SW22) {
 25963                           
 25964                           ; BSR set to: 0
 25965  002F7A  BBD6               	btfsc	(_button_state_last+2)& (0+255),5,b
 25966                           
 25967                           ; BSR set to: 0
 25968  002F7C  BBDA               	btfsc	(_button_state_now+2)& (0+255),5,b
 25969  002F7E  D00E               	goto	l1773
 25970                           
 25971                           ; BSR set to: 0
 25972  002F80  ABD2               	btfss	(_keyboard+2)& (0+255),5,b
 25973  002F82  D00C               	goto	l1773
 25974                           
 25975                           ; BSR set to: 0
 25976                           ;keyboard.c: 1567: pitch = A2;
 25977  002F84  0E15               	movlw	21
 25978  002F86  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25979                           
 25980                           ;keyboard.c: 1568: index = 12;
 25981  002F88  0E0C               	movlw	12
 25982  002F8A  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25983                           
 25984                           ; BSR set to: 0
 25985                           ;keyboard.c: 1569: ON_OFF = 0;
 25986  002F8C  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25987                           
 25988                           ; BSR set to: 0
 25989                           ;keyboard.c: 1570: playThisNote8(pitch, index);
 25990  002F8E  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25991  002F92  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25992  002F94  ECD7  F013         	call	_playThisNote8
 25993                           
 25994                           ;keyboard.c: 1571: keyboard.SW22 = 0;
 25995  002F98  0100               	movlb	0	; () banked
 25996  002F9A  9BD2               	bcf	(_keyboard+2)& (0+255),5,b
 25997  002F9C                     l1773:
 25998                           
 25999                           ; BSR set to: 0
 26000                           ;keyboard.c: 1572: }
 26001                           ;keyboard.c: 1573: if(((button_state_last & 0x00800000)) && ((button_state_now & 0x00800
      +                          000) == 0) && keyboard.SW24) {
 26002                           
 26003                           ; BSR set to: 0
 26004  002F9C  BFD6               	btfsc	(_button_state_last+2)& (0+255),7,b
 26005                           
 26006                           ; BSR set to: 0
 26007  002F9E  BFDA               	btfsc	(_button_state_now+2)& (0+255),7,b
 26008  002FA0  D00E               	goto	l1774
 26009                           
 26010                           ; BSR set to: 0
 26011  002FA2  AFD2               	btfss	(_keyboard+2)& (0+255),7,b
 26012  002FA4  D00C               	goto	l1774
 26013                           
 26014                           ; BSR set to: 0
 26015                           ;keyboard.c: 1574: pitch = B2;
 26016  002FA6  0E17               	movlw	23
 26017  002FA8  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 26018                           
 26019                           ;keyboard.c: 1575: index = 13;
 26020  002FAA  0E0D               	movlw	13
 26021  002FAC  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 26022                           
 26023                           ; BSR set to: 0
 26024                           ;keyboard.c: 1576: ON_OFF = 0;
 26025  002FAE  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26026                           
 26027                           ; BSR set to: 0
 26028                           ;keyboard.c: 1577: playThisNote8(pitch, index);
 26029  002FB0  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 26030  002FB4  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 26031  002FB6  ECD7  F013         	call	_playThisNote8
 26032                           
 26033                           ;keyboard.c: 1578: keyboard.SW24 = 0;
 26034  002FBA  0100               	movlb	0	; () banked
 26035  002FBC  9FD2               	bcf	(_keyboard+2)& (0+255),7,b
 26036  002FBE                     l1774:
 26037                           
 26038                           ; BSR set to: 0
 26039                           ;keyboard.c: 1579: }
 26040                           ;keyboard.c: 1580: if(((button_state_last & 0x01000000)) && ((button_state_now & 0x01000
      +                          000) == 0) && keyboard.SW25) {
 26041                           
 26042                           ; BSR set to: 0
 26043  002FBE  A1D7               	btfss	(_button_state_last+3)& (0+255),0,b
 26044  002FC0  0012               	return	
 26045                           
 26046                           ; BSR set to: 0
 26047  002FC2  B1DB               	btfsc	(_button_state_now+3)& (0+255),0,b
 26048  002FC4  0012               	return	
 26049                           
 26050                           ; BSR set to: 0
 26051  002FC6  A1D3               	btfss	(_keyboard+3)& (0+255),0,b
 26052  002FC8  0012               	return	
 26053                           
 26054                           ; BSR set to: 0
 26055                           ;keyboard.c: 1581: pitch = C;
 26056  002FCA  0E00               	movlw	0
 26057  002FCC  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 26058                           
 26059                           ;keyboard.c: 1582: index = 14;
 26060  002FCE  0E0E               	movlw	14
 26061  002FD0  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 26062                           
 26063                           ; BSR set to: 0
 26064                           ;keyboard.c: 1583: ON_OFF = 0;
 26065  002FD2  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26066                           
 26067                           ; BSR set to: 0
 26068                           ;keyboard.c: 1584: playThisNote8(pitch, index);
 26069  002FD4  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 26070  002FD8  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 26071  002FDA  ECD7  F013         	call	_playThisNote8
 26072                           
 26073                           ;keyboard.c: 1585: keyboard.SW25 = 0;
 26074  002FDE  0100               	movlb	0	; () banked
 26075  002FE0  91D3               	bcf	(_keyboard+3)& (0+255),0,b
 26076  002FE2  0012               	return	
 26077  002FE4                     __end_of_keyboard_eight_note_efficient:
 26078                           	opt stack 0
 26079                           tblptru	equ	0xFF8
 26080                           tblptrh	equ	0xFF7
 26081                           tblptrl	equ	0xFF6
 26082                           tablat	equ	0xFF5
 26083                           prodh	equ	0xFF4
 26084                           prodl	equ	0xFF3
 26085                           intcon	equ	0xFF2
 26086                           intcon2	equ	0xFF1
 26087                           postinc0	equ	0xFEE
 26088                           wreg	equ	0xFE8
 26089                           postinc1	equ	0xFE6
 26090                           plusw1	equ	0xFE3
 26091                           fsr1h	equ	0xFE2
 26092                           fsr1l	equ	0xFE1
 26093                           indf2	equ	0xFDF
 26094                           postinc2	equ	0xFDE
 26095                           postdec2	equ	0xFDD
 26096                           plusw2	equ	0xFDB
 26097                           fsr2h	equ	0xFDA
 26098                           fsr2l	equ	0xFD9
 26099                           status	equ	0xFD8
 26100                           
 26101 ;; *************** function _playThisNote8 *****************
 26102 ;; Defined at:
 26103 ;;		line 904 in file "keyboard.c"
 26104 ;; Parameters:    Size  Location     Type
 26105 ;;  pitch           1    wreg     unsigned char 
 26106 ;;  index           1   17[BANK0 ] unsigned char 
 26107 ;; Auto vars:     Size  Location     Type
 26108 ;;  pitch           1   22[BANK0 ] unsigned char 
 26109 ;;  temp_pitch      1   23[BANK0 ] unsigned char 
 26110 ;;  mode_p          2   24[BANK0 ] PTR unsigned char 
 26111 ;;		 -> locrian_key(15), aeolian_key(15), mixolydian_key(15), lydian_key(15), 
 26112 ;;		 -> phrygian_key(15), dorian_key(15), ionian_key(15), 
 26113 ;; Return value:  Size  Location     Type
 26114 ;;                  1    wreg      void 
 26115 ;; Registers used:
 26116 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26117 ;; Tracked objects:
 26118 ;;		On entry : 0/0
 26119 ;;		On exit  : 0/0
 26120 ;;		Unchanged: 0/0
 26121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 26122 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26123 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26124 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26125 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26126 ;;Total ram usage:        9 bytes
 26127 ;; Hardware stack levels used:    1
 26128 ;; Hardware stack levels required when called:   11
 26129 ;; This function calls:
 26130 ;;		_add_notes_to_arpeggio
 26131 ;;		_delete_notes_from_arpeggio
 26132 ;;		_finish_arpeggio_setup
 26133 ;;		_key_press_release_note_off
 26134 ;;		_noteOff
 26135 ;;		_noteOn
 26136 ;;		_playDiatonicSeventhMajor
 26137 ;;		_playDiatonicSeventhMinor
 26138 ;;		_playDiatonicTriadMajor
 26139 ;;		_playDiatonicTriadMinor
 26140 ;;		_wait_one_pulse
 26141 ;; This function is called by:
 26142 ;;		_keyboard_eight_note_efficient
 26143 ;;		_doTheUnLatch
 26144 ;; This function uses a non-reentrant model
 26145 ;;
 26146                           
 26147                           	psect	text72
 26148  0027AE                     __ptext72:
 26149                           	opt stack 0
 26150  0027AE                     _playThisNote8:
 26151                           	opt stack 13
 26152                           
 26153                           ; BSR set to: 0
 26154                           ;incstack = 0
 26155                           ;playThisNote8@pitch stored from wreg
 26156  0027AE  0100               	movlb	0	; () banked
 26157  0027B0  6F76               	movwf	playThisNote8@pitch& (0+255),b
 26158                           
 26159                           ;keyboard.c: 906: unsigned char *mode_p;
 26160                           ;keyboard.c: 909: switch (which_mode) {
 26161  0027B2  D01E               	goto	l1582
 26162  0027B4                     
 26163                           ;keyboard.c: 911: mode_p = ionian_key;
 26164  0027B4  0E55               	movlw	low _ionian_key
 26165  0027B6  0100               	movlb	0	; () banked
 26166  0027B8  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26167  0027BA  0EFD               	movlw	high _ionian_key
 26168  0027BC  D017               	goto	L11
 26169  0027BE                     
 26170                           ; BSR set to: 0
 26171                           ;keyboard.c: 914: mode_p = dorian_key;
 26172                           
 26173                           ; BSR set to: 0
 26174  0027BE  0E46               	movlw	low _dorian_key
 26175  0027C0  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26176  0027C2  0EFD               	movlw	high _dorian_key
 26177  0027C4  D013               	goto	L11
 26178  0027C6                     
 26179                           ; BSR set to: 0
 26180                           ;keyboard.c: 917: mode_p = phrygian_key;
 26181                           
 26182                           ; BSR set to: 0
 26183  0027C6  0E37               	movlw	low _phrygian_key
 26184  0027C8  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26185  0027CA  0EFD               	movlw	high _phrygian_key
 26186  0027CC  D00F               	goto	L11
 26187  0027CE                     
 26188                           ; BSR set to: 0
 26189                           ;keyboard.c: 920: mode_p = lydian_key;
 26190                           
 26191                           ; BSR set to: 0
 26192  0027CE  0E28               	movlw	low _lydian_key
 26193  0027D0  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26194  0027D2  0EFD               	movlw	high _lydian_key
 26195  0027D4  D00B               	goto	L11
 26196  0027D6                     
 26197                           ; BSR set to: 0
 26198                           ;keyboard.c: 923: mode_p = mixolydian_key;
 26199                           
 26200                           ; BSR set to: 0
 26201  0027D6  0E19               	movlw	low _mixolydian_key
 26202  0027D8  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26203  0027DA  0EFD               	movlw	high _mixolydian_key
 26204  0027DC  D007               	goto	L11
 26205  0027DE                     
 26206                           ; BSR set to: 0
 26207                           ;keyboard.c: 926: mode_p = aeolian_key;
 26208                           
 26209                           ; BSR set to: 0
 26210  0027DE  0E0A               	movlw	low _aeolian_key
 26211  0027E0  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26212  0027E2  0EFD               	movlw	high _aeolian_key
 26213  0027E4  D003               	goto	L11
 26214  0027E6                     
 26215                           ; BSR set to: 0
 26216                           ;keyboard.c: 929: mode_p = locrian_key;
 26217                           
 26218                           ; BSR set to: 0
 26219  0027E6  0EFB               	movlw	low _locrian_key
 26220  0027E8  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26221  0027EA  0EFC               	movlw	high _locrian_key
 26222  0027EC                     L11:
 26223  0027EC  6F79               	movwf	(playThisNote8@mode_p+1)& (0+255),b
 26224                           
 26225                           ; BSR set to: 0
 26226                           ;keyboard.c: 933: }
 26227                           
 26228                           ; BSR set to: 0
 26229                           ;keyboard.c: 932: break;
 26230                           
 26231                           ;keyboard.c: 931: default:
 26232                           
 26233                           ;keyboard.c: 930: break;
 26234  0027EE  D017               	goto	l1584
 26235  0027F0                     l1582:
 26236                           
 26237                           ; BSR set to: 0
 26238  0027F0  0100               	movlb	0	; () banked
 26239  0027F2  51F1               	movf	_which_mode& (0+255),w,b
 26240                           
 26241                           ; Switch size 1, requested type "space"
 26242                           ; Number of cases is 7, Range of values is 0 to 6
 26243                           ; switch strategies available:
 26244                           ; Name         Instructions Cycles
 26245                           ; simple_byte           22    12 (average)
 26246                           ;	Chosen strategy is simple_byte
 26247  0027F4  0A00               	xorlw	0	; case 0
 26248  0027F6  B4D8               	btfsc	status,2,c
 26249  0027F8  D7DD               	goto	l1583
 26250  0027FA  0A01               	xorlw	1	; case 1
 26251  0027FC  B4D8               	btfsc	status,2,c
 26252  0027FE  D7DF               	goto	l1585
 26253  002800  0A03               	xorlw	3	; case 2
 26254  002802  B4D8               	btfsc	status,2,c
 26255  002804  D7E0               	goto	l1586
 26256  002806  0A01               	xorlw	1	; case 3
 26257  002808  B4D8               	btfsc	status,2,c
 26258  00280A  D7E1               	goto	l1587
 26259  00280C  0A07               	xorlw	7	; case 4
 26260  00280E  B4D8               	btfsc	status,2,c
 26261  002810  D7E2               	goto	l1588
 26262  002812  0A01               	xorlw	1	; case 5
 26263  002814  B4D8               	btfsc	status,2,c
 26264  002816  D7E3               	goto	l1589
 26265  002818  0A03               	xorlw	3	; case 6
 26266  00281A  B4D8               	btfsc	status,2,c
 26267  00281C  D7E4               	goto	l1590
 26268  00281E                     l1584:
 26269                           
 26270                           ; BSR set to: 0
 26271                           ;keyboard.c: 936: if(ARPEGGIO_ON == 0){
 26272  00281E  B604               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 26273  002820  D0D8               	goto	l1605
 26274                           
 26275                           ; BSR set to: 0
 26276                           ;keyboard.c: 938: if(KEYBOARD_MODE == MAJOR) {
 26277  002822  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 26278  002824  A4D8               	btfss	status,2,c
 26279  002826  D027               	goto	l1595
 26280                           
 26281                           ; BSR set to: 0
 26282                           ;keyboard.c: 939: if(ON_OFF == 1) {noteOn(channel,major_key[index],velocity);}
 26283  002828  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26284  00282A  D011               	goto	l1594
 26285                           
 26286                           ; BSR set to: 0
 26287  00282C  5051               	movf	_velocity,w,c
 26288  00282E  6EE6               	movwf	postinc1,c
 26289  002830  5171               	movf	playThisNote8@index& (0+255),w,b
 26290  002832  0D01               	mullw	1
 26291  002834  0E78               	movlw	low _major_key
 26292  002836  24F3               	addwf	prodl,w,c
 26293  002838  6EF6               	movwf	tblptrl,c
 26294  00283A  0EF3               	movlw	high _major_key
 26295  00283C  20F4               	addwfc	prodh,w,c
 26296  00283E  6EF7               	movwf	tblptrh,c
 26297  002840                     	if	0	;There are less than 3 active tblptr bytes
 26298  002840                     	endif
 26299  002840  0008               	tblrd		*
 26300  002842  50F5               	movf	tablat,w,c
 26301  002844  6EE6               	movwf	postinc1,c
 26302  002846  503E               	movf	_channel,w,c
 26303  002848  6EE6               	movwf	postinc1,c
 26304  00284A  EC95  F045         	call	_noteOn	;wreg free
 26305  00284E                     l1594:
 26306                           
 26307                           ;keyboard.c: 940: if(ON_OFF == 0) {noteOff(channel,major_key[index],velocity);}
 26308  00284E  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26309  002850  D012               	goto	l1595
 26310  002852  5051               	movf	_velocity,w,c
 26311  002854  6EE6               	movwf	postinc1,c
 26312  002856  0100               	movlb	0	; () banked
 26313  002858  5171               	movf	playThisNote8@index& (0+255),w,b
 26314  00285A  0D01               	mullw	1
 26315  00285C  0E78               	movlw	low _major_key
 26316  00285E  24F3               	addwf	prodl,w,c
 26317  002860  6EF6               	movwf	tblptrl,c
 26318  002862  0EF3               	movlw	high _major_key
 26319  002864  20F4               	addwfc	prodh,w,c
 26320  002866  6EF7               	movwf	tblptrh,c
 26321  002868                     	if	0	;There are less than 3 active tblptr bytes
 26322  002868                     	endif
 26323  002868  0008               	tblrd		*
 26324  00286A  50F5               	movf	tablat,w,c
 26325  00286C  6EE6               	movwf	postinc1,c
 26326  00286E  503E               	movf	_channel,w,c
 26327  002870  6EE6               	movwf	postinc1,c
 26328  002872  EC4A  F04A         	call	_noteOff	;wreg free
 26329  002876                     l1595:
 26330                           
 26331                           ;keyboard.c: 941: }
 26332                           ;keyboard.c: 943: if(KEYBOARD_MODE == MINOR) {
 26333  002876  0E02               	movlw	2
 26334  002878  0100               	movlb	0	; () banked
 26335  00287A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26336  00287C  A4D8               	btfss	status,2,c
 26337  00287E  D027               	goto	l1598
 26338                           
 26339                           ; BSR set to: 0
 26340                           ;keyboard.c: 944: if(ON_OFF == 1) {noteOn(channel,minor_key[index],velocity);}
 26341  002880  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26342  002882  D011               	goto	l1597
 26343                           
 26344                           ; BSR set to: 0
 26345  002884  5051               	movf	_velocity,w,c
 26346  002886  6EE6               	movwf	postinc1,c
 26347  002888  5171               	movf	playThisNote8@index& (0+255),w,b
 26348  00288A  0D01               	mullw	1
 26349  00288C  0E69               	movlw	low _minor_key
 26350  00288E  24F3               	addwf	prodl,w,c
 26351  002890  6EF6               	movwf	tblptrl,c
 26352  002892  0EF3               	movlw	high _minor_key
 26353  002894  20F4               	addwfc	prodh,w,c
 26354  002896  6EF7               	movwf	tblptrh,c
 26355  002898                     	if	0	;There are less than 3 active tblptr bytes
 26356  002898                     	endif
 26357  002898  0008               	tblrd		*
 26358  00289A  50F5               	movf	tablat,w,c
 26359  00289C  6EE6               	movwf	postinc1,c
 26360  00289E  503E               	movf	_channel,w,c
 26361  0028A0  6EE6               	movwf	postinc1,c
 26362  0028A2  EC95  F045         	call	_noteOn	;wreg free
 26363  0028A6                     l1597:
 26364                           
 26365                           ;keyboard.c: 945: if(ON_OFF == 0) {noteOff(channel,minor_key[index],velocity);}
 26366  0028A6  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26367  0028A8  D012               	goto	l1598
 26368  0028AA  5051               	movf	_velocity,w,c
 26369  0028AC  6EE6               	movwf	postinc1,c
 26370  0028AE  0100               	movlb	0	; () banked
 26371  0028B0  5171               	movf	playThisNote8@index& (0+255),w,b
 26372  0028B2  0D01               	mullw	1
 26373  0028B4  0E69               	movlw	low _minor_key
 26374  0028B6  24F3               	addwf	prodl,w,c
 26375  0028B8  6EF6               	movwf	tblptrl,c
 26376  0028BA  0EF3               	movlw	high _minor_key
 26377  0028BC  20F4               	addwfc	prodh,w,c
 26378  0028BE  6EF7               	movwf	tblptrh,c
 26379  0028C0                     	if	0	;There are less than 3 active tblptr bytes
 26380  0028C0                     	endif
 26381  0028C0  0008               	tblrd		*
 26382  0028C2  50F5               	movf	tablat,w,c
 26383  0028C4  6EE6               	movwf	postinc1,c
 26384  0028C6  503E               	movf	_channel,w,c
 26385  0028C8  6EE6               	movwf	postinc1,c
 26386  0028CA  EC4A  F04A         	call	_noteOff	;wreg free
 26387  0028CE                     l1598:
 26388                           
 26389                           ;keyboard.c: 946: }
 26390                           ;keyboard.c: 948: if(KEYBOARD_MODE == MODES) {
 26391  0028CE  0E03               	movlw	3
 26392  0028D0  0100               	movlb	0	; () banked
 26393  0028D2  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26394  0028D4  A4D8               	btfss	status,2,c
 26395  0028D6  D07D               	goto	l1605
 26396                           
 26397                           ; BSR set to: 0
 26398                           ;keyboard.c: 949: if(index == 0) {
 26399  0028D8  5171               	movf	playThisNote8@index& (0+255),w,b
 26400  0028DA  A4D8               	btfss	status,2,c
 26401  0028DC  D033               	goto	l1602
 26402                           
 26403                           ; BSR set to: 0
 26404                           ;keyboard.c: 950: if(ON_OFF == 1) {noteOn(channel,mode_p[index],velocity);}
 26405  0028DE  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26406  0028E0  D017               	goto	l1601
 26407                           
 26408                           ; BSR set to: 0
 26409  0028E2  5051               	movf	_velocity,w,c
 26410  0028E4  6EE6               	movwf	postinc1,c
 26411  0028E6  5171               	movf	playThisNote8@index& (0+255),w,b
 26412  0028E8  0D01               	mullw	1
 26413  0028EA  C078  F072         	movff	playThisNote8@mode_p,??_playThisNote8
 26414  0028EE  C079  F073         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 26415  0028F2  50F3               	movf	prodl,w,c
 26416  0028F4  2772               	addwf	??_playThisNote8& (0+255),f,b
 26417  0028F6  50F4               	movf	prodh,w,c
 26418  0028F8  2373               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 26419  0028FA  C072  FFF6         	movff	??_playThisNote8,tblptrl
 26420  0028FE  C073  FFF7         	movff	??_playThisNote8+1,tblptrh
 26421  002902                     	if	0	;tblptru may be non-zero
 26422  002902                     	endif
 26423  002902                     	if	0	;tblptru may be non-zero
 26424  002902                     	endif
 26425  002902  0008               	tblrd		*
 26426  002904  50F5               	movf	tablat,w,c
 26427  002906  6EE6               	movwf	postinc1,c
 26428  002908  503E               	movf	_channel,w,c
 26429  00290A  6EE6               	movwf	postinc1,c
 26430  00290C  EC95  F045         	call	_noteOn	;wreg free
 26431  002910                     l1601:
 26432                           
 26433                           ;keyboard.c: 951: if(ON_OFF == 0) {noteOff(channel,mode_p[index],velocity);}
 26434  002910  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26435  002912  D018               	goto	l1602
 26436  002914  5051               	movf	_velocity,w,c
 26437  002916  6EE6               	movwf	postinc1,c
 26438  002918  0100               	movlb	0	; () banked
 26439  00291A  5171               	movf	playThisNote8@index& (0+255),w,b
 26440  00291C  0D01               	mullw	1
 26441  00291E  C078  F072         	movff	playThisNote8@mode_p,??_playThisNote8
 26442  002922  C079  F073         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 26443  002926  50F3               	movf	prodl,w,c
 26444  002928  2772               	addwf	??_playThisNote8& (0+255),f,b
 26445  00292A  50F4               	movf	prodh,w,c
 26446  00292C  2373               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 26447  00292E  C072  FFF6         	movff	??_playThisNote8,tblptrl
 26448  002932  C073  FFF7         	movff	??_playThisNote8+1,tblptrh
 26449  002936                     	if	0	;tblptru may be non-zero
 26450  002936                     	endif
 26451  002936                     	if	0	;tblptru may be non-zero
 26452  002936                     	endif
 26453  002936  0008               	tblrd		*
 26454  002938  50F5               	movf	tablat,w,c
 26455  00293A  6EE6               	movwf	postinc1,c
 26456  00293C  503E               	movf	_channel,w,c
 26457  00293E  6EE6               	movwf	postinc1,c
 26458  002940  EC4A  F04A         	call	_noteOff	;wreg free
 26459  002944                     l1602:
 26460                           
 26461                           ;keyboard.c: 952: }
 26462                           ;keyboard.c: 953: if(index > 0) {
 26463  002944  0100               	movlb	0	; () banked
 26464  002946  5171               	movf	playThisNote8@index& (0+255),w,b
 26465  002948  B4D8               	btfsc	status,2,c
 26466  00294A  D043               	goto	l1605
 26467                           
 26468                           ; BSR set to: 0
 26469                           ;keyboard.c: 954: if(ON_OFF == 1) {noteOn(channel,mode_p[0] + mode_p[index],velocity);}
 26470  00294C  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26471  00294E  D01F               	goto	l1604
 26472                           
 26473                           ; BSR set to: 0
 26474  002950  5051               	movf	_velocity,w,c
 26475  002952  6EE6               	movwf	postinc1,c
 26476  002954  5171               	movf	playThisNote8@index& (0+255),w,b
 26477  002956  0D01               	mullw	1
 26478  002958  C078  F072         	movff	playThisNote8@mode_p,??_playThisNote8
 26479  00295C  C079  F073         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 26480  002960  50F3               	movf	prodl,w,c
 26481  002962  2772               	addwf	??_playThisNote8& (0+255),f,b
 26482  002964  50F4               	movf	prodh,w,c
 26483  002966  2373               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 26484  002968  C072  FFF6         	movff	??_playThisNote8,tblptrl
 26485  00296C  C073  FFF7         	movff	??_playThisNote8+1,tblptrh
 26486  002970                     	if	0	;tblptru may be non-zero
 26487  002970                     	endif
 26488  002970                     	if	0	;tblptru may be non-zero
 26489  002970                     	endif
 26490  002970  0008               	tblrd		*
 26491  002972  CFF5 F074          	movff	tablat,??_playThisNote8+2
 26492  002976  C078  FFF6         	movff	playThisNote8@mode_p,tblptrl
 26493  00297A  C079  FFF7         	movff	playThisNote8@mode_p+1,tblptrh
 26494  00297E                     	if	0	;tblptru may be non-zero
 26495  00297E                     	endif
 26496  00297E                     	if	0	;tblptru may be non-zero
 26497  00297E                     	endif
 26498  00297E  0008               	tblrd		*
 26499  002980  50F5               	movf	tablat,w,c
 26500  002982  2574               	addwf	(??_playThisNote8+2)& (0+255),w,b
 26501  002984  6EE6               	movwf	postinc1,c
 26502  002986  503E               	movf	_channel,w,c
 26503  002988  6EE6               	movwf	postinc1,c
 26504  00298A  EC95  F045         	call	_noteOn	;wreg free
 26505  00298E                     l1604:
 26506                           
 26507                           ;keyboard.c: 955: if(ON_OFF == 0) {noteOff(channel,mode_p[0] + mode_p[index],velocity);}
 26508  00298E  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26509  002990  D020               	goto	l1605
 26510  002992  5051               	movf	_velocity,w,c
 26511  002994  6EE6               	movwf	postinc1,c
 26512  002996  0100               	movlb	0	; () banked
 26513  002998  5171               	movf	playThisNote8@index& (0+255),w,b
 26514  00299A  0D01               	mullw	1
 26515  00299C  C078  F072         	movff	playThisNote8@mode_p,??_playThisNote8
 26516  0029A0  C079  F073         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 26517  0029A4  50F3               	movf	prodl,w,c
 26518  0029A6  2772               	addwf	??_playThisNote8& (0+255),f,b
 26519  0029A8  50F4               	movf	prodh,w,c
 26520  0029AA  2373               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 26521  0029AC  C072  FFF6         	movff	??_playThisNote8,tblptrl
 26522  0029B0  C073  FFF7         	movff	??_playThisNote8+1,tblptrh
 26523  0029B4                     	if	0	;tblptru may be non-zero
 26524  0029B4                     	endif
 26525  0029B4                     	if	0	;tblptru may be non-zero
 26526  0029B4                     	endif
 26527  0029B4  0008               	tblrd		*
 26528  0029B6  CFF5 F074          	movff	tablat,??_playThisNote8+2
 26529  0029BA  C078  FFF6         	movff	playThisNote8@mode_p,tblptrl
 26530  0029BE  C079  FFF7         	movff	playThisNote8@mode_p+1,tblptrh
 26531  0029C2                     	if	0	;tblptru may be non-zero
 26532  0029C2                     	endif
 26533  0029C2                     	if	0	;tblptru may be non-zero
 26534  0029C2                     	endif
 26535  0029C2  0008               	tblrd		*
 26536  0029C4  50F5               	movf	tablat,w,c
 26537  0029C6  2574               	addwf	(??_playThisNote8+2)& (0+255),w,b
 26538  0029C8  6EE6               	movwf	postinc1,c
 26539  0029CA  503E               	movf	_channel,w,c
 26540  0029CC  6EE6               	movwf	postinc1,c
 26541  0029CE  EC4A  F04A         	call	_noteOff	;wreg free
 26542  0029D2                     l1605:
 26543                           
 26544                           ;keyboard.c: 956: }
 26545                           ;keyboard.c: 957: }
 26546                           ;keyboard.c: 958: }
 26547                           ;keyboard.c: 961: if(ARPEGGIO_ON == 1){
 26548  0029D2  A604               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 26549  0029D4  D0DD               	goto	l1619
 26550                           
 26551                           ;keyboard.c: 963: unsigned char temp_pitch;
 26552                           ;keyboard.c: 965: if(KEYBOARD_MODE == MAJOR) {
 26553  0029D6  0100               	movlb	0	; () banked
 26554  0029D8  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 26555  0029DA  A4D8               	btfss	status,2,c
 26556  0029DC  D00B               	goto	l1607
 26557                           
 26558                           ; BSR set to: 0
 26559                           ;keyboard.c: 966: temp_pitch = major_key[index];
 26560  0029DE  5171               	movf	playThisNote8@index& (0+255),w,b
 26561  0029E0  0D01               	mullw	1
 26562  0029E2  0E78               	movlw	low _major_key
 26563  0029E4  24F3               	addwf	prodl,w,c
 26564  0029E6  6EF6               	movwf	tblptrl,c
 26565  0029E8  0EF3               	movlw	high _major_key
 26566  0029EA  20F4               	addwfc	prodh,w,c
 26567  0029EC  6EF7               	movwf	tblptrh,c
 26568  0029EE                     	if	0	;There are less than 3 active tblptr bytes
 26569  0029EE                     	endif
 26570  0029EE  0008               	tblrd		*
 26571  0029F0  CFF5 F077          	movff	tablat,playThisNote8@temp_pitch
 26572  0029F4                     l1607:
 26573                           
 26574                           ; BSR set to: 0
 26575                           ;keyboard.c: 967: }
 26576                           ;keyboard.c: 969: if(KEYBOARD_MODE == MINOR) {
 26577                           
 26578                           ; BSR set to: 0
 26579  0029F4  0E02               	movlw	2
 26580  0029F6  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26581  0029F8  A4D8               	btfss	status,2,c
 26582  0029FA  D00B               	goto	l1608
 26583                           
 26584                           ; BSR set to: 0
 26585                           ;keyboard.c: 970: temp_pitch = minor_key[index];
 26586  0029FC  5171               	movf	playThisNote8@index& (0+255),w,b
 26587  0029FE  0D01               	mullw	1
 26588  002A00  0E69               	movlw	low _minor_key
 26589  002A02  24F3               	addwf	prodl,w,c
 26590  002A04  6EF6               	movwf	tblptrl,c
 26591  002A06  0EF3               	movlw	high _minor_key
 26592  002A08  20F4               	addwfc	prodh,w,c
 26593  002A0A  6EF7               	movwf	tblptrh,c
 26594  002A0C                     	if	0	;There are less than 3 active tblptr bytes
 26595  002A0C                     	endif
 26596  002A0C  0008               	tblrd		*
 26597  002A0E  CFF5 F077          	movff	tablat,playThisNote8@temp_pitch
 26598  002A12                     l1608:
 26599                           
 26600                           ; BSR set to: 0
 26601                           ;keyboard.c: 971: }
 26602                           ;keyboard.c: 973: if(KEYBOARD_MODE == MODES) {
 26603                           
 26604                           ; BSR set to: 0
 26605  002A12  0E03               	movlw	3
 26606  002A14  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26607  002A16  A4D8               	btfss	status,2,c
 26608  002A18  D030               	goto	l1611
 26609                           
 26610                           ; BSR set to: 0
 26611                           ;keyboard.c: 974: if(index == 0){temp_pitch = mode_p[index];}
 26612  002A1A  5171               	movf	playThisNote8@index& (0+255),w,b
 26613  002A1C  A4D8               	btfss	status,2,c
 26614  002A1E  D011               	goto	l1610
 26615                           
 26616                           ; BSR set to: 0
 26617  002A20  5171               	movf	playThisNote8@index& (0+255),w,b
 26618  002A22  0D01               	mullw	1
 26619  002A24  C078  F072         	movff	playThisNote8@mode_p,??_playThisNote8
 26620  002A28  C079  F073         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 26621  002A2C  50F3               	movf	prodl,w,c
 26622  002A2E  2772               	addwf	??_playThisNote8& (0+255),f,b
 26623  002A30  50F4               	movf	prodh,w,c
 26624  002A32  2373               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 26625  002A34  C072  FFF6         	movff	??_playThisNote8,tblptrl
 26626  002A38  C073  FFF7         	movff	??_playThisNote8+1,tblptrh
 26627  002A3C                     	if	0	;tblptru may be non-zero
 26628  002A3C                     	endif
 26629  002A3C                     	if	0	;tblptru may be non-zero
 26630  002A3C                     	endif
 26631  002A3C  0008               	tblrd		*
 26632  002A3E  CFF5 F077          	movff	tablat,playThisNote8@temp_pitch
 26633  002A42                     l1610:
 26634                           
 26635                           ; BSR set to: 0
 26636                           ;keyboard.c: 975: if(index > 0){temp_pitch = (mode_p[0] + mode_p[index]);}
 26637                           
 26638                           ; BSR set to: 0
 26639  002A42  5171               	movf	playThisNote8@index& (0+255),w,b
 26640  002A44  B4D8               	btfsc	status,2,c
 26641  002A46  D019               	goto	l1611
 26642                           
 26643                           ; BSR set to: 0
 26644  002A48  5171               	movf	playThisNote8@index& (0+255),w,b
 26645  002A4A  0D01               	mullw	1
 26646  002A4C  C078  F072         	movff	playThisNote8@mode_p,??_playThisNote8
 26647  002A50  C079  F073         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 26648  002A54  50F3               	movf	prodl,w,c
 26649  002A56  2772               	addwf	??_playThisNote8& (0+255),f,b
 26650  002A58  50F4               	movf	prodh,w,c
 26651  002A5A  2373               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 26652  002A5C  C072  FFF6         	movff	??_playThisNote8,tblptrl
 26653  002A60  C073  FFF7         	movff	??_playThisNote8+1,tblptrh
 26654  002A64                     	if	0	;tblptru may be non-zero
 26655  002A64                     	endif
 26656  002A64                     	if	0	;tblptru may be non-zero
 26657  002A64                     	endif
 26658  002A64  0008               	tblrd		*
 26659  002A66  CFF5 F074          	movff	tablat,??_playThisNote8+2
 26660  002A6A  C078  FFF6         	movff	playThisNote8@mode_p,tblptrl
 26661  002A6E  C079  FFF7         	movff	playThisNote8@mode_p+1,tblptrh
 26662  002A72                     	if	0	;tblptru may be non-zero
 26663  002A72                     	endif
 26664  002A72                     	if	0	;tblptru may be non-zero
 26665  002A72                     	endif
 26666  002A72  0008               	tblrd		*
 26667  002A74  50F5               	movf	tablat,w,c
 26668  002A76  2574               	addwf	(??_playThisNote8+2)& (0+255),w,b
 26669  002A78  6F77               	movwf	playThisNote8@temp_pitch& (0+255),b
 26670  002A7A                     l1611:
 26671                           
 26672                           ; BSR set to: 0
 26673                           ;keyboard.c: 976: }
 26674                           ;keyboard.c: 978: if(ON_OFF == 1) {
 26675                           
 26676                           ; BSR set to: 0
 26677                           
 26678                           ; BSR set to: 0
 26679  002A7A  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26680  002A7C  D024               	goto	l1612
 26681                           
 26682                           ; BSR set to: 0
 26683                           ;keyboard.c: 981: TMR0ON = 0;
 26684  002A7E  9ED5               	bcf	4053,7,c	;volatile
 26685                           
 26686                           ;keyboard.c: 983: parallel = temp_pitch;
 26687  002A80  C077  F030         	movff	playThisNote8@temp_pitch,_parallel
 26688                           
 26689                           ; BSR set to: 0
 26690                           ;keyboard.c: 986: if(NUM_NOTES_PRESSED > 0){
 26691  002A84  502F               	movf	_NUM_NOTES_PRESSED,w,c
 26692  002A86  B4D8               	btfsc	status,2,c
 26693  002A88  D00A               	goto	l1613
 26694                           
 26695                           ; BSR set to: 0
 26696                           ;keyboard.c: 987: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 26697  002A8A  0E00               	movlw	0
 26698  002A8C  B203               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 26699  002A8E  0E01               	movlw	1
 26700  002A90  ECEF  F04B         	call	_wait_one_pulse
 26701                           
 26702                           ;keyboard.c: 988: if(note_off_was_sent == 0) {key_press_release_note_off();}
 26703  002A94  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 26704  002A96  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 26705                           
 26706                           ;keyboard.c: 989: TIMER_OVERFLOWS = 0;
 26707  002A9A  0E00               	movlw	0
 26708  002A9C  6E2E               	movwf	_TIMER_OVERFLOWS,c
 26709  002A9E                     l1613:
 26710                           
 26711                           ;keyboard.c: 990: }
 26712                           ;keyboard.c: 993: if((KEYBOARD_MODE == MAJOR) | (KEYBOARD_MODE == MINOR) | (KEYBOARD_MOD
      +                          E == MODES)){
 26713  002A9E  0100               	movlb	0	; () banked
 26714  002AA0  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 26715  002AA2  B4D8               	btfsc	status,2,c
 26716  002AA4  D008               	goto	u47600
 26717                           
 26718                           ; BSR set to: 0
 26719  002AA6  0E02               	movlw	2
 26720  002AA8  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26721  002AAA  B4D8               	btfsc	status,2,c
 26722  002AAC  D004               	goto	u47600
 26723                           
 26724                           ; BSR set to: 0
 26725  002AAE  0E03               	movlw	3
 26726  002AB0  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26727  002AB2  A4D8               	btfss	status,2,c
 26728  002AB4  D003               	goto	l1615
 26729  002AB6                     u47600:
 26730                           
 26731                           ; BSR set to: 0
 26732                           ;keyboard.c: 994: add_notes_to_arpeggio(temp_pitch);
 26733                           
 26734                           ; BSR set to: 0
 26735  002AB6  5177               	movf	playThisNote8@temp_pitch& (0+255),w,b
 26736  002AB8  ECF4  F034         	call	_add_notes_to_arpeggio
 26737  002ABC                     l1615:
 26738                           
 26739                           ;keyboard.c: 995: }
 26740                           ;keyboard.c: 998: if(LATCH == 0) {latch_was_pressed = 0;}
 26741  002ABC  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 26742  002ABE  9A03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 26743                           
 26744                           ;keyboard.c: 1001: finish_arpeggio_setup();
 26745  002AC0  EC84  F04C         	call	_finish_arpeggio_setup	;wreg free
 26746                           
 26747                           ;keyboard.c: 1004: TMR0ON = 1;
 26748  002AC4  8ED5               	bsf	4053,7,c	;volatile
 26749  002AC6                     l1612:
 26750                           
 26751                           ;keyboard.c: 1005: }
 26752                           ;keyboard.c: 1007: if((ON_OFF == 0) && (LATCH == 0)) {
 26753  002AC6  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26754  002AC8  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 26755  002ACA  D062               	goto	l1619
 26756                           
 26757                           ;keyboard.c: 1010: TMR0ON = 0;
 26758  002ACC  9ED5               	bcf	4053,7,c	;volatile
 26759                           
 26760                           ;keyboard.c: 1013: if(NUM_NOTES_PRESSED > 0){
 26761  002ACE  502F               	movf	_NUM_NOTES_PRESSED,w,c
 26762  002AD0  B4D8               	btfsc	status,2,c
 26763  002AD2  D00A               	goto	l1620
 26764                           
 26765                           ;keyboard.c: 1014: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 26766  002AD4  0E00               	movlw	0
 26767  002AD6  B003               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 26768  002AD8  0E01               	movlw	1
 26769  002ADA  ECEF  F04B         	call	_wait_one_pulse
 26770                           
 26771                           ;keyboard.c: 1015: if(note_off_was_sent == 0) {key_press_release_note_off();}
 26772  002ADE  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 26773  002AE0  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 26774                           
 26775                           ;keyboard.c: 1016: TIMER_OVERFLOWS = 0;
 26776  002AE4  0E00               	movlw	0
 26777  002AE6  6E2E               	movwf	_TIMER_OVERFLOWS,c
 26778  002AE8                     l1620:
 26779                           
 26780                           ;keyboard.c: 1017: }
 26781                           ;keyboard.c: 1020: if((KEYBOARD_MODE == MAJOR) | (KEYBOARD_MODE == MINOR) | (KEYBOARD_MO
      +                          DE == MODES)){
 26782  002AE8  0100               	movlb	0	; () banked
 26783  002AEA  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 26784  002AEC  B4D8               	btfsc	status,2,c
 26785  002AEE  D008               	goto	u47680
 26786                           
 26787                           ; BSR set to: 0
 26788  002AF0  0E02               	movlw	2
 26789  002AF2  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26790  002AF4  B4D8               	btfsc	status,2,c
 26791  002AF6  D004               	goto	u47680
 26792                           
 26793                           ; BSR set to: 0
 26794  002AF8  0E03               	movlw	3
 26795  002AFA  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26796  002AFC  A4D8               	btfss	status,2,c
 26797  002AFE  D003               	goto	l1622
 26798  002B00                     u47680:
 26799                           
 26800                           ; BSR set to: 0
 26801                           ;keyboard.c: 1021: delete_notes_from_arpeggio(temp_pitch);
 26802                           
 26803                           ; BSR set to: 0
 26804  002B00  5177               	movf	playThisNote8@temp_pitch& (0+255),w,b
 26805  002B02  EC5C  F04B         	call	_delete_notes_from_arpeggio
 26806  002B06                     l1622:
 26807                           
 26808                           ;keyboard.c: 1022: }
 26809                           ;keyboard.c: 1024: if(temp_pitch == parallel){NUM_NOTES_PRESSED = 0;}
 26810  002B06  C030  F072         	movff	_parallel,??_playThisNote8
 26811  002B0A  0100               	movlb	0	; () banked
 26812  002B0C  6B73               	clrf	(??_playThisNote8+1)& (0+255),b
 26813  002B0E  BF72               	btfsc	??_playThisNote8& (0+255),7,b
 26814  002B10  0773               	decf	(??_playThisNote8+1)& (0+255),f,b
 26815  002B12  5177               	movf	playThisNote8@temp_pitch& (0+255),w,b
 26816  002B14  6F74               	movwf	(??_playThisNote8+2)& (0+255),b
 26817  002B16  6B75               	clrf	(??_playThisNote8+3)& (0+255),b
 26818  002B18  5172               	movf	??_playThisNote8& (0+255),w,b
 26819  002B1A  1974               	xorwf	(??_playThisNote8+2)& (0+255),w,b
 26820  002B1C  E106               	bnz	l27282
 26821  002B1E  5173               	movf	(??_playThisNote8+1)& (0+255),w,b
 26822  002B20  1975               	xorwf	(??_playThisNote8+3)& (0+255),w,b
 26823  002B22  A4D8               	btfss	status,2,c
 26824  002B24  D002               	goto	l1625
 26825                           
 26826                           ; BSR set to: 0
 26827  002B26  0E00               	movlw	0
 26828  002B28  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 26829  002B2A                     l1625:
 26830  002B2A                     l27282:
 26831                           
 26832                           ; BSR set to: 0
 26833                           ;keyboard.c: 1029: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 26834  002B2A  BC03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 26835                           
 26836                           ; BSR set to: 0
 26837  002B2C  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 26838  002B2E  D001               	goto	l1626
 26839                           
 26840                           ; BSR set to: 0
 26841                           ;keyboard.c: 1030: LATCH = 1;
 26842  002B30  8004               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 26843  002B32                     l1626:
 26844                           
 26845                           ; BSR set to: 0
 26846                           ;keyboard.c: 1031: }
 26847                           ;keyboard.c: 1036: if(((KEYBOARD_MODE == MAJOR) | (KEYBOARD_MODE == MINOR) | (KEYBOARD_M
      +                          ODE == MODES)) && (UN_LATCH_MODE == 0) && (latch_was_pressed == 1)){
 26848                           
 26849                           ; BSR set to: 0
 26850  002B32  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 26851  002B34  B4D8               	btfsc	status,2,c
 26852  002B36  D008               	goto	u47740
 26853                           
 26854                           ; BSR set to: 0
 26855  002B38  0E02               	movlw	2
 26856  002B3A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26857  002B3C  B4D8               	btfsc	status,2,c
 26858  002B3E  D004               	goto	u47740
 26859                           
 26860                           ; BSR set to: 0
 26861  002B40  0E03               	movlw	3
 26862  002B42  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26863  002B44  A4D8               	btfss	status,2,c
 26864  002B46  D007               	goto	l1627
 26865  002B48                     u47740:
 26866                           
 26867                           ; BSR set to: 0
 26868  002B48  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 26869                           
 26870                           ; BSR set to: 0
 26871  002B4A  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 26872  002B4C  D004               	goto	l1627
 26873                           
 26874                           ; BSR set to: 0
 26875                           ;keyboard.c: 1037: NUM_NOTES_PRESSED = 0;
 26876  002B4E  0E00               	movlw	0
 26877  002B50  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 26878                           
 26879                           ;keyboard.c: 1038: ARRAY_INDEX = 0;
 26880  002B52  0E00               	movlw	0
 26881  002B54  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 26882  002B56                     l1627:
 26883                           
 26884                           ; BSR set to: 0
 26885                           ;keyboard.c: 1039: }
 26886                           ;keyboard.c: 1042: if((KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) | (KEYBOARD_MODE == DIATON
      +                          IC_TRIAD_MINOR) | (KEYBOARD_MODE == DIATONIC_7TH_MAJOR) |(KEYBOARD_MODE == DIATONIC_7TH_
      +                          MINOR) && ((UN_LATCH_MODE == 0) || (UN_LATCH_MODE == 1)) && (latch_was_pressed == 1)){
 26887                           
 26888                           ; BSR set to: 0
 26889  002B56  0E07               	movlw	7
 26890  002B58  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26891  002B5A  B4D8               	btfsc	status,2,c
 26892  002B5C  D00C               	goto	u47800
 26893                           
 26894                           ; BSR set to: 0
 26895  002B5E  0E08               	movlw	8
 26896  002B60  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26897  002B62  B4D8               	btfsc	status,2,c
 26898  002B64  D008               	goto	u47800
 26899                           
 26900                           ; BSR set to: 0
 26901  002B66  0E0A               	movlw	10
 26902  002B68  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26903  002B6A  B4D8               	btfsc	status,2,c
 26904  002B6C  D004               	goto	u47800
 26905                           
 26906                           ; BSR set to: 0
 26907  002B6E  0E0B               	movlw	11
 26908  002B70  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26909  002B72  A4D8               	btfss	status,2,c
 26910  002B74  D00A               	goto	l1630
 26911  002B76                     u47800:
 26912                           
 26913                           ; BSR set to: 0
 26914  002B76  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 26915  002B78  D002               	goto	u47820
 26916                           
 26917                           ; BSR set to: 0
 26918  002B7A  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 26919  002B7C  D006               	goto	l1630
 26920  002B7E                     u47820:
 26921                           
 26922                           ; BSR set to: 0
 26923  002B7E  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 26924  002B80  D004               	goto	l1630
 26925                           
 26926                           ; BSR set to: 0
 26927                           ;keyboard.c: 1043: NUM_NOTES_PRESSED = 0;
 26928  002B82  0E00               	movlw	0
 26929  002B84  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 26930                           
 26931                           ;keyboard.c: 1044: ARRAY_INDEX = 0;
 26932  002B86  0E00               	movlw	0
 26933  002B88  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 26934  002B8A                     l1630:
 26935                           
 26936                           ; BSR set to: 0
 26937                           ;keyboard.c: 1045: }
 26938                           ;keyboard.c: 1048: finish_arpeggio_setup();
 26939                           
 26940                           ; BSR set to: 0
 26941  002B8A  EC84  F04C         	call	_finish_arpeggio_setup	;wreg free
 26942                           
 26943                           ;keyboard.c: 1051: TMR0ON = 1;
 26944  002B8E  8ED5               	bsf	4053,7,c	;volatile
 26945  002B90                     l1619:
 26946                           
 26947                           ;keyboard.c: 1052: }
 26948                           ;keyboard.c: 1053: }
 26949                           ;keyboard.c: 1055: if(KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) {
 26950  002B90  0E07               	movlw	7
 26951  002B92  0100               	movlb	0	; () banked
 26952  002B94  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26953  002B96  A4D8               	btfss	status,2,c
 26954  002B98  D005               	goto	l1635
 26955                           
 26956                           ; BSR set to: 0
 26957                           ;keyboard.c: 1056: playDiatonicTriadMajor(pitch, index);
 26958  002B9A  C071  F061         	movff	playThisNote8@index,playDiatonicTriadMajor@index
 26959  002B9E  5176               	movf	playThisNote8@pitch& (0+255),w,b
 26960  002BA0  EC03  F02D         	call	_playDiatonicTriadMajor
 26961  002BA4                     l1635:
 26962                           
 26963                           ;keyboard.c: 1057: }
 26964                           ;keyboard.c: 1058: if(KEYBOARD_MODE == DIATONIC_TRIAD_MINOR) {
 26965  002BA4  0E08               	movlw	8
 26966  002BA6  0100               	movlb	0	; () banked
 26967  002BA8  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26968  002BAA  A4D8               	btfss	status,2,c
 26969  002BAC  D005               	goto	l1636
 26970                           
 26971                           ; BSR set to: 0
 26972                           ;keyboard.c: 1059: playDiatonicTriadMinor(pitch, index);
 26973  002BAE  C071  F061         	movff	playThisNote8@index,playDiatonicTriadMinor@index
 26974  002BB2  5176               	movf	playThisNote8@pitch& (0+255),w,b
 26975  002BB4  EC76  F023         	call	_playDiatonicTriadMinor
 26976  002BB8                     l1636:
 26977                           
 26978                           ;keyboard.c: 1060: }
 26979                           ;keyboard.c: 1061: if(KEYBOARD_MODE == DIATONIC_7TH_MAJOR) {
 26980  002BB8  0E0A               	movlw	10
 26981  002BBA  0100               	movlb	0	; () banked
 26982  002BBC  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26983  002BBE  A4D8               	btfss	status,2,c
 26984  002BC0  D005               	goto	l1637
 26985                           
 26986                           ; BSR set to: 0
 26987                           ;keyboard.c: 1062: playDiatonicSeventhMajor(pitch, index);
 26988  002BC2  C071  F061         	movff	playThisNote8@index,playDiatonicSeventhMajor@index
 26989  002BC6  5176               	movf	playThisNote8@pitch& (0+255),w,b
 26990  002BC8  EC71  F02B         	call	_playDiatonicSeventhMajor
 26991  002BCC                     l1637:
 26992                           
 26993                           ;keyboard.c: 1063: }
 26994                           ;keyboard.c: 1064: if(KEYBOARD_MODE == DIATONIC_7TH_MINOR) {
 26995  002BCC  0E0B               	movlw	11
 26996  002BCE  0100               	movlb	0	; () banked
 26997  002BD0  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26998  002BD2  A4D8               	btfss	status,2,c
 26999  002BD4  0012               	return	
 27000                           
 27001                           ; BSR set to: 0
 27002                           ;keyboard.c: 1065: playDiatonicSeventhMinor(pitch, index);
 27003  002BD6  C071  F061         	movff	playThisNote8@index,playDiatonicSeventhMinor@index
 27004  002BDA  5176               	movf	playThisNote8@pitch& (0+255),w,b
 27005  002BDC  ECA7  F024         	call	_playDiatonicSeventhMinor
 27006  002BE0  0012               	return	
 27007  002BE2                     __end_of_playThisNote8:
 27008                           	opt stack 0
 27009                           tblptru	equ	0xFF8
 27010                           tblptrh	equ	0xFF7
 27011                           tblptrl	equ	0xFF6
 27012                           tablat	equ	0xFF5
 27013                           prodh	equ	0xFF4
 27014                           prodl	equ	0xFF3
 27015                           intcon	equ	0xFF2
 27016                           intcon2	equ	0xFF1
 27017                           postinc0	equ	0xFEE
 27018                           wreg	equ	0xFE8
 27019                           postinc1	equ	0xFE6
 27020                           plusw1	equ	0xFE3
 27021                           fsr1h	equ	0xFE2
 27022                           fsr1l	equ	0xFE1
 27023                           indf2	equ	0xFDF
 27024                           postinc2	equ	0xFDE
 27025                           postdec2	equ	0xFDD
 27026                           plusw2	equ	0xFDB
 27027                           fsr2h	equ	0xFDA
 27028                           fsr2l	equ	0xFD9
 27029                           status	equ	0xFD8
 27030                           
 27031 ;; *************** function _playDiatonicTriadMinor *****************
 27032 ;; Defined at:
 27033 ;;		line 1211 in file "keyboard.c"
 27034 ;; Parameters:    Size  Location     Type
 27035 ;;  pitch           1    wreg     unsigned char 
 27036 ;;  index           1    1[BANK0 ] unsigned char 
 27037 ;; Auto vars:     Size  Location     Type
 27038 ;;  pitch           1    6[BANK0 ] unsigned char 
 27039 ;;  i               1    8[BANK0 ] unsigned char 
 27040 ;;  i               1    7[BANK0 ] unsigned char 
 27041 ;; Return value:  Size  Location     Type
 27042 ;;                  1    wreg      void 
 27043 ;; Registers used:
 27044 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27045 ;; Tracked objects:
 27046 ;;		On entry : 0/0
 27047 ;;		On exit  : 0/0
 27048 ;;		Unchanged: 0/0
 27049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 27050 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27051 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27052 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27053 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27054 ;;Total ram usage:        8 bytes
 27055 ;; Hardware stack levels used:    1
 27056 ;; Hardware stack levels required when called:   10
 27057 ;; This function calls:
 27058 ;;		_finish_arpeggio_setup
 27059 ;;		_key_press_release_note_off
 27060 ;;		_noteOff
 27061 ;;		_noteOn
 27062 ;;		_wait_one_pulse
 27063 ;; This function is called by:
 27064 ;;		_playThisNote8
 27065 ;; This function uses a non-reentrant model
 27066 ;;
 27067                           
 27068                           	psect	text73
 27069  0046EC                     __ptext73:
 27070                           	opt stack 0
 27071  0046EC                     _playDiatonicTriadMinor:
 27072                           	opt stack 13
 27073                           
 27074                           ;incstack = 0
 27075                           ;playDiatonicTriadMinor@pitch stored from wreg
 27076  0046EC  0100               	movlb	0	; () banked
 27077  0046EE  6F66               	movwf	playDiatonicTriadMinor@pitch& (0+255),b
 27078                           
 27079                           ;keyboard.c: 1214: if(ARPEGGIO_ON == 0){
 27080  0046F0  B604               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 27081  0046F2  D08F               	goto	u46180
 27082                           
 27083                           ;keyboard.c: 1215: for(unsigned char i = 0; i<3; i++){
 27084  0046F4  0E00               	movlw	0
 27085  0046F6  0100               	movlb	0	; () banked
 27086  0046F8  6F67               	movwf	playDiatonicTriadMinor@i& (0+255),b
 27087  0046FA                     l26632:
 27088                           
 27089                           ; BSR set to: 0
 27090  0046FA  0E02               	movlw	2
 27091  0046FC  6567               	cpfsgt	playDiatonicTriadMinor@i& (0+255),b
 27092  0046FE  D001               	goto	l1689
 27093  004700  D088               	goto	u46180
 27094  004702                     l1689:
 27095                           
 27096                           ; BSR set to: 0
 27097                           ;keyboard.c: 1216: if(i==0){
 27098                           
 27099                           ; BSR set to: 0
 27100  004702  5167               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 27101  004704  A4D8               	btfss	status,2,c
 27102  004706  D027               	goto	l1693
 27103                           
 27104                           ; BSR set to: 0
 27105                           ;keyboard.c: 1217: if(ON_OFF == 1) {noteOn(channel,diatonic_minor[index][0],velocity);}
 27106  004708  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27107  00470A  D011               	goto	l1692
 27108                           
 27109                           ; BSR set to: 0
 27110  00470C  5051               	movf	_velocity,w,c
 27111  00470E  6EE6               	movwf	postinc1,c
 27112  004710  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27113  004712  0D03               	mullw	3
 27114  004714  0EE3               	movlw	low _diatonic_minor
 27115  004716  24F3               	addwf	prodl,w,c
 27116  004718  6EF6               	movwf	tblptrl,c
 27117  00471A  0EF2               	movlw	high _diatonic_minor
 27118  00471C  20F4               	addwfc	prodh,w,c
 27119  00471E  6EF7               	movwf	tblptrh,c
 27120  004720                     	if	0	;There are less than 3 active tblptr bytes
 27121  004720                     	endif
 27122  004720  0008               	tblrd		*
 27123  004722  50F5               	movf	tablat,w,c
 27124  004724  6EE6               	movwf	postinc1,c
 27125  004726  503E               	movf	_channel,w,c
 27126  004728  6EE6               	movwf	postinc1,c
 27127  00472A  EC95  F045         	call	_noteOn	;wreg free
 27128  00472E                     l1692:
 27129                           
 27130                           ;keyboard.c: 1218: if(ON_OFF == 0) {noteOff(channel,diatonic_minor[index][0],velocity);}
 27131  00472E  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27132  004730  D012               	goto	l1693
 27133  004732  5051               	movf	_velocity,w,c
 27134  004734  6EE6               	movwf	postinc1,c
 27135  004736  0100               	movlb	0	; () banked
 27136  004738  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27137  00473A  0D03               	mullw	3
 27138  00473C  0EE3               	movlw	low _diatonic_minor
 27139  00473E  24F3               	addwf	prodl,w,c
 27140  004740  6EF6               	movwf	tblptrl,c
 27141  004742  0EF2               	movlw	high _diatonic_minor
 27142  004744  20F4               	addwfc	prodh,w,c
 27143  004746  6EF7               	movwf	tblptrh,c
 27144  004748                     	if	0	;There are less than 3 active tblptr bytes
 27145  004748                     	endif
 27146  004748  0008               	tblrd		*
 27147  00474A  50F5               	movf	tablat,w,c
 27148  00474C  6EE6               	movwf	postinc1,c
 27149  00474E  503E               	movf	_channel,w,c
 27150  004750  6EE6               	movwf	postinc1,c
 27151  004752  EC4A  F04A         	call	_noteOff	;wreg free
 27152  004756                     l1693:
 27153                           
 27154                           ;keyboard.c: 1219: }
 27155                           ;keyboard.c: 1220: if(i>0){
 27156  004756  0100               	movlb	0	; () banked
 27157  004758  5167               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 27158  00475A  B4D8               	btfsc	status,2,c
 27159  00475C  D057               	goto	l1696
 27160                           
 27161                           ; BSR set to: 0
 27162                           ;keyboard.c: 1221: if(ON_OFF == 1) noteOn(channel,diatonic_minor[index][0] + diatonic_mi
      +                          nor[index][i],velocity);
 27163  00475E  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27164  004760  D029               	goto	l1695
 27165                           
 27166                           ; BSR set to: 0
 27167  004762  5051               	movf	_velocity,w,c
 27168  004764  6EE6               	movwf	postinc1,c
 27169  004766  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27170  004768  0D03               	mullw	3
 27171  00476A  0EE3               	movlw	low _diatonic_minor
 27172  00476C  6F62               	movwf	??_playDiatonicTriadMinor& (0+255),b
 27173  00476E  0EF2               	movlw	high _diatonic_minor
 27174  004770  6F63               	movwf	(??_playDiatonicTriadMinor+1)& (0+255),b
 27175  004772  50F3               	movf	prodl,w,c
 27176  004774  2762               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 27177  004776  50F4               	movf	prodh,w,c
 27178  004778  2363               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27179  00477A  5167               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 27180  00477C  0D01               	mullw	1
 27181  00477E  50F3               	movf	prodl,w,c
 27182  004780  2762               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 27183  004782  50F4               	movf	prodh,w,c
 27184  004784  2363               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27185  004786  C062  FFF6         	movff	??_playDiatonicTriadMinor,tblptrl
 27186  00478A  C063  FFF7         	movff	??_playDiatonicTriadMinor+1,tblptrh
 27187  00478E                     	if	0	;tblptru may be non-zero
 27188  00478E                     	endif
 27189  00478E                     	if	0	;tblptru may be non-zero
 27190  00478E                     	endif
 27191  00478E  0008               	tblrd		*
 27192  004790  CFF5 F064          	movff	tablat,??_playDiatonicTriadMinor+2
 27193  004794  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27194  004796  0D03               	mullw	3
 27195  004798  0EE3               	movlw	low _diatonic_minor
 27196  00479A  24F3               	addwf	prodl,w,c
 27197  00479C  6EF6               	movwf	tblptrl,c
 27198  00479E  0EF2               	movlw	high _diatonic_minor
 27199  0047A0  20F4               	addwfc	prodh,w,c
 27200  0047A2  6EF7               	movwf	tblptrh,c
 27201  0047A4                     	if	0	;There are less than 3 active tblptr bytes
 27202  0047A4                     	endif
 27203  0047A4  0008               	tblrd		*
 27204  0047A6  50F5               	movf	tablat,w,c
 27205  0047A8  2564               	addwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 27206  0047AA  6EE6               	movwf	postinc1,c
 27207  0047AC  503E               	movf	_channel,w,c
 27208  0047AE  6EE6               	movwf	postinc1,c
 27209  0047B0  EC95  F045         	call	_noteOn	;wreg free
 27210  0047B4                     l1695:
 27211                           
 27212                           ;keyboard.c: 1222: if(ON_OFF == 0) noteOff(channel,diatonic_minor[index][0] + diatonic_m
      +                          inor[index][i],velocity);
 27213  0047B4  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27214  0047B6  D02A               	goto	l1696
 27215  0047B8  5051               	movf	_velocity,w,c
 27216  0047BA  6EE6               	movwf	postinc1,c
 27217  0047BC  0100               	movlb	0	; () banked
 27218  0047BE  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27219  0047C0  0D03               	mullw	3
 27220  0047C2  0EE3               	movlw	low _diatonic_minor
 27221  0047C4  6F62               	movwf	??_playDiatonicTriadMinor& (0+255),b
 27222  0047C6  0EF2               	movlw	high _diatonic_minor
 27223  0047C8  6F63               	movwf	(??_playDiatonicTriadMinor+1)& (0+255),b
 27224  0047CA  50F3               	movf	prodl,w,c
 27225  0047CC  2762               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 27226  0047CE  50F4               	movf	prodh,w,c
 27227  0047D0  2363               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27228  0047D2  5167               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 27229  0047D4  0D01               	mullw	1
 27230  0047D6  50F3               	movf	prodl,w,c
 27231  0047D8  2762               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 27232  0047DA  50F4               	movf	prodh,w,c
 27233  0047DC  2363               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27234  0047DE  C062  FFF6         	movff	??_playDiatonicTriadMinor,tblptrl
 27235  0047E2  C063  FFF7         	movff	??_playDiatonicTriadMinor+1,tblptrh
 27236  0047E6                     	if	0	;tblptru may be non-zero
 27237  0047E6                     	endif
 27238  0047E6                     	if	0	;tblptru may be non-zero
 27239  0047E6                     	endif
 27240  0047E6  0008               	tblrd		*
 27241  0047E8  CFF5 F064          	movff	tablat,??_playDiatonicTriadMinor+2
 27242  0047EC  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27243  0047EE  0D03               	mullw	3
 27244  0047F0  0EE3               	movlw	low _diatonic_minor
 27245  0047F2  24F3               	addwf	prodl,w,c
 27246  0047F4  6EF6               	movwf	tblptrl,c
 27247  0047F6  0EF2               	movlw	high _diatonic_minor
 27248  0047F8  20F4               	addwfc	prodh,w,c
 27249  0047FA  6EF7               	movwf	tblptrh,c
 27250  0047FC                     	if	0	;There are less than 3 active tblptr bytes
 27251  0047FC                     	endif
 27252  0047FC  0008               	tblrd		*
 27253  0047FE  50F5               	movf	tablat,w,c
 27254  004800  2564               	addwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 27255  004802  6EE6               	movwf	postinc1,c
 27256  004804  503E               	movf	_channel,w,c
 27257  004806  6EE6               	movwf	postinc1,c
 27258  004808  EC4A  F04A         	call	_noteOff	;wreg free
 27259  00480C                     l1696:
 27260  00480C  0100               	movlb	0	; () banked
 27261  00480E  2B67               	incf	playDiatonicTriadMinor@i& (0+255),f,b
 27262  004810  D774               	goto	l26632
 27263  004812                     u46180:
 27264                           
 27265                           ;keyboard.c: 1223: }
 27266                           ;keyboard.c: 1224: }
 27267                           ;keyboard.c: 1225: }
 27268                           ;keyboard.c: 1228: if(ARPEGGIO_ON == 1){
 27269                           
 27270                           ; BSR set to: 0
 27271  004812  A604               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 27272  004814  0012               	return	
 27273                           
 27274                           ;keyboard.c: 1229: if(ON_OFF == 1) {
 27275  004816  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27276  004818  D065               	goto	l1698
 27277                           
 27278                           ;keyboard.c: 1231: TMR0ON = 0;
 27279  00481A  9ED5               	bcf	4053,7,c	;volatile
 27280                           
 27281                           ;keyboard.c: 1233: parallel = pitch;
 27282  00481C  C066  F030         	movff	playDiatonicTriadMinor@pitch,_parallel
 27283                           
 27284                           ;keyboard.c: 1236: if(NUM_NOTES_PRESSED > 0){
 27285  004820  502F               	movf	_NUM_NOTES_PRESSED,w,c
 27286  004822  B4D8               	btfsc	status,2,c
 27287  004824  D00A               	goto	l1699
 27288                           
 27289                           ;keyboard.c: 1237: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 27290  004826  0E00               	movlw	0
 27291  004828  B203               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 27292  00482A  0E01               	movlw	1
 27293  00482C  ECEF  F04B         	call	_wait_one_pulse
 27294                           
 27295                           ;keyboard.c: 1238: if(note_off_was_sent == 0) {key_press_release_note_off();}
 27296  004830  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 27297  004832  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 27298                           
 27299                           ;keyboard.c: 1239: TIMER_OVERFLOWS = 0;
 27300  004836  0E00               	movlw	0
 27301  004838  6E2E               	movwf	_TIMER_OVERFLOWS,c
 27302  00483A                     l1699:
 27303                           
 27304                           ;keyboard.c: 1240: }
 27305                           ;keyboard.c: 1242: for(unsigned char i = 0; i<3; i++){
 27306  00483A  0E00               	movlw	0
 27307  00483C  0100               	movlb	0	; () banked
 27308  00483E  6F68               	movwf	playDiatonicTriadMinor@i_1723& (0+255),b
 27309  004840                     l26676:
 27310                           
 27311                           ; BSR set to: 0
 27312  004840  0E02               	movlw	2
 27313  004842  6568               	cpfsgt	playDiatonicTriadMinor@i_1723& (0+255),b
 27314  004844  D001               	goto	l1701
 27315  004846  D046               	goto	u46260
 27316  004848                     l1701:
 27317                           
 27318                           ; BSR set to: 0
 27319                           ;keyboard.c: 1243: if(i==0){ARPEGGIO[i] = diatonic_minor[index][0];}
 27320                           
 27321                           ; BSR set to: 0
 27322  004848  5168               	movf	playDiatonicTriadMinor@i_1723& (0+255),w,b
 27323  00484A  A4D8               	btfss	status,2,c
 27324  00484C  D013               	goto	l1703
 27325                           
 27326                           ; BSR set to: 0
 27327  00484E  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27328  004850  0D03               	mullw	3
 27329  004852  0EE3               	movlw	low _diatonic_minor
 27330  004854  24F3               	addwf	prodl,w,c
 27331  004856  6EF6               	movwf	tblptrl,c
 27332  004858  0EF2               	movlw	high _diatonic_minor
 27333  00485A  20F4               	addwfc	prodh,w,c
 27334  00485C  6EF7               	movwf	tblptrh,c
 27335  00485E                     	if	0	;There are less than 3 active tblptr bytes
 27336  00485E                     	endif
 27337  00485E  5168               	movf	playDiatonicTriadMinor@i_1723& (0+255),w,b
 27338  004860  0D01               	mullw	1
 27339  004862  0E82               	movlw	low _ARPEGGIO
 27340  004864  24F3               	addwf	prodl,w,c
 27341  004866  6ED9               	movwf	fsr2l,c
 27342  004868  0E01               	movlw	high _ARPEGGIO
 27343  00486A  20F4               	addwfc	prodh,w,c
 27344  00486C  6EDA               	movwf	fsr2h,c
 27345  00486E  0008               	tblrd		*
 27346  004870  CFF5 FFDF          	movff	tablat,indf2
 27347  004874                     l1703:
 27348                           
 27349                           ; BSR set to: 0
 27350                           ;keyboard.c: 1244: if(i>0){ARPEGGIO[i] = diatonic_minor[index][0] + diatonic_minor[index
      +                          ][i];}
 27351                           
 27352                           ; BSR set to: 0
 27353  004874  5168               	movf	playDiatonicTriadMinor@i_1723& (0+255),w,b
 27354  004876  B4D8               	btfsc	status,2,c
 27355  004878  D02B               	goto	l1704
 27356                           
 27357                           ; BSR set to: 0
 27358  00487A  5168               	movf	playDiatonicTriadMinor@i_1723& (0+255),w,b
 27359  00487C  0D01               	mullw	1
 27360  00487E  0E82               	movlw	low _ARPEGGIO
 27361  004880  24F3               	addwf	prodl,w,c
 27362  004882  6ED9               	movwf	fsr2l,c
 27363  004884  0E01               	movlw	high _ARPEGGIO
 27364  004886  20F4               	addwfc	prodh,w,c
 27365  004888  6EDA               	movwf	fsr2h,c
 27366  00488A  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27367  00488C  0D03               	mullw	3
 27368  00488E  0EE3               	movlw	low _diatonic_minor
 27369  004890  6F62               	movwf	??_playDiatonicTriadMinor& (0+255),b
 27370  004892  0EF2               	movlw	high _diatonic_minor
 27371  004894  6F63               	movwf	(??_playDiatonicTriadMinor+1)& (0+255),b
 27372  004896  50F3               	movf	prodl,w,c
 27373  004898  2762               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 27374  00489A  50F4               	movf	prodh,w,c
 27375  00489C  2363               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27376  00489E  5168               	movf	playDiatonicTriadMinor@i_1723& (0+255),w,b
 27377  0048A0  0D01               	mullw	1
 27378  0048A2  50F3               	movf	prodl,w,c
 27379  0048A4  2762               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 27380  0048A6  50F4               	movf	prodh,w,c
 27381  0048A8  2363               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27382  0048AA  C062  FFF6         	movff	??_playDiatonicTriadMinor,tblptrl
 27383  0048AE  C063  FFF7         	movff	??_playDiatonicTriadMinor+1,tblptrh
 27384  0048B2                     	if	0	;tblptru may be non-zero
 27385  0048B2                     	endif
 27386  0048B2                     	if	0	;tblptru may be non-zero
 27387  0048B2                     	endif
 27388  0048B2  0008               	tblrd		*
 27389  0048B4  CFF5 F064          	movff	tablat,??_playDiatonicTriadMinor+2
 27390  0048B8  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27391  0048BA  0D03               	mullw	3
 27392  0048BC  0EE3               	movlw	low _diatonic_minor
 27393  0048BE  24F3               	addwf	prodl,w,c
 27394  0048C0  6EF6               	movwf	tblptrl,c
 27395  0048C2  0EF2               	movlw	high _diatonic_minor
 27396  0048C4  20F4               	addwfc	prodh,w,c
 27397  0048C6  6EF7               	movwf	tblptrh,c
 27398  0048C8                     	if	0	;There are less than 3 active tblptr bytes
 27399  0048C8                     	endif
 27400  0048C8  0008               	tblrd		*
 27401  0048CA  50F5               	movf	tablat,w,c
 27402  0048CC  2564               	addwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 27403  0048CE  6EDF               	movwf	indf2,c
 27404  0048D0                     l1704:
 27405                           
 27406                           ; BSR set to: 0
 27407                           
 27408                           ; BSR set to: 0
 27409  0048D0  2B68               	incf	playDiatonicTriadMinor@i_1723& (0+255),f,b
 27410  0048D2  D7B6               	goto	l26676
 27411  0048D4                     u46260:
 27412                           
 27413                           ; BSR set to: 0
 27414                           ;keyboard.c: 1245: }
 27415                           ;keyboard.c: 1247: NUM_NOTES_PRESSED = 3;
 27416                           
 27417                           ; BSR set to: 0
 27418  0048D4  0E03               	movlw	3
 27419  0048D6  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 27420                           
 27421                           ; BSR set to: 0
 27422                           ;keyboard.c: 1250: if(LATCH == 0) {latch_was_pressed = 0;}
 27423  0048D8  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 27424                           
 27425                           ; BSR set to: 0
 27426  0048DA  9A03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27427                           
 27428                           ; BSR set to: 0
 27429                           ;keyboard.c: 1253: finish_arpeggio_setup();
 27430                           
 27431                           ; BSR set to: 0
 27432  0048DC  EC84  F04C         	call	_finish_arpeggio_setup	;wreg free
 27433                           
 27434                           ;keyboard.c: 1255: TMR0ON = 1;
 27435  0048E0  8ED5               	bsf	4053,7,c	;volatile
 27436                           
 27437                           ;keyboard.c: 1257: return;
 27438  0048E2  0012               	return	
 27439  0048E4                     l1698:
 27440                           
 27441                           ;keyboard.c: 1258: }
 27442                           ;keyboard.c: 1260: if((ON_OFF == 0) && (LATCH == 0)) {
 27443  0048E4  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27444  0048E6  0012               	return	
 27445  0048E8  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 27446  0048EA  0012               	return	
 27447                           
 27448                           ;keyboard.c: 1262: if(NUM_NOTES_PRESSED > 0){
 27449  0048EC  502F               	movf	_NUM_NOTES_PRESSED,w,c
 27450  0048EE  B4D8               	btfsc	status,2,c
 27451  0048F0  D00A               	goto	l1708
 27452                           
 27453                           ;keyboard.c: 1263: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 27454  0048F2  0E00               	movlw	0
 27455  0048F4  B003               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 27456  0048F6  0E01               	movlw	1
 27457  0048F8  ECEF  F04B         	call	_wait_one_pulse
 27458                           
 27459                           ;keyboard.c: 1264: if(note_off_was_sent == 0) {key_press_release_note_off();}
 27460  0048FC  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 27461  0048FE  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 27462                           
 27463                           ;keyboard.c: 1265: TIMER_OVERFLOWS = 0;
 27464  004902  0E00               	movlw	0
 27465  004904  6E2E               	movwf	_TIMER_OVERFLOWS,c
 27466  004906                     l1708:
 27467                           
 27468                           ;keyboard.c: 1266: }
 27469                           ;keyboard.c: 1268: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 27470  004906  C030  F062         	movff	_parallel,??_playDiatonicTriadMinor
 27471  00490A  0100               	movlb	0	; () banked
 27472  00490C  6B63               	clrf	(??_playDiatonicTriadMinor+1)& (0+255),b
 27473  00490E  BF62               	btfsc	??_playDiatonicTriadMinor& (0+255),7,b
 27474  004910  0763               	decf	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27475  004912  5166               	movf	playDiatonicTriadMinor@pitch& (0+255),w,b
 27476  004914  6F64               	movwf	(??_playDiatonicTriadMinor+2)& (0+255),b
 27477  004916  6B65               	clrf	(??_playDiatonicTriadMinor+3)& (0+255),b
 27478  004918  5162               	movf	??_playDiatonicTriadMinor& (0+255),w,b
 27479  00491A  1964               	xorwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 27480  00491C  E106               	bnz	l26720
 27481  00491E  5163               	movf	(??_playDiatonicTriadMinor+1)& (0+255),w,b
 27482  004920  1965               	xorwf	(??_playDiatonicTriadMinor+3)& (0+255),w,b
 27483  004922  A4D8               	btfss	status,2,c
 27484  004924  D002               	goto	l1710
 27485                           
 27486                           ; BSR set to: 0
 27487  004926  0E00               	movlw	0
 27488  004928  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 27489  00492A                     l1710:
 27490  00492A                     l26720:
 27491                           
 27492                           ; BSR set to: 0
 27493                           ;keyboard.c: 1270: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 27494  00492A  BC03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 27495                           
 27496                           ; BSR set to: 0
 27497  00492C  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27498  00492E  D001               	goto	l1711
 27499                           
 27500                           ; BSR set to: 0
 27501                           ;keyboard.c: 1271: LATCH = 1;
 27502  004930  8004               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 27503  004932                     l1711:
 27504                           
 27505                           ; BSR set to: 0
 27506                           ;keyboard.c: 1272: }
 27507                           ;keyboard.c: 1276: if(((UN_LATCH_MODE == 0) || (UN_LATCH_MODE == 1)) && (latch_was_press
      +                          ed == 1)){
 27508  004932  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 27509  004934  D002               	goto	u46360
 27510                           
 27511                           ; BSR set to: 0
 27512  004936  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 27513  004938  D006               	goto	l1712
 27514  00493A                     u46360:
 27515                           
 27516                           ; BSR set to: 0
 27517  00493A  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27518  00493C  D004               	goto	l1712
 27519                           
 27520                           ; BSR set to: 0
 27521                           ;keyboard.c: 1277: NUM_NOTES_PRESSED = 0;
 27522  00493E  0E00               	movlw	0
 27523  004940  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 27524                           
 27525                           ;keyboard.c: 1278: ARRAY_INDEX = 0;
 27526  004942  0E00               	movlw	0
 27527  004944  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 27528  004946                     l1712:
 27529                           
 27530                           ; BSR set to: 0
 27531                           ;keyboard.c: 1279: }
 27532                           ;keyboard.c: 1282: finish_arpeggio_setup();
 27533                           
 27534                           ; BSR set to: 0
 27535  004946  EC84  F04C         	call	_finish_arpeggio_setup	;wreg free
 27536                           
 27537                           ;keyboard.c: 1283: TMR0ON = 1;
 27538  00494A  8ED5               	bsf	4053,7,c	;volatile
 27539                           
 27540                           ;keyboard.c: 1285: return;
 27541  00494C  0012               	return	
 27542  00494E                     __end_of_playDiatonicTriadMinor:
 27543                           	opt stack 0
 27544                           tblptru	equ	0xFF8
 27545                           tblptrh	equ	0xFF7
 27546                           tblptrl	equ	0xFF6
 27547                           tablat	equ	0xFF5
 27548                           prodh	equ	0xFF4
 27549                           prodl	equ	0xFF3
 27550                           intcon	equ	0xFF2
 27551                           intcon2	equ	0xFF1
 27552                           postinc0	equ	0xFEE
 27553                           wreg	equ	0xFE8
 27554                           postinc1	equ	0xFE6
 27555                           plusw1	equ	0xFE3
 27556                           fsr1h	equ	0xFE2
 27557                           fsr1l	equ	0xFE1
 27558                           indf2	equ	0xFDF
 27559                           postinc2	equ	0xFDE
 27560                           postdec2	equ	0xFDD
 27561                           plusw2	equ	0xFDB
 27562                           fsr2h	equ	0xFDA
 27563                           fsr2l	equ	0xFD9
 27564                           status	equ	0xFD8
 27565                           
 27566 ;; *************** function _playDiatonicTriadMajor *****************
 27567 ;; Defined at:
 27568 ;;		line 1069 in file "keyboard.c"
 27569 ;; Parameters:    Size  Location     Type
 27570 ;;  pitch           1    wreg     unsigned char 
 27571 ;;  index           1    1[BANK0 ] unsigned char 
 27572 ;; Auto vars:     Size  Location     Type
 27573 ;;  pitch           1    8[BANK0 ] unsigned char 
 27574 ;;  i               1    7[BANK0 ] unsigned char 
 27575 ;;  i               1    6[BANK0 ] unsigned char 
 27576 ;; Return value:  Size  Location     Type
 27577 ;;                  1    wreg      void 
 27578 ;; Registers used:
 27579 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27580 ;; Tracked objects:
 27581 ;;		On entry : 0/0
 27582 ;;		On exit  : 0/0
 27583 ;;		Unchanged: 0/0
 27584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 27585 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27586 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27587 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27588 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27589 ;;Total ram usage:        8 bytes
 27590 ;; Hardware stack levels used:    1
 27591 ;; Hardware stack levels required when called:   10
 27592 ;; This function calls:
 27593 ;;		_finish_arpeggio_setup
 27594 ;;		_key_press_release_note_off
 27595 ;;		_noteOff
 27596 ;;		_noteOn
 27597 ;;		_wait_one_pulse
 27598 ;; This function is called by:
 27599 ;;		_playThisNote8
 27600 ;; This function uses a non-reentrant model
 27601 ;;
 27602                           
 27603                           	psect	text74
 27604  005A06                     __ptext74:
 27605                           	opt stack 0
 27606  005A06                     _playDiatonicTriadMajor:
 27607                           	opt stack 13
 27608                           
 27609                           ;incstack = 0
 27610                           ;playDiatonicTriadMajor@pitch stored from wreg
 27611  005A06  0100               	movlb	0	; () banked
 27612  005A08  6F68               	movwf	playDiatonicTriadMajor@pitch& (0+255),b
 27613                           
 27614                           ;keyboard.c: 1072: if(ARPEGGIO_ON == 0){
 27615  005A0A  B604               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 27616  005A0C  D04B               	goto	u45920
 27617                           
 27618                           ;keyboard.c: 1073: for(unsigned char i = 0; i<3; i++){
 27619  005A0E  0E00               	movlw	0
 27620  005A10  0100               	movlb	0	; () banked
 27621  005A12  6F66               	movwf	playDiatonicTriadMajor@i& (0+255),b
 27622  005A14                     l26546:
 27623                           
 27624                           ; BSR set to: 0
 27625  005A14  0E02               	movlw	2
 27626  005A16  6566               	cpfsgt	playDiatonicTriadMajor@i& (0+255),b
 27627  005A18  D001               	goto	l1643
 27628  005A1A  D044               	goto	u45920
 27629  005A1C                     l1643:
 27630                           
 27631                           ; BSR set to: 0
 27632                           ;keyboard.c: 1074: if(ON_OFF == 1) {noteOn(channel,pitch + diatonic_major[index][i],velo
      +                          city);}
 27633  005A1C  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27634  005A1E  D01E               	goto	l1645
 27635                           
 27636                           ; BSR set to: 0
 27637  005A20  5051               	movf	_velocity,w,c
 27638  005A22  6EE6               	movwf	postinc1,c
 27639  005A24  5161               	movf	playDiatonicTriadMajor@index& (0+255),w,b
 27640  005A26  0D03               	mullw	3
 27641  005A28  0E10               	movlw	low _diatonic_major
 27642  005A2A  6F62               	movwf	??_playDiatonicTriadMajor& (0+255),b
 27643  005A2C  0EF3               	movlw	high _diatonic_major
 27644  005A2E  6F63               	movwf	(??_playDiatonicTriadMajor+1)& (0+255),b
 27645  005A30  50F3               	movf	prodl,w,c
 27646  005A32  2762               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 27647  005A34  50F4               	movf	prodh,w,c
 27648  005A36  2363               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27649  005A38  5166               	movf	playDiatonicTriadMajor@i& (0+255),w,b
 27650  005A3A  0D01               	mullw	1
 27651  005A3C  50F3               	movf	prodl,w,c
 27652  005A3E  2762               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 27653  005A40  50F4               	movf	prodh,w,c
 27654  005A42  2363               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27655  005A44  C062  FFF6         	movff	??_playDiatonicTriadMajor,tblptrl
 27656  005A48  C063  FFF7         	movff	??_playDiatonicTriadMajor+1,tblptrh
 27657  005A4C                     	if	0	;tblptru may be non-zero
 27658  005A4C                     	endif
 27659  005A4C                     	if	0	;tblptru may be non-zero
 27660  005A4C                     	endif
 27661  005A4C  0008               	tblrd		*
 27662  005A4E  50F5               	movf	tablat,w,c
 27663  005A50  2568               	addwf	playDiatonicTriadMajor@pitch& (0+255),w,b
 27664  005A52  6EE6               	movwf	postinc1,c
 27665  005A54  503E               	movf	_channel,w,c
 27666  005A56  6EE6               	movwf	postinc1,c
 27667  005A58  EC95  F045         	call	_noteOn	;wreg free
 27668  005A5C                     l1645:
 27669                           
 27670                           ;keyboard.c: 1075: if(ON_OFF == 0) {noteOff(channel,pitch + diatonic_major[index][i],vel
      +                          ocity);}
 27671  005A5C  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27672  005A5E  D01F               	goto	l1646
 27673  005A60  5051               	movf	_velocity,w,c
 27674  005A62  6EE6               	movwf	postinc1,c
 27675  005A64  0100               	movlb	0	; () banked
 27676  005A66  5161               	movf	playDiatonicTriadMajor@index& (0+255),w,b
 27677  005A68  0D03               	mullw	3
 27678  005A6A  0E10               	movlw	low _diatonic_major
 27679  005A6C  6F62               	movwf	??_playDiatonicTriadMajor& (0+255),b
 27680  005A6E  0EF3               	movlw	high _diatonic_major
 27681  005A70  6F63               	movwf	(??_playDiatonicTriadMajor+1)& (0+255),b
 27682  005A72  50F3               	movf	prodl,w,c
 27683  005A74  2762               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 27684  005A76  50F4               	movf	prodh,w,c
 27685  005A78  2363               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27686  005A7A  5166               	movf	playDiatonicTriadMajor@i& (0+255),w,b
 27687  005A7C  0D01               	mullw	1
 27688  005A7E  50F3               	movf	prodl,w,c
 27689  005A80  2762               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 27690  005A82  50F4               	movf	prodh,w,c
 27691  005A84  2363               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27692  005A86  C062  FFF6         	movff	??_playDiatonicTriadMajor,tblptrl
 27693  005A8A  C063  FFF7         	movff	??_playDiatonicTriadMajor+1,tblptrh
 27694  005A8E                     	if	0	;tblptru may be non-zero
 27695  005A8E                     	endif
 27696  005A8E                     	if	0	;tblptru may be non-zero
 27697  005A8E                     	endif
 27698  005A8E  0008               	tblrd		*
 27699  005A90  50F5               	movf	tablat,w,c
 27700  005A92  2568               	addwf	playDiatonicTriadMajor@pitch& (0+255),w,b
 27701  005A94  6EE6               	movwf	postinc1,c
 27702  005A96  503E               	movf	_channel,w,c
 27703  005A98  6EE6               	movwf	postinc1,c
 27704  005A9A  EC4A  F04A         	call	_noteOff	;wreg free
 27705  005A9E                     l1646:
 27706  005A9E  0100               	movlb	0	; () banked
 27707  005AA0  2B66               	incf	playDiatonicTriadMajor@i& (0+255),f,b
 27708  005AA2  D7B8               	goto	l26546
 27709  005AA4                     u45920:
 27710                           
 27711                           ;keyboard.c: 1076: }
 27712                           ;keyboard.c: 1077: }
 27713                           ;keyboard.c: 1080: if(ARPEGGIO_ON == 1){
 27714                           
 27715                           ; BSR set to: 0
 27716  005AA4  A604               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 27717  005AA6  0012               	return	
 27718                           
 27719                           ;keyboard.c: 1081: if(ON_OFF == 1) {
 27720  005AA8  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27721  005AAA  D040               	goto	l1648
 27722                           
 27723                           ;keyboard.c: 1083: TMR0ON = 0;
 27724  005AAC  9ED5               	bcf	4053,7,c	;volatile
 27725                           
 27726                           ;keyboard.c: 1085: parallel = pitch;
 27727  005AAE  C068  F030         	movff	playDiatonicTriadMajor@pitch,_parallel
 27728                           
 27729                           ;keyboard.c: 1088: if(NUM_NOTES_PRESSED > 0){
 27730  005AB2  502F               	movf	_NUM_NOTES_PRESSED,w,c
 27731  005AB4  B4D8               	btfsc	status,2,c
 27732  005AB6  D00A               	goto	l1649
 27733                           
 27734                           ;keyboard.c: 1089: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 27735  005AB8  0E00               	movlw	0
 27736  005ABA  B203               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 27737  005ABC  0E01               	movlw	1
 27738  005ABE  ECEF  F04B         	call	_wait_one_pulse
 27739                           
 27740                           ;keyboard.c: 1090: if(note_off_was_sent == 0) {key_press_release_note_off();}
 27741  005AC2  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 27742  005AC4  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 27743                           
 27744                           ;keyboard.c: 1091: TIMER_OVERFLOWS = 0;
 27745  005AC8  0E00               	movlw	0
 27746  005ACA  6E2E               	movwf	_TIMER_OVERFLOWS,c
 27747  005ACC                     l1649:
 27748                           
 27749                           ;keyboard.c: 1092: }
 27750                           ;keyboard.c: 1094: for(unsigned char i = 0; i<3; i++){
 27751  005ACC  0E00               	movlw	0
 27752  005ACE  0100               	movlb	0	; () banked
 27753  005AD0  6F67               	movwf	playDiatonicTriadMajor@i_1713& (0+255),b
 27754  005AD2                     l26576:
 27755                           
 27756                           ; BSR set to: 0
 27757  005AD2  0E02               	movlw	2
 27758  005AD4  6567               	cpfsgt	playDiatonicTriadMajor@i_1713& (0+255),b
 27759  005AD6  D001               	goto	l1651
 27760  005AD8  D022               	goto	u45980
 27761  005ADA                     l1651:
 27762                           
 27763                           ; BSR set to: 0
 27764                           ;keyboard.c: 1095: ARPEGGIO[i] = pitch + diatonic_major[index][i];
 27765                           
 27766                           ; BSR set to: 0
 27767  005ADA  5167               	movf	playDiatonicTriadMajor@i_1713& (0+255),w,b
 27768  005ADC  0D01               	mullw	1
 27769  005ADE  0E82               	movlw	low _ARPEGGIO
 27770  005AE0  24F3               	addwf	prodl,w,c
 27771  005AE2  6ED9               	movwf	fsr2l,c
 27772  005AE4  0E01               	movlw	high _ARPEGGIO
 27773  005AE6  20F4               	addwfc	prodh,w,c
 27774  005AE8  6EDA               	movwf	fsr2h,c
 27775  005AEA  5161               	movf	playDiatonicTriadMajor@index& (0+255),w,b
 27776  005AEC  0D03               	mullw	3
 27777  005AEE  0E10               	movlw	low _diatonic_major
 27778  005AF0  6F62               	movwf	??_playDiatonicTriadMajor& (0+255),b
 27779  005AF2  0EF3               	movlw	high _diatonic_major
 27780  005AF4  6F63               	movwf	(??_playDiatonicTriadMajor+1)& (0+255),b
 27781  005AF6  50F3               	movf	prodl,w,c
 27782  005AF8  2762               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 27783  005AFA  50F4               	movf	prodh,w,c
 27784  005AFC  2363               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27785  005AFE  5167               	movf	playDiatonicTriadMajor@i_1713& (0+255),w,b
 27786  005B00  0D01               	mullw	1
 27787  005B02  50F3               	movf	prodl,w,c
 27788  005B04  2762               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 27789  005B06  50F4               	movf	prodh,w,c
 27790  005B08  2363               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27791  005B0A  C062  FFF6         	movff	??_playDiatonicTriadMajor,tblptrl
 27792  005B0E  C063  FFF7         	movff	??_playDiatonicTriadMajor+1,tblptrh
 27793  005B12                     	if	0	;tblptru may be non-zero
 27794  005B12                     	endif
 27795  005B12                     	if	0	;tblptru may be non-zero
 27796  005B12                     	endif
 27797  005B12  0008               	tblrd		*
 27798  005B14  50F5               	movf	tablat,w,c
 27799  005B16  2568               	addwf	playDiatonicTriadMajor@pitch& (0+255),w,b
 27800  005B18  6EDF               	movwf	indf2,c
 27801                           
 27802                           ; BSR set to: 0
 27803  005B1A  2B67               	incf	playDiatonicTriadMajor@i_1713& (0+255),f,b
 27804  005B1C  D7DA               	goto	l26576
 27805  005B1E                     u45980:
 27806                           
 27807                           ; BSR set to: 0
 27808                           ;keyboard.c: 1096: }
 27809                           ;keyboard.c: 1098: NUM_NOTES_PRESSED = 3;
 27810                           
 27811                           ; BSR set to: 0
 27812  005B1E  0E03               	movlw	3
 27813  005B20  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 27814                           
 27815                           ; BSR set to: 0
 27816                           ;keyboard.c: 1101: if(LATCH == 0) {latch_was_pressed = 0;}
 27817  005B22  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 27818                           
 27819                           ; BSR set to: 0
 27820  005B24  9A03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27821                           
 27822                           ; BSR set to: 0
 27823                           ;keyboard.c: 1104: finish_arpeggio_setup();
 27824                           
 27825                           ; BSR set to: 0
 27826  005B26  EC84  F04C         	call	_finish_arpeggio_setup	;wreg free
 27827                           
 27828                           ;keyboard.c: 1106: TMR0ON = 1;
 27829  005B2A  8ED5               	bsf	4053,7,c	;volatile
 27830  005B2C                     l1648:
 27831                           
 27832                           ;keyboard.c: 1107: }
 27833                           ;keyboard.c: 1109: if((ON_OFF == 0) && (LATCH == 0)) {
 27834  005B2C  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27835  005B2E  0012               	return	
 27836  005B30  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 27837  005B32  0012               	return	
 27838                           
 27839                           ;keyboard.c: 1111: if(NUM_NOTES_PRESSED > 0){
 27840  005B34  502F               	movf	_NUM_NOTES_PRESSED,w,c
 27841  005B36  B4D8               	btfsc	status,2,c
 27842  005B38  D00A               	goto	l1655
 27843                           
 27844                           ;keyboard.c: 1112: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 27845  005B3A  0E00               	movlw	0
 27846  005B3C  B003               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 27847  005B3E  0E01               	movlw	1
 27848  005B40  ECEF  F04B         	call	_wait_one_pulse
 27849                           
 27850                           ;keyboard.c: 1113: if(note_off_was_sent == 0) {key_press_release_note_off();}
 27851  005B44  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 27852  005B46  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 27853                           
 27854                           ;keyboard.c: 1114: TIMER_OVERFLOWS = 0;
 27855  005B4A  0E00               	movlw	0
 27856  005B4C  6E2E               	movwf	_TIMER_OVERFLOWS,c
 27857  005B4E                     l1655:
 27858                           
 27859                           ;keyboard.c: 1115: }
 27860                           ;keyboard.c: 1117: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 27861  005B4E  C030  F062         	movff	_parallel,??_playDiatonicTriadMajor
 27862  005B52  0100               	movlb	0	; () banked
 27863  005B54  6B63               	clrf	(??_playDiatonicTriadMajor+1)& (0+255),b
 27864  005B56  BF62               	btfsc	??_playDiatonicTriadMajor& (0+255),7,b
 27865  005B58  0763               	decf	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27866  005B5A  5168               	movf	playDiatonicTriadMajor@pitch& (0+255),w,b
 27867  005B5C  6F64               	movwf	(??_playDiatonicTriadMajor+2)& (0+255),b
 27868  005B5E  6B65               	clrf	(??_playDiatonicTriadMajor+3)& (0+255),b
 27869  005B60  5162               	movf	??_playDiatonicTriadMajor& (0+255),w,b
 27870  005B62  1964               	xorwf	(??_playDiatonicTriadMajor+2)& (0+255),w,b
 27871  005B64  E106               	bnz	l26614
 27872  005B66  5163               	movf	(??_playDiatonicTriadMajor+1)& (0+255),w,b
 27873  005B68  1965               	xorwf	(??_playDiatonicTriadMajor+3)& (0+255),w,b
 27874  005B6A  A4D8               	btfss	status,2,c
 27875  005B6C  D002               	goto	l1657
 27876                           
 27877                           ; BSR set to: 0
 27878  005B6E  0E00               	movlw	0
 27879  005B70  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 27880  005B72                     l1657:
 27881  005B72                     l26614:
 27882                           
 27883                           ; BSR set to: 0
 27884                           ;keyboard.c: 1119: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 27885  005B72  BC03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 27886                           
 27887                           ; BSR set to: 0
 27888  005B74  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27889  005B76  D001               	goto	l1658
 27890                           
 27891                           ; BSR set to: 0
 27892                           ;keyboard.c: 1120: LATCH = 1;
 27893  005B78  8004               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 27894  005B7A                     l1658:
 27895                           
 27896                           ; BSR set to: 0
 27897                           ;keyboard.c: 1121: }
 27898                           ;keyboard.c: 1125: if(((UN_LATCH_MODE == 0) || (UN_LATCH_MODE == 1)) && (latch_was_press
      +                          ed == 1)){
 27899  005B7A  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 27900  005B7C  D002               	goto	u46080
 27901                           
 27902                           ; BSR set to: 0
 27903  005B7E  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 27904  005B80  D006               	goto	l1659
 27905  005B82                     u46080:
 27906                           
 27907                           ; BSR set to: 0
 27908  005B82  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27909  005B84  D004               	goto	l1659
 27910                           
 27911                           ; BSR set to: 0
 27912                           ;keyboard.c: 1126: NUM_NOTES_PRESSED = 0;
 27913  005B86  0E00               	movlw	0
 27914  005B88  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 27915                           
 27916                           ;keyboard.c: 1127: ARRAY_INDEX = 0;
 27917  005B8A  0E00               	movlw	0
 27918  005B8C  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 27919  005B8E                     l1659:
 27920                           
 27921                           ; BSR set to: 0
 27922                           ;keyboard.c: 1128: }
 27923                           ;keyboard.c: 1131: finish_arpeggio_setup();
 27924                           
 27925                           ; BSR set to: 0
 27926  005B8E  EC84  F04C         	call	_finish_arpeggio_setup	;wreg free
 27927                           
 27928                           ;keyboard.c: 1132: TMR0ON = 1;
 27929  005B92  8ED5               	bsf	4053,7,c	;volatile
 27930  005B94  0012               	return	
 27931  005B96                     __end_of_playDiatonicTriadMajor:
 27932                           	opt stack 0
 27933                           tblptru	equ	0xFF8
 27934                           tblptrh	equ	0xFF7
 27935                           tblptrl	equ	0xFF6
 27936                           tablat	equ	0xFF5
 27937                           prodh	equ	0xFF4
 27938                           prodl	equ	0xFF3
 27939                           intcon	equ	0xFF2
 27940                           intcon2	equ	0xFF1
 27941                           postinc0	equ	0xFEE
 27942                           wreg	equ	0xFE8
 27943                           postinc1	equ	0xFE6
 27944                           plusw1	equ	0xFE3
 27945                           fsr1h	equ	0xFE2
 27946                           fsr1l	equ	0xFE1
 27947                           indf2	equ	0xFDF
 27948                           postinc2	equ	0xFDE
 27949                           postdec2	equ	0xFDD
 27950                           plusw2	equ	0xFDB
 27951                           fsr2h	equ	0xFDA
 27952                           fsr2l	equ	0xFD9
 27953                           status	equ	0xFD8
 27954                           
 27955 ;; *************** function _playDiatonicSeventhMinor *****************
 27956 ;; Defined at:
 27957 ;;		line 1290 in file "keyboard.c"
 27958 ;; Parameters:    Size  Location     Type
 27959 ;;  pitch           1    wreg     unsigned char 
 27960 ;;  index           1    1[BANK0 ] unsigned char 
 27961 ;; Auto vars:     Size  Location     Type
 27962 ;;  pitch           1    6[BANK0 ] unsigned char 
 27963 ;;  i               1    8[BANK0 ] unsigned char 
 27964 ;;  i               1    7[BANK0 ] unsigned char 
 27965 ;; Return value:  Size  Location     Type
 27966 ;;                  1    wreg      void 
 27967 ;; Registers used:
 27968 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27969 ;; Tracked objects:
 27970 ;;		On entry : 0/0
 27971 ;;		On exit  : 0/0
 27972 ;;		Unchanged: 0/0
 27973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 27974 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27975 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27976 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27977 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27978 ;;Total ram usage:        8 bytes
 27979 ;; Hardware stack levels used:    1
 27980 ;; Hardware stack levels required when called:   10
 27981 ;; This function calls:
 27982 ;;		_finish_arpeggio_setup
 27983 ;;		_key_press_release_note_off
 27984 ;;		_noteOff
 27985 ;;		_noteOn
 27986 ;;		_wait_one_pulse
 27987 ;; This function is called by:
 27988 ;;		_playThisNote8
 27989 ;; This function uses a non-reentrant model
 27990 ;;
 27991                           
 27992                           	psect	text75
 27993  00494E                     __ptext75:
 27994                           	opt stack 0
 27995  00494E                     _playDiatonicSeventhMinor:
 27996                           	opt stack 13
 27997                           
 27998                           ;incstack = 0
 27999                           ;playDiatonicSeventhMinor@pitch stored from wreg
 28000  00494E  0100               	movlb	0	; () banked
 28001  004950  6F66               	movwf	playDiatonicSeventhMinor@pitch& (0+255),b
 28002                           
 28003                           ;keyboard.c: 1293: if(ARPEGGIO_ON == 0){
 28004  004952  B604               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 28005  004954  D08F               	goto	u46680
 28006                           
 28007                           ;keyboard.c: 1294: for(unsigned char i = 0; i<4; i++){
 28008  004956  0E00               	movlw	0
 28009  004958  0100               	movlb	0	; () banked
 28010  00495A  6F67               	movwf	playDiatonicSeventhMinor@i& (0+255),b
 28011  00495C                     l26828:
 28012                           
 28013                           ; BSR set to: 0
 28014  00495C  0E03               	movlw	3
 28015  00495E  6567               	cpfsgt	playDiatonicSeventhMinor@i& (0+255),b
 28016  004960  D001               	goto	l1718
 28017  004962  D088               	goto	u46680
 28018  004964                     l1718:
 28019                           
 28020                           ; BSR set to: 0
 28021                           ;keyboard.c: 1295: if(i==0){
 28022                           
 28023                           ; BSR set to: 0
 28024  004964  5167               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 28025  004966  A4D8               	btfss	status,2,c
 28026  004968  D027               	goto	l1722
 28027                           
 28028                           ; BSR set to: 0
 28029                           ;keyboard.c: 1296: if(ON_OFF == 1) {noteOn(channel,diatonic_seventh_minor[index][0],velo
      +                          city);}
 28030  00496A  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28031  00496C  D011               	goto	l1721
 28032                           
 28033                           ; BSR set to: 0
 28034  00496E  5051               	movf	_velocity,w,c
 28035  004970  6EE6               	movwf	postinc1,c
 28036  004972  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28037  004974  0D04               	mullw	4
 28038  004976  0E6B               	movlw	low _diatonic_seventh_minor
 28039  004978  24F3               	addwf	prodl,w,c
 28040  00497A  6EF6               	movwf	tblptrl,c
 28041  00497C  0EF2               	movlw	high _diatonic_seventh_minor
 28042  00497E  20F4               	addwfc	prodh,w,c
 28043  004980  6EF7               	movwf	tblptrh,c
 28044  004982                     	if	0	;There are less than 3 active tblptr bytes
 28045  004982                     	endif
 28046  004982  0008               	tblrd		*
 28047  004984  50F5               	movf	tablat,w,c
 28048  004986  6EE6               	movwf	postinc1,c
 28049  004988  503E               	movf	_channel,w,c
 28050  00498A  6EE6               	movwf	postinc1,c
 28051  00498C  EC95  F045         	call	_noteOn	;wreg free
 28052  004990                     l1721:
 28053                           
 28054                           ;keyboard.c: 1297: if(ON_OFF == 0) {noteOff(channel,diatonic_seventh_minor[index][0],vel
      +                          ocity);}
 28055  004990  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28056  004992  D012               	goto	l1722
 28057  004994  5051               	movf	_velocity,w,c
 28058  004996  6EE6               	movwf	postinc1,c
 28059  004998  0100               	movlb	0	; () banked
 28060  00499A  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28061  00499C  0D04               	mullw	4
 28062  00499E  0E6B               	movlw	low _diatonic_seventh_minor
 28063  0049A0  24F3               	addwf	prodl,w,c
 28064  0049A2  6EF6               	movwf	tblptrl,c
 28065  0049A4  0EF2               	movlw	high _diatonic_seventh_minor
 28066  0049A6  20F4               	addwfc	prodh,w,c
 28067  0049A8  6EF7               	movwf	tblptrh,c
 28068  0049AA                     	if	0	;There are less than 3 active tblptr bytes
 28069  0049AA                     	endif
 28070  0049AA  0008               	tblrd		*
 28071  0049AC  50F5               	movf	tablat,w,c
 28072  0049AE  6EE6               	movwf	postinc1,c
 28073  0049B0  503E               	movf	_channel,w,c
 28074  0049B2  6EE6               	movwf	postinc1,c
 28075  0049B4  EC4A  F04A         	call	_noteOff	;wreg free
 28076  0049B8                     l1722:
 28077                           
 28078                           ;keyboard.c: 1298: }
 28079                           ;keyboard.c: 1299: if(i>0){
 28080  0049B8  0100               	movlb	0	; () banked
 28081  0049BA  5167               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 28082  0049BC  B4D8               	btfsc	status,2,c
 28083  0049BE  D057               	goto	l1725
 28084                           
 28085                           ; BSR set to: 0
 28086                           ;keyboard.c: 1300: if(ON_OFF == 1) noteOn(channel,diatonic_seventh_minor[index][0] + dia
      +                          tonic_seventh_minor[index][i],velocity);
 28087  0049C0  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28088  0049C2  D029               	goto	l1724
 28089                           
 28090                           ; BSR set to: 0
 28091  0049C4  5051               	movf	_velocity,w,c
 28092  0049C6  6EE6               	movwf	postinc1,c
 28093  0049C8  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28094  0049CA  0D04               	mullw	4
 28095  0049CC  0E6B               	movlw	low _diatonic_seventh_minor
 28096  0049CE  6F62               	movwf	??_playDiatonicSeventhMinor& (0+255),b
 28097  0049D0  0EF2               	movlw	high _diatonic_seventh_minor
 28098  0049D2  6F63               	movwf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 28099  0049D4  50F3               	movf	prodl,w,c
 28100  0049D6  2762               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 28101  0049D8  50F4               	movf	prodh,w,c
 28102  0049DA  2363               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28103  0049DC  5167               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 28104  0049DE  0D01               	mullw	1
 28105  0049E0  50F3               	movf	prodl,w,c
 28106  0049E2  2762               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 28107  0049E4  50F4               	movf	prodh,w,c
 28108  0049E6  2363               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28109  0049E8  C062  FFF6         	movff	??_playDiatonicSeventhMinor,tblptrl
 28110  0049EC  C063  FFF7         	movff	??_playDiatonicSeventhMinor+1,tblptrh
 28111  0049F0                     	if	0	;tblptru may be non-zero
 28112  0049F0                     	endif
 28113  0049F0                     	if	0	;tblptru may be non-zero
 28114  0049F0                     	endif
 28115  0049F0  0008               	tblrd		*
 28116  0049F2  CFF5 F064          	movff	tablat,??_playDiatonicSeventhMinor+2
 28117  0049F6  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28118  0049F8  0D04               	mullw	4
 28119  0049FA  0E6B               	movlw	low _diatonic_seventh_minor
 28120  0049FC  24F3               	addwf	prodl,w,c
 28121  0049FE  6EF6               	movwf	tblptrl,c
 28122  004A00  0EF2               	movlw	high _diatonic_seventh_minor
 28123  004A02  20F4               	addwfc	prodh,w,c
 28124  004A04  6EF7               	movwf	tblptrh,c
 28125  004A06                     	if	0	;There are less than 3 active tblptr bytes
 28126  004A06                     	endif
 28127  004A06  0008               	tblrd		*
 28128  004A08  50F5               	movf	tablat,w,c
 28129  004A0A  2564               	addwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 28130  004A0C  6EE6               	movwf	postinc1,c
 28131  004A0E  503E               	movf	_channel,w,c
 28132  004A10  6EE6               	movwf	postinc1,c
 28133  004A12  EC95  F045         	call	_noteOn	;wreg free
 28134  004A16                     l1724:
 28135                           
 28136                           ;keyboard.c: 1301: if(ON_OFF == 0) noteOff(channel,diatonic_seventh_minor[index][0] + di
      +                          atonic_seventh_minor[index][i],velocity);
 28137  004A16  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28138  004A18  D02A               	goto	l1725
 28139  004A1A  5051               	movf	_velocity,w,c
 28140  004A1C  6EE6               	movwf	postinc1,c
 28141  004A1E  0100               	movlb	0	; () banked
 28142  004A20  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28143  004A22  0D04               	mullw	4
 28144  004A24  0E6B               	movlw	low _diatonic_seventh_minor
 28145  004A26  6F62               	movwf	??_playDiatonicSeventhMinor& (0+255),b
 28146  004A28  0EF2               	movlw	high _diatonic_seventh_minor
 28147  004A2A  6F63               	movwf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 28148  004A2C  50F3               	movf	prodl,w,c
 28149  004A2E  2762               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 28150  004A30  50F4               	movf	prodh,w,c
 28151  004A32  2363               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28152  004A34  5167               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 28153  004A36  0D01               	mullw	1
 28154  004A38  50F3               	movf	prodl,w,c
 28155  004A3A  2762               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 28156  004A3C  50F4               	movf	prodh,w,c
 28157  004A3E  2363               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28158  004A40  C062  FFF6         	movff	??_playDiatonicSeventhMinor,tblptrl
 28159  004A44  C063  FFF7         	movff	??_playDiatonicSeventhMinor+1,tblptrh
 28160  004A48                     	if	0	;tblptru may be non-zero
 28161  004A48                     	endif
 28162  004A48                     	if	0	;tblptru may be non-zero
 28163  004A48                     	endif
 28164  004A48  0008               	tblrd		*
 28165  004A4A  CFF5 F064          	movff	tablat,??_playDiatonicSeventhMinor+2
 28166  004A4E  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28167  004A50  0D04               	mullw	4
 28168  004A52  0E6B               	movlw	low _diatonic_seventh_minor
 28169  004A54  24F3               	addwf	prodl,w,c
 28170  004A56  6EF6               	movwf	tblptrl,c
 28171  004A58  0EF2               	movlw	high _diatonic_seventh_minor
 28172  004A5A  20F4               	addwfc	prodh,w,c
 28173  004A5C  6EF7               	movwf	tblptrh,c
 28174  004A5E                     	if	0	;There are less than 3 active tblptr bytes
 28175  004A5E                     	endif
 28176  004A5E  0008               	tblrd		*
 28177  004A60  50F5               	movf	tablat,w,c
 28178  004A62  2564               	addwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 28179  004A64  6EE6               	movwf	postinc1,c
 28180  004A66  503E               	movf	_channel,w,c
 28181  004A68  6EE6               	movwf	postinc1,c
 28182  004A6A  EC4A  F04A         	call	_noteOff	;wreg free
 28183  004A6E                     l1725:
 28184  004A6E  0100               	movlb	0	; () banked
 28185  004A70  2B67               	incf	playDiatonicSeventhMinor@i& (0+255),f,b
 28186  004A72  D774               	goto	l26828
 28187  004A74                     u46680:
 28188                           
 28189                           ;keyboard.c: 1302: }
 28190                           ;keyboard.c: 1303: }
 28191                           ;keyboard.c: 1304: }
 28192                           ;keyboard.c: 1307: if(ARPEGGIO_ON == 1){
 28193                           
 28194                           ; BSR set to: 0
 28195  004A74  A604               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 28196  004A76  0012               	return	
 28197                           
 28198                           ;keyboard.c: 1309: if(ON_OFF == 1) {
 28199  004A78  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28200  004A7A  D064               	goto	l1727
 28201                           
 28202                           ;keyboard.c: 1311: TMR0ON = 0;
 28203  004A7C  9ED5               	bcf	4053,7,c	;volatile
 28204                           
 28205                           ;keyboard.c: 1313: parallel = pitch;
 28206  004A7E  C066  F030         	movff	playDiatonicSeventhMinor@pitch,_parallel
 28207                           
 28208                           ;keyboard.c: 1316: if(NUM_NOTES_PRESSED > 0){
 28209  004A82  502F               	movf	_NUM_NOTES_PRESSED,w,c
 28210  004A84  B4D8               	btfsc	status,2,c
 28211  004A86  D00A               	goto	l1728
 28212                           
 28213                           ;keyboard.c: 1317: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 28214  004A88  0E00               	movlw	0
 28215  004A8A  B203               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 28216  004A8C  0E01               	movlw	1
 28217  004A8E  ECEF  F04B         	call	_wait_one_pulse
 28218                           
 28219                           ;keyboard.c: 1318: if(note_off_was_sent == 0) {key_press_release_note_off();}
 28220  004A92  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 28221  004A94  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 28222                           
 28223                           ;keyboard.c: 1319: TIMER_OVERFLOWS = 0;
 28224  004A98  0E00               	movlw	0
 28225  004A9A  6E2E               	movwf	_TIMER_OVERFLOWS,c
 28226  004A9C                     l1728:
 28227                           
 28228                           ;keyboard.c: 1320: }
 28229                           ;keyboard.c: 1322: for(unsigned char i = 0; i<4; i++){
 28230  004A9C  0E00               	movlw	0
 28231  004A9E  0100               	movlb	0	; () banked
 28232  004AA0  6F68               	movwf	playDiatonicSeventhMinor@i_1728& (0+255),b
 28233  004AA2                     l26872:
 28234                           
 28235                           ; BSR set to: 0
 28236  004AA2  0E03               	movlw	3
 28237  004AA4  6568               	cpfsgt	playDiatonicSeventhMinor@i_1728& (0+255),b
 28238  004AA6  D001               	goto	l1730
 28239  004AA8  D046               	goto	u46760
 28240  004AAA                     l1730:
 28241                           
 28242                           ; BSR set to: 0
 28243                           ;keyboard.c: 1323: if(i==0){ARPEGGIO[i] = diatonic_seventh_minor[index][0];}
 28244                           
 28245                           ; BSR set to: 0
 28246  004AAA  5168               	movf	playDiatonicSeventhMinor@i_1728& (0+255),w,b
 28247  004AAC  A4D8               	btfss	status,2,c
 28248  004AAE  D013               	goto	l1732
 28249                           
 28250                           ; BSR set to: 0
 28251  004AB0  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28252  004AB2  0D04               	mullw	4
 28253  004AB4  0E6B               	movlw	low _diatonic_seventh_minor
 28254  004AB6  24F3               	addwf	prodl,w,c
 28255  004AB8  6EF6               	movwf	tblptrl,c
 28256  004ABA  0EF2               	movlw	high _diatonic_seventh_minor
 28257  004ABC  20F4               	addwfc	prodh,w,c
 28258  004ABE  6EF7               	movwf	tblptrh,c
 28259  004AC0                     	if	0	;There are less than 3 active tblptr bytes
 28260  004AC0                     	endif
 28261  004AC0  5168               	movf	playDiatonicSeventhMinor@i_1728& (0+255),w,b
 28262  004AC2  0D01               	mullw	1
 28263  004AC4  0E82               	movlw	low _ARPEGGIO
 28264  004AC6  24F3               	addwf	prodl,w,c
 28265  004AC8  6ED9               	movwf	fsr2l,c
 28266  004ACA  0E01               	movlw	high _ARPEGGIO
 28267  004ACC  20F4               	addwfc	prodh,w,c
 28268  004ACE  6EDA               	movwf	fsr2h,c
 28269  004AD0  0008               	tblrd		*
 28270  004AD2  CFF5 FFDF          	movff	tablat,indf2
 28271  004AD6                     l1732:
 28272                           
 28273                           ; BSR set to: 0
 28274                           ;keyboard.c: 1324: if(i>0){ARPEGGIO[i] = diatonic_seventh_minor[index][0] + diatonic_sev
      +                          enth_minor[index][i];}
 28275                           
 28276                           ; BSR set to: 0
 28277  004AD6  5168               	movf	playDiatonicSeventhMinor@i_1728& (0+255),w,b
 28278  004AD8  B4D8               	btfsc	status,2,c
 28279  004ADA  D02B               	goto	l1733
 28280                           
 28281                           ; BSR set to: 0
 28282  004ADC  5168               	movf	playDiatonicSeventhMinor@i_1728& (0+255),w,b
 28283  004ADE  0D01               	mullw	1
 28284  004AE0  0E82               	movlw	low _ARPEGGIO
 28285  004AE2  24F3               	addwf	prodl,w,c
 28286  004AE4  6ED9               	movwf	fsr2l,c
 28287  004AE6  0E01               	movlw	high _ARPEGGIO
 28288  004AE8  20F4               	addwfc	prodh,w,c
 28289  004AEA  6EDA               	movwf	fsr2h,c
 28290  004AEC  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28291  004AEE  0D04               	mullw	4
 28292  004AF0  0E6B               	movlw	low _diatonic_seventh_minor
 28293  004AF2  6F62               	movwf	??_playDiatonicSeventhMinor& (0+255),b
 28294  004AF4  0EF2               	movlw	high _diatonic_seventh_minor
 28295  004AF6  6F63               	movwf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 28296  004AF8  50F3               	movf	prodl,w,c
 28297  004AFA  2762               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 28298  004AFC  50F4               	movf	prodh,w,c
 28299  004AFE  2363               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28300  004B00  5168               	movf	playDiatonicSeventhMinor@i_1728& (0+255),w,b
 28301  004B02  0D01               	mullw	1
 28302  004B04  50F3               	movf	prodl,w,c
 28303  004B06  2762               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 28304  004B08  50F4               	movf	prodh,w,c
 28305  004B0A  2363               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28306  004B0C  C062  FFF6         	movff	??_playDiatonicSeventhMinor,tblptrl
 28307  004B10  C063  FFF7         	movff	??_playDiatonicSeventhMinor+1,tblptrh
 28308  004B14                     	if	0	;tblptru may be non-zero
 28309  004B14                     	endif
 28310  004B14                     	if	0	;tblptru may be non-zero
 28311  004B14                     	endif
 28312  004B14  0008               	tblrd		*
 28313  004B16  CFF5 F064          	movff	tablat,??_playDiatonicSeventhMinor+2
 28314  004B1A  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28315  004B1C  0D04               	mullw	4
 28316  004B1E  0E6B               	movlw	low _diatonic_seventh_minor
 28317  004B20  24F3               	addwf	prodl,w,c
 28318  004B22  6EF6               	movwf	tblptrl,c
 28319  004B24  0EF2               	movlw	high _diatonic_seventh_minor
 28320  004B26  20F4               	addwfc	prodh,w,c
 28321  004B28  6EF7               	movwf	tblptrh,c
 28322  004B2A                     	if	0	;There are less than 3 active tblptr bytes
 28323  004B2A                     	endif
 28324  004B2A  0008               	tblrd		*
 28325  004B2C  50F5               	movf	tablat,w,c
 28326  004B2E  2564               	addwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 28327  004B30  6EDF               	movwf	indf2,c
 28328  004B32                     l1733:
 28329                           
 28330                           ; BSR set to: 0
 28331                           
 28332                           ; BSR set to: 0
 28333  004B32  2B68               	incf	playDiatonicSeventhMinor@i_1728& (0+255),f,b
 28334  004B34  D7B6               	goto	l26872
 28335  004B36                     u46760:
 28336                           
 28337                           ; BSR set to: 0
 28338                           ;keyboard.c: 1325: }
 28339                           ;keyboard.c: 1327: NUM_NOTES_PRESSED = 4;
 28340                           
 28341                           ; BSR set to: 0
 28342  004B36  0E04               	movlw	4
 28343  004B38  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 28344                           
 28345                           ; BSR set to: 0
 28346                           ;keyboard.c: 1330: if(LATCH == 0) {latch_was_pressed = 0;}
 28347  004B3A  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 28348                           
 28349                           ; BSR set to: 0
 28350  004B3C  9A03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28351                           
 28352                           ; BSR set to: 0
 28353                           ;keyboard.c: 1333: finish_arpeggio_setup();
 28354                           
 28355                           ; BSR set to: 0
 28356  004B3E  EC84  F04C         	call	_finish_arpeggio_setup	;wreg free
 28357                           
 28358                           ;keyboard.c: 1335: TMR0ON = 1;
 28359  004B42  8ED5               	bsf	4053,7,c	;volatile
 28360  004B44                     l1727:
 28361                           
 28362                           ;keyboard.c: 1336: }
 28363                           ;keyboard.c: 1338: if((ON_OFF == 0) && (LATCH == 0)) {
 28364  004B44  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28365  004B46  0012               	return	
 28366  004B48  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 28367  004B4A  0012               	return	
 28368                           
 28369                           ;keyboard.c: 1340: if(NUM_NOTES_PRESSED > 0){
 28370  004B4C  502F               	movf	_NUM_NOTES_PRESSED,w,c
 28371  004B4E  B4D8               	btfsc	status,2,c
 28372  004B50  D00A               	goto	l1736
 28373                           
 28374                           ;keyboard.c: 1341: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 28375  004B52  0E00               	movlw	0
 28376  004B54  B003               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 28377  004B56  0E01               	movlw	1
 28378  004B58  ECEF  F04B         	call	_wait_one_pulse
 28379                           
 28380                           ;keyboard.c: 1342: if(note_off_was_sent == 0) {key_press_release_note_off();}
 28381  004B5C  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 28382  004B5E  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 28383                           
 28384                           ;keyboard.c: 1343: TIMER_OVERFLOWS = 0;
 28385  004B62  0E00               	movlw	0
 28386  004B64  6E2E               	movwf	_TIMER_OVERFLOWS,c
 28387  004B66                     l1736:
 28388                           
 28389                           ;keyboard.c: 1344: }
 28390                           ;keyboard.c: 1346: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 28391  004B66  C030  F062         	movff	_parallel,??_playDiatonicSeventhMinor
 28392  004B6A  0100               	movlb	0	; () banked
 28393  004B6C  6B63               	clrf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 28394  004B6E  BF62               	btfsc	??_playDiatonicSeventhMinor& (0+255),7,b
 28395  004B70  0763               	decf	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28396  004B72  5166               	movf	playDiatonicSeventhMinor@pitch& (0+255),w,b
 28397  004B74  6F64               	movwf	(??_playDiatonicSeventhMinor+2)& (0+255),b
 28398  004B76  6B65               	clrf	(??_playDiatonicSeventhMinor+3)& (0+255),b
 28399  004B78  5162               	movf	??_playDiatonicSeventhMinor& (0+255),w,b
 28400  004B7A  1964               	xorwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 28401  004B7C  E106               	bnz	l26916
 28402  004B7E  5163               	movf	(??_playDiatonicSeventhMinor+1)& (0+255),w,b
 28403  004B80  1965               	xorwf	(??_playDiatonicSeventhMinor+3)& (0+255),w,b
 28404  004B82  A4D8               	btfss	status,2,c
 28405  004B84  D002               	goto	l1738
 28406                           
 28407                           ; BSR set to: 0
 28408  004B86  0E00               	movlw	0
 28409  004B88  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 28410  004B8A                     l1738:
 28411  004B8A                     l26916:
 28412                           
 28413                           ; BSR set to: 0
 28414                           ;keyboard.c: 1348: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 28415  004B8A  BC03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 28416                           
 28417                           ; BSR set to: 0
 28418  004B8C  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28419  004B8E  D001               	goto	l1739
 28420                           
 28421                           ; BSR set to: 0
 28422                           ;keyboard.c: 1349: LATCH = 1;
 28423  004B90  8004               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 28424  004B92                     l1739:
 28425                           
 28426                           ; BSR set to: 0
 28427                           ;keyboard.c: 1350: }
 28428                           ;keyboard.c: 1354: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_presse
      +                          d == 1)){
 28429  004B92  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 28430  004B94  D002               	goto	u46860
 28431                           
 28432                           ; BSR set to: 0
 28433  004B96  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 28434  004B98  D006               	goto	l1740
 28435  004B9A                     u46860:
 28436                           
 28437                           ; BSR set to: 0
 28438  004B9A  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28439  004B9C  D004               	goto	l1740
 28440                           
 28441                           ; BSR set to: 0
 28442                           ;keyboard.c: 1355: NUM_NOTES_PRESSED = 0;
 28443  004B9E  0E00               	movlw	0
 28444  004BA0  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 28445                           
 28446                           ;keyboard.c: 1356: ARRAY_INDEX = 0;
 28447  004BA2  0E00               	movlw	0
 28448  004BA4  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 28449  004BA6                     l1740:
 28450                           
 28451                           ; BSR set to: 0
 28452                           ;keyboard.c: 1357: }
 28453                           ;keyboard.c: 1360: finish_arpeggio_setup();
 28454                           
 28455                           ; BSR set to: 0
 28456  004BA6  EC84  F04C         	call	_finish_arpeggio_setup	;wreg free
 28457                           
 28458                           ;keyboard.c: 1361: TMR0ON = 1;
 28459  004BAA  8ED5               	bsf	4053,7,c	;volatile
 28460                           
 28461                           ;keyboard.c: 1363: return;
 28462  004BAC  0012               	return	
 28463  004BAE                     __end_of_playDiatonicSeventhMinor:
 28464                           	opt stack 0
 28465                           tblptru	equ	0xFF8
 28466                           tblptrh	equ	0xFF7
 28467                           tblptrl	equ	0xFF6
 28468                           tablat	equ	0xFF5
 28469                           prodh	equ	0xFF4
 28470                           prodl	equ	0xFF3
 28471                           intcon	equ	0xFF2
 28472                           intcon2	equ	0xFF1
 28473                           postinc0	equ	0xFEE
 28474                           wreg	equ	0xFE8
 28475                           postinc1	equ	0xFE6
 28476                           plusw1	equ	0xFE3
 28477                           fsr1h	equ	0xFE2
 28478                           fsr1l	equ	0xFE1
 28479                           indf2	equ	0xFDF
 28480                           postinc2	equ	0xFDE
 28481                           postdec2	equ	0xFDD
 28482                           plusw2	equ	0xFDB
 28483                           fsr2h	equ	0xFDA
 28484                           fsr2l	equ	0xFD9
 28485                           status	equ	0xFD8
 28486                           
 28487 ;; *************** function _playDiatonicSeventhMajor *****************
 28488 ;; Defined at:
 28489 ;;		line 1138 in file "keyboard.c"
 28490 ;; Parameters:    Size  Location     Type
 28491 ;;  pitch           1    wreg     unsigned char 
 28492 ;;  index           1    1[BANK0 ] unsigned char 
 28493 ;; Auto vars:     Size  Location     Type
 28494 ;;  pitch           1    8[BANK0 ] unsigned char 
 28495 ;;  i               1    7[BANK0 ] unsigned char 
 28496 ;;  i               1    6[BANK0 ] unsigned char 
 28497 ;; Return value:  Size  Location     Type
 28498 ;;                  1    wreg      void 
 28499 ;; Registers used:
 28500 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28501 ;; Tracked objects:
 28502 ;;		On entry : 0/0
 28503 ;;		On exit  : 0/0
 28504 ;;		Unchanged: 0/0
 28505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 28506 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28507 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28508 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28509 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28510 ;;Total ram usage:        8 bytes
 28511 ;; Hardware stack levels used:    1
 28512 ;; Hardware stack levels required when called:   10
 28513 ;; This function calls:
 28514 ;;		_finish_arpeggio_setup
 28515 ;;		_key_press_release_note_off
 28516 ;;		_noteOff
 28517 ;;		_noteOn
 28518 ;;		_wait_one_pulse
 28519 ;; This function is called by:
 28520 ;;		_playThisNote8
 28521 ;; This function uses a non-reentrant model
 28522 ;;
 28523                           
 28524                           	psect	text76
 28525  0056E2                     __ptext76:
 28526                           	opt stack 0
 28527  0056E2                     _playDiatonicSeventhMajor:
 28528                           	opt stack 13
 28529                           
 28530                           ;incstack = 0
 28531                           ;playDiatonicSeventhMajor@pitch stored from wreg
 28532  0056E2  0100               	movlb	0	; () banked
 28533  0056E4  6F68               	movwf	playDiatonicSeventhMajor@pitch& (0+255),b
 28534                           
 28535                           ;keyboard.c: 1141: if(ARPEGGIO_ON == 0){
 28536  0056E6  B604               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 28537  0056E8  D04B               	goto	u46420
 28538                           
 28539                           ;keyboard.c: 1142: for(unsigned char i = 0; i<4; i++){
 28540  0056EA  0E00               	movlw	0
 28541  0056EC  0100               	movlb	0	; () banked
 28542  0056EE  6F66               	movwf	playDiatonicSeventhMajor@i& (0+255),b
 28543  0056F0                     l26740:
 28544                           
 28545                           ; BSR set to: 0
 28546  0056F0  0E03               	movlw	3
 28547  0056F2  6566               	cpfsgt	playDiatonicSeventhMajor@i& (0+255),b
 28548  0056F4  D001               	goto	l1666
 28549  0056F6  D044               	goto	u46420
 28550  0056F8                     l1666:
 28551                           
 28552                           ; BSR set to: 0
 28553                           ;keyboard.c: 1144: if(ON_OFF == 1) {noteOn(channel,pitch + diatonic_seventh_major[index]
      +                          [i],velocity);}
 28554  0056F8  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28555  0056FA  D01E               	goto	l1668
 28556                           
 28557                           ; BSR set to: 0
 28558  0056FC  5051               	movf	_velocity,w,c
 28559  0056FE  6EE6               	movwf	postinc1,c
 28560  005700  5161               	movf	playDiatonicSeventhMajor@index& (0+255),w,b
 28561  005702  0D04               	mullw	4
 28562  005704  0EA7               	movlw	low _diatonic_seventh_major
 28563  005706  6F62               	movwf	??_playDiatonicSeventhMajor& (0+255),b
 28564  005708  0EF2               	movlw	high _diatonic_seventh_major
 28565  00570A  6F63               	movwf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 28566  00570C  50F3               	movf	prodl,w,c
 28567  00570E  2762               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 28568  005710  50F4               	movf	prodh,w,c
 28569  005712  2363               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28570  005714  5166               	movf	playDiatonicSeventhMajor@i& (0+255),w,b
 28571  005716  0D01               	mullw	1
 28572  005718  50F3               	movf	prodl,w,c
 28573  00571A  2762               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 28574  00571C  50F4               	movf	prodh,w,c
 28575  00571E  2363               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28576  005720  C062  FFF6         	movff	??_playDiatonicSeventhMajor,tblptrl
 28577  005724  C063  FFF7         	movff	??_playDiatonicSeventhMajor+1,tblptrh
 28578  005728                     	if	0	;tblptru may be non-zero
 28579  005728                     	endif
 28580  005728                     	if	0	;tblptru may be non-zero
 28581  005728                     	endif
 28582  005728  0008               	tblrd		*
 28583  00572A  50F5               	movf	tablat,w,c
 28584  00572C  2568               	addwf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 28585  00572E  6EE6               	movwf	postinc1,c
 28586  005730  503E               	movf	_channel,w,c
 28587  005732  6EE6               	movwf	postinc1,c
 28588  005734  EC95  F045         	call	_noteOn	;wreg free
 28589  005738                     l1668:
 28590                           
 28591                           ;keyboard.c: 1145: if(ON_OFF == 0) {noteOff(channel,pitch + diatonic_seventh_major[index
      +                          ][i],velocity);}
 28592  005738  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28593  00573A  D01F               	goto	l1669
 28594  00573C  5051               	movf	_velocity,w,c
 28595  00573E  6EE6               	movwf	postinc1,c
 28596  005740  0100               	movlb	0	; () banked
 28597  005742  5161               	movf	playDiatonicSeventhMajor@index& (0+255),w,b
 28598  005744  0D04               	mullw	4
 28599  005746  0EA7               	movlw	low _diatonic_seventh_major
 28600  005748  6F62               	movwf	??_playDiatonicSeventhMajor& (0+255),b
 28601  00574A  0EF2               	movlw	high _diatonic_seventh_major
 28602  00574C  6F63               	movwf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 28603  00574E  50F3               	movf	prodl,w,c
 28604  005750  2762               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 28605  005752  50F4               	movf	prodh,w,c
 28606  005754  2363               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28607  005756  5166               	movf	playDiatonicSeventhMajor@i& (0+255),w,b
 28608  005758  0D01               	mullw	1
 28609  00575A  50F3               	movf	prodl,w,c
 28610  00575C  2762               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 28611  00575E  50F4               	movf	prodh,w,c
 28612  005760  2363               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28613  005762  C062  FFF6         	movff	??_playDiatonicSeventhMajor,tblptrl
 28614  005766  C063  FFF7         	movff	??_playDiatonicSeventhMajor+1,tblptrh
 28615  00576A                     	if	0	;tblptru may be non-zero
 28616  00576A                     	endif
 28617  00576A                     	if	0	;tblptru may be non-zero
 28618  00576A                     	endif
 28619  00576A  0008               	tblrd		*
 28620  00576C  50F5               	movf	tablat,w,c
 28621  00576E  2568               	addwf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 28622  005770  6EE6               	movwf	postinc1,c
 28623  005772  503E               	movf	_channel,w,c
 28624  005774  6EE6               	movwf	postinc1,c
 28625  005776  EC4A  F04A         	call	_noteOff	;wreg free
 28626  00577A                     l1669:
 28627  00577A  0100               	movlb	0	; () banked
 28628  00577C  2B66               	incf	playDiatonicSeventhMajor@i& (0+255),f,b
 28629  00577E  D7B8               	goto	l26740
 28630  005780                     u46420:
 28631                           
 28632                           ;keyboard.c: 1146: }
 28633                           ;keyboard.c: 1147: }
 28634                           ;keyboard.c: 1150: if(ARPEGGIO_ON == 1){
 28635                           
 28636                           ; BSR set to: 0
 28637  005780  A604               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 28638  005782  0012               	return	
 28639                           
 28640                           ;keyboard.c: 1151: if(ON_OFF == 1) {
 28641  005784  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28642  005786  D041               	goto	l1671
 28643                           
 28644                           ;keyboard.c: 1153: TMR0ON = 0;
 28645  005788  9ED5               	bcf	4053,7,c	;volatile
 28646                           
 28647                           ;keyboard.c: 1155: parallel = pitch;
 28648  00578A  C068  F030         	movff	playDiatonicSeventhMajor@pitch,_parallel
 28649                           
 28650                           ;keyboard.c: 1158: if(NUM_NOTES_PRESSED > 0){
 28651  00578E  502F               	movf	_NUM_NOTES_PRESSED,w,c
 28652  005790  B4D8               	btfsc	status,2,c
 28653  005792  D00A               	goto	l1672
 28654                           
 28655                           ;keyboard.c: 1159: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 28656  005794  0E00               	movlw	0
 28657  005796  B203               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 28658  005798  0E01               	movlw	1
 28659  00579A  ECEF  F04B         	call	_wait_one_pulse
 28660                           
 28661                           ;keyboard.c: 1160: if(note_off_was_sent == 0) {key_press_release_note_off();}
 28662  00579E  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 28663  0057A0  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 28664                           
 28665                           ;keyboard.c: 1161: TIMER_OVERFLOWS = 0;
 28666  0057A4  0E00               	movlw	0
 28667  0057A6  6E2E               	movwf	_TIMER_OVERFLOWS,c
 28668  0057A8                     l1672:
 28669                           
 28670                           ;keyboard.c: 1162: }
 28671                           ;keyboard.c: 1164: for(unsigned char i = 0; i<4; i++){
 28672  0057A8  0E00               	movlw	0
 28673  0057AA  0100               	movlb	0	; () banked
 28674  0057AC  6F67               	movwf	playDiatonicSeventhMajor@i_1718& (0+255),b
 28675  0057AE                     l26770:
 28676                           
 28677                           ; BSR set to: 0
 28678  0057AE  0E03               	movlw	3
 28679  0057B0  6567               	cpfsgt	playDiatonicSeventhMajor@i_1718& (0+255),b
 28680  0057B2  D001               	goto	l1674
 28681  0057B4  D022               	goto	u46480
 28682  0057B6                     l1674:
 28683                           
 28684                           ; BSR set to: 0
 28685                           ;keyboard.c: 1165: ARPEGGIO[i] = pitch + diatonic_seventh_major[index][i];
 28686                           
 28687                           ; BSR set to: 0
 28688  0057B6  5167               	movf	playDiatonicSeventhMajor@i_1718& (0+255),w,b
 28689  0057B8  0D01               	mullw	1
 28690  0057BA  0E82               	movlw	low _ARPEGGIO
 28691  0057BC  24F3               	addwf	prodl,w,c
 28692  0057BE  6ED9               	movwf	fsr2l,c
 28693  0057C0  0E01               	movlw	high _ARPEGGIO
 28694  0057C2  20F4               	addwfc	prodh,w,c
 28695  0057C4  6EDA               	movwf	fsr2h,c
 28696  0057C6  5161               	movf	playDiatonicSeventhMajor@index& (0+255),w,b
 28697  0057C8  0D04               	mullw	4
 28698  0057CA  0EA7               	movlw	low _diatonic_seventh_major
 28699  0057CC  6F62               	movwf	??_playDiatonicSeventhMajor& (0+255),b
 28700  0057CE  0EF2               	movlw	high _diatonic_seventh_major
 28701  0057D0  6F63               	movwf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 28702  0057D2  50F3               	movf	prodl,w,c
 28703  0057D4  2762               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 28704  0057D6  50F4               	movf	prodh,w,c
 28705  0057D8  2363               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28706  0057DA  5167               	movf	playDiatonicSeventhMajor@i_1718& (0+255),w,b
 28707  0057DC  0D01               	mullw	1
 28708  0057DE  50F3               	movf	prodl,w,c
 28709  0057E0  2762               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 28710  0057E2  50F4               	movf	prodh,w,c
 28711  0057E4  2363               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28712  0057E6  C062  FFF6         	movff	??_playDiatonicSeventhMajor,tblptrl
 28713  0057EA  C063  FFF7         	movff	??_playDiatonicSeventhMajor+1,tblptrh
 28714  0057EE                     	if	0	;tblptru may be non-zero
 28715  0057EE                     	endif
 28716  0057EE                     	if	0	;tblptru may be non-zero
 28717  0057EE                     	endif
 28718  0057EE  0008               	tblrd		*
 28719  0057F0  50F5               	movf	tablat,w,c
 28720  0057F2  2568               	addwf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 28721  0057F4  6EDF               	movwf	indf2,c
 28722                           
 28723                           ; BSR set to: 0
 28724  0057F6  2B67               	incf	playDiatonicSeventhMajor@i_1718& (0+255),f,b
 28725  0057F8  D7DA               	goto	l26770
 28726  0057FA                     u46480:
 28727                           
 28728                           ; BSR set to: 0
 28729                           ;keyboard.c: 1166: }
 28730                           ;keyboard.c: 1168: NUM_NOTES_PRESSED = 4;
 28731                           
 28732                           ; BSR set to: 0
 28733  0057FA  0E04               	movlw	4
 28734  0057FC  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 28735                           
 28736                           ; BSR set to: 0
 28737                           ;keyboard.c: 1171: if(LATCH == 0) {latch_was_pressed = 0;}
 28738  0057FE  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 28739                           
 28740                           ; BSR set to: 0
 28741  005800  9A03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28742                           
 28743                           ; BSR set to: 0
 28744                           ;keyboard.c: 1174: finish_arpeggio_setup();
 28745                           
 28746                           ; BSR set to: 0
 28747  005802  EC84  F04C         	call	_finish_arpeggio_setup	;wreg free
 28748                           
 28749                           ;keyboard.c: 1176: TMR0ON = 1;
 28750  005806  8ED5               	bsf	4053,7,c	;volatile
 28751                           
 28752                           ;keyboard.c: 1178: return;
 28753  005808  0012               	return	
 28754  00580A                     l1671:
 28755                           
 28756                           ;keyboard.c: 1179: }
 28757                           ;keyboard.c: 1181: if((ON_OFF == 0) && (LATCH == 0)) {
 28758  00580A  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28759  00580C  0012               	return	
 28760  00580E  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 28761  005810  0012               	return	
 28762                           
 28763                           ;keyboard.c: 1183: if(NUM_NOTES_PRESSED > 0){
 28764  005812  502F               	movf	_NUM_NOTES_PRESSED,w,c
 28765  005814  B4D8               	btfsc	status,2,c
 28766  005816  D00A               	goto	l1679
 28767                           
 28768                           ;keyboard.c: 1184: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 28769  005818  0E00               	movlw	0
 28770  00581A  B003               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 28771  00581C  0E01               	movlw	1
 28772  00581E  ECEF  F04B         	call	_wait_one_pulse
 28773                           
 28774                           ;keyboard.c: 1185: if(note_off_was_sent == 0) {key_press_release_note_off();}
 28775  005822  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 28776  005824  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 28777                           
 28778                           ;keyboard.c: 1186: TIMER_OVERFLOWS = 0;
 28779  005828  0E00               	movlw	0
 28780  00582A  6E2E               	movwf	_TIMER_OVERFLOWS,c
 28781  00582C                     l1679:
 28782                           
 28783                           ;keyboard.c: 1187: }
 28784                           ;keyboard.c: 1189: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 28785  00582C  C030  F062         	movff	_parallel,??_playDiatonicSeventhMajor
 28786  005830  0100               	movlb	0	; () banked
 28787  005832  6B63               	clrf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 28788  005834  BF62               	btfsc	??_playDiatonicSeventhMajor& (0+255),7,b
 28789  005836  0763               	decf	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28790  005838  5168               	movf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 28791  00583A  6F64               	movwf	(??_playDiatonicSeventhMajor+2)& (0+255),b
 28792  00583C  6B65               	clrf	(??_playDiatonicSeventhMajor+3)& (0+255),b
 28793  00583E  5162               	movf	??_playDiatonicSeventhMajor& (0+255),w,b
 28794  005840  1964               	xorwf	(??_playDiatonicSeventhMajor+2)& (0+255),w,b
 28795  005842  E106               	bnz	l26808
 28796  005844  5163               	movf	(??_playDiatonicSeventhMajor+1)& (0+255),w,b
 28797  005846  1965               	xorwf	(??_playDiatonicSeventhMajor+3)& (0+255),w,b
 28798  005848  A4D8               	btfss	status,2,c
 28799  00584A  D002               	goto	l1681
 28800                           
 28801                           ; BSR set to: 0
 28802  00584C  0E00               	movlw	0
 28803  00584E  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 28804  005850                     l1681:
 28805  005850                     l26808:
 28806                           
 28807                           ; BSR set to: 0
 28808                           ;keyboard.c: 1191: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 28809  005850  BC03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 28810                           
 28811                           ; BSR set to: 0
 28812  005852  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28813  005854  D001               	goto	l1682
 28814                           
 28815                           ; BSR set to: 0
 28816                           ;keyboard.c: 1192: LATCH = 1;
 28817  005856  8004               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 28818  005858                     l1682:
 28819                           
 28820                           ; BSR set to: 0
 28821                           ;keyboard.c: 1193: }
 28822                           ;keyboard.c: 1197: if(((UN_LATCH_MODE == 0 || (UN_LATCH_MODE == 1)) && (latch_was_presse
      +                          d == 1))){
 28823  005858  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 28824  00585A  D002               	goto	u46580
 28825                           
 28826                           ; BSR set to: 0
 28827  00585C  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 28828  00585E  D006               	goto	l1683
 28829  005860                     u46580:
 28830                           
 28831                           ; BSR set to: 0
 28832  005860  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28833  005862  D004               	goto	l1683
 28834                           
 28835                           ; BSR set to: 0
 28836                           ;keyboard.c: 1198: NUM_NOTES_PRESSED = 0;
 28837  005864  0E00               	movlw	0
 28838  005866  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 28839                           
 28840                           ;keyboard.c: 1199: ARRAY_INDEX = 0;
 28841  005868  0E00               	movlw	0
 28842  00586A  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 28843  00586C                     l1683:
 28844                           
 28845                           ; BSR set to: 0
 28846                           ;keyboard.c: 1200: }
 28847                           ;keyboard.c: 1203: finish_arpeggio_setup();
 28848                           
 28849                           ; BSR set to: 0
 28850  00586C  EC84  F04C         	call	_finish_arpeggio_setup	;wreg free
 28851                           
 28852                           ;keyboard.c: 1204: TMR0ON = 1;
 28853  005870  8ED5               	bsf	4053,7,c	;volatile
 28854                           
 28855                           ;keyboard.c: 1206: return;
 28856  005872  0012               	return	
 28857  005874                     __end_of_playDiatonicSeventhMajor:
 28858                           	opt stack 0
 28859                           tblptru	equ	0xFF8
 28860                           tblptrh	equ	0xFF7
 28861                           tblptrl	equ	0xFF6
 28862                           tablat	equ	0xFF5
 28863                           prodh	equ	0xFF4
 28864                           prodl	equ	0xFF3
 28865                           intcon	equ	0xFF2
 28866                           intcon2	equ	0xFF1
 28867                           postinc0	equ	0xFEE
 28868                           wreg	equ	0xFE8
 28869                           postinc1	equ	0xFE6
 28870                           plusw1	equ	0xFE3
 28871                           fsr1h	equ	0xFE2
 28872                           fsr1l	equ	0xFE1
 28873                           indf2	equ	0xFDF
 28874                           postinc2	equ	0xFDE
 28875                           postdec2	equ	0xFDD
 28876                           plusw2	equ	0xFDB
 28877                           fsr2h	equ	0xFDA
 28878                           fsr2l	equ	0xFD9
 28879                           status	equ	0xFD8
 28880                           
 28881 ;; *************** function _keyboard_all_note_efficient *****************
 28882 ;; Defined at:
 28883 ;;		line 592 in file "keyboard.c"
 28884 ;; Parameters:    Size  Location     Type
 28885 ;;		None
 28886 ;; Auto vars:     Size  Location     Type
 28887 ;;  pitch           1   22[BANK0 ] unsigned char 
 28888 ;; Return value:  Size  Location     Type
 28889 ;;                  1    wreg      void 
 28890 ;; Registers used:
 28891 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28892 ;; Tracked objects:
 28893 ;;		On entry : 0/0
 28894 ;;		On exit  : 0/0
 28895 ;;		Unchanged: 0/0
 28896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 28897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28898 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28900 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28901 ;;Total ram usage:        1 bytes
 28902 ;; Hardware stack levels used:    1
 28903 ;; Hardware stack levels required when called:   12
 28904 ;; This function calls:
 28905 ;;		_playThisNote
 28906 ;; This function is called by:
 28907 ;;		_processKeyboard
 28908 ;; This function uses a non-reentrant model
 28909 ;;
 28910                           
 28911                           	psect	text77
 28912  001898                     __ptext77:
 28913                           	opt stack 0
 28914  001898                     _keyboard_all_note_efficient:
 28915                           	opt stack 13
 28916                           
 28917                           ;keyboard.c: 594: unsigned char pitch;
 28918                           ;keyboard.c: 597: if((button_state_now & 0x00000001) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW1) {
 28919                           
 28920                           ;incstack = 0
 28921  001898  0100               	movlb	0	; () banked
 28922  00189A  B1D8               	btfsc	_button_state_now& (0+255),0,b
 28923                           
 28924                           ; BSR set to: 0
 28925  00189C  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 28926  00189E  D00A               	goto	l1529
 28927                           
 28928                           ; BSR set to: 0
 28929  0018A0  B1D0               	btfsc	_keyboard& (0+255),0,b
 28930  0018A2  D008               	goto	l1529
 28931                           
 28932                           ; BSR set to: 0
 28933                           ;keyboard.c: 598: pitch = C;
 28934  0018A4  0E00               	movlw	0
 28935  0018A6  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 28936                           
 28937                           ; BSR set to: 0
 28938                           ;keyboard.c: 599: ON_OFF = 1;
 28939  0018A8  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28940                           
 28941                           ; BSR set to: 0
 28942                           ;keyboard.c: 600: playThisNote(pitch);
 28943  0018AA  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 28944  0018AC  ECF2  F033         	call	_playThisNote
 28945                           
 28946                           ;keyboard.c: 601: keyboard.SW1 = 1;
 28947  0018B0  0100               	movlb	0	; () banked
 28948  0018B2  81D0               	bsf	_keyboard& (0+255),0,b
 28949  0018B4                     l1529:
 28950                           
 28951                           ; BSR set to: 0
 28952                           ;keyboard.c: 602: }
 28953                           ;keyboard.c: 604: if((button_state_now & 0x00000002) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW2) {
 28954                           
 28955                           ; BSR set to: 0
 28956  0018B4  B3D8               	btfsc	_button_state_now& (0+255),1,b
 28957                           
 28958                           ; BSR set to: 0
 28959  0018B6  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 28960  0018B8  D00A               	goto	l1530
 28961                           
 28962                           ; BSR set to: 0
 28963  0018BA  B3D0               	btfsc	_keyboard& (0+255),1,b
 28964  0018BC  D008               	goto	l1530
 28965                           
 28966                           ; BSR set to: 0
 28967                           ;keyboard.c: 605: pitch = Cs;
 28968  0018BE  0E01               	movlw	1
 28969  0018C0  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 28970                           
 28971                           ; BSR set to: 0
 28972                           ;keyboard.c: 606: ON_OFF = 1;
 28973  0018C2  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28974                           
 28975                           ; BSR set to: 0
 28976                           ;keyboard.c: 607: playThisNote(pitch);
 28977  0018C4  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 28978  0018C6  ECF2  F033         	call	_playThisNote
 28979                           
 28980                           ;keyboard.c: 608: keyboard.SW2 = 1;
 28981  0018CA  0100               	movlb	0	; () banked
 28982  0018CC  83D0               	bsf	_keyboard& (0+255),1,b
 28983  0018CE                     l1530:
 28984                           
 28985                           ; BSR set to: 0
 28986                           ;keyboard.c: 609: }
 28987                           ;keyboard.c: 611: if((button_state_now & 0x00000004) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW3) {
 28988                           
 28989                           ; BSR set to: 0
 28990  0018CE  B5D8               	btfsc	_button_state_now& (0+255),2,b
 28991                           
 28992                           ; BSR set to: 0
 28993  0018D0  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 28994  0018D2  D00A               	goto	l1531
 28995                           
 28996                           ; BSR set to: 0
 28997  0018D4  B5D0               	btfsc	_keyboard& (0+255),2,b
 28998  0018D6  D008               	goto	l1531
 28999                           
 29000                           ; BSR set to: 0
 29001                           ;keyboard.c: 612: pitch = D;
 29002  0018D8  0E02               	movlw	2
 29003  0018DA  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29004                           
 29005                           ; BSR set to: 0
 29006                           ;keyboard.c: 613: ON_OFF = 1;
 29007  0018DC  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29008                           
 29009                           ; BSR set to: 0
 29010                           ;keyboard.c: 614: playThisNote(pitch);
 29011  0018DE  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29012  0018E0  ECF2  F033         	call	_playThisNote
 29013                           
 29014                           ;keyboard.c: 615: keyboard.SW3 = 1;
 29015  0018E4  0100               	movlb	0	; () banked
 29016  0018E6  85D0               	bsf	_keyboard& (0+255),2,b
 29017  0018E8                     l1531:
 29018                           
 29019                           ; BSR set to: 0
 29020                           ;keyboard.c: 616: }
 29021                           ;keyboard.c: 617: if((button_state_now & 0x00000008) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW4) {
 29022                           
 29023                           ; BSR set to: 0
 29024  0018E8  B7D8               	btfsc	_button_state_now& (0+255),3,b
 29025                           
 29026                           ; BSR set to: 0
 29027  0018EA  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29028  0018EC  D00A               	goto	l1532
 29029                           
 29030                           ; BSR set to: 0
 29031  0018EE  B7D0               	btfsc	_keyboard& (0+255),3,b
 29032  0018F0  D008               	goto	l1532
 29033                           
 29034                           ; BSR set to: 0
 29035                           ;keyboard.c: 618: pitch = Ds;
 29036  0018F2  0E03               	movlw	3
 29037  0018F4  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29038                           
 29039                           ; BSR set to: 0
 29040                           ;keyboard.c: 619: ON_OFF = 1;
 29041  0018F6  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29042                           
 29043                           ; BSR set to: 0
 29044                           ;keyboard.c: 620: playThisNote(pitch);
 29045  0018F8  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29046  0018FA  ECF2  F033         	call	_playThisNote
 29047                           
 29048                           ;keyboard.c: 621: keyboard.SW4 = 1;
 29049  0018FE  0100               	movlb	0	; () banked
 29050  001900  87D0               	bsf	_keyboard& (0+255),3,b
 29051  001902                     l1532:
 29052                           
 29053                           ; BSR set to: 0
 29054                           ;keyboard.c: 622: }
 29055                           ;keyboard.c: 623: if((button_state_now & 0x00000010) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW5) {
 29056                           
 29057                           ; BSR set to: 0
 29058  001902  B9D8               	btfsc	_button_state_now& (0+255),4,b
 29059                           
 29060                           ; BSR set to: 0
 29061  001904  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29062  001906  D00A               	goto	l1533
 29063                           
 29064                           ; BSR set to: 0
 29065  001908  B9D0               	btfsc	_keyboard& (0+255),4,b
 29066  00190A  D008               	goto	l1533
 29067                           
 29068                           ; BSR set to: 0
 29069                           ;keyboard.c: 624: pitch = E;
 29070  00190C  0E04               	movlw	4
 29071  00190E  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29072                           
 29073                           ; BSR set to: 0
 29074                           ;keyboard.c: 625: ON_OFF = 1;
 29075  001910  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29076                           
 29077                           ; BSR set to: 0
 29078                           ;keyboard.c: 626: playThisNote(pitch);
 29079  001912  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29080  001914  ECF2  F033         	call	_playThisNote
 29081                           
 29082                           ;keyboard.c: 627: keyboard.SW5 = 1;
 29083  001918  0100               	movlb	0	; () banked
 29084  00191A  89D0               	bsf	_keyboard& (0+255),4,b
 29085  00191C                     l1533:
 29086                           
 29087                           ; BSR set to: 0
 29088                           ;keyboard.c: 628: }
 29089                           ;keyboard.c: 629: if((button_state_now & 0x00000020) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW6) {
 29090                           
 29091                           ; BSR set to: 0
 29092  00191C  BBD8               	btfsc	_button_state_now& (0+255),5,b
 29093                           
 29094                           ; BSR set to: 0
 29095  00191E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29096  001920  D00A               	goto	l1534
 29097                           
 29098                           ; BSR set to: 0
 29099  001922  BBD0               	btfsc	_keyboard& (0+255),5,b
 29100  001924  D008               	goto	l1534
 29101                           
 29102                           ; BSR set to: 0
 29103                           ;keyboard.c: 630: pitch = F;
 29104  001926  0E05               	movlw	5
 29105  001928  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29106                           
 29107                           ; BSR set to: 0
 29108                           ;keyboard.c: 631: ON_OFF = 1;
 29109  00192A  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29110                           
 29111                           ; BSR set to: 0
 29112                           ;keyboard.c: 632: playThisNote(pitch);
 29113  00192C  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29114  00192E  ECF2  F033         	call	_playThisNote
 29115                           
 29116                           ;keyboard.c: 633: keyboard.SW6 = 1;
 29117  001932  0100               	movlb	0	; () banked
 29118  001934  8BD0               	bsf	_keyboard& (0+255),5,b
 29119  001936                     l1534:
 29120                           
 29121                           ; BSR set to: 0
 29122                           ;keyboard.c: 634: }
 29123                           ;keyboard.c: 635: if((button_state_now & 0x00000040) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW7) {
 29124                           
 29125                           ; BSR set to: 0
 29126  001936  BDD8               	btfsc	_button_state_now& (0+255),6,b
 29127                           
 29128                           ; BSR set to: 0
 29129  001938  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29130  00193A  D00A               	goto	l1535
 29131                           
 29132                           ; BSR set to: 0
 29133  00193C  BDD0               	btfsc	_keyboard& (0+255),6,b
 29134  00193E  D008               	goto	l1535
 29135                           
 29136                           ; BSR set to: 0
 29137                           ;keyboard.c: 636: pitch = Fs;
 29138  001940  0E06               	movlw	6
 29139  001942  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29140                           
 29141                           ; BSR set to: 0
 29142                           ;keyboard.c: 637: ON_OFF = 1;
 29143  001944  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29144                           
 29145                           ; BSR set to: 0
 29146                           ;keyboard.c: 638: playThisNote(pitch);
 29147  001946  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29148  001948  ECF2  F033         	call	_playThisNote
 29149                           
 29150                           ;keyboard.c: 639: keyboard.SW7 = 1;
 29151  00194C  0100               	movlb	0	; () banked
 29152  00194E  8DD0               	bsf	_keyboard& (0+255),6,b
 29153  001950                     l1535:
 29154                           
 29155                           ; BSR set to: 0
 29156                           ;keyboard.c: 640: }
 29157                           ;keyboard.c: 641: if((button_state_now & 0x00000080) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW8) {
 29158                           
 29159                           ; BSR set to: 0
 29160  001950  BFD8               	btfsc	_button_state_now& (0+255),7,b
 29161                           
 29162                           ; BSR set to: 0
 29163  001952  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29164  001954  D00A               	goto	l1536
 29165                           
 29166                           ; BSR set to: 0
 29167  001956  BFD0               	btfsc	_keyboard& (0+255),7,b
 29168  001958  D008               	goto	l1536
 29169                           
 29170                           ; BSR set to: 0
 29171                           ;keyboard.c: 642: pitch = G;
 29172  00195A  0E07               	movlw	7
 29173  00195C  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29174                           
 29175                           ; BSR set to: 0
 29176                           ;keyboard.c: 643: ON_OFF = 1;
 29177  00195E  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29178                           
 29179                           ; BSR set to: 0
 29180                           ;keyboard.c: 644: playThisNote(pitch);
 29181  001960  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29182  001962  ECF2  F033         	call	_playThisNote
 29183                           
 29184                           ;keyboard.c: 645: keyboard.SW8 = 1;
 29185  001966  0100               	movlb	0	; () banked
 29186  001968  8FD0               	bsf	_keyboard& (0+255),7,b
 29187  00196A                     l1536:
 29188                           
 29189                           ; BSR set to: 0
 29190                           ;keyboard.c: 646: }
 29191                           ;keyboard.c: 647: if((button_state_now & 0x00000100) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW9) {
 29192                           
 29193                           ; BSR set to: 0
 29194  00196A  B1D9               	btfsc	(_button_state_now+1)& (0+255),0,b
 29195                           
 29196                           ; BSR set to: 0
 29197  00196C  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29198  00196E  D00A               	goto	l1537
 29199                           
 29200                           ; BSR set to: 0
 29201  001970  B1D1               	btfsc	(_keyboard+1)& (0+255),0,b
 29202  001972  D008               	goto	l1537
 29203                           
 29204                           ; BSR set to: 0
 29205                           ;keyboard.c: 648: pitch = Gs;
 29206  001974  0E08               	movlw	8
 29207  001976  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29208                           
 29209                           ; BSR set to: 0
 29210                           ;keyboard.c: 649: ON_OFF = 1;
 29211  001978  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29212                           
 29213                           ; BSR set to: 0
 29214                           ;keyboard.c: 650: playThisNote(pitch);
 29215  00197A  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29216  00197C  ECF2  F033         	call	_playThisNote
 29217                           
 29218                           ;keyboard.c: 651: keyboard.SW9 = 1;
 29219  001980  0100               	movlb	0	; () banked
 29220  001982  81D1               	bsf	(_keyboard+1)& (0+255),0,b
 29221  001984                     l1537:
 29222                           
 29223                           ; BSR set to: 0
 29224                           ;keyboard.c: 652: }
 29225                           ;keyboard.c: 653: if((button_state_now & 0x00000200) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW10) {
 29226                           
 29227                           ; BSR set to: 0
 29228  001984  B3D9               	btfsc	(_button_state_now+1)& (0+255),1,b
 29229                           
 29230                           ; BSR set to: 0
 29231  001986  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29232  001988  D00A               	goto	l1538
 29233                           
 29234                           ; BSR set to: 0
 29235  00198A  B3D1               	btfsc	(_keyboard+1)& (0+255),1,b
 29236  00198C  D008               	goto	l1538
 29237                           
 29238                           ; BSR set to: 0
 29239                           ;keyboard.c: 654: pitch = A;
 29240  00198E  0E09               	movlw	9
 29241  001990  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29242                           
 29243                           ; BSR set to: 0
 29244                           ;keyboard.c: 655: ON_OFF = 1;
 29245  001992  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29246                           
 29247                           ; BSR set to: 0
 29248                           ;keyboard.c: 656: playThisNote(pitch);
 29249  001994  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29250  001996  ECF2  F033         	call	_playThisNote
 29251                           
 29252                           ;keyboard.c: 657: keyboard.SW10 = 1;
 29253  00199A  0100               	movlb	0	; () banked
 29254  00199C  83D1               	bsf	(_keyboard+1)& (0+255),1,b
 29255  00199E                     l1538:
 29256                           
 29257                           ; BSR set to: 0
 29258                           ;keyboard.c: 658: }
 29259                           ;keyboard.c: 659: if((button_state_now & 0x00000400) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW11) {
 29260                           
 29261                           ; BSR set to: 0
 29262  00199E  B5D9               	btfsc	(_button_state_now+1)& (0+255),2,b
 29263                           
 29264                           ; BSR set to: 0
 29265  0019A0  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29266  0019A2  D00A               	goto	l1539
 29267                           
 29268                           ; BSR set to: 0
 29269  0019A4  B5D1               	btfsc	(_keyboard+1)& (0+255),2,b
 29270  0019A6  D008               	goto	l1539
 29271                           
 29272                           ; BSR set to: 0
 29273                           ;keyboard.c: 660: pitch = As;
 29274  0019A8  0E0A               	movlw	10
 29275  0019AA  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29276                           
 29277                           ; BSR set to: 0
 29278                           ;keyboard.c: 661: ON_OFF = 1;
 29279  0019AC  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29280                           
 29281                           ; BSR set to: 0
 29282                           ;keyboard.c: 662: playThisNote(pitch);
 29283  0019AE  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29284  0019B0  ECF2  F033         	call	_playThisNote
 29285                           
 29286                           ;keyboard.c: 663: keyboard.SW11 = 1;
 29287  0019B4  0100               	movlb	0	; () banked
 29288  0019B6  85D1               	bsf	(_keyboard+1)& (0+255),2,b
 29289  0019B8                     l1539:
 29290                           
 29291                           ; BSR set to: 0
 29292                           ;keyboard.c: 664: }
 29293                           ;keyboard.c: 665: if((button_state_now & 0x00000800) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW12) {
 29294                           
 29295                           ; BSR set to: 0
 29296  0019B8  B7D9               	btfsc	(_button_state_now+1)& (0+255),3,b
 29297                           
 29298                           ; BSR set to: 0
 29299  0019BA  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29300  0019BC  D00A               	goto	l1540
 29301                           
 29302                           ; BSR set to: 0
 29303  0019BE  B7D1               	btfsc	(_keyboard+1)& (0+255),3,b
 29304  0019C0  D008               	goto	l1540
 29305                           
 29306                           ; BSR set to: 0
 29307                           ;keyboard.c: 666: pitch = B;
 29308  0019C2  0E0B               	movlw	11
 29309  0019C4  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29310                           
 29311                           ; BSR set to: 0
 29312                           ;keyboard.c: 667: ON_OFF = 1;
 29313  0019C6  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29314                           
 29315                           ; BSR set to: 0
 29316                           ;keyboard.c: 668: playThisNote(pitch);
 29317  0019C8  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29318  0019CA  ECF2  F033         	call	_playThisNote
 29319                           
 29320                           ;keyboard.c: 669: keyboard.SW12 = 1;
 29321  0019CE  0100               	movlb	0	; () banked
 29322  0019D0  87D1               	bsf	(_keyboard+1)& (0+255),3,b
 29323  0019D2                     l1540:
 29324                           
 29325                           ; BSR set to: 0
 29326                           ;keyboard.c: 670: }
 29327                           ;keyboard.c: 671: if((button_state_now & 0x00001000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW13) {
 29328                           
 29329                           ; BSR set to: 0
 29330  0019D2  B9D9               	btfsc	(_button_state_now+1)& (0+255),4,b
 29331                           
 29332                           ; BSR set to: 0
 29333  0019D4  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29334  0019D6  D00A               	goto	l1541
 29335                           
 29336                           ; BSR set to: 0
 29337  0019D8  B9D1               	btfsc	(_keyboard+1)& (0+255),4,b
 29338  0019DA  D008               	goto	l1541
 29339                           
 29340                           ; BSR set to: 0
 29341                           ;keyboard.c: 672: pitch = C2;
 29342  0019DC  0E0C               	movlw	12
 29343  0019DE  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29344                           
 29345                           ; BSR set to: 0
 29346                           ;keyboard.c: 673: ON_OFF = 1;
 29347  0019E0  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29348                           
 29349                           ; BSR set to: 0
 29350                           ;keyboard.c: 674: playThisNote(pitch);
 29351  0019E2  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29352  0019E4  ECF2  F033         	call	_playThisNote
 29353                           
 29354                           ;keyboard.c: 675: keyboard.SW13 = 1;
 29355  0019E8  0100               	movlb	0	; () banked
 29356  0019EA  89D1               	bsf	(_keyboard+1)& (0+255),4,b
 29357  0019EC                     l1541:
 29358                           
 29359                           ; BSR set to: 0
 29360                           ;keyboard.c: 676: }
 29361                           ;keyboard.c: 677: if((button_state_now & 0x00002000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW14) {
 29362                           
 29363                           ; BSR set to: 0
 29364  0019EC  BBD9               	btfsc	(_button_state_now+1)& (0+255),5,b
 29365                           
 29366                           ; BSR set to: 0
 29367  0019EE  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29368  0019F0  D00A               	goto	l1542
 29369                           
 29370                           ; BSR set to: 0
 29371  0019F2  BBD1               	btfsc	(_keyboard+1)& (0+255),5,b
 29372  0019F4  D008               	goto	l1542
 29373                           
 29374                           ; BSR set to: 0
 29375                           ;keyboard.c: 678: pitch = C2s;
 29376  0019F6  0E0D               	movlw	13
 29377  0019F8  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29378                           
 29379                           ; BSR set to: 0
 29380                           ;keyboard.c: 679: ON_OFF = 1;
 29381  0019FA  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29382                           
 29383                           ; BSR set to: 0
 29384                           ;keyboard.c: 680: playThisNote(pitch);
 29385  0019FC  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29386  0019FE  ECF2  F033         	call	_playThisNote
 29387                           
 29388                           ;keyboard.c: 681: keyboard.SW14 = 1;
 29389  001A02  0100               	movlb	0	; () banked
 29390  001A04  8BD1               	bsf	(_keyboard+1)& (0+255),5,b
 29391  001A06                     l1542:
 29392                           
 29393                           ; BSR set to: 0
 29394                           ;keyboard.c: 682: }
 29395                           ;keyboard.c: 683: if((button_state_now & 0x00004000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW15) {
 29396                           
 29397                           ; BSR set to: 0
 29398  001A06  BDD9               	btfsc	(_button_state_now+1)& (0+255),6,b
 29399                           
 29400                           ; BSR set to: 0
 29401  001A08  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29402  001A0A  D00A               	goto	l1543
 29403                           
 29404                           ; BSR set to: 0
 29405  001A0C  BDD1               	btfsc	(_keyboard+1)& (0+255),6,b
 29406  001A0E  D008               	goto	l1543
 29407                           
 29408                           ; BSR set to: 0
 29409                           ;keyboard.c: 684: pitch = D2;
 29410  001A10  0E0E               	movlw	14
 29411  001A12  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29412                           
 29413                           ; BSR set to: 0
 29414                           ;keyboard.c: 685: ON_OFF = 1;
 29415  001A14  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29416                           
 29417                           ; BSR set to: 0
 29418                           ;keyboard.c: 686: playThisNote(pitch);
 29419  001A16  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29420  001A18  ECF2  F033         	call	_playThisNote
 29421                           
 29422                           ;keyboard.c: 687: keyboard.SW15 = 1;
 29423  001A1C  0100               	movlb	0	; () banked
 29424  001A1E  8DD1               	bsf	(_keyboard+1)& (0+255),6,b
 29425  001A20                     l1543:
 29426                           
 29427                           ; BSR set to: 0
 29428                           ;keyboard.c: 688: }
 29429                           ;keyboard.c: 689: if((button_state_now & 0x00008000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW16) {
 29430                           
 29431                           ; BSR set to: 0
 29432  001A20  BFD9               	btfsc	(_button_state_now+1)& (0+255),7,b
 29433                           
 29434                           ; BSR set to: 0
 29435  001A22  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29436  001A24  D00A               	goto	l1544
 29437                           
 29438                           ; BSR set to: 0
 29439  001A26  BFD1               	btfsc	(_keyboard+1)& (0+255),7,b
 29440  001A28  D008               	goto	l1544
 29441                           
 29442                           ; BSR set to: 0
 29443                           ;keyboard.c: 690: pitch = D2s;
 29444  001A2A  0E0F               	movlw	15
 29445  001A2C  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29446                           
 29447                           ; BSR set to: 0
 29448                           ;keyboard.c: 691: ON_OFF = 1;
 29449  001A2E  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29450                           
 29451                           ; BSR set to: 0
 29452                           ;keyboard.c: 692: playThisNote(pitch);
 29453  001A30  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29454  001A32  ECF2  F033         	call	_playThisNote
 29455                           
 29456                           ;keyboard.c: 693: keyboard.SW16 = 1;
 29457  001A36  0100               	movlb	0	; () banked
 29458  001A38  8FD1               	bsf	(_keyboard+1)& (0+255),7,b
 29459  001A3A                     l1544:
 29460                           
 29461                           ; BSR set to: 0
 29462                           ;keyboard.c: 694: }
 29463                           ;keyboard.c: 695: if((button_state_now & 0x00010000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW17) {
 29464                           
 29465                           ; BSR set to: 0
 29466  001A3A  B1DA               	btfsc	(_button_state_now+2)& (0+255),0,b
 29467                           
 29468                           ; BSR set to: 0
 29469  001A3C  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29470  001A3E  D00A               	goto	l1545
 29471                           
 29472                           ; BSR set to: 0
 29473  001A40  B1D2               	btfsc	(_keyboard+2)& (0+255),0,b
 29474  001A42  D008               	goto	l1545
 29475                           
 29476                           ; BSR set to: 0
 29477                           ;keyboard.c: 696: pitch = E2;
 29478  001A44  0E10               	movlw	16
 29479  001A46  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29480                           
 29481                           ; BSR set to: 0
 29482                           ;keyboard.c: 697: ON_OFF = 1;
 29483  001A48  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29484                           
 29485                           ; BSR set to: 0
 29486                           ;keyboard.c: 698: playThisNote(pitch);
 29487  001A4A  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29488  001A4C  ECF2  F033         	call	_playThisNote
 29489                           
 29490                           ;keyboard.c: 699: keyboard.SW17 = 1;
 29491  001A50  0100               	movlb	0	; () banked
 29492  001A52  81D2               	bsf	(_keyboard+2)& (0+255),0,b
 29493  001A54                     l1545:
 29494                           
 29495                           ; BSR set to: 0
 29496                           ;keyboard.c: 700: }
 29497                           ;keyboard.c: 701: if((button_state_now & 0x00020000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW18) {
 29498                           
 29499                           ; BSR set to: 0
 29500  001A54  B3DA               	btfsc	(_button_state_now+2)& (0+255),1,b
 29501                           
 29502                           ; BSR set to: 0
 29503  001A56  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29504  001A58  D00A               	goto	l1546
 29505                           
 29506                           ; BSR set to: 0
 29507  001A5A  B3D2               	btfsc	(_keyboard+2)& (0+255),1,b
 29508  001A5C  D008               	goto	l1546
 29509                           
 29510                           ; BSR set to: 0
 29511                           ;keyboard.c: 702: pitch = F2;
 29512  001A5E  0E11               	movlw	17
 29513  001A60  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29514                           
 29515                           ; BSR set to: 0
 29516                           ;keyboard.c: 703: ON_OFF = 1;
 29517  001A62  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29518                           
 29519                           ; BSR set to: 0
 29520                           ;keyboard.c: 704: playThisNote(pitch);
 29521  001A64  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29522  001A66  ECF2  F033         	call	_playThisNote
 29523                           
 29524                           ;keyboard.c: 705: keyboard.SW18 = 1;
 29525  001A6A  0100               	movlb	0	; () banked
 29526  001A6C  83D2               	bsf	(_keyboard+2)& (0+255),1,b
 29527  001A6E                     l1546:
 29528                           
 29529                           ; BSR set to: 0
 29530                           ;keyboard.c: 706: }
 29531                           ;keyboard.c: 707: if((button_state_now & 0x00040000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW19) {
 29532                           
 29533                           ; BSR set to: 0
 29534  001A6E  B5DA               	btfsc	(_button_state_now+2)& (0+255),2,b
 29535                           
 29536                           ; BSR set to: 0
 29537  001A70  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29538  001A72  D00A               	goto	l1547
 29539                           
 29540                           ; BSR set to: 0
 29541  001A74  B5D2               	btfsc	(_keyboard+2)& (0+255),2,b
 29542  001A76  D008               	goto	l1547
 29543                           
 29544                           ; BSR set to: 0
 29545                           ;keyboard.c: 708: pitch = F2s;
 29546  001A78  0E12               	movlw	18
 29547  001A7A  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29548                           
 29549                           ; BSR set to: 0
 29550                           ;keyboard.c: 709: ON_OFF = 1;
 29551  001A7C  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29552                           
 29553                           ; BSR set to: 0
 29554                           ;keyboard.c: 710: playThisNote(pitch);
 29555  001A7E  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29556  001A80  ECF2  F033         	call	_playThisNote
 29557                           
 29558                           ;keyboard.c: 711: keyboard.SW19 = 1;
 29559  001A84  0100               	movlb	0	; () banked
 29560  001A86  85D2               	bsf	(_keyboard+2)& (0+255),2,b
 29561  001A88                     l1547:
 29562                           
 29563                           ; BSR set to: 0
 29564                           ;keyboard.c: 712: }
 29565                           ;keyboard.c: 713: if((button_state_now & 0x00080000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW20) {
 29566                           
 29567                           ; BSR set to: 0
 29568  001A88  B7DA               	btfsc	(_button_state_now+2)& (0+255),3,b
 29569                           
 29570                           ; BSR set to: 0
 29571  001A8A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29572  001A8C  D00A               	goto	l1548
 29573                           
 29574                           ; BSR set to: 0
 29575  001A8E  B7D2               	btfsc	(_keyboard+2)& (0+255),3,b
 29576  001A90  D008               	goto	l1548
 29577                           
 29578                           ; BSR set to: 0
 29579                           ;keyboard.c: 714: pitch = G2;
 29580  001A92  0E13               	movlw	19
 29581  001A94  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29582                           
 29583                           ; BSR set to: 0
 29584                           ;keyboard.c: 715: ON_OFF = 1;
 29585  001A96  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29586                           
 29587                           ; BSR set to: 0
 29588                           ;keyboard.c: 716: playThisNote(pitch);
 29589  001A98  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29590  001A9A  ECF2  F033         	call	_playThisNote
 29591                           
 29592                           ;keyboard.c: 717: keyboard.SW20 = 1;
 29593  001A9E  0100               	movlb	0	; () banked
 29594  001AA0  87D2               	bsf	(_keyboard+2)& (0+255),3,b
 29595  001AA2                     l1548:
 29596                           
 29597                           ; BSR set to: 0
 29598                           ;keyboard.c: 718: }
 29599                           ;keyboard.c: 719: if((button_state_now & 0x00100000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW21) {
 29600                           
 29601                           ; BSR set to: 0
 29602  001AA2  B9DA               	btfsc	(_button_state_now+2)& (0+255),4,b
 29603                           
 29604                           ; BSR set to: 0
 29605  001AA4  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29606  001AA6  D00A               	goto	l1549
 29607                           
 29608                           ; BSR set to: 0
 29609  001AA8  B9D2               	btfsc	(_keyboard+2)& (0+255),4,b
 29610  001AAA  D008               	goto	l1549
 29611                           
 29612                           ; BSR set to: 0
 29613                           ;keyboard.c: 720: pitch = G2s;
 29614  001AAC  0E14               	movlw	20
 29615  001AAE  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29616                           
 29617                           ; BSR set to: 0
 29618                           ;keyboard.c: 721: ON_OFF = 1;
 29619  001AB0  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29620                           
 29621                           ; BSR set to: 0
 29622                           ;keyboard.c: 722: playThisNote(pitch);
 29623  001AB2  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29624  001AB4  ECF2  F033         	call	_playThisNote
 29625                           
 29626                           ;keyboard.c: 723: keyboard.SW21 = 1;
 29627  001AB8  0100               	movlb	0	; () banked
 29628  001ABA  89D2               	bsf	(_keyboard+2)& (0+255),4,b
 29629  001ABC                     l1549:
 29630                           
 29631                           ; BSR set to: 0
 29632                           ;keyboard.c: 724: }
 29633                           ;keyboard.c: 725: if((button_state_now & 0x00200000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW22) {
 29634                           
 29635                           ; BSR set to: 0
 29636  001ABC  BBDA               	btfsc	(_button_state_now+2)& (0+255),5,b
 29637                           
 29638                           ; BSR set to: 0
 29639  001ABE  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29640  001AC0  D00A               	goto	l1550
 29641                           
 29642                           ; BSR set to: 0
 29643  001AC2  BBD2               	btfsc	(_keyboard+2)& (0+255),5,b
 29644  001AC4  D008               	goto	l1550
 29645                           
 29646                           ; BSR set to: 0
 29647                           ;keyboard.c: 726: pitch = A2;
 29648  001AC6  0E15               	movlw	21
 29649  001AC8  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29650                           
 29651                           ; BSR set to: 0
 29652                           ;keyboard.c: 727: ON_OFF = 1;
 29653  001ACA  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29654                           
 29655                           ; BSR set to: 0
 29656                           ;keyboard.c: 728: playThisNote(pitch);
 29657  001ACC  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29658  001ACE  ECF2  F033         	call	_playThisNote
 29659                           
 29660                           ;keyboard.c: 729: keyboard.SW22 = 1;
 29661  001AD2  0100               	movlb	0	; () banked
 29662  001AD4  8BD2               	bsf	(_keyboard+2)& (0+255),5,b
 29663  001AD6                     l1550:
 29664                           
 29665                           ; BSR set to: 0
 29666                           ;keyboard.c: 730: }
 29667                           ;keyboard.c: 731: if((button_state_now & 0x00400000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW23) {
 29668                           
 29669                           ; BSR set to: 0
 29670  001AD6  BDDA               	btfsc	(_button_state_now+2)& (0+255),6,b
 29671                           
 29672                           ; BSR set to: 0
 29673  001AD8  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29674  001ADA  D00A               	goto	l1551
 29675                           
 29676                           ; BSR set to: 0
 29677  001ADC  BDD2               	btfsc	(_keyboard+2)& (0+255),6,b
 29678  001ADE  D008               	goto	l1551
 29679                           
 29680                           ; BSR set to: 0
 29681                           ;keyboard.c: 732: pitch = A2s;
 29682  001AE0  0E16               	movlw	22
 29683  001AE2  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29684                           
 29685                           ; BSR set to: 0
 29686                           ;keyboard.c: 733: ON_OFF = 1;
 29687  001AE4  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29688                           
 29689                           ; BSR set to: 0
 29690                           ;keyboard.c: 734: playThisNote(pitch);
 29691  001AE6  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29692  001AE8  ECF2  F033         	call	_playThisNote
 29693                           
 29694                           ;keyboard.c: 735: keyboard.SW23 = 1;
 29695  001AEC  0100               	movlb	0	; () banked
 29696  001AEE  8DD2               	bsf	(_keyboard+2)& (0+255),6,b
 29697  001AF0                     l1551:
 29698                           
 29699                           ; BSR set to: 0
 29700                           ;keyboard.c: 736: }
 29701                           ;keyboard.c: 737: if((button_state_now & 0x00800000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW24) {
 29702                           
 29703                           ; BSR set to: 0
 29704  001AF0  BFDA               	btfsc	(_button_state_now+2)& (0+255),7,b
 29705                           
 29706                           ; BSR set to: 0
 29707  001AF2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29708  001AF4  D00A               	goto	l1552
 29709                           
 29710                           ; BSR set to: 0
 29711  001AF6  BFD2               	btfsc	(_keyboard+2)& (0+255),7,b
 29712  001AF8  D008               	goto	l1552
 29713                           
 29714                           ; BSR set to: 0
 29715                           ;keyboard.c: 738: pitch = B2;
 29716  001AFA  0E17               	movlw	23
 29717  001AFC  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29718                           
 29719                           ; BSR set to: 0
 29720                           ;keyboard.c: 739: ON_OFF = 1;
 29721  001AFE  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29722                           
 29723                           ; BSR set to: 0
 29724                           ;keyboard.c: 740: playThisNote(pitch);
 29725  001B00  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29726  001B02  ECF2  F033         	call	_playThisNote
 29727                           
 29728                           ;keyboard.c: 741: keyboard.SW24 = 1;
 29729  001B06  0100               	movlb	0	; () banked
 29730  001B08  8FD2               	bsf	(_keyboard+2)& (0+255),7,b
 29731  001B0A                     l1552:
 29732                           
 29733                           ; BSR set to: 0
 29734                           ;keyboard.c: 742: }
 29735                           ;keyboard.c: 743: if((button_state_now & 0x01000000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW25) {
 29736                           
 29737                           ; BSR set to: 0
 29738  001B0A  B1DB               	btfsc	(_button_state_now+3)& (0+255),0,b
 29739                           
 29740                           ; BSR set to: 0
 29741  001B0C  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29742  001B0E  D00A               	goto	l1553
 29743                           
 29744                           ; BSR set to: 0
 29745  001B10  B1D3               	btfsc	(_keyboard+3)& (0+255),0,b
 29746  001B12  D008               	goto	l1553
 29747                           
 29748                           ; BSR set to: 0
 29749                           ;keyboard.c: 744: pitch = C3;
 29750  001B14  0E18               	movlw	24
 29751  001B16  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29752                           
 29753                           ; BSR set to: 0
 29754                           ;keyboard.c: 745: ON_OFF = 1;
 29755  001B18  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29756                           
 29757                           ; BSR set to: 0
 29758                           ;keyboard.c: 746: playThisNote(pitch);
 29759  001B1A  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29760  001B1C  ECF2  F033         	call	_playThisNote
 29761                           
 29762                           ;keyboard.c: 747: keyboard.SW25 = 1;
 29763  001B20  0100               	movlb	0	; () banked
 29764  001B22  81D3               	bsf	(_keyboard+3)& (0+255),0,b
 29765  001B24                     l1553:
 29766                           
 29767                           ; BSR set to: 0
 29768                           ;keyboard.c: 748: }
 29769                           ;keyboard.c: 751: if(((button_state_last & 0x00000001)) && ((button_state_now & 0x000000
      +                          01) == 0) && keyboard.SW1) {
 29770                           
 29771                           ; BSR set to: 0
 29772  001B24  B1D4               	btfsc	_button_state_last& (0+255),0,b
 29773                           
 29774                           ; BSR set to: 0
 29775  001B26  B1D8               	btfsc	_button_state_now& (0+255),0,b
 29776  001B28  D00A               	goto	l1554
 29777                           
 29778                           ; BSR set to: 0
 29779  001B2A  A1D0               	btfss	_keyboard& (0+255),0,b
 29780  001B2C  D008               	goto	l1554
 29781                           
 29782                           ; BSR set to: 0
 29783                           ;keyboard.c: 752: pitch = C;
 29784  001B2E  0E00               	movlw	0
 29785  001B30  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29786                           
 29787                           ; BSR set to: 0
 29788                           ;keyboard.c: 753: ON_OFF = 0;
 29789  001B32  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29790                           
 29791                           ; BSR set to: 0
 29792                           ;keyboard.c: 754: playThisNote(pitch);
 29793  001B34  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29794  001B36  ECF2  F033         	call	_playThisNote
 29795                           
 29796                           ;keyboard.c: 755: keyboard.SW1 = 0;
 29797  001B3A  0100               	movlb	0	; () banked
 29798  001B3C  91D0               	bcf	_keyboard& (0+255),0,b
 29799  001B3E                     l1554:
 29800                           
 29801                           ; BSR set to: 0
 29802                           ;keyboard.c: 756: }
 29803                           ;keyboard.c: 757: if(((button_state_last & 0x00000002)) && ((button_state_now & 0x000000
      +                          02) == 0) && keyboard.SW2) {
 29804                           
 29805                           ; BSR set to: 0
 29806  001B3E  B3D4               	btfsc	_button_state_last& (0+255),1,b
 29807                           
 29808                           ; BSR set to: 0
 29809  001B40  B3D8               	btfsc	_button_state_now& (0+255),1,b
 29810  001B42  D00A               	goto	l1555
 29811                           
 29812                           ; BSR set to: 0
 29813  001B44  A3D0               	btfss	_keyboard& (0+255),1,b
 29814  001B46  D008               	goto	l1555
 29815                           
 29816                           ; BSR set to: 0
 29817                           ;keyboard.c: 758: pitch = Cs;
 29818  001B48  0E01               	movlw	1
 29819  001B4A  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29820                           
 29821                           ; BSR set to: 0
 29822                           ;keyboard.c: 759: ON_OFF = 0;
 29823  001B4C  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29824                           
 29825                           ; BSR set to: 0
 29826                           ;keyboard.c: 760: playThisNote(pitch);
 29827  001B4E  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29828  001B50  ECF2  F033         	call	_playThisNote
 29829                           
 29830                           ;keyboard.c: 761: keyboard.SW2 = 0;
 29831  001B54  0100               	movlb	0	; () banked
 29832  001B56  93D0               	bcf	_keyboard& (0+255),1,b
 29833  001B58                     l1555:
 29834                           
 29835                           ; BSR set to: 0
 29836                           ;keyboard.c: 762: }
 29837                           ;keyboard.c: 763: if(((button_state_last & 0x00000004)) && ((button_state_now & 0x000000
      +                          04) == 0) && keyboard.SW3) {
 29838                           
 29839                           ; BSR set to: 0
 29840  001B58  B5D4               	btfsc	_button_state_last& (0+255),2,b
 29841                           
 29842                           ; BSR set to: 0
 29843  001B5A  B5D8               	btfsc	_button_state_now& (0+255),2,b
 29844  001B5C  D00A               	goto	l1556
 29845                           
 29846                           ; BSR set to: 0
 29847  001B5E  A5D0               	btfss	_keyboard& (0+255),2,b
 29848  001B60  D008               	goto	l1556
 29849                           
 29850                           ; BSR set to: 0
 29851                           ;keyboard.c: 764: pitch = D;
 29852  001B62  0E02               	movlw	2
 29853  001B64  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29854                           
 29855                           ; BSR set to: 0
 29856                           ;keyboard.c: 765: ON_OFF = 0;
 29857  001B66  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29858                           
 29859                           ; BSR set to: 0
 29860                           ;keyboard.c: 766: playThisNote(pitch);
 29861  001B68  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29862  001B6A  ECF2  F033         	call	_playThisNote
 29863                           
 29864                           ;keyboard.c: 767: keyboard.SW3 = 0;
 29865  001B6E  0100               	movlb	0	; () banked
 29866  001B70  95D0               	bcf	_keyboard& (0+255),2,b
 29867  001B72                     l1556:
 29868                           
 29869                           ; BSR set to: 0
 29870                           ;keyboard.c: 768: }
 29871                           ;keyboard.c: 769: if(((button_state_last & 0x00000008)) && ((button_state_now & 0x000000
      +                          08) == 0) && keyboard.SW4) {
 29872                           
 29873                           ; BSR set to: 0
 29874  001B72  B7D4               	btfsc	_button_state_last& (0+255),3,b
 29875                           
 29876                           ; BSR set to: 0
 29877  001B74  B7D8               	btfsc	_button_state_now& (0+255),3,b
 29878  001B76  D00A               	goto	l1557
 29879                           
 29880                           ; BSR set to: 0
 29881  001B78  A7D0               	btfss	_keyboard& (0+255),3,b
 29882  001B7A  D008               	goto	l1557
 29883                           
 29884                           ; BSR set to: 0
 29885                           ;keyboard.c: 770: pitch = Ds;
 29886  001B7C  0E03               	movlw	3
 29887  001B7E  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29888                           
 29889                           ; BSR set to: 0
 29890                           ;keyboard.c: 771: ON_OFF = 0;
 29891  001B80  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29892                           
 29893                           ; BSR set to: 0
 29894                           ;keyboard.c: 772: playThisNote(pitch);
 29895  001B82  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29896  001B84  ECF2  F033         	call	_playThisNote
 29897                           
 29898                           ;keyboard.c: 773: keyboard.SW4 = 0;
 29899  001B88  0100               	movlb	0	; () banked
 29900  001B8A  97D0               	bcf	_keyboard& (0+255),3,b
 29901  001B8C                     l1557:
 29902                           
 29903                           ; BSR set to: 0
 29904                           ;keyboard.c: 774: }
 29905                           ;keyboard.c: 775: if(((button_state_last & 0x00000010)) && ((button_state_now & 0x000000
      +                          10) == 0) && keyboard.SW5) {
 29906                           
 29907                           ; BSR set to: 0
 29908  001B8C  B9D4               	btfsc	_button_state_last& (0+255),4,b
 29909                           
 29910                           ; BSR set to: 0
 29911  001B8E  B9D8               	btfsc	_button_state_now& (0+255),4,b
 29912  001B90  D00A               	goto	l1558
 29913                           
 29914                           ; BSR set to: 0
 29915  001B92  A9D0               	btfss	_keyboard& (0+255),4,b
 29916  001B94  D008               	goto	l1558
 29917                           
 29918                           ; BSR set to: 0
 29919                           ;keyboard.c: 776: pitch = E;
 29920  001B96  0E04               	movlw	4
 29921  001B98  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29922                           
 29923                           ; BSR set to: 0
 29924                           ;keyboard.c: 777: ON_OFF = 0;
 29925  001B9A  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29926                           
 29927                           ; BSR set to: 0
 29928                           ;keyboard.c: 778: playThisNote(pitch);
 29929  001B9C  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29930  001B9E  ECF2  F033         	call	_playThisNote
 29931                           
 29932                           ;keyboard.c: 779: keyboard.SW5 = 0;
 29933  001BA2  0100               	movlb	0	; () banked
 29934  001BA4  99D0               	bcf	_keyboard& (0+255),4,b
 29935  001BA6                     l1558:
 29936                           
 29937                           ; BSR set to: 0
 29938                           ;keyboard.c: 780: }
 29939                           ;keyboard.c: 781: if(((button_state_last & 0x00000020)) && ((button_state_now & 0x000000
      +                          20) == 0) && keyboard.SW6) {
 29940                           
 29941                           ; BSR set to: 0
 29942  001BA6  BBD4               	btfsc	_button_state_last& (0+255),5,b
 29943                           
 29944                           ; BSR set to: 0
 29945  001BA8  BBD8               	btfsc	_button_state_now& (0+255),5,b
 29946  001BAA  D00A               	goto	l1559
 29947                           
 29948                           ; BSR set to: 0
 29949  001BAC  ABD0               	btfss	_keyboard& (0+255),5,b
 29950  001BAE  D008               	goto	l1559
 29951                           
 29952                           ; BSR set to: 0
 29953                           ;keyboard.c: 782: pitch = F;
 29954  001BB0  0E05               	movlw	5
 29955  001BB2  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29956                           
 29957                           ; BSR set to: 0
 29958                           ;keyboard.c: 783: ON_OFF = 0;
 29959  001BB4  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29960                           
 29961                           ; BSR set to: 0
 29962                           ;keyboard.c: 784: playThisNote(pitch);
 29963  001BB6  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29964  001BB8  ECF2  F033         	call	_playThisNote
 29965                           
 29966                           ;keyboard.c: 785: keyboard.SW6 = 0;
 29967  001BBC  0100               	movlb	0	; () banked
 29968  001BBE  9BD0               	bcf	_keyboard& (0+255),5,b
 29969  001BC0                     l1559:
 29970                           
 29971                           ; BSR set to: 0
 29972                           ;keyboard.c: 786: }
 29973                           ;keyboard.c: 787: if(((button_state_last & 0x00000040)) && ((button_state_now & 0x000000
      +                          40) == 0) && keyboard.SW7) {
 29974                           
 29975                           ; BSR set to: 0
 29976  001BC0  BDD4               	btfsc	_button_state_last& (0+255),6,b
 29977                           
 29978                           ; BSR set to: 0
 29979  001BC2  BDD8               	btfsc	_button_state_now& (0+255),6,b
 29980  001BC4  D00A               	goto	l1560
 29981                           
 29982                           ; BSR set to: 0
 29983  001BC6  ADD0               	btfss	_keyboard& (0+255),6,b
 29984  001BC8  D008               	goto	l1560
 29985                           
 29986                           ; BSR set to: 0
 29987                           ;keyboard.c: 788: pitch = Fs;
 29988  001BCA  0E06               	movlw	6
 29989  001BCC  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29990                           
 29991                           ; BSR set to: 0
 29992                           ;keyboard.c: 789: ON_OFF = 0;
 29993  001BCE  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29994                           
 29995                           ; BSR set to: 0
 29996                           ;keyboard.c: 790: playThisNote(pitch);
 29997  001BD0  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29998  001BD2  ECF2  F033         	call	_playThisNote
 29999                           
 30000                           ;keyboard.c: 791: keyboard.SW7 = 0;
 30001  001BD6  0100               	movlb	0	; () banked
 30002  001BD8  9DD0               	bcf	_keyboard& (0+255),6,b
 30003  001BDA                     l1560:
 30004                           
 30005                           ; BSR set to: 0
 30006                           ;keyboard.c: 792: }
 30007                           ;keyboard.c: 793: if(((button_state_last & 0x00000080)) && ((button_state_now & 0x000000
      +                          80) == 0) && keyboard.SW8) {
 30008                           
 30009                           ; BSR set to: 0
 30010  001BDA  BFD4               	btfsc	_button_state_last& (0+255),7,b
 30011                           
 30012                           ; BSR set to: 0
 30013  001BDC  BFD8               	btfsc	_button_state_now& (0+255),7,b
 30014  001BDE  D00A               	goto	l1561
 30015                           
 30016                           ; BSR set to: 0
 30017  001BE0  AFD0               	btfss	_keyboard& (0+255),7,b
 30018  001BE2  D008               	goto	l1561
 30019                           
 30020                           ; BSR set to: 0
 30021                           ;keyboard.c: 794: pitch = G;
 30022  001BE4  0E07               	movlw	7
 30023  001BE6  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30024                           
 30025                           ; BSR set to: 0
 30026                           ;keyboard.c: 795: ON_OFF = 0;
 30027  001BE8  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30028                           
 30029                           ; BSR set to: 0
 30030                           ;keyboard.c: 796: playThisNote(pitch);
 30031  001BEA  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30032  001BEC  ECF2  F033         	call	_playThisNote
 30033                           
 30034                           ;keyboard.c: 797: keyboard.SW8 = 0;
 30035  001BF0  0100               	movlb	0	; () banked
 30036  001BF2  9FD0               	bcf	_keyboard& (0+255),7,b
 30037  001BF4                     l1561:
 30038                           
 30039                           ; BSR set to: 0
 30040                           ;keyboard.c: 798: }
 30041                           ;keyboard.c: 799: if(((button_state_last & 0x00000100)) && ((button_state_now & 0x000001
      +                          00) == 0) && keyboard.SW9) {
 30042                           
 30043                           ; BSR set to: 0
 30044  001BF4  B1D5               	btfsc	(_button_state_last+1)& (0+255),0,b
 30045                           
 30046                           ; BSR set to: 0
 30047  001BF6  B1D9               	btfsc	(_button_state_now+1)& (0+255),0,b
 30048  001BF8  D00A               	goto	l1562
 30049                           
 30050                           ; BSR set to: 0
 30051  001BFA  A1D1               	btfss	(_keyboard+1)& (0+255),0,b
 30052  001BFC  D008               	goto	l1562
 30053                           
 30054                           ; BSR set to: 0
 30055                           ;keyboard.c: 800: pitch = Gs;
 30056  001BFE  0E08               	movlw	8
 30057  001C00  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30058                           
 30059                           ; BSR set to: 0
 30060                           ;keyboard.c: 801: ON_OFF = 0;
 30061  001C02  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30062                           
 30063                           ; BSR set to: 0
 30064                           ;keyboard.c: 802: playThisNote(pitch);
 30065  001C04  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30066  001C06  ECF2  F033         	call	_playThisNote
 30067                           
 30068                           ;keyboard.c: 803: keyboard.SW9 = 0;
 30069  001C0A  0100               	movlb	0	; () banked
 30070  001C0C  91D1               	bcf	(_keyboard+1)& (0+255),0,b
 30071  001C0E                     l1562:
 30072                           
 30073                           ; BSR set to: 0
 30074                           ;keyboard.c: 804: }
 30075                           ;keyboard.c: 805: if(((button_state_last & 0x00000200)) && ((button_state_now & 0x000002
      +                          00) == 0) && keyboard.SW10) {
 30076                           
 30077                           ; BSR set to: 0
 30078  001C0E  B3D5               	btfsc	(_button_state_last+1)& (0+255),1,b
 30079                           
 30080                           ; BSR set to: 0
 30081  001C10  B3D9               	btfsc	(_button_state_now+1)& (0+255),1,b
 30082  001C12  D00A               	goto	l1563
 30083                           
 30084                           ; BSR set to: 0
 30085  001C14  A3D1               	btfss	(_keyboard+1)& (0+255),1,b
 30086  001C16  D008               	goto	l1563
 30087                           
 30088                           ; BSR set to: 0
 30089                           ;keyboard.c: 806: pitch = A;
 30090  001C18  0E09               	movlw	9
 30091  001C1A  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30092                           
 30093                           ; BSR set to: 0
 30094                           ;keyboard.c: 807: ON_OFF = 0;
 30095  001C1C  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30096                           
 30097                           ; BSR set to: 0
 30098                           ;keyboard.c: 808: playThisNote(pitch);
 30099  001C1E  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30100  001C20  ECF2  F033         	call	_playThisNote
 30101                           
 30102                           ;keyboard.c: 809: keyboard.SW10 = 0;
 30103  001C24  0100               	movlb	0	; () banked
 30104  001C26  93D1               	bcf	(_keyboard+1)& (0+255),1,b
 30105  001C28                     l1563:
 30106                           
 30107                           ; BSR set to: 0
 30108                           ;keyboard.c: 810: }
 30109                           ;keyboard.c: 811: if(((button_state_last & 0x00000400)) && ((button_state_now & 0x000004
      +                          00) == 0) && keyboard.SW11) {
 30110                           
 30111                           ; BSR set to: 0
 30112  001C28  B5D5               	btfsc	(_button_state_last+1)& (0+255),2,b
 30113                           
 30114                           ; BSR set to: 0
 30115  001C2A  B5D9               	btfsc	(_button_state_now+1)& (0+255),2,b
 30116  001C2C  D00A               	goto	l1564
 30117                           
 30118                           ; BSR set to: 0
 30119  001C2E  A5D1               	btfss	(_keyboard+1)& (0+255),2,b
 30120  001C30  D008               	goto	l1564
 30121                           
 30122                           ; BSR set to: 0
 30123                           ;keyboard.c: 812: pitch = As;
 30124  001C32  0E0A               	movlw	10
 30125  001C34  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30126                           
 30127                           ; BSR set to: 0
 30128                           ;keyboard.c: 813: ON_OFF = 0;
 30129  001C36  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30130                           
 30131                           ; BSR set to: 0
 30132                           ;keyboard.c: 814: playThisNote(pitch);
 30133  001C38  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30134  001C3A  ECF2  F033         	call	_playThisNote
 30135                           
 30136                           ;keyboard.c: 815: keyboard.SW11 = 0;
 30137  001C3E  0100               	movlb	0	; () banked
 30138  001C40  95D1               	bcf	(_keyboard+1)& (0+255),2,b
 30139  001C42                     l1564:
 30140                           
 30141                           ; BSR set to: 0
 30142                           ;keyboard.c: 816: }
 30143                           ;keyboard.c: 817: if(((button_state_last & 0x00000800)) && ((button_state_now & 0x000008
      +                          00) == 0) && keyboard.SW12) {
 30144                           
 30145                           ; BSR set to: 0
 30146  001C42  B7D5               	btfsc	(_button_state_last+1)& (0+255),3,b
 30147                           
 30148                           ; BSR set to: 0
 30149  001C44  B7D9               	btfsc	(_button_state_now+1)& (0+255),3,b
 30150  001C46  D00A               	goto	l1565
 30151                           
 30152                           ; BSR set to: 0
 30153  001C48  A7D1               	btfss	(_keyboard+1)& (0+255),3,b
 30154  001C4A  D008               	goto	l1565
 30155                           
 30156                           ; BSR set to: 0
 30157                           ;keyboard.c: 818: pitch = B;
 30158  001C4C  0E0B               	movlw	11
 30159  001C4E  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30160                           
 30161                           ; BSR set to: 0
 30162                           ;keyboard.c: 819: ON_OFF = 0;
 30163  001C50  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30164                           
 30165                           ; BSR set to: 0
 30166                           ;keyboard.c: 820: playThisNote(pitch);
 30167  001C52  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30168  001C54  ECF2  F033         	call	_playThisNote
 30169                           
 30170                           ;keyboard.c: 821: keyboard.SW12 = 0;
 30171  001C58  0100               	movlb	0	; () banked
 30172  001C5A  97D1               	bcf	(_keyboard+1)& (0+255),3,b
 30173  001C5C                     l1565:
 30174                           
 30175                           ; BSR set to: 0
 30176                           ;keyboard.c: 822: }
 30177                           ;keyboard.c: 823: if(((button_state_last & 0x00001000)) && ((button_state_now & 0x000010
      +                          00) == 0) && keyboard.SW13) {
 30178                           
 30179                           ; BSR set to: 0
 30180  001C5C  B9D5               	btfsc	(_button_state_last+1)& (0+255),4,b
 30181                           
 30182                           ; BSR set to: 0
 30183  001C5E  B9D9               	btfsc	(_button_state_now+1)& (0+255),4,b
 30184  001C60  D00A               	goto	l1566
 30185                           
 30186                           ; BSR set to: 0
 30187  001C62  A9D1               	btfss	(_keyboard+1)& (0+255),4,b
 30188  001C64  D008               	goto	l1566
 30189                           
 30190                           ; BSR set to: 0
 30191                           ;keyboard.c: 824: pitch = C2;
 30192  001C66  0E0C               	movlw	12
 30193  001C68  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30194                           
 30195                           ; BSR set to: 0
 30196                           ;keyboard.c: 825: ON_OFF = 0;
 30197  001C6A  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30198                           
 30199                           ; BSR set to: 0
 30200                           ;keyboard.c: 826: playThisNote(pitch);
 30201  001C6C  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30202  001C6E  ECF2  F033         	call	_playThisNote
 30203                           
 30204                           ;keyboard.c: 827: keyboard.SW13 = 0;
 30205  001C72  0100               	movlb	0	; () banked
 30206  001C74  99D1               	bcf	(_keyboard+1)& (0+255),4,b
 30207  001C76                     l1566:
 30208                           
 30209                           ; BSR set to: 0
 30210                           ;keyboard.c: 828: }
 30211                           ;keyboard.c: 829: if(((button_state_last & 0x00002000)) && ((button_state_now & 0x000020
      +                          00) == 0) && keyboard.SW14) {
 30212                           
 30213                           ; BSR set to: 0
 30214  001C76  BBD5               	btfsc	(_button_state_last+1)& (0+255),5,b
 30215                           
 30216                           ; BSR set to: 0
 30217  001C78  BBD9               	btfsc	(_button_state_now+1)& (0+255),5,b
 30218  001C7A  D00A               	goto	l1567
 30219                           
 30220                           ; BSR set to: 0
 30221  001C7C  ABD1               	btfss	(_keyboard+1)& (0+255),5,b
 30222  001C7E  D008               	goto	l1567
 30223                           
 30224                           ; BSR set to: 0
 30225                           ;keyboard.c: 830: pitch = C2s;
 30226  001C80  0E0D               	movlw	13
 30227  001C82  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30228                           
 30229                           ; BSR set to: 0
 30230                           ;keyboard.c: 831: ON_OFF = 0;
 30231  001C84  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30232                           
 30233                           ; BSR set to: 0
 30234                           ;keyboard.c: 832: playThisNote(pitch);
 30235  001C86  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30236  001C88  ECF2  F033         	call	_playThisNote
 30237                           
 30238                           ;keyboard.c: 833: keyboard.SW14 = 0;
 30239  001C8C  0100               	movlb	0	; () banked
 30240  001C8E  9BD1               	bcf	(_keyboard+1)& (0+255),5,b
 30241  001C90                     l1567:
 30242                           
 30243                           ; BSR set to: 0
 30244                           ;keyboard.c: 834: }
 30245                           ;keyboard.c: 835: if(((button_state_last & 0x00004000)) && ((button_state_now & 0x000040
      +                          00) == 0) && keyboard.SW15) {
 30246                           
 30247                           ; BSR set to: 0
 30248  001C90  BDD5               	btfsc	(_button_state_last+1)& (0+255),6,b
 30249                           
 30250                           ; BSR set to: 0
 30251  001C92  BDD9               	btfsc	(_button_state_now+1)& (0+255),6,b
 30252  001C94  D00A               	goto	l1568
 30253                           
 30254                           ; BSR set to: 0
 30255  001C96  ADD1               	btfss	(_keyboard+1)& (0+255),6,b
 30256  001C98  D008               	goto	l1568
 30257                           
 30258                           ; BSR set to: 0
 30259                           ;keyboard.c: 836: pitch = D2;
 30260  001C9A  0E0E               	movlw	14
 30261  001C9C  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30262                           
 30263                           ; BSR set to: 0
 30264                           ;keyboard.c: 837: ON_OFF = 0;
 30265  001C9E  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30266                           
 30267                           ; BSR set to: 0
 30268                           ;keyboard.c: 838: playThisNote(pitch);
 30269  001CA0  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30270  001CA2  ECF2  F033         	call	_playThisNote
 30271                           
 30272                           ;keyboard.c: 839: keyboard.SW15 = 0;
 30273  001CA6  0100               	movlb	0	; () banked
 30274  001CA8  9DD1               	bcf	(_keyboard+1)& (0+255),6,b
 30275  001CAA                     l1568:
 30276                           
 30277                           ; BSR set to: 0
 30278                           ;keyboard.c: 840: }
 30279                           ;keyboard.c: 841: if(((button_state_last & 0x00008000)) && ((button_state_now & 0x000080
      +                          00) == 0) && keyboard.SW16) {
 30280                           
 30281                           ; BSR set to: 0
 30282  001CAA  BFD5               	btfsc	(_button_state_last+1)& (0+255),7,b
 30283                           
 30284                           ; BSR set to: 0
 30285  001CAC  BFD9               	btfsc	(_button_state_now+1)& (0+255),7,b
 30286  001CAE  D00A               	goto	l1569
 30287                           
 30288                           ; BSR set to: 0
 30289  001CB0  AFD1               	btfss	(_keyboard+1)& (0+255),7,b
 30290  001CB2  D008               	goto	l1569
 30291                           
 30292                           ; BSR set to: 0
 30293                           ;keyboard.c: 842: pitch = D2s;
 30294  001CB4  0E0F               	movlw	15
 30295  001CB6  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30296                           
 30297                           ; BSR set to: 0
 30298                           ;keyboard.c: 843: ON_OFF = 0;
 30299  001CB8  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30300                           
 30301                           ; BSR set to: 0
 30302                           ;keyboard.c: 844: playThisNote(pitch);
 30303  001CBA  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30304  001CBC  ECF2  F033         	call	_playThisNote
 30305                           
 30306                           ;keyboard.c: 845: keyboard.SW16 = 0;
 30307  001CC0  0100               	movlb	0	; () banked
 30308  001CC2  9FD1               	bcf	(_keyboard+1)& (0+255),7,b
 30309  001CC4                     l1569:
 30310                           
 30311                           ; BSR set to: 0
 30312                           ;keyboard.c: 846: }
 30313                           ;keyboard.c: 847: if(((button_state_last & 0x00010000)) && ((button_state_now & 0x000100
      +                          00) == 0) && keyboard.SW17) {
 30314                           
 30315                           ; BSR set to: 0
 30316  001CC4  B1D6               	btfsc	(_button_state_last+2)& (0+255),0,b
 30317                           
 30318                           ; BSR set to: 0
 30319  001CC6  B1DA               	btfsc	(_button_state_now+2)& (0+255),0,b
 30320  001CC8  D00A               	goto	l1570
 30321                           
 30322                           ; BSR set to: 0
 30323  001CCA  A1D2               	btfss	(_keyboard+2)& (0+255),0,b
 30324  001CCC  D008               	goto	l1570
 30325                           
 30326                           ; BSR set to: 0
 30327                           ;keyboard.c: 848: pitch = E2;
 30328  001CCE  0E10               	movlw	16
 30329  001CD0  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30330                           
 30331                           ; BSR set to: 0
 30332                           ;keyboard.c: 849: ON_OFF = 0;
 30333  001CD2  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30334                           
 30335                           ; BSR set to: 0
 30336                           ;keyboard.c: 850: playThisNote(pitch);
 30337  001CD4  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30338  001CD6  ECF2  F033         	call	_playThisNote
 30339                           
 30340                           ;keyboard.c: 851: keyboard.SW17 = 0;
 30341  001CDA  0100               	movlb	0	; () banked
 30342  001CDC  91D2               	bcf	(_keyboard+2)& (0+255),0,b
 30343  001CDE                     l1570:
 30344                           
 30345                           ; BSR set to: 0
 30346                           ;keyboard.c: 852: }
 30347                           ;keyboard.c: 853: if(((button_state_last & 0x00020000)) && ((button_state_now & 0x000200
      +                          00) == 0) && keyboard.SW18) {
 30348                           
 30349                           ; BSR set to: 0
 30350  001CDE  B3D6               	btfsc	(_button_state_last+2)& (0+255),1,b
 30351                           
 30352                           ; BSR set to: 0
 30353  001CE0  B3DA               	btfsc	(_button_state_now+2)& (0+255),1,b
 30354  001CE2  D00A               	goto	l1571
 30355                           
 30356                           ; BSR set to: 0
 30357  001CE4  A3D2               	btfss	(_keyboard+2)& (0+255),1,b
 30358  001CE6  D008               	goto	l1571
 30359                           
 30360                           ; BSR set to: 0
 30361                           ;keyboard.c: 854: pitch = F2;
 30362  001CE8  0E11               	movlw	17
 30363  001CEA  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30364                           
 30365                           ; BSR set to: 0
 30366                           ;keyboard.c: 855: ON_OFF = 0;
 30367  001CEC  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30368                           
 30369                           ; BSR set to: 0
 30370                           ;keyboard.c: 856: playThisNote(pitch);
 30371  001CEE  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30372  001CF0  ECF2  F033         	call	_playThisNote
 30373                           
 30374                           ;keyboard.c: 857: keyboard.SW18 = 0;
 30375  001CF4  0100               	movlb	0	; () banked
 30376  001CF6  93D2               	bcf	(_keyboard+2)& (0+255),1,b
 30377  001CF8                     l1571:
 30378                           
 30379                           ; BSR set to: 0
 30380                           ;keyboard.c: 858: }
 30381                           ;keyboard.c: 859: if(((button_state_last & 0x00040000)) && ((button_state_now & 0x000400
      +                          00) == 0) && keyboard.SW19) {
 30382                           
 30383                           ; BSR set to: 0
 30384  001CF8  B5D6               	btfsc	(_button_state_last+2)& (0+255),2,b
 30385                           
 30386                           ; BSR set to: 0
 30387  001CFA  B5DA               	btfsc	(_button_state_now+2)& (0+255),2,b
 30388  001CFC  D00A               	goto	l1572
 30389                           
 30390                           ; BSR set to: 0
 30391  001CFE  A5D2               	btfss	(_keyboard+2)& (0+255),2,b
 30392  001D00  D008               	goto	l1572
 30393                           
 30394                           ; BSR set to: 0
 30395                           ;keyboard.c: 860: pitch = F2s;
 30396  001D02  0E12               	movlw	18
 30397  001D04  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30398                           
 30399                           ; BSR set to: 0
 30400                           ;keyboard.c: 861: ON_OFF = 0;
 30401  001D06  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30402                           
 30403                           ; BSR set to: 0
 30404                           ;keyboard.c: 862: playThisNote(pitch);
 30405  001D08  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30406  001D0A  ECF2  F033         	call	_playThisNote
 30407                           
 30408                           ;keyboard.c: 863: keyboard.SW19 = 0;
 30409  001D0E  0100               	movlb	0	; () banked
 30410  001D10  95D2               	bcf	(_keyboard+2)& (0+255),2,b
 30411  001D12                     l1572:
 30412                           
 30413                           ; BSR set to: 0
 30414                           ;keyboard.c: 864: }
 30415                           ;keyboard.c: 865: if(((button_state_last & 0x00080000)) && ((button_state_now & 0x000800
      +                          00) == 0) && keyboard.SW20) {
 30416                           
 30417                           ; BSR set to: 0
 30418  001D12  B7D6               	btfsc	(_button_state_last+2)& (0+255),3,b
 30419                           
 30420                           ; BSR set to: 0
 30421  001D14  B7DA               	btfsc	(_button_state_now+2)& (0+255),3,b
 30422  001D16  D00A               	goto	l1573
 30423                           
 30424                           ; BSR set to: 0
 30425  001D18  A7D2               	btfss	(_keyboard+2)& (0+255),3,b
 30426  001D1A  D008               	goto	l1573
 30427                           
 30428                           ; BSR set to: 0
 30429                           ;keyboard.c: 866: pitch = G2;
 30430  001D1C  0E13               	movlw	19
 30431  001D1E  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30432                           
 30433                           ; BSR set to: 0
 30434                           ;keyboard.c: 867: ON_OFF = 0;
 30435  001D20  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30436                           
 30437                           ; BSR set to: 0
 30438                           ;keyboard.c: 868: playThisNote(pitch);
 30439  001D22  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30440  001D24  ECF2  F033         	call	_playThisNote
 30441                           
 30442                           ;keyboard.c: 869: keyboard.SW20 = 0;
 30443  001D28  0100               	movlb	0	; () banked
 30444  001D2A  97D2               	bcf	(_keyboard+2)& (0+255),3,b
 30445  001D2C                     l1573:
 30446                           
 30447                           ; BSR set to: 0
 30448                           ;keyboard.c: 870: }
 30449                           ;keyboard.c: 871: if(((button_state_last & 0x00100000)) && ((button_state_now & 0x001000
      +                          00) == 0) && keyboard.SW21) {
 30450                           
 30451                           ; BSR set to: 0
 30452  001D2C  B9D6               	btfsc	(_button_state_last+2)& (0+255),4,b
 30453                           
 30454                           ; BSR set to: 0
 30455  001D2E  B9DA               	btfsc	(_button_state_now+2)& (0+255),4,b
 30456  001D30  D00A               	goto	l1574
 30457                           
 30458                           ; BSR set to: 0
 30459  001D32  A9D2               	btfss	(_keyboard+2)& (0+255),4,b
 30460  001D34  D008               	goto	l1574
 30461                           
 30462                           ; BSR set to: 0
 30463                           ;keyboard.c: 872: pitch = G2s;
 30464  001D36  0E14               	movlw	20
 30465  001D38  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30466                           
 30467                           ; BSR set to: 0
 30468                           ;keyboard.c: 873: ON_OFF = 0;
 30469  001D3A  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30470                           
 30471                           ; BSR set to: 0
 30472                           ;keyboard.c: 874: playThisNote(pitch);
 30473  001D3C  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30474  001D3E  ECF2  F033         	call	_playThisNote
 30475                           
 30476                           ;keyboard.c: 875: keyboard.SW21 = 0;
 30477  001D42  0100               	movlb	0	; () banked
 30478  001D44  99D2               	bcf	(_keyboard+2)& (0+255),4,b
 30479  001D46                     l1574:
 30480                           
 30481                           ; BSR set to: 0
 30482                           ;keyboard.c: 876: }
 30483                           ;keyboard.c: 877: if(((button_state_last & 0x00200000)) && ((button_state_now & 0x002000
      +                          00) == 0) && keyboard.SW22) {
 30484                           
 30485                           ; BSR set to: 0
 30486  001D46  BBD6               	btfsc	(_button_state_last+2)& (0+255),5,b
 30487                           
 30488                           ; BSR set to: 0
 30489  001D48  BBDA               	btfsc	(_button_state_now+2)& (0+255),5,b
 30490  001D4A  D00A               	goto	l1575
 30491                           
 30492                           ; BSR set to: 0
 30493  001D4C  ABD2               	btfss	(_keyboard+2)& (0+255),5,b
 30494  001D4E  D008               	goto	l1575
 30495                           
 30496                           ; BSR set to: 0
 30497                           ;keyboard.c: 878: pitch = A2;
 30498  001D50  0E15               	movlw	21
 30499  001D52  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30500                           
 30501                           ; BSR set to: 0
 30502                           ;keyboard.c: 879: ON_OFF = 0;
 30503  001D54  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30504                           
 30505                           ; BSR set to: 0
 30506                           ;keyboard.c: 880: playThisNote(pitch);
 30507  001D56  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30508  001D58  ECF2  F033         	call	_playThisNote
 30509                           
 30510                           ;keyboard.c: 881: keyboard.SW22 = 0;
 30511  001D5C  0100               	movlb	0	; () banked
 30512  001D5E  9BD2               	bcf	(_keyboard+2)& (0+255),5,b
 30513  001D60                     l1575:
 30514                           
 30515                           ; BSR set to: 0
 30516                           ;keyboard.c: 882: }
 30517                           ;keyboard.c: 883: if(((button_state_last & 0x00400000)) && ((button_state_now & 0x004000
      +                          00) == 0) && keyboard.SW23) {
 30518                           
 30519                           ; BSR set to: 0
 30520  001D60  BDD6               	btfsc	(_button_state_last+2)& (0+255),6,b
 30521                           
 30522                           ; BSR set to: 0
 30523  001D62  BDDA               	btfsc	(_button_state_now+2)& (0+255),6,b
 30524  001D64  D00A               	goto	l1576
 30525                           
 30526                           ; BSR set to: 0
 30527  001D66  ADD2               	btfss	(_keyboard+2)& (0+255),6,b
 30528  001D68  D008               	goto	l1576
 30529                           
 30530                           ; BSR set to: 0
 30531                           ;keyboard.c: 884: pitch = A2s;
 30532  001D6A  0E16               	movlw	22
 30533  001D6C  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30534                           
 30535                           ; BSR set to: 0
 30536                           ;keyboard.c: 885: ON_OFF = 0;
 30537  001D6E  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30538                           
 30539                           ; BSR set to: 0
 30540                           ;keyboard.c: 886: playThisNote(pitch);
 30541  001D70  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30542  001D72  ECF2  F033         	call	_playThisNote
 30543                           
 30544                           ;keyboard.c: 887: keyboard.SW23 = 0;
 30545  001D76  0100               	movlb	0	; () banked
 30546  001D78  9DD2               	bcf	(_keyboard+2)& (0+255),6,b
 30547  001D7A                     l1576:
 30548                           
 30549                           ; BSR set to: 0
 30550                           ;keyboard.c: 888: }
 30551                           ;keyboard.c: 889: if(((button_state_last & 0x00800000)) && ((button_state_now & 0x008000
      +                          00) == 0) && keyboard.SW24) {
 30552                           
 30553                           ; BSR set to: 0
 30554  001D7A  BFD6               	btfsc	(_button_state_last+2)& (0+255),7,b
 30555                           
 30556                           ; BSR set to: 0
 30557  001D7C  BFDA               	btfsc	(_button_state_now+2)& (0+255),7,b
 30558  001D7E  D00A               	goto	l1577
 30559                           
 30560                           ; BSR set to: 0
 30561  001D80  AFD2               	btfss	(_keyboard+2)& (0+255),7,b
 30562  001D82  D008               	goto	l1577
 30563                           
 30564                           ; BSR set to: 0
 30565                           ;keyboard.c: 890: pitch = B2;
 30566  001D84  0E17               	movlw	23
 30567  001D86  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30568                           
 30569                           ; BSR set to: 0
 30570                           ;keyboard.c: 891: ON_OFF = 0;
 30571  001D88  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30572                           
 30573                           ; BSR set to: 0
 30574                           ;keyboard.c: 892: playThisNote(pitch);
 30575  001D8A  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30576  001D8C  ECF2  F033         	call	_playThisNote
 30577                           
 30578                           ;keyboard.c: 893: keyboard.SW24 = 0;
 30579  001D90  0100               	movlb	0	; () banked
 30580  001D92  9FD2               	bcf	(_keyboard+2)& (0+255),7,b
 30581  001D94                     l1577:
 30582                           
 30583                           ; BSR set to: 0
 30584                           ;keyboard.c: 894: }
 30585                           ;keyboard.c: 895: if(((button_state_last & 0x01000000)) && ((button_state_now & 0x010000
      +                          00) == 0) && keyboard.SW25) {
 30586                           
 30587                           ; BSR set to: 0
 30588  001D94  A1D7               	btfss	(_button_state_last+3)& (0+255),0,b
 30589  001D96  0012               	return	
 30590                           
 30591                           ; BSR set to: 0
 30592  001D98  B1DB               	btfsc	(_button_state_now+3)& (0+255),0,b
 30593  001D9A  0012               	return	
 30594                           
 30595                           ; BSR set to: 0
 30596  001D9C  A1D3               	btfss	(_keyboard+3)& (0+255),0,b
 30597  001D9E  0012               	return	
 30598                           
 30599                           ; BSR set to: 0
 30600                           ;keyboard.c: 896: pitch = C3;
 30601  001DA0  0E18               	movlw	24
 30602  001DA2  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30603                           
 30604                           ; BSR set to: 0
 30605                           ;keyboard.c: 897: ON_OFF = 0;
 30606  001DA4  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30607                           
 30608                           ; BSR set to: 0
 30609                           ;keyboard.c: 898: playThisNote(pitch);
 30610  001DA6  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30611  001DA8  ECF2  F033         	call	_playThisNote
 30612                           
 30613                           ;keyboard.c: 899: keyboard.SW25 = 0;
 30614  001DAC  0100               	movlb	0	; () banked
 30615  001DAE  91D3               	bcf	(_keyboard+3)& (0+255),0,b
 30616  001DB0  0012               	return	
 30617  001DB2                     __end_of_keyboard_all_note_efficient:
 30618                           	opt stack 0
 30619                           tblptru	equ	0xFF8
 30620                           tblptrh	equ	0xFF7
 30621                           tblptrl	equ	0xFF6
 30622                           tablat	equ	0xFF5
 30623                           prodh	equ	0xFF4
 30624                           prodl	equ	0xFF3
 30625                           intcon	equ	0xFF2
 30626                           intcon2	equ	0xFF1
 30627                           postinc0	equ	0xFEE
 30628                           wreg	equ	0xFE8
 30629                           postinc1	equ	0xFE6
 30630                           plusw1	equ	0xFE3
 30631                           fsr1h	equ	0xFE2
 30632                           fsr1l	equ	0xFE1
 30633                           indf2	equ	0xFDF
 30634                           postinc2	equ	0xFDE
 30635                           postdec2	equ	0xFDD
 30636                           plusw2	equ	0xFDB
 30637                           fsr2h	equ	0xFDA
 30638                           fsr2l	equ	0xFD9
 30639                           status	equ	0xFD8
 30640                           
 30641 ;; *************** function _playThisNote *****************
 30642 ;; Defined at:
 30643 ;;		line 495 in file "keyboard.c"
 30644 ;; Parameters:    Size  Location     Type
 30645 ;;  pitch           1    wreg     unsigned char 
 30646 ;; Auto vars:     Size  Location     Type
 30647 ;;  pitch           1   21[BANK0 ] unsigned char 
 30648 ;; Return value:  Size  Location     Type
 30649 ;;                  1    wreg      void 
 30650 ;; Registers used:
 30651 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30652 ;; Tracked objects:
 30653 ;;		On entry : 0/0
 30654 ;;		On exit  : 0/0
 30655 ;;		Unchanged: 0/0
 30656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 30657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30658 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30659 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30660 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30661 ;;Total ram usage:        5 bytes
 30662 ;; Hardware stack levels used:    1
 30663 ;; Hardware stack levels required when called:   11
 30664 ;; This function calls:
 30665 ;;		_add_notes_to_arpeggio
 30666 ;;		_delete_notes_from_arpeggio
 30667 ;;		_finish_arpeggio_setup
 30668 ;;		_key_press_release_note_off
 30669 ;;		_noteOff
 30670 ;;		_noteOn
 30671 ;;		_playSeventh
 30672 ;;		_playTriad
 30673 ;;		_wait_one_pulse
 30674 ;; This function is called by:
 30675 ;;		_keyboard_all_note_efficient
 30676 ;;		_doTheUnLatch
 30677 ;; This function uses a non-reentrant model
 30678 ;;
 30679                           
 30680                           	psect	text78
 30681  0067E4                     __ptext78:
 30682                           	opt stack 0
 30683  0067E4                     _playThisNote:
 30684                           	opt stack 13
 30685                           
 30686                           ; BSR set to: 0
 30687                           ;incstack = 0
 30688                           ;playThisNote@pitch stored from wreg
 30689  0067E4  0100               	movlb	0	; () banked
 30690  0067E6  6F75               	movwf	playThisNote@pitch& (0+255),b
 30691                           
 30692                           ;keyboard.c: 497: if(KEYBOARD_MODE == CHROMATIC) {
 30693  0067E8  0100               	movlb	0	; () banked
 30694  0067EA  51F2               	movf	_KEYBOARD_MODE& (0+255),w,b
 30695  0067EC  A4D8               	btfss	status,2,c
 30696  0067EE  D06B               	goto	l1519
 30697                           
 30698                           ; BSR set to: 0
 30699                           ;keyboard.c: 500: if(ARPEGGIO_ON == 0){
 30700  0067F0  B604               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 30701  0067F2  D015               	goto	l1512
 30702                           
 30703                           ; BSR set to: 0
 30704                           ;keyboard.c: 501: if(ON_OFF == 1) {noteOn(channel,pitch,velocity);}
 30705  0067F4  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30706  0067F6  D008               	goto	l1511
 30707                           
 30708                           ; BSR set to: 0
 30709  0067F8  5051               	movf	_velocity,w,c
 30710  0067FA  6EE6               	movwf	postinc1,c
 30711  0067FC  5175               	movf	playThisNote@pitch& (0+255),w,b
 30712  0067FE  6EE6               	movwf	postinc1,c
 30713  006800  503E               	movf	_channel,w,c
 30714  006802  6EE6               	movwf	postinc1,c
 30715  006804  EC95  F045         	call	_noteOn	;wreg free
 30716  006808                     l1511:
 30717                           
 30718                           ;keyboard.c: 502: if(ON_OFF == 0) {noteOff(channel,pitch,velocity);}
 30719  006808  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30720  00680A  D009               	goto	l1512
 30721  00680C  5051               	movf	_velocity,w,c
 30722  00680E  6EE6               	movwf	postinc1,c
 30723  006810  0100               	movlb	0	; () banked
 30724  006812  5175               	movf	playThisNote@pitch& (0+255),w,b
 30725  006814  6EE6               	movwf	postinc1,c
 30726  006816  503E               	movf	_channel,w,c
 30727  006818  6EE6               	movwf	postinc1,c
 30728  00681A  EC4A  F04A         	call	_noteOff	;wreg free
 30729  00681E                     l1512:
 30730                           
 30731                           ;keyboard.c: 503: }
 30732                           ;keyboard.c: 506: if(ARPEGGIO_ON == 1){
 30733  00681E  A604               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 30734  006820  D052               	goto	l1519
 30735                           
 30736                           ;keyboard.c: 508: if(ON_OFF == 1){
 30737  006822  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30738  006824  D01A               	goto	l1514
 30739                           
 30740                           ;keyboard.c: 511: TMR0ON = 0;
 30741  006826  9ED5               	bcf	4053,7,c	;volatile
 30742                           
 30743                           ;keyboard.c: 513: parallel = pitch;
 30744  006828  C075  F030         	movff	playThisNote@pitch,_parallel
 30745                           
 30746                           ;keyboard.c: 516: if(NUM_NOTES_PRESSED > 0){
 30747  00682C  502F               	movf	_NUM_NOTES_PRESSED,w,c
 30748  00682E  B4D8               	btfsc	status,2,c
 30749  006830  D00A               	goto	l1515
 30750                           
 30751                           ;keyboard.c: 517: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 30752  006832  0E00               	movlw	0
 30753  006834  B203               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 30754  006836  0E01               	movlw	1
 30755  006838  ECEF  F04B         	call	_wait_one_pulse
 30756                           
 30757                           ;keyboard.c: 518: if(note_off_was_sent == 0) {key_press_release_note_off();}
 30758  00683C  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 30759  00683E  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 30760                           
 30761                           ;keyboard.c: 519: TIMER_OVERFLOWS = 0;
 30762  006842  0E00               	movlw	0
 30763  006844  6E2E               	movwf	_TIMER_OVERFLOWS,c
 30764  006846                     l1515:
 30765                           
 30766                           ;keyboard.c: 520: }
 30767                           ;keyboard.c: 523: add_notes_to_arpeggio(pitch);
 30768  006846  0100               	movlb	0	; () banked
 30769  006848  5175               	movf	playThisNote@pitch& (0+255),w,b
 30770  00684A  ECF4  F034         	call	_add_notes_to_arpeggio
 30771                           
 30772                           ;keyboard.c: 526: if(LATCH == 0) {
 30773  00684E  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 30774                           
 30775                           ;keyboard.c: 527: latch_was_pressed = 0;
 30776  006850  9A03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30777                           
 30778                           ;keyboard.c: 528: }
 30779                           ;keyboard.c: 531: finish_arpeggio_setup();
 30780  006852  EC84  F04C         	call	_finish_arpeggio_setup	;wreg free
 30781                           
 30782                           ;keyboard.c: 534: TMR0ON = 1;
 30783  006856  8ED5               	bsf	4053,7,c	;volatile
 30784                           
 30785                           ;keyboard.c: 536: return;
 30786  006858  0012               	return	
 30787  00685A                     l1514:
 30788                           
 30789                           ;keyboard.c: 537: }
 30790                           ;keyboard.c: 540: if((ON_OFF == 0) && (LATCH == 0)){
 30791  00685A  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30792  00685C  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 30793  00685E  D033               	goto	l1519
 30794                           
 30795                           ;keyboard.c: 543: TMR0ON = 0;
 30796  006860  9ED5               	bcf	4053,7,c	;volatile
 30797                           
 30798                           ;keyboard.c: 546: if(NUM_NOTES_PRESSED > 0){
 30799  006862  502F               	movf	_NUM_NOTES_PRESSED,w,c
 30800  006864  B4D8               	btfsc	status,2,c
 30801  006866  D00A               	goto	l1520
 30802                           
 30803                           ;keyboard.c: 547: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 30804  006868  0E00               	movlw	0
 30805  00686A  B003               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 30806  00686C  0E01               	movlw	1
 30807  00686E  ECEF  F04B         	call	_wait_one_pulse
 30808                           
 30809                           ;keyboard.c: 548: if(note_off_was_sent == 0) {key_press_release_note_off();}
 30810  006872  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 30811  006874  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 30812                           
 30813                           ;keyboard.c: 549: TIMER_OVERFLOWS = 0;
 30814  006878  0E00               	movlw	0
 30815  00687A  6E2E               	movwf	_TIMER_OVERFLOWS,c
 30816  00687C                     l1520:
 30817                           
 30818                           ;keyboard.c: 550: }
 30819                           ;keyboard.c: 553: delete_notes_from_arpeggio(pitch);
 30820  00687C  0100               	movlb	0	; () banked
 30821  00687E  5175               	movf	playThisNote@pitch& (0+255),w,b
 30822  006880  EC5C  F04B         	call	_delete_notes_from_arpeggio
 30823                           
 30824                           ;keyboard.c: 556: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 30825  006884  C030  F071         	movff	_parallel,??_playThisNote
 30826  006888  0100               	movlb	0	; () banked
 30827  00688A  6B72               	clrf	(??_playThisNote+1)& (0+255),b
 30828  00688C  BF71               	btfsc	??_playThisNote& (0+255),7,b
 30829  00688E  0772               	decf	(??_playThisNote+1)& (0+255),f,b
 30830  006890  5175               	movf	playThisNote@pitch& (0+255),w,b
 30831  006892  6F73               	movwf	(??_playThisNote+2)& (0+255),b
 30832  006894  6B74               	clrf	(??_playThisNote+3)& (0+255),b
 30833  006896  5171               	movf	??_playThisNote& (0+255),w,b
 30834  006898  1973               	xorwf	(??_playThisNote+2)& (0+255),w,b
 30835  00689A  E106               	bnz	l27118
 30836  00689C  5172               	movf	(??_playThisNote+1)& (0+255),w,b
 30837  00689E  1974               	xorwf	(??_playThisNote+3)& (0+255),w,b
 30838  0068A0  A4D8               	btfss	status,2,c
 30839  0068A2  D002               	goto	l1522
 30840                           
 30841                           ; BSR set to: 0
 30842  0068A4  0E00               	movlw	0
 30843  0068A6  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 30844  0068A8                     l1522:
 30845  0068A8                     l27118:
 30846                           
 30847                           ; BSR set to: 0
 30848                           ;keyboard.c: 561: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 30849  0068A8  BC03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 30850                           
 30851                           ; BSR set to: 0
 30852  0068AA  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30853  0068AC  D001               	goto	l1523
 30854                           
 30855                           ; BSR set to: 0
 30856                           ;keyboard.c: 562: LATCH = 1;
 30857  0068AE  8004               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 30858  0068B0                     l1523:
 30859                           
 30860                           ; BSR set to: 0
 30861                           ;keyboard.c: 563: }
 30862                           ;keyboard.c: 566: if((UN_LATCH_MODE == 0) && (latch_was_pressed == 1)){
 30863  0068B0  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 30864                           
 30865                           ; BSR set to: 0
 30866  0068B2  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30867  0068B4  D004               	goto	l1524
 30868                           
 30869                           ; BSR set to: 0
 30870                           ;keyboard.c: 567: NUM_NOTES_PRESSED = 0;
 30871  0068B6  0E00               	movlw	0
 30872  0068B8  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 30873                           
 30874                           ;keyboard.c: 568: ARRAY_INDEX = 0;
 30875  0068BA  0E00               	movlw	0
 30876  0068BC  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 30877  0068BE                     l1524:
 30878                           
 30879                           ; BSR set to: 0
 30880                           ;keyboard.c: 569: }
 30881                           ;keyboard.c: 572: finish_arpeggio_setup();
 30882                           
 30883                           ; BSR set to: 0
 30884  0068BE  EC84  F04C         	call	_finish_arpeggio_setup	;wreg free
 30885                           
 30886                           ;keyboard.c: 575: TMR0ON = 1;
 30887  0068C2  8ED5               	bsf	4053,7,c	;volatile
 30888                           
 30889                           ;keyboard.c: 577: return;
 30890  0068C4  0012               	return	
 30891  0068C6                     l1519:
 30892                           
 30893                           ;keyboard.c: 578: }
 30894                           ;keyboard.c: 579: }
 30895                           ;keyboard.c: 580: }
 30896                           ;keyboard.c: 582: if(KEYBOARD_MODE == TRIAD) {
 30897  0068C6  0E06               	movlw	6
 30898  0068C8  0100               	movlb	0	; () banked
 30899  0068CA  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 30900  0068CC  A4D8               	btfss	status,2,c
 30901  0068CE  D003               	goto	l1525
 30902                           
 30903                           ; BSR set to: 0
 30904                           ;keyboard.c: 583: playTriad(pitch);
 30905  0068D0  5175               	movf	playThisNote@pitch& (0+255),w,b
 30906  0068D2  ECCB  F02D         	call	_playTriad
 30907  0068D6                     l1525:
 30908                           
 30909                           ;keyboard.c: 584: }
 30910                           ;keyboard.c: 586: if(KEYBOARD_MODE == SEVENTH) {
 30911  0068D6  0E09               	movlw	9
 30912  0068D8  0100               	movlb	0	; () banked
 30913  0068DA  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 30914  0068DC  A4D8               	btfss	status,2,c
 30915  0068DE  0012               	return	
 30916                           
 30917                           ; BSR set to: 0
 30918                           ;keyboard.c: 587: playSeventh(pitch);
 30919  0068E0  5175               	movf	playThisNote@pitch& (0+255),w,b
 30920  0068E2  EC3A  F02C         	call	_playSeventh
 30921  0068E6  0012               	return	
 30922  0068E8                     __end_of_playThisNote:
 30923                           	opt stack 0
 30924                           tblptru	equ	0xFF8
 30925                           tblptrh	equ	0xFF7
 30926                           tblptrl	equ	0xFF6
 30927                           tablat	equ	0xFF5
 30928                           prodh	equ	0xFF4
 30929                           prodl	equ	0xFF3
 30930                           intcon	equ	0xFF2
 30931                           intcon2	equ	0xFF1
 30932                           postinc0	equ	0xFEE
 30933                           wreg	equ	0xFE8
 30934                           postinc1	equ	0xFE6
 30935                           plusw1	equ	0xFE3
 30936                           fsr1h	equ	0xFE2
 30937                           fsr1l	equ	0xFE1
 30938                           indf2	equ	0xFDF
 30939                           postinc2	equ	0xFDE
 30940                           postdec2	equ	0xFDD
 30941                           plusw2	equ	0xFDB
 30942                           fsr2h	equ	0xFDA
 30943                           fsr2l	equ	0xFD9
 30944                           status	equ	0xFD8
 30945                           
 30946 ;; *************** function _playTriad *****************
 30947 ;; Defined at:
 30948 ;;		line 293 in file "keyboard.c"
 30949 ;; Parameters:    Size  Location     Type
 30950 ;;  pitch           1    wreg     unsigned char 
 30951 ;; Auto vars:     Size  Location     Type
 30952 ;;  pitch           1    9[BANK0 ] unsigned char 
 30953 ;;  i               1    8[BANK0 ] unsigned char 
 30954 ;;  i               1    7[BANK0 ] unsigned char 
 30955 ;;  triad_p         2    5[BANK0 ] PTR unsigned char 
 30956 ;;		 -> diminished_triad(3), augmented_triad(3), minor_triad(3), major_triad(3), 
 30957 ;; Return value:  Size  Location     Type
 30958 ;;                  1    wreg      void 
 30959 ;; Registers used:
 30960 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, prodl, prodh, cstack
 30961 ;; Tracked objects:
 30962 ;;		On entry : 0/0
 30963 ;;		On exit  : 0/0
 30964 ;;		Unchanged: 0/0
 30965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 30966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30967 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30968 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30969 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30970 ;;Total ram usage:        9 bytes
 30971 ;; Hardware stack levels used:    1
 30972 ;; Hardware stack levels required when called:   10
 30973 ;; This function calls:
 30974 ;;		_finish_arpeggio_setup
 30975 ;;		_key_press_release_note_off
 30976 ;;		_noteOff
 30977 ;;		_noteOn
 30978 ;;		_wait_one_pulse
 30979 ;; This function is called by:
 30980 ;;		_playThisNote
 30981 ;; This function uses a non-reentrant model
 30982 ;;
 30983                           
 30984                           	psect	text79
 30985  005B96                     __ptext79:
 30986                           	opt stack 0
 30987  005B96                     _playTriad:
 30988                           	opt stack 13
 30989                           
 30990                           ;incstack = 0
 30991                           ;playTriad@pitch stored from wreg
 30992  005B96  0100               	movlb	0	; () banked
 30993  005B98  6F69               	movwf	playTriad@pitch& (0+255),b
 30994                           
 30995                           ;keyboard.c: 295: unsigned char *triad_p;
 30996                           ;keyboard.c: 299: switch (which_triad) {
 30997  005B9A  D012               	goto	l1448
 30998  005B9C                     
 30999                           ;keyboard.c: 301: triad_p = major_triad;
 31000  005B9C  0EFD               	movlw	low _major_triad
 31001  005B9E  0100               	movlb	0	; () banked
 31002  005BA0  6F65               	movwf	playTriad@triad_p& (0+255),b
 31003  005BA2  0E01               	movlw	high _major_triad
 31004  005BA4  D00B               	goto	L14
 31005  005BA6                     
 31006                           ; BSR set to: 0
 31007                           ;keyboard.c: 304: triad_p = minor_triad;
 31008                           
 31009                           ; BSR set to: 0
 31010  005BA6  0EE2               	movlw	low _minor_triad
 31011  005BA8  6F65               	movwf	playTriad@triad_p& (0+255),b
 31012  005BAA  0E02               	movlw	high _minor_triad
 31013  005BAC  D007               	goto	L14
 31014  005BAE                     
 31015                           ; BSR set to: 0
 31016                           ;keyboard.c: 307: triad_p = augmented_triad;
 31017                           
 31018                           ; BSR set to: 0
 31019  005BAE  0EDF               	movlw	low _augmented_triad
 31020  005BB0  6F65               	movwf	playTriad@triad_p& (0+255),b
 31021  005BB2  0E02               	movlw	high _augmented_triad
 31022  005BB4  D003               	goto	L14
 31023  005BB6                     
 31024                           ; BSR set to: 0
 31025                           ;keyboard.c: 310: triad_p = diminished_triad;
 31026                           
 31027                           ; BSR set to: 0
 31028  005BB6  0EDC               	movlw	low _diminished_triad
 31029  005BB8  6F65               	movwf	playTriad@triad_p& (0+255),b
 31030  005BBA  0E02               	movlw	high _diminished_triad
 31031  005BBC                     L14:
 31032  005BBC  6F66               	movwf	(playTriad@triad_p+1)& (0+255),b
 31033                           
 31034                           ; BSR set to: 0
 31035                           ;keyboard.c: 314: }
 31036                           
 31037                           ; BSR set to: 0
 31038                           ;keyboard.c: 313: break;
 31039                           
 31040                           ;keyboard.c: 312: default:
 31041                           
 31042                           ;keyboard.c: 311: break;
 31043  005BBE  D00E               	goto	l1450
 31044  005BC0                     l1448:
 31045                           
 31046                           ; BSR set to: 0
 31047  005BC0  0100               	movlb	0	; () banked
 31048  005BC2  51F0               	movf	_which_triad& (0+255),w,b
 31049                           
 31050                           ; Switch size 1, requested type "space"
 31051                           ; Number of cases is 4, Range of values is 0 to 3
 31052                           ; switch strategies available:
 31053                           ; Name         Instructions Cycles
 31054                           ; simple_byte           13     7 (average)
 31055                           ;	Chosen strategy is simple_byte
 31056  005BC4  0A00               	xorlw	0	; case 0
 31057  005BC6  B4D8               	btfsc	status,2,c
 31058  005BC8  D7E9               	goto	l1449
 31059  005BCA  0A01               	xorlw	1	; case 1
 31060  005BCC  B4D8               	btfsc	status,2,c
 31061  005BCE  D7EB               	goto	l1451
 31062  005BD0  0A03               	xorlw	3	; case 2
 31063  005BD2  B4D8               	btfsc	status,2,c
 31064  005BD4  D7EC               	goto	l1452
 31065  005BD6  0A01               	xorlw	1	; case 3
 31066  005BD8  B4D8               	btfsc	status,2,c
 31067  005BDA  D7ED               	goto	l1453
 31068  005BDC                     l1450:
 31069                           
 31070                           ; BSR set to: 0
 31071                           ;keyboard.c: 326: if(ARPEGGIO_ON == 0){
 31072  005BDC  B604               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 31073  005BDE  D030               	goto	u45480
 31074                           
 31075                           ; BSR set to: 0
 31076                           ;keyboard.c: 327: for(unsigned char i = 0; i<3; i++){
 31077  005BE0  0E00               	movlw	0
 31078  005BE2  6F67               	movwf	playTriad@i& (0+255),b
 31079  005BE4                     l26356:
 31080                           
 31081                           ; BSR set to: 0
 31082  005BE4  0E02               	movlw	2
 31083  005BE6  6567               	cpfsgt	playTriad@i& (0+255),b
 31084  005BE8  D001               	goto	l1456
 31085  005BEA  D02A               	goto	u45480
 31086  005BEC                     l1456:
 31087                           
 31088                           ; BSR set to: 0
 31089                           ;keyboard.c: 328: if(ON_OFF == 1) {noteOn(channel,triad_p[i] + pitch,velocity);}
 31090  005BEC  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31091  005BEE  D011               	goto	l1458
 31092                           
 31093                           ; BSR set to: 0
 31094  005BF0  5051               	movf	_velocity,w,c
 31095  005BF2  6EE6               	movwf	postinc1,c
 31096  005BF4  5167               	movf	playTriad@i& (0+255),w,b
 31097  005BF6  0D01               	mullw	1
 31098  005BF8  50F3               	movf	prodl,w,c
 31099  005BFA  2565               	addwf	playTriad@triad_p& (0+255),w,b
 31100  005BFC  6ED9               	movwf	fsr2l,c
 31101  005BFE  50F4               	movf	prodh,w,c
 31102  005C00  2166               	addwfc	(playTriad@triad_p+1)& (0+255),w,b
 31103  005C02  6EDA               	movwf	fsr2h,c
 31104  005C04  50DF               	movf	indf2,w,c
 31105  005C06  2569               	addwf	playTriad@pitch& (0+255),w,b
 31106  005C08  6EE6               	movwf	postinc1,c
 31107  005C0A  503E               	movf	_channel,w,c
 31108  005C0C  6EE6               	movwf	postinc1,c
 31109  005C0E  EC95  F045         	call	_noteOn	;wreg free
 31110  005C12                     l1458:
 31111                           
 31112                           ;keyboard.c: 329: if(ON_OFF == 0) {noteOff(channel,triad_p[i] + pitch,velocity);}
 31113  005C12  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31114  005C14  D012               	goto	l1459
 31115  005C16  5051               	movf	_velocity,w,c
 31116  005C18  6EE6               	movwf	postinc1,c
 31117  005C1A  0100               	movlb	0	; () banked
 31118  005C1C  5167               	movf	playTriad@i& (0+255),w,b
 31119  005C1E  0D01               	mullw	1
 31120  005C20  50F3               	movf	prodl,w,c
 31121  005C22  2565               	addwf	playTriad@triad_p& (0+255),w,b
 31122  005C24  6ED9               	movwf	fsr2l,c
 31123  005C26  50F4               	movf	prodh,w,c
 31124  005C28  2166               	addwfc	(playTriad@triad_p+1)& (0+255),w,b
 31125  005C2A  6EDA               	movwf	fsr2h,c
 31126  005C2C  50DF               	movf	indf2,w,c
 31127  005C2E  2569               	addwf	playTriad@pitch& (0+255),w,b
 31128  005C30  6EE6               	movwf	postinc1,c
 31129  005C32  503E               	movf	_channel,w,c
 31130  005C34  6EE6               	movwf	postinc1,c
 31131  005C36  EC4A  F04A         	call	_noteOff	;wreg free
 31132  005C3A                     l1459:
 31133  005C3A  0100               	movlb	0	; () banked
 31134  005C3C  2B67               	incf	playTriad@i& (0+255),f,b
 31135  005C3E  D7D2               	goto	l26356
 31136  005C40                     u45480:
 31137                           
 31138                           ; BSR set to: 0
 31139                           ;keyboard.c: 330: }
 31140                           ;keyboard.c: 331: }
 31141                           ;keyboard.c: 334: if(ARPEGGIO_ON == 1){
 31142                           
 31143                           ; BSR set to: 0
 31144  005C40  A604               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 31145  005C42  0012               	return	
 31146                           
 31147                           ; BSR set to: 0
 31148                           ;keyboard.c: 335: if(ON_OFF == 1) {
 31149  005C44  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31150  005C46  D034               	goto	l1461
 31151                           
 31152                           ; BSR set to: 0
 31153                           ;keyboard.c: 337: TMR0ON = 0;
 31154  005C48  9ED5               	bcf	4053,7,c	;volatile
 31155                           
 31156                           ;keyboard.c: 340: parallel = pitch;
 31157  005C4A  C069  F030         	movff	playTriad@pitch,_parallel
 31158                           
 31159                           ; BSR set to: 0
 31160                           ;keyboard.c: 343: if(NUM_NOTES_PRESSED > 0){
 31161  005C4E  502F               	movf	_NUM_NOTES_PRESSED,w,c
 31162  005C50  B4D8               	btfsc	status,2,c
 31163  005C52  D00A               	goto	l1462
 31164                           
 31165                           ; BSR set to: 0
 31166                           ;keyboard.c: 344: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 31167  005C54  0E00               	movlw	0
 31168  005C56  B203               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 31169  005C58  0E01               	movlw	1
 31170  005C5A  ECEF  F04B         	call	_wait_one_pulse
 31171                           
 31172                           ;keyboard.c: 345: if(note_off_was_sent == 0) {key_press_release_note_off();}
 31173  005C5E  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 31174  005C60  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 31175                           
 31176                           ;keyboard.c: 346: TIMER_OVERFLOWS = 0;
 31177  005C64  0E00               	movlw	0
 31178  005C66  6E2E               	movwf	_TIMER_OVERFLOWS,c
 31179  005C68                     l1462:
 31180                           
 31181                           ;keyboard.c: 347: }
 31182                           ;keyboard.c: 349: for(unsigned char i = 0; i<3; i++){
 31183  005C68  0E00               	movlw	0
 31184  005C6A  0100               	movlb	0	; () banked
 31185  005C6C  6F68               	movwf	playTriad@i_1691& (0+255),b
 31186  005C6E                     l26386:
 31187                           
 31188                           ; BSR set to: 0
 31189  005C6E  0E02               	movlw	2
 31190  005C70  6568               	cpfsgt	playTriad@i_1691& (0+255),b
 31191  005C72  D001               	goto	l1464
 31192  005C74  D015               	goto	u45540
 31193  005C76                     l1464:
 31194                           
 31195                           ; BSR set to: 0
 31196                           ;keyboard.c: 350: ARPEGGIO[i] = triad_p[i] + pitch;
 31197                           
 31198                           ; BSR set to: 0
 31199  005C76  5168               	movf	playTriad@i_1691& (0+255),w,b
 31200  005C78  0D01               	mullw	1
 31201  005C7A  0E82               	movlw	low _ARPEGGIO
 31202  005C7C  24F3               	addwf	prodl,w,c
 31203  005C7E  6ED9               	movwf	fsr2l,c
 31204  005C80  0E01               	movlw	high _ARPEGGIO
 31205  005C82  20F4               	addwfc	prodh,w,c
 31206  005C84  6EDA               	movwf	fsr2h,c
 31207  005C86  5168               	movf	playTriad@i_1691& (0+255),w,b
 31208  005C88  0D01               	mullw	1
 31209  005C8A  50F3               	movf	prodl,w,c
 31210  005C8C  2565               	addwf	playTriad@triad_p& (0+255),w,b
 31211  005C8E  6EE9               	movwf	fsr0l,c
 31212  005C90  50F4               	movf	prodh,w,c
 31213  005C92  2166               	addwfc	(playTriad@triad_p+1)& (0+255),w,b
 31214  005C94  6EEA               	movwf	fsr0h,c
 31215  005C96  50EF               	movf	indf0,w,c
 31216  005C98  2569               	addwf	playTriad@pitch& (0+255),w,b
 31217  005C9A  6EDF               	movwf	indf2,c
 31218                           
 31219                           ; BSR set to: 0
 31220  005C9C  2B68               	incf	playTriad@i_1691& (0+255),f,b
 31221  005C9E  D7E7               	goto	l26386
 31222  005CA0                     u45540:
 31223                           
 31224                           ; BSR set to: 0
 31225                           ;keyboard.c: 351: }
 31226                           ;keyboard.c: 353: NUM_NOTES_PRESSED = 3;
 31227                           
 31228                           ; BSR set to: 0
 31229  005CA0  0E03               	movlw	3
 31230  005CA2  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 31231                           
 31232                           ; BSR set to: 0
 31233                           ;keyboard.c: 357: if(LATCH == 0) {latch_was_pressed = 0;}
 31234  005CA4  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 31235                           
 31236                           ; BSR set to: 0
 31237  005CA6  9A03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31238                           
 31239                           ; BSR set to: 0
 31240                           ;keyboard.c: 359: finish_arpeggio_setup();
 31241                           
 31242                           ; BSR set to: 0
 31243  005CA8  EC84  F04C         	call	_finish_arpeggio_setup	;wreg free
 31244                           
 31245                           ;keyboard.c: 360: TMR0ON = 1;
 31246  005CAC  8ED5               	bsf	4053,7,c	;volatile
 31247                           
 31248                           ;keyboard.c: 362: return;
 31249  005CAE  0012               	return	
 31250  005CB0                     l1461:
 31251                           
 31252                           ; BSR set to: 0
 31253                           ;keyboard.c: 363: }
 31254                           ;keyboard.c: 365: if((ON_OFF == 0) && (LATCH == 0)) {
 31255  005CB0  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31256  005CB2  0012               	return	
 31257                           
 31258                           ; BSR set to: 0
 31259  005CB4  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 31260  005CB6  0012               	return	
 31261                           
 31262                           ; BSR set to: 0
 31263                           ;keyboard.c: 367: if(NUM_NOTES_PRESSED > 0){
 31264  005CB8  502F               	movf	_NUM_NOTES_PRESSED,w,c
 31265  005CBA  B4D8               	btfsc	status,2,c
 31266  005CBC  D00A               	goto	l1469
 31267                           
 31268                           ; BSR set to: 0
 31269                           ;keyboard.c: 368: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 31270  005CBE  0E00               	movlw	0
 31271  005CC0  B003               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 31272  005CC2  0E01               	movlw	1
 31273  005CC4  ECEF  F04B         	call	_wait_one_pulse
 31274                           
 31275                           ;keyboard.c: 369: if(note_off_was_sent == 0) {key_press_release_note_off();}
 31276  005CC8  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 31277  005CCA  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 31278                           
 31279                           ;keyboard.c: 370: TIMER_OVERFLOWS = 0;
 31280  005CCE  0E00               	movlw	0
 31281  005CD0  6E2E               	movwf	_TIMER_OVERFLOWS,c
 31282  005CD2                     l1469:
 31283                           
 31284                           ;keyboard.c: 371: }
 31285                           ;keyboard.c: 374: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 31286  005CD2  C030  F061         	movff	_parallel,??_playTriad
 31287  005CD6  0100               	movlb	0	; () banked
 31288  005CD8  6B62               	clrf	(??_playTriad+1)& (0+255),b
 31289  005CDA  BF61               	btfsc	??_playTriad& (0+255),7,b
 31290  005CDC  0762               	decf	(??_playTriad+1)& (0+255),f,b
 31291  005CDE  5169               	movf	playTriad@pitch& (0+255),w,b
 31292  005CE0  6F63               	movwf	(??_playTriad+2)& (0+255),b
 31293  005CE2  6B64               	clrf	(??_playTriad+3)& (0+255),b
 31294  005CE4  5161               	movf	??_playTriad& (0+255),w,b
 31295  005CE6  1963               	xorwf	(??_playTriad+2)& (0+255),w,b
 31296  005CE8  E106               	bnz	l26424
 31297  005CEA  5162               	movf	(??_playTriad+1)& (0+255),w,b
 31298  005CEC  1964               	xorwf	(??_playTriad+3)& (0+255),w,b
 31299  005CEE  A4D8               	btfss	status,2,c
 31300  005CF0  D002               	goto	l1471
 31301                           
 31302                           ; BSR set to: 0
 31303  005CF2  0E00               	movlw	0
 31304  005CF4  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 31305  005CF6                     l1471:
 31306  005CF6                     l26424:
 31307                           
 31308                           ; BSR set to: 0
 31309                           ;keyboard.c: 379: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 31310  005CF6  BC03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 31311                           
 31312                           ; BSR set to: 0
 31313  005CF8  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31314  005CFA  D001               	goto	l1472
 31315                           
 31316                           ; BSR set to: 0
 31317                           ;keyboard.c: 380: LATCH = 1;
 31318  005CFC  8004               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 31319  005CFE                     l1472:
 31320                           
 31321                           ; BSR set to: 0
 31322                           ;keyboard.c: 381: }
 31323                           ;keyboard.c: 385: if(((UN_LATCH_MODE == 0) || (UN_LATCH_MODE == 1)) && (latch_was_presse
      +                          d == 1)){
 31324  005CFE  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 31325  005D00  D002               	goto	u45640
 31326                           
 31327                           ; BSR set to: 0
 31328  005D02  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 31329  005D04  D006               	goto	l1473
 31330  005D06                     u45640:
 31331                           
 31332                           ; BSR set to: 0
 31333  005D06  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31334  005D08  D004               	goto	l1473
 31335                           
 31336                           ; BSR set to: 0
 31337                           ;keyboard.c: 386: NUM_NOTES_PRESSED = 0;
 31338  005D0A  0E00               	movlw	0
 31339  005D0C  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 31340                           
 31341                           ;keyboard.c: 387: ARRAY_INDEX = 0;
 31342  005D0E  0E00               	movlw	0
 31343  005D10  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 31344  005D12                     l1473:
 31345                           
 31346                           ; BSR set to: 0
 31347                           ;keyboard.c: 388: }
 31348                           ;keyboard.c: 390: finish_arpeggio_setup();
 31349                           
 31350                           ; BSR set to: 0
 31351  005D12  EC84  F04C         	call	_finish_arpeggio_setup	;wreg free
 31352                           
 31353                           ;keyboard.c: 391: TMR0ON = 1;
 31354  005D16  8ED5               	bsf	4053,7,c	;volatile
 31355                           
 31356                           ;keyboard.c: 392: return;
 31357  005D18  0012               	return	
 31358  005D1A                     __end_of_playTriad:
 31359                           	opt stack 0
 31360                           tblptru	equ	0xFF8
 31361                           tblptrh	equ	0xFF7
 31362                           tblptrl	equ	0xFF6
 31363                           tablat	equ	0xFF5
 31364                           prodh	equ	0xFF4
 31365                           prodl	equ	0xFF3
 31366                           intcon	equ	0xFF2
 31367                           intcon2	equ	0xFF1
 31368                           indf0	equ	0xFEF
 31369                           postinc0	equ	0xFEE
 31370                           fsr0h	equ	0xFEA
 31371                           fsr0l	equ	0xFE9
 31372                           wreg	equ	0xFE8
 31373                           postinc1	equ	0xFE6
 31374                           plusw1	equ	0xFE3
 31375                           fsr1h	equ	0xFE2
 31376                           fsr1l	equ	0xFE1
 31377                           indf2	equ	0xFDF
 31378                           postinc2	equ	0xFDE
 31379                           postdec2	equ	0xFDD
 31380                           plusw2	equ	0xFDB
 31381                           fsr2h	equ	0xFDA
 31382                           fsr2l	equ	0xFD9
 31383                           status	equ	0xFD8
 31384                           
 31385 ;; *************** function _playSeventh *****************
 31386 ;; Defined at:
 31387 ;;		line 397 in file "keyboard.c"
 31388 ;; Parameters:    Size  Location     Type
 31389 ;;  pitch           1    wreg     unsigned char 
 31390 ;; Auto vars:     Size  Location     Type
 31391 ;;  pitch           1    9[BANK0 ] unsigned char 
 31392 ;;  i               1    8[BANK0 ] unsigned char 
 31393 ;;  i               1    7[BANK0 ] unsigned char 
 31394 ;;  seventh_p       2    5[BANK0 ] PTR unsigned char 
 31395 ;;		 -> diminished_7th(4), half_diminished_7th(4), minor_7th(4), major_7th(4), 
 31396 ;;		 -> dominant_7th(4), 
 31397 ;; Return value:  Size  Location     Type
 31398 ;;                  1    wreg      void 
 31399 ;; Registers used:
 31400 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, prodl, prodh, cstack
 31401 ;; Tracked objects:
 31402 ;;		On entry : 0/0
 31403 ;;		On exit  : 0/0
 31404 ;;		Unchanged: 0/0
 31405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 31406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31407 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31408 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31409 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31410 ;;Total ram usage:        9 bytes
 31411 ;; Hardware stack levels used:    1
 31412 ;; Hardware stack levels required when called:   10
 31413 ;; This function calls:
 31414 ;;		_finish_arpeggio_setup
 31415 ;;		_key_press_release_note_off
 31416 ;;		_noteOff
 31417 ;;		_noteOn
 31418 ;;		_wait_one_pulse
 31419 ;; This function is called by:
 31420 ;;		_playThisNote
 31421 ;; This function uses a non-reentrant model
 31422 ;;
 31423                           
 31424                           	psect	text80
 31425  005874                     __ptext80:
 31426                           	opt stack 0
 31427  005874                     _playSeventh:
 31428                           	opt stack 13
 31429                           
 31430                           ;incstack = 0
 31431                           ;playSeventh@pitch stored from wreg
 31432  005874  0100               	movlb	0	; () banked
 31433  005876  6F69               	movwf	playSeventh@pitch& (0+255),b
 31434                           
 31435                           ;keyboard.c: 399: unsigned char *seventh_p;
 31436                           ;keyboard.c: 402: switch (which_seventh) {
 31437  005878  D016               	goto	l1478
 31438  00587A                     
 31439                           ;keyboard.c: 404: seventh_p = dominant_7th;
 31440  00587A  0ED8               	movlw	low _dominant_7th
 31441  00587C  0100               	movlb	0	; () banked
 31442  00587E  6F65               	movwf	playSeventh@seventh_p& (0+255),b
 31443  005880  0E02               	movlw	high _dominant_7th
 31444  005882  D00F               	goto	L18
 31445  005884                     
 31446                           ; BSR set to: 0
 31447                           ;keyboard.c: 407: seventh_p = major_7th;
 31448                           
 31449                           ; BSR set to: 0
 31450  005884  0ED4               	movlw	low _major_7th
 31451  005886  6F65               	movwf	playSeventh@seventh_p& (0+255),b
 31452  005888  0E02               	movlw	high _major_7th
 31453  00588A  D00B               	goto	L18
 31454  00588C                     
 31455                           ; BSR set to: 0
 31456                           ;keyboard.c: 410: seventh_p = minor_7th;
 31457                           
 31458                           ; BSR set to: 0
 31459  00588C  0ED0               	movlw	low _minor_7th
 31460  00588E  6F65               	movwf	playSeventh@seventh_p& (0+255),b
 31461  005890  0E02               	movlw	high _minor_7th
 31462  005892  D007               	goto	L18
 31463  005894                     
 31464                           ; BSR set to: 0
 31465                           ;keyboard.c: 413: seventh_p = half_diminished_7th;
 31466                           
 31467                           ; BSR set to: 0
 31468  005894  0ECC               	movlw	low _half_diminished_7th
 31469  005896  6F65               	movwf	playSeventh@seventh_p& (0+255),b
 31470  005898  0E02               	movlw	high _half_diminished_7th
 31471  00589A  D003               	goto	L18
 31472  00589C                     
 31473                           ; BSR set to: 0
 31474                           ;keyboard.c: 416: seventh_p = diminished_7th;
 31475                           
 31476                           ; BSR set to: 0
 31477  00589C  0EC8               	movlw	low _diminished_7th
 31478  00589E  6F65               	movwf	playSeventh@seventh_p& (0+255),b
 31479  0058A0  0E02               	movlw	high _diminished_7th
 31480  0058A2                     L18:
 31481  0058A2  6F66               	movwf	(playSeventh@seventh_p+1)& (0+255),b
 31482                           
 31483                           ; BSR set to: 0
 31484                           ;keyboard.c: 420: }
 31485                           
 31486                           ; BSR set to: 0
 31487                           ;keyboard.c: 419: break;
 31488                           
 31489                           ;keyboard.c: 418: default:
 31490                           
 31491                           ;keyboard.c: 417: break;
 31492  0058A4  D011               	goto	l1480
 31493  0058A6                     l1478:
 31494                           
 31495                           ; BSR set to: 0
 31496  0058A6  0100               	movlb	0	; () banked
 31497  0058A8  51EF               	movf	_which_seventh& (0+255),w,b
 31498                           
 31499                           ; Switch size 1, requested type "space"
 31500                           ; Number of cases is 5, Range of values is 0 to 4
 31501                           ; switch strategies available:
 31502                           ; Name         Instructions Cycles
 31503                           ; simple_byte           16     9 (average)
 31504                           ;	Chosen strategy is simple_byte
 31505  0058AA  0A00               	xorlw	0	; case 0
 31506  0058AC  B4D8               	btfsc	status,2,c
 31507  0058AE  D7E5               	goto	l1479
 31508  0058B0  0A01               	xorlw	1	; case 1
 31509  0058B2  B4D8               	btfsc	status,2,c
 31510  0058B4  D7E7               	goto	l1481
 31511  0058B6  0A03               	xorlw	3	; case 2
 31512  0058B8  B4D8               	btfsc	status,2,c
 31513  0058BA  D7E8               	goto	l1482
 31514  0058BC  0A01               	xorlw	1	; case 3
 31515  0058BE  B4D8               	btfsc	status,2,c
 31516  0058C0  D7E9               	goto	l1483
 31517  0058C2  0A07               	xorlw	7	; case 4
 31518  0058C4  B4D8               	btfsc	status,2,c
 31519  0058C6  D7EA               	goto	l1484
 31520  0058C8                     l1480:
 31521                           
 31522                           ; BSR set to: 0
 31523                           ;keyboard.c: 423: if(ARPEGGIO_ON == 0){
 31524  0058C8  B604               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 31525  0058CA  D030               	goto	u45700
 31526                           
 31527                           ; BSR set to: 0
 31528                           ;keyboard.c: 424: for(unsigned char i = 0; i<4; i++){
 31529  0058CC  0E00               	movlw	0
 31530  0058CE  6F67               	movwf	playSeventh@i& (0+255),b
 31531  0058D0                     l26458:
 31532                           
 31533                           ; BSR set to: 0
 31534  0058D0  0E03               	movlw	3
 31535  0058D2  6567               	cpfsgt	playSeventh@i& (0+255),b
 31536  0058D4  D001               	goto	l1487
 31537  0058D6  D02A               	goto	u45700
 31538  0058D8                     l1487:
 31539                           
 31540                           ; BSR set to: 0
 31541                           ;keyboard.c: 425: if(ON_OFF == 1) {noteOn(channel,seventh_p[i] + pitch,velocity);}
 31542  0058D8  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31543  0058DA  D011               	goto	l1489
 31544                           
 31545                           ; BSR set to: 0
 31546  0058DC  5051               	movf	_velocity,w,c
 31547  0058DE  6EE6               	movwf	postinc1,c
 31548  0058E0  5167               	movf	playSeventh@i& (0+255),w,b
 31549  0058E2  0D01               	mullw	1
 31550  0058E4  50F3               	movf	prodl,w,c
 31551  0058E6  2565               	addwf	playSeventh@seventh_p& (0+255),w,b
 31552  0058E8  6ED9               	movwf	fsr2l,c
 31553  0058EA  50F4               	movf	prodh,w,c
 31554  0058EC  2166               	addwfc	(playSeventh@seventh_p+1)& (0+255),w,b
 31555  0058EE  6EDA               	movwf	fsr2h,c
 31556  0058F0  50DF               	movf	indf2,w,c
 31557  0058F2  2569               	addwf	playSeventh@pitch& (0+255),w,b
 31558  0058F4  6EE6               	movwf	postinc1,c
 31559  0058F6  503E               	movf	_channel,w,c
 31560  0058F8  6EE6               	movwf	postinc1,c
 31561  0058FA  EC95  F045         	call	_noteOn	;wreg free
 31562  0058FE                     l1489:
 31563                           
 31564                           ;keyboard.c: 426: if(ON_OFF == 0) {noteOff(channel,seventh_p[i] + pitch,velocity);}
 31565  0058FE  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31566  005900  D012               	goto	l1490
 31567  005902  5051               	movf	_velocity,w,c
 31568  005904  6EE6               	movwf	postinc1,c
 31569  005906  0100               	movlb	0	; () banked
 31570  005908  5167               	movf	playSeventh@i& (0+255),w,b
 31571  00590A  0D01               	mullw	1
 31572  00590C  50F3               	movf	prodl,w,c
 31573  00590E  2565               	addwf	playSeventh@seventh_p& (0+255),w,b
 31574  005910  6ED9               	movwf	fsr2l,c
 31575  005912  50F4               	movf	prodh,w,c
 31576  005914  2166               	addwfc	(playSeventh@seventh_p+1)& (0+255),w,b
 31577  005916  6EDA               	movwf	fsr2h,c
 31578  005918  50DF               	movf	indf2,w,c
 31579  00591A  2569               	addwf	playSeventh@pitch& (0+255),w,b
 31580  00591C  6EE6               	movwf	postinc1,c
 31581  00591E  503E               	movf	_channel,w,c
 31582  005920  6EE6               	movwf	postinc1,c
 31583  005922  EC4A  F04A         	call	_noteOff	;wreg free
 31584  005926                     l1490:
 31585  005926  0100               	movlb	0	; () banked
 31586  005928  2B67               	incf	playSeventh@i& (0+255),f,b
 31587  00592A  D7D2               	goto	l26458
 31588  00592C                     u45700:
 31589                           
 31590                           ; BSR set to: 0
 31591                           ;keyboard.c: 427: }
 31592                           ;keyboard.c: 428: }
 31593                           ;keyboard.c: 431: if(ARPEGGIO_ON == 1){
 31594                           
 31595                           ; BSR set to: 0
 31596  00592C  A604               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 31597  00592E  0012               	return	
 31598                           
 31599                           ; BSR set to: 0
 31600                           ;keyboard.c: 433: if(ON_OFF == 1) {
 31601  005930  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31602  005932  D034               	goto	l1492
 31603                           
 31604                           ; BSR set to: 0
 31605                           ;keyboard.c: 435: TMR0ON = 0;
 31606  005934  9ED5               	bcf	4053,7,c	;volatile
 31607                           
 31608                           ;keyboard.c: 438: parallel = pitch;
 31609  005936  C069  F030         	movff	playSeventh@pitch,_parallel
 31610                           
 31611                           ; BSR set to: 0
 31612                           ;keyboard.c: 441: if(NUM_NOTES_PRESSED > 0){
 31613  00593A  502F               	movf	_NUM_NOTES_PRESSED,w,c
 31614  00593C  B4D8               	btfsc	status,2,c
 31615  00593E  D00A               	goto	l1493
 31616                           
 31617                           ; BSR set to: 0
 31618                           ;keyboard.c: 442: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 31619  005940  0E00               	movlw	0
 31620  005942  B203               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 31621  005944  0E01               	movlw	1
 31622  005946  ECEF  F04B         	call	_wait_one_pulse
 31623                           
 31624                           ;keyboard.c: 443: if(note_off_was_sent == 0) {key_press_release_note_off();}
 31625  00594A  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 31626  00594C  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 31627                           
 31628                           ;keyboard.c: 444: TIMER_OVERFLOWS = 0;
 31629  005950  0E00               	movlw	0
 31630  005952  6E2E               	movwf	_TIMER_OVERFLOWS,c
 31631  005954                     l1493:
 31632                           
 31633                           ;keyboard.c: 445: }
 31634                           ;keyboard.c: 447: for(unsigned char i = 0; i<4; i++){
 31635  005954  0E00               	movlw	0
 31636  005956  0100               	movlb	0	; () banked
 31637  005958  6F68               	movwf	playSeventh@i_1696& (0+255),b
 31638  00595A                     l26488:
 31639                           
 31640                           ; BSR set to: 0
 31641  00595A  0E03               	movlw	3
 31642  00595C  6568               	cpfsgt	playSeventh@i_1696& (0+255),b
 31643  00595E  D001               	goto	l1495
 31644  005960  D015               	goto	u45760
 31645  005962                     l1495:
 31646                           
 31647                           ; BSR set to: 0
 31648                           ;keyboard.c: 448: ARPEGGIO[i] = seventh_p[i] + pitch;
 31649                           
 31650                           ; BSR set to: 0
 31651  005962  5168               	movf	playSeventh@i_1696& (0+255),w,b
 31652  005964  0D01               	mullw	1
 31653  005966  0E82               	movlw	low _ARPEGGIO
 31654  005968  24F3               	addwf	prodl,w,c
 31655  00596A  6ED9               	movwf	fsr2l,c
 31656  00596C  0E01               	movlw	high _ARPEGGIO
 31657  00596E  20F4               	addwfc	prodh,w,c
 31658  005970  6EDA               	movwf	fsr2h,c
 31659  005972  5168               	movf	playSeventh@i_1696& (0+255),w,b
 31660  005974  0D01               	mullw	1
 31661  005976  50F3               	movf	prodl,w,c
 31662  005978  2565               	addwf	playSeventh@seventh_p& (0+255),w,b
 31663  00597A  6EE9               	movwf	fsr0l,c
 31664  00597C  50F4               	movf	prodh,w,c
 31665  00597E  2166               	addwfc	(playSeventh@seventh_p+1)& (0+255),w,b
 31666  005980  6EEA               	movwf	fsr0h,c
 31667  005982  50EF               	movf	indf0,w,c
 31668  005984  2569               	addwf	playSeventh@pitch& (0+255),w,b
 31669  005986  6EDF               	movwf	indf2,c
 31670                           
 31671                           ; BSR set to: 0
 31672  005988  2B68               	incf	playSeventh@i_1696& (0+255),f,b
 31673  00598A  D7E7               	goto	l26488
 31674  00598C                     u45760:
 31675                           
 31676                           ; BSR set to: 0
 31677                           ;keyboard.c: 449: }
 31678                           ;keyboard.c: 451: NUM_NOTES_PRESSED = 4;
 31679                           
 31680                           ; BSR set to: 0
 31681  00598C  0E04               	movlw	4
 31682  00598E  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 31683                           
 31684                           ; BSR set to: 0
 31685                           ;keyboard.c: 454: if(LATCH == 0) {latch_was_pressed = 0;}
 31686  005990  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 31687                           
 31688                           ; BSR set to: 0
 31689  005992  9A03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31690                           
 31691                           ; BSR set to: 0
 31692                           ;keyboard.c: 456: finish_arpeggio_setup();
 31693                           
 31694                           ; BSR set to: 0
 31695  005994  EC84  F04C         	call	_finish_arpeggio_setup	;wreg free
 31696                           
 31697                           ;keyboard.c: 457: TMR0ON = 1;
 31698  005998  8ED5               	bsf	4053,7,c	;volatile
 31699                           
 31700                           ;keyboard.c: 459: return;
 31701  00599A  0012               	return	
 31702  00599C                     l1492:
 31703                           
 31704                           ; BSR set to: 0
 31705                           ;keyboard.c: 460: }
 31706                           ;keyboard.c: 462: if((ON_OFF == 0) && (LATCH == 0)) {
 31707  00599C  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31708  00599E  0012               	return	
 31709                           
 31710                           ; BSR set to: 0
 31711  0059A0  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 31712  0059A2  0012               	return	
 31713                           
 31714                           ; BSR set to: 0
 31715                           ;keyboard.c: 464: if(NUM_NOTES_PRESSED > 0){
 31716  0059A4  502F               	movf	_NUM_NOTES_PRESSED,w,c
 31717  0059A6  B4D8               	btfsc	status,2,c
 31718  0059A8  D00A               	goto	l1500
 31719                           
 31720                           ; BSR set to: 0
 31721                           ;keyboard.c: 465: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 31722  0059AA  0E00               	movlw	0
 31723  0059AC  B003               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 31724  0059AE  0E01               	movlw	1
 31725  0059B0  ECEF  F04B         	call	_wait_one_pulse
 31726                           
 31727                           ;keyboard.c: 466: if(note_off_was_sent == 0) {key_press_release_note_off();}
 31728  0059B4  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 31729  0059B6  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 31730                           
 31731                           ;keyboard.c: 467: TIMER_OVERFLOWS = 0;
 31732  0059BA  0E00               	movlw	0
 31733  0059BC  6E2E               	movwf	_TIMER_OVERFLOWS,c
 31734  0059BE                     l1500:
 31735                           
 31736                           ;keyboard.c: 468: }
 31737                           ;keyboard.c: 471: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 31738  0059BE  C030  F061         	movff	_parallel,??_playSeventh
 31739  0059C2  0100               	movlb	0	; () banked
 31740  0059C4  6B62               	clrf	(??_playSeventh+1)& (0+255),b
 31741  0059C6  BF61               	btfsc	??_playSeventh& (0+255),7,b
 31742  0059C8  0762               	decf	(??_playSeventh+1)& (0+255),f,b
 31743  0059CA  5169               	movf	playSeventh@pitch& (0+255),w,b
 31744  0059CC  6F63               	movwf	(??_playSeventh+2)& (0+255),b
 31745  0059CE  6B64               	clrf	(??_playSeventh+3)& (0+255),b
 31746  0059D0  5161               	movf	??_playSeventh& (0+255),w,b
 31747  0059D2  1963               	xorwf	(??_playSeventh+2)& (0+255),w,b
 31748  0059D4  E106               	bnz	l26526
 31749  0059D6  5162               	movf	(??_playSeventh+1)& (0+255),w,b
 31750  0059D8  1964               	xorwf	(??_playSeventh+3)& (0+255),w,b
 31751  0059DA  A4D8               	btfss	status,2,c
 31752  0059DC  D002               	goto	l1502
 31753                           
 31754                           ; BSR set to: 0
 31755  0059DE  0E00               	movlw	0
 31756  0059E0  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 31757  0059E2                     l1502:
 31758  0059E2                     l26526:
 31759                           
 31760                           ; BSR set to: 0
 31761                           ;keyboard.c: 476: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 31762  0059E2  BC03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 31763                           
 31764                           ; BSR set to: 0
 31765  0059E4  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31766  0059E6  D001               	goto	l1503
 31767                           
 31768                           ; BSR set to: 0
 31769                           ;keyboard.c: 477: LATCH = 1;
 31770  0059E8  8004               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 31771  0059EA                     l1503:
 31772                           
 31773                           ; BSR set to: 0
 31774                           ;keyboard.c: 478: }
 31775                           ;keyboard.c: 482: if(((UN_LATCH_MODE == 0) || (UN_LATCH_MODE == 1)) && (latch_was_presse
      +                          d == 1)){
 31776  0059EA  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 31777  0059EC  D002               	goto	u45860
 31778                           
 31779                           ; BSR set to: 0
 31780  0059EE  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 31781  0059F0  D006               	goto	l1504
 31782  0059F2                     u45860:
 31783                           
 31784                           ; BSR set to: 0
 31785  0059F2  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31786  0059F4  D004               	goto	l1504
 31787                           
 31788                           ; BSR set to: 0
 31789                           ;keyboard.c: 483: NUM_NOTES_PRESSED = 0;
 31790  0059F6  0E00               	movlw	0
 31791  0059F8  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 31792                           
 31793                           ;keyboard.c: 484: ARRAY_INDEX = 0;
 31794  0059FA  0E00               	movlw	0
 31795  0059FC  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 31796  0059FE                     l1504:
 31797                           
 31798                           ; BSR set to: 0
 31799                           ;keyboard.c: 485: }
 31800                           ;keyboard.c: 487: finish_arpeggio_setup();
 31801                           
 31802                           ; BSR set to: 0
 31803  0059FE  EC84  F04C         	call	_finish_arpeggio_setup	;wreg free
 31804                           
 31805                           ;keyboard.c: 488: TMR0ON = 1;
 31806  005A02  8ED5               	bsf	4053,7,c	;volatile
 31807                           
 31808                           ;keyboard.c: 490: return;
 31809  005A04  0012               	return	
 31810  005A06                     __end_of_playSeventh:
 31811                           	opt stack 0
 31812                           tblptru	equ	0xFF8
 31813                           tblptrh	equ	0xFF7
 31814                           tblptrl	equ	0xFF6
 31815                           tablat	equ	0xFF5
 31816                           prodh	equ	0xFF4
 31817                           prodl	equ	0xFF3
 31818                           intcon	equ	0xFF2
 31819                           intcon2	equ	0xFF1
 31820                           indf0	equ	0xFEF
 31821                           postinc0	equ	0xFEE
 31822                           fsr0h	equ	0xFEA
 31823                           fsr0l	equ	0xFE9
 31824                           wreg	equ	0xFE8
 31825                           postinc1	equ	0xFE6
 31826                           plusw1	equ	0xFE3
 31827                           fsr1h	equ	0xFE2
 31828                           fsr1l	equ	0xFE1
 31829                           indf2	equ	0xFDF
 31830                           postinc2	equ	0xFDE
 31831                           postdec2	equ	0xFDD
 31832                           plusw2	equ	0xFDB
 31833                           fsr2h	equ	0xFDA
 31834                           fsr2l	equ	0xFD9
 31835                           status	equ	0xFD8
 31836                           
 31837 ;; *************** function _noteOn *****************
 31838 ;; Defined at:
 31839 ;;		line 123 in file "midi.c"
 31840 ;; Parameters:    Size  Location     Type
 31841 ;;  channel         1  [STACK] unsigned char 
 31842 ;;  pitch           1  [STACK] unsigned char 
 31843 ;;  velocity        1  [STACK] unsigned char 
 31844 ;; Auto vars:     Size  Location     Type
 31845 ;;		None
 31846 ;; Return value:  Size  Location     Type
 31847 ;;                  1  [STACK] void 
 31848 ;; Registers used:
 31849 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh
 31850 ;; Tracked objects:
 31851 ;;		On entry : 0/0
 31852 ;;		On exit  : 0/0
 31853 ;;		Unchanged: 0/0
 31854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 31855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31859 ;;Total ram usage:        0 bytes
 31860 ;; Hardware stack levels used:    1
 31861 ;; Hardware stack levels required when called:    7
 31862 ;; This function calls:
 31863 ;;		_noteOff
 31864 ;;		_sendOut
 31865 ;;		_sendUSB
 31866 ;; This function is called by:
 31867 ;;		_playThisNotePentatonic
 31868 ;;		_playTriad
 31869 ;;		_playSeventh
 31870 ;;		_playThisNote
 31871 ;;		_playThisNote8
 31872 ;;		_playDiatonicTriadMajor
 31873 ;;		_playDiatonicSeventhMajor
 31874 ;;		_playDiatonicTriadMinor
 31875 ;;		_playDiatonicSeventhMinor
 31876 ;;		_playArpeggio
 31877 ;;		_keyboard_all_note
 31878 ;;		_keyboard_eight_note
 31879 ;; This function uses a reentrant model
 31880 ;;
 31881                           
 31882                           	psect	text81
 31883  008B2A                     __ptext81:
 31884                           	opt stack 0
 31885  008B2A                     _noteOn:
 31886                           	opt stack 6
 31887                           
 31888                           ;midi.c: 125: noteNumber = pitch + semitone + ((octave + 1) * 12);
 31889                           ;stkvar	noteOn@pitch @ sp[(0)+-2]
 31890                           
 31891                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
 31892                           ;incstack = 0
 31893  008B2A  0EFE               	movlw	-2
 31894  008B2C  CFE3 F04A          	movff	plusw1,btemp+11
 31895  008B30  5050               	movf	_octave,w,c
 31896  008B32  0D0C               	mullw	12
 31897  008B34  50F3               	movf	prodl,w,c
 31898  008B36  243B               	addwf	_semitone,w,c
 31899  008B38  244A               	addwf	btemp+11,w,c
 31900  008B3A  0F0C               	addlw	12
 31901  008B3C  6E3C               	movwf	_noteNumber,c
 31902                           
 31903                           ;midi.c: 126: statusByte = channel | note_on;
 31904                           ;stkvar	noteOn@channel @ sp[(0)+-1]
 31905  008B3E  0EFF               	movlw	-1
 31906  008B40  50E3               	movf	plusw1,w,c
 31907  008B42  0990               	iorlw	144
 31908  008B44  6E3D               	movwf	_statusByte,c
 31909                           
 31910                           ;midi.c: 129: if (velocity == 0) {noteOff(channel, pitch, velocity);return;}
 31911                           ;stkvar	noteOn@velocity @ sp[(0)+-3]
 31912  008B46  0EFD               	movlw	-3
 31913  008B48  50E3               	movf	plusw1,w,c
 31914  008B4A  A4D8               	btfss	status,2,c
 31915  008B4C  D00C               	goto	l32680
 31916                           
 31917                           ;stkvar	noteOn@velocity @ sp[(0)+-3]
 31918  008B4E  0EFD               	movlw	-3
 31919  008B50  50E3               	movf	plusw1,w,c
 31920  008B52  6EE6               	movwf	postinc1,c
 31921                           
 31922                           ;stkvar	noteOn@pitch @ sp[(-1)+-2]
 31923  008B54  0EFD               	movlw	-3
 31924  008B56  50E3               	movf	plusw1,w,c
 31925  008B58  6EE6               	movwf	postinc1,c
 31926                           
 31927                           ;stkvar	noteOn@channel @ sp[(-2)+-1]
 31928  008B5A  0EFD               	movlw	-3
 31929  008B5C  50E3               	movf	plusw1,w,c
 31930  008B5E  6EE6               	movwf	postinc1,c
 31931  008B60  EC4A  F04A         	call	_noteOff	;wreg free
 31932  008B64  D017               	goto	l484
 31933  008B66                     l32680:
 31934                           
 31935                           ;midi.c: 132: sendUSB(statusByte, noteNumber, velocity);
 31936                           ;stkvar	noteOn@velocity @ sp[(0)+-3]
 31937  008B66  0EFD               	movlw	-3
 31938  008B68  50E3               	movf	plusw1,w,c
 31939  008B6A  6EE6               	movwf	postinc1,c
 31940  008B6C  503C               	movf	_noteNumber,w,c
 31941  008B6E  6EE6               	movwf	postinc1,c
 31942  008B70  503D               	movf	_statusByte,w,c
 31943  008B72  6EE6               	movwf	postinc1,c
 31944  008B74  ECDD  F036         	call	_sendUSB	;wreg free
 31945                           
 31946                           ;midi.c: 135: if(velocity > 0) {
 31947                           ;stkvar	noteOn@velocity @ sp[(0)+-3]
 31948  008B78  0EFD               	movlw	-3
 31949  008B7A  50E3               	movf	plusw1,w,c
 31950  008B7C  B4D8               	btfsc	status,2,c
 31951  008B7E  D009               	goto	l32686
 31952                           
 31953                           ;midi.c: 136: sendOut(statusByte, noteNumber, velocity);
 31954                           ;stkvar	noteOn@velocity @ sp[(0)+-3]
 31955  008B80  0EFD               	movlw	-3
 31956  008B82  50E3               	movf	plusw1,w,c
 31957  008B84  6EE6               	movwf	postinc1,c
 31958  008B86  503C               	movf	_noteNumber,w,c
 31959  008B88  6EE6               	movwf	postinc1,c
 31960  008B8A  503D               	movf	_statusByte,w,c
 31961  008B8C  6EE6               	movwf	postinc1,c
 31962  008B8E  EC66  F036         	call	_sendOut	;wreg free
 31963  008B92                     l32686:
 31964                           
 31965                           ;midi.c: 139: }
 31966                           ;midi.c: 141: note_off_was_sent = 0;
 31967  008B92  9002               	bcf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 31968  008B94                     l484:
 31969                           
 31970                           ; _noteOn: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsiz
      +                          e = 3, vargsize = 0
 31971  008B94  52E5               	movf	postdec1,f,c
 31972  008B96  52E5               	movf	postdec1,f,c
 31973  008B98  52E5               	movf	postdec1,f,c
 31974  008B9A  0012               	return		;funcret
 31975  008B9C                     __end_of_noteOn:
 31976                           	opt stack 0
 31977                           tblptru	equ	0xFF8
 31978                           tblptrh	equ	0xFF7
 31979                           tblptrl	equ	0xFF6
 31980                           tablat	equ	0xFF5
 31981                           prodh	equ	0xFF4
 31982                           prodl	equ	0xFF3
 31983                           intcon	equ	0xFF2
 31984                           intcon2	equ	0xFF1
 31985                           indf0	equ	0xFEF
 31986                           postinc0	equ	0xFEE
 31987                           fsr0h	equ	0xFEA
 31988                           fsr0l	equ	0xFE9
 31989                           wreg	equ	0xFE8
 31990                           postinc1	equ	0xFE6
 31991                           postdec1	equ	0xFE5
 31992                           plusw1	equ	0xFE3
 31993                           fsr1h	equ	0xFE2
 31994                           fsr1l	equ	0xFE1
 31995                           indf2	equ	0xFDF
 31996                           postinc2	equ	0xFDE
 31997                           postdec2	equ	0xFDD
 31998                           plusw2	equ	0xFDB
 31999                           fsr2h	equ	0xFDA
 32000                           fsr2l	equ	0xFD9
 32001                           status	equ	0xFD8
 32002                           
 32003 ;; *************** function _finish_arpeggio_setup *****************
 32004 ;; Defined at:
 32005 ;;		line 98 in file "arpeggio.c"
 32006 ;; Parameters:    Size  Location     Type
 32007 ;;		None
 32008 ;; Auto vars:     Size  Location     Type
 32009 ;;		None
 32010 ;; Return value:  Size  Location     Type
 32011 ;;                  1    wreg      void 
 32012 ;; Registers used:
 32013 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+10, btemp+11, prodl, prodh, cstack
 32014 ;; Tracked objects:
 32015 ;;		On entry : 0/0
 32016 ;;		On exit  : 0/0
 32017 ;;		Unchanged: 0/0
 32018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32023 ;;Total ram usage:        0 bytes
 32024 ;; Hardware stack levels used:    1
 32025 ;; Hardware stack levels required when called:    9
 32026 ;; This function calls:
 32027 ;;		_resetArpeggio
 32028 ;;		_setupArpeggio
 32029 ;; This function is called by:
 32030 ;;		_playThisNotePentatonic
 32031 ;;		_playTriad
 32032 ;;		_playSeventh
 32033 ;;		_playThisNote
 32034 ;;		_playThisNote8
 32035 ;;		_playDiatonicTriadMajor
 32036 ;;		_playDiatonicSeventhMajor
 32037 ;;		_playDiatonicTriadMinor
 32038 ;;		_playDiatonicSeventhMinor
 32039 ;; This function uses a non-reentrant model
 32040 ;;
 32041                           
 32042                           	psect	text82
 32043  009908                     __ptext82:
 32044                           	opt stack 0
 32045  009908                     _finish_arpeggio_setup:
 32046                           	opt stack 14
 32047                           
 32048                           ;arpeggio.c: 101: if((ON_OFF == 1) && (RESET_ON_KEY_PRESS == 1)){resetArpeggio();}
 32049                           
 32050                           ;incstack = 0
 32051  009908  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32052  00990A  A404               	btfss	_RESET_ON_KEY_PRESS/(0+8),_RESET_ON_KEY_PRESS& (0+7),c
 32053  00990C  D002               	goto	l5424
 32054  00990E  EC8F  F04A         	call	_resetArpeggio	;wreg free
 32055  009912                     l5424:
 32056                           
 32057                           ;arpeggio.c: 102: if((ON_OFF == 0) && (RESET_ON_KEY_RELEASE == 1)){resetArpeggio();}
 32058  009912  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32059  009914  A204               	btfss	_RESET_ON_KEY_RELEASE/(0+8),_RESET_ON_KEY_RELEASE& (0+7),c
 32060  009916  D002               	goto	l5425
 32061  009918  EC8F  F04A         	call	_resetArpeggio	;wreg free
 32062  00991C                     l5425:
 32063                           
 32064                           ;arpeggio.c: 105: setupArpeggio();
 32065  00991C  EC5B  F045         	call	_setupArpeggio	;wreg free
 32066                           
 32067                           ;arpeggio.c: 107: TIMER_OVERFLOWS = 0;
 32068  009920  0E00               	movlw	0
 32069  009922  6E2E               	movwf	_TIMER_OVERFLOWS,c
 32070  009924  0012               	return		;funcret
 32071  009926                     __end_of_finish_arpeggio_setup:
 32072                           	opt stack 0
 32073                           tblptru	equ	0xFF8
 32074                           tblptrh	equ	0xFF7
 32075                           tblptrl	equ	0xFF6
 32076                           tablat	equ	0xFF5
 32077                           prodh	equ	0xFF4
 32078                           prodl	equ	0xFF3
 32079                           intcon	equ	0xFF2
 32080                           intcon2	equ	0xFF1
 32081                           indf0	equ	0xFEF
 32082                           postinc0	equ	0xFEE
 32083                           fsr0h	equ	0xFEA
 32084                           fsr0l	equ	0xFE9
 32085                           wreg	equ	0xFE8
 32086                           postinc1	equ	0xFE6
 32087                           postdec1	equ	0xFE5
 32088                           plusw1	equ	0xFE3
 32089                           fsr1h	equ	0xFE2
 32090                           fsr1l	equ	0xFE1
 32091                           indf2	equ	0xFDF
 32092                           postinc2	equ	0xFDE
 32093                           postdec2	equ	0xFDD
 32094                           plusw2	equ	0xFDB
 32095                           fsr2h	equ	0xFDA
 32096                           fsr2l	equ	0xFD9
 32097                           status	equ	0xFD8
 32098                           
 32099 ;; *************** function _setupArpeggio *****************
 32100 ;; Defined at:
 32101 ;;		line 183 in file "arpeggio.c"
 32102 ;; Parameters:    Size  Location     Type
 32103 ;;		None
 32104 ;; Auto vars:     Size  Location     Type
 32105 ;;		None
 32106 ;; Return value:  Size  Location     Type
 32107 ;;                  1    wreg      void 
 32108 ;; Registers used:
 32109 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+10, btemp+11, prodl, prodh, cstack
 32110 ;; Tracked objects:
 32111 ;;		On entry : 0/0
 32112 ;;		On exit  : 0/0
 32113 ;;		Unchanged: 0/0
 32114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32119 ;;Total ram usage:        0 bytes
 32120 ;; Hardware stack levels used:    1
 32121 ;; Hardware stack levels required when called:    8
 32122 ;; This function calls:
 32123 ;;		_copy_array
 32124 ;;		_random_pitches
 32125 ;;		_random_pitches_non_repeating
 32126 ;; This function is called by:
 32127 ;;		_Function_H_4
 32128 ;;		_finish_arpeggio_setup
 32129 ;; This function uses a non-reentrant model
 32130 ;;
 32131                           
 32132                           	psect	text83
 32133  008AB6                     __ptext83:
 32134                           	opt stack 0
 32135  008AB6                     _setupArpeggio:
 32136                           	opt stack 14
 32137                           
 32138                           ;arpeggio.c: 188: if(NUM_NOTES_PRESSED == 0){return;}
 32139                           
 32140                           ;incstack = 0
 32141  008AB6  502F               	movf	_NUM_NOTES_PRESSED,w,c
 32142  008AB8  B4D8               	btfsc	status,2,c
 32143  008ABA  0012               	return	
 32144                           
 32145                           ;arpeggio.c: 191: copy_array();
 32146  008ABC  ECAE  F047         	call	_copy_array	;wreg free
 32147                           
 32148                           ;arpeggio.c: 194: if(ARPEGGIO_TYPE == RANDOM) {random_pitches();}
 32149  008AC0  0E05               	movlw	5
 32150  008AC2  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 32151  008AC4  B4D8               	btfsc	status,2,c
 32152  008AC6  ECCE  F045         	call	_random_pitches	;wreg free
 32153                           
 32154                           ;arpeggio.c: 195: if(ARPEGGIO_TYPE == RANDOM_NON_REPEATING) {random_pitches_non_repeatin
      +                          g();}
 32155  008ACA  0E04               	movlw	4
 32156  008ACC  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 32157  008ACE  B4D8               	btfsc	status,2,c
 32158  008AD0  EC7C  F03C         	call	_random_pitches_non_repeating	;wreg free
 32159                           
 32160                           ;arpeggio.c: 204: if(ARPEGGIO_TYPE == AS_PRESSED){arpeggioPtr = ARPEGGIO;}
 32161  008AD4  0E06               	movlw	6
 32162  008AD6  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 32163  008AD8  A4D8               	btfss	status,2,c
 32164  008ADA  D004               	goto	l5458
 32165  008ADC  0E82               	movlw	low _ARPEGGIO
 32166  008ADE  6E2A               	movwf	_arpeggioPtr,c
 32167  008AE0  0E01               	movlw	high _ARPEGGIO
 32168  008AE2  6E2B               	movwf	_arpeggioPtr+1,c
 32169  008AE4                     l5458:
 32170                           
 32171                           ;arpeggio.c: 205: if(ARPEGGIO_TYPE == UP | ARPEGGIO_TYPE == UP_DOWN){arpeggioPtr = ARPEG
      +                          GIO_SORTED;}
 32172  008AE4  5035               	movf	_ARPEGGIO_TYPE,w,c
 32173  008AE6  B4D8               	btfsc	status,2,c
 32174  008AE8  D004               	goto	u45020
 32175  008AEA  0E02               	movlw	2
 32176  008AEC  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 32177  008AEE  A4D8               	btfss	status,2,c
 32178  008AF0  D004               	goto	l5459
 32179  008AF2                     u45020:
 32180  008AF2  0E78               	movlw	low _ARPEGGIO_SORTED
 32181  008AF4  6E2A               	movwf	_arpeggioPtr,c
 32182  008AF6  0E02               	movlw	high _ARPEGGIO_SORTED
 32183  008AF8  6E2B               	movwf	_arpeggioPtr+1,c
 32184  008AFA                     l5459:
 32185                           
 32186                           ;arpeggio.c: 206: if(ARPEGGIO_TYPE == DOWN | ARPEGGIO_TYPE == DOWN_UP){arpeggioPtr = ARP
      +                          EGGIO_SORTED;}
 32187  008AFA  0435               	decf	_ARPEGGIO_TYPE,w,c
 32188  008AFC  B4D8               	btfsc	status,2,c
 32189  008AFE  D004               	goto	u45040
 32190  008B00  0E03               	movlw	3
 32191  008B02  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 32192  008B04  A4D8               	btfss	status,2,c
 32193  008B06  D004               	goto	l5462
 32194  008B08                     u45040:
 32195  008B08  0E78               	movlw	low _ARPEGGIO_SORTED
 32196  008B0A  6E2A               	movwf	_arpeggioPtr,c
 32197  008B0C  0E02               	movlw	high _ARPEGGIO_SORTED
 32198  008B0E  6E2B               	movwf	_arpeggioPtr+1,c
 32199  008B10                     l5462:
 32200                           
 32201                           ;arpeggio.c: 207: if(ARPEGGIO_TYPE == RANDOM | ARPEGGIO_TYPE == RANDOM_NON_REPEATING){ar
      +                          peggioPtr = ARPEGGIO_RANDOM;}
 32202  008B10  0E05               	movlw	5
 32203  008B12  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 32204  008B14  B4D8               	btfsc	status,2,c
 32205  008B16  D004               	goto	u45060
 32206  008B18  0E04               	movlw	4
 32207  008B1A  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 32208  008B1C  A4D8               	btfss	status,2,c
 32209  008B1E  0012               	return	
 32210  008B20                     u45060:
 32211  008B20  0E68               	movlw	low _ARPEGGIO_RANDOM
 32212  008B22  6E2A               	movwf	_arpeggioPtr,c
 32213  008B24  0E02               	movlw	high _ARPEGGIO_RANDOM
 32214  008B26  6E2B               	movwf	_arpeggioPtr+1,c
 32215  008B28  0012               	return	
 32216  008B2A                     __end_of_setupArpeggio:
 32217                           	opt stack 0
 32218                           tblptru	equ	0xFF8
 32219                           tblptrh	equ	0xFF7
 32220                           tblptrl	equ	0xFF6
 32221                           tablat	equ	0xFF5
 32222                           prodh	equ	0xFF4
 32223                           prodl	equ	0xFF3
 32224                           intcon	equ	0xFF2
 32225                           intcon2	equ	0xFF1
 32226                           indf0	equ	0xFEF
 32227                           postinc0	equ	0xFEE
 32228                           fsr0h	equ	0xFEA
 32229                           fsr0l	equ	0xFE9
 32230                           wreg	equ	0xFE8
 32231                           postinc1	equ	0xFE6
 32232                           postdec1	equ	0xFE5
 32233                           plusw1	equ	0xFE3
 32234                           fsr1h	equ	0xFE2
 32235                           fsr1l	equ	0xFE1
 32236                           indf2	equ	0xFDF
 32237                           postinc2	equ	0xFDE
 32238                           postdec2	equ	0xFDD
 32239                           plusw2	equ	0xFDB
 32240                           fsr2h	equ	0xFDA
 32241                           fsr2l	equ	0xFD9
 32242                           status	equ	0xFD8
 32243                           
 32244 ;; *************** function _random_pitches_non_repeating *****************
 32245 ;; Defined at:
 32246 ;;		line 265 in file "arpeggio.c"
 32247 ;; Parameters:    Size  Location     Type
 32248 ;;		None
 32249 ;; Auto vars:     Size  Location     Type
 32250 ;;  randomIndex     1  [STACK] unsigned char 
 32251 ;;  temp            1  [STACK] unsigned char 
 32252 ;;  i               1  [STACK] unsigned char 
 32253 ;; Return value:  Size  Location     Type
 32254 ;;                  1  [STACK] void 
 32255 ;; Registers used:
 32256 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+10, btemp+11, prodl
 32257 ;; Tracked objects:
 32258 ;;		On entry : 0/0
 32259 ;;		On exit  : 0/0
 32260 ;;		Unchanged: 0/0
 32261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32266 ;;Total ram usage:        0 bytes
 32267 ;; Hardware stack levels used:    1
 32268 ;; Hardware stack levels required when called:    7
 32269 ;; This function calls:
 32270 ;;		___awmod
 32271 ;;		_rand
 32272 ;; This function is called by:
 32273 ;;		_processOctave
 32274 ;;		_setupArpeggio
 32275 ;;		_playArpeggio
 32276 ;; This function uses a reentrant model
 32277 ;;
 32278                           
 32279                           	psect	text84
 32280  0078F8                     __ptext84:
 32281                           	opt stack 0
 32282  0078F8                     _random_pitches_non_repeating:
 32283                           	opt stack 0
 32284                           
 32285                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
 32286  0078F8  52E6               	movf	postinc1,f,c
 32287  0078FA  52E6               	movf	postinc1,f,c
 32288  0078FC  52E6               	movf	postinc1,f,c
 32289                           
 32290                           ;arpeggio.c: 267: if(NUM_NOTES_PRESSED == 0){return;}
 32291                           
 32292                           ;incstack = 0
 32293  0078FE  502F               	movf	_NUM_NOTES_PRESSED,w,c
 32294  007900  B4D8               	btfsc	status,2,c
 32295  007902  D04D               	goto	u59360
 32296                           
 32297                           ;arpeggio.c: 269: for(unsigned char i = 0; i < NUM_NOTES_PRESSED; i++) {
 32298                           ;stkvar	random_pitches_non_repeating@i @ sp[(-3)+2]
 32299  007904  0EFF               	movlw	-1
 32300  007906  6AE3               	clrf	plusw1,c
 32301  007908  D043               	goto	l32718
 32302  00790A                     l32708:
 32303                           
 32304                           ;arpeggio.c: 270: unsigned char temp = ARPEGGIO_RANDOM[i];
 32305                           ;stkvar	random_pitches_non_repeating@i @ sp[(-3)+2]
 32306  00790A  0EFF               	movlw	-1
 32307  00790C  50E3               	movf	plusw1,w,c
 32308  00790E  6E40               	movwf	btemp+1,c
 32309  007910  6A41               	clrf	btemp+2,c
 32310  007912  0E68               	movlw	low _ARPEGGIO_RANDOM
 32311  007914  2440               	addwf	btemp+1,w,c
 32312  007916  6ED9               	movwf	fsr2l,c
 32313  007918  0E02               	movlw	high _ARPEGGIO_RANDOM
 32314  00791A  2041               	addwfc	btemp+2,w,c
 32315  00791C  6EDA               	movwf	fsr2h,c
 32316  00791E  50DF               	movf	indf2,w,c
 32317  007920  6E4A               	movwf	btemp+11,c
 32318                           
 32319                           ;stkvar	random_pitches_non_repeating@temp @ sp[(-3)+1]
 32320  007922  0EFE               	movlw	-2
 32321  007924  C04A  FFE3         	movff	btemp+11,plusw1
 32322                           
 32323                           ;arpeggio.c: 271: unsigned char randomIndex = rand() % NUM_NOTES_PRESSED;
 32324  007928  502F               	movf	_NUM_NOTES_PRESSED,w,c
 32325  00792A  6EE6               	movwf	postinc1,c
 32326  00792C  0E00               	movlw	0
 32327  00792E  6EE6               	movwf	postinc1,c
 32328  007930  ECF0  F041         	call	_rand	;wreg free
 32329  007934  C03F  FFE6         	movff	btemp,postinc1
 32330  007938  C040  FFE6         	movff	btemp+1,postinc1
 32331  00793C  EC74  F034         	call	___awmod	;wreg free
 32332                           
 32333                           ;stkvar	random_pitches_non_repeating@randomIndex @ sp[(-3)+0]
 32334  007940  0EFD               	movlw	-3
 32335  007942  C03F  FFE3         	movff	btemp,plusw1
 32336                           
 32337                           ;arpeggio.c: 272: ARPEGGIO_RANDOM[i] = ARPEGGIO_RANDOM[randomIndex];
 32338                           ;stkvar	random_pitches_non_repeating@randomIndex @ sp[(-3)+0]
 32339  007946  0EFD               	movlw	-3
 32340  007948  50E3               	movf	plusw1,w,c
 32341  00794A  6E40               	movwf	btemp+1,c
 32342  00794C  6A41               	clrf	btemp+2,c
 32343  00794E  0E68               	movlw	low _ARPEGGIO_RANDOM
 32344  007950  2440               	addwf	btemp+1,w,c
 32345  007952  6ED9               	movwf	fsr2l,c
 32346  007954  0E02               	movlw	high _ARPEGGIO_RANDOM
 32347  007956  2041               	addwfc	btemp+2,w,c
 32348  007958  6EDA               	movwf	fsr2h,c
 32349                           
 32350                           ;stkvar	random_pitches_non_repeating@i @ sp[(-3)+2]
 32351  00795A  0EFF               	movlw	-1
 32352  00795C  50E3               	movf	plusw1,w,c
 32353  00795E  6E40               	movwf	btemp+1,c
 32354  007960  6A41               	clrf	btemp+2,c
 32355  007962  0E68               	movlw	low _ARPEGGIO_RANDOM
 32356  007964  2440               	addwf	btemp+1,w,c
 32357  007966  6EE9               	movwf	fsr0l,c
 32358  007968  0E02               	movlw	high _ARPEGGIO_RANDOM
 32359  00796A  2041               	addwfc	btemp+2,w,c
 32360  00796C  6EEA               	movwf	fsr0h,c
 32361  00796E  CFDF FFEF          	movff	indf2,indf0
 32362                           
 32363                           ;arpeggio.c: 273: ARPEGGIO_RANDOM[randomIndex] = temp;
 32364                           ;stkvar	random_pitches_non_repeating@temp @ sp[(-3)+1]
 32365                           ;stkvar	random_pitches_non_repeating@randomIndex @ sp[(-3)+0]
 32366  007972  0EFD               	movlw	-3
 32367  007974  50E3               	movf	plusw1,w,c
 32368  007976  6E40               	movwf	btemp+1,c
 32369  007978  6A41               	clrf	btemp+2,c
 32370  00797A  0E68               	movlw	low _ARPEGGIO_RANDOM
 32371  00797C  2440               	addwf	btemp+1,w,c
 32372  00797E  6ED9               	movwf	fsr2l,c
 32373  007980  0E02               	movlw	high _ARPEGGIO_RANDOM
 32374  007982  2041               	addwfc	btemp+2,w,c
 32375  007984  6EDA               	movwf	fsr2h,c
 32376  007986  0EFE               	movlw	-2
 32377  007988  CFE3 FFDF          	movff	plusw1,indf2
 32378                           
 32379                           ;stkvar	random_pitches_non_repeating@i @ sp[(-3)+2]
 32380  00798C  0EFF               	movlw	-1
 32381  00798E  2AE3               	incf	plusw1,f,c
 32382  007990                     l32718:
 32383                           
 32384                           ;stkvar	random_pitches_non_repeating@i @ sp[(-3)+2]
 32385  007990  0EFF               	movlw	-1
 32386  007992  CFE3 F03F          	movff	plusw1,btemp
 32387  007996  502F               	movf	_NUM_NOTES_PRESSED,w,c
 32388  007998  5C3F               	subwf	btemp,w,c
 32389  00799A  A0D8               	btfss	status,0,c
 32390  00799C  D7B6               	goto	l32708
 32391  00799E                     u59360:
 32392                           
 32393                           ; _random_pitches_non_repeating: autosize = 3, savesize = 0, parsavesize = 0, tempsize =
      +                           0 parsize = 0, argsize = 0, vargsize = 0
 32394  00799E  52E5               	movf	postdec1,f,c
 32395  0079A0  52E5               	movf	postdec1,f,c
 32396  0079A2  52E5               	movf	postdec1,f,c
 32397  0079A4  0012               	return		;funcret
 32398  0079A6                     __end_of_random_pitches_non_repeating:
 32399                           	opt stack 0
 32400                           tblptru	equ	0xFF8
 32401                           tblptrh	equ	0xFF7
 32402                           tblptrl	equ	0xFF6
 32403                           tablat	equ	0xFF5
 32404                           prodh	equ	0xFF4
 32405                           prodl	equ	0xFF3
 32406                           intcon	equ	0xFF2
 32407                           intcon2	equ	0xFF1
 32408                           indf0	equ	0xFEF
 32409                           postinc0	equ	0xFEE
 32410                           fsr0h	equ	0xFEA
 32411                           fsr0l	equ	0xFE9
 32412                           wreg	equ	0xFE8
 32413                           postinc1	equ	0xFE6
 32414                           postdec1	equ	0xFE5
 32415                           plusw1	equ	0xFE3
 32416                           fsr1h	equ	0xFE2
 32417                           fsr1l	equ	0xFE1
 32418                           indf2	equ	0xFDF
 32419                           postinc2	equ	0xFDE
 32420                           postdec2	equ	0xFDD
 32421                           plusw2	equ	0xFDB
 32422                           fsr2h	equ	0xFDA
 32423                           fsr2l	equ	0xFD9
 32424                           status	equ	0xFD8
 32425                           
 32426 ;; *************** function _random_pitches *****************
 32427 ;; Defined at:
 32428 ;;		line 254 in file "arpeggio.c"
 32429 ;; Parameters:    Size  Location     Type
 32430 ;;		None
 32431 ;; Auto vars:     Size  Location     Type
 32432 ;;  random_array    1  [STACK] unsigned char 
 32433 ;;  i               1  [STACK] unsigned char 
 32434 ;; Return value:  Size  Location     Type
 32435 ;;                  1  [STACK] void 
 32436 ;; Registers used:
 32437 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+10, btemp+11, prodl
 32438 ;; Tracked objects:
 32439 ;;		On entry : 0/0
 32440 ;;		On exit  : 0/0
 32441 ;;		Unchanged: 0/0
 32442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32447 ;;Total ram usage:        0 bytes
 32448 ;; Hardware stack levels used:    1
 32449 ;; Hardware stack levels required when called:    7
 32450 ;; This function calls:
 32451 ;;		___awmod
 32452 ;;		_rand
 32453 ;; This function is called by:
 32454 ;;		_processOctave
 32455 ;;		_setupArpeggio
 32456 ;;		_playArpeggio
 32457 ;; This function uses a reentrant model
 32458 ;;
 32459                           
 32460                           	psect	text85
 32461  008B9C                     __ptext85:
 32462                           	opt stack 0
 32463  008B9C                     _random_pitches:
 32464                           	opt stack 0
 32465                           
 32466                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
 32467  008B9C  52E6               	movf	postinc1,f,c
 32468  008B9E  52E6               	movf	postinc1,f,c
 32469                           
 32470                           ;arpeggio.c: 256: if(NUM_NOTES_PRESSED == 0){return;}
 32471                           
 32472                           ;incstack = 0
 32473  008BA0  502F               	movf	_NUM_NOTES_PRESSED,w,c
 32474  008BA2  B4D8               	btfsc	status,2,c
 32475  008BA4  D031               	goto	u59340
 32476                           
 32477                           ;arpeggio.c: 258: for (unsigned char i = 0; i < NUM_NOTES_PRESSED; i++){
 32478                           ;stkvar	random_pitches@i @ sp[(-2)+1]
 32479  008BA6  0EFF               	movlw	-1
 32480  008BA8  6AE3               	clrf	plusw1,c
 32481  008BAA  D027               	goto	l32700
 32482  008BAC                     l32694:
 32483                           
 32484                           ;arpeggio.c: 259: unsigned char random_array_index = rand() % (NUM_NOTES_PRESSED);
 32485  008BAC  502F               	movf	_NUM_NOTES_PRESSED,w,c
 32486  008BAE  6EE6               	movwf	postinc1,c
 32487  008BB0  0E00               	movlw	0
 32488  008BB2  6EE6               	movwf	postinc1,c
 32489  008BB4  ECF0  F041         	call	_rand	;wreg free
 32490  008BB8  C03F  FFE6         	movff	btemp,postinc1
 32491  008BBC  C040  FFE6         	movff	btemp+1,postinc1
 32492  008BC0  EC74  F034         	call	___awmod	;wreg free
 32493                           
 32494                           ;stkvar	random_pitches@random_array_index @ sp[(-2)+0]
 32495  008BC4  0EFE               	movlw	-2
 32496  008BC6  C03F  FFE3         	movff	btemp,plusw1
 32497                           
 32498                           ;arpeggio.c: 260: ARPEGGIO_RANDOM[i] = ARPEGGIO[random_array_index];
 32499                           ;stkvar	random_pitches@random_array_index @ sp[(-2)+0]
 32500  008BCA  0EFE               	movlw	-2
 32501  008BCC  50E3               	movf	plusw1,w,c
 32502  008BCE  6E40               	movwf	btemp+1,c
 32503  008BD0  6A41               	clrf	btemp+2,c
 32504  008BD2  0E82               	movlw	low _ARPEGGIO
 32505  008BD4  2440               	addwf	btemp+1,w,c
 32506  008BD6  6ED9               	movwf	fsr2l,c
 32507  008BD8  0E01               	movlw	high _ARPEGGIO
 32508  008BDA  2041               	addwfc	btemp+2,w,c
 32509  008BDC  6EDA               	movwf	fsr2h,c
 32510                           
 32511                           ;stkvar	random_pitches@i @ sp[(-2)+1]
 32512  008BDE  0EFF               	movlw	-1
 32513  008BE0  50E3               	movf	plusw1,w,c
 32514  008BE2  6E40               	movwf	btemp+1,c
 32515  008BE4  6A41               	clrf	btemp+2,c
 32516  008BE6  0E68               	movlw	low _ARPEGGIO_RANDOM
 32517  008BE8  2440               	addwf	btemp+1,w,c
 32518  008BEA  6EE9               	movwf	fsr0l,c
 32519  008BEC  0E02               	movlw	high _ARPEGGIO_RANDOM
 32520  008BEE  2041               	addwfc	btemp+2,w,c
 32521  008BF0  6EEA               	movwf	fsr0h,c
 32522  008BF2  CFDF FFEF          	movff	indf2,indf0
 32523                           
 32524                           ;stkvar	random_pitches@i @ sp[(-2)+1]
 32525  008BF6  0EFF               	movlw	-1
 32526  008BF8  2AE3               	incf	plusw1,f,c
 32527  008BFA                     l32700:
 32528                           
 32529                           ;stkvar	random_pitches@i @ sp[(-2)+1]
 32530  008BFA  0EFF               	movlw	-1
 32531  008BFC  CFE3 F03F          	movff	plusw1,btemp
 32532  008C00  502F               	movf	_NUM_NOTES_PRESSED,w,c
 32533  008C02  5C3F               	subwf	btemp,w,c
 32534  008C04  A0D8               	btfss	status,0,c
 32535  008C06  D7D2               	goto	l32694
 32536  008C08                     u59340:
 32537                           
 32538                           ; _random_pitches: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
 32539  008C08  52E5               	movf	postdec1,f,c
 32540  008C0A  52E5               	movf	postdec1,f,c
 32541  008C0C  0012               	return		;funcret
 32542  008C0E                     __end_of_random_pitches:
 32543                           	opt stack 0
 32544                           tblptru	equ	0xFF8
 32545                           tblptrh	equ	0xFF7
 32546                           tblptrl	equ	0xFF6
 32547                           tablat	equ	0xFF5
 32548                           prodh	equ	0xFF4
 32549                           prodl	equ	0xFF3
 32550                           intcon	equ	0xFF2
 32551                           intcon2	equ	0xFF1
 32552                           indf0	equ	0xFEF
 32553                           postinc0	equ	0xFEE
 32554                           fsr0h	equ	0xFEA
 32555                           fsr0l	equ	0xFE9
 32556                           wreg	equ	0xFE8
 32557                           postinc1	equ	0xFE6
 32558                           postdec1	equ	0xFE5
 32559                           plusw1	equ	0xFE3
 32560                           fsr1h	equ	0xFE2
 32561                           fsr1l	equ	0xFE1
 32562                           indf2	equ	0xFDF
 32563                           postinc2	equ	0xFDE
 32564                           postdec2	equ	0xFDD
 32565                           plusw2	equ	0xFDB
 32566                           fsr2h	equ	0xFDA
 32567                           fsr2l	equ	0xFD9
 32568                           status	equ	0xFD8
 32569                           
 32570 ;; *************** function _rand *****************
 32571 ;; Defined at:
 32572 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
 32573 ;; Parameters:    Size  Location     Type
 32574 ;;		None
 32575 ;; Auto vars:     Size  Location     Type
 32576 ;;		None
 32577 ;; Return value:  Size  Location     Type
 32578 ;;                  2  [STACK] int 
 32579 ;; Registers used:
 32580 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+
      +10, btemp+11
 32581 ;; Tracked objects:
 32582 ;;		On entry : 0/0
 32583 ;;		On exit  : 0/0
 32584 ;;		Unchanged: 0/0
 32585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32589 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32590 ;;Total ram usage:        0 bytes
 32591 ;; Hardware stack levels used:    1
 32592 ;; Hardware stack levels required when called:    6
 32593 ;; This function calls:
 32594 ;;		___lmul
 32595 ;; This function is called by:
 32596 ;;		_random_pitches
 32597 ;;		_random_pitches_non_repeating
 32598 ;;		_playArpeggio
 32599 ;; This function uses a reentrant model
 32600 ;;
 32601                           
 32602                           	psect	text86
 32603  0083E0                     __ptext86:
 32604                           	opt stack 0
 32605  0083E0                     _rand:
 32606                           	opt stack 6
 32607                           
 32608                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
 32609                           ;incstack = 0
 32610  0083E0  0E6D               	movlw	109
 32611  0083E2  6EE6               	movwf	postinc1,c
 32612  0083E4  0E4E               	movlw	78
 32613  0083E6  6EE6               	movwf	postinc1,c
 32614  0083E8  0EC6               	movlw	198
 32615  0083EA  6EE6               	movwf	postinc1,c
 32616  0083EC  0E41               	movlw	65
 32617  0083EE  6EE6               	movwf	postinc1,c
 32618  0083F0  C1EF  FFE6         	movff	_randx,postinc1
 32619  0083F4  C1F0  FFE6         	movff	_randx+1,postinc1
 32620  0083F8  C1F1  FFE6         	movff	_randx+2,postinc1
 32621  0083FC  C1F2  FFE6         	movff	_randx+3,postinc1
 32622  008400  ECA7  F03A         	call	___lmul	;wreg free
 32623  008404  C03F  F1EF         	movff	btemp,_randx
 32624  008408  C040  F1F0         	movff	btemp+1,_randx+1
 32625  00840C  C041  F1F1         	movff	btemp+2,_randx+2
 32626  008410  C042  F1F2         	movff	btemp+3,_randx+3
 32627  008414  0E39               	movlw	57
 32628  008416  0101               	movlb	1	; () banked
 32629  008418  27EF               	addwf	_randx& (0+255),f,b
 32630  00841A  0E30               	movlw	48
 32631  00841C  23F0               	addwfc	(_randx+1)& (0+255),f,b
 32632  00841E  0E00               	movlw	0
 32633  008420  23F1               	addwfc	(_randx+2)& (0+255),f,b
 32634  008422  0E00               	movlw	0
 32635  008424  23F2               	addwfc	(_randx+3)& (0+255),f,b
 32636                           
 32637                           ; BSR set to: 1
 32638  008426  0E10               	movlw	16
 32639  008428  6E4A               	movwf	btemp+11,c
 32640  00842A  C1EF  F043         	movff	_randx,btemp+4
 32641  00842E  C1F0  F044         	movff	_randx+1,btemp+5
 32642  008432  C1F1  F045         	movff	_randx+2,btemp+6
 32643  008436  C1F2  F046         	movff	_randx+3,btemp+7
 32644  00843A                     u59165:
 32645  00843A  664A               	tstfsz	btemp+11,c
 32646  00843C  D001               	goto	u59166
 32647  00843E  D007               	goto	u59167
 32648  008440                     u59166:
 32649  008440  3446               	rlcf	btemp+7,w,c
 32650  008442  3246               	rrcf	btemp+7,f,c
 32651  008444  3245               	rrcf	btemp+6,f,c
 32652  008446  3244               	rrcf	btemp+5,f,c
 32653  008448  3243               	rrcf	btemp+4,f,c
 32654  00844A  2E4A               	decfsz	btemp+11,f,c
 32655  00844C  D7F6               	goto	u59165
 32656  00844E                     u59167:
 32657  00844E  C043  F03F         	movff	btemp+4,btemp
 32658  008452  C044  F040         	movff	btemp+5,btemp+1
 32659  008456  0EFF               	movlw	255
 32660  008458  6E49               	movwf	btemp+10,c
 32661  00845A  0E7F               	movlw	127
 32662  00845C  6E4A               	movwf	btemp+11,c
 32663  00845E  5049               	movf	btemp+10,w,c
 32664  008460  163F               	andwf	btemp,f,c
 32665  008462  504A               	movf	btemp+11,w,c
 32666  008464  1640               	andwf	btemp+1,f,c
 32667                           
 32668                           ; _rand: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize 
      +                          = 0, vargsize = 0
 32669  008466  0012               	return		;funcret
 32670  008468                     __end_of_rand:
 32671                           	opt stack 0
 32672                           tblptru	equ	0xFF8
 32673                           tblptrh	equ	0xFF7
 32674                           tblptrl	equ	0xFF6
 32675                           tablat	equ	0xFF5
 32676                           prodh	equ	0xFF4
 32677                           prodl	equ	0xFF3
 32678                           intcon	equ	0xFF2
 32679                           intcon2	equ	0xFF1
 32680                           indf0	equ	0xFEF
 32681                           postinc0	equ	0xFEE
 32682                           fsr0h	equ	0xFEA
 32683                           fsr0l	equ	0xFE9
 32684                           wreg	equ	0xFE8
 32685                           postinc1	equ	0xFE6
 32686                           postdec1	equ	0xFE5
 32687                           plusw1	equ	0xFE3
 32688                           fsr1h	equ	0xFE2
 32689                           fsr1l	equ	0xFE1
 32690                           indf2	equ	0xFDF
 32691                           postinc2	equ	0xFDE
 32692                           postdec2	equ	0xFDD
 32693                           plusw2	equ	0xFDB
 32694                           fsr2h	equ	0xFDA
 32695                           fsr2l	equ	0xFD9
 32696                           status	equ	0xFD8
 32697                           
 32698 ;; *************** function ___awmod *****************
 32699 ;; Defined at:
 32700 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 32701 ;; Parameters:    Size  Location     Type
 32702 ;;  dividend        2  [STACK] int 
 32703 ;;  divisor         2  [STACK] int 
 32704 ;; Auto vars:     Size  Location     Type
 32705 ;;  sign            1  [STACK] unsigned char 
 32706 ;;  counter         1  [STACK] unsigned char 
 32707 ;; Return value:  Size  Location     Type
 32708 ;;                  2  [STACK] int 
 32709 ;; Registers used:
 32710 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl
 32711 ;; Tracked objects:
 32712 ;;		On entry : 0/1
 32713 ;;		On exit  : 0/0
 32714 ;;		Unchanged: 0/0
 32715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32720 ;;Total ram usage:        0 bytes
 32721 ;; Hardware stack levels used:    1
 32722 ;; Hardware stack levels required when called:    5
 32723 ;; This function calls:
 32724 ;;		Nothing
 32725 ;; This function is called by:
 32726 ;;		_processOctave
 32727 ;;		_displayDigits
 32728 ;;		_int2string
 32729 ;;		_random_pitches
 32730 ;;		_random_pitches_non_repeating
 32731 ;;		_playArpeggio
 32732 ;; This function uses a reentrant model
 32733 ;;
 32734                           
 32735                           	psect	text87
 32736  0068E8                     __ptext87:
 32737                           	opt stack 0
 32738  0068E8                     ___awmod:
 32739                           	opt stack 0
 32740                           
 32741                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
 32742  0068E8  52E6               	movf	postinc1,f,c
 32743  0068EA  52E6               	movf	postinc1,f,c
 32744                           
 32745                           ;stkvar	___awmod@sign @ sp[(-2)+0]
 32746                           
 32747                           ;incstack = 0
 32748  0068EC  0EFE               	movlw	-2
 32749  0068EE  6AE3               	clrf	plusw1,c
 32750                           
 32751                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32752  0068F0  0EFD               	movlw	-3
 32753  0068F2  AEE3               	btfss	plusw1,7,c
 32754  0068F4  D009               	goto	l32630
 32755                           
 32756                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32757                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32758  0068F6  0EFC               	movlw	-4
 32759  0068F8  6CE3               	negf	plusw1,c
 32760  0068FA  0EFD               	movlw	-3
 32761  0068FC  1EE3               	comf	plusw1,f,c
 32762  0068FE  B0D8               	btfsc	status,0,c
 32763  006900  2AE3               	incf	plusw1,f,c
 32764                           
 32765                           ;stkvar	___awmod@sign @ sp[(-2)+0]
 32766  006902  0EFE               	movlw	-2
 32767  006904  6AE3               	clrf	plusw1,c
 32768  006906  2AE3               	incf	plusw1,f,c
 32769  006908                     l32630:
 32770                           
 32771                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32772  006908  0EFB               	movlw	-5
 32773  00690A  AEE3               	btfss	plusw1,7,c
 32774  00690C  D006               	goto	l32634
 32775                           
 32776                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32777                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32778  00690E  0EFA               	movlw	-6
 32779  006910  6CE3               	negf	plusw1,c
 32780  006912  0EFB               	movlw	-5
 32781  006914  1EE3               	comf	plusw1,f,c
 32782  006916  B0D8               	btfsc	status,0,c
 32783  006918  2AE3               	incf	plusw1,f,c
 32784  00691A                     l32634:
 32785                           
 32786                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32787  00691A  0EFA               	movlw	-6
 32788  00691C  CFE3 F03F          	movff	plusw1,btemp
 32789  006920  0EFB               	movlw	-5
 32790  006922  50E3               	movf	plusw1,w,c
 32791  006924  103F               	iorwf	btemp,w,c
 32792  006926  B4D8               	btfsc	status,2,c
 32793  006928  D04A               	goto	u59290
 32794                           
 32795                           ;stkvar	___awmod@counter @ sp[(-2)+1]
 32796  00692A  0EFF               	movlw	-1
 32797  00692C  6AE3               	clrf	plusw1,c
 32798  00692E  D010               	goto	L19
 32799  006930                     l32638:
 32800                           
 32801                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32802  006930  0EFA               	movlw	-6
 32803  006932  50E3               	movf	plusw1,w,c
 32804  006934  90D8               	bcf	status,0,c
 32805  006936  34E8               	rlcf	wreg,w,c
 32806  006938  6E3F               	movwf	btemp,c
 32807  00693A  0EFA               	movlw	-6
 32808  00693C  C03F  FFE3         	movff	btemp,plusw1
 32809  006940  0EFB               	movlw	-5
 32810  006942  50E3               	movf	plusw1,w,c
 32811  006944  34E8               	rlcf	wreg,w,c
 32812  006946  6E3F               	movwf	btemp,c
 32813  006948  0EFB               	movlw	-5
 32814  00694A  C03F  FFE3         	movff	btemp,plusw1
 32815                           
 32816                           ;stkvar	___awmod@counter @ sp[(-2)+1]
 32817  00694E  0EFF               	movlw	-1
 32818  006950                     L19:
 32819  006950  2AE3               	incf	plusw1,f,c
 32820                           
 32821                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32822  006952  0EFB               	movlw	-5
 32823  006954  AEE3               	btfss	plusw1,7,c
 32824  006956  D7EC               	goto	l32638
 32825  006958                     u59270:
 32826                           
 32827                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32828  006958  0EFA               	movlw	-6
 32829  00695A  CFE3 F040          	movff	plusw1,btemp+1
 32830  00695E  0EFB               	movlw	-5
 32831  006960  CFE3 F041          	movff	plusw1,btemp+2
 32832                           
 32833                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32834  006964  0EFC               	movlw	-4
 32835  006966  CFE3 F049          	movff	plusw1,btemp+10
 32836  00696A  0EFD               	movlw	-3
 32837  00696C  CFE3 F04A          	movff	plusw1,btemp+11
 32838  006970  5040               	movf	btemp+1,w,c
 32839  006972  5C49               	subwf	btemp+10,w,c
 32840  006974  5041               	movf	btemp+2,w,c
 32841  006976  584A               	subwfb	btemp+11,w,c
 32842  006978  A0D8               	btfss	status,0,c
 32843  00697A  D012               	goto	l32648
 32844                           
 32845                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32846                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32847  00697C  0EFC               	movlw	-4
 32848  00697E  50E3               	movf	plusw1,w,c
 32849  006980  6E3F               	movwf	btemp,c
 32850  006982  0EFA               	movlw	-6
 32851  006984  50E3               	movf	plusw1,w,c
 32852  006986  5E3F               	subwf	btemp,f,c
 32853  006988  0EFC               	movlw	-4
 32854  00698A  C03F  FFE3         	movff	btemp,plusw1
 32855  00698E  0EFD               	movlw	-3
 32856  006990  50E3               	movf	plusw1,w,c
 32857  006992  6E3F               	movwf	btemp,c
 32858  006994  0EFB               	movlw	-5
 32859  006996  50E3               	movf	plusw1,w,c
 32860  006998  5A3F               	subwfb	btemp,f,c
 32861  00699A  0EFD               	movlw	-3
 32862  00699C  C03F  FFE3         	movff	btemp,plusw1
 32863  0069A0                     l32648:
 32864                           
 32865                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32866  0069A0  90D8               	bcf	status,0,c
 32867  0069A2  0EFB               	movlw	-5
 32868  0069A4  32E3               	rrcf	plusw1,f,c
 32869  0069A6  0EFA               	movlw	-6
 32870  0069A8  32E3               	rrcf	plusw1,f,c
 32871                           
 32872                           ;stkvar	___awmod@counter @ sp[(-2)+1]
 32873  0069AA  0EFF               	movlw	-1
 32874  0069AC  50E3               	movf	plusw1,w,c
 32875  0069AE  6E3F               	movwf	btemp,c
 32876  0069B0  0E01               	movlw	1
 32877  0069B2  5E3F               	subwf	btemp,f,c
 32878  0069B4  0EFF               	movlw	-1
 32879  0069B6  C03F  FFE3         	movff	btemp,plusw1
 32880  0069BA  A4D8               	btfss	status,2,c
 32881  0069BC  D7CD               	goto	u59270
 32882  0069BE                     u59290:
 32883                           
 32884                           ;stkvar	___awmod@sign @ sp[(-2)+0]
 32885  0069BE  0EFE               	movlw	-2
 32886  0069C0  50E3               	movf	plusw1,w,c
 32887  0069C2  B4D8               	btfsc	status,2,c
 32888  0069C4  D006               	goto	l32656
 32889                           
 32890                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32891                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32892  0069C6  0EFC               	movlw	-4
 32893  0069C8  6CE3               	negf	plusw1,c
 32894  0069CA  0EFD               	movlw	-3
 32895  0069CC  1EE3               	comf	plusw1,f,c
 32896  0069CE  B0D8               	btfsc	status,0,c
 32897  0069D0  2AE3               	incf	plusw1,f,c
 32898  0069D2                     l32656:
 32899                           
 32900                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32901  0069D2  0EFC               	movlw	-4
 32902  0069D4  CFE3 F03F          	movff	plusw1,btemp
 32903  0069D8  0EFD               	movlw	-3
 32904  0069DA  CFE3 F040          	movff	plusw1,btemp+1
 32905                           
 32906                           ; ___awmod: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
 32907  0069DE  0EFA               	movlw	250
 32908  0069E0  26E1               	addwf	fsr1l,f,c
 32909  0069E2  0EFF               	movlw	255
 32910  0069E4  22E2               	addwfc	fsr1h,f,c
 32911  0069E6  0012               	return		;funcret
 32912  0069E8                     __end_of___awmod:
 32913                           	opt stack 0
 32914                           tblptru	equ	0xFF8
 32915                           tblptrh	equ	0xFF7
 32916                           tblptrl	equ	0xFF6
 32917                           tablat	equ	0xFF5
 32918                           prodh	equ	0xFF4
 32919                           prodl	equ	0xFF3
 32920                           intcon	equ	0xFF2
 32921                           intcon2	equ	0xFF1
 32922                           indf0	equ	0xFEF
 32923                           postinc0	equ	0xFEE
 32924                           fsr0h	equ	0xFEA
 32925                           fsr0l	equ	0xFE9
 32926                           wreg	equ	0xFE8
 32927                           postinc1	equ	0xFE6
 32928                           postdec1	equ	0xFE5
 32929                           plusw1	equ	0xFE3
 32930                           fsr1h	equ	0xFE2
 32931                           fsr1l	equ	0xFE1
 32932                           indf2	equ	0xFDF
 32933                           postinc2	equ	0xFDE
 32934                           postdec2	equ	0xFDD
 32935                           plusw2	equ	0xFDB
 32936                           fsr2h	equ	0xFDA
 32937                           fsr2l	equ	0xFD9
 32938                           status	equ	0xFD8
 32939                           
 32940 ;; *************** function _copy_array *****************
 32941 ;; Defined at:
 32942 ;;		line 210 in file "arpeggio.c"
 32943 ;; Parameters:    Size  Location     Type
 32944 ;;		None
 32945 ;; Auto vars:     Size  Location     Type
 32946 ;;  i               1    0[BANK0 ] unsigned char 
 32947 ;; Return value:  Size  Location     Type
 32948 ;;                  1    wreg      void 
 32949 ;; Registers used:
 32950 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 32951 ;; Tracked objects:
 32952 ;;		On entry : 0/0
 32953 ;;		On exit  : 0/0
 32954 ;;		Unchanged: 0/0
 32955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32957 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32959 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32960 ;;Total ram usage:        1 bytes
 32961 ;; Hardware stack levels used:    1
 32962 ;; Hardware stack levels required when called:    5
 32963 ;; This function calls:
 32964 ;;		Nothing
 32965 ;; This function is called by:
 32966 ;;		_setupArpeggio
 32967 ;; This function uses a non-reentrant model
 32968 ;;
 32969                           
 32970                           	psect	text88
 32971  008F5C                     __ptext88:
 32972                           	opt stack 0
 32973  008F5C                     _copy_array:
 32974                           	opt stack 16
 32975                           
 32976                           ;arpeggio.c: 212: if(NUM_NOTES_PRESSED == 0){return;}
 32977                           
 32978                           ;incstack = 0
 32979  008F5C  502F               	movf	_NUM_NOTES_PRESSED,w,c
 32980  008F5E  B4D8               	btfsc	status,2,c
 32981  008F60  0012               	return	
 32982                           
 32983                           ;arpeggio.c: 215: for(unsigned char i = 0; i < NUM_NOTES_PRESSED; i++){
 32984  008F62  0E00               	movlw	0
 32985  008F64  0100               	movlb	0	; () banked
 32986  008F66  6F60               	movwf	copy_array@i& (0+255),b
 32987  008F68  D025               	goto	l5472
 32988  008F6A                     
 32989                           ; BSR set to: 0
 32990                           ;arpeggio.c: 216: ARPEGGIO_SORTED[i] = ARPEGGIO[i];
 32991                           
 32992                           ; BSR set to: 0
 32993  008F6A  5160               	movf	copy_array@i& (0+255),w,b
 32994  008F6C  0D01               	mullw	1
 32995  008F6E  0E82               	movlw	low _ARPEGGIO
 32996  008F70  24F3               	addwf	prodl,w,c
 32997  008F72  6ED9               	movwf	fsr2l,c
 32998  008F74  0E01               	movlw	high _ARPEGGIO
 32999  008F76  20F4               	addwfc	prodh,w,c
 33000  008F78  6EDA               	movwf	fsr2h,c
 33001  008F7A  5160               	movf	copy_array@i& (0+255),w,b
 33002  008F7C  0D01               	mullw	1
 33003  008F7E  0E78               	movlw	low _ARPEGGIO_SORTED
 33004  008F80  24F3               	addwf	prodl,w,c
 33005  008F82  6EE9               	movwf	fsr0l,c
 33006  008F84  0E02               	movlw	high _ARPEGGIO_SORTED
 33007  008F86  20F4               	addwfc	prodh,w,c
 33008  008F88  6EEA               	movwf	fsr0h,c
 33009  008F8A  CFDF FFEF          	movff	indf2,indf0
 33010                           
 33011                           ;arpeggio.c: 217: ARPEGGIO_RANDOM[i] = ARPEGGIO[i];
 33012  008F8E  5160               	movf	copy_array@i& (0+255),w,b
 33013  008F90  0D01               	mullw	1
 33014  008F92  0E82               	movlw	low _ARPEGGIO
 33015  008F94  24F3               	addwf	prodl,w,c
 33016  008F96  6ED9               	movwf	fsr2l,c
 33017  008F98  0E01               	movlw	high _ARPEGGIO
 33018  008F9A  20F4               	addwfc	prodh,w,c
 33019  008F9C  6EDA               	movwf	fsr2h,c
 33020  008F9E  5160               	movf	copy_array@i& (0+255),w,b
 33021  008FA0  0D01               	mullw	1
 33022  008FA2  0E68               	movlw	low _ARPEGGIO_RANDOM
 33023  008FA4  24F3               	addwf	prodl,w,c
 33024  008FA6  6EE9               	movwf	fsr0l,c
 33025  008FA8  0E02               	movlw	high _ARPEGGIO_RANDOM
 33026  008FAA  20F4               	addwfc	prodh,w,c
 33027  008FAC  6EEA               	movwf	fsr0h,c
 33028  008FAE  CFDF FFEF          	movff	indf2,indf0
 33029                           
 33030                           ; BSR set to: 0
 33031  008FB2  2B60               	incf	copy_array@i& (0+255),f,b
 33032  008FB4                     l5472:
 33033                           
 33034                           ; BSR set to: 0
 33035                           
 33036                           ; BSR set to: 0
 33037  008FB4  502F               	movf	_NUM_NOTES_PRESSED,w,c
 33038  008FB6  5D60               	subwf	copy_array@i& (0+255),w,b
 33039  008FB8  B0D8               	btfsc	status,0,c
 33040  008FBA  0012               	return	
 33041  008FBC  D7D6               	goto	l5473
 33042  008FBE                     __end_of_copy_array:
 33043                           	opt stack 0
 33044                           tblptru	equ	0xFF8
 33045                           tblptrh	equ	0xFF7
 33046                           tblptrl	equ	0xFF6
 33047                           tablat	equ	0xFF5
 33048                           prodh	equ	0xFF4
 33049                           prodl	equ	0xFF3
 33050                           intcon	equ	0xFF2
 33051                           intcon2	equ	0xFF1
 33052                           indf0	equ	0xFEF
 33053                           postinc0	equ	0xFEE
 33054                           fsr0h	equ	0xFEA
 33055                           fsr0l	equ	0xFE9
 33056                           wreg	equ	0xFE8
 33057                           postinc1	equ	0xFE6
 33058                           postdec1	equ	0xFE5
 33059                           plusw1	equ	0xFE3
 33060                           fsr1h	equ	0xFE2
 33061                           fsr1l	equ	0xFE1
 33062                           indf2	equ	0xFDF
 33063                           postinc2	equ	0xFDE
 33064                           postdec2	equ	0xFDD
 33065                           plusw2	equ	0xFDB
 33066                           fsr2h	equ	0xFDA
 33067                           fsr2l	equ	0xFD9
 33068                           status	equ	0xFD8
 33069                           
 33070 ;; *************** function _resetArpeggio *****************
 33071 ;; Defined at:
 33072 ;;		line 162 in file "arpeggio.c"
 33073 ;; Parameters:    Size  Location     Type
 33074 ;;		None
 33075 ;; Auto vars:     Size  Location     Type
 33076 ;;		None
 33077 ;; Return value:  Size  Location     Type
 33078 ;;                  1    wreg      void 
 33079 ;; Registers used:
 33080 ;;		wreg, status,2, status,0
 33081 ;; Tracked objects:
 33082 ;;		On entry : 0/0
 33083 ;;		On exit  : 0/0
 33084 ;;		Unchanged: 0/0
 33085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33090 ;;Total ram usage:        0 bytes
 33091 ;; Hardware stack levels used:    1
 33092 ;; Hardware stack levels required when called:    5
 33093 ;; This function calls:
 33094 ;;		Nothing
 33095 ;; This function is called by:
 33096 ;;		_processOctave
 33097 ;;		_finish_arpeggio_setup
 33098 ;; This function uses a non-reentrant model
 33099 ;;
 33100                           
 33101                           	psect	text89
 33102  00951E                     __ptext89:
 33103                           	opt stack 0
 33104  00951E                     _resetArpeggio:
 33105                           	opt stack 20
 33106                           
 33107                           ;arpeggio.c: 164: which_note = 0;
 33108                           
 33109                           ;incstack = 0
 33110  00951E  0E00               	movlw	0
 33111  009520  6E33               	movwf	_which_note,c
 33112                           
 33113                           ;arpeggio.c: 165: which_octave = 0;
 33114  009522  0E00               	movlw	0
 33115  009524  6E32               	movwf	_which_octave,c
 33116                           
 33117                           ;arpeggio.c: 166: last_note = 0;
 33118  009526  0E00               	movlw	0
 33119  009528  0100               	movlb	0	; () banked
 33120  00952A  6FEC               	movwf	_last_note& (0+255),b
 33121                           
 33122                           ;arpeggio.c: 167: last_octave = 0;
 33123  00952C  0E00               	movlw	0
 33124  00952E  0101               	movlb	1	; () banked
 33125  009530  6F7D               	movwf	_last_octave& (0+255),b
 33126                           
 33127                           ; BSR set to: 1
 33128                           ;arpeggio.c: 168: overflow = 0;
 33129  009532  9402               	bcf	_overflow/(0+8),_overflow& (0+7),c
 33130                           
 33131                           ; BSR set to: 1
 33132                           ;arpeggio.c: 169: octave_overflow = 0;
 33133  009534  9202               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 33134                           
 33135                           ; BSR set to: 1
 33136                           ;arpeggio.c: 172: if(ARPEGGIO_TYPE == UP_DOWN && startingDirection == DOWN){
 33137  009536  0E02               	movlw	2
 33138  009538  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 33139  00953A  A4D8               	btfss	status,2,c
 33140  00953C  D005               	goto	l5449
 33141                           
 33142                           ; BSR set to: 1
 33143  00953E  0434               	decf	_startingDirection,w,c
 33144  009540  A4D8               	btfss	status,2,c
 33145  009542  D002               	goto	l5449
 33146                           
 33147                           ; BSR set to: 1
 33148                           ;arpeggio.c: 173: ARPEGGIO_TYPE = DOWN_UP;
 33149  009544  0E03               	movlw	3
 33150  009546  6E35               	movwf	_ARPEGGIO_TYPE,c
 33151  009548                     l5449:
 33152                           
 33153                           ; BSR set to: 1
 33154                           ;arpeggio.c: 174: }
 33155                           ;arpeggio.c: 176: if(ARPEGGIO_TYPE == DOWN_UP && startingDirection == UP){
 33156                           
 33157                           ; BSR set to: 1
 33158  009548  0E03               	movlw	3
 33159  00954A  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 33160  00954C  A4D8               	btfss	status,2,c
 33161  00954E  0012               	return	
 33162                           
 33163                           ; BSR set to: 1
 33164  009550  5034               	movf	_startingDirection,w,c
 33165  009552  A4D8               	btfss	status,2,c
 33166  009554  0012               	return	
 33167                           
 33168                           ; BSR set to: 1
 33169                           ;arpeggio.c: 177: ARPEGGIO_TYPE = UP_DOWN;
 33170  009556  0E02               	movlw	2
 33171  009558  6E35               	movwf	_ARPEGGIO_TYPE,c
 33172  00955A  0012               	return	
 33173  00955C                     __end_of_resetArpeggio:
 33174                           	opt stack 0
 33175                           tblptru	equ	0xFF8
 33176                           tblptrh	equ	0xFF7
 33177                           tblptrl	equ	0xFF6
 33178                           tablat	equ	0xFF5
 33179                           prodh	equ	0xFF4
 33180                           prodl	equ	0xFF3
 33181                           intcon	equ	0xFF2
 33182                           intcon2	equ	0xFF1
 33183                           indf0	equ	0xFEF
 33184                           postinc0	equ	0xFEE
 33185                           fsr0h	equ	0xFEA
 33186                           fsr0l	equ	0xFE9
 33187                           wreg	equ	0xFE8
 33188                           postinc1	equ	0xFE6
 33189                           postdec1	equ	0xFE5
 33190                           plusw1	equ	0xFE3
 33191                           fsr1h	equ	0xFE2
 33192                           fsr1l	equ	0xFE1
 33193                           indf2	equ	0xFDF
 33194                           postinc2	equ	0xFDE
 33195                           postdec2	equ	0xFDD
 33196                           plusw2	equ	0xFDB
 33197                           fsr2h	equ	0xFDA
 33198                           fsr2l	equ	0xFD9
 33199                           status	equ	0xFD8
 33200                           
 33201 ;; *************** function _delete_notes_from_arpeggio *****************
 33202 ;; Defined at:
 33203 ;;		line 63 in file "arpeggio.c"
 33204 ;; Parameters:    Size  Location     Type
 33205 ;;  pitch           1    wreg     unsigned char 
 33206 ;; Auto vars:     Size  Location     Type
 33207 ;;  pitch           1    9[BANK0 ] unsigned char 
 33208 ;;  INDEX_TO_SHI    1   10[BANK0 ] char 
 33209 ;; Return value:  Size  Location     Type
 33210 ;;                  1    wreg      void 
 33211 ;; Registers used:
 33212 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33213 ;; Tracked objects:
 33214 ;;		On entry : 0/0
 33215 ;;		On exit  : 0/0
 33216 ;;		Unchanged: 0/0
 33217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33219 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33221 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33222 ;;Total ram usage:        2 bytes
 33223 ;; Hardware stack levels used:    1
 33224 ;; Hardware stack levels required when called:    6
 33225 ;; This function calls:
 33226 ;;		_findArrayIndex
 33227 ;;		_rotateArrayLeft
 33228 ;; This function is called by:
 33229 ;;		_playThisNotePentatonic
 33230 ;;		_playThisNote
 33231 ;;		_playThisNote8
 33232 ;; This function uses a non-reentrant model
 33233 ;;
 33234                           
 33235                           	psect	text90
 33236  0096B8                     __ptext90:
 33237                           	opt stack 0
 33238  0096B8                     _delete_notes_from_arpeggio:
 33239                           	opt stack 17
 33240                           
 33241                           ; BSR set to: 1
 33242                           ;incstack = 0
 33243                           ;delete_notes_from_arpeggio@pitch stored from wreg
 33244  0096B8  0100               	movlb	0	; () banked
 33245  0096BA  6F69               	movwf	delete_notes_from_arpeggio@pitch& (0+255),b
 33246                           
 33247                           ;arpeggio.c: 66: signed char INDEX_TO_SHIFT_LEFT_AT = findArrayIndex(pitch);
 33248  0096BC  0100               	movlb	0	; () banked
 33249  0096BE  5169               	movf	delete_notes_from_arpeggio@pitch& (0+255),w,b
 33250  0096C0  ECAE  F04A         	call	_findArrayIndex
 33251  0096C4  0100               	movlb	0	; () banked
 33252  0096C6  6F6A               	movwf	delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT& (0+255),b
 33253                           
 33254                           ; BSR set to: 0
 33255                           ;arpeggio.c: 77: rotateArrayLeft(INDEX_TO_SHIFT_LEFT_AT);
 33256  0096C8  516A               	movf	delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT& (0+255),w,b
 33257  0096CA  EC6F  F044         	call	_rotateArrayLeft
 33258                           
 33259                           ;arpeggio.c: 80: if(NUM_NOTES_PRESSED > 0) {NUM_NOTES_PRESSED--;}
 33260  0096CE  502F               	movf	_NUM_NOTES_PRESSED,w,c
 33261  0096D0  A4D8               	btfss	status,2,c
 33262  0096D2  062F               	decf	_NUM_NOTES_PRESSED,f,c
 33263                           
 33264                           ;arpeggio.c: 85: if(NUM_NOTES_PRESSED == 0) {ARRAY_INDEX = 0;}
 33265  0096D4  502F               	movf	_NUM_NOTES_PRESSED,w,c
 33266  0096D6  A4D8               	btfss	status,2,c
 33267  0096D8  D003               	goto	l5419
 33268  0096DA  0E00               	movlw	0
 33269  0096DC  0100               	movlb	0	; () banked
 33270  0096DE  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 33271  0096E0                     l5419:
 33272                           
 33273                           ;arpeggio.c: 88: if(ARRAY_INDEX > 0){ARRAY_INDEX--;}
 33274  0096E0  0100               	movlb	0	; () banked
 33275  0096E2  51EB               	movf	_ARRAY_INDEX& (0+255),w,b
 33276  0096E4  B4D8               	btfsc	status,2,c
 33277  0096E6  0012               	return	
 33278                           
 33279                           ; BSR set to: 0
 33280  0096E8  07EB               	decf	_ARRAY_INDEX& (0+255),f,b
 33281  0096EA  0012               	return	
 33282  0096EC                     __end_of_delete_notes_from_arpeggio:
 33283                           	opt stack 0
 33284                           tblptru	equ	0xFF8
 33285                           tblptrh	equ	0xFF7
 33286                           tblptrl	equ	0xFF6
 33287                           tablat	equ	0xFF5
 33288                           prodh	equ	0xFF4
 33289                           prodl	equ	0xFF3
 33290                           intcon	equ	0xFF2
 33291                           intcon2	equ	0xFF1
 33292                           indf0	equ	0xFEF
 33293                           postinc0	equ	0xFEE
 33294                           fsr0h	equ	0xFEA
 33295                           fsr0l	equ	0xFE9
 33296                           wreg	equ	0xFE8
 33297                           postinc1	equ	0xFE6
 33298                           postdec1	equ	0xFE5
 33299                           plusw1	equ	0xFE3
 33300                           fsr1h	equ	0xFE2
 33301                           fsr1l	equ	0xFE1
 33302                           indf2	equ	0xFDF
 33303                           postinc2	equ	0xFDE
 33304                           postdec2	equ	0xFDD
 33305                           plusw2	equ	0xFDB
 33306                           fsr2h	equ	0xFDA
 33307                           fsr2l	equ	0xFD9
 33308                           status	equ	0xFD8
 33309                           
 33310 ;; *************** function _findArrayIndex *****************
 33311 ;; Defined at:
 33312 ;;		line 516 in file "arpeggio.c"
 33313 ;; Parameters:    Size  Location     Type
 33314 ;;  pitch_of_key    1    wreg     unsigned char 
 33315 ;; Auto vars:     Size  Location     Type
 33316 ;;  pitch_of_key    1    1[BANK0 ] unsigned char 
 33317 ;;  i               1    2[BANK0 ] unsigned char 
 33318 ;; Return value:  Size  Location     Type
 33319 ;;                  1    wreg      char 
 33320 ;; Registers used:
 33321 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 33322 ;; Tracked objects:
 33323 ;;		On entry : 0/0
 33324 ;;		On exit  : 0/0
 33325 ;;		Unchanged: 0/0
 33326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33328 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33329 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33330 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33331 ;;Total ram usage:        3 bytes
 33332 ;; Hardware stack levels used:    1
 33333 ;; Hardware stack levels required when called:    5
 33334 ;; This function calls:
 33335 ;;		Nothing
 33336 ;; This function is called by:
 33337 ;;		_delete_notes_from_arpeggio
 33338 ;; This function uses a non-reentrant model
 33339 ;;
 33340                           
 33341                           	psect	text91
 33342  00955C                     __ptext91:
 33343                           	opt stack 0
 33344  00955C                     _findArrayIndex:
 33345                           	opt stack 17
 33346                           
 33347                           ; BSR set to: 0
 33348                           ;incstack = 0
 33349                           ;findArrayIndex@pitch_of_key_release stored from wreg
 33350  00955C  0100               	movlb	0	; () banked
 33351  00955E  6F61               	movwf	findArrayIndex@pitch_of_key_release& (0+255),b
 33352                           
 33353                           ;arpeggio.c: 518: for (unsigned char i=0;i<MAX_NUM_NOTES;i++){
 33354  009560  0E00               	movlw	0
 33355  009562  0100               	movlb	0	; () banked
 33356  009564  6F62               	movwf	findArrayIndex@i& (0+255),b
 33357  009566                     l26290:
 33358                           
 33359                           ; BSR set to: 0
 33360  009566  0E9D               	movlw	low _MAX_NUM_NOTES
 33361  009568  6EF6               	movwf	tblptrl,c
 33362  00956A                     	if	1	;There is more than 1 active tblptr byte
 33363  00956A  0EF3               	movlw	high _MAX_NUM_NOTES
 33364  00956C  6EF7               	movwf	tblptrh,c
 33365  00956E                     	endif
 33366  00956E                     	if	0	;There are less than 3 active tblptr bytes
 33367  00956E                     	endif
 33368  00956E  0009               	tblrd		*+
 33369  009570  50F5               	movf	tablat,w,c
 33370  009572  5D62               	subwf	findArrayIndex@i& (0+255),w,b
 33371  009574  B0D8               	btfsc	status,0,c
 33372  009576  0012               	return	
 33373                           
 33374                           ; BSR set to: 0
 33375                           ;arpeggio.c: 519: if(ARPEGGIO[i] == pitch_of_key_release){return i;}
 33376                           
 33377                           ; BSR set to: 0
 33378                           
 33379                           ; BSR set to: 0
 33380  009578  5162               	movf	findArrayIndex@i& (0+255),w,b
 33381  00957A  0D01               	mullw	1
 33382  00957C  0E82               	movlw	low _ARPEGGIO
 33383  00957E  24F3               	addwf	prodl,w,c
 33384  009580  6ED9               	movwf	fsr2l,c
 33385  009582  0E01               	movlw	high _ARPEGGIO
 33386  009584  20F4               	addwfc	prodh,w,c
 33387  009586  6EDA               	movwf	fsr2h,c
 33388  009588  5161               	movf	findArrayIndex@pitch_of_key_release& (0+255),w,b
 33389  00958A  18DE               	xorwf	postinc2,w,c
 33390  00958C  A4D8               	btfss	status,2,c
 33391  00958E  D002               	goto	l26300
 33392                           
 33393                           ; BSR set to: 0
 33394  009590  5162               	movf	findArrayIndex@i& (0+255),w,b
 33395                           
 33396                           ; BSR set to: 0
 33397  009592  0012               	return	
 33398  009594                     l26300:
 33399                           
 33400                           ; BSR set to: 0
 33401                           
 33402                           ; BSR set to: 0
 33403                           
 33404                           ;arpeggio.c: 520: else{;}
 33405                           
 33406                           ; BSR set to: 0
 33407                           
 33408                           ; BSR set to: 0
 33409  009594  2B62               	incf	findArrayIndex@i& (0+255),f,b
 33410  009596  D7E7               	goto	l26290
 33411  009598                     __end_of_findArrayIndex:
 33412                           	opt stack 0
 33413                           tblptru	equ	0xFF8
 33414                           tblptrh	equ	0xFF7
 33415                           tblptrl	equ	0xFF6
 33416                           tablat	equ	0xFF5
 33417                           prodh	equ	0xFF4
 33418                           prodl	equ	0xFF3
 33419                           intcon	equ	0xFF2
 33420                           intcon2	equ	0xFF1
 33421                           indf0	equ	0xFEF
 33422                           postinc0	equ	0xFEE
 33423                           fsr0h	equ	0xFEA
 33424                           fsr0l	equ	0xFE9
 33425                           wreg	equ	0xFE8
 33426                           postinc1	equ	0xFE6
 33427                           postdec1	equ	0xFE5
 33428                           plusw1	equ	0xFE3
 33429                           fsr1h	equ	0xFE2
 33430                           fsr1l	equ	0xFE1
 33431                           indf2	equ	0xFDF
 33432                           postinc2	equ	0xFDE
 33433                           postdec2	equ	0xFDD
 33434                           plusw2	equ	0xFDB
 33435                           fsr2h	equ	0xFDA
 33436                           fsr2l	equ	0xFD9
 33437                           status	equ	0xFD8
 33438                           
 33439 ;; *************** function _add_notes_to_arpeggio *****************
 33440 ;; Defined at:
 33441 ;;		line 39 in file "arpeggio.c"
 33442 ;; Parameters:    Size  Location     Type
 33443 ;;  pitch           1    wreg     unsigned char 
 33444 ;; Auto vars:     Size  Location     Type
 33445 ;;  pitch           1   16[BANK0 ] unsigned char 
 33446 ;; Return value:  Size  Location     Type
 33447 ;;                  1    wreg      void 
 33448 ;; Registers used:
 33449 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33450 ;; Tracked objects:
 33451 ;;		On entry : 0/0
 33452 ;;		On exit  : 0/0
 33453 ;;		Unchanged: 0/0
 33454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33456 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33457 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33458 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33459 ;;Total ram usage:        8 bytes
 33460 ;; Hardware stack levels used:    1
 33461 ;; Hardware stack levels required when called:    6
 33462 ;; This function calls:
 33463 ;;		_rotateArrayLeft
 33464 ;; This function is called by:
 33465 ;;		_playThisNotePentatonic
 33466 ;;		_playThisNote
 33467 ;;		_playThisNote8
 33468 ;; This function uses a non-reentrant model
 33469 ;;
 33470                           
 33471                           	psect	text92
 33472  0069E8                     __ptext92:
 33473                           	opt stack 0
 33474  0069E8                     _add_notes_to_arpeggio:
 33475                           	opt stack 17
 33476                           
 33477                           ; BSR set to: 0
 33478                           ;incstack = 0
 33479                           ;add_notes_to_arpeggio@pitch stored from wreg
 33480  0069E8  0100               	movlb	0	; () banked
 33481  0069EA  6F70               	movwf	add_notes_to_arpeggio@pitch& (0+255),b
 33482                           
 33483                           ;arpeggio.c: 43: if(ARRAY_INDEX > (MAX_NUM_NOTES - 1)){
 33484  0069EC  0100               	movlb	0	; () banked
 33485  0069EE  51EB               	movf	_ARRAY_INDEX& (0+255),w,b
 33486  0069F0  6F69               	movwf	??_add_notes_to_arpeggio& (0+255),b
 33487  0069F2  6B6A               	clrf	(??_add_notes_to_arpeggio+1)& (0+255),b
 33488  0069F4  0EFF               	movlw	255
 33489  0069F6  6F6B               	movwf	(??_add_notes_to_arpeggio+2)& (0+255),b
 33490  0069F8  0EFF               	movlw	255
 33491  0069FA  6F6C               	movwf	(??_add_notes_to_arpeggio+3)& (0+255),b
 33492  0069FC  0E9D               	movlw	low _MAX_NUM_NOTES
 33493  0069FE  6EF6               	movwf	tblptrl,c
 33494  006A00                     	if	1	;There is more than 1 active tblptr byte
 33495  006A00  0EF3               	movlw	high _MAX_NUM_NOTES
 33496  006A02  6EF7               	movwf	tblptrh,c
 33497  006A04                     	endif
 33498  006A04                     	if	0	;There are less than 3 active tblptr bytes
 33499  006A04                     	endif
 33500  006A04  0008               	tblrd		*
 33501  006A06  50F5               	movf	tablat,w,c
 33502  006A08  6F6D               	movwf	(??_add_notes_to_arpeggio+4)& (0+255),b
 33503  006A0A  6B6E               	clrf	(??_add_notes_to_arpeggio+5)& (0+255),b
 33504  006A0C  516B               	movf	(??_add_notes_to_arpeggio+2)& (0+255),w,b
 33505  006A0E  276D               	addwf	(??_add_notes_to_arpeggio+4)& (0+255),f,b
 33506  006A10  516C               	movf	(??_add_notes_to_arpeggio+3)& (0+255),w,b
 33507  006A12  236E               	addwfc	(??_add_notes_to_arpeggio+5)& (0+255),f,b
 33508  006A14  5169               	movf	??_add_notes_to_arpeggio& (0+255),w,b
 33509  006A16  5D6D               	subwf	(??_add_notes_to_arpeggio+4)& (0+255),w,b
 33510  006A18  516E               	movf	(??_add_notes_to_arpeggio+5)& (0+255),w,b
 33511  006A1A  0A80               	xorlw	128
 33512  006A1C  6F6F               	movwf	(??_add_notes_to_arpeggio+6)& (0+255),b
 33513  006A1E  516A               	movf	(??_add_notes_to_arpeggio+1)& (0+255),w,b
 33514  006A20  0A80               	xorlw	128
 33515  006A22  596F               	subwfb	(??_add_notes_to_arpeggio+6)& (0+255),w,b
 33516  006A24  B0D8               	btfsc	status,0,c
 33517  006A26  D025               	goto	l5412
 33518                           
 33519                           ; BSR set to: 0
 33520                           ;arpeggio.c: 44: ARRAY_INDEX = MAX_NUM_NOTES - 1;
 33521  006A28  0E9D               	movlw	low _MAX_NUM_NOTES
 33522  006A2A  6EF6               	movwf	tblptrl,c
 33523  006A2C                     	if	1	;There is more than 1 active tblptr byte
 33524  006A2C  0EF3               	movlw	high _MAX_NUM_NOTES
 33525  006A2E  6EF7               	movwf	tblptrh,c
 33526  006A30                     	endif
 33527  006A30                     	if	0	;There are less than 3 active tblptr bytes
 33528  006A30                     	endif
 33529  006A30  0008               	tblrd		*
 33530  006A32  CFF5 F069          	movff	tablat,??_add_notes_to_arpeggio
 33531  006A36  0569               	decf	??_add_notes_to_arpeggio& (0+255),w,b
 33532  006A38  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 33533                           
 33534                           ; BSR set to: 0
 33535                           ;arpeggio.c: 45: rotateArrayLeft(0);
 33536  006A3A  0E00               	movlw	0
 33537  006A3C  EC6F  F044         	call	_rotateArrayLeft
 33538                           
 33539                           ;arpeggio.c: 46: ARPEGGIO[MAX_NUM_NOTES - 1] = pitch;
 33540  006A40  0EFF               	movlw	255
 33541  006A42  0100               	movlb	0	; () banked
 33542  006A44  6F69               	movwf	??_add_notes_to_arpeggio& (0+255),b
 33543  006A46  0EFF               	movlw	255
 33544  006A48  6F6A               	movwf	(??_add_notes_to_arpeggio+1)& (0+255),b
 33545  006A4A  0E9D               	movlw	low _MAX_NUM_NOTES
 33546  006A4C  6EF6               	movwf	tblptrl,c
 33547  006A4E                     	if	1	;There is more than 1 active tblptr byte
 33548  006A4E  0EF3               	movlw	high _MAX_NUM_NOTES
 33549  006A50  6EF7               	movwf	tblptrh,c
 33550  006A52                     	endif
 33551  006A52                     	if	0	;There are less than 3 active tblptr bytes
 33552  006A52                     	endif
 33553  006A52  0008               	tblrd		*
 33554  006A54  50F5               	movf	tablat,w,c
 33555  006A56  6F6B               	movwf	(??_add_notes_to_arpeggio+2)& (0+255),b
 33556  006A58  6B6C               	clrf	(??_add_notes_to_arpeggio+3)& (0+255),b
 33557  006A5A  5169               	movf	??_add_notes_to_arpeggio& (0+255),w,b
 33558  006A5C  276B               	addwf	(??_add_notes_to_arpeggio+2)& (0+255),f,b
 33559  006A5E  516A               	movf	(??_add_notes_to_arpeggio+1)& (0+255),w,b
 33560  006A60  236C               	addwfc	(??_add_notes_to_arpeggio+3)& (0+255),f,b
 33561  006A62  0E82               	movlw	low _ARPEGGIO
 33562  006A64  256B               	addwf	(??_add_notes_to_arpeggio+2)& (0+255),w,b
 33563  006A66  6ED9               	movwf	fsr2l,c
 33564  006A68  0E01               	movlw	high _ARPEGGIO
 33565  006A6A  216C               	addwfc	(??_add_notes_to_arpeggio+3)& (0+255),w,b
 33566  006A6C  6EDA               	movwf	fsr2h,c
 33567  006A6E  C070  FFDF         	movff	add_notes_to_arpeggio@pitch,indf2
 33568  006A72                     l5412:
 33569                           
 33570                           ; BSR set to: 0
 33571                           ;arpeggio.c: 47: }
 33572                           ;arpeggio.c: 49: if(ARRAY_INDEX <= (MAX_NUM_NOTES - 1)){
 33573                           
 33574                           ; BSR set to: 0
 33575  006A72  51EB               	movf	_ARRAY_INDEX& (0+255),w,b
 33576  006A74  6F69               	movwf	??_add_notes_to_arpeggio& (0+255),b
 33577  006A76  6B6A               	clrf	(??_add_notes_to_arpeggio+1)& (0+255),b
 33578  006A78  0EFF               	movlw	255
 33579  006A7A  6F6B               	movwf	(??_add_notes_to_arpeggio+2)& (0+255),b
 33580  006A7C  0EFF               	movlw	255
 33581  006A7E  6F6C               	movwf	(??_add_notes_to_arpeggio+3)& (0+255),b
 33582  006A80  0E9D               	movlw	low _MAX_NUM_NOTES
 33583  006A82  6EF6               	movwf	tblptrl,c
 33584  006A84                     	if	1	;There is more than 1 active tblptr byte
 33585  006A84  0EF3               	movlw	high _MAX_NUM_NOTES
 33586  006A86  6EF7               	movwf	tblptrh,c
 33587  006A88                     	endif
 33588  006A88                     	if	0	;There are less than 3 active tblptr bytes
 33589  006A88                     	endif
 33590  006A88  0008               	tblrd		*
 33591  006A8A  50F5               	movf	tablat,w,c
 33592  006A8C  6F6D               	movwf	(??_add_notes_to_arpeggio+4)& (0+255),b
 33593  006A8E  6B6E               	clrf	(??_add_notes_to_arpeggio+5)& (0+255),b
 33594  006A90  516B               	movf	(??_add_notes_to_arpeggio+2)& (0+255),w,b
 33595  006A92  276D               	addwf	(??_add_notes_to_arpeggio+4)& (0+255),f,b
 33596  006A94  516C               	movf	(??_add_notes_to_arpeggio+3)& (0+255),w,b
 33597  006A96  236E               	addwfc	(??_add_notes_to_arpeggio+5)& (0+255),f,b
 33598  006A98  5169               	movf	??_add_notes_to_arpeggio& (0+255),w,b
 33599  006A9A  5D6D               	subwf	(??_add_notes_to_arpeggio+4)& (0+255),w,b
 33600  006A9C  516E               	movf	(??_add_notes_to_arpeggio+5)& (0+255),w,b
 33601  006A9E  0A80               	xorlw	128
 33602  006AA0  6F6F               	movwf	(??_add_notes_to_arpeggio+6)& (0+255),b
 33603  006AA2  516A               	movf	(??_add_notes_to_arpeggio+1)& (0+255),w,b
 33604  006AA4  0A80               	xorlw	128
 33605  006AA6  596F               	subwfb	(??_add_notes_to_arpeggio+6)& (0+255),w,b
 33606  006AA8  A0D8               	btfss	status,0,c
 33607  006AAA  D00B               	goto	l5413
 33608                           
 33609                           ; BSR set to: 0
 33610                           ;arpeggio.c: 51: ARPEGGIO[ARRAY_INDEX] = pitch;
 33611  006AAC  51EB               	movf	_ARRAY_INDEX& (0+255),w,b
 33612  006AAE  0D01               	mullw	1
 33613  006AB0  0E82               	movlw	low _ARPEGGIO
 33614  006AB2  24F3               	addwf	prodl,w,c
 33615  006AB4  6ED9               	movwf	fsr2l,c
 33616  006AB6  0E01               	movlw	high _ARPEGGIO
 33617  006AB8  20F4               	addwfc	prodh,w,c
 33618  006ABA  6EDA               	movwf	fsr2h,c
 33619  006ABC  C070  FFDF         	movff	add_notes_to_arpeggio@pitch,indf2
 33620                           
 33621                           ; BSR set to: 0
 33622                           ;arpeggio.c: 53: ARRAY_INDEX++;
 33623  006AC0  2BEB               	incf	_ARRAY_INDEX& (0+255),f,b
 33624  006AC2                     l5413:
 33625                           
 33626                           ; BSR set to: 0
 33627                           ;arpeggio.c: 54: }
 33628                           ;arpeggio.c: 57: NUM_NOTES_PRESSED++;
 33629                           
 33630                           ; BSR set to: 0
 33631  006AC2  2A2F               	incf	_NUM_NOTES_PRESSED,f,c
 33632                           
 33633                           ; BSR set to: 0
 33634                           ;arpeggio.c: 59: if(NUM_NOTES_PRESSED > MAX_NUM_NOTES){NUM_NOTES_PRESSED = MAX_NUM_NOTES
      +                          ;}
 33635  006AC4  0E9D               	movlw	low _MAX_NUM_NOTES
 33636  006AC6  6EF6               	movwf	tblptrl,c
 33637  006AC8                     	if	1	;There is more than 1 active tblptr byte
 33638  006AC8  0EF3               	movlw	high _MAX_NUM_NOTES
 33639  006ACA  6EF7               	movwf	tblptrh,c
 33640  006ACC                     	endif
 33641  006ACC                     	if	0	;There are less than 3 active tblptr bytes
 33642  006ACC                     	endif
 33643  006ACC  502F               	movf	_NUM_NOTES_PRESSED,w,c
 33644  006ACE  0009               	tblrd		*+
 33645  006AD0  5CF5               	subwf	tablat,w,c
 33646  006AD2  B0D8               	btfsc	status,0,c
 33647  006AD4  0012               	return	
 33648                           
 33649                           ; BSR set to: 0
 33650  006AD6  0E9D               	movlw	low _MAX_NUM_NOTES
 33651  006AD8  6EF6               	movwf	tblptrl,c
 33652  006ADA                     	if	1	;There is more than 1 active tblptr byte
 33653  006ADA  0EF3               	movlw	high _MAX_NUM_NOTES
 33654  006ADC  6EF7               	movwf	tblptrh,c
 33655  006ADE                     	endif
 33656  006ADE                     	if	0	;There are less than 3 active tblptr bytes
 33657  006ADE                     	endif
 33658  006ADE  0008               	tblrd		*
 33659  006AE0  CFF5 F02F          	movff	tablat,_NUM_NOTES_PRESSED
 33660  006AE4  0012               	return	
 33661  006AE6                     __end_of_add_notes_to_arpeggio:
 33662                           	opt stack 0
 33663                           tblptru	equ	0xFF8
 33664                           tblptrh	equ	0xFF7
 33665                           tblptrl	equ	0xFF6
 33666                           tablat	equ	0xFF5
 33667                           prodh	equ	0xFF4
 33668                           prodl	equ	0xFF3
 33669                           intcon	equ	0xFF2
 33670                           intcon2	equ	0xFF1
 33671                           indf0	equ	0xFEF
 33672                           postinc0	equ	0xFEE
 33673                           fsr0h	equ	0xFEA
 33674                           fsr0l	equ	0xFE9
 33675                           wreg	equ	0xFE8
 33676                           postinc1	equ	0xFE6
 33677                           postdec1	equ	0xFE5
 33678                           plusw1	equ	0xFE3
 33679                           fsr1h	equ	0xFE2
 33680                           fsr1l	equ	0xFE1
 33681                           indf2	equ	0xFDF
 33682                           postinc2	equ	0xFDE
 33683                           postdec2	equ	0xFDD
 33684                           plusw2	equ	0xFDB
 33685                           fsr2h	equ	0xFDA
 33686                           fsr2l	equ	0xFD9
 33687                           status	equ	0xFD8
 33688                           
 33689 ;; *************** function _rotateArrayLeft *****************
 33690 ;; Defined at:
 33691 ;;		line 584 in file "arpeggio.c"
 33692 ;; Parameters:    Size  Location     Type
 33693 ;;  array_index     1    wreg     unsigned char 
 33694 ;; Auto vars:     Size  Location     Type
 33695 ;;  array_index     1    7[BANK0 ] unsigned char 
 33696 ;;  i               1    8[BANK0 ] unsigned char 
 33697 ;; Return value:  Size  Location     Type
 33698 ;;                  1    wreg      void 
 33699 ;; Registers used:
 33700 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 33701 ;; Tracked objects:
 33702 ;;		On entry : 0/0
 33703 ;;		On exit  : 0/0
 33704 ;;		Unchanged: 0/0
 33705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33707 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33708 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33709 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33710 ;;Total ram usage:        9 bytes
 33711 ;; Hardware stack levels used:    1
 33712 ;; Hardware stack levels required when called:    5
 33713 ;; This function calls:
 33714 ;;		Nothing
 33715 ;; This function is called by:
 33716 ;;		_add_notes_to_arpeggio
 33717 ;;		_delete_notes_from_arpeggio
 33718 ;; This function uses a non-reentrant model
 33719 ;;
 33720                           
 33721                           	psect	text93
 33722  0088DE                     __ptext93:
 33723                           	opt stack 0
 33724  0088DE                     _rotateArrayLeft:
 33725                           	opt stack 17
 33726                           
 33727                           ; BSR set to: 0
 33728                           ;incstack = 0
 33729                           ;rotateArrayLeft@array_index stored from wreg
 33730  0088DE  0100               	movlb	0	; () banked
 33731  0088E0  6F67               	movwf	rotateArrayLeft@array_index& (0+255),b
 33732                           
 33733                           ;arpeggio.c: 607: for(unsigned char i=array_index; i < (MAX_NUM_NOTES - 1) ;i++)
 33734  0088E2  C067  F068         	movff	rotateArrayLeft@array_index,rotateArrayLeft@i
 33735  0088E6  0EFF               	movlw	255
 33736  0088E8  0100               	movlb	0	; () banked
 33737  0088EA  6F60               	movwf	??_rotateArrayLeft& (0+255),b
 33738  0088EC  0EFF               	movlw	255
 33739  0088EE  6F61               	movwf	(??_rotateArrayLeft+1)& (0+255),b
 33740  0088F0  0E9D               	movlw	low _MAX_NUM_NOTES
 33741  0088F2  6EF6               	movwf	tblptrl,c
 33742  0088F4                     	if	1	;There is more than 1 active tblptr byte
 33743  0088F4  0EF3               	movlw	high _MAX_NUM_NOTES
 33744  0088F6  6EF7               	movwf	tblptrh,c
 33745  0088F8                     	endif
 33746  0088F8                     	if	0	;There are less than 3 active tblptr bytes
 33747  0088F8                     	endif
 33748  0088F8  0008               	tblrd		*
 33749  0088FA  50F5               	movf	tablat,w,c
 33750  0088FC  6F62               	movwf	(??_rotateArrayLeft+2)& (0+255),b
 33751  0088FE  6B63               	clrf	(??_rotateArrayLeft+3)& (0+255),b
 33752  008900  5160               	movf	??_rotateArrayLeft& (0+255),w,b
 33753  008902  2762               	addwf	(??_rotateArrayLeft+2)& (0+255),f,b
 33754  008904  5161               	movf	(??_rotateArrayLeft+1)& (0+255),w,b
 33755  008906  2363               	addwfc	(??_rotateArrayLeft+3)& (0+255),f,b
 33756  008908  5168               	movf	rotateArrayLeft@i& (0+255),w,b
 33757  00890A  6F64               	movwf	(??_rotateArrayLeft+4)& (0+255),b
 33758  00890C  6B65               	clrf	(??_rotateArrayLeft+5)& (0+255),b
 33759  00890E  5162               	movf	(??_rotateArrayLeft+2)& (0+255),w,b
 33760  008910  5D64               	subwf	(??_rotateArrayLeft+4)& (0+255),w,b
 33761  008912  5165               	movf	(??_rotateArrayLeft+5)& (0+255),w,b
 33762  008914  0A80               	xorlw	128
 33763  008916  6F66               	movwf	(??_rotateArrayLeft+6)& (0+255),b
 33764  008918  5163               	movf	(??_rotateArrayLeft+3)& (0+255),w,b
 33765  00891A  0A80               	xorlw	128
 33766  00891C  5966               	subwfb	(??_rotateArrayLeft+6)& (0+255),w,b
 33767  00891E  B0D8               	btfsc	status,0,c
 33768  008920  0012               	return	
 33769                           
 33770                           ; BSR set to: 0
 33771                           ;arpeggio.c: 608: {
 33772                           ;arpeggio.c: 609: ARPEGGIO[i]=ARPEGGIO[i+1];
 33773                           
 33774                           ; BSR set to: 0
 33775                           
 33776                           ; BSR set to: 0
 33777  008922  5168               	movf	rotateArrayLeft@i& (0+255),w,b
 33778  008924  6F60               	movwf	??_rotateArrayLeft& (0+255),b
 33779  008926  6B61               	clrf	(??_rotateArrayLeft+1)& (0+255),b
 33780  008928  0E01               	movlw	1
 33781  00892A  2760               	addwf	??_rotateArrayLeft& (0+255),f,b
 33782  00892C  0E00               	movlw	0
 33783  00892E  2361               	addwfc	(??_rotateArrayLeft+1)& (0+255),f,b
 33784  008930  0E82               	movlw	low _ARPEGGIO
 33785  008932  2560               	addwf	??_rotateArrayLeft& (0+255),w,b
 33786  008934  6ED9               	movwf	fsr2l,c
 33787  008936  0E01               	movlw	high _ARPEGGIO
 33788  008938  2161               	addwfc	(??_rotateArrayLeft+1)& (0+255),w,b
 33789  00893A  6EDA               	movwf	fsr2h,c
 33790  00893C  5168               	movf	rotateArrayLeft@i& (0+255),w,b
 33791  00893E  0D01               	mullw	1
 33792  008940  0E82               	movlw	low _ARPEGGIO
 33793  008942  24F3               	addwf	prodl,w,c
 33794  008944  6EE9               	movwf	fsr0l,c
 33795  008946  0E01               	movlw	high _ARPEGGIO
 33796  008948  20F4               	addwfc	prodh,w,c
 33797  00894A  6EEA               	movwf	fsr0h,c
 33798  00894C  CFDF FFEF          	movff	indf2,indf0
 33799                           
 33800                           ; BSR set to: 0
 33801  008950  2B68               	incf	rotateArrayLeft@i& (0+255),f,b
 33802                           
 33803                           ; BSR set to: 0
 33804  008952  0EFF               	movlw	255
 33805  008954  D7CA               	goto	L20
 33806  008956                     __end_of_rotateArrayLeft:
 33807                           	opt stack 0
 33808                           tblptru	equ	0xFF8
 33809                           tblptrh	equ	0xFF7
 33810                           tblptrl	equ	0xFF6
 33811                           tablat	equ	0xFF5
 33812                           prodh	equ	0xFF4
 33813                           prodl	equ	0xFF3
 33814                           intcon	equ	0xFF2
 33815                           intcon2	equ	0xFF1
 33816                           indf0	equ	0xFEF
 33817                           postinc0	equ	0xFEE
 33818                           fsr0h	equ	0xFEA
 33819                           fsr0l	equ	0xFE9
 33820                           wreg	equ	0xFE8
 33821                           postinc1	equ	0xFE6
 33822                           postdec1	equ	0xFE5
 33823                           plusw1	equ	0xFE3
 33824                           fsr1h	equ	0xFE2
 33825                           fsr1l	equ	0xFE1
 33826                           indf2	equ	0xFDF
 33827                           postinc2	equ	0xFDE
 33828                           postdec2	equ	0xFDD
 33829                           plusw2	equ	0xFDB
 33830                           fsr2h	equ	0xFDA
 33831                           fsr2l	equ	0xFD9
 33832                           status	equ	0xFD8
 33833                           
 33834 ;; *************** function _processDrumpad *****************
 33835 ;; Defined at:
 33836 ;;		line 21 in file "drum.c"
 33837 ;; Parameters:    Size  Location     Type
 33838 ;;		None
 33839 ;; Auto vars:     Size  Location     Type
 33840 ;;		None
 33841 ;; Return value:  Size  Location     Type
 33842 ;;                  1    wreg      void 
 33843 ;; Registers used:
 33844 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
 33845 ;; Tracked objects:
 33846 ;;		On entry : 0/0
 33847 ;;		On exit  : 0/0
 33848 ;;		Unchanged: 0/0
 33849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33854 ;;Total ram usage:        0 bytes
 33855 ;; Hardware stack levels used:    1
 33856 ;; Hardware stack levels required when called:    9
 33857 ;; This function calls:
 33858 ;;		_controlChange
 33859 ;;		_noteOffDrum
 33860 ;;		_noteOnDrum
 33861 ;; This function is called by:
 33862 ;;		_digitalInputs
 33863 ;; This function uses a non-reentrant model
 33864 ;;
 33865                           
 33866                           	psect	text94
 33867  001DB2                     __ptext94:
 33868                           	opt stack 0
 33869  001DB2                     _processDrumpad:
 33870                           	opt stack 17
 33871                           
 33872                           ;drum.c: 25: if((drum_button_state_now & 0x01) && !(button_state_now & 0x08000000) && !d
      +                          rum.SW1){
 33873                           
 33874                           ; BSR set to: 0
 33875                           ;incstack = 0
 33876  001DB2  A039               	btfss	_drum_button_state_now,0,c
 33877  001DB4  D034               	goto	l2374
 33878  001DB6  0100               	movlb	0	; () banked
 33879  001DB8  A7DB               	btfss	(_button_state_now+3)& (0+255),3,b
 33880                           
 33881                           ; BSR set to: 0
 33882  001DBA  B037               	btfsc	_drum,0,c
 33883  001DBC  D030               	goto	l2374
 33884                           
 33885                           ; BSR set to: 0
 33886                           ;drum.c: 26: drum.SW1 = 1;
 33887  001DBE  8037               	bsf	_drum,0,c
 33888                           
 33889                           ;drum.c: 27: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[0],velocity);}
 33890  001DC0  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 33891  001DC2  D007               	goto	l2375
 33892                           
 33893                           ; BSR set to: 0
 33894  001DC4  C1E7  F060         	movff	_DRUM_NOTE,noteOnDrum@pitch
 33895  001DC8  C051  F061         	movff	_velocity,noteOnDrum@velocity
 33896  001DCC  5052               	movf	_drumchannel,w,c
 33897  001DCE  ECF5  F048         	call	_noteOnDrum
 33898  001DD2                     l2375:
 33899                           
 33900                           ;drum.c: 28: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[0], 
      +                          127);}
 33901  001DD2  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 33902  001DD4  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 33903  001DD6  D008               	goto	l2376
 33904  001DD8  C0F5  F060         	movff	_DRUM_CC,controlChange@controllerNumber
 33905  001DDC  0E7F               	movlw	127
 33906  001DDE  0100               	movlb	0	; () banked
 33907  001DE0  6F61               	movwf	controlChange@value& (0+255),b
 33908  001DE2  503E               	movf	_channel,w,c
 33909  001DE4  ECC9  F048         	call	_controlChange
 33910  001DE8                     l2376:
 33911                           
 33912                           ;drum.c: 29: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 0) {controlChan
      +                          ge(channel,DRUM_CC[0], 127);}
 33913  001DE8  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 33914  001DEA  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 33915  001DEC  D00A               	goto	l2377
 33916  001DEE  B02D               	btfsc	_toggle_state,0,c
 33917  001DF0  D008               	goto	l2377
 33918  001DF2  C0F5  F060         	movff	_DRUM_CC,controlChange@controllerNumber
 33919  001DF6  0E7F               	movlw	127
 33920  001DF8  0100               	movlb	0	; () banked
 33921  001DFA  6F61               	movwf	controlChange@value& (0+255),b
 33922  001DFC  503E               	movf	_channel,w,c
 33923  001DFE  ECC9  F048         	call	_controlChange
 33924  001E02                     l2377:
 33925                           
 33926                           ;drum.c: 30: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 1) {controlChan
      +                          ge(channel,DRUM_CC[0], 0);}
 33927  001E02  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 33928  001E04  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 33929  001E06  D00A               	goto	l2378
 33930  001E08  A02D               	btfss	_toggle_state,0,c
 33931  001E0A  D008               	goto	l2378
 33932  001E0C  C0F5  F060         	movff	_DRUM_CC,controlChange@controllerNumber
 33933  001E10  0E00               	movlw	0
 33934  001E12  0100               	movlb	0	; () banked
 33935  001E14  6F61               	movwf	controlChange@value& (0+255),b
 33936  001E16  503E               	movf	_channel,w,c
 33937  001E18  ECC9  F048         	call	_controlChange
 33938  001E1C                     l2378:
 33939                           
 33940                           ;drum.c: 31: toggle_state.T1 ^= 1;
 33941  001E1C  702D               	btg	_toggle_state,0,c
 33942  001E1E                     l2374:
 33943                           
 33944                           ;drum.c: 32: }
 33945                           ;drum.c: 33: if(((drum_button_state_now) & 0x02) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW2) {
 33946  001E1E  A239               	btfss	_drum_button_state_now,1,c
 33947  001E20  D034               	goto	l2379
 33948  001E22  0100               	movlb	0	; () banked
 33949  001E24  A7DB               	btfss	(_button_state_now+3)& (0+255),3,b
 33950                           
 33951                           ; BSR set to: 0
 33952  001E26  B237               	btfsc	_drum,1,c
 33953  001E28  D030               	goto	l2379
 33954                           
 33955                           ; BSR set to: 0
 33956                           ;drum.c: 34: drum.SW2 = 1;
 33957  001E2A  8237               	bsf	_drum,1,c
 33958                           
 33959                           ;drum.c: 35: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[1],velocity);}
 33960  001E2C  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 33961  001E2E  D007               	goto	l2380
 33962                           
 33963                           ; BSR set to: 0
 33964  001E30  C1E8  F060         	movff	_DRUM_NOTE+1,noteOnDrum@pitch
 33965  001E34  C051  F061         	movff	_velocity,noteOnDrum@velocity
 33966  001E38  5052               	movf	_drumchannel,w,c
 33967  001E3A  ECF5  F048         	call	_noteOnDrum
 33968  001E3E                     l2380:
 33969                           
 33970                           ;drum.c: 36: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[1], 
      +                          127);}
 33971  001E3E  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 33972  001E40  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 33973  001E42  D008               	goto	l2381
 33974  001E44  C0F6  F060         	movff	_DRUM_CC+1,controlChange@controllerNumber
 33975  001E48  0E7F               	movlw	127
 33976  001E4A  0100               	movlb	0	; () banked
 33977  001E4C  6F61               	movwf	controlChange@value& (0+255),b
 33978  001E4E  503E               	movf	_channel,w,c
 33979  001E50  ECC9  F048         	call	_controlChange
 33980  001E54                     l2381:
 33981                           
 33982                           ;drum.c: 37: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 0) {controlChan
      +                          ge(channel,DRUM_CC[1], 127);}
 33983  001E54  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 33984  001E56  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 33985  001E58  D00A               	goto	l2382
 33986  001E5A  B22D               	btfsc	_toggle_state,1,c
 33987  001E5C  D008               	goto	l2382
 33988  001E5E  C0F6  F060         	movff	_DRUM_CC+1,controlChange@controllerNumber
 33989  001E62  0E7F               	movlw	127
 33990  001E64  0100               	movlb	0	; () banked
 33991  001E66  6F61               	movwf	controlChange@value& (0+255),b
 33992  001E68  503E               	movf	_channel,w,c
 33993  001E6A  ECC9  F048         	call	_controlChange
 33994  001E6E                     l2382:
 33995                           
 33996                           ;drum.c: 38: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 1) {controlChan
      +                          ge(channel,DRUM_CC[1], 0);}
 33997  001E6E  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 33998  001E70  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 33999  001E72  D00A               	goto	l2383
 34000  001E74  A22D               	btfss	_toggle_state,1,c
 34001  001E76  D008               	goto	l2383
 34002  001E78  C0F6  F060         	movff	_DRUM_CC+1,controlChange@controllerNumber
 34003  001E7C  0E00               	movlw	0
 34004  001E7E  0100               	movlb	0	; () banked
 34005  001E80  6F61               	movwf	controlChange@value& (0+255),b
 34006  001E82  503E               	movf	_channel,w,c
 34007  001E84  ECC9  F048         	call	_controlChange
 34008  001E88                     l2383:
 34009                           
 34010                           ;drum.c: 39: toggle_state.T2 ^= 1;
 34011  001E88  722D               	btg	_toggle_state,1,c
 34012  001E8A                     l2379:
 34013                           
 34014                           ;drum.c: 40: }
 34015                           ;drum.c: 41: if(((drum_button_state_now) & 0x04) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW3) {
 34016  001E8A  A439               	btfss	_drum_button_state_now,2,c
 34017  001E8C  D034               	goto	l2384
 34018  001E8E  0100               	movlb	0	; () banked
 34019  001E90  A7DB               	btfss	(_button_state_now+3)& (0+255),3,b
 34020                           
 34021                           ; BSR set to: 0
 34022  001E92  B437               	btfsc	_drum,2,c
 34023  001E94  D030               	goto	l2384
 34024                           
 34025                           ; BSR set to: 0
 34026                           ;drum.c: 42: drum.SW3 = 1;
 34027  001E96  8437               	bsf	_drum,2,c
 34028                           
 34029                           ;drum.c: 43: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[2],velocity);}
 34030  001E98  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34031  001E9A  D007               	goto	l2385
 34032                           
 34033                           ; BSR set to: 0
 34034  001E9C  C1E9  F060         	movff	_DRUM_NOTE+2,noteOnDrum@pitch
 34035  001EA0  C051  F061         	movff	_velocity,noteOnDrum@velocity
 34036  001EA4  5052               	movf	_drumchannel,w,c
 34037  001EA6  ECF5  F048         	call	_noteOnDrum
 34038  001EAA                     l2385:
 34039                           
 34040                           ;drum.c: 44: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[2], 
      +                          127);}
 34041  001EAA  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34042  001EAC  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34043  001EAE  D008               	goto	l2386
 34044  001EB0  C0F7  F060         	movff	_DRUM_CC+2,controlChange@controllerNumber
 34045  001EB4  0E7F               	movlw	127
 34046  001EB6  0100               	movlb	0	; () banked
 34047  001EB8  6F61               	movwf	controlChange@value& (0+255),b
 34048  001EBA  503E               	movf	_channel,w,c
 34049  001EBC  ECC9  F048         	call	_controlChange
 34050  001EC0                     l2386:
 34051                           
 34052                           ;drum.c: 45: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 0) {controlChan
      +                          ge(channel,DRUM_CC[2], 127);}
 34053  001EC0  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34054  001EC2  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34055  001EC4  D00A               	goto	l2387
 34056  001EC6  B42D               	btfsc	_toggle_state,2,c
 34057  001EC8  D008               	goto	l2387
 34058  001ECA  C0F7  F060         	movff	_DRUM_CC+2,controlChange@controllerNumber
 34059  001ECE  0E7F               	movlw	127
 34060  001ED0  0100               	movlb	0	; () banked
 34061  001ED2  6F61               	movwf	controlChange@value& (0+255),b
 34062  001ED4  503E               	movf	_channel,w,c
 34063  001ED6  ECC9  F048         	call	_controlChange
 34064  001EDA                     l2387:
 34065                           
 34066                           ;drum.c: 46: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 1) {controlChan
      +                          ge(channel,DRUM_CC[2], 0);}
 34067  001EDA  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34068  001EDC  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34069  001EDE  D00A               	goto	l2388
 34070  001EE0  A42D               	btfss	_toggle_state,2,c
 34071  001EE2  D008               	goto	l2388
 34072  001EE4  C0F7  F060         	movff	_DRUM_CC+2,controlChange@controllerNumber
 34073  001EE8  0E00               	movlw	0
 34074  001EEA  0100               	movlb	0	; () banked
 34075  001EEC  6F61               	movwf	controlChange@value& (0+255),b
 34076  001EEE  503E               	movf	_channel,w,c
 34077  001EF0  ECC9  F048         	call	_controlChange
 34078  001EF4                     l2388:
 34079                           
 34080                           ;drum.c: 47: toggle_state.T3 ^= 1;
 34081  001EF4  742D               	btg	_toggle_state,2,c
 34082  001EF6                     l2384:
 34083                           
 34084                           ;drum.c: 48: }
 34085                           ;drum.c: 49: if(((drum_button_state_now) & 0x08) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW4) {
 34086  001EF6  A639               	btfss	_drum_button_state_now,3,c
 34087  001EF8  D034               	goto	l2389
 34088  001EFA  0100               	movlb	0	; () banked
 34089  001EFC  A7DB               	btfss	(_button_state_now+3)& (0+255),3,b
 34090                           
 34091                           ; BSR set to: 0
 34092  001EFE  B637               	btfsc	_drum,3,c
 34093  001F00  D030               	goto	l2389
 34094                           
 34095                           ; BSR set to: 0
 34096                           ;drum.c: 50: drum.SW4 = 1;
 34097  001F02  8637               	bsf	_drum,3,c
 34098                           
 34099                           ;drum.c: 51: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[3],velocity);}
 34100  001F04  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34101  001F06  D007               	goto	l2390
 34102                           
 34103                           ; BSR set to: 0
 34104  001F08  C1EA  F060         	movff	_DRUM_NOTE+3,noteOnDrum@pitch
 34105  001F0C  C051  F061         	movff	_velocity,noteOnDrum@velocity
 34106  001F10  5052               	movf	_drumchannel,w,c
 34107  001F12  ECF5  F048         	call	_noteOnDrum
 34108  001F16                     l2390:
 34109                           
 34110                           ;drum.c: 52: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[3], 
      +                          127);}
 34111  001F16  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34112  001F18  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34113  001F1A  D008               	goto	l2391
 34114  001F1C  C0F8  F060         	movff	_DRUM_CC+3,controlChange@controllerNumber
 34115  001F20  0E7F               	movlw	127
 34116  001F22  0100               	movlb	0	; () banked
 34117  001F24  6F61               	movwf	controlChange@value& (0+255),b
 34118  001F26  503E               	movf	_channel,w,c
 34119  001F28  ECC9  F048         	call	_controlChange
 34120  001F2C                     l2391:
 34121                           
 34122                           ;drum.c: 53: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 0) {controlChan
      +                          ge(channel,DRUM_CC[3], 127);}
 34123  001F2C  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34124  001F2E  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34125  001F30  D00A               	goto	l2392
 34126  001F32  B62D               	btfsc	_toggle_state,3,c
 34127  001F34  D008               	goto	l2392
 34128  001F36  C0F8  F060         	movff	_DRUM_CC+3,controlChange@controllerNumber
 34129  001F3A  0E7F               	movlw	127
 34130  001F3C  0100               	movlb	0	; () banked
 34131  001F3E  6F61               	movwf	controlChange@value& (0+255),b
 34132  001F40  503E               	movf	_channel,w,c
 34133  001F42  ECC9  F048         	call	_controlChange
 34134  001F46                     l2392:
 34135                           
 34136                           ;drum.c: 54: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 1) {controlChan
      +                          ge(channel,DRUM_CC[3], 0);}
 34137  001F46  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34138  001F48  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34139  001F4A  D00A               	goto	l2393
 34140  001F4C  A62D               	btfss	_toggle_state,3,c
 34141  001F4E  D008               	goto	l2393
 34142  001F50  C0F8  F060         	movff	_DRUM_CC+3,controlChange@controllerNumber
 34143  001F54  0E00               	movlw	0
 34144  001F56  0100               	movlb	0	; () banked
 34145  001F58  6F61               	movwf	controlChange@value& (0+255),b
 34146  001F5A  503E               	movf	_channel,w,c
 34147  001F5C  ECC9  F048         	call	_controlChange
 34148  001F60                     l2393:
 34149                           
 34150                           ;drum.c: 55: toggle_state.T4 ^= 1;
 34151  001F60  762D               	btg	_toggle_state,3,c
 34152  001F62                     l2389:
 34153                           
 34154                           ;drum.c: 56: }
 34155                           ;drum.c: 57: if(((drum_button_state_now) & 0x10) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW5){
 34156  001F62  A839               	btfss	_drum_button_state_now,4,c
 34157  001F64  D034               	goto	l2394
 34158  001F66  0100               	movlb	0	; () banked
 34159  001F68  A7DB               	btfss	(_button_state_now+3)& (0+255),3,b
 34160                           
 34161                           ; BSR set to: 0
 34162  001F6A  B837               	btfsc	_drum,4,c
 34163  001F6C  D030               	goto	l2394
 34164                           
 34165                           ; BSR set to: 0
 34166                           ;drum.c: 58: drum.SW5 = 1;
 34167  001F6E  8837               	bsf	_drum,4,c
 34168                           
 34169                           ;drum.c: 59: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[4],velocity);}
 34170  001F70  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34171  001F72  D007               	goto	l2395
 34172                           
 34173                           ; BSR set to: 0
 34174  001F74  C1EB  F060         	movff	_DRUM_NOTE+4,noteOnDrum@pitch
 34175  001F78  C051  F061         	movff	_velocity,noteOnDrum@velocity
 34176  001F7C  5052               	movf	_drumchannel,w,c
 34177  001F7E  ECF5  F048         	call	_noteOnDrum
 34178  001F82                     l2395:
 34179                           
 34180                           ;drum.c: 60: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[4], 
      +                          127);}
 34181  001F82  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34182  001F84  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34183  001F86  D008               	goto	l2396
 34184  001F88  C0F9  F060         	movff	_DRUM_CC+4,controlChange@controllerNumber
 34185  001F8C  0E7F               	movlw	127
 34186  001F8E  0100               	movlb	0	; () banked
 34187  001F90  6F61               	movwf	controlChange@value& (0+255),b
 34188  001F92  503E               	movf	_channel,w,c
 34189  001F94  ECC9  F048         	call	_controlChange
 34190  001F98                     l2396:
 34191                           
 34192                           ;drum.c: 61: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 0) {controlChan
      +                          ge(channel,DRUM_CC[4], 127);}
 34193  001F98  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34194  001F9A  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34195  001F9C  D00A               	goto	l2397
 34196  001F9E  B02D               	btfsc	_toggle_state,0,c
 34197  001FA0  D008               	goto	l2397
 34198  001FA2  C0F9  F060         	movff	_DRUM_CC+4,controlChange@controllerNumber
 34199  001FA6  0E7F               	movlw	127
 34200  001FA8  0100               	movlb	0	; () banked
 34201  001FAA  6F61               	movwf	controlChange@value& (0+255),b
 34202  001FAC  503E               	movf	_channel,w,c
 34203  001FAE  ECC9  F048         	call	_controlChange
 34204  001FB2                     l2397:
 34205                           
 34206                           ;drum.c: 62: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 1) {controlChan
      +                          ge(channel,DRUM_CC[4], 0);}
 34207  001FB2  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34208  001FB4  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34209  001FB6  D00A               	goto	l2398
 34210  001FB8  A02D               	btfss	_toggle_state,0,c
 34211  001FBA  D008               	goto	l2398
 34212  001FBC  C0F9  F060         	movff	_DRUM_CC+4,controlChange@controllerNumber
 34213  001FC0  0E00               	movlw	0
 34214  001FC2  0100               	movlb	0	; () banked
 34215  001FC4  6F61               	movwf	controlChange@value& (0+255),b
 34216  001FC6  503E               	movf	_channel,w,c
 34217  001FC8  ECC9  F048         	call	_controlChange
 34218  001FCC                     l2398:
 34219                           
 34220                           ;drum.c: 63: toggle_state.T5 ^= 1;
 34221  001FCC  782D               	btg	_toggle_state,4,c
 34222  001FCE                     l2394:
 34223                           
 34224                           ;drum.c: 64: }
 34225                           ;drum.c: 65: if(((drum_button_state_now) & 0x20) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW6) {
 34226  001FCE  AA39               	btfss	_drum_button_state_now,5,c
 34227  001FD0  D034               	goto	l2399
 34228  001FD2  0100               	movlb	0	; () banked
 34229  001FD4  A7DB               	btfss	(_button_state_now+3)& (0+255),3,b
 34230                           
 34231                           ; BSR set to: 0
 34232  001FD6  BA37               	btfsc	_drum,5,c
 34233  001FD8  D030               	goto	l2399
 34234                           
 34235                           ; BSR set to: 0
 34236                           ;drum.c: 66: drum.SW6 = 1;
 34237  001FDA  8A37               	bsf	_drum,5,c
 34238                           
 34239                           ;drum.c: 67: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[5],velocity);}
 34240  001FDC  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34241  001FDE  D007               	goto	l2400
 34242                           
 34243                           ; BSR set to: 0
 34244  001FE0  C1EC  F060         	movff	_DRUM_NOTE+5,noteOnDrum@pitch
 34245  001FE4  C051  F061         	movff	_velocity,noteOnDrum@velocity
 34246  001FE8  5052               	movf	_drumchannel,w,c
 34247  001FEA  ECF5  F048         	call	_noteOnDrum
 34248  001FEE                     l2400:
 34249                           
 34250                           ;drum.c: 68: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[5], 
      +                          127);}
 34251  001FEE  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34252  001FF0  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34253  001FF2  D008               	goto	l2401
 34254  001FF4  C0FA  F060         	movff	_DRUM_CC+5,controlChange@controllerNumber
 34255  001FF8  0E7F               	movlw	127
 34256  001FFA  0100               	movlb	0	; () banked
 34257  001FFC  6F61               	movwf	controlChange@value& (0+255),b
 34258  001FFE  503E               	movf	_channel,w,c
 34259  002000  ECC9  F048         	call	_controlChange
 34260  002004                     l2401:
 34261                           
 34262                           ;drum.c: 69: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 0) {controlChan
      +                          ge(channel,DRUM_CC[5], 127);}
 34263  002004  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34264  002006  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34265  002008  D00A               	goto	l2402
 34266  00200A  B22D               	btfsc	_toggle_state,1,c
 34267  00200C  D008               	goto	l2402
 34268  00200E  C0FA  F060         	movff	_DRUM_CC+5,controlChange@controllerNumber
 34269  002012  0E7F               	movlw	127
 34270  002014  0100               	movlb	0	; () banked
 34271  002016  6F61               	movwf	controlChange@value& (0+255),b
 34272  002018  503E               	movf	_channel,w,c
 34273  00201A  ECC9  F048         	call	_controlChange
 34274  00201E                     l2402:
 34275                           
 34276                           ;drum.c: 70: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 1) {controlChan
      +                          ge(channel,DRUM_CC[5], 0);}
 34277  00201E  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34278  002020  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34279  002022  D00A               	goto	l2403
 34280  002024  A22D               	btfss	_toggle_state,1,c
 34281  002026  D008               	goto	l2403
 34282  002028  C0FA  F060         	movff	_DRUM_CC+5,controlChange@controllerNumber
 34283  00202C  0E00               	movlw	0
 34284  00202E  0100               	movlb	0	; () banked
 34285  002030  6F61               	movwf	controlChange@value& (0+255),b
 34286  002032  503E               	movf	_channel,w,c
 34287  002034  ECC9  F048         	call	_controlChange
 34288  002038                     l2403:
 34289                           
 34290                           ;drum.c: 71: toggle_state.T6 ^= 1;
 34291  002038  7A2D               	btg	_toggle_state,5,c
 34292  00203A                     l2399:
 34293                           
 34294                           ;drum.c: 72: }
 34295                           ;drum.c: 73: if(((drum_button_state_now) & 0x40) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW7) {
 34296  00203A  AC39               	btfss	_drum_button_state_now,6,c
 34297  00203C  D034               	goto	l2404
 34298  00203E  0100               	movlb	0	; () banked
 34299  002040  A7DB               	btfss	(_button_state_now+3)& (0+255),3,b
 34300                           
 34301                           ; BSR set to: 0
 34302  002042  BC37               	btfsc	_drum,6,c
 34303  002044  D030               	goto	l2404
 34304                           
 34305                           ; BSR set to: 0
 34306                           ;drum.c: 74: drum.SW7 = 1;
 34307  002046  8C37               	bsf	_drum,6,c
 34308                           
 34309                           ;drum.c: 75: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[6],velocity);}
 34310  002048  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34311  00204A  D007               	goto	l2405
 34312                           
 34313                           ; BSR set to: 0
 34314  00204C  C1ED  F060         	movff	_DRUM_NOTE+6,noteOnDrum@pitch
 34315  002050  C051  F061         	movff	_velocity,noteOnDrum@velocity
 34316  002054  5052               	movf	_drumchannel,w,c
 34317  002056  ECF5  F048         	call	_noteOnDrum
 34318  00205A                     l2405:
 34319                           
 34320                           ;drum.c: 76: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[6], 
      +                          127);}
 34321  00205A  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34322  00205C  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34323  00205E  D008               	goto	l2406
 34324  002060  C0FB  F060         	movff	_DRUM_CC+6,controlChange@controllerNumber
 34325  002064  0E7F               	movlw	127
 34326  002066  0100               	movlb	0	; () banked
 34327  002068  6F61               	movwf	controlChange@value& (0+255),b
 34328  00206A  503E               	movf	_channel,w,c
 34329  00206C  ECC9  F048         	call	_controlChange
 34330  002070                     l2406:
 34331                           
 34332                           ;drum.c: 77: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 0) {controlChan
      +                          ge(channel,DRUM_CC[6], 127);}
 34333  002070  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34334  002072  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34335  002074  D00A               	goto	l2407
 34336  002076  B42D               	btfsc	_toggle_state,2,c
 34337  002078  D008               	goto	l2407
 34338  00207A  C0FB  F060         	movff	_DRUM_CC+6,controlChange@controllerNumber
 34339  00207E  0E7F               	movlw	127
 34340  002080  0100               	movlb	0	; () banked
 34341  002082  6F61               	movwf	controlChange@value& (0+255),b
 34342  002084  503E               	movf	_channel,w,c
 34343  002086  ECC9  F048         	call	_controlChange
 34344  00208A                     l2407:
 34345                           
 34346                           ;drum.c: 78: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 1) {controlChan
      +                          ge(channel,DRUM_CC[6], 0);}
 34347  00208A  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34348  00208C  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34349  00208E  D00A               	goto	l2408
 34350  002090  A42D               	btfss	_toggle_state,2,c
 34351  002092  D008               	goto	l2408
 34352  002094  C0FB  F060         	movff	_DRUM_CC+6,controlChange@controllerNumber
 34353  002098  0E00               	movlw	0
 34354  00209A  0100               	movlb	0	; () banked
 34355  00209C  6F61               	movwf	controlChange@value& (0+255),b
 34356  00209E  503E               	movf	_channel,w,c
 34357  0020A0  ECC9  F048         	call	_controlChange
 34358  0020A4                     l2408:
 34359                           
 34360                           ;drum.c: 79: toggle_state.T7 ^= 1;
 34361  0020A4  7C2D               	btg	_toggle_state,6,c
 34362  0020A6                     l2404:
 34363                           
 34364                           ;drum.c: 80: }
 34365                           ;drum.c: 81: if(((drum_button_state_now) & 0x80) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW8) {
 34366  0020A6  AE39               	btfss	_drum_button_state_now,7,c
 34367  0020A8  D034               	goto	l2409
 34368  0020AA  0100               	movlb	0	; () banked
 34369  0020AC  A7DB               	btfss	(_button_state_now+3)& (0+255),3,b
 34370                           
 34371                           ; BSR set to: 0
 34372  0020AE  BE37               	btfsc	_drum,7,c
 34373  0020B0  D030               	goto	l2409
 34374                           
 34375                           ; BSR set to: 0
 34376                           ;drum.c: 82: drum.SW8 = 1;
 34377  0020B2  8E37               	bsf	_drum,7,c
 34378                           
 34379                           ;drum.c: 83: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[7],velocity);}
 34380  0020B4  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34381  0020B6  D007               	goto	l2410
 34382                           
 34383                           ; BSR set to: 0
 34384  0020B8  C1EE  F060         	movff	_DRUM_NOTE+7,noteOnDrum@pitch
 34385  0020BC  C051  F061         	movff	_velocity,noteOnDrum@velocity
 34386  0020C0  5052               	movf	_drumchannel,w,c
 34387  0020C2  ECF5  F048         	call	_noteOnDrum
 34388  0020C6                     l2410:
 34389                           
 34390                           ;drum.c: 84: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[7], 
      +                          127);}
 34391  0020C6  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34392  0020C8  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34393  0020CA  D008               	goto	l2411
 34394  0020CC  C0FC  F060         	movff	_DRUM_CC+7,controlChange@controllerNumber
 34395  0020D0  0E7F               	movlw	127
 34396  0020D2  0100               	movlb	0	; () banked
 34397  0020D4  6F61               	movwf	controlChange@value& (0+255),b
 34398  0020D6  503E               	movf	_channel,w,c
 34399  0020D8  ECC9  F048         	call	_controlChange
 34400  0020DC                     l2411:
 34401                           
 34402                           ;drum.c: 85: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 0) {controlChan
      +                          ge(channel,DRUM_CC[7], 127);}
 34403  0020DC  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34404  0020DE  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34405  0020E0  D00A               	goto	l2412
 34406  0020E2  B62D               	btfsc	_toggle_state,3,c
 34407  0020E4  D008               	goto	l2412
 34408  0020E6  C0FC  F060         	movff	_DRUM_CC+7,controlChange@controllerNumber
 34409  0020EA  0E7F               	movlw	127
 34410  0020EC  0100               	movlb	0	; () banked
 34411  0020EE  6F61               	movwf	controlChange@value& (0+255),b
 34412  0020F0  503E               	movf	_channel,w,c
 34413  0020F2  ECC9  F048         	call	_controlChange
 34414  0020F6                     l2412:
 34415                           
 34416                           ;drum.c: 86: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 1) {controlChan
      +                          ge(channel,DRUM_CC[7], 0);}
 34417  0020F6  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34418  0020F8  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34419  0020FA  D00A               	goto	l2413
 34420  0020FC  A62D               	btfss	_toggle_state,3,c
 34421  0020FE  D008               	goto	l2413
 34422  002100  C0FC  F060         	movff	_DRUM_CC+7,controlChange@controllerNumber
 34423  002104  0E00               	movlw	0
 34424  002106  0100               	movlb	0	; () banked
 34425  002108  6F61               	movwf	controlChange@value& (0+255),b
 34426  00210A  503E               	movf	_channel,w,c
 34427  00210C  ECC9  F048         	call	_controlChange
 34428  002110                     l2413:
 34429                           
 34430                           ;drum.c: 87: toggle_state.T8 ^= 1;
 34431  002110  7E2D               	btg	_toggle_state,7,c
 34432  002112                     l2409:
 34433                           
 34434                           ;drum.c: 88: }
 34435                           ;drum.c: 91: if(((drum_button_state_last & 0x01)) && ((drum_button_state_now & 0x01) == 
      +                          0) && drum.SW1) {
 34436  002112  B038               	btfsc	_drum_button_state_last,0,c
 34437  002114  B039               	btfsc	_drum_button_state_now,0,c
 34438  002116  D017               	goto	l2416
 34439  002118  A037               	btfss	_drum,0,c
 34440  00211A  D015               	goto	l2416
 34441                           
 34442                           ;drum.c: 92: drum.SW1 = 0;
 34443  00211C  9037               	bcf	_drum,0,c
 34444                           
 34445                           ;drum.c: 93: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[0],velocity);}
 34446  00211E  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34447  002120  D007               	goto	l2415
 34448  002122  C1E7  F060         	movff	_DRUM_NOTE,noteOffDrum@pitch
 34449  002126  C051  F061         	movff	_velocity,noteOffDrum@velocity
 34450  00212A  5052               	movf	_drumchannel,w,c
 34451  00212C  EC76  F04B         	call	_noteOffDrum
 34452  002130                     l2415:
 34453                           
 34454                           ;drum.c: 94: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[0], 
      +                          0);}
 34455  002130  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34456  002132  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34457  002134  D008               	goto	l2416
 34458  002136  C0F5  F060         	movff	_DRUM_CC,controlChange@controllerNumber
 34459  00213A  0E00               	movlw	0
 34460  00213C  0100               	movlb	0	; () banked
 34461  00213E  6F61               	movwf	controlChange@value& (0+255),b
 34462  002140  503E               	movf	_channel,w,c
 34463  002142  ECC9  F048         	call	_controlChange
 34464  002146                     l2416:
 34465                           
 34466                           ;drum.c: 95: }
 34467                           ;drum.c: 96: if(((drum_button_state_last & 0x02)) && ((drum_button_state_now & 0x02) == 
      +                          0) && drum.SW2) {
 34468  002146  B238               	btfsc	_drum_button_state_last,1,c
 34469  002148  B239               	btfsc	_drum_button_state_now,1,c
 34470  00214A  D017               	goto	l2419
 34471  00214C  A237               	btfss	_drum,1,c
 34472  00214E  D015               	goto	l2419
 34473                           
 34474                           ;drum.c: 97: drum.SW2 = 0;
 34475  002150  9237               	bcf	_drum,1,c
 34476                           
 34477                           ;drum.c: 98: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[1],velocity);}
 34478  002152  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34479  002154  D007               	goto	l2418
 34480  002156  C1E8  F060         	movff	_DRUM_NOTE+1,noteOffDrum@pitch
 34481  00215A  C051  F061         	movff	_velocity,noteOffDrum@velocity
 34482  00215E  5052               	movf	_drumchannel,w,c
 34483  002160  EC76  F04B         	call	_noteOffDrum
 34484  002164                     l2418:
 34485                           
 34486                           ;drum.c: 99: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[1], 
      +                          0);}
 34487  002164  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34488  002166  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34489  002168  D008               	goto	l2419
 34490  00216A  C0F6  F060         	movff	_DRUM_CC+1,controlChange@controllerNumber
 34491  00216E  0E00               	movlw	0
 34492  002170  0100               	movlb	0	; () banked
 34493  002172  6F61               	movwf	controlChange@value& (0+255),b
 34494  002174  503E               	movf	_channel,w,c
 34495  002176  ECC9  F048         	call	_controlChange
 34496  00217A                     l2419:
 34497                           
 34498                           ;drum.c: 100: }
 34499                           ;drum.c: 101: if(((drum_button_state_last & 0x04)) && ((drum_button_state_now & 0x04) ==
      +                           0) && drum.SW3) {
 34500  00217A  B438               	btfsc	_drum_button_state_last,2,c
 34501  00217C  B439               	btfsc	_drum_button_state_now,2,c
 34502  00217E  D017               	goto	l2422
 34503  002180  A437               	btfss	_drum,2,c
 34504  002182  D015               	goto	l2422
 34505                           
 34506                           ;drum.c: 102: drum.SW3 = 0;
 34507  002184  9437               	bcf	_drum,2,c
 34508                           
 34509                           ;drum.c: 103: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[2],velocity);}
 34510  002186  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34511  002188  D007               	goto	l2421
 34512  00218A  C1E9  F060         	movff	_DRUM_NOTE+2,noteOffDrum@pitch
 34513  00218E  C051  F061         	movff	_velocity,noteOffDrum@velocity
 34514  002192  5052               	movf	_drumchannel,w,c
 34515  002194  EC76  F04B         	call	_noteOffDrum
 34516  002198                     l2421:
 34517                           
 34518                           ;drum.c: 104: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[2],
      +                           0);}
 34519  002198  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34520  00219A  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34521  00219C  D008               	goto	l2422
 34522  00219E  C0F7  F060         	movff	_DRUM_CC+2,controlChange@controllerNumber
 34523  0021A2  0E00               	movlw	0
 34524  0021A4  0100               	movlb	0	; () banked
 34525  0021A6  6F61               	movwf	controlChange@value& (0+255),b
 34526  0021A8  503E               	movf	_channel,w,c
 34527  0021AA  ECC9  F048         	call	_controlChange
 34528  0021AE                     l2422:
 34529                           
 34530                           ;drum.c: 105: }
 34531                           ;drum.c: 106: if(((drum_button_state_last & 0x08)) && ((drum_button_state_now & 0x08) ==
      +                           0) && drum.SW4) {
 34532  0021AE  B638               	btfsc	_drum_button_state_last,3,c
 34533  0021B0  B639               	btfsc	_drum_button_state_now,3,c
 34534  0021B2  D017               	goto	l2425
 34535  0021B4  A637               	btfss	_drum,3,c
 34536  0021B6  D015               	goto	l2425
 34537                           
 34538                           ;drum.c: 107: drum.SW4 = 0;
 34539  0021B8  9637               	bcf	_drum,3,c
 34540                           
 34541                           ;drum.c: 108: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[3],velocity);}
 34542  0021BA  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34543  0021BC  D007               	goto	l2424
 34544  0021BE  C1EA  F060         	movff	_DRUM_NOTE+3,noteOffDrum@pitch
 34545  0021C2  C051  F061         	movff	_velocity,noteOffDrum@velocity
 34546  0021C6  5052               	movf	_drumchannel,w,c
 34547  0021C8  EC76  F04B         	call	_noteOffDrum
 34548  0021CC                     l2424:
 34549                           
 34550                           ;drum.c: 109: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[3],
      +                           0);}
 34551  0021CC  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34552  0021CE  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34553  0021D0  D008               	goto	l2425
 34554  0021D2  C0F8  F060         	movff	_DRUM_CC+3,controlChange@controllerNumber
 34555  0021D6  0E00               	movlw	0
 34556  0021D8  0100               	movlb	0	; () banked
 34557  0021DA  6F61               	movwf	controlChange@value& (0+255),b
 34558  0021DC  503E               	movf	_channel,w,c
 34559  0021DE  ECC9  F048         	call	_controlChange
 34560  0021E2                     l2425:
 34561                           
 34562                           ;drum.c: 110: }
 34563                           ;drum.c: 111: if(((drum_button_state_last & 0x10)) && ((drum_button_state_now & 0x10) ==
      +                           0) && drum.SW5) {
 34564  0021E2  B838               	btfsc	_drum_button_state_last,4,c
 34565  0021E4  B839               	btfsc	_drum_button_state_now,4,c
 34566  0021E6  D017               	goto	l2428
 34567  0021E8  A837               	btfss	_drum,4,c
 34568  0021EA  D015               	goto	l2428
 34569                           
 34570                           ;drum.c: 112: drum.SW5 = 0;
 34571  0021EC  9837               	bcf	_drum,4,c
 34572                           
 34573                           ;drum.c: 113: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[4],velocity);}
 34574  0021EE  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34575  0021F0  D007               	goto	l2427
 34576  0021F2  C1EB  F060         	movff	_DRUM_NOTE+4,noteOffDrum@pitch
 34577  0021F6  C051  F061         	movff	_velocity,noteOffDrum@velocity
 34578  0021FA  5052               	movf	_drumchannel,w,c
 34579  0021FC  EC76  F04B         	call	_noteOffDrum
 34580  002200                     l2427:
 34581                           
 34582                           ;drum.c: 114: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[4],
      +                           0);}
 34583  002200  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34584  002202  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34585  002204  D008               	goto	l2428
 34586  002206  C0F9  F060         	movff	_DRUM_CC+4,controlChange@controllerNumber
 34587  00220A  0E00               	movlw	0
 34588  00220C  0100               	movlb	0	; () banked
 34589  00220E  6F61               	movwf	controlChange@value& (0+255),b
 34590  002210  503E               	movf	_channel,w,c
 34591  002212  ECC9  F048         	call	_controlChange
 34592  002216                     l2428:
 34593                           
 34594                           ;drum.c: 115: }
 34595                           ;drum.c: 116: if(((drum_button_state_last & 0x20)) && ((drum_button_state_now & 0x20) ==
      +                           0) && drum.SW6) {
 34596  002216  BA38               	btfsc	_drum_button_state_last,5,c
 34597  002218  BA39               	btfsc	_drum_button_state_now,5,c
 34598  00221A  D017               	goto	l2431
 34599  00221C  AA37               	btfss	_drum,5,c
 34600  00221E  D015               	goto	l2431
 34601                           
 34602                           ;drum.c: 117: drum.SW6 = 0;
 34603  002220  9A37               	bcf	_drum,5,c
 34604                           
 34605                           ;drum.c: 118: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[5],velocity);}
 34606  002222  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34607  002224  D007               	goto	l2430
 34608  002226  C1EC  F060         	movff	_DRUM_NOTE+5,noteOffDrum@pitch
 34609  00222A  C051  F061         	movff	_velocity,noteOffDrum@velocity
 34610  00222E  5052               	movf	_drumchannel,w,c
 34611  002230  EC76  F04B         	call	_noteOffDrum
 34612  002234                     l2430:
 34613                           
 34614                           ;drum.c: 119: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[5],
      +                           0);}
 34615  002234  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34616  002236  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34617  002238  D008               	goto	l2431
 34618  00223A  C0FA  F060         	movff	_DRUM_CC+5,controlChange@controllerNumber
 34619  00223E  0E00               	movlw	0
 34620  002240  0100               	movlb	0	; () banked
 34621  002242  6F61               	movwf	controlChange@value& (0+255),b
 34622  002244  503E               	movf	_channel,w,c
 34623  002246  ECC9  F048         	call	_controlChange
 34624  00224A                     l2431:
 34625                           
 34626                           ;drum.c: 120: }
 34627                           ;drum.c: 121: if(((drum_button_state_last & 0x40)) && ((drum_button_state_now & 0x40) ==
      +                           0) && drum.SW7) {
 34628  00224A  BC38               	btfsc	_drum_button_state_last,6,c
 34629  00224C  BC39               	btfsc	_drum_button_state_now,6,c
 34630  00224E  D017               	goto	l2434
 34631  002250  AC37               	btfss	_drum,6,c
 34632  002252  D015               	goto	l2434
 34633                           
 34634                           ;drum.c: 122: drum.SW7 = 0;
 34635  002254  9C37               	bcf	_drum,6,c
 34636                           
 34637                           ;drum.c: 123: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[6],velocity);}
 34638  002256  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34639  002258  D007               	goto	l2433
 34640  00225A  C1ED  F060         	movff	_DRUM_NOTE+6,noteOffDrum@pitch
 34641  00225E  C051  F061         	movff	_velocity,noteOffDrum@velocity
 34642  002262  5052               	movf	_drumchannel,w,c
 34643  002264  EC76  F04B         	call	_noteOffDrum
 34644  002268                     l2433:
 34645                           
 34646                           ;drum.c: 124: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[6],
      +                           0);}
 34647  002268  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34648  00226A  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34649  00226C  D008               	goto	l2434
 34650  00226E  C0FB  F060         	movff	_DRUM_CC+6,controlChange@controllerNumber
 34651  002272  0E00               	movlw	0
 34652  002274  0100               	movlb	0	; () banked
 34653  002276  6F61               	movwf	controlChange@value& (0+255),b
 34654  002278  503E               	movf	_channel,w,c
 34655  00227A  ECC9  F048         	call	_controlChange
 34656  00227E                     l2434:
 34657                           
 34658                           ;drum.c: 125: }
 34659                           ;drum.c: 126: if(((drum_button_state_last & 0x80)) && ((drum_button_state_now & 0x80) ==
      +                           0) && drum.SW8) {
 34660  00227E  AE38               	btfss	_drum_button_state_last,7,c
 34661  002280  0012               	return	
 34662  002282  BE39               	btfsc	_drum_button_state_now,7,c
 34663  002284  0012               	return	
 34664  002286  AE37               	btfss	_drum,7,c
 34665  002288  0012               	return	
 34666                           
 34667                           ;drum.c: 127: drum.SW8 = 0;
 34668  00228A  9E37               	bcf	_drum,7,c
 34669                           
 34670                           ;drum.c: 128: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[7],velocity);}
 34671  00228C  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34672  00228E  D007               	goto	l2436
 34673  002290  C1EE  F060         	movff	_DRUM_NOTE+7,noteOffDrum@pitch
 34674  002294  C051  F061         	movff	_velocity,noteOffDrum@velocity
 34675  002298  5052               	movf	_drumchannel,w,c
 34676  00229A  EC76  F04B         	call	_noteOffDrum
 34677  00229E                     l2436:
 34678                           
 34679                           ;drum.c: 129: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[7],
      +                           0);}
 34680  00229E  B601               	btfsc	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34681  0022A0  0012               	return	
 34682  0022A2  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34683  0022A4  0012               	return	
 34684  0022A6  C0FC  F060         	movff	_DRUM_CC+7,controlChange@controllerNumber
 34685  0022AA  0E00               	movlw	0
 34686  0022AC  0100               	movlb	0	; () banked
 34687  0022AE  6F61               	movwf	controlChange@value& (0+255),b
 34688  0022B0  503E               	movf	_channel,w,c
 34689  0022B2  ECC9  F048         	call	_controlChange
 34690  0022B6  0012               	return	
 34691  0022B8                     __end_of_processDrumpad:
 34692                           	opt stack 0
 34693                           tblptru	equ	0xFF8
 34694                           tblptrh	equ	0xFF7
 34695                           tblptrl	equ	0xFF6
 34696                           tablat	equ	0xFF5
 34697                           prodh	equ	0xFF4
 34698                           prodl	equ	0xFF3
 34699                           intcon	equ	0xFF2
 34700                           intcon2	equ	0xFF1
 34701                           indf0	equ	0xFEF
 34702                           postinc0	equ	0xFEE
 34703                           fsr0h	equ	0xFEA
 34704                           fsr0l	equ	0xFE9
 34705                           wreg	equ	0xFE8
 34706                           postinc1	equ	0xFE6
 34707                           postdec1	equ	0xFE5
 34708                           plusw1	equ	0xFE3
 34709                           fsr1h	equ	0xFE2
 34710                           fsr1l	equ	0xFE1
 34711                           indf2	equ	0xFDF
 34712                           postinc2	equ	0xFDE
 34713                           postdec2	equ	0xFDD
 34714                           plusw2	equ	0xFDB
 34715                           fsr2h	equ	0xFDA
 34716                           fsr2l	equ	0xFD9
 34717                           status	equ	0xFD8
 34718                           
 34719 ;; *************** function _noteOnDrum *****************
 34720 ;; Defined at:
 34721 ;;		line 160 in file "midi.c"
 34722 ;; Parameters:    Size  Location     Type
 34723 ;;  channel         1    wreg     unsigned char 
 34724 ;;  pitch           1    0[BANK0 ] unsigned char 
 34725 ;;  velocity        1    1[BANK0 ] unsigned char 
 34726 ;; Auto vars:     Size  Location     Type
 34727 ;;  channel         1    2[BANK0 ] unsigned char 
 34728 ;; Return value:  Size  Location     Type
 34729 ;;                  1    wreg      void 
 34730 ;; Registers used:
 34731 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh
 34732 ;; Tracked objects:
 34733 ;;		On entry : 0/0
 34734 ;;		On exit  : 0/0
 34735 ;;		Unchanged: 0/0
 34736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34737 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34738 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34740 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34741 ;;Total ram usage:        3 bytes
 34742 ;; Hardware stack levels used:    1
 34743 ;; Hardware stack levels required when called:    7
 34744 ;; This function calls:
 34745 ;;		_noteOff
 34746 ;;		_sendOut
 34747 ;;		_sendUSB
 34748 ;; This function is called by:
 34749 ;;		_processDrumpad
 34750 ;; This function uses a non-reentrant model
 34751 ;;
 34752                           
 34753                           	psect	text95
 34754  0091EA                     __ptext95:
 34755                           	opt stack 0
 34756  0091EA                     _noteOnDrum:
 34757                           	opt stack 18
 34758                           
 34759                           ;incstack = 0
 34760                           ;noteOnDrum@channel stored from wreg
 34761  0091EA  0100               	movlb	0	; () banked
 34762  0091EC  6F62               	movwf	noteOnDrum@channel& (0+255),b
 34763                           
 34764                           ;midi.c: 162: noteNumber = pitch;
 34765  0091EE  C060  F03C         	movff	noteOnDrum@pitch,_noteNumber
 34766                           
 34767                           ;midi.c: 163: statusByte = channel | note_on;
 34768  0091F2  0100               	movlb	0	; () banked
 34769  0091F4  5162               	movf	noteOnDrum@channel& (0+255),w,b
 34770  0091F6  0990               	iorlw	144
 34771  0091F8  6E3D               	movwf	_statusByte,c
 34772                           
 34773                           ; BSR set to: 0
 34774                           ;midi.c: 165: if (velocity == 0) {noteOff(channel, pitch, velocity);return;}
 34775  0091FA  5161               	movf	noteOnDrum@velocity& (0+255),w,b
 34776  0091FC  A4D8               	btfss	status,2,c
 34777  0091FE  D009               	goto	l491
 34778                           
 34779                           ; BSR set to: 0
 34780  009200  5161               	movf	noteOnDrum@velocity& (0+255),w,b
 34781  009202  6EE6               	movwf	postinc1,c
 34782  009204  5160               	movf	noteOnDrum@pitch& (0+255),w,b
 34783  009206  6EE6               	movwf	postinc1,c
 34784  009208  5162               	movf	noteOnDrum@channel& (0+255),w,b
 34785  00920A  6EE6               	movwf	postinc1,c
 34786  00920C  EC4A  F04A         	call	_noteOff	;wreg free
 34787  009210  0012               	return	
 34788  009212                     l491:
 34789                           
 34790                           ;midi.c: 168: sendUSB(statusByte, noteNumber, velocity);
 34791  009212  0100               	movlb	0	; () banked
 34792  009214  5161               	movf	noteOnDrum@velocity& (0+255),w,b
 34793  009216  6EE6               	movwf	postinc1,c
 34794  009218  503C               	movf	_noteNumber,w,c
 34795  00921A  6EE6               	movwf	postinc1,c
 34796  00921C  503D               	movf	_statusByte,w,c
 34797  00921E  6EE6               	movwf	postinc1,c
 34798  009220  ECDD  F036         	call	_sendUSB	;wreg free
 34799                           
 34800                           ;midi.c: 171: if(velocity > 0) {
 34801  009224  0100               	movlb	0	; () banked
 34802  009226  5161               	movf	noteOnDrum@velocity& (0+255),w,b
 34803  009228  B4D8               	btfsc	status,2,c
 34804  00922A  0012               	return	
 34805                           
 34806                           ; BSR set to: 0
 34807                           ;midi.c: 172: sendOut(statusByte, noteNumber, velocity);
 34808  00922C  5161               	movf	noteOnDrum@velocity& (0+255),w,b
 34809  00922E  6EE6               	movwf	postinc1,c
 34810  009230  503C               	movf	_noteNumber,w,c
 34811  009232  6EE6               	movwf	postinc1,c
 34812  009234  503D               	movf	_statusByte,w,c
 34813  009236  6EE6               	movwf	postinc1,c
 34814  009238  EC66  F036         	call	_sendOut	;wreg free
 34815  00923C  0012               	return	
 34816  00923E                     __end_of_noteOnDrum:
 34817                           	opt stack 0
 34818                           tblptru	equ	0xFF8
 34819                           tblptrh	equ	0xFF7
 34820                           tblptrl	equ	0xFF6
 34821                           tablat	equ	0xFF5
 34822                           prodh	equ	0xFF4
 34823                           prodl	equ	0xFF3
 34824                           intcon	equ	0xFF2
 34825                           intcon2	equ	0xFF1
 34826                           indf0	equ	0xFEF
 34827                           postinc0	equ	0xFEE
 34828                           fsr0h	equ	0xFEA
 34829                           fsr0l	equ	0xFE9
 34830                           wreg	equ	0xFE8
 34831                           postinc1	equ	0xFE6
 34832                           postdec1	equ	0xFE5
 34833                           plusw1	equ	0xFE3
 34834                           fsr1h	equ	0xFE2
 34835                           fsr1l	equ	0xFE1
 34836                           indf2	equ	0xFDF
 34837                           postinc2	equ	0xFDE
 34838                           postdec2	equ	0xFDD
 34839                           plusw2	equ	0xFDB
 34840                           fsr2h	equ	0xFDA
 34841                           fsr2l	equ	0xFD9
 34842                           status	equ	0xFD8
 34843                           
 34844 ;; *************** function _noteOffDrum *****************
 34845 ;; Defined at:
 34846 ;;		line 145 in file "midi.c"
 34847 ;; Parameters:    Size  Location     Type
 34848 ;;  channel         1    wreg     unsigned char 
 34849 ;;  pitch           1    0[BANK0 ] unsigned char 
 34850 ;;  velocity        1    1[BANK0 ] unsigned char 
 34851 ;; Auto vars:     Size  Location     Type
 34852 ;;  channel         1    2[BANK0 ] unsigned char 
 34853 ;; Return value:  Size  Location     Type
 34854 ;;                  1    wreg      void 
 34855 ;; Registers used:
 34856 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11
 34857 ;; Tracked objects:
 34858 ;;		On entry : 0/0
 34859 ;;		On exit  : 0/0
 34860 ;;		Unchanged: 0/0
 34861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34862 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34863 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34865 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34866 ;;Total ram usage:        3 bytes
 34867 ;; Hardware stack levels used:    1
 34868 ;; Hardware stack levels required when called:    6
 34869 ;; This function calls:
 34870 ;;		_sendOut
 34871 ;;		_sendUSB
 34872 ;; This function is called by:
 34873 ;;		_processDrumpad
 34874 ;; This function uses a non-reentrant model
 34875 ;;
 34876                           
 34877                           	psect	text96
 34878  0096EC                     __ptext96:
 34879                           	opt stack 0
 34880  0096EC                     _noteOffDrum:
 34881                           	opt stack 19
 34882                           
 34883                           ;incstack = 0
 34884                           ;noteOffDrum@channel stored from wreg
 34885  0096EC  0100               	movlb	0	; () banked
 34886  0096EE  6F62               	movwf	noteOffDrum@channel& (0+255),b
 34887                           
 34888                           ;midi.c: 147: noteNumber = pitch;
 34889  0096F0  C060  F03C         	movff	noteOffDrum@pitch,_noteNumber
 34890                           
 34891                           ;midi.c: 148: statusByte = channel | note_off;
 34892  0096F4  0100               	movlb	0	; () banked
 34893  0096F6  5162               	movf	noteOffDrum@channel& (0+255),w,b
 34894  0096F8  0980               	iorlw	128
 34895  0096FA  6E3D               	movwf	_statusByte,c
 34896                           
 34897                           ; BSR set to: 0
 34898                           ;midi.c: 151: sendUSB(statusByte, noteNumber, velocity);
 34899  0096FC  5161               	movf	noteOffDrum@velocity& (0+255),w,b
 34900  0096FE  6EE6               	movwf	postinc1,c
 34901  009700  503C               	movf	_noteNumber,w,c
 34902  009702  6EE6               	movwf	postinc1,c
 34903  009704  503D               	movf	_statusByte,w,c
 34904  009706  6EE6               	movwf	postinc1,c
 34905  009708  ECDD  F036         	call	_sendUSB	;wreg free
 34906                           
 34907                           ;midi.c: 154: sendOut(statusByte, noteNumber, velocity);
 34908  00970C  0100               	movlb	0	; () banked
 34909  00970E  5161               	movf	noteOffDrum@velocity& (0+255),w,b
 34910  009710  6EE6               	movwf	postinc1,c
 34911  009712  503C               	movf	_noteNumber,w,c
 34912  009714  6EE6               	movwf	postinc1,c
 34913  009716  503D               	movf	_statusByte,w,c
 34914  009718  6EE6               	movwf	postinc1,c
 34915  00971A  EC66  F036         	call	_sendOut	;wreg free
 34916  00971E  0012               	return		;funcret
 34917  009720                     __end_of_noteOffDrum:
 34918                           	opt stack 0
 34919                           tblptru	equ	0xFF8
 34920                           tblptrh	equ	0xFF7
 34921                           tblptrl	equ	0xFF6
 34922                           tablat	equ	0xFF5
 34923                           prodh	equ	0xFF4
 34924                           prodl	equ	0xFF3
 34925                           intcon	equ	0xFF2
 34926                           intcon2	equ	0xFF1
 34927                           indf0	equ	0xFEF
 34928                           postinc0	equ	0xFEE
 34929                           fsr0h	equ	0xFEA
 34930                           fsr0l	equ	0xFE9
 34931                           wreg	equ	0xFE8
 34932                           postinc1	equ	0xFE6
 34933                           postdec1	equ	0xFE5
 34934                           plusw1	equ	0xFE3
 34935                           fsr1h	equ	0xFE2
 34936                           fsr1l	equ	0xFE1
 34937                           indf2	equ	0xFDF
 34938                           postinc2	equ	0xFDE
 34939                           postdec2	equ	0xFDD
 34940                           plusw2	equ	0xFDB
 34941                           fsr2h	equ	0xFDA
 34942                           fsr2l	equ	0xFD9
 34943                           status	equ	0xFD8
 34944                           
 34945 ;; *************** function _keyboardTranspose *****************
 34946 ;; Defined at:
 34947 ;;		line 28 in file "octave.c"
 34948 ;; Parameters:    Size  Location     Type
 34949 ;;		None
 34950 ;; Auto vars:     Size  Location     Type
 34951 ;;		None
 34952 ;; Return value:  Size  Location     Type
 34953 ;;                  1    wreg      void 
 34954 ;; Registers used:
 34955 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
 34956 ;; Tracked objects:
 34957 ;;		On entry : 0/0
 34958 ;;		On exit  : 0/0
 34959 ;;		Unchanged: 0/0
 34960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34965 ;;Total ram usage:        0 bytes
 34966 ;; Hardware stack levels used:    1
 34967 ;; Hardware stack levels required when called:    8
 34968 ;; This function calls:
 34969 ;;		_key_press_release_note_off
 34970 ;;		_printThisNumber
 34971 ;;		_wait_one_pulse
 34972 ;; This function is called by:
 34973 ;;		_digitalInputs
 34974 ;; This function uses a non-reentrant model
 34975 ;;
 34976                           
 34977                           	psect	text97
 34978  004446                     __ptext97:
 34979                           	opt stack 0
 34980  004446                     _keyboardTranspose:
 34981                           	opt stack 18
 34982                           
 34983                           ;octave.c: 30: static signed char semitone_temp;
 34984                           ;octave.c: 31: static __bit keyPress;
 34985                           ;octave.c: 33: if(button_state_now == (0x08000000 | 0x00000001))
 34986                           
 34987                           ;incstack = 0
 34988  004446  0100               	movlb	0	; () banked
 34989  004448  05D8               	decf	_button_state_now& (0+255),w,b
 34990  00444A  E109               	bnz	l29918
 34991  00444C  0E08               	movlw	8
 34992  00444E  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 34993  004450  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 34994  004452  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 34995  004454  A4D8               	btfss	status,2,c
 34996  004456  D003               	goto	l2812
 34997                           
 34998                           ; BSR set to: 0
 34999                           ;octave.c: 34: {
 35000                           ;octave.c: 35: semitone_temp = -12;
 35001  004458  0EF4               	movlw	244
 35002  00445A  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35003                           
 35004                           ; BSR set to: 0
 35005                           ;octave.c: 36: keyPress = 1;
 35006  00445C  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35007  00445E                     l2812:
 35008  00445E                     l29918:
 35009                           
 35010                           ; BSR set to: 0
 35011                           ;octave.c: 37: }
 35012                           ;octave.c: 38: if(button_state_now == (0x08000000 | 0x00000002))
 35013  00445E  0E02               	movlw	2
 35014  004460  19D8               	xorwf	_button_state_now& (0+255),w,b
 35015  004462  E109               	bnz	l29924
 35016  004464  0E08               	movlw	8
 35017  004466  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35018  004468  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35019  00446A  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35020  00446C  A4D8               	btfss	status,2,c
 35021  00446E  D003               	goto	l2813
 35022                           
 35023                           ; BSR set to: 0
 35024                           ;octave.c: 39: {
 35025                           ;octave.c: 40: semitone_temp = -11;
 35026  004470  0EF5               	movlw	245
 35027  004472  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35028                           
 35029                           ; BSR set to: 0
 35030                           ;octave.c: 41: keyPress = 1;
 35031  004474  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35032  004476                     l2813:
 35033  004476                     l29924:
 35034                           
 35035                           ; BSR set to: 0
 35036                           ;octave.c: 42: }
 35037                           ;octave.c: 43: if(button_state_now == (0x08000000 | 0x00000004))
 35038  004476  0E04               	movlw	4
 35039  004478  19D8               	xorwf	_button_state_now& (0+255),w,b
 35040  00447A  E109               	bnz	l29930
 35041  00447C  0E08               	movlw	8
 35042  00447E  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35043  004480  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35044  004482  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35045  004484  A4D8               	btfss	status,2,c
 35046  004486  D003               	goto	l2814
 35047                           
 35048                           ; BSR set to: 0
 35049                           ;octave.c: 44: {
 35050                           ;octave.c: 45: semitone_temp = -10;
 35051  004488  0EF6               	movlw	246
 35052  00448A  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35053                           
 35054                           ; BSR set to: 0
 35055                           ;octave.c: 46: keyPress = 1;
 35056  00448C  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35057  00448E                     l2814:
 35058  00448E                     l29930:
 35059                           
 35060                           ; BSR set to: 0
 35061                           ;octave.c: 47: }
 35062                           ;octave.c: 48: if(button_state_now == (0x08000000 | 0x00000008))
 35063  00448E  0E08               	movlw	8
 35064  004490  19D8               	xorwf	_button_state_now& (0+255),w,b
 35065  004492  E109               	bnz	l29936
 35066  004494  0E08               	movlw	8
 35067  004496  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35068  004498  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35069  00449A  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35070  00449C  A4D8               	btfss	status,2,c
 35071  00449E  D003               	goto	l2815
 35072                           
 35073                           ; BSR set to: 0
 35074                           ;octave.c: 49: {
 35075                           ;octave.c: 50: semitone_temp = -9;
 35076  0044A0  0EF7               	movlw	247
 35077  0044A2  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35078                           
 35079                           ; BSR set to: 0
 35080                           ;octave.c: 51: keyPress = 1;
 35081  0044A4  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35082  0044A6                     l2815:
 35083  0044A6                     l29936:
 35084                           
 35085                           ; BSR set to: 0
 35086                           ;octave.c: 52: }
 35087                           ;octave.c: 53: if(button_state_now == (0x08000000 | 0x00000010))
 35088  0044A6  0E10               	movlw	16
 35089  0044A8  19D8               	xorwf	_button_state_now& (0+255),w,b
 35090  0044AA  E109               	bnz	l29942
 35091  0044AC  0E08               	movlw	8
 35092  0044AE  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35093  0044B0  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35094  0044B2  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35095  0044B4  A4D8               	btfss	status,2,c
 35096  0044B6  D003               	goto	l2816
 35097                           
 35098                           ; BSR set to: 0
 35099                           ;octave.c: 54: {
 35100                           ;octave.c: 55: semitone_temp = -8;
 35101  0044B8  0EF8               	movlw	248
 35102  0044BA  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35103                           
 35104                           ; BSR set to: 0
 35105                           ;octave.c: 56: keyPress = 1;
 35106  0044BC  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35107  0044BE                     l2816:
 35108  0044BE                     l29942:
 35109                           
 35110                           ; BSR set to: 0
 35111                           ;octave.c: 57: }
 35112                           ;octave.c: 58: if(button_state_now == (0x08000000 | 0x00000020))
 35113  0044BE  0E20               	movlw	32
 35114  0044C0  19D8               	xorwf	_button_state_now& (0+255),w,b
 35115  0044C2  E109               	bnz	l29948
 35116  0044C4  0E08               	movlw	8
 35117  0044C6  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35118  0044C8  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35119  0044CA  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35120  0044CC  A4D8               	btfss	status,2,c
 35121  0044CE  D003               	goto	l2817
 35122                           
 35123                           ; BSR set to: 0
 35124                           ;octave.c: 59: {
 35125                           ;octave.c: 60: semitone_temp = -7;
 35126  0044D0  0EF9               	movlw	249
 35127  0044D2  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35128                           
 35129                           ; BSR set to: 0
 35130                           ;octave.c: 61: keyPress = 1;
 35131  0044D4  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35132  0044D6                     l2817:
 35133  0044D6                     l29948:
 35134                           
 35135                           ; BSR set to: 0
 35136                           ;octave.c: 62: }
 35137                           ;octave.c: 63: if(button_state_now == (0x08000000 | 0x00000040))
 35138  0044D6  0E40               	movlw	64
 35139  0044D8  19D8               	xorwf	_button_state_now& (0+255),w,b
 35140  0044DA  E109               	bnz	l29954
 35141  0044DC  0E08               	movlw	8
 35142  0044DE  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35143  0044E0  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35144  0044E2  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35145  0044E4  A4D8               	btfss	status,2,c
 35146  0044E6  D003               	goto	l2818
 35147                           
 35148                           ; BSR set to: 0
 35149                           ;octave.c: 64: {
 35150                           ;octave.c: 65: semitone_temp = -6;
 35151  0044E8  0EFA               	movlw	250
 35152  0044EA  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35153                           
 35154                           ; BSR set to: 0
 35155                           ;octave.c: 66: keyPress = 1;
 35156  0044EC  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35157  0044EE                     l2818:
 35158  0044EE                     l29954:
 35159                           
 35160                           ; BSR set to: 0
 35161                           ;octave.c: 67: }
 35162                           ;octave.c: 68: if(button_state_now == (0x08000000 | 0x00000080))
 35163  0044EE  0E80               	movlw	128
 35164  0044F0  19D8               	xorwf	_button_state_now& (0+255),w,b
 35165  0044F2  E109               	bnz	l29960
 35166  0044F4  0E08               	movlw	8
 35167  0044F6  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35168  0044F8  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35169  0044FA  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35170  0044FC  A4D8               	btfss	status,2,c
 35171  0044FE  D003               	goto	l2819
 35172                           
 35173                           ; BSR set to: 0
 35174                           ;octave.c: 69: {
 35175                           ;octave.c: 70: semitone_temp = -5;
 35176  004500  0EFB               	movlw	251
 35177  004502  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35178                           
 35179                           ; BSR set to: 0
 35180                           ;octave.c: 71: keyPress = 1;
 35181  004504  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35182  004506                     l2819:
 35183  004506                     l29960:
 35184                           
 35185                           ; BSR set to: 0
 35186                           ;octave.c: 72: }
 35187                           ;octave.c: 73: if(button_state_now == (0x08000000 | 0x00000100))
 35188  004506  05D9               	decf	(_button_state_now+1)& (0+255),w,b
 35189  004508  E109               	bnz	l29966
 35190  00450A  0E08               	movlw	8
 35191  00450C  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35192  00450E  11D8               	iorwf	_button_state_now& (0+255),w,b
 35193  004510  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35194  004512  A4D8               	btfss	status,2,c
 35195  004514  D003               	goto	l2820
 35196                           
 35197                           ; BSR set to: 0
 35198                           ;octave.c: 74: {
 35199                           ;octave.c: 75: semitone_temp = -4;
 35200  004516  0EFC               	movlw	252
 35201  004518  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35202                           
 35203                           ; BSR set to: 0
 35204                           ;octave.c: 76: keyPress = 1;
 35205  00451A  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35206  00451C                     l2820:
 35207  00451C                     l29966:
 35208                           
 35209                           ; BSR set to: 0
 35210                           ;octave.c: 77: }
 35211                           ;octave.c: 78: if(button_state_now == (0x08000000 | 0x00000200))
 35212  00451C  0E02               	movlw	2
 35213  00451E  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 35214  004520  E109               	bnz	l29972
 35215  004522  0E08               	movlw	8
 35216  004524  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35217  004526  11D8               	iorwf	_button_state_now& (0+255),w,b
 35218  004528  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35219  00452A  A4D8               	btfss	status,2,c
 35220  00452C  D003               	goto	l2821
 35221                           
 35222                           ; BSR set to: 0
 35223                           ;octave.c: 79: {
 35224                           ;octave.c: 80: semitone_temp = -3;
 35225  00452E  0EFD               	movlw	253
 35226  004530  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35227                           
 35228                           ; BSR set to: 0
 35229                           ;octave.c: 81: keyPress = 1;
 35230  004532  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35231  004534                     l2821:
 35232  004534                     l29972:
 35233                           
 35234                           ; BSR set to: 0
 35235                           ;octave.c: 82: }
 35236                           ;octave.c: 83: if(button_state_now == (0x08000000 | 0x00000400))
 35237  004534  0E04               	movlw	4
 35238  004536  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 35239  004538  E109               	bnz	l29978
 35240  00453A  0E08               	movlw	8
 35241  00453C  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35242  00453E  11D8               	iorwf	_button_state_now& (0+255),w,b
 35243  004540  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35244  004542  A4D8               	btfss	status,2,c
 35245  004544  D003               	goto	l2822
 35246                           
 35247                           ; BSR set to: 0
 35248                           ;octave.c: 84: {
 35249                           ;octave.c: 85: semitone_temp = -2;
 35250  004546  0EFE               	movlw	254
 35251  004548  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35252                           
 35253                           ; BSR set to: 0
 35254                           ;octave.c: 86: keyPress = 1;
 35255  00454A  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35256  00454C                     l2822:
 35257  00454C                     l29978:
 35258                           
 35259                           ; BSR set to: 0
 35260                           ;octave.c: 87: }
 35261                           ;octave.c: 88: if(button_state_now == (0x08000000 | 0x00000800))
 35262  00454C  0E08               	movlw	8
 35263  00454E  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 35264  004550  E108               	bnz	l29982
 35265  004552  0E08               	movlw	8
 35266  004554  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35267  004556  11D8               	iorwf	_button_state_now& (0+255),w,b
 35268  004558  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35269  00455A  A4D8               	btfss	status,2,c
 35270  00455C  D002               	goto	l2823
 35271                           
 35272                           ; BSR set to: 0
 35273                           ;octave.c: 89: {
 35274                           ;octave.c: 90: semitone_temp = -1;
 35275  00455E  69EA               	setf	keyboardTranspose@semitone_temp& (0+255),b
 35276                           
 35277                           ;octave.c: 91: keyPress = 1;
 35278  004560  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35279  004562                     l2823:
 35280  004562                     l29982:
 35281                           
 35282                           ; BSR set to: 0
 35283                           ;octave.c: 92: }
 35284                           ;octave.c: 93: if(button_state_now == (0x08000000 | 0x00001000))
 35285  004562  0E10               	movlw	16
 35286  004564  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 35287  004566  E109               	bnz	l29988
 35288  004568  0E08               	movlw	8
 35289  00456A  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35290  00456C  11D8               	iorwf	_button_state_now& (0+255),w,b
 35291  00456E  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35292  004570  A4D8               	btfss	status,2,c
 35293  004572  D003               	goto	l2824
 35294                           
 35295                           ; BSR set to: 0
 35296                           ;octave.c: 94: {
 35297                           ;octave.c: 95: semitone_temp = 0;
 35298  004574  0E00               	movlw	0
 35299  004576  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35300                           
 35301                           ; BSR set to: 0
 35302                           ;octave.c: 96: keyPress = 1;
 35303  004578  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35304  00457A                     l2824:
 35305  00457A                     l29988:
 35306                           
 35307                           ; BSR set to: 0
 35308                           ;octave.c: 97: }
 35309                           ;octave.c: 98: if(button_state_now == (0x08000000 | 0x00002000))
 35310  00457A  0E20               	movlw	32
 35311  00457C  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 35312  00457E  E109               	bnz	l29994
 35313  004580  0E08               	movlw	8
 35314  004582  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35315  004584  11D8               	iorwf	_button_state_now& (0+255),w,b
 35316  004586  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35317  004588  A4D8               	btfss	status,2,c
 35318  00458A  D003               	goto	l2825
 35319                           
 35320                           ; BSR set to: 0
 35321                           ;octave.c: 99: {
 35322                           ;octave.c: 100: semitone_temp = 1;
 35323  00458C  0E01               	movlw	1
 35324  00458E  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35325                           
 35326                           ; BSR set to: 0
 35327                           ;octave.c: 101: keyPress = 1;
 35328  004590  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35329  004592                     l2825:
 35330  004592                     l29994:
 35331                           
 35332                           ; BSR set to: 0
 35333                           ;octave.c: 102: }
 35334                           ;octave.c: 103: if(button_state_now == (0x08000000 | 0x00004000))
 35335  004592  0E40               	movlw	64
 35336  004594  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 35337  004596  E109               	bnz	l30000
 35338  004598  0E08               	movlw	8
 35339  00459A  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35340  00459C  11D8               	iorwf	_button_state_now& (0+255),w,b
 35341  00459E  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35342  0045A0  A4D8               	btfss	status,2,c
 35343  0045A2  D003               	goto	l2826
 35344                           
 35345                           ; BSR set to: 0
 35346                           ;octave.c: 104: {
 35347                           ;octave.c: 105: semitone_temp = 2;
 35348  0045A4  0E02               	movlw	2
 35349  0045A6  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35350                           
 35351                           ; BSR set to: 0
 35352                           ;octave.c: 106: keyPress = 1;
 35353  0045A8  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35354  0045AA                     l2826:
 35355  0045AA                     l30000:
 35356                           
 35357                           ; BSR set to: 0
 35358                           ;octave.c: 107: }
 35359                           ;octave.c: 108: if(button_state_now == (0x08000000 | 0x00008000))
 35360  0045AA  0E80               	movlw	128
 35361  0045AC  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 35362  0045AE  E109               	bnz	l30006
 35363  0045B0  0E08               	movlw	8
 35364  0045B2  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35365  0045B4  11D8               	iorwf	_button_state_now& (0+255),w,b
 35366  0045B6  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35367  0045B8  A4D8               	btfss	status,2,c
 35368  0045BA  D003               	goto	l2827
 35369                           
 35370                           ; BSR set to: 0
 35371                           ;octave.c: 109: {
 35372                           ;octave.c: 110: semitone_temp = 3;
 35373  0045BC  0E03               	movlw	3
 35374  0045BE  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35375                           
 35376                           ; BSR set to: 0
 35377                           ;octave.c: 111: keyPress = 1;
 35378  0045C0  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35379  0045C2                     l2827:
 35380  0045C2                     l30006:
 35381                           
 35382                           ; BSR set to: 0
 35383                           ;octave.c: 112: }
 35384                           ;octave.c: 113: if(button_state_now == (0x08000000 | 0x00010000))
 35385  0045C2  05DA               	decf	(_button_state_now+2)& (0+255),w,b
 35386  0045C4  E109               	bnz	l30012
 35387  0045C6  0E08               	movlw	8
 35388  0045C8  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35389  0045CA  11D8               	iorwf	_button_state_now& (0+255),w,b
 35390  0045CC  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35391  0045CE  A4D8               	btfss	status,2,c
 35392  0045D0  D003               	goto	l2828
 35393                           
 35394                           ; BSR set to: 0
 35395                           ;octave.c: 114: {
 35396                           ;octave.c: 115: semitone_temp = 4;
 35397  0045D2  0E04               	movlw	4
 35398  0045D4  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35399                           
 35400                           ; BSR set to: 0
 35401                           ;octave.c: 116: keyPress = 1;
 35402  0045D6  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35403  0045D8                     l2828:
 35404  0045D8                     l30012:
 35405                           
 35406                           ; BSR set to: 0
 35407                           ;octave.c: 117: }
 35408                           ;octave.c: 118: if(button_state_now == (0x08000000 | 0x00020000))
 35409  0045D8  0E02               	movlw	2
 35410  0045DA  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 35411  0045DC  E109               	bnz	l30018
 35412  0045DE  0E08               	movlw	8
 35413  0045E0  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35414  0045E2  11D8               	iorwf	_button_state_now& (0+255),w,b
 35415  0045E4  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35416  0045E6  A4D8               	btfss	status,2,c
 35417  0045E8  D003               	goto	l2829
 35418                           
 35419                           ; BSR set to: 0
 35420                           ;octave.c: 119: {
 35421                           ;octave.c: 120: semitone_temp = 5;
 35422  0045EA  0E05               	movlw	5
 35423  0045EC  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35424                           
 35425                           ; BSR set to: 0
 35426                           ;octave.c: 121: keyPress = 1;
 35427  0045EE  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35428  0045F0                     l2829:
 35429  0045F0                     l30018:
 35430                           
 35431                           ; BSR set to: 0
 35432                           ;octave.c: 122: }
 35433                           ;octave.c: 123: if(button_state_now == (0x08000000 | 0x00040000))
 35434  0045F0  0E04               	movlw	4
 35435  0045F2  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 35436  0045F4  E109               	bnz	l30024
 35437  0045F6  0E08               	movlw	8
 35438  0045F8  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35439  0045FA  11D8               	iorwf	_button_state_now& (0+255),w,b
 35440  0045FC  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35441  0045FE  A4D8               	btfss	status,2,c
 35442  004600  D003               	goto	l2830
 35443                           
 35444                           ; BSR set to: 0
 35445                           ;octave.c: 124: {
 35446                           ;octave.c: 125: semitone_temp = 6;
 35447  004602  0E06               	movlw	6
 35448  004604  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35449                           
 35450                           ; BSR set to: 0
 35451                           ;octave.c: 126: keyPress = 1;
 35452  004606  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35453  004608                     l2830:
 35454  004608                     l30024:
 35455                           
 35456                           ; BSR set to: 0
 35457                           ;octave.c: 127: }
 35458                           ;octave.c: 128: if(button_state_now == (0x08000000 | 0x00080000))
 35459  004608  0E08               	movlw	8
 35460  00460A  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 35461  00460C  E109               	bnz	l30030
 35462  00460E  0E08               	movlw	8
 35463  004610  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35464  004612  11D8               	iorwf	_button_state_now& (0+255),w,b
 35465  004614  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35466  004616  A4D8               	btfss	status,2,c
 35467  004618  D003               	goto	l2831
 35468                           
 35469                           ; BSR set to: 0
 35470                           ;octave.c: 129: {
 35471                           ;octave.c: 130: semitone_temp = 7;
 35472  00461A  0E07               	movlw	7
 35473  00461C  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35474                           
 35475                           ; BSR set to: 0
 35476                           ;octave.c: 131: keyPress = 1;
 35477  00461E  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35478  004620                     l2831:
 35479  004620                     l30030:
 35480                           
 35481                           ; BSR set to: 0
 35482                           ;octave.c: 132: }
 35483                           ;octave.c: 133: if(button_state_now == (0x08000000 | 0x00100000))
 35484  004620  0E10               	movlw	16
 35485  004622  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 35486  004624  E109               	bnz	l30036
 35487  004626  0E08               	movlw	8
 35488  004628  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35489  00462A  11D8               	iorwf	_button_state_now& (0+255),w,b
 35490  00462C  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35491  00462E  A4D8               	btfss	status,2,c
 35492  004630  D003               	goto	l2832
 35493                           
 35494                           ; BSR set to: 0
 35495                           ;octave.c: 134: {
 35496                           ;octave.c: 135: semitone_temp = 8;
 35497  004632  0E08               	movlw	8
 35498  004634  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35499                           
 35500                           ; BSR set to: 0
 35501                           ;octave.c: 136: keyPress = 1;
 35502  004636  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35503  004638                     l2832:
 35504  004638                     l30036:
 35505                           
 35506                           ; BSR set to: 0
 35507                           ;octave.c: 137: }
 35508                           ;octave.c: 138: if(button_state_now == (0x08000000 | 0x00200000))
 35509  004638  0E20               	movlw	32
 35510  00463A  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 35511  00463C  E109               	bnz	l30042
 35512  00463E  0E08               	movlw	8
 35513  004640  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35514  004642  11D8               	iorwf	_button_state_now& (0+255),w,b
 35515  004644  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35516  004646  A4D8               	btfss	status,2,c
 35517  004648  D003               	goto	l2833
 35518                           
 35519                           ; BSR set to: 0
 35520                           ;octave.c: 139: {
 35521                           ;octave.c: 140: semitone_temp = 9;
 35522  00464A  0E09               	movlw	9
 35523  00464C  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35524                           
 35525                           ; BSR set to: 0
 35526                           ;octave.c: 141: keyPress = 1;
 35527  00464E  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35528  004650                     l2833:
 35529  004650                     l30042:
 35530                           
 35531                           ; BSR set to: 0
 35532                           ;octave.c: 142: }
 35533                           ;octave.c: 143: if(button_state_now == (0x08000000 | 0x00400000))
 35534  004650  0E40               	movlw	64
 35535  004652  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 35536  004654  E109               	bnz	l30048
 35537  004656  0E08               	movlw	8
 35538  004658  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35539  00465A  11D8               	iorwf	_button_state_now& (0+255),w,b
 35540  00465C  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35541  00465E  A4D8               	btfss	status,2,c
 35542  004660  D003               	goto	l2834
 35543                           
 35544                           ; BSR set to: 0
 35545                           ;octave.c: 144: {
 35546                           ;octave.c: 145: semitone_temp = 10;
 35547  004662  0E0A               	movlw	10
 35548  004664  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35549                           
 35550                           ; BSR set to: 0
 35551                           ;octave.c: 146: keyPress = 1;
 35552  004666  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35553  004668                     l2834:
 35554  004668                     l30048:
 35555                           
 35556                           ; BSR set to: 0
 35557                           ;octave.c: 147: }
 35558                           ;octave.c: 148: if(button_state_now == (0x08000000 | 0x00800000))
 35559  004668  0E80               	movlw	128
 35560  00466A  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 35561  00466C  E109               	bnz	l30054
 35562  00466E  0E08               	movlw	8
 35563  004670  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35564  004672  11D8               	iorwf	_button_state_now& (0+255),w,b
 35565  004674  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35566  004676  A4D8               	btfss	status,2,c
 35567  004678  D003               	goto	l2835
 35568                           
 35569                           ; BSR set to: 0
 35570                           ;octave.c: 149: {
 35571                           ;octave.c: 150: semitone_temp = 11;
 35572  00467A  0E0B               	movlw	11
 35573  00467C  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35574                           
 35575                           ; BSR set to: 0
 35576                           ;octave.c: 151: keyPress = 1;
 35577  00467E  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35578  004680                     l2835:
 35579  004680                     l30054:
 35580                           
 35581                           ; BSR set to: 0
 35582                           ;octave.c: 152: }
 35583                           ;octave.c: 153: if(button_state_now == (0x08000000 | 0x01000000))
 35584  004680  0E09               	movlw	9
 35585  004682  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35586  004684  11D8               	iorwf	_button_state_now& (0+255),w,b
 35587  004686  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35588  004688  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35589  00468A  A4D8               	btfss	status,2,c
 35590  00468C  D003               	goto	l2836
 35591                           
 35592                           ; BSR set to: 0
 35593                           ;octave.c: 154: {
 35594                           ;octave.c: 155: semitone_temp = 12;
 35595  00468E  0E0C               	movlw	12
 35596  004690  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35597                           
 35598                           ; BSR set to: 0
 35599                           ;octave.c: 156: keyPress = 1;
 35600  004692  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35601  004694                     l2836:
 35602                           
 35603                           ; BSR set to: 0
 35604                           ;octave.c: 157: }
 35605                           ;octave.c: 159: if(keyPress == 1) {
 35606                           
 35607                           ; BSR set to: 0
 35608  004694  A401               	btfss	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35609  004696  0012               	return	
 35610                           
 35611                           ; BSR set to: 0
 35612                           ;octave.c: 162: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 35613  004698  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 35614  00469A  D00E               	goto	l2838
 35615                           
 35616                           ; BSR set to: 0
 35617  00469C  502F               	movf	_NUM_NOTES_PRESSED,w,c
 35618  00469E  B4D8               	btfsc	status,2,c
 35619  0046A0  D00B               	goto	l2838
 35620                           
 35621                           ; BSR set to: 0
 35622                           ;octave.c: 165: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 35623  0046A2  0E00               	movlw	0
 35624  0046A4  BE02               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 35625  0046A6  0E01               	movlw	1
 35626  0046A8  ECEF  F04B         	call	_wait_one_pulse
 35627                           
 35628                           ;octave.c: 169: if(note_off_was_sent == 0) {key_press_release_note_off();}
 35629  0046AC  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 35630  0046AE  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 35631                           
 35632                           ;octave.c: 172: suppress_note_off = 1;
 35633  0046B2  8602               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 35634                           
 35635                           ;octave.c: 174: flag1 = 1;
 35636  0046B4  8E01               	bsf	_flag1/(0+8),_flag1& (0+7),c
 35637                           
 35638                           ;octave.c: 176: flag2 = 1;
 35639  0046B6  8C01               	bsf	_flag2/(0+8),_flag2& (0+7),c
 35640  0046B8                     l2838:
 35641                           
 35642                           ;octave.c: 177: }
 35643                           ;octave.c: 180: if (semitone_temp > 12) {semitone_temp = 12;}
 35644  0046B8  0100               	movlb	0	; () banked
 35645  0046BA  51EA               	movf	keyboardTranspose@semitone_temp& (0+255),w,b
 35646  0046BC  0A80               	xorlw	128
 35647  0046BE  0F73               	addlw	-141
 35648  0046C0  A0D8               	btfss	status,0,c
 35649  0046C2  D002               	goto	l2840
 35650                           
 35651                           ; BSR set to: 0
 35652  0046C4  0E0C               	movlw	12
 35653  0046C6  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35654  0046C8                     l2840:
 35655                           
 35656                           ; BSR set to: 0
 35657                           ;octave.c: 181: if (semitone_temp < -12) {semitone_temp = -12;}
 35658                           
 35659                           ; BSR set to: 0
 35660  0046C8  51EA               	movf	keyboardTranspose@semitone_temp& (0+255),w,b
 35661  0046CA  0A80               	xorlw	128
 35662  0046CC  0F8C               	addlw	140
 35663  0046CE  B0D8               	btfsc	status,0,c
 35664  0046D0  D002               	goto	l2841
 35665                           
 35666                           ; BSR set to: 0
 35667  0046D2  0EF4               	movlw	244
 35668  0046D4  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35669  0046D6                     l2841:
 35670                           
 35671                           ; BSR set to: 0
 35672                           ;octave.c: 182: semitone = semitone_temp;
 35673                           
 35674                           ; BSR set to: 0
 35675  0046D6  C0EA  F03B         	movff	keyboardTranspose@semitone_temp,_semitone
 35676                           
 35677                           ; BSR set to: 0
 35678                           ;octave.c: 183: printThisNumber(semitone);
 35679  0046DA  503B               	movf	_semitone,w,c
 35680  0046DC  6F60               	movwf	printThisNumber@n& (0+255),b
 35681  0046DE  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 35682  0046E0  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 35683  0046E2  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 35684  0046E4  ECD0  F04C         	call	_printThisNumber	;wreg free
 35685                           
 35686                           ;octave.c: 184: keyPress = 0;
 35687  0046E8  9401               	bcf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35688  0046EA  0012               	return	
 35689  0046EC                     __end_of_keyboardTranspose:
 35690                           	opt stack 0
 35691                           tblptru	equ	0xFF8
 35692                           tblptrh	equ	0xFF7
 35693                           tblptrl	equ	0xFF6
 35694                           tablat	equ	0xFF5
 35695                           prodh	equ	0xFF4
 35696                           prodl	equ	0xFF3
 35697                           intcon	equ	0xFF2
 35698                           intcon2	equ	0xFF1
 35699                           indf0	equ	0xFEF
 35700                           postinc0	equ	0xFEE
 35701                           fsr0h	equ	0xFEA
 35702                           fsr0l	equ	0xFE9
 35703                           wreg	equ	0xFE8
 35704                           postinc1	equ	0xFE6
 35705                           postdec1	equ	0xFE5
 35706                           plusw1	equ	0xFE3
 35707                           fsr1h	equ	0xFE2
 35708                           fsr1l	equ	0xFE1
 35709                           indf2	equ	0xFDF
 35710                           postinc2	equ	0xFDE
 35711                           postdec2	equ	0xFDD
 35712                           plusw2	equ	0xFDB
 35713                           fsr2h	equ	0xFDA
 35714                           fsr2l	equ	0xFD9
 35715                           status	equ	0xFD8
 35716                           
 35717 ;; *************** function _wait_one_pulse *****************
 35718 ;; Defined at:
 35719 ;;		line 20 in file "arpeggio.c"
 35720 ;; Parameters:    Size  Location     Type
 35721 ;;  mode            1    wreg     unsigned char 
 35722 ;; Auto vars:     Size  Location     Type
 35723 ;;  mode            1    0[BANK0 ] unsigned char 
 35724 ;; Return value:  Size  Location     Type
 35725 ;;                  1    wreg      void 
 35726 ;; Registers used:
 35727 ;;		wreg, status,2
 35728 ;; Tracked objects:
 35729 ;;		On entry : 0/0
 35730 ;;		On exit  : 0/0
 35731 ;;		Unchanged: 0/0
 35732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35734 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35736 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35737 ;;Total ram usage:        1 bytes
 35738 ;; Hardware stack levels used:    1
 35739 ;; Hardware stack levels required when called:    5
 35740 ;; This function calls:
 35741 ;;		Nothing
 35742 ;; This function is called by:
 35743 ;;		_playThisNotePentatonic
 35744 ;;		_playTriad
 35745 ;;		_playSeventh
 35746 ;;		_playThisNote
 35747 ;;		_playThisNote8
 35748 ;;		_playDiatonicTriadMajor
 35749 ;;		_playDiatonicSeventhMajor
 35750 ;;		_playDiatonicTriadMinor
 35751 ;;		_playDiatonicSeventhMinor
 35752 ;;		_keyboardTranspose
 35753 ;;		_processOctave
 35754 ;; This function uses a non-reentrant model
 35755 ;;
 35756                           
 35757                           	psect	text98
 35758  0097DE                     __ptext98:
 35759                           	opt stack 0
 35760  0097DE                     _wait_one_pulse:
 35761                           	opt stack 20
 35762                           
 35763                           ;incstack = 0
 35764                           ;wait_one_pulse@mode stored from wreg
 35765  0097DE  0100               	movlb	0	; () banked
 35766  0097E0  6F60               	movwf	wait_one_pulse@mode& (0+255),b
 35767                           
 35768                           ;arpeggio.c: 22: lastNoteMode = mode;
 35769  0097E2  0100               	movlb	0	; () banked
 35770  0097E4  A160               	btfss	wait_one_pulse@mode& (0+255),0,b
 35771  0097E6  D002               	goto	u45240
 35772  0097E8  8403               	bsf	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 35773  0097EA  D001               	goto	u45255
 35774  0097EC                     u45240:
 35775  0097EC  9403               	bcf	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 35776  0097EE                     u45255:
 35777                           
 35778                           ;arpeggio.c: 25: if(lastNoteMode == 0) {
 35779  0097EE  B403               	btfsc	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 35780  0097F0  D004               	goto	l5404
 35781                           
 35782                           ;arpeggio.c: 26: finishLastNote = 0;
 35783  0097F2  9A02               	bcf	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 35784                           
 35785                           ;arpeggio.c: 27: TIMER_OVERFLOWS = 0;
 35786  0097F4  0E00               	movlw	0
 35787  0097F6  6E2E               	movwf	_TIMER_OVERFLOWS,c
 35788                           
 35789                           ;arpeggio.c: 28: return;
 35790  0097F8  0012               	return	
 35791  0097FA                     l5404:
 35792                           
 35793                           ;arpeggio.c: 29: }
 35794                           ;arpeggio.c: 32: if(lastNoteMode == 1) {
 35795  0097FA  A403               	btfss	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 35796  0097FC  0012               	return	
 35797                           
 35798                           ;arpeggio.c: 33: finishLastNote = 1;
 35799  0097FE  8A02               	bsf	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 35800                           
 35801                           ;arpeggio.c: 34: TMR0ON = 1;
 35802  009800  8ED5               	bsf	4053,7,c	;volatile
 35803  009802  AA02               	btfss	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 35804  009804  0012               	return	
 35805  009806  D7FD               	goto	l5408
 35806  009808                     __end_of_wait_one_pulse:
 35807                           	opt stack 0
 35808                           tblptru	equ	0xFF8
 35809                           tblptrh	equ	0xFF7
 35810                           tblptrl	equ	0xFF6
 35811                           tablat	equ	0xFF5
 35812                           prodh	equ	0xFF4
 35813                           prodl	equ	0xFF3
 35814                           intcon	equ	0xFF2
 35815                           intcon2	equ	0xFF1
 35816                           indf0	equ	0xFEF
 35817                           postinc0	equ	0xFEE
 35818                           fsr0h	equ	0xFEA
 35819                           fsr0l	equ	0xFE9
 35820                           wreg	equ	0xFE8
 35821                           postinc1	equ	0xFE6
 35822                           postdec1	equ	0xFE5
 35823                           plusw1	equ	0xFE3
 35824                           fsr1h	equ	0xFE2
 35825                           fsr1l	equ	0xFE1
 35826                           indf2	equ	0xFDF
 35827                           postinc2	equ	0xFDE
 35828                           postdec2	equ	0xFDD
 35829                           plusw2	equ	0xFDB
 35830                           fsr2h	equ	0xFDA
 35831                           fsr2l	equ	0xFD9
 35832                           status	equ	0xFD8
 35833                           
 35834 ;; *************** function _printThisNumber *****************
 35835 ;; Defined at:
 35836 ;;		line 21 in file "octave.c"
 35837 ;; Parameters:    Size  Location     Type
 35838 ;;  n               2    0[BANK0 ] int 
 35839 ;; Auto vars:     Size  Location     Type
 35840 ;;		None
 35841 ;; Return value:  Size  Location     Type
 35842 ;;                  1    wreg      void 
 35843 ;; Registers used:
 35844 ;;		wreg, status,2
 35845 ;; Tracked objects:
 35846 ;;		On entry : 0/0
 35847 ;;		On exit  : 0/0
 35848 ;;		Unchanged: 0/0
 35849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35850 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35853 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35854 ;;Total ram usage:        2 bytes
 35855 ;; Hardware stack levels used:    1
 35856 ;; Hardware stack levels required when called:    5
 35857 ;; This function calls:
 35858 ;;		Nothing
 35859 ;; This function is called by:
 35860 ;;		_keyboardTranspose
 35861 ;;		_processOctave
 35862 ;; This function uses a non-reentrant model
 35863 ;;
 35864                           
 35865                           	psect	text99
 35866  0099A0                     __ptext99:
 35867                           	opt stack 0
 35868  0099A0                     _printThisNumber:
 35869                           	opt stack 20
 35870                           
 35871                           ;octave.c: 22: DISPLAY_MODE = 0;
 35872                           
 35873                           ;incstack = 0
 35874  0099A0  0E00               	movlw	0
 35875  0099A2  0100               	movlb	0	; () banked
 35876  0099A4  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 35877                           
 35878                           ;octave.c: 23: DIGIT_MODE = 0;
 35879  0099A6  0E00               	movlw	0
 35880  0099A8  6E3A               	movwf	_DIGIT_MODE,c
 35881                           
 35882                           ; BSR set to: 0
 35883                           ;octave.c: 24: number_to_display = n;
 35884  0099AA  C060  F04B         	movff	printThisNumber@n,_number_to_display
 35885  0099AE  C061  F04C         	movff	printThisNumber@n+1,_number_to_display+1
 35886                           
 35887                           ; BSR set to: 0
 35888  0099B2  0012               	return		;funcret
 35889  0099B4                     __end_of_printThisNumber:
 35890                           	opt stack 0
 35891                           tblptru	equ	0xFF8
 35892                           tblptrh	equ	0xFF7
 35893                           tblptrl	equ	0xFF6
 35894                           tablat	equ	0xFF5
 35895                           prodh	equ	0xFF4
 35896                           prodl	equ	0xFF3
 35897                           intcon	equ	0xFF2
 35898                           intcon2	equ	0xFF1
 35899                           indf0	equ	0xFEF
 35900                           postinc0	equ	0xFEE
 35901                           fsr0h	equ	0xFEA
 35902                           fsr0l	equ	0xFE9
 35903                           wreg	equ	0xFE8
 35904                           postinc1	equ	0xFE6
 35905                           postdec1	equ	0xFE5
 35906                           plusw1	equ	0xFE3
 35907                           fsr1h	equ	0xFE2
 35908                           fsr1l	equ	0xFE1
 35909                           indf2	equ	0xFDF
 35910                           postinc2	equ	0xFDE
 35911                           postdec2	equ	0xFDD
 35912                           plusw2	equ	0xFDB
 35913                           fsr2h	equ	0xFDA
 35914                           fsr2l	equ	0xFD9
 35915                           status	equ	0xFD8
 35916                           
 35917 ;; *************** function _buttonInputsSerial *****************
 35918 ;; Defined at:
 35919 ;;		line 307 in file "main.c"
 35920 ;; Parameters:    Size  Location     Type
 35921 ;;		None
 35922 ;; Auto vars:     Size  Location     Type
 35923 ;;  i               1    5[BANK0 ] unsigned char 
 35924 ;;  i               1    4[BANK0 ] unsigned char 
 35925 ;; Return value:  Size  Location     Type
 35926 ;;                  1    wreg      void 
 35927 ;; Registers used:
 35928 ;;		wreg, status,2, status,0, cstack
 35929 ;; Tracked objects:
 35930 ;;		On entry : 0/0
 35931 ;;		On exit  : 0/0
 35932 ;;		Unchanged: 0/0
 35933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35935 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35936 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35937 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35938 ;;Total ram usage:        6 bytes
 35939 ;; Hardware stack levels used:    1
 35940 ;; Hardware stack levels required when called:    6
 35941 ;; This function calls:
 35942 ;;		_clock
 35943 ;;		_load
 35944 ;; This function is called by:
 35945 ;;		_digitalInputs
 35946 ;; This function uses a non-reentrant model
 35947 ;;
 35948                           
 35949                           	psect	text100
 35950  0086F4                     __ptext100:
 35951                           	opt stack 0
 35952  0086F4                     _buttonInputsSerial:
 35953                           	opt stack 20
 35954                           
 35955                           ;main.c: 309: button_state_now = 0;
 35956                           
 35957                           ; BSR set to: 0
 35958                           ;incstack = 0
 35959  0086F4  0E00               	movlw	0
 35960  0086F6  0100               	movlb	0	; () banked
 35961  0086F8  6FD8               	movwf	_button_state_now& (0+255),b
 35962  0086FA  0E00               	movlw	0
 35963  0086FC  6FD9               	movwf	(_button_state_now+1)& (0+255),b
 35964  0086FE  0E00               	movlw	0
 35965  008700  6FDA               	movwf	(_button_state_now+2)& (0+255),b
 35966  008702  0E00               	movlw	0
 35967  008704  6FDB               	movwf	(_button_state_now+3)& (0+255),b
 35968                           
 35969                           ;main.c: 310: drum_button_state_now = 0;
 35970  008706  0E00               	movlw	0
 35971  008708  6E39               	movwf	_drum_button_state_now,c
 35972                           
 35973                           ; BSR set to: 0
 35974                           ;main.c: 311: load();
 35975  00870A  ECF6  F04C         	call	_load	;wreg free
 35976                           
 35977                           ;main.c: 314: for (unsigned char i = 0;i<12;i++){
 35978  00870E  0E00               	movlw	0
 35979  008710  0100               	movlb	0	; () banked
 35980  008712  6F64               	movwf	buttonInputsSerial@i& (0+255),b
 35981  008714                     l30374:
 35982                           
 35983                           ; BSR set to: 0
 35984  008714  0E0B               	movlw	11
 35985  008716  6564               	cpfsgt	buttonInputsSerial@i& (0+255),b
 35986  008718  D001               	goto	l4975
 35987  00871A  D009               	goto	u54830
 35988  00871C                     l4975:
 35989                           
 35990                           ; BSR set to: 0
 35991                           ;main.c: 315: drum_button_state_now = (drum_button_state_now << 1) | (RC4);
 35992                           
 35993                           ; BSR set to: 0
 35994  00871C  90D8               	bcf	status,0,c
 35995  00871E  B882               	btfsc	3970,4,c	;volatile
 35996  008720  80D8               	bsf	status,0,c
 35997  008722  3639               	rlcf	_drum_button_state_now,f,c
 35998                           
 35999                           ; BSR set to: 0
 36000                           ;main.c: 316: clock();
 36001  008724  ECF9  F04C         	call	_clock	;wreg free
 36002  008728  0100               	movlb	0	; () banked
 36003  00872A  2B64               	incf	buttonInputsSerial@i& (0+255),f,b
 36004  00872C  D7F3               	goto	l30374
 36005  00872E                     u54830:
 36006                           
 36007                           ; BSR set to: 0
 36008                           ;main.c: 317: }
 36009                           ;main.c: 320: for (unsigned char i = 0;i<28;i++){
 36010                           
 36011                           ; BSR set to: 0
 36012  00872E  0E00               	movlw	0
 36013  008730  6F65               	movwf	buttonInputsSerial@i_4479& (0+255),b
 36014  008732                     l30388:
 36015                           
 36016                           ; BSR set to: 0
 36017  008732  0E1B               	movlw	27
 36018  008734  6565               	cpfsgt	buttonInputsSerial@i_4479& (0+255),b
 36019  008736  D001               	goto	l4977
 36020  008738  0012               	return	
 36021  00873A                     l4977:
 36022                           
 36023                           ; BSR set to: 0
 36024                           ;main.c: 321: button_state_now = (button_state_now << 1) | (RC4);
 36025                           
 36026                           ; BSR set to: 0
 36027  00873A  90D8               	bcf	status,0,c
 36028  00873C  35D8               	rlcf	_button_state_now& (0+255),w,b
 36029  00873E  6F60               	movwf	??_buttonInputsSerial& (0+255),b
 36030  008740  35D9               	rlcf	(_button_state_now+1)& (0+255),w,b
 36031  008742  6F61               	movwf	(??_buttonInputsSerial+1)& (0+255),b
 36032  008744  35DA               	rlcf	(_button_state_now+2)& (0+255),w,b
 36033  008746  6F62               	movwf	(??_buttonInputsSerial+2)& (0+255),b
 36034  008748  35DB               	rlcf	(_button_state_now+3)& (0+255),w,b
 36035  00874A  6F63               	movwf	(??_buttonInputsSerial+3)& (0+255),b
 36036  00874C  A882               	btfss	3970,4,c	;volatile
 36037  00874E  D002               	goto	u54850
 36038  008750  0E01               	movlw	1
 36039  008752  D001               	goto	u54860
 36040  008754                     u54850:
 36041  008754  0E00               	movlw	0
 36042  008756                     u54860:
 36043  008756  1160               	iorwf	??_buttonInputsSerial& (0+255),w,b
 36044  008758  6FD8               	movwf	_button_state_now& (0+255),b
 36045  00875A  5161               	movf	(??_buttonInputsSerial+1)& (0+255),w,b
 36046  00875C  6FD9               	movwf	(_button_state_now+1)& (0+255),b
 36047  00875E  5162               	movf	(??_buttonInputsSerial+2)& (0+255),w,b
 36048  008760  6FDA               	movwf	(_button_state_now+2)& (0+255),b
 36049  008762  5163               	movf	(??_buttonInputsSerial+3)& (0+255),w,b
 36050  008764  6FDB               	movwf	(_button_state_now+3)& (0+255),b
 36051                           
 36052                           ; BSR set to: 0
 36053                           ;main.c: 322: clock();
 36054  008766  ECF9  F04C         	call	_clock	;wreg free
 36055  00876A  0100               	movlb	0	; () banked
 36056  00876C  2B65               	incf	buttonInputsSerial@i_4479& (0+255),f,b
 36057  00876E  D7E1               	goto	l30388
 36058  008770                     __end_of_buttonInputsSerial:
 36059                           	opt stack 0
 36060                           tblptru	equ	0xFF8
 36061                           tblptrh	equ	0xFF7
 36062                           tblptrl	equ	0xFF6
 36063                           tablat	equ	0xFF5
 36064                           prodh	equ	0xFF4
 36065                           prodl	equ	0xFF3
 36066                           intcon	equ	0xFF2
 36067                           intcon2	equ	0xFF1
 36068                           indf0	equ	0xFEF
 36069                           postinc0	equ	0xFEE
 36070                           fsr0h	equ	0xFEA
 36071                           fsr0l	equ	0xFE9
 36072                           wreg	equ	0xFE8
 36073                           postinc1	equ	0xFE6
 36074                           postdec1	equ	0xFE5
 36075                           plusw1	equ	0xFE3
 36076                           fsr1h	equ	0xFE2
 36077                           fsr1l	equ	0xFE1
 36078                           indf2	equ	0xFDF
 36079                           postinc2	equ	0xFDE
 36080                           postdec2	equ	0xFDD
 36081                           plusw2	equ	0xFDB
 36082                           fsr2h	equ	0xFDA
 36083                           fsr2l	equ	0xFD9
 36084                           status	equ	0xFD8
 36085                           
 36086 ;; *************** function _load *****************
 36087 ;; Defined at:
 36088 ;;		line 294 in file "main.c"
 36089 ;; Parameters:    Size  Location     Type
 36090 ;;		None
 36091 ;; Auto vars:     Size  Location     Type
 36092 ;;		None
 36093 ;; Return value:  Size  Location     Type
 36094 ;;                  1    wreg      void 
 36095 ;; Registers used:
 36096 ;;		None
 36097 ;; Tracked objects:
 36098 ;;		On entry : 0/0
 36099 ;;		On exit  : 0/0
 36100 ;;		Unchanged: 0/0
 36101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 36102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36106 ;;Total ram usage:        0 bytes
 36107 ;; Hardware stack levels used:    1
 36108 ;; Hardware stack levels required when called:    5
 36109 ;; This function calls:
 36110 ;;		Nothing
 36111 ;; This function is called by:
 36112 ;;		_buttonInputsSerial
 36113 ;; This function uses a non-reentrant model
 36114 ;;
 36115                           
 36116                           	psect	text101
 36117  0099EC                     __ptext101:
 36118                           	opt stack 0
 36119  0099EC                     _load:
 36120                           	opt stack 20
 36121                           
 36122                           ;main.c: 295: RB1 = 0;
 36123                           
 36124                           ; BSR set to: 0
 36125                           ;incstack = 0
 36126  0099EC  9281               	bcf	3969,1,c	;volatile
 36127                           
 36128                           ;main.c: 297: RB1 = 1;
 36129  0099EE  8281               	bsf	3969,1,c	;volatile
 36130  0099F0  0012               	return		;funcret
 36131  0099F2                     __end_of_load:
 36132                           	opt stack 0
 36133                           tblptru	equ	0xFF8
 36134                           tblptrh	equ	0xFF7
 36135                           tblptrl	equ	0xFF6
 36136                           tablat	equ	0xFF5
 36137                           prodh	equ	0xFF4
 36138                           prodl	equ	0xFF3
 36139                           intcon	equ	0xFF2
 36140                           intcon2	equ	0xFF1
 36141                           indf0	equ	0xFEF
 36142                           postinc0	equ	0xFEE
 36143                           fsr0h	equ	0xFEA
 36144                           fsr0l	equ	0xFE9
 36145                           wreg	equ	0xFE8
 36146                           postinc1	equ	0xFE6
 36147                           postdec1	equ	0xFE5
 36148                           plusw1	equ	0xFE3
 36149                           fsr1h	equ	0xFE2
 36150                           fsr1l	equ	0xFE1
 36151                           indf2	equ	0xFDF
 36152                           postinc2	equ	0xFDE
 36153                           postdec2	equ	0xFDD
 36154                           plusw2	equ	0xFDB
 36155                           fsr2h	equ	0xFDA
 36156                           fsr2l	equ	0xFD9
 36157                           status	equ	0xFD8
 36158                           
 36159 ;; *************** function _clock *****************
 36160 ;; Defined at:
 36161 ;;		line 301 in file "main.c"
 36162 ;; Parameters:    Size  Location     Type
 36163 ;;		None
 36164 ;; Auto vars:     Size  Location     Type
 36165 ;;		None
 36166 ;; Return value:  Size  Location     Type
 36167 ;;                  1    wreg      void 
 36168 ;; Registers used:
 36169 ;;		None
 36170 ;; Tracked objects:
 36171 ;;		On entry : 0/0
 36172 ;;		On exit  : 0/0
 36173 ;;		Unchanged: 0/0
 36174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 36175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36179 ;;Total ram usage:        0 bytes
 36180 ;; Hardware stack levels used:    1
 36181 ;; Hardware stack levels required when called:    5
 36182 ;; This function calls:
 36183 ;;		Nothing
 36184 ;; This function is called by:
 36185 ;;		_buttonInputsSerial
 36186 ;; This function uses a non-reentrant model
 36187 ;;
 36188                           
 36189                           	psect	text102
 36190  0099F2                     __ptext102:
 36191                           	opt stack 0
 36192  0099F2                     _clock:
 36193                           	opt stack 20
 36194                           
 36195                           ;main.c: 302: RC5 = 1;
 36196                           
 36197                           ;incstack = 0
 36198  0099F2  8A82               	bsf	3970,5,c	;volatile
 36199                           
 36200                           ;main.c: 303: RC5 = 0;
 36201  0099F4  9A82               	bcf	3970,5,c	;volatile
 36202  0099F6  0012               	return		;funcret
 36203  0099F8                     __end_of_clock:
 36204                           	opt stack 0
 36205                           tblptru	equ	0xFF8
 36206                           tblptrh	equ	0xFF7
 36207                           tblptrl	equ	0xFF6
 36208                           tablat	equ	0xFF5
 36209                           prodh	equ	0xFF4
 36210                           prodl	equ	0xFF3
 36211                           intcon	equ	0xFF2
 36212                           intcon2	equ	0xFF1
 36213                           indf0	equ	0xFEF
 36214                           postinc0	equ	0xFEE
 36215                           fsr0h	equ	0xFEA
 36216                           fsr0l	equ	0xFE9
 36217                           wreg	equ	0xFE8
 36218                           postinc1	equ	0xFE6
 36219                           postdec1	equ	0xFE5
 36220                           plusw1	equ	0xFE3
 36221                           fsr1h	equ	0xFE2
 36222                           fsr1l	equ	0xFE1
 36223                           indf2	equ	0xFDF
 36224                           postinc2	equ	0xFDE
 36225                           postdec2	equ	0xFDD
 36226                           plusw2	equ	0xFDB
 36227                           fsr2h	equ	0xFDA
 36228                           fsr2l	equ	0xFD9
 36229                           status	equ	0xFD8
 36230                           
 36231 ;; *************** function _analogInputs *****************
 36232 ;; Defined at:
 36233 ;;		line 327 in file "main.c"
 36234 ;; Parameters:    Size  Location     Type
 36235 ;;		None
 36236 ;; Auto vars:     Size  Location     Type
 36237 ;;		None
 36238 ;; Return value:  Size  Location     Type
 36239 ;;                  1    wreg      void 
 36240 ;; Registers used:
 36241 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+9, btemp
      ++10, btemp+11, prodl, prodh, cstack
 36242 ;; Tracked objects:
 36243 ;;		On entry : 0/0
 36244 ;;		On exit  : 0/0
 36245 ;;		Unchanged: 0/0
 36246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 36247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36249 ;;      Temps:          0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 36250 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 36251 ;;Total ram usage:        7 bytes
 36252 ;; Hardware stack levels used:    1
 36253 ;; Hardware stack levels required when called:   11
 36254 ;; This function calls:
 36255 ;;		_readPotentiometers
 36256 ;; This function is called by:
 36257 ;;		_un_block_code
 36258 ;;		_main
 36259 ;; This function uses a non-reentrant model
 36260 ;;
 36261                           
 36262                           	psect	text103
 36263  009404                     __ptext103:
 36264                           	opt stack 0
 36265  009404                     _analogInputs:
 36266                           	opt stack 16
 36267                           
 36268                           ;main.c: 343: if(ARPEGGIO_ON == 0) {
 36269                           
 36270                           ;incstack = 0
 36271  009404  A604               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 36272                           
 36273                           ;main.c: 344: readPotentiometers();
 36274  009406  EC18  F005         	call	_readPotentiometers	;wreg free
 36275                           
 36276                           ;main.c: 345: }
 36277                           ;main.c: 348: if(ARPEGGIO_ON == 1) {
 36278  00940A  A604               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 36279  00940C  0012               	return	
 36280                           
 36281                           ;main.c: 351: if((TIMER_OVERFLOWS > 0) && (TIMER_OVERFLOWS < (NOTE_LENGTH_PULSES - 2))) 
      +                          {
 36282  00940E  502E               	movf	_TIMER_OVERFLOWS,w,c
 36283  009410  B4D8               	btfsc	status,2,c
 36284  009412  0012               	return	
 36285  009414  0EFE               	movlw	254
 36286  009416  0101               	movlb	1	; () banked
 36287  009418  6F9E               	movwf	??_analogInputs& (0+255),b
 36288  00941A  0EFF               	movlw	255
 36289  00941C  6F9F               	movwf	(??_analogInputs+1)& (0+255),b
 36290  00941E  504D               	movf	_NOTE_LENGTH_PULSES,w,c
 36291  009420  6FA0               	movwf	(??_analogInputs+2)& (0+255),b
 36292  009422  6BA1               	clrf	(??_analogInputs+3)& (0+255),b
 36293  009424  519E               	movf	??_analogInputs& (0+255),w,b
 36294  009426  27A0               	addwf	(??_analogInputs+2)& (0+255),f,b
 36295  009428  519F               	movf	(??_analogInputs+1)& (0+255),w,b
 36296  00942A  23A1               	addwfc	(??_analogInputs+3)& (0+255),f,b
 36297  00942C  502E               	movf	_TIMER_OVERFLOWS,w,c
 36298  00942E  6FA2               	movwf	(??_analogInputs+4)& (0+255),b
 36299  009430  6BA3               	clrf	(??_analogInputs+5)& (0+255),b
 36300  009432  51A0               	movf	(??_analogInputs+2)& (0+255),w,b
 36301  009434  5DA2               	subwf	(??_analogInputs+4)& (0+255),w,b
 36302  009436  51A3               	movf	(??_analogInputs+5)& (0+255),w,b
 36303  009438  0A80               	xorlw	128
 36304  00943A  6FA4               	movwf	(??_analogInputs+6)& (0+255),b
 36305  00943C  51A1               	movf	(??_analogInputs+3)& (0+255),w,b
 36306  00943E  0A80               	xorlw	128
 36307  009440  59A4               	subwfb	(??_analogInputs+6)& (0+255),w,b
 36308  009442  B0D8               	btfsc	status,0,c
 36309  009444  0012               	return	
 36310                           
 36311                           ; BSR set to: 1
 36312                           ;main.c: 352: readPotentiometers();
 36313  009446  EC18  F005         	call	_readPotentiometers	;wreg free
 36314  00944A  0012               	return	
 36315  00944C                     __end_of_analogInputs:
 36316                           	opt stack 0
 36317                           tblptru	equ	0xFF8
 36318                           tblptrh	equ	0xFF7
 36319                           tblptrl	equ	0xFF6
 36320                           tablat	equ	0xFF5
 36321                           prodh	equ	0xFF4
 36322                           prodl	equ	0xFF3
 36323                           intcon	equ	0xFF2
 36324                           intcon2	equ	0xFF1
 36325                           indf0	equ	0xFEF
 36326                           postinc0	equ	0xFEE
 36327                           fsr0h	equ	0xFEA
 36328                           fsr0l	equ	0xFE9
 36329                           wreg	equ	0xFE8
 36330                           postinc1	equ	0xFE6
 36331                           postdec1	equ	0xFE5
 36332                           plusw1	equ	0xFE3
 36333                           fsr1h	equ	0xFE2
 36334                           fsr1l	equ	0xFE1
 36335                           indf2	equ	0xFDF
 36336                           postinc2	equ	0xFDE
 36337                           postdec2	equ	0xFDD
 36338                           plusw2	equ	0xFDB
 36339                           fsr2h	equ	0xFDA
 36340                           fsr2l	equ	0xFD9
 36341                           status	equ	0xFD8
 36342                           
 36343 ;; *************** function _readPotentiometers *****************
 36344 ;; Defined at:
 36345 ;;		line 34 in file "potentiometers.c"
 36346 ;; Parameters:    Size  Location     Type
 36347 ;;		None
 36348 ;; Auto vars:     Size  Location     Type
 36349 ;;  i               1    6[BANK1 ] unsigned char 
 36350 ;;  i               1    4[BANK1 ] unsigned char 
 36351 ;;  i               1    5[BANK1 ] unsigned char 
 36352 ;; Return value:  Size  Location     Type
 36353 ;;                  1    wreg      void 
 36354 ;; Registers used:
 36355 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+9, btemp
      ++10, btemp+11, prodl, prodh, cstack
 36356 ;; Tracked objects:
 36357 ;;		On entry : 0/0
 36358 ;;		On exit  : 0/0
 36359 ;;		Unchanged: 0/0
 36360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 36361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36362 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 36363 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36364 ;;      Totals:         0       5       7       0       0       0       0       0       0       0       0       0       
      +0       0
 36365 ;;Total ram usage:       12 bytes
 36366 ;; Hardware stack levels used:    1
 36367 ;; Hardware stack levels required when called:   10
 36368 ;; This function calls:
 36369 ;;		_ADC_Read
 36370 ;;		___fladd
 36371 ;;		___flmul
 36372 ;;		___flneg
 36373 ;;		___fltol
 36374 ;;		___xxtofl
 36375 ;;		_map
 36376 ;;		_processPotentiometers
 36377 ;; This function is called by:
 36378 ;;		_analogInputs
 36379 ;; This function uses a non-reentrant model
 36380 ;;
 36381                           
 36382                           	psect	text104
 36383  000A30                     __ptext104:
 36384                           	opt stack 0
 36385  000A30                     _readPotentiometers:
 36386                           	opt stack 16
 36387                           
 36388                           ;potentiometers.c: 40: for(unsigned char i=0;i<16;i++){
 36389                           
 36390                           ;incstack = 0
 36391  000A30  0E00               	movlw	0
 36392  000A32  0101               	movlb	1	; () banked
 36393  000A34  6F9C               	movwf	readPotentiometers@i& (0+255),b
 36394  000A36                     l30266:
 36395                           
 36396                           ; BSR set to: 1
 36397  000A36  0E0F               	movlw	15
 36398  000A38  659C               	cpfsgt	readPotentiometers@i& (0+255),b
 36399  000A3A  D001               	goto	l4030
 36400  000A3C  D02B               	goto	u54600
 36401  000A3E                     l4030:
 36402                           
 36403                           ; BSR set to: 1
 36404                           ;potentiometers.c: 42: potentiometer_raw[i] = ADC_Read(i);
 36405                           
 36406                           ; BSR set to: 1
 36407  000A3E  519C               	movf	readPotentiometers@i& (0+255),w,b
 36408  000A40  EC40  F04B         	call	_ADC_Read
 36409  000A44  0101               	movlb	1	; () banked
 36410  000A46  519C               	movf	readPotentiometers@i& (0+255),w,b
 36411  000A48  0D02               	mullw	2
 36412  000A4A  0E69               	movlw	low _potentiometer_raw
 36413  000A4C  24F3               	addwf	prodl,w,c
 36414  000A4E  6ED9               	movwf	fsr2l,c
 36415  000A50  0E03               	movlw	high _potentiometer_raw
 36416  000A52  20F4               	addwfc	prodh,w,c
 36417  000A54  6EDA               	movwf	fsr2h,c
 36418  000A56  0100               	movlb	0	; () banked
 36419  000A58  C060  FFDE         	movff	?_ADC_Read,postinc2
 36420  000A5C  C061  FFDD         	movff	?_ADC_Read+1,postdec2
 36421                           
 36422                           ; BSR set to: 0
 36423                           ;potentiometers.c: 51: if (FIRST_READING == 0) {
 36424  000A60  BC05               	btfsc	_FIRST_READING/(0+8),_FIRST_READING& (0+7),c
 36425  000A62  D015               	goto	l4032
 36426                           
 36427                           ; BSR set to: 0
 36428                           ;potentiometers.c: 52: ema_sum[i] = potentiometer_raw[i];
 36429  000A64  0101               	movlb	1	; () banked
 36430  000A66  519C               	movf	readPotentiometers@i& (0+255),w,b
 36431  000A68  0D02               	mullw	2
 36432  000A6A  0E69               	movlw	low _potentiometer_raw
 36433  000A6C  24F3               	addwf	prodl,w,c
 36434  000A6E  6ED9               	movwf	fsr2l,c
 36435  000A70  0E03               	movlw	high _potentiometer_raw
 36436  000A72  20F4               	addwfc	prodh,w,c
 36437  000A74  6EDA               	movwf	fsr2h,c
 36438  000A76  519C               	movf	readPotentiometers@i& (0+255),w,b
 36439  000A78  0D02               	mullw	2
 36440  000A7A  0E40               	movlw	low _ema_sum
 36441  000A7C  24F3               	addwf	prodl,w,c
 36442  000A7E  6EE9               	movwf	fsr0l,c
 36443  000A80  0E02               	movlw	high _ema_sum
 36444  000A82  20F4               	addwfc	prodh,w,c
 36445  000A84  6EEA               	movwf	fsr0h,c
 36446  000A86  CFDE FFEE          	movff	postinc2,postinc0
 36447  000A8A  CFDD FFED          	movff	postdec2,postdec0
 36448  000A8E                     l4032:
 36449                           
 36450                           ; BSR set to: 1
 36451  000A8E  0101               	movlb	1	; () banked
 36452  000A90  2B9C               	incf	readPotentiometers@i& (0+255),f,b
 36453  000A92  D7D1               	goto	l30266
 36454  000A94                     u54600:
 36455                           
 36456                           ; BSR set to: 1
 36457                           ;potentiometers.c: 53: }
 36458                           ;potentiometers.c: 54: }
 36459                           ;potentiometers.c: 57: for(unsigned char i=0;i<16;i++){
 36460                           
 36461                           ; BSR set to: 1
 36462  000A94  0E00               	movlw	0
 36463  000A96  6F9B               	movwf	readPotentiometers@i_3434& (0+255),b
 36464  000A98                     l30282:
 36465                           
 36466                           ; BSR set to: 1
 36467  000A98  0E0F               	movlw	15
 36468  000A9A  659B               	cpfsgt	readPotentiometers@i_3434& (0+255),b
 36469  000A9C  D001               	goto	l4033
 36470  000A9E  D0A1               	goto	u54620
 36471  000AA0                     l4033:
 36472                           
 36473                           ; BSR set to: 1
 36474                           ;potentiometers.c: 58: ema_sum[i] = (ema_alpha * potentiometer_raw[i]) + ((1 - ema_alpha
      +                          ) * ema_sum[i]);
 36475                           
 36476                           ; BSR set to: 1
 36477  000AA0  519B               	movf	readPotentiometers@i_3434& (0+255),w,b
 36478  000AA2  0D02               	mullw	2
 36479  000AA4  0E40               	movlw	low _ema_sum
 36480  000AA6  24F3               	addwf	prodl,w,c
 36481  000AA8  6ED9               	movwf	fsr2l,c
 36482  000AAA  0E02               	movlw	high _ema_sum
 36483  000AAC  20F4               	addwfc	prodh,w,c
 36484  000AAE  6EDA               	movwf	fsr2h,c
 36485  000AB0  CFDE F060          	movff	postinc2,___xxtofl@val
 36486  000AB4  CFDD F061          	movff	postdec2,___xxtofl@val+1
 36487  000AB8  0100               	movlb	0	; () banked
 36488  000ABA  0E00               	movlw	0
 36489  000ABC  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 36490  000ABE  0EFF               	movlw	-1
 36491  000AC0  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 36492  000AC2  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 36493  000AC4  0E01               	movlw	1
 36494  000AC6  ECF4  F02F         	call	___xxtofl
 36495  000ACA  C060  F072         	movff	?___xxtofl,___flmul@a
 36496  000ACE  C061  F073         	movff	?___xxtofl+1,___flmul@a+1
 36497  000AD2  C062  F074         	movff	?___xxtofl+2,___flmul@a+2
 36498  000AD6  C063  F075         	movff	?___xxtofl+3,___flmul@a+3
 36499  000ADA  0E00               	movlw	0
 36500  000ADC  0100               	movlb	0	; () banked
 36501  000ADE  6FA8               	movwf	___fladd@a& (0+255),b
 36502  000AE0  0E00               	movlw	0
 36503  000AE2  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 36504  000AE4  0E80               	movlw	128
 36505  000AE6  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 36506  000AE8  0E3F               	movlw	63
 36507  000AEA  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 36508  000AEC  C104  F0A0         	movff	_ema_alpha,___flneg@f1
 36509  000AF0  C105  F0A1         	movff	_ema_alpha+1,___flneg@f1+1
 36510  000AF4  C106  F0A2         	movff	_ema_alpha+2,___flneg@f1+2
 36511  000AF8  C107  F0A3         	movff	_ema_alpha+3,___flneg@f1+3
 36512  000AFC  ECA9  F04B         	call	___flneg	;wreg free
 36513  000B00  C0A0  F0A4         	movff	?___flneg,___fladd@b
 36514  000B04  C0A1  F0A5         	movff	?___flneg+1,___fladd@b+1
 36515  000B08  C0A2  F0A6         	movff	?___flneg+2,___fladd@b+2
 36516  000B0C  C0A3  F0A7         	movff	?___flneg+3,___fladd@b+3
 36517  000B10  EC9B  F019         	call	___fladd	;wreg free
 36518  000B14  C0A4  F06E         	movff	?___fladd,___flmul@b
 36519  000B18  C0A5  F06F         	movff	?___fladd+1,___flmul@b+1
 36520  000B1C  C0A6  F070         	movff	?___fladd+2,___flmul@b+2
 36521  000B20  C0A7  F071         	movff	?___fladd+3,___flmul@b+3
 36522  000B24  ECF2  F017         	call	___flmul	;wreg free
 36523  000B28  C06E  F197         	movff	?___flmul,_readPotentiometers$5907
 36524  000B2C  C06F  F198         	movff	?___flmul+1,_readPotentiometers$5907+1
 36525  000B30  C070  F199         	movff	?___flmul+2,_readPotentiometers$5907+2
 36526  000B34  C071  F19A         	movff	?___flmul+3,_readPotentiometers$5907+3
 36527                           
 36528                           ;potentiometers.c: 58: ema_sum[i] = (ema_alpha * potentiometer_raw[i]) + ((1 - ema_alpha
      +                          ) * ema_sum[i]);
 36529  000B38  C197  F0A8         	movff	_readPotentiometers$5907,___fladd@a
 36530  000B3C  C198  F0A9         	movff	_readPotentiometers$5907+1,___fladd@a+1
 36531  000B40  C199  F0AA         	movff	_readPotentiometers$5907+2,___fladd@a+2
 36532  000B44  C19A  F0AB         	movff	_readPotentiometers$5907+3,___fladd@a+3
 36533  000B48  C104  F072         	movff	_ema_alpha,___flmul@a
 36534  000B4C  C105  F073         	movff	_ema_alpha+1,___flmul@a+1
 36535  000B50  C106  F074         	movff	_ema_alpha+2,___flmul@a+2
 36536  000B54  C107  F075         	movff	_ema_alpha+3,___flmul@a+3
 36537  000B58  0101               	movlb	1	; () banked
 36538  000B5A  519B               	movf	readPotentiometers@i_3434& (0+255),w,b
 36539  000B5C  0D02               	mullw	2
 36540  000B5E  0E69               	movlw	low _potentiometer_raw
 36541  000B60  24F3               	addwf	prodl,w,c
 36542  000B62  6ED9               	movwf	fsr2l,c
 36543  000B64  0E03               	movlw	high _potentiometer_raw
 36544  000B66  20F4               	addwfc	prodh,w,c
 36545  000B68  6EDA               	movwf	fsr2h,c
 36546  000B6A  CFDE F060          	movff	postinc2,___xxtofl@val
 36547  000B6E  CFDD F061          	movff	postdec2,___xxtofl@val+1
 36548  000B72  0100               	movlb	0	; () banked
 36549  000B74  0E00               	movlw	0
 36550  000B76  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 36551  000B78  0EFF               	movlw	-1
 36552  000B7A  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 36553  000B7C  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 36554  000B7E  0E01               	movlw	1
 36555  000B80  ECF4  F02F         	call	___xxtofl
 36556  000B84  C060  F06E         	movff	?___xxtofl,___flmul@b
 36557  000B88  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 36558  000B8C  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 36559  000B90  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 36560  000B94  ECF2  F017         	call	___flmul	;wreg free
 36561  000B98  C06E  F0A4         	movff	?___flmul,___fladd@b
 36562  000B9C  C06F  F0A5         	movff	?___flmul+1,___fladd@b+1
 36563  000BA0  C070  F0A6         	movff	?___flmul+2,___fladd@b+2
 36564  000BA4  C071  F0A7         	movff	?___flmul+3,___fladd@b+3
 36565  000BA8  EC9B  F019         	call	___fladd	;wreg free
 36566  000BAC  C0A4  F0B8         	movff	?___fladd,___fltol@f1
 36567  000BB0  C0A5  F0B9         	movff	?___fladd+1,___fltol@f1+1
 36568  000BB4  C0A6  F0BA         	movff	?___fladd+2,___fltol@f1+2
 36569  000BB8  C0A7  F0BB         	movff	?___fladd+3,___fltol@f1+3
 36570  000BBC  ECBE  F037         	call	___fltol	;wreg free
 36571  000BC0  0101               	movlb	1	; () banked
 36572  000BC2  519B               	movf	readPotentiometers@i_3434& (0+255),w,b
 36573  000BC4  0D02               	mullw	2
 36574  000BC6  0E40               	movlw	low _ema_sum
 36575  000BC8  24F3               	addwf	prodl,w,c
 36576  000BCA  6ED9               	movwf	fsr2l,c
 36577  000BCC  0E02               	movlw	high _ema_sum
 36578  000BCE  20F4               	addwfc	prodh,w,c
 36579  000BD0  6EDA               	movwf	fsr2h,c
 36580  000BD2  0100               	movlb	0	; () banked
 36581  000BD4  C0B8  FFDE         	movff	?___fltol,postinc2
 36582  000BD8  C0B9  FFDD         	movff	?___fltol+1,postdec2
 36583                           
 36584                           ; BSR set to: 0
 36585  000BDC  0101               	movlb	1	; () banked
 36586  000BDE  2B9B               	incf	readPotentiometers@i_3434& (0+255),f,b
 36587  000BE0  D75B               	goto	l30282
 36588  000BE2                     u54620:
 36589                           
 36590                           ; BSR set to: 1
 36591                           ;potentiometers.c: 59: }
 36592                           ;potentiometers.c: 64: for(unsigned char i = 0; i<16; i++){
 36593                           
 36594                           ; BSR set to: 1
 36595  000BE2  0E00               	movlw	0
 36596  000BE4  6F9D               	movwf	readPotentiometers@i_3435& (0+255),b
 36597  000BE6                     l30294:
 36598                           
 36599                           ; BSR set to: 1
 36600  000BE6  0E0F               	movlw	15
 36601  000BE8  659D               	cpfsgt	readPotentiometers@i_3435& (0+255),b
 36602  000BEA  D001               	goto	l4035
 36603  000BEC  D2D3               	goto	u54810
 36604  000BEE                     l4035:
 36605                           
 36606                           ; BSR set to: 1
 36607                           ;potentiometers.c: 74: static unsigned long count;
 36608                           ;potentiometers.c: 75: count++;
 36609                           
 36610                           ; BSR set to: 1
 36611  000BEE  0E01               	movlw	1
 36612  000BF0  0102               	movlb	2	; () banked
 36613  000BF2  2760               	addwf	readPotentiometers@count& (0+255),f,b
 36614  000BF4  0E00               	movlw	0
 36615  000BF6  2361               	addwfc	(readPotentiometers@count+1)& (0+255),f,b
 36616  000BF8  2362               	addwfc	(readPotentiometers@count+2)& (0+255),f,b
 36617  000BFA  2363               	addwfc	(readPotentiometers@count+3)& (0+255),f,b
 36618                           
 36619                           ; BSR set to: 2
 36620                           ;potentiometers.c: 81: if (FIRST_READING == 0) {potentiometer_filtered_last[i] = ema_sum
      +                          [i];}
 36621  000BFC  BC05               	btfsc	_FIRST_READING/(0+8),_FIRST_READING& (0+7),c
 36622  000BFE  D015               	goto	l4039
 36623                           
 36624                           ; BSR set to: 2
 36625  000C00  0101               	movlb	1	; () banked
 36626  000C02  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36627  000C04  0D02               	mullw	2
 36628  000C06  0E40               	movlw	low _ema_sum
 36629  000C08  24F3               	addwf	prodl,w,c
 36630  000C0A  6ED9               	movwf	fsr2l,c
 36631  000C0C  0E02               	movlw	high _ema_sum
 36632  000C0E  20F4               	addwfc	prodh,w,c
 36633  000C10  6EDA               	movwf	fsr2h,c
 36634  000C12  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36635  000C14  0D02               	mullw	2
 36636  000C16  0E00               	movlw	low _potentiometer_filtered_last
 36637  000C18  24F3               	addwf	prodl,w,c
 36638  000C1A  6EE9               	movwf	fsr0l,c
 36639  000C1C  0E02               	movlw	high _potentiometer_filtered_last
 36640  000C1E  20F4               	addwfc	prodh,w,c
 36641  000C20  6EEA               	movwf	fsr0h,c
 36642  000C22  CFDE FFEE          	movff	postinc2,postinc0
 36643  000C26  CFDD FFED          	movff	postdec2,postdec0
 36644  000C2A                     l4039:
 36645                           
 36646                           ;potentiometers.c: 83: if (((int)(ema_sum[i] - potentiometer_filtered_last[i]) >= HYST_V
      +                          AL) || ((int)(potentiometer_filtered_last[i] - ema_sum[i]) >= HYST_VAL)) {
 36647                           
 36648                           ; BSR set to: 1
 36649  000C2A  0101               	movlb	1	; () banked
 36650  000C2C  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36651  000C2E  0D02               	mullw	2
 36652  000C30  0E40               	movlw	low _ema_sum
 36653  000C32  24F3               	addwf	prodl,w,c
 36654  000C34  6ED9               	movwf	fsr2l,c
 36655  000C36  0E02               	movlw	high _ema_sum
 36656  000C38  20F4               	addwfc	prodh,w,c
 36657  000C3A  6EDA               	movwf	fsr2h,c
 36658  000C3C  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 36659  000C40  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 36660  000C44  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36661  000C46  0D02               	mullw	2
 36662  000C48  0E00               	movlw	low _potentiometer_filtered_last
 36663  000C4A  24F3               	addwf	prodl,w,c
 36664  000C4C  6ED9               	movwf	fsr2l,c
 36665  000C4E  0E02               	movlw	high _potentiometer_filtered_last
 36666  000C50  20F4               	addwfc	prodh,w,c
 36667  000C52  6EDA               	movwf	fsr2h,c
 36668  000C54  CFDE F0C4          	movff	postinc2,??_readPotentiometers+2
 36669  000C58  CFDD F0C5          	movff	postdec2,??_readPotentiometers+3
 36670  000C5C  0100               	movlb	0	; () banked
 36671  000C5E  1FC4               	comf	(??_readPotentiometers+2)& (0+255),f,b
 36672  000C60  1FC5               	comf	(??_readPotentiometers+3)& (0+255),f,b
 36673  000C62  4BC4               	infsnz	(??_readPotentiometers+2)& (0+255),f,b
 36674  000C64  2BC5               	incf	(??_readPotentiometers+3)& (0+255),f,b
 36675  000C66  51C2               	movf	??_readPotentiometers& (0+255),w,b
 36676  000C68  27C4               	addwf	(??_readPotentiometers+2)& (0+255),f,b
 36677  000C6A  51C3               	movf	(??_readPotentiometers+1)& (0+255),w,b
 36678  000C6C  23C5               	addwfc	(??_readPotentiometers+3)& (0+255),f,b
 36679  000C6E  0101               	movlb	1	; () banked
 36680  000C70  51F3               	movf	_HYST_VAL& (0+255),w,b
 36681  000C72  0100               	movlb	0	; () banked
 36682  000C74  5DC4               	subwf	(??_readPotentiometers+2)& (0+255),w,b
 36683  000C76  51C5               	movf	(??_readPotentiometers+3)& (0+255),w,b
 36684  000C78  0A80               	xorlw	128
 36685  000C7A  6FC6               	movwf	(??_readPotentiometers+4)& (0+255),b
 36686  000C7C  0101               	movlb	1	; () banked
 36687  000C7E  51F4               	movf	(_HYST_VAL+1)& (0+255),w,b
 36688  000C80  0A80               	xorlw	128
 36689  000C82  0100               	movlb	0	; () banked
 36690  000C84  59C6               	subwfb	(??_readPotentiometers+4)& (0+255),w,b
 36691  000C86  B0D8               	btfsc	status,0,c
 36692  000C88  D030               	goto	u54660
 36693                           
 36694                           ; BSR set to: 0
 36695  000C8A  0101               	movlb	1	; () banked
 36696  000C8C  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36697  000C8E  0D02               	mullw	2
 36698  000C90  0E00               	movlw	low _potentiometer_filtered_last
 36699  000C92  24F3               	addwf	prodl,w,c
 36700  000C94  6ED9               	movwf	fsr2l,c
 36701  000C96  0E02               	movlw	high _potentiometer_filtered_last
 36702  000C98  20F4               	addwfc	prodh,w,c
 36703  000C9A  6EDA               	movwf	fsr2h,c
 36704  000C9C  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 36705  000CA0  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 36706  000CA4  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36707  000CA6  0D02               	mullw	2
 36708  000CA8  0E40               	movlw	low _ema_sum
 36709  000CAA  24F3               	addwf	prodl,w,c
 36710  000CAC  6ED9               	movwf	fsr2l,c
 36711  000CAE  0E02               	movlw	high _ema_sum
 36712  000CB0  20F4               	addwfc	prodh,w,c
 36713  000CB2  6EDA               	movwf	fsr2h,c
 36714  000CB4  CFDE F0C4          	movff	postinc2,??_readPotentiometers+2
 36715  000CB8  CFDD F0C5          	movff	postdec2,??_readPotentiometers+3
 36716  000CBC  0100               	movlb	0	; () banked
 36717  000CBE  1FC4               	comf	(??_readPotentiometers+2)& (0+255),f,b
 36718  000CC0  1FC5               	comf	(??_readPotentiometers+3)& (0+255),f,b
 36719  000CC2  4BC4               	infsnz	(??_readPotentiometers+2)& (0+255),f,b
 36720  000CC4  2BC5               	incf	(??_readPotentiometers+3)& (0+255),f,b
 36721  000CC6  51C2               	movf	??_readPotentiometers& (0+255),w,b
 36722  000CC8  27C4               	addwf	(??_readPotentiometers+2)& (0+255),f,b
 36723  000CCA  51C3               	movf	(??_readPotentiometers+1)& (0+255),w,b
 36724  000CCC  23C5               	addwfc	(??_readPotentiometers+3)& (0+255),f,b
 36725  000CCE  0101               	movlb	1	; () banked
 36726  000CD0  51F3               	movf	_HYST_VAL& (0+255),w,b
 36727  000CD2  0100               	movlb	0	; () banked
 36728  000CD4  5DC4               	subwf	(??_readPotentiometers+2)& (0+255),w,b
 36729  000CD6  51C5               	movf	(??_readPotentiometers+3)& (0+255),w,b
 36730  000CD8  0A80               	xorlw	128
 36731  000CDA  6FC6               	movwf	(??_readPotentiometers+4)& (0+255),b
 36732  000CDC  0101               	movlb	1	; () banked
 36733  000CDE  51F4               	movf	(_HYST_VAL+1)& (0+255),w,b
 36734  000CE0  0A80               	xorlw	128
 36735  000CE2  0100               	movlb	0	; () banked
 36736  000CE4  59C6               	subwfb	(??_readPotentiometers+4)& (0+255),w,b
 36737  000CE6  A0D8               	btfss	status,0,c
 36738  000CE8  D240               	goto	l4040
 36739  000CEA                     u54660:
 36740                           
 36741                           ; BSR set to: 0
 36742                           ;potentiometers.c: 86: if((i==iterator_focus) || (iterator_focus==255)) {count = 0; coun
      +                          t_ISR = 0;}
 36743                           
 36744                           ; BSR set to: 0
 36745  000CEA  51FD               	movf	_iterator_focus& (0+255),w,b
 36746  000CEC  0101               	movlb	1	; () banked
 36747  000CEE  199D               	xorwf	readPotentiometers@i_3435& (0+255),w,b
 36748  000CF0  B4D8               	btfsc	status,2,c
 36749  000CF2  D004               	goto	u54680
 36750                           
 36751                           ; BSR set to: 1
 36752  000CF4  0100               	movlb	0	; () banked
 36753  000CF6  29FD               	incf	_iterator_focus& (0+255),w,b
 36754  000CF8  A4D8               	btfss	status,2,c
 36755  000CFA  D011               	goto	l4043
 36756  000CFC                     u54680:
 36757                           
 36758                           ; BSR set to: 0
 36759  000CFC  0E00               	movlw	0
 36760  000CFE  0102               	movlb	2	; () banked
 36761  000D00  6F60               	movwf	readPotentiometers@count& (0+255),b
 36762  000D02  0E00               	movlw	0
 36763  000D04  6F61               	movwf	(readPotentiometers@count+1)& (0+255),b
 36764  000D06  0E00               	movlw	0
 36765  000D08  6F62               	movwf	(readPotentiometers@count+2)& (0+255),b
 36766  000D0A  0E00               	movlw	0
 36767  000D0C  6F63               	movwf	(readPotentiometers@count+3)& (0+255),b
 36768  000D0E  0E00               	movlw	0
 36769  000D10  6F64               	movwf	_count_ISR& (0+255),b
 36770  000D12  0E00               	movlw	0
 36771  000D14  6F65               	movwf	(_count_ISR+1)& (0+255),b
 36772  000D16  0E00               	movlw	0
 36773  000D18  6F66               	movwf	(_count_ISR+2)& (0+255),b
 36774  000D1A  0E00               	movlw	0
 36775  000D1C  6F67               	movwf	(_count_ISR+3)& (0+255),b
 36776  000D1E                     l4043:
 36777                           
 36778                           ;potentiometers.c: 93: if(HYST_VAL == 32) {
 36779                           
 36780                           ; BSR set to: 2
 36781  000D1E  0E20               	movlw	32
 36782  000D20  0101               	movlb	1	; () banked
 36783  000D22  19F3               	xorwf	_HYST_VAL& (0+255),w,b
 36784  000D24  11F4               	iorwf	(_HYST_VAL+1)& (0+255),w,b
 36785  000D26  A4D8               	btfss	status,2,c
 36786  000D28  D095               	goto	l4048
 36787                           
 36788                           ; BSR set to: 1
 36789                           ;potentiometers.c: 96: if((int)(ema_sum[i] - potentiometer_filtered_last[i]) >= 32){
 36790  000D2A  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36791  000D2C  0D02               	mullw	2
 36792  000D2E  0E40               	movlw	low _ema_sum
 36793  000D30  24F3               	addwf	prodl,w,c
 36794  000D32  6ED9               	movwf	fsr2l,c
 36795  000D34  0E02               	movlw	high _ema_sum
 36796  000D36  20F4               	addwfc	prodh,w,c
 36797  000D38  6EDA               	movwf	fsr2h,c
 36798  000D3A  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 36799  000D3E  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 36800  000D42  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36801  000D44  0D02               	mullw	2
 36802  000D46  0E00               	movlw	low _potentiometer_filtered_last
 36803  000D48  24F3               	addwf	prodl,w,c
 36804  000D4A  6ED9               	movwf	fsr2l,c
 36805  000D4C  0E02               	movlw	high _potentiometer_filtered_last
 36806  000D4E  20F4               	addwfc	prodh,w,c
 36807  000D50  6EDA               	movwf	fsr2h,c
 36808  000D52  CFDE F0C4          	movff	postinc2,??_readPotentiometers+2
 36809  000D56  CFDD F0C5          	movff	postdec2,??_readPotentiometers+3
 36810  000D5A  0100               	movlb	0	; () banked
 36811  000D5C  1FC4               	comf	(??_readPotentiometers+2)& (0+255),f,b
 36812  000D5E  1FC5               	comf	(??_readPotentiometers+3)& (0+255),f,b
 36813  000D60  4BC4               	infsnz	(??_readPotentiometers+2)& (0+255),f,b
 36814  000D62  2BC5               	incf	(??_readPotentiometers+3)& (0+255),f,b
 36815  000D64  51C2               	movf	??_readPotentiometers& (0+255),w,b
 36816  000D66  27C4               	addwf	(??_readPotentiometers+2)& (0+255),f,b
 36817  000D68  51C3               	movf	(??_readPotentiometers+1)& (0+255),w,b
 36818  000D6A  23C5               	addwfc	(??_readPotentiometers+3)& (0+255),f,b
 36819  000D6C  BFC5               	btfsc	(??_readPotentiometers+3)& (0+255),7,b
 36820  000D6E  D025               	goto	l4047
 36821  000D70  51C5               	movf	(??_readPotentiometers+3)& (0+255),w,b
 36822  000D72  E104               	bnz	u54700
 36823  000D74  0E20               	movlw	32
 36824  000D76  5DC4               	subwf	(??_readPotentiometers+2)& (0+255),w,b
 36825  000D78  A0D8               	btfss	status,0,c
 36826  000D7A  D01F               	goto	l4047
 36827  000D7C                     u54700:
 36828                           
 36829                           ; BSR set to: 0
 36830                           ;potentiometers.c: 98: ema_sum[i] = (potentiometer_filtered_last[i] + 8);
 36831  000D7C  0101               	movlb	1	; () banked
 36832  000D7E  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36833  000D80  0D02               	mullw	2
 36834  000D82  0E00               	movlw	low _potentiometer_filtered_last
 36835  000D84  24F3               	addwf	prodl,w,c
 36836  000D86  6ED9               	movwf	fsr2l,c
 36837  000D88  0E02               	movlw	high _potentiometer_filtered_last
 36838  000D8A  20F4               	addwfc	prodh,w,c
 36839  000D8C  6EDA               	movwf	fsr2h,c
 36840  000D8E  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 36841  000D92  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 36842  000D96  0E08               	movlw	8
 36843  000D98  0100               	movlb	0	; () banked
 36844  000D9A  27C2               	addwf	??_readPotentiometers& (0+255),f,b
 36845  000D9C  0E00               	movlw	0
 36846  000D9E  23C3               	addwfc	(??_readPotentiometers+1)& (0+255),f,b
 36847  000DA0  0101               	movlb	1	; () banked
 36848  000DA2  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36849  000DA4  0D02               	mullw	2
 36850  000DA6  0E40               	movlw	low _ema_sum
 36851  000DA8  24F3               	addwf	prodl,w,c
 36852  000DAA  6ED9               	movwf	fsr2l,c
 36853  000DAC  0E02               	movlw	high _ema_sum
 36854  000DAE  20F4               	addwfc	prodh,w,c
 36855  000DB0  6EDA               	movwf	fsr2h,c
 36856  000DB2  C0C2  FFDE         	movff	??_readPotentiometers,postinc2
 36857  000DB6  C0C3  FFDD         	movff	??_readPotentiometers+1,postdec2
 36858  000DBA                     l4047:
 36859                           
 36860                           ;potentiometers.c: 99: }
 36861                           ;potentiometers.c: 101: if((int)(potentiometer_filtered_last[i] - ema_sum[i]) >= 32){
 36862  000DBA  0101               	movlb	1	; () banked
 36863  000DBC  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36864  000DBE  0D02               	mullw	2
 36865  000DC0  0E00               	movlw	low _potentiometer_filtered_last
 36866  000DC2  24F3               	addwf	prodl,w,c
 36867  000DC4  6ED9               	movwf	fsr2l,c
 36868  000DC6  0E02               	movlw	high _potentiometer_filtered_last
 36869  000DC8  20F4               	addwfc	prodh,w,c
 36870  000DCA  6EDA               	movwf	fsr2h,c
 36871  000DCC  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 36872  000DD0  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 36873  000DD4  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36874  000DD6  0D02               	mullw	2
 36875  000DD8  0E40               	movlw	low _ema_sum
 36876  000DDA  24F3               	addwf	prodl,w,c
 36877  000DDC  6ED9               	movwf	fsr2l,c
 36878  000DDE  0E02               	movlw	high _ema_sum
 36879  000DE0  20F4               	addwfc	prodh,w,c
 36880  000DE2  6EDA               	movwf	fsr2h,c
 36881  000DE4  CFDE F0C4          	movff	postinc2,??_readPotentiometers+2
 36882  000DE8  CFDD F0C5          	movff	postdec2,??_readPotentiometers+3
 36883  000DEC  0100               	movlb	0	; () banked
 36884  000DEE  1FC4               	comf	(??_readPotentiometers+2)& (0+255),f,b
 36885  000DF0  1FC5               	comf	(??_readPotentiometers+3)& (0+255),f,b
 36886  000DF2  4BC4               	infsnz	(??_readPotentiometers+2)& (0+255),f,b
 36887  000DF4  2BC5               	incf	(??_readPotentiometers+3)& (0+255),f,b
 36888  000DF6  51C2               	movf	??_readPotentiometers& (0+255),w,b
 36889  000DF8  27C4               	addwf	(??_readPotentiometers+2)& (0+255),f,b
 36890  000DFA  51C3               	movf	(??_readPotentiometers+1)& (0+255),w,b
 36891  000DFC  23C5               	addwfc	(??_readPotentiometers+3)& (0+255),f,b
 36892  000DFE  BFC5               	btfsc	(??_readPotentiometers+3)& (0+255),7,b
 36893  000E00  D029               	goto	l4048
 36894  000E02  51C5               	movf	(??_readPotentiometers+3)& (0+255),w,b
 36895  000E04  E104               	bnz	u54710
 36896  000E06  0E20               	movlw	32
 36897  000E08  5DC4               	subwf	(??_readPotentiometers+2)& (0+255),w,b
 36898  000E0A  A0D8               	btfss	status,0,c
 36899  000E0C  D023               	goto	l4048
 36900  000E0E                     u54710:
 36901                           
 36902                           ; BSR set to: 0
 36903                           ;potentiometers.c: 103: ema_sum[i] = (potentiometer_filtered_last[i] - 8);
 36904  000E0E  0EF8               	movlw	248
 36905  000E10  6FC2               	movwf	??_readPotentiometers& (0+255),b
 36906  000E12  0EFF               	movlw	255
 36907  000E14  6FC3               	movwf	(??_readPotentiometers+1)& (0+255),b
 36908  000E16  0101               	movlb	1	; () banked
 36909  000E18  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36910  000E1A  0D02               	mullw	2
 36911  000E1C  0E00               	movlw	low _potentiometer_filtered_last
 36912  000E1E  24F3               	addwf	prodl,w,c
 36913  000E20  6ED9               	movwf	fsr2l,c
 36914  000E22  0E02               	movlw	high _potentiometer_filtered_last
 36915  000E24  20F4               	addwfc	prodh,w,c
 36916  000E26  6EDA               	movwf	fsr2h,c
 36917  000E28  CFDE F0C4          	movff	postinc2,??_readPotentiometers+2
 36918  000E2C  CFDD F0C5          	movff	postdec2,??_readPotentiometers+3
 36919  000E30  0100               	movlb	0	; () banked
 36920  000E32  51C2               	movf	??_readPotentiometers& (0+255),w,b
 36921  000E34  27C4               	addwf	(??_readPotentiometers+2)& (0+255),f,b
 36922  000E36  51C3               	movf	(??_readPotentiometers+1)& (0+255),w,b
 36923  000E38  23C5               	addwfc	(??_readPotentiometers+3)& (0+255),f,b
 36924  000E3A  0101               	movlb	1	; () banked
 36925  000E3C  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36926  000E3E  0D02               	mullw	2
 36927  000E40  0E40               	movlw	low _ema_sum
 36928  000E42  24F3               	addwf	prodl,w,c
 36929  000E44  6ED9               	movwf	fsr2l,c
 36930  000E46  0E02               	movlw	high _ema_sum
 36931  000E48  20F4               	addwfc	prodh,w,c
 36932  000E4A  6EDA               	movwf	fsr2h,c
 36933  000E4C  C0C4  FFDE         	movff	??_readPotentiometers+2,postinc2
 36934  000E50  C0C5  FFDD         	movff	??_readPotentiometers+3,postdec2
 36935  000E54                     l4048:
 36936                           
 36937                           ;potentiometers.c: 104: }
 36938                           ;potentiometers.c: 105: }
 36939                           ;potentiometers.c: 107: HYST_VAL = 8;
 36940                           
 36941                           ; BSR set to: 1
 36942                           
 36943                           ; BSR set to: 1
 36944  000E54  0E00               	movlw	0
 36945  000E56  0101               	movlb	1	; () banked
 36946  000E58  6FF4               	movwf	(_HYST_VAL+1)& (0+255),b
 36947  000E5A  0E08               	movlw	8
 36948  000E5C  6FF3               	movwf	_HYST_VAL& (0+255),b
 36949                           
 36950                           ; BSR set to: 1
 36951                           ;potentiometers.c: 114: if(iterator_focus == 255) {iterator_focus = i;}
 36952  000E5E  0100               	movlb	0	; () banked
 36953  000E60  29FD               	incf	_iterator_focus& (0+255),w,b
 36954  000E62  B4D8               	btfsc	status,2,c
 36955                           
 36956                           ; BSR set to: 0
 36957  000E64  C19D  F0FD         	movff	readPotentiometers@i_3435,_iterator_focus
 36958                           
 36959                           ; BSR set to: 0
 36960                           ;potentiometers.c: 115: potentiometer_filtered_now[i] =ema_sum[i];
 36961                           
 36962                           ; BSR set to: 0
 36963  000E68  0101               	movlb	1	; () banked
 36964  000E6A  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36965  000E6C  0D02               	mullw	2
 36966  000E6E  0E40               	movlw	low _ema_sum
 36967  000E70  24F3               	addwf	prodl,w,c
 36968  000E72  6ED9               	movwf	fsr2l,c
 36969  000E74  0E02               	movlw	high _ema_sum
 36970  000E76  20F4               	addwfc	prodh,w,c
 36971  000E78  6EDA               	movwf	fsr2h,c
 36972  000E7A  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36973  000E7C  0D02               	mullw	2
 36974  000E7E  0E20               	movlw	low _potentiometer_filtered_now
 36975  000E80  24F3               	addwf	prodl,w,c
 36976  000E82  6EE9               	movwf	fsr0l,c
 36977  000E84  0E02               	movlw	high _potentiometer_filtered_now
 36978  000E86  20F4               	addwfc	prodh,w,c
 36979  000E88  6EEA               	movwf	fsr0h,c
 36980  000E8A  CFDE FFEE          	movff	postinc2,postinc0
 36981  000E8E  CFDD FFED          	movff	postdec2,postdec0
 36982                           
 36983                           ; BSR set to: 1
 36984                           ;potentiometers.c: 118: if(inputPotsArray[i].controller_resolution == 0) {
 36985  000E92  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36986  000E94  0D03               	mullw	3
 36987  000E96  0E88               	movlw	low _inputPotsArray
 36988  000E98  24F3               	addwf	prodl,w,c
 36989  000E9A  6ED9               	movwf	fsr2l,c
 36990  000E9C  0E02               	movlw	high _inputPotsArray
 36991  000E9E  20F4               	addwfc	prodh,w,c
 36992  000EA0  6EDA               	movwf	fsr2h,c
 36993  000EA2  0102               	movlb	2	; () banked
 36994  000EA4  B0DF               	btfsc	indf2,0,c
 36995  000EA6  D09C               	goto	l4052
 36996                           
 36997                           ; BSR set to: 2
 36998                           ;potentiometers.c: 119: potentiometer_filtered_now[i] = map(potentiometer_filtered_now[i
      +                          ], 0, 0x3F50, 0, 0x3FFF);
 36999  000EA8  0101               	movlb	1	; () banked
 37000  000EAA  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37001  000EAC  0D02               	mullw	2
 37002  000EAE  0E20               	movlw	low _potentiometer_filtered_now
 37003  000EB0  24F3               	addwf	prodl,w,c
 37004  000EB2  6ED9               	movwf	fsr2l,c
 37005  000EB4  0E02               	movlw	high _potentiometer_filtered_now
 37006  000EB6  20F4               	addwfc	prodh,w,c
 37007  000EB8  6EDA               	movwf	fsr2h,c
 37008  000EBA  CFDE F06E          	movff	postinc2,map@x
 37009  000EBE  CFDD F06F          	movff	postdec2,map@x+1
 37010  000EC2  0100               	movlb	0	; () banked
 37011  000EC4  0E00               	movlw	0
 37012  000EC6  BF6F               	btfsc	(map@x+1)& (0+255),7,b
 37013  000EC8  0EFF               	movlw	-1
 37014  000ECA  6F70               	movwf	(map@x+2)& (0+255),b
 37015  000ECC  6F71               	movwf	(map@x+3)& (0+255),b
 37016  000ECE  0E00               	movlw	0
 37017  000ED0  6F72               	movwf	map@in_min& (0+255),b
 37018  000ED2  0E00               	movlw	0
 37019  000ED4  6F73               	movwf	(map@in_min+1)& (0+255),b
 37020  000ED6  0E00               	movlw	0
 37021  000ED8  6F74               	movwf	(map@in_min+2)& (0+255),b
 37022  000EDA  0E00               	movlw	0
 37023  000EDC  6F75               	movwf	(map@in_min+3)& (0+255),b
 37024  000EDE  0E50               	movlw	80
 37025  000EE0  6F76               	movwf	map@in_max& (0+255),b
 37026  000EE2  0E3F               	movlw	63
 37027  000EE4  6F77               	movwf	(map@in_max+1)& (0+255),b
 37028  000EE6  0E00               	movlw	0
 37029  000EE8  6F78               	movwf	(map@in_max+2)& (0+255),b
 37030  000EEA  0E00               	movlw	0
 37031  000EEC  6F79               	movwf	(map@in_max+3)& (0+255),b
 37032  000EEE  0E00               	movlw	0
 37033  000EF0  6F7A               	movwf	map@out_min& (0+255),b
 37034  000EF2  0E00               	movlw	0
 37035  000EF4  6F7B               	movwf	(map@out_min+1)& (0+255),b
 37036  000EF6  0E00               	movlw	0
 37037  000EF8  6F7C               	movwf	(map@out_min+2)& (0+255),b
 37038  000EFA  0E00               	movlw	0
 37039  000EFC  6F7D               	movwf	(map@out_min+3)& (0+255),b
 37040  000EFE  0EFF               	movlw	255
 37041  000F00  6F7E               	movwf	map@out_max& (0+255),b
 37042  000F02  0E3F               	movlw	63
 37043  000F04  6F7F               	movwf	(map@out_max+1)& (0+255),b
 37044  000F06  0E00               	movlw	0
 37045  000F08  6F80               	movwf	(map@out_max+2)& (0+255),b
 37046  000F0A  0E00               	movlw	0
 37047  000F0C  6F81               	movwf	(map@out_max+3)& (0+255),b
 37048  000F0E  EC6F  F033         	call	_map	;wreg free
 37049  000F12  0101               	movlb	1	; () banked
 37050  000F14  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37051  000F16  0D02               	mullw	2
 37052  000F18  0E20               	movlw	low _potentiometer_filtered_now
 37053  000F1A  24F3               	addwf	prodl,w,c
 37054  000F1C  6ED9               	movwf	fsr2l,c
 37055  000F1E  0E02               	movlw	high _potentiometer_filtered_now
 37056  000F20  20F4               	addwfc	prodh,w,c
 37057  000F22  6EDA               	movwf	fsr2h,c
 37058  000F24  0100               	movlb	0	; () banked
 37059  000F26  C06E  FFDE         	movff	?_map,postinc2
 37060  000F2A  C06F  FFDD         	movff	?_map+1,postdec2
 37061                           
 37062                           ; BSR set to: 0
 37063                           ;potentiometers.c: 120: potentiometer_filtered_now[i] = potentiometer_filtered_now[i] >>
      +                           3;
 37064  000F2E  0101               	movlb	1	; () banked
 37065  000F30  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37066  000F32  0D02               	mullw	2
 37067  000F34  0E20               	movlw	low _potentiometer_filtered_now
 37068  000F36  24F3               	addwf	prodl,w,c
 37069  000F38  6ED9               	movwf	fsr2l,c
 37070  000F3A  0E02               	movlw	high _potentiometer_filtered_now
 37071  000F3C  20F4               	addwfc	prodh,w,c
 37072  000F3E  6EDA               	movwf	fsr2h,c
 37073  000F40  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 37074  000F44  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 37075  000F48  0100               	movlb	0	; () banked
 37076  000F4A  35C3               	rlcf	(??_readPotentiometers+1)& (0+255),w,b
 37077  000F4C  33C3               	rrcf	(??_readPotentiometers+1)& (0+255),f,b
 37078  000F4E  33C2               	rrcf	??_readPotentiometers& (0+255),f,b
 37079  000F50  35C3               	rlcf	(??_readPotentiometers+1)& (0+255),w,b
 37080  000F52  33C3               	rrcf	(??_readPotentiometers+1)& (0+255),f,b
 37081  000F54  33C2               	rrcf	??_readPotentiometers& (0+255),f,b
 37082  000F56  35C3               	rlcf	(??_readPotentiometers+1)& (0+255),w,b
 37083  000F58  33C3               	rrcf	(??_readPotentiometers+1)& (0+255),f,b
 37084  000F5A  33C2               	rrcf	??_readPotentiometers& (0+255),f,b
 37085  000F5C  0101               	movlb	1	; () banked
 37086  000F5E  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37087  000F60  0D02               	mullw	2
 37088  000F62  0E20               	movlw	low _potentiometer_filtered_now
 37089  000F64  24F3               	addwf	prodl,w,c
 37090  000F66  6ED9               	movwf	fsr2l,c
 37091  000F68  0E02               	movlw	high _potentiometer_filtered_now
 37092  000F6A  20F4               	addwfc	prodh,w,c
 37093  000F6C  6EDA               	movwf	fsr2h,c
 37094  000F6E  C0C2  FFDE         	movff	??_readPotentiometers,postinc2
 37095  000F72  C0C3  FFDD         	movff	??_readPotentiometers+1,postdec2
 37096                           
 37097                           ; BSR set to: 1
 37098                           ;potentiometers.c: 124: if(potentiometer_filtered_now[i] < 0){potentiometer_filtered_now
      +                          [i] = 0;}
 37099  000F76  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37100  000F78  0D02               	mullw	2
 37101  000F7A  0E20               	movlw	low _potentiometer_filtered_now
 37102  000F7C  24F3               	addwf	prodl,w,c
 37103  000F7E  6ED9               	movwf	fsr2l,c
 37104  000F80  0E02               	movlw	high _potentiometer_filtered_now
 37105  000F82  20F4               	addwfc	prodh,w,c
 37106  000F84  6EDA               	movwf	fsr2h,c
 37107  000F86  0E01               	movlw	1
 37108  000F88  AEDB               	btfss	plusw2,7,c
 37109  000F8A  D00C               	goto	l4051
 37110                           
 37111                           ; BSR set to: 1
 37112  000F8C  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37113  000F8E  0D02               	mullw	2
 37114  000F90  0E20               	movlw	low _potentiometer_filtered_now
 37115  000F92  24F3               	addwf	prodl,w,c
 37116  000F94  6ED9               	movwf	fsr2l,c
 37117  000F96  0E02               	movlw	high _potentiometer_filtered_now
 37118  000F98  20F4               	addwfc	prodh,w,c
 37119  000F9A  6EDA               	movwf	fsr2h,c
 37120  000F9C  0E00               	movlw	0
 37121  000F9E  6EDE               	movwf	postinc2,c
 37122  000FA0  0E00               	movlw	0
 37123  000FA2  6EDD               	movwf	postdec2,c
 37124  000FA4                     l4051:
 37125                           
 37126                           ; BSR set to: 1
 37127                           ;potentiometers.c: 125: if(potentiometer_filtered_now[i] > 127){potentiometer_filtered_n
      +                          ow[i] = 127;}
 37128  000FA4  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37129  000FA6  0D02               	mullw	2
 37130  000FA8  0E20               	movlw	low _potentiometer_filtered_now
 37131  000FAA  24F3               	addwf	prodl,w,c
 37132  000FAC  6ED9               	movwf	fsr2l,c
 37133  000FAE  0E02               	movlw	high _potentiometer_filtered_now
 37134  000FB0  20F4               	addwfc	prodh,w,c
 37135  000FB2  6EDA               	movwf	fsr2h,c
 37136  000FB4  0E01               	movlw	1
 37137  000FB6  BEDB               	btfsc	plusw2,7,c
 37138  000FB8  D013               	goto	l4052
 37139  000FBA  0E01               	movlw	1
 37140  000FBC  50DB               	movf	plusw2,w,c
 37141  000FBE  E104               	bnz	u54750
 37142  000FC0  0E80               	movlw	128
 37143  000FC2  5CDE               	subwf	postinc2,w,c
 37144  000FC4  A0D8               	btfss	status,0,c
 37145  000FC6  D00C               	goto	l4052
 37146  000FC8                     u54750:
 37147                           
 37148                           ; BSR set to: 1
 37149  000FC8  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37150  000FCA  0D02               	mullw	2
 37151  000FCC  0E20               	movlw	low _potentiometer_filtered_now
 37152  000FCE  24F3               	addwf	prodl,w,c
 37153  000FD0  6ED9               	movwf	fsr2l,c
 37154  000FD2  0E02               	movlw	high _potentiometer_filtered_now
 37155  000FD4  20F4               	addwfc	prodh,w,c
 37156  000FD6  6EDA               	movwf	fsr2h,c
 37157  000FD8  0E7F               	movlw	127
 37158  000FDA  6EDE               	movwf	postinc2,c
 37159  000FDC  0E00               	movlw	0
 37160  000FDE  6EDD               	movwf	postdec2,c
 37161  000FE0                     l4052:
 37162                           
 37163                           ;potentiometers.c: 126: }
 37164                           ;potentiometers.c: 129: if(inputPotsArray[i].controller_resolution == 1) {
 37165                           
 37166                           ; BSR set to: 1
 37167  000FE0  0101               	movlb	1	; () banked
 37168  000FE2  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37169  000FE4  0D03               	mullw	3
 37170  000FE6  0E88               	movlw	low _inputPotsArray
 37171  000FE8  24F3               	addwf	prodl,w,c
 37172  000FEA  6ED9               	movwf	fsr2l,c
 37173  000FEC  0E02               	movlw	high _inputPotsArray
 37174  000FEE  20F4               	addwfc	prodh,w,c
 37175  000FF0  6EDA               	movwf	fsr2h,c
 37176  000FF2  0102               	movlb	2	; () banked
 37177  000FF4  A0DF               	btfss	indf2,0,c
 37178  000FF6  D09A               	goto	l4055
 37179                           
 37180                           ; BSR set to: 2
 37181                           ;potentiometers.c: 130: potentiometer_filtered_now[i] = potentiometer_filtered_now[i] <<
      +                           4;
 37182  000FF8  0101               	movlb	1	; () banked
 37183  000FFA  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37184  000FFC  0D02               	mullw	2
 37185  000FFE  0E20               	movlw	low _potentiometer_filtered_now
 37186  001000  24F3               	addwf	prodl,w,c
 37187  001002  6ED9               	movwf	fsr2l,c
 37188  001004  0E02               	movlw	high _potentiometer_filtered_now
 37189  001006  20F4               	addwfc	prodh,w,c
 37190  001008  6EDA               	movwf	fsr2h,c
 37191  00100A  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 37192  00100E  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 37193  001012  0100               	movlb	0	; () banked
 37194  001014  3BC2               	swapf	??_readPotentiometers& (0+255),f,b
 37195  001016  3BC3               	swapf	(??_readPotentiometers+1)& (0+255),f,b
 37196  001018  0EF0               	movlw	240
 37197  00101A  17C3               	andwf	(??_readPotentiometers+1)& (0+255),f,b
 37198  00101C  51C2               	movf	??_readPotentiometers& (0+255),w,b
 37199  00101E  0B0F               	andlw	15
 37200  001020  13C3               	iorwf	(??_readPotentiometers+1)& (0+255),f,b
 37201  001022  0EF0               	movlw	240
 37202  001024  17C2               	andwf	??_readPotentiometers& (0+255),f,b
 37203  001026  0101               	movlb	1	; () banked
 37204  001028  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37205  00102A  0D02               	mullw	2
 37206  00102C  0E20               	movlw	low _potentiometer_filtered_now
 37207  00102E  24F3               	addwf	prodl,w,c
 37208  001030  6ED9               	movwf	fsr2l,c
 37209  001032  0E02               	movlw	high _potentiometer_filtered_now
 37210  001034  20F4               	addwfc	prodh,w,c
 37211  001036  6EDA               	movwf	fsr2h,c
 37212  001038  C0C2  FFDE         	movff	??_readPotentiometers,postinc2
 37213  00103C  C0C3  FFDD         	movff	??_readPotentiometers+1,postdec2
 37214                           
 37215                           ; BSR set to: 1
 37216                           ;potentiometers.c: 131: potentiometer_filtered_now[i] = map(potentiometer_filtered_now[i
      +                          ], 0x50, 0x3F00, 0, 0x3FFF);
 37217  001040  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37218  001042  0D02               	mullw	2
 37219  001044  0E20               	movlw	low _potentiometer_filtered_now
 37220  001046  24F3               	addwf	prodl,w,c
 37221  001048  6ED9               	movwf	fsr2l,c
 37222  00104A  0E02               	movlw	high _potentiometer_filtered_now
 37223  00104C  20F4               	addwfc	prodh,w,c
 37224  00104E  6EDA               	movwf	fsr2h,c
 37225  001050  CFDE F06E          	movff	postinc2,map@x
 37226  001054  CFDD F06F          	movff	postdec2,map@x+1
 37227  001058  0100               	movlb	0	; () banked
 37228  00105A  0E00               	movlw	0
 37229  00105C  BF6F               	btfsc	(map@x+1)& (0+255),7,b
 37230  00105E  0EFF               	movlw	-1
 37231  001060  6F70               	movwf	(map@x+2)& (0+255),b
 37232  001062  6F71               	movwf	(map@x+3)& (0+255),b
 37233  001064  0E50               	movlw	80
 37234  001066  6F72               	movwf	map@in_min& (0+255),b
 37235  001068  0E00               	movlw	0
 37236  00106A  6F73               	movwf	(map@in_min+1)& (0+255),b
 37237  00106C  0E00               	movlw	0
 37238  00106E  6F74               	movwf	(map@in_min+2)& (0+255),b
 37239  001070  0E00               	movlw	0
 37240  001072  6F75               	movwf	(map@in_min+3)& (0+255),b
 37241  001074  0E00               	movlw	0
 37242  001076  6F76               	movwf	map@in_max& (0+255),b
 37243  001078  0E3F               	movlw	63
 37244  00107A  6F77               	movwf	(map@in_max+1)& (0+255),b
 37245  00107C  0E00               	movlw	0
 37246  00107E  6F78               	movwf	(map@in_max+2)& (0+255),b
 37247  001080  0E00               	movlw	0
 37248  001082  6F79               	movwf	(map@in_max+3)& (0+255),b
 37249  001084  0E00               	movlw	0
 37250  001086  6F7A               	movwf	map@out_min& (0+255),b
 37251  001088  0E00               	movlw	0
 37252  00108A  6F7B               	movwf	(map@out_min+1)& (0+255),b
 37253  00108C  0E00               	movlw	0
 37254  00108E  6F7C               	movwf	(map@out_min+2)& (0+255),b
 37255  001090  0E00               	movlw	0
 37256  001092  6F7D               	movwf	(map@out_min+3)& (0+255),b
 37257  001094  0EFF               	movlw	255
 37258  001096  6F7E               	movwf	map@out_max& (0+255),b
 37259  001098  0E3F               	movlw	63
 37260  00109A  6F7F               	movwf	(map@out_max+1)& (0+255),b
 37261  00109C  0E00               	movlw	0
 37262  00109E  6F80               	movwf	(map@out_max+2)& (0+255),b
 37263  0010A0  0E00               	movlw	0
 37264  0010A2  6F81               	movwf	(map@out_max+3)& (0+255),b
 37265  0010A4  EC6F  F033         	call	_map	;wreg free
 37266  0010A8  0101               	movlb	1	; () banked
 37267  0010AA  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37268  0010AC  0D02               	mullw	2
 37269  0010AE  0E20               	movlw	low _potentiometer_filtered_now
 37270  0010B0  24F3               	addwf	prodl,w,c
 37271  0010B2  6ED9               	movwf	fsr2l,c
 37272  0010B4  0E02               	movlw	high _potentiometer_filtered_now
 37273  0010B6  20F4               	addwfc	prodh,w,c
 37274  0010B8  6EDA               	movwf	fsr2h,c
 37275  0010BA  0100               	movlb	0	; () banked
 37276  0010BC  C06E  FFDE         	movff	?_map,postinc2
 37277  0010C0  C06F  FFDD         	movff	?_map+1,postdec2
 37278                           
 37279                           ; BSR set to: 0
 37280                           ;potentiometers.c: 133: if(potentiometer_filtered_now[i] < 0){potentiometer_filtered_now
      +                          [i] = 0;}
 37281  0010C4  0101               	movlb	1	; () banked
 37282  0010C6  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37283  0010C8  0D02               	mullw	2
 37284  0010CA  0E20               	movlw	low _potentiometer_filtered_now
 37285  0010CC  24F3               	addwf	prodl,w,c
 37286  0010CE  6ED9               	movwf	fsr2l,c
 37287  0010D0  0E02               	movlw	high _potentiometer_filtered_now
 37288  0010D2  20F4               	addwfc	prodh,w,c
 37289  0010D4  6EDA               	movwf	fsr2h,c
 37290  0010D6  0E01               	movlw	1
 37291  0010D8  AEDB               	btfss	plusw2,7,c
 37292  0010DA  D00C               	goto	l4054
 37293                           
 37294                           ; BSR set to: 1
 37295  0010DC  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37296  0010DE  0D02               	mullw	2
 37297  0010E0  0E20               	movlw	low _potentiometer_filtered_now
 37298  0010E2  24F3               	addwf	prodl,w,c
 37299  0010E4  6ED9               	movwf	fsr2l,c
 37300  0010E6  0E02               	movlw	high _potentiometer_filtered_now
 37301  0010E8  20F4               	addwfc	prodh,w,c
 37302  0010EA  6EDA               	movwf	fsr2h,c
 37303  0010EC  0E00               	movlw	0
 37304  0010EE  6EDE               	movwf	postinc2,c
 37305  0010F0  0E00               	movlw	0
 37306  0010F2  6EDD               	movwf	postdec2,c
 37307  0010F4                     l4054:
 37308                           
 37309                           ; BSR set to: 1
 37310                           ;potentiometers.c: 134: if(potentiometer_filtered_now[i] > 0x3FFF){potentiometer_filtere
      +                          d_now[i] = 0x3FFF;}
 37311  0010F4  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37312  0010F6  0D02               	mullw	2
 37313  0010F8  0E20               	movlw	low _potentiometer_filtered_now
 37314  0010FA  24F3               	addwf	prodl,w,c
 37315  0010FC  6ED9               	movwf	fsr2l,c
 37316  0010FE  0E02               	movlw	high _potentiometer_filtered_now
 37317  001100  20F4               	addwfc	prodh,w,c
 37318  001102  6EDA               	movwf	fsr2h,c
 37319  001104  0E01               	movlw	1
 37320  001106  BEDB               	btfsc	plusw2,7,c
 37321  001108  D011               	goto	l4055
 37322  00110A  52DE               	movf	postinc2,f,c
 37323  00110C  0E40               	movlw	64
 37324  00110E  5CDE               	subwf	postinc2,w,c
 37325  001110  A0D8               	btfss	status,0,c
 37326  001112  D00C               	goto	l4055
 37327                           
 37328                           ; BSR set to: 1
 37329  001114  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37330  001116  0D02               	mullw	2
 37331  001118  0E20               	movlw	low _potentiometer_filtered_now
 37332  00111A  24F3               	addwf	prodl,w,c
 37333  00111C  6ED9               	movwf	fsr2l,c
 37334  00111E  0E02               	movlw	high _potentiometer_filtered_now
 37335  001120  20F4               	addwfc	prodh,w,c
 37336  001122  6EDA               	movwf	fsr2h,c
 37337  001124  0EFF               	movlw	255
 37338  001126  6EDE               	movwf	postinc2,c
 37339  001128  0E3F               	movlw	63
 37340  00112A  6EDD               	movwf	postdec2,c
 37341  00112C                     l4055:
 37342                           
 37343                           ;potentiometers.c: 135: }
 37344                           ;potentiometers.c: 145: if(i==iterator_focus) {processPotentiometers(iterator_focus);}
 37345                           
 37346                           ; BSR set to: 1
 37347                           
 37348                           ; BSR set to: 1
 37349  00112C  0100               	movlb	0	; () banked
 37350  00112E  51FD               	movf	_iterator_focus& (0+255),w,b
 37351  001130  0101               	movlb	1	; () banked
 37352  001132  199D               	xorwf	readPotentiometers@i_3435& (0+255),w,b
 37353  001134  A4D8               	btfss	status,2,c
 37354  001136  D004               	goto	l4056
 37355                           
 37356                           ; BSR set to: 1
 37357  001138  0100               	movlb	0	; () banked
 37358  00113A  51FD               	movf	_iterator_focus& (0+255),w,b
 37359  00113C  ECCF  F020         	call	_processPotentiometers
 37360  001140                     l4056:
 37361                           
 37362                           ;potentiometers.c: 146: potentiometer_filtered_last[i] = ema_sum[i];
 37363  001140  0101               	movlb	1	; () banked
 37364  001142  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37365  001144  0D02               	mullw	2
 37366  001146  0E40               	movlw	low _ema_sum
 37367  001148  24F3               	addwf	prodl,w,c
 37368  00114A  6ED9               	movwf	fsr2l,c
 37369  00114C  0E02               	movlw	high _ema_sum
 37370  00114E  20F4               	addwfc	prodh,w,c
 37371  001150  6EDA               	movwf	fsr2h,c
 37372  001152  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37373  001154  0D02               	mullw	2
 37374  001156  0E00               	movlw	low _potentiometer_filtered_last
 37375  001158  24F3               	addwf	prodl,w,c
 37376  00115A  6EE9               	movwf	fsr0l,c
 37377  00115C  0E02               	movlw	high _potentiometer_filtered_last
 37378  00115E  20F4               	addwfc	prodh,w,c
 37379  001160  6EEA               	movwf	fsr0h,c
 37380  001162  CFDE FFEE          	movff	postinc2,postinc0
 37381  001166  CFDD FFED          	movff	postdec2,postdec0
 37382  00116A                     l4040:
 37383                           
 37384                           ;potentiometers.c: 148: }
 37385                           ;potentiometers.c: 152: if (count_ISR >= number_of_interrupts) {
 37386                           
 37387                           ; BSR set to: 1
 37388  00116A  0102               	movlb	2	; () banked
 37389  00116C  51C4               	movf	_number_of_interrupts& (0+255),w,b
 37390  00116E  5D64               	subwf	_count_ISR& (0+255),w,b
 37391  001170  51C5               	movf	(_number_of_interrupts+1)& (0+255),w,b
 37392  001172  5965               	subwfb	(_count_ISR+1)& (0+255),w,b
 37393  001174  51C6               	movf	(_number_of_interrupts+2)& (0+255),w,b
 37394  001176  5966               	subwfb	(_count_ISR+2)& (0+255),w,b
 37395  001178  51C7               	movf	(_number_of_interrupts+3)& (0+255),w,b
 37396  00117A  5967               	subwfb	(_count_ISR+3)& (0+255),w,b
 37397  00117C  A0D8               	btfss	status,0,c
 37398  00117E  D007               	goto	l4057
 37399                           
 37400                           ; BSR set to: 2
 37401                           ;potentiometers.c: 154: HYST_VAL = 32;
 37402  001180  0E00               	movlw	0
 37403  001182  0101               	movlb	1	; () banked
 37404  001184  6FF4               	movwf	(_HYST_VAL+1)& (0+255),b
 37405  001186  0E20               	movlw	32
 37406  001188  6FF3               	movwf	_HYST_VAL& (0+255),b
 37407                           
 37408                           ; BSR set to: 1
 37409                           ;potentiometers.c: 161: iterator_focus = 255;
 37410  00118A  0100               	movlb	0	; () banked
 37411  00118C  69FD               	setf	_iterator_focus& (0+255),b
 37412  00118E                     l4057:
 37413                           
 37414                           ; BSR set to: 0
 37415  00118E  0101               	movlb	1	; () banked
 37416  001190  2B9D               	incf	readPotentiometers@i_3435& (0+255),f,b
 37417  001192  D529               	goto	l30294
 37418  001194                     u54810:
 37419                           
 37420                           ; BSR set to: 1
 37421                           ;potentiometers.c: 162: }
 37422                           ;potentiometers.c: 163: }
 37423                           ;potentiometers.c: 165: FIRST_READING = 1;
 37424  001194  8C05               	bsf	_FIRST_READING/(0+8),_FIRST_READING& (0+7),c
 37425                           
 37426                           ; BSR set to: 1
 37427  001196  0012               	return		;funcret
 37428  001198                     __end_of_readPotentiometers:
 37429                           	opt stack 0
 37430                           tblptru	equ	0xFF8
 37431                           tblptrh	equ	0xFF7
 37432                           tblptrl	equ	0xFF6
 37433                           tablat	equ	0xFF5
 37434                           prodh	equ	0xFF4
 37435                           prodl	equ	0xFF3
 37436                           intcon	equ	0xFF2
 37437                           intcon2	equ	0xFF1
 37438                           indf0	equ	0xFEF
 37439                           postinc0	equ	0xFEE
 37440                           postdec0	equ	0xFED
 37441                           fsr0h	equ	0xFEA
 37442                           fsr0l	equ	0xFE9
 37443                           wreg	equ	0xFE8
 37444                           postinc1	equ	0xFE6
 37445                           postdec1	equ	0xFE5
 37446                           plusw1	equ	0xFE3
 37447                           fsr1h	equ	0xFE2
 37448                           fsr1l	equ	0xFE1
 37449                           indf2	equ	0xFDF
 37450                           postinc2	equ	0xFDE
 37451                           postdec2	equ	0xFDD
 37452                           plusw2	equ	0xFDB
 37453                           fsr2h	equ	0xFDA
 37454                           fsr2l	equ	0xFD9
 37455                           status	equ	0xFD8
 37456                           
 37457 ;; *************** function _processPotentiometers *****************
 37458 ;; Defined at:
 37459 ;;		line 169 in file "potentiometers.c"
 37460 ;; Parameters:    Size  Location     Type
 37461 ;;  i               1    wreg     unsigned char 
 37462 ;; Auto vars:     Size  Location     Type
 37463 ;;  i               1    8[BANK0 ] unsigned char 
 37464 ;;  highByte        1    7[BANK0 ] unsigned char 
 37465 ;;  lowByte         1    6[BANK0 ] unsigned char 
 37466 ;; Return value:  Size  Location     Type
 37467 ;;                  1    wreg      void 
 37468 ;; Registers used:
 37469 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
 37470 ;; Tracked objects:
 37471 ;;		On entry : 0/0
 37472 ;;		On exit  : 0/0
 37473 ;;		Unchanged: 0/0
 37474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 37475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37476 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37477 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37478 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37479 ;;Total ram usage:        6 bytes
 37480 ;; Hardware stack levels used:    1
 37481 ;; Hardware stack levels required when called:    9
 37482 ;; This function calls:
 37483 ;;		_controlChange
 37484 ;;		_pitchBend
 37485 ;; This function is called by:
 37486 ;;		_readPotentiometers
 37487 ;; This function uses a non-reentrant model
 37488 ;;
 37489                           
 37490                           	psect	text105
 37491  00419E                     __ptext105:
 37492                           	opt stack 0
 37493  00419E                     _processPotentiometers:
 37494                           	opt stack 16
 37495                           
 37496                           ; BSR set to: 1
 37497                           ;incstack = 0
 37498                           ;processPotentiometers@i stored from wreg
 37499  00419E  0100               	movlb	0	; () banked
 37500  0041A0  6F68               	movwf	processPotentiometers@i& (0+255),b
 37501                           
 37502                           ;potentiometers.c: 174: number_to_display = potentiometer_filtered_now[i];
 37503  0041A2  0100               	movlb	0	; () banked
 37504  0041A4  5168               	movf	processPotentiometers@i& (0+255),w,b
 37505  0041A6  0D02               	mullw	2
 37506  0041A8  0E20               	movlw	low _potentiometer_filtered_now
 37507  0041AA  24F3               	addwf	prodl,w,c
 37508  0041AC  6ED9               	movwf	fsr2l,c
 37509  0041AE  0E02               	movlw	high _potentiometer_filtered_now
 37510  0041B0  20F4               	addwfc	prodh,w,c
 37511  0041B2  6EDA               	movwf	fsr2h,c
 37512  0041B4  CFDE F04B          	movff	postinc2,_number_to_display
 37513  0041B8  CFDD F04C          	movff	postdec2,_number_to_display+1
 37514                           
 37515                           ;potentiometers.c: 178: if (inputPotsArray[i].controller_resolution == 0){
 37516  0041BC  5168               	movf	processPotentiometers@i& (0+255),w,b
 37517  0041BE  0D03               	mullw	3
 37518  0041C0  0E88               	movlw	low _inputPotsArray
 37519  0041C2  24F3               	addwf	prodl,w,c
 37520  0041C4  6ED9               	movwf	fsr2l,c
 37521  0041C6  0E02               	movlw	high _inputPotsArray
 37522  0041C8  20F4               	addwfc	prodh,w,c
 37523  0041CA  6EDA               	movwf	fsr2h,c
 37524  0041CC  0102               	movlb	2	; () banked
 37525  0041CE  B0DF               	btfsc	indf2,0,c
 37526  0041D0  D088               	goto	l4065
 37527                           
 37528                           ; BSR set to: 2
 37529                           ;potentiometers.c: 181: DISPLAY_MODE = 0;
 37530  0041D2  0E00               	movlw	0
 37531  0041D4  0100               	movlb	0	; () banked
 37532  0041D6  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 37533                           
 37534                           ;potentiometers.c: 182: DIGIT_MODE = 0;
 37535  0041D8  0E00               	movlw	0
 37536  0041DA  6E3A               	movwf	_DIGIT_MODE,c
 37537                           
 37538                           ; BSR set to: 0
 37539                           ;potentiometers.c: 186: if(inputPotsArray[i].controller_number >= 0) {
 37540  0041DC  5168               	movf	processPotentiometers@i& (0+255),w,b
 37541  0041DE  0D03               	mullw	3
 37542  0041E0  0E01               	movlw	1
 37543  0041E2  26F3               	addwf	prodl,f,c
 37544  0041E4  0E00               	movlw	0
 37545  0041E6  22F4               	addwfc	prodh,f,c
 37546  0041E8  0E88               	movlw	low _inputPotsArray
 37547  0041EA  24F3               	addwf	prodl,w,c
 37548  0041EC  6ED9               	movwf	fsr2l,c
 37549  0041EE  0E02               	movlw	high _inputPotsArray
 37550  0041F0  20F4               	addwfc	prodh,w,c
 37551  0041F2  6EDA               	movwf	fsr2h,c
 37552  0041F4  0E00               	movlw	0
 37553  0041F6  BEDB               	btfsc	plusw2,7,c
 37554  0041F8  D01B               	goto	l4062
 37555                           
 37556                           ; BSR set to: 0
 37557                           ;potentiometers.c: 187: controlChange(channel, inputPotsArray[i].controller_number, pote
      +                          ntiometer_filtered_now[i]);
 37558  0041FA  5168               	movf	processPotentiometers@i& (0+255),w,b
 37559  0041FC  0D03               	mullw	3
 37560  0041FE  0E01               	movlw	1
 37561  004200  26F3               	addwf	prodl,f,c
 37562  004202  0E00               	movlw	0
 37563  004204  22F4               	addwfc	prodh,f,c
 37564  004206  0E88               	movlw	low _inputPotsArray
 37565  004208  24F3               	addwf	prodl,w,c
 37566  00420A  6ED9               	movwf	fsr2l,c
 37567  00420C  0E02               	movlw	high _inputPotsArray
 37568  00420E  20F4               	addwfc	prodh,w,c
 37569  004210  6EDA               	movwf	fsr2h,c
 37570  004212  50DF               	movf	indf2,w,c
 37571  004214  6F60               	movwf	controlChange@controllerNumber& (0+255),b
 37572  004216  5168               	movf	processPotentiometers@i& (0+255),w,b
 37573  004218  0D02               	mullw	2
 37574  00421A  0E20               	movlw	low _potentiometer_filtered_now
 37575  00421C  24F3               	addwf	prodl,w,c
 37576  00421E  6ED9               	movwf	fsr2l,c
 37577  004220  0E02               	movlw	high _potentiometer_filtered_now
 37578  004222  20F4               	addwfc	prodh,w,c
 37579  004224  6EDA               	movwf	fsr2h,c
 37580  004226  50DF               	movf	indf2,w,c
 37581  004228  6F61               	movwf	controlChange@value& (0+255),b
 37582  00422A  503E               	movf	_channel,w,c
 37583  00422C  ECC9  F048         	call	_controlChange
 37584  004230                     l4062:
 37585                           
 37586                           ;potentiometers.c: 188: }
 37587                           ;potentiometers.c: 191: if(inputPotsArray[i].controller_number == -1) {
 37588  004230  0100               	movlb	0	; () banked
 37589  004232  5168               	movf	processPotentiometers@i& (0+255),w,b
 37590  004234  0D03               	mullw	3
 37591  004236  0E01               	movlw	1
 37592  004238  26F3               	addwf	prodl,f,c
 37593  00423A  0E00               	movlw	0
 37594  00423C  22F4               	addwfc	prodh,f,c
 37595  00423E  0E88               	movlw	low _inputPotsArray
 37596  004240  24F3               	addwf	prodl,w,c
 37597  004242  6ED9               	movwf	fsr2l,c
 37598  004244  0E02               	movlw	high _inputPotsArray
 37599  004246  20F4               	addwfc	prodh,w,c
 37600  004248  6EDA               	movwf	fsr2h,c
 37601  00424A  28DE               	incf	postinc2,w,c
 37602  00424C  A4D8               	btfss	status,2,c
 37603  00424E  D00A               	goto	l4063
 37604                           
 37605                           ; BSR set to: 0
 37606                           ;potentiometers.c: 192: velocity = potentiometer_filtered_now[i];
 37607  004250  5168               	movf	processPotentiometers@i& (0+255),w,b
 37608  004252  0D02               	mullw	2
 37609  004254  0E20               	movlw	low _potentiometer_filtered_now
 37610  004256  24F3               	addwf	prodl,w,c
 37611  004258  6ED9               	movwf	fsr2l,c
 37612  00425A  0E02               	movlw	high _potentiometer_filtered_now
 37613  00425C  20F4               	addwfc	prodh,w,c
 37614  00425E  6EDA               	movwf	fsr2h,c
 37615  004260  50DF               	movf	indf2,w,c
 37616  004262  6E51               	movwf	_velocity,c
 37617  004264                     l4063:
 37618                           
 37619                           ; BSR set to: 0
 37620                           ;potentiometers.c: 193: }
 37621                           ;potentiometers.c: 195: if(inputPotsArray[i].controller_number == -2) {
 37622  004264  5168               	movf	processPotentiometers@i& (0+255),w,b
 37623  004266  0D03               	mullw	3
 37624  004268  0E01               	movlw	1
 37625  00426A  26F3               	addwf	prodl,f,c
 37626  00426C  0E00               	movlw	0
 37627  00426E  22F4               	addwfc	prodh,f,c
 37628  004270  0E88               	movlw	low _inputPotsArray
 37629  004272  24F3               	addwf	prodl,w,c
 37630  004274  6ED9               	movwf	fsr2l,c
 37631  004276  0E02               	movlw	high _inputPotsArray
 37632  004278  20F4               	addwfc	prodh,w,c
 37633  00427A  6EDA               	movwf	fsr2h,c
 37634  00427C  0EFE               	movlw	254
 37635  00427E  18DE               	xorwf	postinc2,w,c
 37636  004280  A4D8               	btfss	status,2,c
 37637  004282  D00F               	goto	l4064
 37638                           
 37639                           ; BSR set to: 0
 37640                           ;potentiometers.c: 196: pitchBend(channel, 0x00, potentiometer_filtered_now[i]);
 37641  004284  0E00               	movlw	0
 37642  004286  6F60               	movwf	pitchBend@lowByte& (0+255),b
 37643  004288  5168               	movf	processPotentiometers@i& (0+255),w,b
 37644  00428A  0D02               	mullw	2
 37645  00428C  0E20               	movlw	low _potentiometer_filtered_now
 37646  00428E  24F3               	addwf	prodl,w,c
 37647  004290  6ED9               	movwf	fsr2l,c
 37648  004292  0E02               	movlw	high _potentiometer_filtered_now
 37649  004294  20F4               	addwfc	prodh,w,c
 37650  004296  6EDA               	movwf	fsr2h,c
 37651  004298  50DF               	movf	indf2,w,c
 37652  00429A  6F61               	movwf	pitchBend@highByte& (0+255),b
 37653  00429C  503E               	movf	_channel,w,c
 37654  00429E  EC26  F04A         	call	_pitchBend
 37655  0042A2                     l4064:
 37656                           
 37657                           ;potentiometers.c: 197: }
 37658                           ;potentiometers.c: 200: if(inputPotsArray[i].controller_number == -3) {
 37659  0042A2  0100               	movlb	0	; () banked
 37660  0042A4  5168               	movf	processPotentiometers@i& (0+255),w,b
 37661  0042A6  0D03               	mullw	3
 37662  0042A8  0E01               	movlw	1
 37663  0042AA  26F3               	addwf	prodl,f,c
 37664  0042AC  0E00               	movlw	0
 37665  0042AE  22F4               	addwfc	prodh,f,c
 37666  0042B0  0E88               	movlw	low _inputPotsArray
 37667  0042B2  24F3               	addwf	prodl,w,c
 37668  0042B4  6ED9               	movwf	fsr2l,c
 37669  0042B6  0E02               	movlw	high _inputPotsArray
 37670  0042B8  20F4               	addwfc	prodh,w,c
 37671  0042BA  6EDA               	movwf	fsr2h,c
 37672  0042BC  0EFD               	movlw	253
 37673  0042BE  18DE               	xorwf	postinc2,w,c
 37674  0042C0  A4D8               	btfss	status,2,c
 37675  0042C2  D00F               	goto	l4065
 37676                           
 37677                           ; BSR set to: 0
 37678                           ;potentiometers.c: 201: controlChange(channel, modulation_wheel_MSB, potentiometer_filte
      +                          red_now[i]);
 37679  0042C4  0E01               	movlw	1
 37680  0042C6  6F60               	movwf	controlChange@controllerNumber& (0+255),b
 37681  0042C8  5168               	movf	processPotentiometers@i& (0+255),w,b
 37682  0042CA  0D02               	mullw	2
 37683  0042CC  0E20               	movlw	low _potentiometer_filtered_now
 37684  0042CE  24F3               	addwf	prodl,w,c
 37685  0042D0  6ED9               	movwf	fsr2l,c
 37686  0042D2  0E02               	movlw	high _potentiometer_filtered_now
 37687  0042D4  20F4               	addwfc	prodh,w,c
 37688  0042D6  6EDA               	movwf	fsr2h,c
 37689  0042D8  50DF               	movf	indf2,w,c
 37690  0042DA  6F61               	movwf	controlChange@value& (0+255),b
 37691  0042DC  503E               	movf	_channel,w,c
 37692  0042DE  ECC9  F048         	call	_controlChange
 37693  0042E2                     l4065:
 37694                           
 37695                           ;potentiometers.c: 202: }
 37696                           ;potentiometers.c: 203: }
 37697                           ;potentiometers.c: 206: if (inputPotsArray[i].controller_resolution == 1){
 37698  0042E2  0100               	movlb	0	; () banked
 37699  0042E4  5168               	movf	processPotentiometers@i& (0+255),w,b
 37700  0042E6  0D03               	mullw	3
 37701  0042E8  0E88               	movlw	low _inputPotsArray
 37702  0042EA  24F3               	addwf	prodl,w,c
 37703  0042EC  6ED9               	movwf	fsr2l,c
 37704  0042EE  0E02               	movlw	high _inputPotsArray
 37705  0042F0  20F4               	addwfc	prodh,w,c
 37706  0042F2  6EDA               	movwf	fsr2h,c
 37707  0042F4  0102               	movlb	2	; () banked
 37708  0042F6  A0DF               	btfss	indf2,0,c
 37709  0042F8  0012               	return	
 37710                           
 37711                           ; BSR set to: 2
 37712                           ;potentiometers.c: 209: DISPLAY_MODE = 0;
 37713  0042FA  0E00               	movlw	0
 37714  0042FC  0100               	movlb	0	; () banked
 37715  0042FE  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 37716                           
 37717                           ;potentiometers.c: 210: DIGIT_MODE = 2;
 37718  004300  0E02               	movlw	2
 37719  004302  6E3A               	movwf	_DIGIT_MODE,c
 37720                           
 37721                           ; BSR set to: 0
 37722                           ;potentiometers.c: 214: unsigned char lowByte = (potentiometer_filtered_now[i]) & 0x7F;
 37723  004304  5168               	movf	processPotentiometers@i& (0+255),w,b
 37724  004306  0D02               	mullw	2
 37725  004308  0E20               	movlw	low _potentiometer_filtered_now
 37726  00430A  24F3               	addwf	prodl,w,c
 37727  00430C  6ED9               	movwf	fsr2l,c
 37728  00430E  0E02               	movlw	high _potentiometer_filtered_now
 37729  004310  20F4               	addwfc	prodh,w,c
 37730  004312  6EDA               	movwf	fsr2h,c
 37731  004314  50DF               	movf	indf2,w,c
 37732  004316  0B7F               	andlw	127
 37733  004318  6F66               	movwf	processPotentiometers@lowByte& (0+255),b
 37734                           
 37735                           ; BSR set to: 0
 37736                           ;potentiometers.c: 215: unsigned char highByte = (potentiometer_filtered_now[i] >> 7) & 
      +                          0x7F;
 37737  00431A  5168               	movf	processPotentiometers@i& (0+255),w,b
 37738  00431C  0D02               	mullw	2
 37739  00431E  0E20               	movlw	low _potentiometer_filtered_now
 37740  004320  24F3               	addwf	prodl,w,c
 37741  004322  6ED9               	movwf	fsr2l,c
 37742  004324  0E02               	movlw	high _potentiometer_filtered_now
 37743  004326  20F4               	addwfc	prodh,w,c
 37744  004328  6EDA               	movwf	fsr2h,c
 37745  00432A  CFDE F063          	movff	postinc2,??_processPotentiometers
 37746  00432E  CFDD F064          	movff	postdec2,??_processPotentiometers+1
 37747  004332  0E07               	movlw	7
 37748  004334  6F65               	movwf	(??_processPotentiometers+2)& (0+255),b
 37749  004336                     u51475:
 37750  004336  3564               	rlcf	(??_processPotentiometers+1)& (0+255),w,b
 37751  004338  3364               	rrcf	(??_processPotentiometers+1)& (0+255),f,b
 37752  00433A  3363               	rrcf	??_processPotentiometers& (0+255),f,b
 37753  00433C  2F65               	decfsz	(??_processPotentiometers+2)& (0+255),f,b
 37754  00433E  D7FB               	goto	u51475
 37755  004340  5163               	movf	??_processPotentiometers& (0+255),w,b
 37756  004342  0B7F               	andlw	127
 37757  004344  6F67               	movwf	processPotentiometers@highByte& (0+255),b
 37758                           
 37759                           ; BSR set to: 0
 37760                           ;potentiometers.c: 218: if(inputPotsArray[i].controller_number_two_byte >= 0) {
 37761  004346  5168               	movf	processPotentiometers@i& (0+255),w,b
 37762  004348  0D03               	mullw	3
 37763  00434A  0E02               	movlw	2
 37764  00434C  26F3               	addwf	prodl,f,c
 37765  00434E  0E00               	movlw	0
 37766  004350  22F4               	addwfc	prodh,f,c
 37767  004352  0E88               	movlw	low _inputPotsArray
 37768  004354  24F3               	addwf	prodl,w,c
 37769  004356  6ED9               	movwf	fsr2l,c
 37770  004358  0E02               	movlw	high _inputPotsArray
 37771  00435A  20F4               	addwfc	prodh,w,c
 37772  00435C  6EDA               	movwf	fsr2h,c
 37773  00435E  0E00               	movlw	0
 37774  004360  BEDB               	btfsc	plusw2,7,c
 37775  004362  D028               	goto	l4067
 37776                           
 37777                           ; BSR set to: 0
 37778                           ;potentiometers.c: 219: controlChange(channel, inputPotsArray[i].controller_number_two_b
      +                          yte, highByte);
 37779  004364  5168               	movf	processPotentiometers@i& (0+255),w,b
 37780  004366  0D03               	mullw	3
 37781  004368  0E02               	movlw	2
 37782  00436A  26F3               	addwf	prodl,f,c
 37783  00436C  0E00               	movlw	0
 37784  00436E  22F4               	addwfc	prodh,f,c
 37785  004370  0E88               	movlw	low _inputPotsArray
 37786  004372  24F3               	addwf	prodl,w,c
 37787  004374  6ED9               	movwf	fsr2l,c
 37788  004376  0E02               	movlw	high _inputPotsArray
 37789  004378  20F4               	addwfc	prodh,w,c
 37790  00437A  6EDA               	movwf	fsr2h,c
 37791  00437C  50DF               	movf	indf2,w,c
 37792  00437E  6F60               	movwf	controlChange@controllerNumber& (0+255),b
 37793  004380  C067  F061         	movff	processPotentiometers@highByte,controlChange@value
 37794  004384  503E               	movf	_channel,w,c
 37795  004386  ECC9  F048         	call	_controlChange
 37796                           
 37797                           ;potentiometers.c: 220: controlChange(channel, inputPotsArray[i].controller_number_two_b
      +                          yte + 32, lowByte);
 37798  00438A  0100               	movlb	0	; () banked
 37799  00438C  5168               	movf	processPotentiometers@i& (0+255),w,b
 37800  00438E  0D03               	mullw	3
 37801  004390  0E02               	movlw	2
 37802  004392  26F3               	addwf	prodl,f,c
 37803  004394  0E00               	movlw	0
 37804  004396  22F4               	addwfc	prodh,f,c
 37805  004398  0E88               	movlw	low _inputPotsArray
 37806  00439A  24F3               	addwf	prodl,w,c
 37807  00439C  6ED9               	movwf	fsr2l,c
 37808  00439E  0E02               	movlw	high _inputPotsArray
 37809  0043A0  20F4               	addwfc	prodh,w,c
 37810  0043A2  6EDA               	movwf	fsr2h,c
 37811  0043A4  50DF               	movf	indf2,w,c
 37812  0043A6  0F20               	addlw	32
 37813  0043A8  6F60               	movwf	controlChange@controllerNumber& (0+255),b
 37814  0043AA  C066  F061         	movff	processPotentiometers@lowByte,controlChange@value
 37815  0043AE  503E               	movf	_channel,w,c
 37816  0043B0  ECC9  F048         	call	_controlChange
 37817  0043B4                     l4067:
 37818                           
 37819                           ;potentiometers.c: 221: }
 37820                           ;potentiometers.c: 223: if(inputPotsArray[i].controller_number_two_byte == -1) {
 37821  0043B4  0100               	movlb	0	; () banked
 37822  0043B6  5168               	movf	processPotentiometers@i& (0+255),w,b
 37823  0043B8  0D03               	mullw	3
 37824  0043BA  0E02               	movlw	2
 37825  0043BC  26F3               	addwf	prodl,f,c
 37826  0043BE  0E00               	movlw	0
 37827  0043C0  22F4               	addwfc	prodh,f,c
 37828  0043C2  0E88               	movlw	low _inputPotsArray
 37829  0043C4  24F3               	addwf	prodl,w,c
 37830  0043C6  6ED9               	movwf	fsr2l,c
 37831  0043C8  0E02               	movlw	high _inputPotsArray
 37832  0043CA  20F4               	addwfc	prodh,w,c
 37833  0043CC  6EDA               	movwf	fsr2h,c
 37834  0043CE  28DE               	incf	postinc2,w,c
 37835  0043D0  B4D8               	btfsc	status,2,c
 37836                           
 37837                           ; BSR set to: 0
 37838                           ;potentiometers.c: 224: velocity = highByte;
 37839  0043D2  C067  F051         	movff	processPotentiometers@highByte,_velocity
 37840                           
 37841                           ; BSR set to: 0
 37842                           ;potentiometers.c: 225: }
 37843                           ;potentiometers.c: 227: if(inputPotsArray[i].controller_number_two_byte == -2) {
 37844                           
 37845                           ; BSR set to: 0
 37846  0043D6  5168               	movf	processPotentiometers@i& (0+255),w,b
 37847  0043D8  0D03               	mullw	3
 37848  0043DA  0E02               	movlw	2
 37849  0043DC  26F3               	addwf	prodl,f,c
 37850  0043DE  0E00               	movlw	0
 37851  0043E0  22F4               	addwfc	prodh,f,c
 37852  0043E2  0E88               	movlw	low _inputPotsArray
 37853  0043E4  24F3               	addwf	prodl,w,c
 37854  0043E6  6ED9               	movwf	fsr2l,c
 37855  0043E8  0E02               	movlw	high _inputPotsArray
 37856  0043EA  20F4               	addwfc	prodh,w,c
 37857  0043EC  6EDA               	movwf	fsr2h,c
 37858  0043EE  0EFE               	movlw	254
 37859  0043F0  18DE               	xorwf	postinc2,w,c
 37860  0043F2  A4D8               	btfss	status,2,c
 37861  0043F4  D007               	goto	l4069
 37862                           
 37863                           ; BSR set to: 0
 37864                           ;potentiometers.c: 228: pitchBend(channel, lowByte, highByte);
 37865  0043F6  C066  F060         	movff	processPotentiometers@lowByte,pitchBend@lowByte
 37866  0043FA  C067  F061         	movff	processPotentiometers@highByte,pitchBend@highByte
 37867  0043FE  503E               	movf	_channel,w,c
 37868  004400  EC26  F04A         	call	_pitchBend
 37869  004404                     l4069:
 37870                           
 37871                           ;potentiometers.c: 229: }
 37872                           ;potentiometers.c: 231: if(inputPotsArray[i].controller_number_two_byte == -3) {
 37873  004404  0100               	movlb	0	; () banked
 37874  004406  5168               	movf	processPotentiometers@i& (0+255),w,b
 37875  004408  0D03               	mullw	3
 37876  00440A  0E02               	movlw	2
 37877  00440C  26F3               	addwf	prodl,f,c
 37878  00440E  0E00               	movlw	0
 37879  004410  22F4               	addwfc	prodh,f,c
 37880  004412  0E88               	movlw	low _inputPotsArray
 37881  004414  24F3               	addwf	prodl,w,c
 37882  004416  6ED9               	movwf	fsr2l,c
 37883  004418  0E02               	movlw	high _inputPotsArray
 37884  00441A  20F4               	addwfc	prodh,w,c
 37885  00441C  6EDA               	movwf	fsr2h,c
 37886  00441E  0EFD               	movlw	253
 37887  004420  18DE               	xorwf	postinc2,w,c
 37888  004422  A4D8               	btfss	status,2,c
 37889  004424  0012               	return	
 37890                           
 37891                           ; BSR set to: 0
 37892                           ;potentiometers.c: 232: controlChange(channel, modulation_wheel_MSB, highByte);
 37893  004426  0E01               	movlw	1
 37894  004428  6F60               	movwf	controlChange@controllerNumber& (0+255),b
 37895  00442A  C067  F061         	movff	processPotentiometers@highByte,controlChange@value
 37896  00442E  503E               	movf	_channel,w,c
 37897  004430  ECC9  F048         	call	_controlChange
 37898                           
 37899                           ;potentiometers.c: 233: controlChange(channel, modulation_wheel_MSB + 32, lowByte);
 37900  004434  0E21               	movlw	33
 37901  004436  0100               	movlb	0	; () banked
 37902  004438  6F60               	movwf	controlChange@controllerNumber& (0+255),b
 37903  00443A  C066  F061         	movff	processPotentiometers@lowByte,controlChange@value
 37904  00443E  503E               	movf	_channel,w,c
 37905  004440  ECC9  F048         	call	_controlChange
 37906  004444  0012               	return	
 37907  004446                     __end_of_processPotentiometers:
 37908                           	opt stack 0
 37909                           tblptru	equ	0xFF8
 37910                           tblptrh	equ	0xFF7
 37911                           tblptrl	equ	0xFF6
 37912                           tablat	equ	0xFF5
 37913                           prodh	equ	0xFF4
 37914                           prodl	equ	0xFF3
 37915                           intcon	equ	0xFF2
 37916                           intcon2	equ	0xFF1
 37917                           indf0	equ	0xFEF
 37918                           postinc0	equ	0xFEE
 37919                           postdec0	equ	0xFED
 37920                           fsr0h	equ	0xFEA
 37921                           fsr0l	equ	0xFE9
 37922                           wreg	equ	0xFE8
 37923                           postinc1	equ	0xFE6
 37924                           postdec1	equ	0xFE5
 37925                           plusw1	equ	0xFE3
 37926                           fsr1h	equ	0xFE2
 37927                           fsr1l	equ	0xFE1
 37928                           indf2	equ	0xFDF
 37929                           postinc2	equ	0xFDE
 37930                           postdec2	equ	0xFDD
 37931                           plusw2	equ	0xFDB
 37932                           fsr2h	equ	0xFDA
 37933                           fsr2l	equ	0xFD9
 37934                           status	equ	0xFD8
 37935                           
 37936 ;; *************** function _pitchBend *****************
 37937 ;; Defined at:
 37938 ;;		line 206 in file "midi.c"
 37939 ;; Parameters:    Size  Location     Type
 37940 ;;  channel         1    wreg     unsigned char 
 37941 ;;  lowByte         1    0[BANK0 ] unsigned char 
 37942 ;;  highByte        1    1[BANK0 ] unsigned char 
 37943 ;; Auto vars:     Size  Location     Type
 37944 ;;  channel         1    2[BANK0 ] unsigned char 
 37945 ;; Return value:  Size  Location     Type
 37946 ;;                  1    wreg      void 
 37947 ;; Registers used:
 37948 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
 37949 ;; Tracked objects:
 37950 ;;		On entry : 0/0
 37951 ;;		On exit  : 0/0
 37952 ;;		Unchanged: 0/0
 37953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 37954 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37955 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37957 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37958 ;;Total ram usage:        3 bytes
 37959 ;; Hardware stack levels used:    1
 37960 ;; Hardware stack levels required when called:    8
 37961 ;; This function calls:
 37962 ;;		___lbmod
 37963 ;;		_key_press_release_note_off
 37964 ;;		_sendOut
 37965 ;;		_sendUSB
 37966 ;; This function is called by:
 37967 ;;		_processPotentiometers
 37968 ;; This function uses a non-reentrant model
 37969 ;;
 37970                           
 37971                           	psect	text106
 37972  00944C                     __ptext106:
 37973                           	opt stack 0
 37974  00944C                     _pitchBend:
 37975                           	opt stack 16
 37976                           
 37977                           ;incstack = 0
 37978                           ;pitchBend@channel stored from wreg
 37979  00944C  0100               	movlb	0	; () banked
 37980  00944E  6F62               	movwf	pitchBend@channel& (0+255),b
 37981                           
 37982                           ;midi.c: 209: if((note_off_was_sent == 0) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 
      +                          0)){
 37983  009450  B002               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 37984  009452  D00A               	goto	l500
 37985  009454  504D               	movf	_NOTE_LENGTH_PULSES,w,c
 37986  009456  6EE6               	movwf	postinc1,c
 37987  009458  502E               	movf	_TIMER_OVERFLOWS,w,c
 37988  00945A  6EE6               	movwf	postinc1,c
 37989  00945C  EC63  F041         	call	___lbmod	;wreg free
 37990  009460  503F               	movf	btemp,w,c
 37991  009462  B4D8               	btfsc	status,2,c
 37992                           
 37993                           ;midi.c: 211: key_press_release_note_off();
 37994  009464  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 37995  009468                     l500:
 37996                           
 37997                           ;midi.c: 212: }
 37998                           ;midi.c: 214: statusByte = channel | pitch_bend;
 37999  009468  0100               	movlb	0	; () banked
 38000  00946A  5162               	movf	pitchBend@channel& (0+255),w,b
 38001  00946C  09E0               	iorlw	224
 38002  00946E  6E3D               	movwf	_statusByte,c
 38003                           
 38004                           ; BSR set to: 0
 38005                           ;midi.c: 217: sendUSB(statusByte, lowByte, highByte);
 38006  009470  5161               	movf	pitchBend@highByte& (0+255),w,b
 38007  009472  6EE6               	movwf	postinc1,c
 38008  009474  5160               	movf	pitchBend@lowByte& (0+255),w,b
 38009  009476  6EE6               	movwf	postinc1,c
 38010  009478  503D               	movf	_statusByte,w,c
 38011  00947A  6EE6               	movwf	postinc1,c
 38012  00947C  ECDD  F036         	call	_sendUSB	;wreg free
 38013                           
 38014                           ;midi.c: 220: sendOut(statusByte, lowByte, highByte);
 38015  009480  0100               	movlb	0	; () banked
 38016  009482  5161               	movf	pitchBend@highByte& (0+255),w,b
 38017  009484  6EE6               	movwf	postinc1,c
 38018  009486  5160               	movf	pitchBend@lowByte& (0+255),w,b
 38019  009488  6EE6               	movwf	postinc1,c
 38020  00948A  503D               	movf	_statusByte,w,c
 38021  00948C  6EE6               	movwf	postinc1,c
 38022  00948E  EC66  F036         	call	_sendOut	;wreg free
 38023  009492  0012               	return		;funcret
 38024  009494                     __end_of_pitchBend:
 38025                           	opt stack 0
 38026                           tblptru	equ	0xFF8
 38027                           tblptrh	equ	0xFF7
 38028                           tblptrl	equ	0xFF6
 38029                           tablat	equ	0xFF5
 38030                           prodh	equ	0xFF4
 38031                           prodl	equ	0xFF3
 38032                           intcon	equ	0xFF2
 38033                           intcon2	equ	0xFF1
 38034                           indf0	equ	0xFEF
 38035                           postinc0	equ	0xFEE
 38036                           postdec0	equ	0xFED
 38037                           fsr0h	equ	0xFEA
 38038                           fsr0l	equ	0xFE9
 38039                           wreg	equ	0xFE8
 38040                           postinc1	equ	0xFE6
 38041                           postdec1	equ	0xFE5
 38042                           plusw1	equ	0xFE3
 38043                           fsr1h	equ	0xFE2
 38044                           fsr1l	equ	0xFE1
 38045                           indf2	equ	0xFDF
 38046                           postinc2	equ	0xFDE
 38047                           postdec2	equ	0xFDD
 38048                           plusw2	equ	0xFDB
 38049                           fsr2h	equ	0xFDA
 38050                           fsr2l	equ	0xFD9
 38051                           status	equ	0xFD8
 38052                           
 38053 ;; *************** function _controlChange *****************
 38054 ;; Defined at:
 38055 ;;		line 179 in file "midi.c"
 38056 ;; Parameters:    Size  Location     Type
 38057 ;;  channel         1    wreg     unsigned char 
 38058 ;;  controllerNu    1    0[BANK0 ] unsigned char 
 38059 ;;  value           1    1[BANK0 ] unsigned char 
 38060 ;; Auto vars:     Size  Location     Type
 38061 ;;  channel         1    2[BANK0 ] unsigned char 
 38062 ;; Return value:  Size  Location     Type
 38063 ;;                  1    wreg      void 
 38064 ;; Registers used:
 38065 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
 38066 ;; Tracked objects:
 38067 ;;		On entry : 0/0
 38068 ;;		On exit  : 0/0
 38069 ;;		Unchanged: 0/0
 38070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38071 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38072 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38074 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38075 ;;Total ram usage:        3 bytes
 38076 ;; Hardware stack levels used:    1
 38077 ;; Hardware stack levels required when called:    8
 38078 ;; This function calls:
 38079 ;;		___lbmod
 38080 ;;		_key_press_release_note_off
 38081 ;;		_sendOut
 38082 ;;		_sendUSB
 38083 ;; This function is called by:
 38084 ;;		_processDrumpad
 38085 ;;		_processPotentiometers
 38086 ;;		_panic_button
 38087 ;; This function uses a non-reentrant model
 38088 ;;
 38089                           
 38090                           	psect	text107
 38091  009192                     __ptext107:
 38092                           	opt stack 0
 38093  009192                     _controlChange:
 38094                           	opt stack 21
 38095                           
 38096                           ;incstack = 0
 38097                           ;controlChange@channel stored from wreg
 38098  009192  0100               	movlb	0	; () banked
 38099  009194  6F62               	movwf	controlChange@channel& (0+255),b
 38100                           
 38101                           ;midi.c: 182: if((note_off_was_sent == 0) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 
      +                          0)){
 38102  009196  B002               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38103  009198  D00A               	goto	l496
 38104  00919A  504D               	movf	_NOTE_LENGTH_PULSES,w,c
 38105  00919C  6EE6               	movwf	postinc1,c
 38106  00919E  502E               	movf	_TIMER_OVERFLOWS,w,c
 38107  0091A0  6EE6               	movwf	postinc1,c
 38108  0091A2  EC63  F041         	call	___lbmod	;wreg free
 38109  0091A6  503F               	movf	btemp,w,c
 38110  0091A8  B4D8               	btfsc	status,2,c
 38111                           
 38112                           ;midi.c: 184: key_press_release_note_off();
 38113  0091AA  EC8D  F02E         	call	_key_press_release_note_off	;wreg free
 38114  0091AE                     l496:
 38115                           
 38116                           ;midi.c: 185: }
 38117                           ;midi.c: 187: statusByte = channel | control_change;
 38118  0091AE  0100               	movlb	0	; () banked
 38119  0091B0  5162               	movf	controlChange@channel& (0+255),w,b
 38120  0091B2  09B0               	iorlw	176
 38121  0091B4  6E3D               	movwf	_statusByte,c
 38122                           
 38123                           ; BSR set to: 0
 38124                           ;midi.c: 190: sendUSB(statusByte, controllerNumber, value);
 38125  0091B6  5161               	movf	controlChange@value& (0+255),w,b
 38126  0091B8  6EE6               	movwf	postinc1,c
 38127  0091BA  5160               	movf	controlChange@controllerNumber& (0+255),w,b
 38128  0091BC  6EE6               	movwf	postinc1,c
 38129  0091BE  503D               	movf	_statusByte,w,c
 38130  0091C0  6EE6               	movwf	postinc1,c
 38131  0091C2  ECDD  F036         	call	_sendUSB	;wreg free
 38132                           
 38133                           ;midi.c: 194: GLOBAL_STATUS_BYTE = statusByte;
 38134  0091C6  C03D  F181         	movff	_statusByte,_GLOBAL_STATUS_BYTE
 38135                           
 38136                           ;midi.c: 195: GLOBAL_CC_NUMBER = controllerNumber;
 38137  0091CA  C060  F0F4         	movff	controlChange@controllerNumber,_GLOBAL_CC_NUMBER
 38138                           
 38139                           ;midi.c: 196: GLOBAL_CC_VALUE = value;
 38140  0091CE  C061  F180         	movff	controlChange@value,_GLOBAL_CC_VALUE
 38141                           
 38142                           ;midi.c: 198: CONTROL_CHANGE_IS_BEING_SENT = 1;
 38143  0091D2  8206               	bsf	_CONTROL_CHANGE_IS_BEING_SENT/(0+8),_CONTROL_CHANGE_IS_BEING_SENT& (0+7),c
 38144                           
 38145                           ;midi.c: 199: sendOut(statusByte, controllerNumber, value);
 38146  0091D4  0100               	movlb	0	; () banked
 38147  0091D6  5161               	movf	controlChange@value& (0+255),w,b
 38148  0091D8  6EE6               	movwf	postinc1,c
 38149  0091DA  5160               	movf	controlChange@controllerNumber& (0+255),w,b
 38150  0091DC  6EE6               	movwf	postinc1,c
 38151  0091DE  503D               	movf	_statusByte,w,c
 38152  0091E0  6EE6               	movwf	postinc1,c
 38153  0091E2  EC66  F036         	call	_sendOut	;wreg free
 38154                           
 38155                           ;midi.c: 202: CONTROL_CHANGE_IS_BEING_SENT = 0;
 38156  0091E6  9206               	bcf	_CONTROL_CHANGE_IS_BEING_SENT/(0+8),_CONTROL_CHANGE_IS_BEING_SENT& (0+7),c
 38157  0091E8  0012               	return		;funcret
 38158  0091EA                     __end_of_controlChange:
 38159                           	opt stack 0
 38160                           tblptru	equ	0xFF8
 38161                           tblptrh	equ	0xFF7
 38162                           tblptrl	equ	0xFF6
 38163                           tablat	equ	0xFF5
 38164                           prodh	equ	0xFF4
 38165                           prodl	equ	0xFF3
 38166                           intcon	equ	0xFF2
 38167                           intcon2	equ	0xFF1
 38168                           indf0	equ	0xFEF
 38169                           postinc0	equ	0xFEE
 38170                           postdec0	equ	0xFED
 38171                           fsr0h	equ	0xFEA
 38172                           fsr0l	equ	0xFE9
 38173                           wreg	equ	0xFE8
 38174                           postinc1	equ	0xFE6
 38175                           postdec1	equ	0xFE5
 38176                           plusw1	equ	0xFE3
 38177                           fsr1h	equ	0xFE2
 38178                           fsr1l	equ	0xFE1
 38179                           indf2	equ	0xFDF
 38180                           postinc2	equ	0xFDE
 38181                           postdec2	equ	0xFDD
 38182                           plusw2	equ	0xFDB
 38183                           fsr2h	equ	0xFDA
 38184                           fsr2l	equ	0xFD9
 38185                           status	equ	0xFD8
 38186                           
 38187 ;; *************** function _key_press_release_note_off *****************
 38188 ;; Defined at:
 38189 ;;		line 110 in file "arpeggio.c"
 38190 ;; Parameters:    Size  Location     Type
 38191 ;;		None
 38192 ;; Auto vars:     Size  Location     Type
 38193 ;;		None
 38194 ;; Return value:  Size  Location     Type
 38195 ;;                  1    wreg      void 
 38196 ;; Registers used:
 38197 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh
 38198 ;; Tracked objects:
 38199 ;;		On entry : 0/0
 38200 ;;		On exit  : 0/0
 38201 ;;		Unchanged: 0/0
 38202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38207 ;;Total ram usage:        0 bytes
 38208 ;; Hardware stack levels used:    1
 38209 ;; Hardware stack levels required when called:    7
 38210 ;; This function calls:
 38211 ;;		_noteOff
 38212 ;; This function is called by:
 38213 ;;		_controlChange
 38214 ;;		_pitchBend
 38215 ;;		_programChange
 38216 ;;		_playThisNotePentatonic
 38217 ;;		_playTriad
 38218 ;;		_playSeventh
 38219 ;;		_playThisNote
 38220 ;;		_playThisNote8
 38221 ;;		_playDiatonicTriadMajor
 38222 ;;		_playDiatonicSeventhMajor
 38223 ;;		_playDiatonicTriadMinor
 38224 ;;		_playDiatonicSeventhMinor
 38225 ;;		_keyboardTranspose
 38226 ;;		_processOctave
 38227 ;; This function uses a non-reentrant model
 38228 ;;
 38229                           
 38230                           	psect	text108
 38231  005D1A                     __ptext108:
 38232                           	opt stack 0
 38233  005D1A                     _key_press_release_note_off:
 38234                           	opt stack 21
 38235                           
 38236                           ;arpeggio.c: 113: if((startingDirection == UP) && (ARPEGGIO_TYPE == DOWN_UP)){stored_oct
      +                          ave += (OCTAVES - 1);}
 38237                           
 38238                           ;incstack = 0
 38239  005D1A  5034               	movf	_startingDirection,w,c
 38240  005D1C  A4D8               	btfss	status,2,c
 38241  005D1E  D006               	goto	l5429
 38242  005D20  0E03               	movlw	3
 38243  005D22  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 38244  005D24  A4D8               	btfss	status,2,c
 38245  005D26  D002               	goto	l5429
 38246  005D28  044E               	decf	_OCTAVES,w,c
 38247  005D2A  2631               	addwf	_stored_octave,f,c
 38248  005D2C                     l5429:
 38249                           
 38250                           ;arpeggio.c: 115: if((startingDirection == DOWN) && (ARPEGGIO_TYPE == UP_DOWN)){stored_o
      +                          ctave -= (OCTAVES - 1);}
 38251  005D2C  0434               	decf	_startingDirection,w,c
 38252  005D2E  A4D8               	btfss	status,2,c
 38253  005D30  D006               	goto	l5430
 38254  005D32  0E02               	movlw	2
 38255  005D34  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 38256  005D36  A4D8               	btfss	status,2,c
 38257  005D38  D002               	goto	l5430
 38258  005D3A  044E               	decf	_OCTAVES,w,c
 38259  005D3C  5E31               	subwf	_stored_octave,f,c
 38260  005D3E                     l5430:
 38261                           
 38262                           ;arpeggio.c: 118: TMR0ON = 0;
 38263  005D3E  9ED5               	bcf	4053,7,c	;volatile
 38264                           
 38265                           ;arpeggio.c: 122: static signed char temp;
 38266                           ;arpeggio.c: 123: temp = last_note;
 38267  005D40  C0EC  F02C         	movff	_last_note,key_press_release_note_off@temp
 38268                           
 38269                           ;arpeggio.c: 126: if((last_note != 0)){
 38270  005D44  0100               	movlb	0	; () banked
 38271  005D46  51EC               	movf	_last_note& (0+255),w,b
 38272  005D48  B4D8               	btfsc	status,2,c
 38273  005D4A  D077               	goto	l5433
 38274                           
 38275                           ; BSR set to: 0
 38276                           ;arpeggio.c: 127: if(stored_octave == -3){noteOff(channel, temp - ((OCTAVES - (OCTAVES -
      +                           3)) * 12), velocity);}
 38277  005D4C  0EFD               	movlw	253
 38278  005D4E  1831               	xorwf	_stored_octave,w,c
 38279  005D50  A4D8               	btfss	status,2,c
 38280  005D52  D00F               	goto	l5434
 38281                           
 38282                           ; BSR set to: 0
 38283  005D54  5051               	movf	_velocity,w,c
 38284  005D56  6EE6               	movwf	postinc1,c
 38285  005D58  504E               	movf	_OCTAVES,w,c
 38286  005D5A  0FFD               	addlw	253
 38287  005D5C  0800               	sublw	0
 38288  005D5E  244E               	addwf	_OCTAVES,w,c
 38289  005D60  0D0C               	mullw	12
 38290  005D62  50F3               	movf	prodl,w,c
 38291  005D64  0800               	sublw	0
 38292  005D66  242C               	addwf	key_press_release_note_off@temp,w,c
 38293  005D68  6EE6               	movwf	postinc1,c
 38294  005D6A  503E               	movf	_channel,w,c
 38295  005D6C  6EE6               	movwf	postinc1,c
 38296  005D6E  EC4A  F04A         	call	_noteOff	;wreg free
 38297  005D72                     l5434:
 38298                           
 38299                           ;arpeggio.c: 128: if(stored_octave == -2){noteOff(channel, temp - ((OCTAVES - (OCTAVES -
      +                           2)) * 12), velocity);}
 38300  005D72  0EFE               	movlw	254
 38301  005D74  1831               	xorwf	_stored_octave,w,c
 38302  005D76  A4D8               	btfss	status,2,c
 38303  005D78  D00F               	goto	l5435
 38304  005D7A  5051               	movf	_velocity,w,c
 38305  005D7C  6EE6               	movwf	postinc1,c
 38306  005D7E  504E               	movf	_OCTAVES,w,c
 38307  005D80  0FFE               	addlw	254
 38308  005D82  0800               	sublw	0
 38309  005D84  244E               	addwf	_OCTAVES,w,c
 38310  005D86  0D0C               	mullw	12
 38311  005D88  50F3               	movf	prodl,w,c
 38312  005D8A  0800               	sublw	0
 38313  005D8C  242C               	addwf	key_press_release_note_off@temp,w,c
 38314  005D8E  6EE6               	movwf	postinc1,c
 38315  005D90  503E               	movf	_channel,w,c
 38316  005D92  6EE6               	movwf	postinc1,c
 38317  005D94  EC4A  F04A         	call	_noteOff	;wreg free
 38318  005D98                     l5435:
 38319                           
 38320                           ;arpeggio.c: 129: if(stored_octave == -1){noteOff(channel, temp - ((OCTAVES - (OCTAVES -
      +                           1)) * 12), velocity);}
 38321  005D98  2831               	incf	_stored_octave,w,c
 38322  005D9A  A4D8               	btfss	status,2,c
 38323  005D9C  D00E               	goto	l5436
 38324  005D9E  5051               	movf	_velocity,w,c
 38325  005DA0  6EE6               	movwf	postinc1,c
 38326  005DA2  044E               	decf	_OCTAVES,w,c
 38327  005DA4  0800               	sublw	0
 38328  005DA6  244E               	addwf	_OCTAVES,w,c
 38329  005DA8  0D0C               	mullw	12
 38330  005DAA  50F3               	movf	prodl,w,c
 38331  005DAC  0800               	sublw	0
 38332  005DAE  242C               	addwf	key_press_release_note_off@temp,w,c
 38333  005DB0  6EE6               	movwf	postinc1,c
 38334  005DB2  503E               	movf	_channel,w,c
 38335  005DB4  6EE6               	movwf	postinc1,c
 38336  005DB6  EC4A  F04A         	call	_noteOff	;wreg free
 38337  005DBA                     l5436:
 38338                           
 38339                           ;arpeggio.c: 131: if(stored_octave == 0){
 38340  005DBA  5031               	movf	_stored_octave,w,c
 38341  005DBC  A4D8               	btfss	status,2,c
 38342  005DBE  D008               	goto	l5437
 38343                           
 38344                           ;arpeggio.c: 132: noteOff(channel, temp, velocity);
 38345  005DC0  5051               	movf	_velocity,w,c
 38346  005DC2  6EE6               	movwf	postinc1,c
 38347  005DC4  502C               	movf	key_press_release_note_off@temp,w,c
 38348  005DC6  6EE6               	movwf	postinc1,c
 38349  005DC8  503E               	movf	_channel,w,c
 38350  005DCA  6EE6               	movwf	postinc1,c
 38351  005DCC  EC4A  F04A         	call	_noteOff	;wreg free
 38352  005DD0                     l5437:
 38353                           
 38354                           ;arpeggio.c: 133: }
 38355                           ;arpeggio.c: 135: if(stored_octave == 1){noteOff(channel, temp + ((OCTAVES - (OCTAVES - 
      +                          1)) * 12), velocity);}
 38356  005DD0  0431               	decf	_stored_octave,w,c
 38357  005DD2  A4D8               	btfss	status,2,c
 38358  005DD4  D00D               	goto	l5438
 38359  005DD6  5051               	movf	_velocity,w,c
 38360  005DD8  6EE6               	movwf	postinc1,c
 38361  005DDA  044E               	decf	_OCTAVES,w,c
 38362  005DDC  0800               	sublw	0
 38363  005DDE  244E               	addwf	_OCTAVES,w,c
 38364  005DE0  0D0C               	mullw	12
 38365  005DE2  50F3               	movf	prodl,w,c
 38366  005DE4  242C               	addwf	key_press_release_note_off@temp,w,c
 38367  005DE6  6EE6               	movwf	postinc1,c
 38368  005DE8  503E               	movf	_channel,w,c
 38369  005DEA  6EE6               	movwf	postinc1,c
 38370  005DEC  EC4A  F04A         	call	_noteOff	;wreg free
 38371  005DF0                     l5438:
 38372                           
 38373                           ;arpeggio.c: 136: if(stored_octave == 2){noteOff(channel, temp + ((OCTAVES - (OCTAVES - 
      +                          2)) * 12), velocity);}
 38374  005DF0  0E02               	movlw	2
 38375  005DF2  1831               	xorwf	_stored_octave,w,c
 38376  005DF4  A4D8               	btfss	status,2,c
 38377  005DF6  D00E               	goto	l5439
 38378  005DF8  5051               	movf	_velocity,w,c
 38379  005DFA  6EE6               	movwf	postinc1,c
 38380  005DFC  504E               	movf	_OCTAVES,w,c
 38381  005DFE  0FFE               	addlw	254
 38382  005E00  0800               	sublw	0
 38383  005E02  244E               	addwf	_OCTAVES,w,c
 38384  005E04  0D0C               	mullw	12
 38385  005E06  50F3               	movf	prodl,w,c
 38386  005E08  242C               	addwf	key_press_release_note_off@temp,w,c
 38387  005E0A  6EE6               	movwf	postinc1,c
 38388  005E0C  503E               	movf	_channel,w,c
 38389  005E0E  6EE6               	movwf	postinc1,c
 38390  005E10  EC4A  F04A         	call	_noteOff	;wreg free
 38391  005E14                     l5439:
 38392                           
 38393                           ;arpeggio.c: 137: if(stored_octave == 3){noteOff(channel, temp + ((OCTAVES - (OCTAVES - 
      +                          3)) * 12), velocity);}
 38394  005E14  0E03               	movlw	3
 38395  005E16  1831               	xorwf	_stored_octave,w,c
 38396  005E18  A4D8               	btfss	status,2,c
 38397  005E1A  D00E               	goto	l5440
 38398  005E1C  5051               	movf	_velocity,w,c
 38399  005E1E  6EE6               	movwf	postinc1,c
 38400  005E20  504E               	movf	_OCTAVES,w,c
 38401  005E22  0FFD               	addlw	253
 38402  005E24  0800               	sublw	0
 38403  005E26  244E               	addwf	_OCTAVES,w,c
 38404  005E28  0D0C               	mullw	12
 38405  005E2A  50F3               	movf	prodl,w,c
 38406  005E2C  242C               	addwf	key_press_release_note_off@temp,w,c
 38407  005E2E  6EE6               	movwf	postinc1,c
 38408  005E30  503E               	movf	_channel,w,c
 38409  005E32  6EE6               	movwf	postinc1,c
 38410  005E34  EC4A  F04A         	call	_noteOff	;wreg free
 38411  005E38                     l5440:
 38412                           
 38413                           ;arpeggio.c: 139: note_off_was_sent = 1;
 38414  005E38  8002               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38415  005E3A                     l5433:
 38416                           
 38417                           ;arpeggio.c: 140: }
 38418                           ;arpeggio.c: 143: if((last_note == 0) && (note_off_was_sent == 0) && (keyboard.SW1 == 1)
      +                          ){noteOff(channel, stored_octave * 12, velocity);note_off_was_sent = 1;}
 38419  005E3A  0100               	movlb	0	; () banked
 38420  005E3C  51EC               	movf	_last_note& (0+255),w,b
 38421  005E3E  B4D8               	btfsc	status,2,c
 38422                           
 38423                           ; BSR set to: 0
 38424  005E40  B002               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38425  005E42  D00D               	goto	l5441
 38426                           
 38427                           ; BSR set to: 0
 38428  005E44  A1D0               	btfss	_keyboard& (0+255),0,b
 38429  005E46  D00B               	goto	l5441
 38430                           
 38431                           ; BSR set to: 0
 38432  005E48  5051               	movf	_velocity,w,c
 38433  005E4A  6EE6               	movwf	postinc1,c
 38434  005E4C  5031               	movf	_stored_octave,w,c
 38435  005E4E  0D0C               	mullw	12
 38436  005E50  50F3               	movf	prodl,w,c
 38437  005E52  6EE6               	movwf	postinc1,c
 38438  005E54  503E               	movf	_channel,w,c
 38439  005E56  6EE6               	movwf	postinc1,c
 38440  005E58  EC4A  F04A         	call	_noteOff	;wreg free
 38441  005E5C  8002               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38442  005E5E                     l5441:
 38443                           
 38444                           ;arpeggio.c: 144: if((last_note == 0) && (note_off_was_sent == 0)){noteOff(channel, stor
      +                          ed_octave * 12, velocity);note_off_was_sent = 1;}
 38445  005E5E  0100               	movlb	0	; () banked
 38446  005E60  51EC               	movf	_last_note& (0+255),w,b
 38447  005E62  B4D8               	btfsc	status,2,c
 38448                           
 38449                           ; BSR set to: 0
 38450  005E64  B002               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38451  005E66  D00B               	goto	l5442
 38452                           
 38453                           ; BSR set to: 0
 38454  005E68  5051               	movf	_velocity,w,c
 38455  005E6A  6EE6               	movwf	postinc1,c
 38456  005E6C  5031               	movf	_stored_octave,w,c
 38457  005E6E  0D0C               	mullw	12
 38458  005E70  50F3               	movf	prodl,w,c
 38459  005E72  6EE6               	movwf	postinc1,c
 38460  005E74  503E               	movf	_channel,w,c
 38461  005E76  6EE6               	movwf	postinc1,c
 38462  005E78  EC4A  F04A         	call	_noteOff	;wreg free
 38463  005E7C  8002               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38464  005E7E                     l5442:
 38465                           
 38466                           ;arpeggio.c: 146: TMR0ON = 1;
 38467  005E7E  8ED5               	bsf	4053,7,c	;volatile
 38468  005E80  0012               	return		;funcret
 38469  005E82                     __end_of_key_press_release_note_off:
 38470                           	opt stack 0
 38471                           tblptru	equ	0xFF8
 38472                           tblptrh	equ	0xFF7
 38473                           tblptrl	equ	0xFF6
 38474                           tablat	equ	0xFF5
 38475                           prodh	equ	0xFF4
 38476                           prodl	equ	0xFF3
 38477                           intcon	equ	0xFF2
 38478                           intcon2	equ	0xFF1
 38479                           indf0	equ	0xFEF
 38480                           postinc0	equ	0xFEE
 38481                           postdec0	equ	0xFED
 38482                           fsr0h	equ	0xFEA
 38483                           fsr0l	equ	0xFE9
 38484                           wreg	equ	0xFE8
 38485                           postinc1	equ	0xFE6
 38486                           postdec1	equ	0xFE5
 38487                           plusw1	equ	0xFE3
 38488                           fsr1h	equ	0xFE2
 38489                           fsr1l	equ	0xFE1
 38490                           indf2	equ	0xFDF
 38491                           postinc2	equ	0xFDE
 38492                           postdec2	equ	0xFDD
 38493                           plusw2	equ	0xFDB
 38494                           fsr2h	equ	0xFDA
 38495                           fsr2l	equ	0xFD9
 38496                           status	equ	0xFD8
 38497                           
 38498 ;; *************** function _noteOff *****************
 38499 ;; Defined at:
 38500 ;;		line 109 in file "midi.c"
 38501 ;; Parameters:    Size  Location     Type
 38502 ;;  channel         1  [STACK] unsigned char 
 38503 ;;  pitch           1  [STACK] unsigned char 
 38504 ;;  velocity        1  [STACK] unsigned char 
 38505 ;; Auto vars:     Size  Location     Type
 38506 ;;		None
 38507 ;; Return value:  Size  Location     Type
 38508 ;;                  1  [STACK] void 
 38509 ;; Registers used:
 38510 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh
 38511 ;; Tracked objects:
 38512 ;;		On entry : 0/0
 38513 ;;		On exit  : 0/0
 38514 ;;		Unchanged: 0/0
 38515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38520 ;;Total ram usage:        0 bytes
 38521 ;; Hardware stack levels used:    1
 38522 ;; Hardware stack levels required when called:    6
 38523 ;; This function calls:
 38524 ;;		_sendOut
 38525 ;;		_sendUSB
 38526 ;; This function is called by:
 38527 ;;		_noteOn
 38528 ;;		_noteOnDrum
 38529 ;;		_playThisNotePentatonic
 38530 ;;		_playTriad
 38531 ;;		_playSeventh
 38532 ;;		_playThisNote
 38533 ;;		_playThisNote8
 38534 ;;		_playDiatonicTriadMajor
 38535 ;;		_playDiatonicSeventhMajor
 38536 ;;		_playDiatonicTriadMinor
 38537 ;;		_playDiatonicSeventhMinor
 38538 ;;		_key_press_release_note_off
 38539 ;;		_playArpeggio
 38540 ;;		_keyboard_all_note
 38541 ;;		_keyboard_eight_note
 38542 ;; This function uses a reentrant model
 38543 ;;
 38544                           
 38545                           	psect	text109
 38546  009494                     __ptext109:
 38547                           	opt stack 0
 38548  009494                     _noteOff:
 38549                           	opt stack 6
 38550                           
 38551                           ;midi.c: 111: noteNumber = pitch + semitone + ((octave + 1)* 12);
 38552                           ;stkvar	noteOff@pitch @ sp[(0)+-2]
 38553                           
 38554                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
 38555                           ;incstack = 0
 38556  009494  0EFE               	movlw	-2
 38557  009496  CFE3 F04A          	movff	plusw1,btemp+11
 38558  00949A  5050               	movf	_octave,w,c
 38559  00949C  0D0C               	mullw	12
 38560  00949E  50F3               	movf	prodl,w,c
 38561  0094A0  243B               	addwf	_semitone,w,c
 38562  0094A2  244A               	addwf	btemp+11,w,c
 38563  0094A4  0F0C               	addlw	12
 38564  0094A6  6E3C               	movwf	_noteNumber,c
 38565                           
 38566                           ;midi.c: 112: statusByte = channel | note_off;
 38567                           ;stkvar	noteOff@channel @ sp[(0)+-1]
 38568  0094A8  0EFF               	movlw	-1
 38569  0094AA  50E3               	movf	plusw1,w,c
 38570  0094AC  0980               	iorlw	128
 38571  0094AE  6E3D               	movwf	_statusByte,c
 38572                           
 38573                           ;midi.c: 116: sendUSB(statusByte, noteNumber, velocity);
 38574                           ;stkvar	noteOff@velocity @ sp[(0)+-3]
 38575  0094B0  0EFD               	movlw	-3
 38576  0094B2  50E3               	movf	plusw1,w,c
 38577  0094B4  6EE6               	movwf	postinc1,c
 38578  0094B6  503C               	movf	_noteNumber,w,c
 38579  0094B8  6EE6               	movwf	postinc1,c
 38580  0094BA  503D               	movf	_statusByte,w,c
 38581  0094BC  6EE6               	movwf	postinc1,c
 38582  0094BE  ECDD  F036         	call	_sendUSB	;wreg free
 38583                           
 38584                           ;midi.c: 119: sendOut(statusByte, noteNumber, velocity);
 38585                           ;stkvar	noteOff@velocity @ sp[(0)+-3]
 38586  0094C2  0EFD               	movlw	-3
 38587  0094C4  50E3               	movf	plusw1,w,c
 38588  0094C6  6EE6               	movwf	postinc1,c
 38589  0094C8  503C               	movf	_noteNumber,w,c
 38590  0094CA  6EE6               	movwf	postinc1,c
 38591  0094CC  503D               	movf	_statusByte,w,c
 38592  0094CE  6EE6               	movwf	postinc1,c
 38593  0094D0  EC66  F036         	call	_sendOut	;wreg free
 38594                           
 38595                           ; _noteOff: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsi
      +                          ze = 3, vargsize = 0
 38596  0094D4  52E5               	movf	postdec1,f,c
 38597  0094D6  52E5               	movf	postdec1,f,c
 38598  0094D8  52E5               	movf	postdec1,f,c
 38599  0094DA  0012               	return		;funcret
 38600  0094DC                     __end_of_noteOff:
 38601                           	opt stack 0
 38602                           tblptru	equ	0xFF8
 38603                           tblptrh	equ	0xFF7
 38604                           tblptrl	equ	0xFF6
 38605                           tablat	equ	0xFF5
 38606                           prodh	equ	0xFF4
 38607                           prodl	equ	0xFF3
 38608                           intcon	equ	0xFF2
 38609                           intcon2	equ	0xFF1
 38610                           indf0	equ	0xFEF
 38611                           postinc0	equ	0xFEE
 38612                           postdec0	equ	0xFED
 38613                           fsr0h	equ	0xFEA
 38614                           fsr0l	equ	0xFE9
 38615                           wreg	equ	0xFE8
 38616                           postinc1	equ	0xFE6
 38617                           postdec1	equ	0xFE5
 38618                           plusw1	equ	0xFE3
 38619                           fsr1h	equ	0xFE2
 38620                           fsr1l	equ	0xFE1
 38621                           indf2	equ	0xFDF
 38622                           postinc2	equ	0xFDE
 38623                           postdec2	equ	0xFDD
 38624                           plusw2	equ	0xFDB
 38625                           fsr2h	equ	0xFDA
 38626                           fsr2l	equ	0xFD9
 38627                           status	equ	0xFD8
 38628                           
 38629 ;; *************** function _sendUSB *****************
 38630 ;; Defined at:
 38631 ;;		line 75 in file "midi.c"
 38632 ;; Parameters:    Size  Location     Type
 38633 ;;  message1        1  [STACK] unsigned char 
 38634 ;;  message2        1  [STACK] unsigned char 
 38635 ;;  message3        1  [STACK] unsigned char 
 38636 ;; Auto vars:     Size  Location     Type
 38637 ;;  ii              1  [STACK] unsigned char 
 38638 ;;  i               1  [STACK] unsigned char 
 38639 ;;  midiMessage     3  [STACK] unsigned char [3]
 38640 ;; Return value:  Size  Location     Type
 38641 ;;                  1  [STACK] void 
 38642 ;; Registers used:
 38643 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11
 38644 ;; Tracked objects:
 38645 ;;		On entry : 0/0
 38646 ;;		On exit  : 0/0
 38647 ;;		Unchanged: 0/0
 38648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38653 ;;Total ram usage:        0 bytes
 38654 ;; Hardware stack levels used:    1
 38655 ;; Hardware stack levels required when called:    5
 38656 ;; This function calls:
 38657 ;;		Nothing
 38658 ;; This function is called by:
 38659 ;;		_noteOff
 38660 ;;		_noteOn
 38661 ;;		_noteOffDrum
 38662 ;;		_noteOnDrum
 38663 ;;		_controlChange
 38664 ;;		_pitchBend
 38665 ;;		_programChange
 38666 ;; This function uses a reentrant model
 38667 ;;
 38668                           
 38669                           	psect	text110
 38670  006DBA                     __ptext110:
 38671                           	opt stack 0
 38672  006DBA                     _sendUSB:
 38673                           	opt stack 0
 38674                           
 38675                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
 38676  006DBA  0E05               	movlw	5
 38677  006DBC  26E1               	addwf	fsr1l,f,c
 38678  006DBE  0E00               	movlw	0
 38679  006DC0  22E2               	addwfc	fsr1h,f,c
 38680                           
 38681                           ;midi.c: 77: unsigned char midiMessage[3];
 38682                           ;midi.c: 79: midiMessage[0]=message1;
 38683                           ;stkvar	sendUSB@message1 @ sp[(-5)+-1]
 38684                           ;stkvar	sendUSB@midiMessage @ sp[(-5)+2]
 38685                           
 38686                           ;incstack = 0
 38687  006DC2  0EFA               	movlw	-6
 38688  006DC4  CFE3 F03F          	movff	plusw1,btemp
 38689  006DC8  0EFD               	movlw	-3
 38690  006DCA  C03F  FFE3         	movff	btemp,plusw1
 38691                           
 38692                           ;midi.c: 80: midiMessage[1]=message2;
 38693                           ;stkvar	sendUSB@message2 @ sp[(-5)+-2]
 38694                           ;stkvar	sendUSB@midiMessage @ sp[(-5)+2]
 38695  006DCE  0EFE               	movlw	254
 38696  006DD0  24E1               	addwf	fsr1l,w,c
 38697  006DD2  6ED9               	movwf	fsr2l,c
 38698  006DD4  0EFF               	movlw	255
 38699  006DD6  20E2               	addwfc	fsr1h,w,c
 38700  006DD8  6EDA               	movwf	fsr2h,c
 38701  006DDA  0EF9               	movlw	-7
 38702  006DDC  CFE3 FFDF          	movff	plusw1,indf2
 38703                           
 38704                           ;midi.c: 81: midiMessage[2]=message3;
 38705                           ;stkvar	sendUSB@message3 @ sp[(-5)+-3]
 38706                           ;stkvar	sendUSB@midiMessage @ sp[(-5)+2]
 38707  006DE0  0EFF               	movlw	255
 38708  006DE2  24E1               	addwf	fsr1l,w,c
 38709  006DE4  6ED9               	movwf	fsr2l,c
 38710  006DE6  0EFF               	movlw	255
 38711  006DE8  20E2               	addwfc	fsr1h,w,c
 38712  006DEA  6EDA               	movwf	fsr2h,c
 38713  006DEC  0EF8               	movlw	-8
 38714  006DEE  CFE3 FFDF          	movff	plusw1,indf2
 38715                           
 38716                           ;midi.c: 83: RA5 = 0;
 38717  006DF2  9A80               	bcf	3968,5,c	;volatile
 38718                           
 38719                           ;midi.c: 84: RB2 = 1;
 38720  006DF4  8481               	bsf	3969,2,c	;volatile
 38721                           
 38722                           ;midi.c: 85: _delay((unsigned long)((50)*(20000000/4000000.0)));
 38723  006DF6  0E53               	movlw	83
 38724  006DF8                     u67157:
 38725  006DF8  2EE8               	decfsz	wreg,f,c
 38726  006DFA  D7FE               	bra	u67157
 38727  006DFC  F000               	nop	
 38728                           
 38729                           ;midi.c: 87: for(unsigned char i=0;i<3;i++){
 38730                           ;stkvar	sendUSB@i @ sp[(-5)+1]
 38731  006DFE  0EFC               	movlw	-4
 38732  006E00  6AE3               	clrf	plusw1,c
 38733  006E02                     l31164:
 38734                           
 38735                           ;midi.c: 88: for(unsigned char ii=0;ii<8;ii++){
 38736                           ;stkvar	sendUSB@ii @ sp[(-5)+0]
 38737  006E02  0EFB               	movlw	-5
 38738  006E04  6AE3               	clrf	plusw1,c
 38739  006E06                     l31170:
 38740                           
 38741                           ;midi.c: 91: RE2 = !!(midiMessage[i] & (1 << ii));
 38742                           ;stkvar	sendUSB@i @ sp[(-5)+1]
 38743  006E06  0EFC               	movlw	-4
 38744  006E08  CFE3 F04A          	movff	plusw1,btemp+11
 38745                           
 38746                           ;stkvar	sendUSB@midiMessage @ sp[(-5)+2]
 38747  006E0C  0EFD               	movlw	253
 38748  006E0E  24E1               	addwf	fsr1l,w,c
 38749  006E10  6E40               	movwf	btemp+1,c
 38750  006E12  0EFF               	movlw	255
 38751  006E14  20E2               	addwfc	fsr1h,w,c
 38752  006E16  6E41               	movwf	btemp+2,c
 38753  006E18  504A               	movf	btemp+11,w,c
 38754  006E1A  2440               	addwf	btemp+1,w,c
 38755  006E1C  6ED9               	movwf	fsr2l,c
 38756  006E1E  0E00               	movlw	0
 38757  006E20  2041               	addwfc	btemp+2,w,c
 38758  006E22  6EDA               	movwf	fsr2h,c
 38759  006E24  50DF               	movf	indf2,w,c
 38760  006E26  6E4A               	movwf	btemp+11,c
 38761                           
 38762                           ;stkvar	sendUSB@ii @ sp[(-5)+0]
 38763  006E28  0EFB               	movlw	-5
 38764  006E2A  CFE3 F049          	movff	plusw1,btemp+10
 38765  006E2E  0E01               	movlw	1
 38766  006E30  6E48               	movwf	btemp+9,c
 38767  006E32  2A49               	incf	btemp+10,f,c
 38768  006E34  D002               	goto	u56784
 38769  006E36                     u56785:
 38770  006E36  90D8               	bcf	status,0,c
 38771  006E38  3648               	rlcf	btemp+9,f,c
 38772  006E3A                     u56784:
 38773  006E3A  2E49               	decfsz	btemp+10,f,c
 38774  006E3C  D7FC               	goto	u56785
 38775  006E3E  5048               	movf	btemp+9,w,c
 38776  006E40  144A               	andwf	btemp+11,w,c
 38777  006E42  0900               	iorlw	0
 38778  006E44  B4D8               	btfsc	status,2,c
 38779  006E46  D002               	goto	u56790
 38780  006E48  8484               	bsf	3972,2,c	;volatile
 38781  006E4A  D001               	goto	u56805
 38782  006E4C                     u56790:
 38783  006E4C  9484               	bcf	3972,2,c	;volatile
 38784  006E4E                     u56805:
 38785                           
 38786                           ;midi.c: 93: _delay((unsigned long)((50)*(20000000/4000000.0)));
 38787  006E4E  0E53               	movlw	83
 38788  006E50                     u67167:
 38789  006E50  2EE8               	decfsz	wreg,f,c
 38790  006E52  D7FE               	bra	u67167
 38791  006E54  F000               	nop	
 38792                           
 38793                           ;midi.c: 95: RA5 = 1;
 38794  006E56  8A80               	bsf	3968,5,c	;volatile
 38795                           
 38796                           ;midi.c: 96: _delay((unsigned long)((50)*(20000000/4000000.0)));
 38797  006E58  0E53               	movlw	83
 38798  006E5A                     u67177:
 38799  006E5A  2EE8               	decfsz	wreg,f,c
 38800  006E5C  D7FE               	bra	u67177
 38801  006E5E  F000               	nop	
 38802                           
 38803                           ;midi.c: 98: RA5 = 0;
 38804  006E60  9A80               	bcf	3968,5,c	;volatile
 38805                           
 38806                           ;midi.c: 99: _delay((unsigned long)((50)*(20000000/4000000.0)));
 38807  006E62  0E53               	movlw	83
 38808  006E64                     u67187:
 38809  006E64  2EE8               	decfsz	wreg,f,c
 38810  006E66  D7FE               	bra	u67187
 38811  006E68  F000               	nop	
 38812                           
 38813                           ;stkvar	sendUSB@ii @ sp[(-5)+0]
 38814  006E6A  0EFB               	movlw	-5
 38815  006E6C  2AE3               	incf	plusw1,f,c
 38816                           
 38817                           ;stkvar	sendUSB@ii @ sp[(-5)+0]
 38818  006E6E  0EFB               	movlw	-5
 38819  006E70  CFE3 F03F          	movff	plusw1,btemp
 38820  006E74  0E07               	movlw	7
 38821  006E76  643F               	cpfsgt	btemp,c
 38822  006E78  D7C6               	goto	l31170
 38823                           
 38824                           ;stkvar	sendUSB@i @ sp[(-5)+1]
 38825  006E7A  0EFC               	movlw	-4
 38826  006E7C  2AE3               	incf	plusw1,f,c
 38827                           
 38828                           ;stkvar	sendUSB@i @ sp[(-5)+1]
 38829  006E7E  0EFC               	movlw	-4
 38830  006E80  CFE3 F03F          	movff	plusw1,btemp
 38831  006E84  0E02               	movlw	2
 38832  006E86  643F               	cpfsgt	btemp,c
 38833  006E88  D7BC               	goto	l31164
 38834                           
 38835                           ;midi.c: 100: }
 38836                           ;midi.c: 101: }
 38837                           ;midi.c: 103: RB2 = 0;
 38838  006E8A  9481               	bcf	3969,2,c	;volatile
 38839                           
 38840                           ;midi.c: 104: _delay((unsigned long)((50)*(20000000/4000000.0)));
 38841  006E8C  0E53               	movlw	83
 38842  006E8E                     u67197:
 38843  006E8E  2EE8               	decfsz	wreg,f,c
 38844  006E90  D7FE               	bra	u67197
 38845  006E92  F000               	nop	
 38846                           
 38847                           ; _sendUSB: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsi
      +                          ze = 3, vargsize = 0
 38848  006E94  0EF8               	movlw	248
 38849  006E96  26E1               	addwf	fsr1l,f,c
 38850  006E98  0EFF               	movlw	255
 38851  006E9A  22E2               	addwfc	fsr1h,f,c
 38852  006E9C  0012               	return		;funcret
 38853  006E9E                     __end_of_sendUSB:
 38854                           	opt stack 0
 38855                           tblptru	equ	0xFF8
 38856                           tblptrh	equ	0xFF7
 38857                           tblptrl	equ	0xFF6
 38858                           tablat	equ	0xFF5
 38859                           prodh	equ	0xFF4
 38860                           prodl	equ	0xFF3
 38861                           intcon	equ	0xFF2
 38862                           intcon2	equ	0xFF1
 38863                           indf0	equ	0xFEF
 38864                           postinc0	equ	0xFEE
 38865                           postdec0	equ	0xFED
 38866                           fsr0h	equ	0xFEA
 38867                           fsr0l	equ	0xFE9
 38868                           wreg	equ	0xFE8
 38869                           postinc1	equ	0xFE6
 38870                           postdec1	equ	0xFE5
 38871                           plusw1	equ	0xFE3
 38872                           fsr1h	equ	0xFE2
 38873                           fsr1l	equ	0xFE1
 38874                           indf2	equ	0xFDF
 38875                           postinc2	equ	0xFDE
 38876                           postdec2	equ	0xFDD
 38877                           plusw2	equ	0xFDB
 38878                           fsr2h	equ	0xFDA
 38879                           fsr2l	equ	0xFD9
 38880                           status	equ	0xFD8
 38881                           
 38882 ;; *************** function _sendOut *****************
 38883 ;; Defined at:
 38884 ;;		line 35 in file "midi.c"
 38885 ;; Parameters:    Size  Location     Type
 38886 ;;  message1        1  [STACK] unsigned char 
 38887 ;;  message2        1  [STACK] unsigned char 
 38888 ;;  message3        1  [STACK] unsigned char 
 38889 ;; Auto vars:     Size  Location     Type
 38890 ;;  i               1  [STACK] unsigned char 
 38891 ;;  midiMessage     3  [STACK] unsigned char [3]
 38892 ;;  number_of_mi    1  [STACK] unsigned char 
 38893 ;; Return value:  Size  Location     Type
 38894 ;;                  1  [STACK] void 
 38895 ;; Registers used:
 38896 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+11
 38897 ;; Tracked objects:
 38898 ;;		On entry : 0/0
 38899 ;;		On exit  : 0/0
 38900 ;;		Unchanged: 0/0
 38901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38905 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38906 ;;Total ram usage:        0 bytes
 38907 ;; Hardware stack levels used:    1
 38908 ;; Hardware stack levels required when called:    5
 38909 ;; This function calls:
 38910 ;;		Nothing
 38911 ;; This function is called by:
 38912 ;;		_noteOff
 38913 ;;		_noteOn
 38914 ;;		_noteOffDrum
 38915 ;;		_noteOnDrum
 38916 ;;		_controlChange
 38917 ;;		_pitchBend
 38918 ;;		_programChange
 38919 ;; This function uses a reentrant model
 38920 ;;
 38921                           
 38922                           	psect	text111
 38923  006CCC                     __ptext111:
 38924                           	opt stack 0
 38925  006CCC                     _sendOut:
 38926                           	opt stack 0
 38927                           
 38928                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
 38929  006CCC  0E05               	movlw	5
 38930  006CCE  26E1               	addwf	fsr1l,f,c
 38931  006CD0  0E00               	movlw	0
 38932  006CD2  22E2               	addwfc	fsr1h,f,c
 38933                           
 38934                           ;midi.c: 37: unsigned char midiMessage[3];
 38935                           ;midi.c: 38: unsigned char number_of_midi_message_bytes;
 38936                           ;midi.c: 40: midiMessage[0]=message1;
 38937                           ;stkvar	sendOut@message1 @ sp[(-5)+-1]
 38938                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 38939                           
 38940                           ;incstack = 0
 38941  006CD4  0EFA               	movlw	-6
 38942  006CD6  CFE3 F03F          	movff	plusw1,btemp
 38943  006CDA  0EFC               	movlw	-4
 38944  006CDC  C03F  FFE3         	movff	btemp,plusw1
 38945                           
 38946                           ;midi.c: 41: midiMessage[1]=message2;
 38947                           ;stkvar	sendOut@message2 @ sp[(-5)+-2]
 38948                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 38949  006CE0  0EFD               	movlw	253
 38950  006CE2  24E1               	addwf	fsr1l,w,c
 38951  006CE4  6ED9               	movwf	fsr2l,c
 38952  006CE6  0EFF               	movlw	255
 38953  006CE8  20E2               	addwfc	fsr1h,w,c
 38954  006CEA  6EDA               	movwf	fsr2h,c
 38955  006CEC  0EF9               	movlw	-7
 38956  006CEE  CFE3 FFDF          	movff	plusw1,indf2
 38957                           
 38958                           ;midi.c: 42: midiMessage[2]=message3;
 38959                           ;stkvar	sendOut@message3 @ sp[(-5)+-3]
 38960                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 38961  006CF2  0EFE               	movlw	254
 38962  006CF4  24E1               	addwf	fsr1l,w,c
 38963  006CF6  6ED9               	movwf	fsr2l,c
 38964  006CF8  0EFF               	movlw	255
 38965  006CFA  20E2               	addwfc	fsr1h,w,c
 38966  006CFC  6EDA               	movwf	fsr2h,c
 38967  006CFE  0EF8               	movlw	-8
 38968  006D00  CFE3 FFDF          	movff	plusw1,indf2
 38969                           
 38970                           ;midi.c: 52: if(CONTROL_CHANGE_IS_BEING_SENT == 1) {
 38971  006D04  A206               	btfss	_CONTROL_CHANGE_IS_BEING_SENT/(0+8),_CONTROL_CHANGE_IS_BEING_SENT& (0+7),c
 38972  006D06  D018               	goto	l31130
 38973                           
 38974                           ;midi.c: 53: midiMessage[0] = channel | control_change;
 38975  006D08  C03E  F04A         	movff	_channel,btemp+11
 38976  006D0C  0EB0               	movlw	176
 38977  006D0E  124A               	iorwf	btemp+11,f,c
 38978                           
 38979                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 38980  006D10  0EFC               	movlw	-4
 38981  006D12  C04A  FFE3         	movff	btemp+11,plusw1
 38982                           
 38983                           ;midi.c: 54: midiMessage[1] = GLOBAL_CC_NUMBER;
 38984                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 38985  006D16  0EFD               	movlw	253
 38986  006D18  24E1               	addwf	fsr1l,w,c
 38987  006D1A  6ED9               	movwf	fsr2l,c
 38988  006D1C  0EFF               	movlw	255
 38989  006D1E  20E2               	addwfc	fsr1h,w,c
 38990  006D20  6EDA               	movwf	fsr2h,c
 38991  006D22  C0F4  FFDF         	movff	_GLOBAL_CC_NUMBER,indf2
 38992                           
 38993                           ;midi.c: 55: midiMessage[2] = GLOBAL_CC_VALUE;
 38994                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 38995  006D26  0EFE               	movlw	254
 38996  006D28  24E1               	addwf	fsr1l,w,c
 38997  006D2A  6ED9               	movwf	fsr2l,c
 38998  006D2C  0EFF               	movlw	255
 38999  006D2E  20E2               	addwfc	fsr1h,w,c
 39000  006D30  6EDA               	movwf	fsr2h,c
 39001  006D32  C180  FFDF         	movff	_GLOBAL_CC_VALUE,indf2
 39002                           
 39003                           ;midi.c: 56: CONTROL_CHANGE_IS_BEING_SENT = 0;
 39004  006D36  9206               	bcf	_CONTROL_CHANGE_IS_BEING_SENT/(0+8),_CONTROL_CHANGE_IS_BEING_SENT& (0+7),c
 39005  006D38                     l31130:
 39006                           
 39007                           ;midi.c: 57: }
 39008                           ;midi.c: 60: if(midiMessage[0] == (channel | program_change)){number_of_midi_message_byt
      +                          es = 2;}
 39009                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 39010  006D38  C03E  F04A         	movff	_channel,btemp+11
 39011  006D3C  0EC0               	movlw	192
 39012  006D3E  124A               	iorwf	btemp+11,f,c
 39013  006D40  0EFC               	movlw	-4
 39014  006D42  50E3               	movf	plusw1,w,c
 39015  006D44  184A               	xorwf	btemp+11,w,c
 39016  006D46  A4D8               	btfss	status,2,c
 39017  006D48  D003               	goto	l31134
 39018                           
 39019                           ;stkvar	sendOut@number_of_midi_message_bytes @ sp[(-5)+4]
 39020  006D4A  0EFF               	movlw	-1
 39021  006D4C  6AE3               	clrf	plusw1,c
 39022  006D4E  D003               	goto	L21
 39023  006D50                     l31134:
 39024                           
 39025                           ;midi.c: 61: else{number_of_midi_message_bytes = 3;}
 39026                           ;stkvar	sendOut@number_of_midi_message_bytes @ sp[(-5)+4]
 39027  006D50  0EFF               	movlw	-1
 39028  006D52  6AE3               	clrf	plusw1,c
 39029  006D54  80E3               	bsf	plusw1,0,c
 39030  006D56                     L21:
 39031  006D56  82E3               	bsf	plusw1,1,c	;indir
 39032                           
 39033                           ;midi.c: 64: for(unsigned char i=0;i<number_of_midi_message_bytes;i++){
 39034                           ;stkvar	sendOut@i @ sp[(-5)+0]
 39035  006D58  0EFB               	movlw	-5
 39036  006D5A  6AE3               	clrf	plusw1,c
 39037  006D5C  D01D               	goto	l31144
 39038  006D5E                     l31138:
 39039                           
 39040                           ;midi.c: 65: TXREG = midiMessage[i];
 39041                           ;stkvar	sendOut@i @ sp[(-5)+0]
 39042  006D5E  0EFB               	movlw	-5
 39043  006D60  CFE3 F04A          	movff	plusw1,btemp+11
 39044                           
 39045                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 39046  006D64  0EFC               	movlw	252
 39047  006D66  24E1               	addwf	fsr1l,w,c
 39048  006D68  6E40               	movwf	btemp+1,c
 39049  006D6A  0EFF               	movlw	255
 39050  006D6C  20E2               	addwfc	fsr1h,w,c
 39051  006D6E  6E41               	movwf	btemp+2,c
 39052  006D70  504A               	movf	btemp+11,w,c
 39053  006D72  2440               	addwf	btemp+1,w,c
 39054  006D74  6ED9               	movwf	fsr2l,c
 39055  006D76  0E00               	movlw	0
 39056  006D78  2041               	addwfc	btemp+2,w,c
 39057  006D7A  6EDA               	movwf	fsr2h,c
 39058  006D7C  50DF               	movf	indf2,w,c
 39059  006D7E  6EAD               	movwf	4013,c	;volatile
 39060  006D80                     l466:
 39061  006D80  A2AC               	btfss	4012,1,c	;volatile
 39062  006D82  D7FE               	goto	l466
 39063                           
 39064                           ;midi.c: 68: TXIF = 0;
 39065  006D84  989E               	bcf	3998,4,c	;volatile
 39066                           
 39067                           ;midi.c: 69: _delay((unsigned long)((320)*(20000000/4000000.0)));
 39068  006D86  0EE4               	movlw	228
 39069  006D88                     u67207:
 39070  006D88  D000               	nop2	
 39071  006D8A  D000               	nop2	
 39072  006D8C  2EE8               	decfsz	wreg,f,c
 39073  006D8E  D7FC               	bra	u67207
 39074  006D90  D000               	nop2	
 39075  006D92  D000               	nop2	
 39076                           
 39077                           ;stkvar	sendOut@i @ sp[(-5)+0]
 39078  006D94  0EFB               	movlw	-5
 39079  006D96  2AE3               	incf	plusw1,f,c
 39080  006D98                     l31144:
 39081                           
 39082                           ;stkvar	sendOut@number_of_midi_message_bytes @ sp[(-5)+4]
 39083                           ;stkvar	sendOut@i @ sp[(-5)+0]
 39084  006D98  50E1               	movf	fsr1l,w,c
 39085  006D9A  0FFB               	addlw	-5
 39086  006D9C  6ED9               	movwf	fsr2l,c
 39087  006D9E  50E2               	movf	fsr1h,w,c
 39088  006DA0  6EDA               	movwf	fsr2h,c
 39089  006DA2  0EFF               	movlw	255
 39090  006DA4  22DA               	addwfc	fsr2h,f,c
 39091  006DA6  0EFF               	movlw	-1
 39092  006DA8  50E3               	movf	plusw1,w,c
 39093  006DAA  5CDE               	subwf	postinc2,w,c
 39094  006DAC  A0D8               	btfss	status,0,c
 39095  006DAE  D7D7               	goto	l31138
 39096                           
 39097                           ; _sendOut: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsi
      +                          ze = 3, vargsize = 0
 39098  006DB0  0EF8               	movlw	248
 39099  006DB2  26E1               	addwf	fsr1l,f,c
 39100  006DB4  0EFF               	movlw	255
 39101  006DB6  22E2               	addwfc	fsr1h,f,c
 39102  006DB8  0012               	return		;funcret
 39103  006DBA                     __end_of_sendOut:
 39104                           	opt stack 0
 39105                           tblptru	equ	0xFF8
 39106                           tblptrh	equ	0xFF7
 39107                           tblptrl	equ	0xFF6
 39108                           tablat	equ	0xFF5
 39109                           prodh	equ	0xFF4
 39110                           prodl	equ	0xFF3
 39111                           intcon	equ	0xFF2
 39112                           intcon2	equ	0xFF1
 39113                           indf0	equ	0xFEF
 39114                           postinc0	equ	0xFEE
 39115                           postdec0	equ	0xFED
 39116                           fsr0h	equ	0xFEA
 39117                           fsr0l	equ	0xFE9
 39118                           wreg	equ	0xFE8
 39119                           postinc1	equ	0xFE6
 39120                           postdec1	equ	0xFE5
 39121                           plusw1	equ	0xFE3
 39122                           fsr1h	equ	0xFE2
 39123                           fsr1l	equ	0xFE1
 39124                           indf2	equ	0xFDF
 39125                           postinc2	equ	0xFDE
 39126                           postdec2	equ	0xFDD
 39127                           plusw2	equ	0xFDB
 39128                           fsr2h	equ	0xFDA
 39129                           fsr2l	equ	0xFD9
 39130                           status	equ	0xFD8
 39131                           
 39132 ;; *************** function ___lbmod *****************
 39133 ;; Defined at:
 39134 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lbmod.c"
 39135 ;; Parameters:    Size  Location     Type
 39136 ;;  dividend        1  [STACK] unsigned char 
 39137 ;;  divisor         1  [STACK] unsigned char 
 39138 ;; Auto vars:     Size  Location     Type
 39139 ;;  rem             1  [STACK] unsigned char 
 39140 ;;  counter         1  [STACK] unsigned char 
 39141 ;; Return value:  Size  Location     Type
 39142 ;;                  1  [STACK] unsigned char 
 39143 ;; Registers used:
 39144 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11
 39145 ;; Tracked objects:
 39146 ;;		On entry : 0/1
 39147 ;;		On exit  : 0/0
 39148 ;;		Unchanged: 0/0
 39149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 39150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39154 ;;Total ram usage:        0 bytes
 39155 ;; Hardware stack levels used:    1
 39156 ;; Hardware stack levels required when called:    5
 39157 ;; This function calls:
 39158 ;;		Nothing
 39159 ;; This function is called by:
 39160 ;;		_controlChange
 39161 ;;		_pitchBend
 39162 ;;		_programChange
 39163 ;;		_menu_lcd
 39164 ;;		_Function_A_1
 39165 ;;		_Function_A_2
 39166 ;;		_Function_A_3
 39167 ;;		_Function_A
 39168 ;;		_Function_B
 39169 ;;		_Function_C_1
 39170 ;;		_Function_C_2
 39171 ;;		_Function_C_3
 39172 ;;		_Function_C
 39173 ;;		_Function_D_1
 39174 ;;		_Function_D_3
 39175 ;;		_Function_D_4
 39176 ;;		_Function_D_5
 39177 ;;		_Function_D
 39178 ;;		_Function_E
 39179 ;;		_Function_G_1
 39180 ;;		_Function_G_2
 39181 ;;		_Function_G_4
 39182 ;;		_Function_G
 39183 ;;		_Function_H
 39184 ;;		_Function_H_4
 39185 ;;		_Function_H_5
 39186 ;;		_Function_H_6
 39187 ;;		_Function_H_8
 39188 ;;		_Function_H_9_1
 39189 ;;		_Function_H_9_2
 39190 ;;		_Function_H_9_3
 39191 ;;		_Function_H_9_4
 39192 ;;		_Function_H_9
 39193 ;;		_ISR
 39194 ;; This function uses a reentrant model
 39195 ;;
 39196                           
 39197                           	psect	text112
 39198  0082C6                     __ptext112:
 39199                           	opt stack 0
 39200  0082C6                     ___lbmod:
 39201                           	opt stack 0
 39202                           
 39203                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
 39204  0082C6  52E6               	movf	postinc1,f,c
 39205  0082C8  52E6               	movf	postinc1,f,c
 39206                           
 39207                           ;stkvar	___lbmod@counter @ sp[(-2)+1]
 39208                           
 39209                           ;incstack = 0
 39210  0082CA  0EFF               	movlw	-1
 39211  0082CC  6AE3               	clrf	plusw1,c
 39212  0082CE  86E3               	bsf	plusw1,3,c
 39213                           
 39214                           ;stkvar	___lbmod@rem @ sp[(-2)+0]
 39215  0082D0  0EFE               	movlw	-2
 39216  0082D2  6AE3               	clrf	plusw1,c
 39217  0082D4                     l33640:
 39218                           
 39219                           ;stkvar	___lbmod@dividend @ sp[(-2)+-1]
 39220  0082D4  0EFD               	movlw	-3
 39221  0082D6  CFE3 F04A          	movff	plusw1,btemp+11
 39222                           
 39223                           ;stkvar	___lbmod@rem @ sp[(-2)+0]
 39224  0082DA  0EFE               	movlw	-2
 39225  0082DC  CFE3 F049          	movff	plusw1,btemp+10
 39226  0082E0  90D8               	bcf	status,0,c
 39227  0082E2  344A               	rlcf	btemp+11,w,c
 39228  0082E4  3449               	rlcf	btemp+10,w,c
 39229  0082E6  6E4A               	movwf	btemp+11,c
 39230                           
 39231                           ;stkvar	___lbmod@rem @ sp[(-2)+0]
 39232  0082E8  0EFE               	movlw	-2
 39233  0082EA  C04A  FFE3         	movff	btemp+11,plusw1
 39234                           
 39235                           ;stkvar	___lbmod@dividend @ sp[(-2)+-1]
 39236  0082EE  50E1               	movf	fsr1l,w,c
 39237  0082F0  0FFD               	addlw	-3
 39238  0082F2  6ED9               	movwf	fsr2l,c
 39239  0082F4  50E2               	movf	fsr1h,w,c
 39240  0082F6  6EDA               	movwf	fsr2h,c
 39241  0082F8  0EFF               	movlw	255
 39242  0082FA  22DA               	addwfc	fsr2h,f,c
 39243  0082FC  90D8               	bcf	status,0,c
 39244  0082FE  36DF               	rlcf	indf2,f,c
 39245                           
 39246                           ;stkvar	___lbmod@divisor @ sp[(-2)+-2]
 39247                           ;stkvar	___lbmod@rem @ sp[(-2)+0]
 39248  008300  50E1               	movf	fsr1l,w,c
 39249  008302  0FFE               	addlw	-2
 39250  008304  6ED9               	movwf	fsr2l,c
 39251  008306  50E2               	movf	fsr1h,w,c
 39252  008308  6EDA               	movwf	fsr2h,c
 39253  00830A  0EFF               	movlw	255
 39254  00830C  22DA               	addwfc	fsr2h,f,c
 39255  00830E  0EFC               	movlw	-4
 39256  008310  50E3               	movf	plusw1,w,c
 39257  008312  5CDE               	subwf	postinc2,w,c
 39258  008314  A0D8               	btfss	status,0,c
 39259  008316  D00C               	goto	l33648
 39260                           
 39261                           ;stkvar	___lbmod@divisor @ sp[(-2)+-2]
 39262  008318  0EFC               	movlw	-4
 39263  00831A  CFE3 F04A          	movff	plusw1,btemp+11
 39264                           
 39265                           ;stkvar	___lbmod@rem @ sp[(-2)+0]
 39266  00831E  50E1               	movf	fsr1l,w,c
 39267  008320  0FFE               	addlw	-2
 39268  008322  6ED9               	movwf	fsr2l,c
 39269  008324  50E2               	movf	fsr1h,w,c
 39270  008326  6EDA               	movwf	fsr2h,c
 39271  008328  0EFF               	movlw	255
 39272  00832A  22DA               	addwfc	fsr2h,f,c
 39273  00832C  504A               	movf	btemp+11,w,c
 39274  00832E  5EDF               	subwf	indf2,f,c
 39275  008330                     l33648:
 39276                           
 39277                           ;stkvar	___lbmod@counter @ sp[(-2)+1]
 39278  008330  0EFF               	movlw	-1
 39279  008332  50E3               	movf	plusw1,w,c
 39280  008334  6E3F               	movwf	btemp,c
 39281  008336  0E01               	movlw	1
 39282  008338  5E3F               	subwf	btemp,f,c
 39283  00833A  0EFF               	movlw	-1
 39284  00833C  C03F  FFE3         	movff	btemp,plusw1
 39285  008340  A4D8               	btfss	status,2,c
 39286  008342  D7C8               	goto	l33640
 39287                           
 39288                           ;stkvar	___lbmod@rem @ sp[(-2)+0]
 39289  008344  0EFE               	movlw	-2
 39290  008346  CFE3 F03F          	movff	plusw1,btemp
 39291                           
 39292                           ; ___lbmod: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsi
      +                          ze = 2, vargsize = 0
 39293  00834A  52E5               	movf	postdec1,f,c
 39294  00834C  52E5               	movf	postdec1,f,c
 39295  00834E  52E5               	movf	postdec1,f,c
 39296  008350  52E5               	movf	postdec1,f,c
 39297  008352  0012               	return		;funcret
 39298  008354                     __end_of___lbmod:
 39299                           	opt stack 0
 39300                           tblptru	equ	0xFF8
 39301                           tblptrh	equ	0xFF7
 39302                           tblptrl	equ	0xFF6
 39303                           tablat	equ	0xFF5
 39304                           prodh	equ	0xFF4
 39305                           prodl	equ	0xFF3
 39306                           intcon	equ	0xFF2
 39307                           intcon2	equ	0xFF1
 39308                           indf0	equ	0xFEF
 39309                           postinc0	equ	0xFEE
 39310                           postdec0	equ	0xFED
 39311                           fsr0h	equ	0xFEA
 39312                           fsr0l	equ	0xFE9
 39313                           wreg	equ	0xFE8
 39314                           postinc1	equ	0xFE6
 39315                           postdec1	equ	0xFE5
 39316                           plusw1	equ	0xFE3
 39317                           fsr1h	equ	0xFE2
 39318                           fsr1l	equ	0xFE1
 39319                           indf2	equ	0xFDF
 39320                           postinc2	equ	0xFDE
 39321                           postdec2	equ	0xFDD
 39322                           plusw2	equ	0xFDB
 39323                           fsr2h	equ	0xFDA
 39324                           fsr2l	equ	0xFD9
 39325                           status	equ	0xFD8
 39326                           
 39327 ;; *************** function _map *****************
 39328 ;; Defined at:
 39329 ;;		line 29 in file "potentiometers.c"
 39330 ;; Parameters:    Size  Location     Type
 39331 ;;  x               4   14[BANK0 ] long 
 39332 ;;  in_min          4   18[BANK0 ] long 
 39333 ;;  in_max          4   22[BANK0 ] long 
 39334 ;;  out_min         4   26[BANK0 ] long 
 39335 ;;  out_max         4   30[BANK0 ] long 
 39336 ;; Auto vars:     Size  Location     Type
 39337 ;;		None
 39338 ;; Return value:  Size  Location     Type
 39339 ;;                  4   14[BANK0 ] long 
 39340 ;; Registers used:
 39341 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, cstack
 39342 ;; Tracked objects:
 39343 ;;		On entry : 0/0
 39344 ;;		On exit  : 0/0
 39345 ;;		Unchanged: 0/0
 39346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 39347 ;;      Params:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39349 ;;      Temps:          0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39350 ;;      Totals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39351 ;;Total ram usage:       40 bytes
 39352 ;; Hardware stack levels used:    1
 39353 ;; Hardware stack levels required when called:    6
 39354 ;; This function calls:
 39355 ;;		___aldiv
 39356 ;;		___lmul
 39357 ;; This function is called by:
 39358 ;;		_readPotentiometers
 39359 ;; This function uses a non-reentrant model
 39360 ;;
 39361                           
 39362                           	psect	text113
 39363  0066DE                     __ptext113:
 39364                           	opt stack 0
 39365  0066DE                     _map:
 39366                           	opt stack 19
 39367                           
 39368                           ;potentiometers.c: 30: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + o
      +                          ut_min;
 39369                           
 39370                           ;incstack = 0
 39371  0066DE  C07A  F082         	movff	map@out_min,??_map
 39372  0066E2  C07B  F083         	movff	map@out_min+1,??_map+1
 39373  0066E6  C07C  F084         	movff	map@out_min+2,??_map+2
 39374  0066EA  C07D  F085         	movff	map@out_min+3,??_map+3
 39375  0066EE  0100               	movlb	0	; () banked
 39376  0066F0  1F82               	comf	??_map& (0+255),f,b
 39377  0066F2  1F83               	comf	(??_map+1)& (0+255),f,b
 39378  0066F4  1F84               	comf	(??_map+2)& (0+255),f,b
 39379  0066F6  1F85               	comf	(??_map+3)& (0+255),f,b
 39380  0066F8  2B82               	incf	??_map& (0+255),f,b
 39381  0066FA  0E00               	movlw	0
 39382  0066FC  2383               	addwfc	(??_map+1)& (0+255),f,b
 39383  0066FE  2384               	addwfc	(??_map+2)& (0+255),f,b
 39384  006700  2385               	addwfc	(??_map+3)& (0+255),f,b
 39385  006702  517E               	movf	map@out_max& (0+255),w,b
 39386  006704  2582               	addwf	??_map& (0+255),w,b
 39387  006706  6F86               	movwf	(??_map+4)& (0+255),b
 39388  006708  517F               	movf	(map@out_max+1)& (0+255),w,b
 39389  00670A  2183               	addwfc	(??_map+1)& (0+255),w,b
 39390  00670C  6F87               	movwf	(??_map+5)& (0+255),b
 39391  00670E  5180               	movf	(map@out_max+2)& (0+255),w,b
 39392  006710  2184               	addwfc	(??_map+2)& (0+255),w,b
 39393  006712  6F88               	movwf	(??_map+6)& (0+255),b
 39394  006714  5181               	movf	(map@out_max+3)& (0+255),w,b
 39395  006716  2185               	addwfc	(??_map+3)& (0+255),w,b
 39396  006718  6F89               	movwf	(??_map+7)& (0+255),b
 39397  00671A  C086  FFE6         	movff	??_map+4,postinc1
 39398  00671E  C087  FFE6         	movff	??_map+5,postinc1
 39399  006722  C088  FFE6         	movff	??_map+6,postinc1
 39400  006726  C089  FFE6         	movff	??_map+7,postinc1
 39401  00672A  C072  F08A         	movff	map@in_min,??_map+8
 39402  00672E  C073  F08B         	movff	map@in_min+1,??_map+9
 39403  006732  C074  F08C         	movff	map@in_min+2,??_map+10
 39404  006736  C075  F08D         	movff	map@in_min+3,??_map+11
 39405  00673A  1F8A               	comf	(??_map+8)& (0+255),f,b
 39406  00673C  1F8B               	comf	(??_map+9)& (0+255),f,b
 39407  00673E  1F8C               	comf	(??_map+10)& (0+255),f,b
 39408  006740  1F8D               	comf	(??_map+11)& (0+255),f,b
 39409  006742  2B8A               	incf	(??_map+8)& (0+255),f,b
 39410  006744  0E00               	movlw	0
 39411  006746  238B               	addwfc	(??_map+9)& (0+255),f,b
 39412  006748  238C               	addwfc	(??_map+10)& (0+255),f,b
 39413  00674A  238D               	addwfc	(??_map+11)& (0+255),f,b
 39414  00674C  516E               	movf	map@x& (0+255),w,b
 39415  00674E  258A               	addwf	(??_map+8)& (0+255),w,b
 39416  006750  6F8E               	movwf	(??_map+12)& (0+255),b
 39417  006752  516F               	movf	(map@x+1)& (0+255),w,b
 39418  006754  218B               	addwfc	(??_map+9)& (0+255),w,b
 39419  006756  6F8F               	movwf	(??_map+13)& (0+255),b
 39420  006758  5170               	movf	(map@x+2)& (0+255),w,b
 39421  00675A  218C               	addwfc	(??_map+10)& (0+255),w,b
 39422  00675C  6F90               	movwf	(??_map+14)& (0+255),b
 39423  00675E  5171               	movf	(map@x+3)& (0+255),w,b
 39424  006760  218D               	addwfc	(??_map+11)& (0+255),w,b
 39425  006762  6F91               	movwf	(??_map+15)& (0+255),b
 39426  006764  C08E  FFE6         	movff	??_map+12,postinc1
 39427  006768  C08F  FFE6         	movff	??_map+13,postinc1
 39428  00676C  C090  FFE6         	movff	??_map+14,postinc1
 39429  006770  C091  FFE6         	movff	??_map+15,postinc1
 39430  006774  ECA7  F03A         	call	___lmul	;wreg free
 39431  006778  C03F  F060         	movff	btemp,___aldiv@dividend
 39432  00677C  C040  F061         	movff	btemp+1,___aldiv@dividend+1
 39433  006780  C041  F062         	movff	btemp+2,___aldiv@dividend+2
 39434  006784  C042  F063         	movff	btemp+3,___aldiv@dividend+3
 39435  006788  C072  F092         	movff	map@in_min,??_map+16
 39436  00678C  C073  F093         	movff	map@in_min+1,??_map+17
 39437  006790  C074  F094         	movff	map@in_min+2,??_map+18
 39438  006794  C075  F095         	movff	map@in_min+3,??_map+19
 39439  006798  0100               	movlb	0	; () banked
 39440  00679A  1F92               	comf	(??_map+16)& (0+255),f,b
 39441  00679C  1F93               	comf	(??_map+17)& (0+255),f,b
 39442  00679E  1F94               	comf	(??_map+18)& (0+255),f,b
 39443  0067A0  1F95               	comf	(??_map+19)& (0+255),f,b
 39444  0067A2  2B92               	incf	(??_map+16)& (0+255),f,b
 39445  0067A4  0E00               	movlw	0
 39446  0067A6  2393               	addwfc	(??_map+17)& (0+255),f,b
 39447  0067A8  2394               	addwfc	(??_map+18)& (0+255),f,b
 39448  0067AA  2395               	addwfc	(??_map+19)& (0+255),f,b
 39449  0067AC  5176               	movf	map@in_max& (0+255),w,b
 39450  0067AE  2592               	addwf	(??_map+16)& (0+255),w,b
 39451  0067B0  6F64               	movwf	___aldiv@divisor& (0+255),b
 39452  0067B2  5177               	movf	(map@in_max+1)& (0+255),w,b
 39453  0067B4  2193               	addwfc	(??_map+17)& (0+255),w,b
 39454  0067B6  6F65               	movwf	(___aldiv@divisor+1)& (0+255),b
 39455  0067B8  5178               	movf	(map@in_max+2)& (0+255),w,b
 39456  0067BA  2194               	addwfc	(??_map+18)& (0+255),w,b
 39457  0067BC  6F66               	movwf	(___aldiv@divisor+2)& (0+255),b
 39458  0067BE  5179               	movf	(map@in_max+3)& (0+255),w,b
 39459  0067C0  2195               	addwfc	(??_map+19)& (0+255),w,b
 39460  0067C2  6F67               	movwf	(___aldiv@divisor+3)& (0+255),b
 39461  0067C4  EC40  F03A         	call	___aldiv	;wreg free
 39462  0067C8  0100               	movlb	0	; () banked
 39463  0067CA  517A               	movf	map@out_min& (0+255),w,b
 39464  0067CC  2560               	addwf	?___aldiv& (0+255),w,b
 39465  0067CE  6F6E               	movwf	?_map& (0+255),b
 39466  0067D0  517B               	movf	(map@out_min+1)& (0+255),w,b
 39467  0067D2  2161               	addwfc	(?___aldiv+1)& (0+255),w,b
 39468  0067D4  6F6F               	movwf	(?_map+1)& (0+255),b
 39469  0067D6  517C               	movf	(map@out_min+2)& (0+255),w,b
 39470  0067D8  2162               	addwfc	(?___aldiv+2)& (0+255),w,b
 39471  0067DA  6F70               	movwf	(?_map+2)& (0+255),b
 39472  0067DC  517D               	movf	(map@out_min+3)& (0+255),w,b
 39473  0067DE  2163               	addwfc	(?___aldiv+3)& (0+255),w,b
 39474  0067E0  6F71               	movwf	(?_map+3)& (0+255),b
 39475  0067E2  0012               	return	
 39476  0067E4                     __end_of_map:
 39477                           	opt stack 0
 39478                           tblptru	equ	0xFF8
 39479                           tblptrh	equ	0xFF7
 39480                           tblptrl	equ	0xFF6
 39481                           tablat	equ	0xFF5
 39482                           prodh	equ	0xFF4
 39483                           prodl	equ	0xFF3
 39484                           intcon	equ	0xFF2
 39485                           intcon2	equ	0xFF1
 39486                           indf0	equ	0xFEF
 39487                           postinc0	equ	0xFEE
 39488                           postdec0	equ	0xFED
 39489                           fsr0h	equ	0xFEA
 39490                           fsr0l	equ	0xFE9
 39491                           wreg	equ	0xFE8
 39492                           postinc1	equ	0xFE6
 39493                           postdec1	equ	0xFE5
 39494                           plusw1	equ	0xFE3
 39495                           fsr1h	equ	0xFE2
 39496                           fsr1l	equ	0xFE1
 39497                           indf2	equ	0xFDF
 39498                           postinc2	equ	0xFDE
 39499                           postdec2	equ	0xFDD
 39500                           plusw2	equ	0xFDB
 39501                           fsr2h	equ	0xFDA
 39502                           fsr2l	equ	0xFD9
 39503                           status	equ	0xFD8
 39504                           
 39505 ;; *************** function ___lmul *****************
 39506 ;; Defined at:
 39507 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 39508 ;; Parameters:    Size  Location     Type
 39509 ;;  multiplier      4  [STACK] unsigned long 
 39510 ;;  multiplicand    4  [STACK] unsigned long 
 39511 ;; Auto vars:     Size  Location     Type
 39512 ;;  product         4  [STACK] unsigned long 
 39513 ;; Return value:  Size  Location     Type
 39514 ;;                  4  [STACK] unsigned long 
 39515 ;; Registers used:
 39516 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3
 39517 ;; Tracked objects:
 39518 ;;		On entry : 0/0
 39519 ;;		On exit  : 0/0
 39520 ;;		Unchanged: 0/0
 39521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 39522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39526 ;;Total ram usage:        0 bytes
 39527 ;; Hardware stack levels used:    1
 39528 ;; Hardware stack levels required when called:    5
 39529 ;; This function calls:
 39530 ;;		Nothing
 39531 ;; This function is called by:
 39532 ;;		_map
 39533 ;;		_rand
 39534 ;; This function uses a reentrant model
 39535 ;;
 39536                           
 39537                           	psect	text114
 39538  00754E                     __ptext114:
 39539                           	opt stack 0
 39540  00754E                     ___lmul:
 39541                           	opt stack 0
 39542                           
 39543                           ; BSR set to: 0
 39544                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 8, argsize = 8 var
      +                          gsize = 0, retsize = 0
 39545  00754E  52E6               	movf	postinc1,f,c
 39546  007550  52E6               	movf	postinc1,f,c
 39547  007552  52E6               	movf	postinc1,f,c
 39548  007554  52E6               	movf	postinc1,f,c
 39549                           
 39550                           ;stkvar	___lmul@product @ sp[(-4)+0]
 39551                           
 39552                           ;incstack = 0
 39553  007556  0EFC               	movlw	-4
 39554  007558  6AE3               	clrf	plusw1,c
 39555  00755A  0EFD               	movlw	-3
 39556  00755C  6AE3               	clrf	plusw1,c
 39557  00755E  0EFE               	movlw	-2
 39558  007560  6AE3               	clrf	plusw1,c
 39559  007562  0EFF               	movlw	-1
 39560  007564  6AE3               	clrf	plusw1,c
 39561  007566                     l5654:
 39562                           
 39563                           ;stkvar	___lmul@multiplier @ sp[(-4)+-4]
 39564  007566  0EF8               	movlw	-8
 39565  007568  A0E3               	btfss	plusw1,0,c
 39566  00756A  D024               	goto	l31778
 39567                           
 39568                           ;stkvar	___lmul@multiplicand @ sp[(-4)+-8]
 39569                           ;stkvar	___lmul@product @ sp[(-4)+0]
 39570  00756C  0EFC               	movlw	-4
 39571  00756E  50E3               	movf	plusw1,w,c
 39572  007570  6E3F               	movwf	btemp,c
 39573  007572  0EF4               	movlw	-12
 39574  007574  50E3               	movf	plusw1,w,c
 39575  007576  263F               	addwf	btemp,f,c
 39576  007578  0EFC               	movlw	-4
 39577  00757A  C03F  FFE3         	movff	btemp,plusw1
 39578  00757E  0EFD               	movlw	-3
 39579  007580  50E3               	movf	plusw1,w,c
 39580  007582  6E3F               	movwf	btemp,c
 39581  007584  0EF5               	movlw	-11
 39582  007586  50E3               	movf	plusw1,w,c
 39583  007588  223F               	addwfc	btemp,f,c
 39584  00758A  0EFD               	movlw	-3
 39585  00758C  C03F  FFE3         	movff	btemp,plusw1
 39586  007590  0EFE               	movlw	-2
 39587  007592  50E3               	movf	plusw1,w,c
 39588  007594  6E3F               	movwf	btemp,c
 39589  007596  0EF6               	movlw	-10
 39590  007598  50E3               	movf	plusw1,w,c
 39591  00759A  223F               	addwfc	btemp,f,c
 39592  00759C  0EFE               	movlw	-2
 39593  00759E  C03F  FFE3         	movff	btemp,plusw1
 39594  0075A2  0EFF               	movlw	-1
 39595  0075A4  50E3               	movf	plusw1,w,c
 39596  0075A6  6E3F               	movwf	btemp,c
 39597  0075A8  0EF7               	movlw	-9
 39598  0075AA  50E3               	movf	plusw1,w,c
 39599  0075AC  223F               	addwfc	btemp,f,c
 39600  0075AE  0EFF               	movlw	-1
 39601  0075B0  C03F  FFE3         	movff	btemp,plusw1
 39602  0075B4                     l31778:
 39603                           
 39604                           ;stkvar	___lmul@multiplicand @ sp[(-4)+-8]
 39605  0075B4  90D8               	bcf	status,0,c
 39606  0075B6  0EF4               	movlw	-12
 39607  0075B8  36E3               	rlcf	plusw1,f,c
 39608  0075BA  0EF5               	movlw	-11
 39609  0075BC  36E3               	rlcf	plusw1,f,c
 39610  0075BE  0EF6               	movlw	-10
 39611  0075C0  36E3               	rlcf	plusw1,f,c
 39612  0075C2  0EF7               	movlw	-9
 39613  0075C4  36E3               	rlcf	plusw1,f,c
 39614                           
 39615                           ;stkvar	___lmul@multiplier @ sp[(-4)+-4]
 39616  0075C6  90D8               	bcf	status,0,c
 39617  0075C8  0EFB               	movlw	-5
 39618  0075CA  32E3               	rrcf	plusw1,f,c
 39619  0075CC  0EFA               	movlw	-6
 39620  0075CE  32E3               	rrcf	plusw1,f,c
 39621  0075D0  0EF9               	movlw	-7
 39622  0075D2  32E3               	rrcf	plusw1,f,c
 39623  0075D4  0EF8               	movlw	-8
 39624  0075D6  32E3               	rrcf	plusw1,f,c
 39625                           
 39626                           ;stkvar	___lmul@multiplier @ sp[(-4)+-4]
 39627  0075D8  0EF8               	movlw	-8
 39628  0075DA  50E3               	movf	plusw1,w,c
 39629  0075DC  E1C4               	bnz	l5654
 39630  0075DE  0EF9               	movlw	-7
 39631  0075E0  50E3               	movf	plusw1,w,c
 39632  0075E2  E1C1               	bnz	l5654
 39633  0075E4  0EFA               	movlw	-6
 39634  0075E6  50E3               	movf	plusw1,w,c
 39635  0075E8  E1BE               	bnz	l5654
 39636  0075EA  0EFB               	movlw	-5
 39637  0075EC  50E3               	movf	plusw1,w,c
 39638  0075EE  A4D8               	btfss	status,2,c
 39639  0075F0  D7BA               	goto	l5654
 39640                           
 39641                           ;stkvar	___lmul@product @ sp[(-4)+0]
 39642  0075F2  0EFC               	movlw	-4
 39643  0075F4  CFE3 F03F          	movff	plusw1,btemp
 39644  0075F8  0EFD               	movlw	-3
 39645  0075FA  CFE3 F040          	movff	plusw1,btemp+1
 39646  0075FE  0EFE               	movlw	-2
 39647  007600  CFE3 F041          	movff	plusw1,btemp+2
 39648  007604  0EFF               	movlw	-1
 39649  007606  CFE3 F042          	movff	plusw1,btemp+3
 39650                           
 39651                           ; ___lmul: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 8, argsiz
      +                          e = 8, vargsize = 0
 39652  00760A  0EF4               	movlw	244
 39653  00760C  26E1               	addwf	fsr1l,f,c
 39654  00760E  0EFF               	movlw	255
 39655  007610  22E2               	addwfc	fsr1h,f,c
 39656  007612  0012               	return		;funcret
 39657  007614                     __end_of___lmul:
 39658                           	opt stack 0
 39659                           tblptru	equ	0xFF8
 39660                           tblptrh	equ	0xFF7
 39661                           tblptrl	equ	0xFF6
 39662                           tablat	equ	0xFF5
 39663                           prodh	equ	0xFF4
 39664                           prodl	equ	0xFF3
 39665                           intcon	equ	0xFF2
 39666                           intcon2	equ	0xFF1
 39667                           indf0	equ	0xFEF
 39668                           postinc0	equ	0xFEE
 39669                           postdec0	equ	0xFED
 39670                           fsr0h	equ	0xFEA
 39671                           fsr0l	equ	0xFE9
 39672                           wreg	equ	0xFE8
 39673                           postinc1	equ	0xFE6
 39674                           postdec1	equ	0xFE5
 39675                           plusw1	equ	0xFE3
 39676                           fsr1h	equ	0xFE2
 39677                           fsr1l	equ	0xFE1
 39678                           indf2	equ	0xFDF
 39679                           postinc2	equ	0xFDE
 39680                           postdec2	equ	0xFDD
 39681                           plusw2	equ	0xFDB
 39682                           fsr2h	equ	0xFDA
 39683                           fsr2l	equ	0xFD9
 39684                           status	equ	0xFD8
 39685                           
 39686 ;; *************** function ___aldiv *****************
 39687 ;; Defined at:
 39688 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
 39689 ;; Parameters:    Size  Location     Type
 39690 ;;  dividend        4    0[BANK0 ] long 
 39691 ;;  divisor         4    4[BANK0 ] long 
 39692 ;; Auto vars:     Size  Location     Type
 39693 ;;  quotient        4   10[BANK0 ] long 
 39694 ;;  sign            1    9[BANK0 ] unsigned char 
 39695 ;;  counter         1    8[BANK0 ] unsigned char 
 39696 ;; Return value:  Size  Location     Type
 39697 ;;                  4    0[BANK0 ] long 
 39698 ;; Registers used:
 39699 ;;		wreg, status,2, status,0
 39700 ;; Tracked objects:
 39701 ;;		On entry : 0/0
 39702 ;;		On exit  : 0/0
 39703 ;;		Unchanged: 0/0
 39704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 39705 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39706 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39708 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39709 ;;Total ram usage:       14 bytes
 39710 ;; Hardware stack levels used:    1
 39711 ;; Hardware stack levels required when called:    5
 39712 ;; This function calls:
 39713 ;;		Nothing
 39714 ;; This function is called by:
 39715 ;;		_map
 39716 ;; This function uses a non-reentrant model
 39717 ;;
 39718                           
 39719                           	psect	text115
 39720  007480                     __ptext115:
 39721                           	opt stack 0
 39722  007480                     ___aldiv:
 39723                           	opt stack 19
 39724                           
 39725                           ;incstack = 0
 39726  007480  0E00               	movlw	0
 39727  007482  0100               	movlb	0	; () banked
 39728  007484  6F69               	movwf	___aldiv@sign& (0+255),b
 39729                           
 39730                           ; BSR set to: 0
 39731  007486  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 39732  007488  D00A               	goto	l5698
 39733                           
 39734                           ; BSR set to: 0
 39735  00748A  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
 39736  00748C  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
 39737  00748E  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
 39738  007490  6D64               	negf	___aldiv@divisor& (0+255),b
 39739  007492  0E00               	movlw	0
 39740  007494  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
 39741  007496  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
 39742  007498  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
 39743                           
 39744                           ; BSR set to: 0
 39745  00749A  0E01               	movlw	1
 39746  00749C  6F69               	movwf	___aldiv@sign& (0+255),b
 39747  00749E                     l5698:
 39748                           
 39749                           ; BSR set to: 0
 39750                           
 39751                           ; BSR set to: 0
 39752  00749E  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
 39753  0074A0  D00A               	goto	l5699
 39754                           
 39755                           ; BSR set to: 0
 39756  0074A2  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
 39757  0074A4  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
 39758  0074A6  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
 39759  0074A8  6D60               	negf	___aldiv@dividend& (0+255),b
 39760  0074AA  0E00               	movlw	0
 39761  0074AC  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
 39762  0074AE  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
 39763  0074B0  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
 39764                           
 39765                           ; BSR set to: 0
 39766  0074B2  0E01               	movlw	1
 39767  0074B4  1B69               	xorwf	___aldiv@sign& (0+255),f,b
 39768  0074B6                     l5699:
 39769                           
 39770                           ; BSR set to: 0
 39771                           
 39772                           ; BSR set to: 0
 39773  0074B6  0E00               	movlw	0
 39774  0074B8  6F6A               	movwf	___aldiv@quotient& (0+255),b
 39775  0074BA  0E00               	movlw	0
 39776  0074BC  6F6B               	movwf	(___aldiv@quotient+1)& (0+255),b
 39777  0074BE  0E00               	movlw	0
 39778  0074C0  6F6C               	movwf	(___aldiv@quotient+2)& (0+255),b
 39779  0074C2  0E00               	movlw	0
 39780  0074C4  6F6D               	movwf	(___aldiv@quotient+3)& (0+255),b
 39781                           
 39782                           ; BSR set to: 0
 39783  0074C6  5164               	movf	___aldiv@divisor& (0+255),w,b
 39784  0074C8  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
 39785  0074CA  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
 39786  0074CC  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
 39787  0074CE  B4D8               	btfsc	status,2,c
 39788  0074D0  D02A               	goto	l5706
 39789                           
 39790                           ; BSR set to: 0
 39791  0074D2  0E01               	movlw	1
 39792  0074D4  6F68               	movwf	___aldiv@counter& (0+255),b
 39793  0074D6  D006               	goto	l5701
 39794  0074D8                     
 39795                           ; BSR set to: 0
 39796                           
 39797                           ; BSR set to: 0
 39798  0074D8  90D8               	bcf	status,0,c
 39799  0074DA  3764               	rlcf	___aldiv@divisor& (0+255),f,b
 39800  0074DC  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
 39801  0074DE  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
 39802  0074E0  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
 39803  0074E2  2B68               	incf	___aldiv@counter& (0+255),f,b
 39804  0074E4                     l5701:
 39805                           
 39806                           ; BSR set to: 0
 39807                           
 39808                           ; BSR set to: 0
 39809  0074E4  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 39810  0074E6  D7F8               	goto	l5702
 39811  0074E8                     u47920:
 39812                           
 39813                           ; BSR set to: 0
 39814                           
 39815                           ; BSR set to: 0
 39816                           
 39817                           ; BSR set to: 0
 39818  0074E8  90D8               	bcf	status,0,c
 39819  0074EA  376A               	rlcf	___aldiv@quotient& (0+255),f,b
 39820  0074EC  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 39821  0074EE  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 39822  0074F0  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 39823                           
 39824                           ; BSR set to: 0
 39825  0074F2  5164               	movf	___aldiv@divisor& (0+255),w,b
 39826  0074F4  5D60               	subwf	___aldiv@dividend& (0+255),w,b
 39827  0074F6  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
 39828  0074F8  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
 39829  0074FA  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
 39830  0074FC  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
 39831  0074FE  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
 39832  007500  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
 39833  007502  A0D8               	btfss	status,0,c
 39834  007504  D009               	goto	l5705
 39835                           
 39836                           ; BSR set to: 0
 39837  007506  5164               	movf	___aldiv@divisor& (0+255),w,b
 39838  007508  5F60               	subwf	___aldiv@dividend& (0+255),f,b
 39839  00750A  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
 39840  00750C  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
 39841  00750E  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
 39842  007510  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
 39843  007512  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
 39844  007514  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
 39845                           
 39846                           ; BSR set to: 0
 39847  007516  816A               	bsf	___aldiv@quotient& (0+255),0,b
 39848  007518                     l5705:
 39849                           
 39850                           ; BSR set to: 0
 39851                           
 39852                           ; BSR set to: 0
 39853  007518  90D8               	bcf	status,0,c
 39854  00751A  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
 39855  00751C  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
 39856  00751E  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
 39857  007520  3364               	rrcf	___aldiv@divisor& (0+255),f,b
 39858                           
 39859                           ; BSR set to: 0
 39860  007522  2F68               	decfsz	___aldiv@counter& (0+255),f,b
 39861  007524  D7E1               	goto	u47920
 39862  007526                     l5706:
 39863                           
 39864                           ; BSR set to: 0
 39865                           
 39866                           ; BSR set to: 0
 39867                           
 39868                           ; BSR set to: 0
 39869  007526  5169               	movf	___aldiv@sign& (0+255),w,b
 39870  007528  B4D8               	btfsc	status,2,c
 39871  00752A  D008               	goto	l5707
 39872                           
 39873                           ; BSR set to: 0
 39874  00752C  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
 39875  00752E  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
 39876  007530  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
 39877  007532  6D6A               	negf	___aldiv@quotient& (0+255),b
 39878  007534  0E00               	movlw	0
 39879  007536  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 39880  007538  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 39881  00753A  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 39882  00753C                     l5707:
 39883                           
 39884                           ; BSR set to: 0
 39885                           
 39886                           ; BSR set to: 0
 39887  00753C  C06A  F060         	movff	___aldiv@quotient,?___aldiv
 39888  007540  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
 39889  007544  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
 39890  007548  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
 39891  00754C  0012               	return	
 39892  00754E                     __end_of___aldiv:
 39893                           	opt stack 0
 39894                           tblptru	equ	0xFF8
 39895                           tblptrh	equ	0xFF7
 39896                           tblptrl	equ	0xFF6
 39897                           tablat	equ	0xFF5
 39898                           prodh	equ	0xFF4
 39899                           prodl	equ	0xFF3
 39900                           intcon	equ	0xFF2
 39901                           intcon2	equ	0xFF1
 39902                           indf0	equ	0xFEF
 39903                           postinc0	equ	0xFEE
 39904                           postdec0	equ	0xFED
 39905                           fsr0h	equ	0xFEA
 39906                           fsr0l	equ	0xFE9
 39907                           wreg	equ	0xFE8
 39908                           postinc1	equ	0xFE6
 39909                           postdec1	equ	0xFE5
 39910                           plusw1	equ	0xFE3
 39911                           fsr1h	equ	0xFE2
 39912                           fsr1l	equ	0xFE1
 39913                           indf2	equ	0xFDF
 39914                           postinc2	equ	0xFDE
 39915                           postdec2	equ	0xFDD
 39916                           plusw2	equ	0xFDB
 39917                           fsr2h	equ	0xFDA
 39918                           fsr2l	equ	0xFD9
 39919                           status	equ	0xFD8
 39920                           
 39921 ;; *************** function ___xxtofl *****************
 39922 ;; Defined at:
 39923 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\xxtofl.c"
 39924 ;; Parameters:    Size  Location     Type
 39925 ;;  sign            1    wreg     unsigned char 
 39926 ;;  val             4    0[BANK0 ] long 
 39927 ;; Auto vars:     Size  Location     Type
 39928 ;;  sign            1    8[BANK0 ] unsigned char 
 39929 ;;  arg             4   10[BANK0 ] unsigned long 
 39930 ;;  exp             1    9[BANK0 ] unsigned char 
 39931 ;; Return value:  Size  Location     Type
 39932 ;;                  4    0[BANK0 ] unsigned char 
 39933 ;; Registers used:
 39934 ;;		wreg, status,2, status,0
 39935 ;; Tracked objects:
 39936 ;;		On entry : 0/0
 39937 ;;		On exit  : 0/0
 39938 ;;		Unchanged: 0/0
 39939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 39940 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39941 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39942 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39943 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39944 ;;Total ram usage:       14 bytes
 39945 ;; Hardware stack levels used:    1
 39946 ;; Hardware stack levels required when called:    5
 39947 ;; This function calls:
 39948 ;;		Nothing
 39949 ;; This function is called by:
 39950 ;;		_calculate_alpha
 39951 ;;		_readPotentiometers
 39952 ;;		_calculate_pulse_length
 39953 ;; This function uses a non-reentrant model
 39954 ;;
 39955                           
 39956                           	psect	text116
 39957  005FE8                     __ptext116:
 39958                           	opt stack 0
 39959  005FE8                     ___xxtofl:
 39960                           	opt stack 22
 39961                           
 39962                           ; BSR set to: 0
 39963                           ;incstack = 0
 39964                           ;___xxtofl@sign stored from wreg
 39965  005FE8  0100               	movlb	0	; () banked
 39966  005FEA  6F68               	movwf	___xxtofl@sign& (0+255),b
 39967  005FEC  0100               	movlb	0	; () banked
 39968  005FEE  5168               	movf	___xxtofl@sign& (0+255),w,b
 39969  005FF0  A4D8               	btfss	status,2,c
 39970                           
 39971                           ; BSR set to: 0
 39972  005FF2  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 39973  005FF4  D01A               	goto	l6204
 39974                           
 39975                           ; BSR set to: 0
 39976  005FF6  C060  F064         	movff	___xxtofl@val,??___xxtofl
 39977  005FFA  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 39978  005FFE  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 39979  006002  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 39980  006006  1F64               	comf	??___xxtofl& (0+255),f,b
 39981  006008  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 39982  00600A  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 39983  00600C  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 39984  00600E  2B64               	incf	??___xxtofl& (0+255),f,b
 39985  006010  0E00               	movlw	0
 39986  006012  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 39987  006014  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 39988  006016  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 39989  006018  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 39990  00601C  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 39991  006020  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 39992  006024  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 39993  006028  D008               	goto	l6205
 39994  00602A                     l6204:
 39995                           
 39996                           ; BSR set to: 0
 39997  00602A  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 39998  00602E  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 39999  006032  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 40000  006036  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 40001  00603A                     l6205:
 40002                           
 40003                           ; BSR set to: 0
 40004                           
 40005                           ; BSR set to: 0
 40006  00603A  5160               	movf	___xxtofl@val& (0+255),w,b
 40007  00603C  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 40008  00603E  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 40009  006040  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 40010  006042  A4D8               	btfss	status,2,c
 40011  006044  D009               	goto	l6206
 40012                           
 40013                           ; BSR set to: 0
 40014  006046  0E00               	movlw	0
 40015  006048  6F60               	movwf	?___xxtofl& (0+255),b
 40016  00604A  0E00               	movlw	0
 40017  00604C  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 40018  00604E  0E00               	movlw	0
 40019  006050  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 40020  006052  0E00               	movlw	0
 40021  006054  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 40022                           
 40023                           ; BSR set to: 0
 40024  006056  0012               	return	
 40025  006058                     l6206:
 40026                           
 40027                           ; BSR set to: 0
 40028                           
 40029                           ; BSR set to: 0
 40030  006058  0E96               	movlw	150
 40031  00605A  6F69               	movwf	___xxtofl@exp& (0+255),b
 40032  00605C  D006               	goto	l6208
 40033  00605E                     
 40034                           ; BSR set to: 0
 40035                           
 40036                           ; BSR set to: 0
 40037  00605E  2B69               	incf	___xxtofl@exp& (0+255),f,b
 40038  006060  90D8               	bcf	status,0,c
 40039  006062  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 40040  006064  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 40041  006066  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 40042  006068  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 40043  00606A                     l6208:
 40044                           
 40045                           ; BSR set to: 0
 40046                           
 40047                           ; BSR set to: 0
 40048  00606A  0E00               	movlw	0
 40049  00606C  156A               	andwf	___xxtofl@arg& (0+255),w,b
 40050  00606E  6F64               	movwf	??___xxtofl& (0+255),b
 40051  006070  0E00               	movlw	0
 40052  006072  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 40053  006074  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 40054  006076  0E00               	movlw	0
 40055  006078  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 40056  00607A  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 40057  00607C  0EFE               	movlw	254
 40058  00607E  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 40059  006080  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 40060  006082  5164               	movf	??___xxtofl& (0+255),w,b
 40061  006084  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 40062  006086  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 40063  006088  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 40064  00608A  B4D8               	btfsc	status,2,c
 40065  00608C  D00D               	goto	l6211
 40066  00608E  D7E7               	goto	l6209
 40067  006090                     
 40068                           ; BSR set to: 0
 40069                           
 40070                           ; BSR set to: 0
 40071  006090  2B69               	incf	___xxtofl@exp& (0+255),f,b
 40072                           
 40073                           ; BSR set to: 0
 40074  006092  0E01               	movlw	1
 40075  006094  276A               	addwf	___xxtofl@arg& (0+255),f,b
 40076  006096  0E00               	movlw	0
 40077  006098  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 40078  00609A  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 40079  00609C  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 40080                           
 40081                           ; BSR set to: 0
 40082  00609E  90D8               	bcf	status,0,c
 40083  0060A0  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 40084  0060A2  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 40085  0060A4  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 40086  0060A6  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 40087  0060A8                     l6211:
 40088                           
 40089                           ; BSR set to: 0
 40090  0060A8  0E00               	movlw	0
 40091  0060AA  156A               	andwf	___xxtofl@arg& (0+255),w,b
 40092  0060AC  6F64               	movwf	??___xxtofl& (0+255),b
 40093  0060AE  0E00               	movlw	0
 40094  0060B0  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 40095  0060B2  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 40096  0060B4  0E00               	movlw	0
 40097  0060B6  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 40098  0060B8  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 40099  0060BA  0EFF               	movlw	255
 40100  0060BC  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 40101  0060BE  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 40102  0060C0  5164               	movf	??___xxtofl& (0+255),w,b
 40103  0060C2  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 40104  0060C4  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 40105  0060C6  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 40106  0060C8  B4D8               	btfsc	status,2,c
 40107  0060CA  D007               	goto	l6214
 40108  0060CC  D7E1               	goto	l6212
 40109  0060CE                     
 40110                           ; BSR set to: 0
 40111                           
 40112                           ; BSR set to: 0
 40113  0060CE  0769               	decf	___xxtofl@exp& (0+255),f,b
 40114  0060D0  90D8               	bcf	status,0,c
 40115  0060D2  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 40116  0060D4  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 40117  0060D6  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 40118  0060D8  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 40119  0060DA                     l6214:
 40120                           
 40121                           ; BSR set to: 0
 40122                           
 40123                           ; BSR set to: 0
 40124  0060DA  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 40125  0060DC  D003               	goto	u52240
 40126                           
 40127                           ; BSR set to: 0
 40128  0060DE  0E02               	movlw	2
 40129  0060E0  6169               	cpfslt	___xxtofl@exp& (0+255),b
 40130  0060E2  D7F5               	goto	l6215
 40131  0060E4                     u52240:
 40132                           
 40133                           ; BSR set to: 0
 40134                           
 40135                           ; BSR set to: 0
 40136  0060E4  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 40137  0060E6  D008               	goto	l6219
 40138                           
 40139                           ; BSR set to: 0
 40140  0060E8  0EFF               	movlw	255
 40141  0060EA  176A               	andwf	___xxtofl@arg& (0+255),f,b
 40142  0060EC  0EFF               	movlw	255
 40143  0060EE  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 40144  0060F0  0E7F               	movlw	127
 40145  0060F2  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 40146  0060F4  0EFF               	movlw	255
 40147  0060F6  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 40148  0060F8                     l6219:
 40149                           
 40150                           ; BSR set to: 0
 40151  0060F8  90D8               	bcf	status,0,c
 40152  0060FA  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 40153  0060FC  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 40154  006100  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 40155  006102  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 40156  006104  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 40157  006106  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 40158  00610A  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 40159  00610C  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 40160  00610E  6B64               	clrf	??___xxtofl& (0+255),b
 40161  006110  5164               	movf	??___xxtofl& (0+255),w,b
 40162  006112  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 40163  006114  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 40164  006116  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 40165  006118  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 40166  00611A  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 40167  00611C  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 40168  00611E  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 40169                           
 40170                           ; BSR set to: 0
 40171  006120  5168               	movf	___xxtofl@sign& (0+255),w,b
 40172  006122  A4D8               	btfss	status,2,c
 40173                           
 40174                           ; BSR set to: 0
 40175  006124  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 40176  006126  D001               	goto	l6220
 40177                           
 40178                           ; BSR set to: 0
 40179  006128  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 40180  00612A                     l6220:
 40181                           
 40182                           ; BSR set to: 0
 40183                           
 40184                           ; BSR set to: 0
 40185  00612A  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 40186  00612E  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 40187  006132  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 40188  006136  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 40189  00613A  0012               	return	
 40190  00613C                     __end_of___xxtofl:
 40191                           	opt stack 0
 40192                           tblptru	equ	0xFF8
 40193                           tblptrh	equ	0xFF7
 40194                           tblptrl	equ	0xFF6
 40195                           tablat	equ	0xFF5
 40196                           prodh	equ	0xFF4
 40197                           prodl	equ	0xFF3
 40198                           intcon	equ	0xFF2
 40199                           intcon2	equ	0xFF1
 40200                           indf0	equ	0xFEF
 40201                           postinc0	equ	0xFEE
 40202                           postdec0	equ	0xFED
 40203                           fsr0h	equ	0xFEA
 40204                           fsr0l	equ	0xFE9
 40205                           wreg	equ	0xFE8
 40206                           postinc1	equ	0xFE6
 40207                           postdec1	equ	0xFE5
 40208                           plusw1	equ	0xFE3
 40209                           fsr1h	equ	0xFE2
 40210                           fsr1l	equ	0xFE1
 40211                           indf2	equ	0xFDF
 40212                           postinc2	equ	0xFDE
 40213                           postdec2	equ	0xFDD
 40214                           plusw2	equ	0xFDB
 40215                           fsr2h	equ	0xFDA
 40216                           fsr2l	equ	0xFD9
 40217                           status	equ	0xFD8
 40218                           
 40219 ;; *************** function ___fltol *****************
 40220 ;; Defined at:
 40221 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fltol.c"
 40222 ;; Parameters:    Size  Location     Type
 40223 ;;  f1              4   88[BANK0 ] unsigned char 
 40224 ;; Auto vars:     Size  Location     Type
 40225 ;;  exp1            1   97[BANK0 ] unsigned char 
 40226 ;;  sign1           1   96[BANK0 ] unsigned char 
 40227 ;; Return value:  Size  Location     Type
 40228 ;;                  4   88[BANK0 ] long 
 40229 ;; Registers used:
 40230 ;;		wreg, status,2, status,0
 40231 ;; Tracked objects:
 40232 ;;		On entry : 0/0
 40233 ;;		On exit  : 0/0
 40234 ;;		Unchanged: 0/0
 40235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40236 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40237 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40238 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40239 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40240 ;;Total ram usage:       10 bytes
 40241 ;; Hardware stack levels used:    1
 40242 ;; Hardware stack levels required when called:    5
 40243 ;; This function calls:
 40244 ;;		Nothing
 40245 ;; This function is called by:
 40246 ;;		_readPotentiometers
 40247 ;;		_calculate_pulse_length
 40248 ;; This function uses a non-reentrant model
 40249 ;;
 40250                           
 40251                           	psect	text117
 40252  006F7C                     __ptext117:
 40253                           	opt stack 0
 40254  006F7C                     ___fltol:
 40255                           	opt stack 22
 40256                           
 40257                           ; BSR set to: 0
 40258                           ;incstack = 0
 40259  006F7C  0100               	movlb	0	; () banked
 40260  006F7E  35BA               	rlcf	(___fltol@f1+2)& (0+255),w,b
 40261  006F80  35BB               	rlcf	(___fltol@f1+3)& (0+255),w,b
 40262  006F82  6FC1               	movwf	___fltol@exp1& (0+255),b
 40263  006F84  51C1               	movf	___fltol@exp1& (0+255),w,b
 40264  006F86  A4D8               	btfss	status,2,c
 40265  006F88  D009               	goto	l5872
 40266                           
 40267                           ; BSR set to: 0
 40268  006F8A  0E00               	movlw	0
 40269  006F8C  6FB8               	movwf	?___fltol& (0+255),b
 40270  006F8E  0E00               	movlw	0
 40271  006F90  6FB9               	movwf	(?___fltol+1)& (0+255),b
 40272  006F92  0E00               	movlw	0
 40273  006F94  6FBA               	movwf	(?___fltol+2)& (0+255),b
 40274  006F96  0E00               	movlw	0
 40275  006F98  6FBB               	movwf	(?___fltol+3)& (0+255),b
 40276                           
 40277                           ; BSR set to: 0
 40278  006F9A  0012               	return	
 40279  006F9C                     l5872:
 40280                           
 40281                           ; BSR set to: 0
 40282                           
 40283                           ; BSR set to: 0
 40284  006F9C  C0B8  F0BC         	movff	___fltol@f1,??___fltol
 40285  006FA0  C0B9  F0BD         	movff	___fltol@f1+1,??___fltol+1
 40286  006FA4  C0BA  F0BE         	movff	___fltol@f1+2,??___fltol+2
 40287  006FA8  C0BB  F0BF         	movff	___fltol@f1+3,??___fltol+3
 40288  006FAC  0E20               	movlw	32
 40289  006FAE  D005               	goto	u52120
 40290  006FB0                     u52125:
 40291  006FB0  90D8               	bcf	status,0,c
 40292  006FB2  33BF               	rrcf	(??___fltol+3)& (0+255),f,b
 40293  006FB4  33BE               	rrcf	(??___fltol+2)& (0+255),f,b
 40294  006FB6  33BD               	rrcf	(??___fltol+1)& (0+255),f,b
 40295  006FB8  33BC               	rrcf	??___fltol& (0+255),f,b
 40296  006FBA                     u52120:
 40297  006FBA  2EE8               	decfsz	wreg,f,c
 40298  006FBC  D7F9               	goto	u52125
 40299  006FBE  51BC               	movf	??___fltol& (0+255),w,b
 40300  006FC0  6FC0               	movwf	___fltol@sign1& (0+255),b
 40301                           
 40302                           ; BSR set to: 0
 40303  006FC2  8FBA               	bsf	(___fltol@f1+2)& (0+255),7,b
 40304                           
 40305                           ; BSR set to: 0
 40306  006FC4  0EFF               	movlw	255
 40307  006FC6  17B8               	andwf	___fltol@f1& (0+255),f,b
 40308  006FC8  0EFF               	movlw	255
 40309  006FCA  17B9               	andwf	(___fltol@f1+1)& (0+255),f,b
 40310  006FCC  0EFF               	movlw	255
 40311  006FCE  17BA               	andwf	(___fltol@f1+2)& (0+255),f,b
 40312  006FD0  0E00               	movlw	0
 40313  006FD2  17BB               	andwf	(___fltol@f1+3)& (0+255),f,b
 40314                           
 40315                           ; BSR set to: 0
 40316  006FD4  0E96               	movlw	150
 40317  006FD6  5FC1               	subwf	___fltol@exp1& (0+255),f,b
 40318                           
 40319                           ; BSR set to: 0
 40320  006FD8  AFC1               	btfss	___fltol@exp1& (0+255),7,b
 40321  006FDA  D016               	goto	l5874
 40322                           
 40323                           ; BSR set to: 0
 40324  006FDC  51C1               	movf	___fltol@exp1& (0+255),w,b
 40325  006FDE  0A80               	xorlw	128
 40326  006FE0  0F97               	addlw	151
 40327  006FE2  B0D8               	btfsc	status,0,c
 40328  006FE4  D009               	goto	l5875
 40329                           
 40330                           ; BSR set to: 0
 40331  006FE6  0E00               	movlw	0
 40332  006FE8  6FB8               	movwf	?___fltol& (0+255),b
 40333  006FEA  0E00               	movlw	0
 40334  006FEC  6FB9               	movwf	(?___fltol+1)& (0+255),b
 40335  006FEE  0E00               	movlw	0
 40336  006FF0  6FBA               	movwf	(?___fltol+2)& (0+255),b
 40337  006FF2  0E00               	movlw	0
 40338  006FF4  6FBB               	movwf	(?___fltol+3)& (0+255),b
 40339                           
 40340                           ; BSR set to: 0
 40341  006FF6  0012               	return	
 40342  006FF8                     l5875:
 40343                           
 40344                           ; BSR set to: 0
 40345                           
 40346                           ; BSR set to: 0
 40347                           
 40348                           ; BSR set to: 0
 40349  006FF8  90D8               	bcf	status,0,c
 40350  006FFA  33BB               	rrcf	(___fltol@f1+3)& (0+255),f,b
 40351  006FFC  33BA               	rrcf	(___fltol@f1+2)& (0+255),f,b
 40352  006FFE  33B9               	rrcf	(___fltol@f1+1)& (0+255),f,b
 40353  007000  33B8               	rrcf	___fltol@f1& (0+255),f,b
 40354                           
 40355                           ; BSR set to: 0
 40356  007002  3FC1               	incfsz	___fltol@exp1& (0+255),f,b
 40357  007004  D7F9               	goto	l5875
 40358                           
 40359                           ; BSR set to: 0
 40360  007006  D015               	goto	u52160
 40361  007008                     l5874:
 40362                           
 40363                           ; BSR set to: 0
 40364                           
 40365                           ; BSR set to: 0
 40366  007008  0E1F               	movlw	31
 40367  00700A  65C1               	cpfsgt	___fltol@exp1& (0+255),b
 40368  00700C  D00F               	goto	l5880
 40369                           
 40370                           ; BSR set to: 0
 40371  00700E  0E00               	movlw	0
 40372  007010  6FB8               	movwf	?___fltol& (0+255),b
 40373  007012  0E00               	movlw	0
 40374  007014  6FB9               	movwf	(?___fltol+1)& (0+255),b
 40375  007016  0E00               	movlw	0
 40376  007018  6FBA               	movwf	(?___fltol+2)& (0+255),b
 40377  00701A  0E00               	movlw	0
 40378  00701C  6FBB               	movwf	(?___fltol+3)& (0+255),b
 40379                           
 40380                           ; BSR set to: 0
 40381  00701E  0012               	return	
 40382  007020                     
 40383                           ; BSR set to: 0
 40384                           
 40385                           ; BSR set to: 0
 40386  007020  90D8               	bcf	status,0,c
 40387  007022  37B8               	rlcf	___fltol@f1& (0+255),f,b
 40388  007024  37B9               	rlcf	(___fltol@f1+1)& (0+255),f,b
 40389  007026  37BA               	rlcf	(___fltol@f1+2)& (0+255),f,b
 40390  007028  37BB               	rlcf	(___fltol@f1+3)& (0+255),f,b
 40391  00702A  07C1               	decf	___fltol@exp1& (0+255),f,b
 40392  00702C                     l5880:
 40393                           
 40394                           ; BSR set to: 0
 40395                           
 40396                           ; BSR set to: 0
 40397  00702C  51C1               	movf	___fltol@exp1& (0+255),w,b
 40398  00702E  A4D8               	btfss	status,2,c
 40399  007030  D7F7               	goto	l5881
 40400  007032                     u52160:
 40401                           
 40402                           ; BSR set to: 0
 40403                           
 40404                           ; BSR set to: 0
 40405                           
 40406                           ; BSR set to: 0
 40407  007032  51C0               	movf	___fltol@sign1& (0+255),w,b
 40408  007034  B4D8               	btfsc	status,2,c
 40409  007036  D008               	goto	l5883
 40410                           
 40411                           ; BSR set to: 0
 40412  007038  1FBB               	comf	(___fltol@f1+3)& (0+255),f,b
 40413  00703A  1FBA               	comf	(___fltol@f1+2)& (0+255),f,b
 40414  00703C  1FB9               	comf	(___fltol@f1+1)& (0+255),f,b
 40415  00703E  6DB8               	negf	___fltol@f1& (0+255),b
 40416  007040  0E00               	movlw	0
 40417  007042  23B9               	addwfc	(___fltol@f1+1)& (0+255),f,b
 40418  007044  23BA               	addwfc	(___fltol@f1+2)& (0+255),f,b
 40419  007046  23BB               	addwfc	(___fltol@f1+3)& (0+255),f,b
 40420  007048                     l5883:
 40421                           
 40422                           ; BSR set to: 0
 40423                           
 40424                           ; BSR set to: 0
 40425  007048  C0B8  F0B8         	movff	___fltol@f1,?___fltol
 40426  00704C  C0B9  F0B9         	movff	___fltol@f1+1,?___fltol+1
 40427  007050  C0BA  F0BA         	movff	___fltol@f1+2,?___fltol+2
 40428  007054  C0BB  F0BB         	movff	___fltol@f1+3,?___fltol+3
 40429  007058  0012               	return	
 40430  00705A                     __end_of___fltol:
 40431                           	opt stack 0
 40432                           tblptru	equ	0xFF8
 40433                           tblptrh	equ	0xFF7
 40434                           tblptrl	equ	0xFF6
 40435                           tablat	equ	0xFF5
 40436                           prodh	equ	0xFF4
 40437                           prodl	equ	0xFF3
 40438                           intcon	equ	0xFF2
 40439                           intcon2	equ	0xFF1
 40440                           indf0	equ	0xFEF
 40441                           postinc0	equ	0xFEE
 40442                           postdec0	equ	0xFED
 40443                           fsr0h	equ	0xFEA
 40444                           fsr0l	equ	0xFE9
 40445                           wreg	equ	0xFE8
 40446                           postinc1	equ	0xFE6
 40447                           postdec1	equ	0xFE5
 40448                           plusw1	equ	0xFE3
 40449                           fsr1h	equ	0xFE2
 40450                           fsr1l	equ	0xFE1
 40451                           indf2	equ	0xFDF
 40452                           postinc2	equ	0xFDE
 40453                           postdec2	equ	0xFDD
 40454                           plusw2	equ	0xFDB
 40455                           fsr2h	equ	0xFDA
 40456                           fsr2l	equ	0xFD9
 40457                           status	equ	0xFD8
 40458                           
 40459 ;; *************** function ___flneg *****************
 40460 ;; Defined at:
 40461 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flneg.c"
 40462 ;; Parameters:    Size  Location     Type
 40463 ;;  f1              4   64[BANK0 ] long 
 40464 ;; Auto vars:     Size  Location     Type
 40465 ;;		None
 40466 ;; Return value:  Size  Location     Type
 40467 ;;                  4   64[BANK0 ] long 
 40468 ;; Registers used:
 40469 ;;		wreg, status,2, status,0
 40470 ;; Tracked objects:
 40471 ;;		On entry : 0/0
 40472 ;;		On exit  : 0/0
 40473 ;;		Unchanged: 0/0
 40474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40475 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40478 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40479 ;;Total ram usage:        4 bytes
 40480 ;; Hardware stack levels used:    1
 40481 ;; Hardware stack levels required when called:    5
 40482 ;; This function calls:
 40483 ;;		Nothing
 40484 ;; This function is called by:
 40485 ;;		_readPotentiometers
 40486 ;;		_calculate_pulse_length
 40487 ;; This function uses a non-reentrant model
 40488 ;;
 40489                           
 40490                           	psect	text118
 40491  009752                     __ptext118:
 40492                           	opt stack 0
 40493  009752                     ___flneg:
 40494                           	opt stack 22
 40495                           
 40496                           ; BSR set to: 0
 40497                           ;incstack = 0
 40498  009752  0100               	movlb	0	; () banked
 40499  009754  51A0               	movf	___flneg@f1& (0+255),w,b
 40500  009756  11A1               	iorwf	(___flneg@f1+1)& (0+255),w,b
 40501  009758  11A2               	iorwf	(___flneg@f1+2)& (0+255),w,b
 40502  00975A  11A3               	iorwf	(___flneg@f1+3)& (0+255),w,b
 40503  00975C  B4D8               	btfsc	status,2,c
 40504  00975E  D008               	goto	l5849
 40505                           
 40506                           ; BSR set to: 0
 40507  009760  0E00               	movlw	0
 40508  009762  1BA0               	xorwf	___flneg@f1& (0+255),f,b
 40509  009764  0E00               	movlw	0
 40510  009766  1BA1               	xorwf	(___flneg@f1+1)& (0+255),f,b
 40511  009768  0E00               	movlw	0
 40512  00976A  1BA2               	xorwf	(___flneg@f1+2)& (0+255),f,b
 40513  00976C  0E80               	movlw	128
 40514  00976E  1BA3               	xorwf	(___flneg@f1+3)& (0+255),f,b
 40515  009770                     l5849:
 40516                           
 40517                           ; BSR set to: 0
 40518                           
 40519                           ; BSR set to: 0
 40520  009770  C0A0  F0A0         	movff	___flneg@f1,?___flneg
 40521  009774  C0A1  F0A1         	movff	___flneg@f1+1,?___flneg+1
 40522  009778  C0A2  F0A2         	movff	___flneg@f1+2,?___flneg+2
 40523  00977C  C0A3  F0A3         	movff	___flneg@f1+3,?___flneg+3
 40524  009780  0012               	return	
 40525  009782                     __end_of___flneg:
 40526                           	opt stack 0
 40527                           tblptru	equ	0xFF8
 40528                           tblptrh	equ	0xFF7
 40529                           tblptrl	equ	0xFF6
 40530                           tablat	equ	0xFF5
 40531                           prodh	equ	0xFF4
 40532                           prodl	equ	0xFF3
 40533                           intcon	equ	0xFF2
 40534                           intcon2	equ	0xFF1
 40535                           indf0	equ	0xFEF
 40536                           postinc0	equ	0xFEE
 40537                           postdec0	equ	0xFED
 40538                           fsr0h	equ	0xFEA
 40539                           fsr0l	equ	0xFE9
 40540                           wreg	equ	0xFE8
 40541                           postinc1	equ	0xFE6
 40542                           postdec1	equ	0xFE5
 40543                           plusw1	equ	0xFE3
 40544                           fsr1h	equ	0xFE2
 40545                           fsr1l	equ	0xFE1
 40546                           indf2	equ	0xFDF
 40547                           postinc2	equ	0xFDE
 40548                           postdec2	equ	0xFDD
 40549                           plusw2	equ	0xFDB
 40550                           fsr2h	equ	0xFDA
 40551                           fsr2l	equ	0xFD9
 40552                           status	equ	0xFD8
 40553                           
 40554 ;; *************** function ___flmul *****************
 40555 ;; Defined at:
 40556 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcmul.c"
 40557 ;; Parameters:    Size  Location     Type
 40558 ;;  b               4   14[BANK0 ] long 
 40559 ;;  a               4   18[BANK0 ] long 
 40560 ;; Auto vars:     Size  Location     Type
 40561 ;;  prod            4   33[BANK0 ] struct .
 40562 ;;  grs             4   28[BANK0 ] unsigned long 
 40563 ;;  temp            2   37[BANK0 ] struct .
 40564 ;;  bexp            1   32[BANK0 ] unsigned char 
 40565 ;;  aexp            1   27[BANK0 ] unsigned char 
 40566 ;;  sign            1   26[BANK0 ] unsigned char 
 40567 ;; Return value:  Size  Location     Type
 40568 ;;                  4   14[BANK0 ] unsigned char 
 40569 ;; Registers used:
 40570 ;;		wreg, status,2, status,0, prodl, prodh
 40571 ;; Tracked objects:
 40572 ;;		On entry : 0/0
 40573 ;;		On exit  : 0/0
 40574 ;;		Unchanged: 0/0
 40575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40576 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40577 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40578 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40579 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40580 ;;Total ram usage:       25 bytes
 40581 ;; Hardware stack levels used:    1
 40582 ;; Hardware stack levels required when called:    5
 40583 ;; This function calls:
 40584 ;;		Nothing
 40585 ;; This function is called by:
 40586 ;;		_readPotentiometers
 40587 ;;		_calculate_pulse_length
 40588 ;; This function uses a non-reentrant model
 40589 ;;
 40590                           
 40591                           	psect	text119
 40592  002FE4                     __ptext119:
 40593                           	opt stack 0
 40594  002FE4                     ___flmul:
 40595                           	opt stack 22
 40596                           
 40597                           ; BSR set to: 0
 40598                           ;incstack = 0
 40599  002FE4  0100               	movlb	0	; () banked
 40600  002FE6  5171               	movf	(___flmul@b+3)& (0+255),w,b
 40601  002FE8  0B80               	andlw	128
 40602  002FEA  6F7A               	movwf	___flmul@sign& (0+255),b
 40603  002FEC  5171               	movf	(___flmul@b+3)& (0+255),w,b
 40604  002FEE  2571               	addwf	(___flmul@b+3)& (0+255),w,b
 40605  002FF0  6F80               	movwf	___flmul@bexp& (0+255),b
 40606                           
 40607                           ; BSR set to: 0
 40608  002FF2  BF70               	btfsc	(___flmul@b+2)& (0+255),7,b
 40609                           
 40610                           ; BSR set to: 0
 40611  002FF4  8180               	bsf	___flmul@bexp& (0+255),0,b
 40612                           
 40613                           ; BSR set to: 0
 40614                           
 40615                           ; BSR set to: 0
 40616  002FF6  5180               	movf	___flmul@bexp& (0+255),w,b
 40617  002FF8  B4D8               	btfsc	status,2,c
 40618  002FFA  D00D               	goto	l6170
 40619                           
 40620                           ; BSR set to: 0
 40621  002FFC  2980               	incf	___flmul@bexp& (0+255),w,b
 40622  002FFE  A4D8               	btfss	status,2,c
 40623  003000  D008               	goto	l6171
 40624                           
 40625                           ; BSR set to: 0
 40626  003002  0E00               	movlw	0
 40627  003004  6F6E               	movwf	___flmul@b& (0+255),b
 40628  003006  0E00               	movlw	0
 40629  003008  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 40630  00300A  0E00               	movlw	0
 40631  00300C  6F70               	movwf	(___flmul@b+2)& (0+255),b
 40632  00300E  0E00               	movlw	0
 40633  003010  6F71               	movwf	(___flmul@b+3)& (0+255),b
 40634  003012                     l6171:
 40635                           
 40636                           ; BSR set to: 0
 40637                           
 40638                           ; BSR set to: 0
 40639  003012  8F70               	bsf	(___flmul@b+2)& (0+255),7,b
 40640  003014  D008               	goto	l6172
 40641  003016                     l6170:
 40642                           
 40643                           ; BSR set to: 0
 40644                           
 40645                           ; BSR set to: 0
 40646  003016  0E00               	movlw	0
 40647  003018  6F6E               	movwf	___flmul@b& (0+255),b
 40648  00301A  0E00               	movlw	0
 40649  00301C  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 40650  00301E  0E00               	movlw	0
 40651  003020  6F70               	movwf	(___flmul@b+2)& (0+255),b
 40652  003022  0E00               	movlw	0
 40653  003024  6F71               	movwf	(___flmul@b+3)& (0+255),b
 40654  003026                     l6172:
 40655                           
 40656                           ; BSR set to: 0
 40657                           
 40658                           ; BSR set to: 0
 40659  003026  5175               	movf	(___flmul@a+3)& (0+255),w,b
 40660  003028  0B80               	andlw	128
 40661  00302A  1B7A               	xorwf	___flmul@sign& (0+255),f,b
 40662                           
 40663                           ; BSR set to: 0
 40664  00302C  5175               	movf	(___flmul@a+3)& (0+255),w,b
 40665  00302E  2575               	addwf	(___flmul@a+3)& (0+255),w,b
 40666  003030  6F7B               	movwf	___flmul@aexp& (0+255),b
 40667                           
 40668                           ; BSR set to: 0
 40669  003032  BF74               	btfsc	(___flmul@a+2)& (0+255),7,b
 40670                           
 40671                           ; BSR set to: 0
 40672  003034  817B               	bsf	___flmul@aexp& (0+255),0,b
 40673                           
 40674                           ; BSR set to: 0
 40675                           
 40676                           ; BSR set to: 0
 40677  003036  517B               	movf	___flmul@aexp& (0+255),w,b
 40678  003038  B4D8               	btfsc	status,2,c
 40679  00303A  D00D               	goto	l6174
 40680                           
 40681                           ; BSR set to: 0
 40682  00303C  297B               	incf	___flmul@aexp& (0+255),w,b
 40683  00303E  A4D8               	btfss	status,2,c
 40684  003040  D008               	goto	l6175
 40685                           
 40686                           ; BSR set to: 0
 40687  003042  0E00               	movlw	0
 40688  003044  6F72               	movwf	___flmul@a& (0+255),b
 40689  003046  0E00               	movlw	0
 40690  003048  6F73               	movwf	(___flmul@a+1)& (0+255),b
 40691  00304A  0E00               	movlw	0
 40692  00304C  6F74               	movwf	(___flmul@a+2)& (0+255),b
 40693  00304E  0E00               	movlw	0
 40694  003050  6F75               	movwf	(___flmul@a+3)& (0+255),b
 40695  003052                     l6175:
 40696                           
 40697                           ; BSR set to: 0
 40698                           
 40699                           ; BSR set to: 0
 40700  003052  8F74               	bsf	(___flmul@a+2)& (0+255),7,b
 40701  003054  D008               	goto	l6176
 40702  003056                     l6174:
 40703                           
 40704                           ; BSR set to: 0
 40705                           
 40706                           ; BSR set to: 0
 40707  003056  0E00               	movlw	0
 40708  003058  6F72               	movwf	___flmul@a& (0+255),b
 40709  00305A  0E00               	movlw	0
 40710  00305C  6F73               	movwf	(___flmul@a+1)& (0+255),b
 40711  00305E  0E00               	movlw	0
 40712  003060  6F74               	movwf	(___flmul@a+2)& (0+255),b
 40713  003062  0E00               	movlw	0
 40714  003064  6F75               	movwf	(___flmul@a+3)& (0+255),b
 40715  003066                     l6176:
 40716                           
 40717                           ; BSR set to: 0
 40718  003066  517B               	movf	___flmul@aexp& (0+255),w,b
 40719  003068  B4D8               	btfsc	status,2,c
 40720  00306A  D003               	goto	u51980
 40721                           
 40722                           ; BSR set to: 0
 40723  00306C  5180               	movf	___flmul@bexp& (0+255),w,b
 40724  00306E  A4D8               	btfss	status,2,c
 40725  003070  D009               	goto	l6177
 40726  003072                     u51980:
 40727                           
 40728                           ; BSR set to: 0
 40729                           
 40730                           ; BSR set to: 0
 40731  003072  0E00               	movlw	0
 40732  003074  6F6E               	movwf	?___flmul& (0+255),b
 40733  003076  0E00               	movlw	0
 40734  003078  6F6F               	movwf	(?___flmul+1)& (0+255),b
 40735  00307A  0E00               	movlw	0
 40736  00307C  6F70               	movwf	(?___flmul+2)& (0+255),b
 40737  00307E  0E00               	movlw	0
 40738  003080  6F71               	movwf	(?___flmul+3)& (0+255),b
 40739                           
 40740                           ; BSR set to: 0
 40741  003082  0012               	return	
 40742  003084                     l6177:
 40743                           
 40744                           ; BSR set to: 0
 40745                           
 40746                           ; BSR set to: 0
 40747  003084  5174               	movf	(___flmul@a+2)& (0+255),w,b
 40748  003086  036E               	mulwf	___flmul@b& (0+255),b
 40749  003088  CFF3 F085          	movff	prodl,___flmul@temp
 40750  00308C  CFF4 F086          	movff	prodh,___flmul@temp+1
 40751                           
 40752                           ; BSR set to: 0
 40753  003090  5185               	movf	___flmul@temp& (0+255),w,b
 40754  003092  6F7C               	movwf	___flmul@grs& (0+255),b
 40755  003094  6B7D               	clrf	(___flmul@grs+1)& (0+255),b
 40756  003096  6B7E               	clrf	(___flmul@grs+2)& (0+255),b
 40757  003098  6B7F               	clrf	(___flmul@grs+3)& (0+255),b
 40758                           
 40759                           ; BSR set to: 0
 40760  00309A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40761  00309C  6F81               	movwf	___flmul@prod& (0+255),b
 40762  00309E  6B82               	clrf	(___flmul@prod+1)& (0+255),b
 40763  0030A0  6B83               	clrf	(___flmul@prod+2)& (0+255),b
 40764  0030A2  6B84               	clrf	(___flmul@prod+3)& (0+255),b
 40765  0030A4  5173               	movf	(___flmul@a+1)& (0+255),w,b
 40766  0030A6  036F               	mulwf	(___flmul@b+1)& (0+255),b
 40767  0030A8  CFF3 F085          	movff	prodl,___flmul@temp
 40768  0030AC  CFF4 F086          	movff	prodh,___flmul@temp+1
 40769                           
 40770                           ; BSR set to: 0
 40771  0030B0  5185               	movf	___flmul@temp& (0+255),w,b
 40772  0030B2  277C               	addwf	___flmul@grs& (0+255),f,b
 40773  0030B4  0E00               	movlw	0
 40774  0030B6  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 40775  0030B8  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 40776  0030BA  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 40777                           
 40778                           ; BSR set to: 0
 40779  0030BC  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40780  0030BE  2781               	addwf	___flmul@prod& (0+255),f,b
 40781  0030C0  0E00               	movlw	0
 40782  0030C2  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 40783  0030C4  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 40784  0030C6  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 40785  0030C8  5172               	movf	___flmul@a& (0+255),w,b
 40786  0030CA  0370               	mulwf	(___flmul@b+2)& (0+255),b
 40787  0030CC  CFF3 F085          	movff	prodl,___flmul@temp
 40788  0030D0  CFF4 F086          	movff	prodh,___flmul@temp+1
 40789                           
 40790                           ; BSR set to: 0
 40791  0030D4  5185               	movf	___flmul@temp& (0+255),w,b
 40792  0030D6  277C               	addwf	___flmul@grs& (0+255),f,b
 40793  0030D8  0E00               	movlw	0
 40794  0030DA  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 40795  0030DC  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 40796  0030DE  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 40797                           
 40798                           ; BSR set to: 0
 40799  0030E0  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40800  0030E2  2781               	addwf	___flmul@prod& (0+255),f,b
 40801  0030E4  0E00               	movlw	0
 40802  0030E6  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 40803  0030E8  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 40804  0030EA  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 40805                           
 40806                           ; BSR set to: 0
 40807  0030EC  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 40808  0030F0  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 40809  0030F4  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 40810  0030F8  6B7C               	clrf	___flmul@grs& (0+255),b
 40811                           
 40812                           ; BSR set to: 0
 40813  0030FA  5172               	movf	___flmul@a& (0+255),w,b
 40814  0030FC  036F               	mulwf	(___flmul@b+1)& (0+255),b
 40815  0030FE  CFF3 F085          	movff	prodl,___flmul@temp
 40816  003102  CFF4 F086          	movff	prodh,___flmul@temp+1
 40817                           
 40818                           ; BSR set to: 0
 40819  003106  5185               	movf	___flmul@temp& (0+255),w,b
 40820  003108  277C               	addwf	___flmul@grs& (0+255),f,b
 40821  00310A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40822  00310C  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 40823  00310E  0E00               	movlw	0
 40824  003110  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 40825  003112  0E00               	movlw	0
 40826  003114  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 40827                           
 40828                           ; BSR set to: 0
 40829  003116  5173               	movf	(___flmul@a+1)& (0+255),w,b
 40830  003118  036E               	mulwf	___flmul@b& (0+255),b
 40831  00311A  CFF3 F085          	movff	prodl,___flmul@temp
 40832  00311E  CFF4 F086          	movff	prodh,___flmul@temp+1
 40833                           
 40834                           ; BSR set to: 0
 40835  003122  5185               	movf	___flmul@temp& (0+255),w,b
 40836  003124  277C               	addwf	___flmul@grs& (0+255),f,b
 40837  003126  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40838  003128  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 40839  00312A  0E00               	movlw	0
 40840  00312C  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 40841  00312E  0E00               	movlw	0
 40842  003130  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 40843                           
 40844                           ; BSR set to: 0
 40845  003132  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 40846  003136  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 40847  00313A  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 40848  00313E  6B7C               	clrf	___flmul@grs& (0+255),b
 40849  003140  5172               	movf	___flmul@a& (0+255),w,b
 40850  003142  036E               	mulwf	___flmul@b& (0+255),b
 40851  003144  CFF3 F085          	movff	prodl,___flmul@temp
 40852  003148  CFF4 F086          	movff	prodh,___flmul@temp+1
 40853                           
 40854                           ; BSR set to: 0
 40855  00314C  5185               	movf	___flmul@temp& (0+255),w,b
 40856  00314E  277C               	addwf	___flmul@grs& (0+255),f,b
 40857  003150  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40858  003152  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 40859  003154  0E00               	movlw	0
 40860  003156  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 40861  003158  0E00               	movlw	0
 40862  00315A  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 40863                           
 40864                           ; BSR set to: 0
 40865  00315C  5174               	movf	(___flmul@a+2)& (0+255),w,b
 40866  00315E  036F               	mulwf	(___flmul@b+1)& (0+255),b
 40867  003160  CFF3 F085          	movff	prodl,___flmul@temp
 40868  003164  CFF4 F086          	movff	prodh,___flmul@temp+1
 40869  003168  5185               	movf	___flmul@temp& (0+255),w,b
 40870  00316A  2781               	addwf	___flmul@prod& (0+255),f,b
 40871  00316C  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40872  00316E  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 40873  003170  0E00               	movlw	0
 40874  003172  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 40875  003174  0E00               	movlw	0
 40876  003176  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 40877                           
 40878                           ; BSR set to: 0
 40879  003178  5173               	movf	(___flmul@a+1)& (0+255),w,b
 40880  00317A  0370               	mulwf	(___flmul@b+2)& (0+255),b
 40881  00317C  CFF3 F085          	movff	prodl,___flmul@temp
 40882  003180  CFF4 F086          	movff	prodh,___flmul@temp+1
 40883                           
 40884                           ; BSR set to: 0
 40885  003184  5185               	movf	___flmul@temp& (0+255),w,b
 40886  003186  2781               	addwf	___flmul@prod& (0+255),f,b
 40887  003188  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40888  00318A  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 40889  00318C  0E00               	movlw	0
 40890  00318E  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 40891  003190  0E00               	movlw	0
 40892  003192  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 40893  003194  5174               	movf	(___flmul@a+2)& (0+255),w,b
 40894  003196  0370               	mulwf	(___flmul@b+2)& (0+255),b
 40895  003198  CFF3 F085          	movff	prodl,___flmul@temp
 40896  00319C  CFF4 F086          	movff	prodh,___flmul@temp+1
 40897                           
 40898                           ; BSR set to: 0
 40899  0031A0  5185               	movf	___flmul@temp& (0+255),w,b
 40900  0031A2  6F76               	movwf	??___flmul& (0+255),b
 40901  0031A4  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40902  0031A6  6F77               	movwf	(??___flmul+1)& (0+255),b
 40903  0031A8  6B78               	clrf	(??___flmul+2)& (0+255),b
 40904  0031AA  6B79               	clrf	(??___flmul+3)& (0+255),b
 40905  0031AC  C078  F079         	movff	??___flmul+2,??___flmul+3
 40906  0031B0  C077  F078         	movff	??___flmul+1,??___flmul+2
 40907  0031B4  C076  F077         	movff	??___flmul,??___flmul+1
 40908  0031B8  6B76               	clrf	??___flmul& (0+255),b
 40909  0031BA  5176               	movf	??___flmul& (0+255),w,b
 40910  0031BC  2781               	addwf	___flmul@prod& (0+255),f,b
 40911  0031BE  5177               	movf	(??___flmul+1)& (0+255),w,b
 40912  0031C0  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 40913  0031C2  5178               	movf	(??___flmul+2)& (0+255),w,b
 40914  0031C4  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 40915  0031C6  5179               	movf	(??___flmul+3)& (0+255),w,b
 40916  0031C8  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 40917                           
 40918                           ; BSR set to: 0
 40919  0031CA  C07C  F076         	movff	___flmul@grs,??___flmul
 40920  0031CE  C07D  F077         	movff	___flmul@grs+1,??___flmul+1
 40921  0031D2  C07E  F078         	movff	___flmul@grs+2,??___flmul+2
 40922  0031D6  C07F  F079         	movff	___flmul@grs+3,??___flmul+3
 40923  0031DA  0E19               	movlw	25
 40924  0031DC  D005               	goto	u51990
 40925  0031DE                     u51995:
 40926  0031DE  90D8               	bcf	status,0,c
 40927  0031E0  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 40928  0031E2  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 40929  0031E4  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 40930  0031E6  3376               	rrcf	??___flmul& (0+255),f,b
 40931  0031E8                     u51990:
 40932  0031E8  2EE8               	decfsz	wreg,f,c
 40933  0031EA  D7F9               	goto	u51995
 40934  0031EC  5176               	movf	??___flmul& (0+255),w,b
 40935  0031EE  2781               	addwf	___flmul@prod& (0+255),f,b
 40936  0031F0  5177               	movf	(??___flmul+1)& (0+255),w,b
 40937  0031F2  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 40938  0031F4  5178               	movf	(??___flmul+2)& (0+255),w,b
 40939  0031F6  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 40940  0031F8  5179               	movf	(??___flmul+3)& (0+255),w,b
 40941  0031FA  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 40942                           
 40943                           ; BSR set to: 0
 40944  0031FC  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 40945  003200  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 40946  003204  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 40947  003208  6B7C               	clrf	___flmul@grs& (0+255),b
 40948                           
 40949                           ; BSR set to: 0
 40950  00320A  517B               	movf	___flmul@aexp& (0+255),w,b
 40951  00320C  C080  F076         	movff	___flmul@bexp,??___flmul
 40952  003210  6B77               	clrf	(??___flmul+1)& (0+255),b
 40953  003212  2776               	addwf	??___flmul& (0+255),f,b
 40954  003214  0E00               	movlw	0
 40955  003216  2377               	addwfc	(??___flmul+1)& (0+255),f,b
 40956  003218  0E82               	movlw	130
 40957  00321A  2576               	addwf	??___flmul& (0+255),w,b
 40958  00321C  6F85               	movwf	___flmul@temp& (0+255),b
 40959  00321E  0EFF               	movlw	255
 40960  003220  2177               	addwfc	(??___flmul+1)& (0+255),w,b
 40961  003222  6F86               	movwf	(___flmul@temp+1)& (0+255),b
 40962  003224  D00F               	goto	l6181
 40963  003226                     
 40964                           ; BSR set to: 0
 40965                           
 40966                           ; BSR set to: 0
 40967  003226  90D8               	bcf	status,0,c
 40968  003228  3781               	rlcf	___flmul@prod& (0+255),f,b
 40969  00322A  3782               	rlcf	(___flmul@prod+1)& (0+255),f,b
 40970  00322C  3783               	rlcf	(___flmul@prod+2)& (0+255),f,b
 40971  00322E  3784               	rlcf	(___flmul@prod+3)& (0+255),f,b
 40972                           
 40973                           ; BSR set to: 0
 40974  003230  BF7F               	btfsc	(___flmul@grs+3)& (0+255),7,b
 40975                           
 40976                           ; BSR set to: 0
 40977  003232  8181               	bsf	___flmul@prod& (0+255),0,b
 40978                           
 40979                           ; BSR set to: 0
 40980  003234  90D8               	bcf	status,0,c
 40981  003236  377C               	rlcf	___flmul@grs& (0+255),f,b
 40982  003238  377D               	rlcf	(___flmul@grs+1)& (0+255),f,b
 40983  00323A  377E               	rlcf	(___flmul@grs+2)& (0+255),f,b
 40984  00323C  377F               	rlcf	(___flmul@grs+3)& (0+255),f,b
 40985  00323E  0785               	decf	___flmul@temp& (0+255),f,b
 40986  003240  A0D8               	btfss	status,0,c
 40987  003242  0786               	decf	(___flmul@temp+1)& (0+255),f,b
 40988  003244                     l6181:
 40989                           
 40990                           ; BSR set to: 0
 40991                           
 40992                           ; BSR set to: 0
 40993  003244  AF83               	btfss	(___flmul@prod+2)& (0+255),7,b
 40994  003246  D7EF               	goto	l6182
 40995                           
 40996                           ; BSR set to: 0
 40997                           
 40998                           ; BSR set to: 0
 40999  003248  0E00               	movlw	0
 41000  00324A  6F7B               	movwf	___flmul@aexp& (0+255),b
 41001                           
 41002                           ; BSR set to: 0
 41003  00324C  AF7F               	btfss	(___flmul@grs+3)& (0+255),7,b
 41004  00324E  D016               	goto	l6188
 41005                           
 41006                           ; BSR set to: 0
 41007  003250  0EFF               	movlw	255
 41008  003252  157C               	andwf	___flmul@grs& (0+255),w,b
 41009  003254  6F76               	movwf	??___flmul& (0+255),b
 41010  003256  0EFF               	movlw	255
 41011  003258  157D               	andwf	(___flmul@grs+1)& (0+255),w,b
 41012  00325A  6F77               	movwf	(??___flmul+1)& (0+255),b
 41013  00325C  0EFF               	movlw	255
 41014  00325E  157E               	andwf	(___flmul@grs+2)& (0+255),w,b
 41015  003260  6F78               	movwf	(??___flmul+2)& (0+255),b
 41016  003262  0E7F               	movlw	127
 41017  003264  157F               	andwf	(___flmul@grs+3)& (0+255),w,b
 41018  003266  6F79               	movwf	(??___flmul+3)& (0+255),b
 41019  003268  5176               	movf	??___flmul& (0+255),w,b
 41020  00326A  1177               	iorwf	(??___flmul+1)& (0+255),w,b
 41021  00326C  1178               	iorwf	(??___flmul+2)& (0+255),w,b
 41022  00326E  1179               	iorwf	(??___flmul+3)& (0+255),w,b
 41023  003270  A4D8               	btfss	status,2,c
 41024  003272  D002               	goto	u52040
 41025                           
 41026                           ; BSR set to: 0
 41027                           
 41028                           ; BSR set to: 0
 41029  003274  A181               	btfss	___flmul@prod& (0+255),0,b
 41030  003276  D002               	goto	l6188
 41031  003278                     u52040:
 41032                           
 41033                           ; BSR set to: 0
 41034  003278  0E01               	movlw	1
 41035  00327A  6F7B               	movwf	___flmul@aexp& (0+255),b
 41036  00327C                     l6188:
 41037                           
 41038                           ; BSR set to: 0
 41039                           
 41040                           ; BSR set to: 0
 41041                           
 41042                           ; BSR set to: 0
 41043  00327C  517B               	movf	___flmul@aexp& (0+255),w,b
 41044  00327E  B4D8               	btfsc	status,2,c
 41045  003280  D01F               	goto	l6190
 41046                           
 41047                           ; BSR set to: 0
 41048  003282  0E01               	movlw	1
 41049  003284  2781               	addwf	___flmul@prod& (0+255),f,b
 41050  003286  0E00               	movlw	0
 41051  003288  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 41052  00328A  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 41053  00328C  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 41054                           
 41055                           ; BSR set to: 0
 41056  00328E  A184               	btfss	(___flmul@prod+3)& (0+255),0,b
 41057  003290  D017               	goto	l6190
 41058                           
 41059                           ; BSR set to: 0
 41060  003292  C081  F076         	movff	___flmul@prod,??___flmul
 41061  003296  C082  F077         	movff	___flmul@prod+1,??___flmul+1
 41062  00329A  C083  F078         	movff	___flmul@prod+2,??___flmul+2
 41063  00329E  C084  F079         	movff	___flmul@prod+3,??___flmul+3
 41064  0032A2  3579               	rlcf	(??___flmul+3)& (0+255),w,b
 41065  0032A4  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 41066  0032A6  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 41067  0032A8  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 41068  0032AA  3376               	rrcf	??___flmul& (0+255),f,b
 41069  0032AC  C076  F081         	movff	??___flmul,___flmul@prod
 41070  0032B0  C077  F082         	movff	??___flmul+1,___flmul@prod+1
 41071  0032B4  C078  F083         	movff	??___flmul+2,___flmul@prod+2
 41072  0032B8  C079  F084         	movff	??___flmul+3,___flmul@prod+3
 41073                           
 41074                           ; BSR set to: 0
 41075  0032BC  4B85               	infsnz	___flmul@temp& (0+255),f,b
 41076  0032BE  2B86               	incf	(___flmul@temp+1)& (0+255),f,b
 41077  0032C0                     l6190:
 41078                           
 41079                           ; BSR set to: 0
 41080                           
 41081                           ; BSR set to: 0
 41082                           
 41083                           ; BSR set to: 0
 41084  0032C0  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 41085  0032C2  D00D               	goto	l6191
 41086  0032C4  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 41087  0032C6  E103               	bnz	u52070
 41088  0032C8  2985               	incf	___flmul@temp& (0+255),w,b
 41089  0032CA  A0D8               	btfss	status,0,c
 41090  0032CC  D008               	goto	l6191
 41091  0032CE                     u52070:
 41092                           
 41093                           ; BSR set to: 0
 41094  0032CE  0E00               	movlw	0
 41095  0032D0  6F81               	movwf	___flmul@prod& (0+255),b
 41096  0032D2  0E00               	movlw	0
 41097  0032D4  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 41098  0032D6  0E80               	movlw	128
 41099  0032D8  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 41100  0032DA  0E7F               	movlw	127
 41101  0032DC  D020               	goto	L22
 41102  0032DE                     l6191:
 41103                           
 41104                           ; BSR set to: 0
 41105                           
 41106                           ; BSR set to: 0
 41107  0032DE  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 41108  0032E0  D005               	goto	u52080
 41109  0032E2  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 41110  0032E4  E10E               	bnz	l6193
 41111  0032E6  0585               	decf	___flmul@temp& (0+255),w,b
 41112  0032E8  B0D8               	btfsc	status,0,c
 41113  0032EA  D00B               	goto	l6193
 41114  0032EC                     u52080:
 41115                           
 41116                           ; BSR set to: 0
 41117  0032EC  0E00               	movlw	0
 41118  0032EE  6F81               	movwf	___flmul@prod& (0+255),b
 41119  0032F0  0E00               	movlw	0
 41120  0032F2  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 41121  0032F4  0E00               	movlw	0
 41122  0032F6  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 41123  0032F8  0E00               	movlw	0
 41124  0032FA  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 41125  0032FC  0E00               	movlw	0
 41126  0032FE  6F7A               	movwf	___flmul@sign& (0+255),b
 41127  003300  D00F               	goto	l6194
 41128  003302                     l6193:
 41129                           
 41130                           ; BSR set to: 0
 41131  003302  C085  F080         	movff	___flmul@temp,___flmul@bexp
 41132                           
 41133                           ; BSR set to: 0
 41134  003306  0EFF               	movlw	255
 41135  003308  1781               	andwf	___flmul@prod& (0+255),f,b
 41136  00330A  0EFF               	movlw	255
 41137  00330C  1782               	andwf	(___flmul@prod+1)& (0+255),f,b
 41138  00330E  0E7F               	movlw	127
 41139  003310  1783               	andwf	(___flmul@prod+2)& (0+255),f,b
 41140  003312  0E00               	movlw	0
 41141  003314  1784               	andwf	(___flmul@prod+3)& (0+255),f,b
 41142                           
 41143                           ; BSR set to: 0
 41144  003316  B180               	btfsc	___flmul@bexp& (0+255),0,b
 41145                           
 41146                           ; BSR set to: 0
 41147  003318  8F83               	bsf	(___flmul@prod+2)& (0+255),7,b
 41148                           
 41149                           ; BSR set to: 0
 41150                           
 41151                           ; BSR set to: 0
 41152  00331A  90D8               	bcf	status,0,c
 41153  00331C  3180               	rrcf	___flmul@bexp& (0+255),w,b
 41154  00331E                     L22:
 41155  00331E  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 41156  003320                     l6194:
 41157                           
 41158                           ; BSR set to: 0
 41159                           
 41160                           ; BSR set to: 0
 41161                           
 41162                           ; BSR set to: 0
 41163  003320  517A               	movf	___flmul@sign& (0+255),w,b
 41164  003322  1384               	iorwf	(___flmul@prod+3)& (0+255),f,b
 41165                           
 41166                           ; BSR set to: 0
 41167  003324  C081  F06E         	movff	___flmul@prod,?___flmul
 41168  003328  C082  F06F         	movff	___flmul@prod+1,?___flmul+1
 41169  00332C  C083  F070         	movff	___flmul@prod+2,?___flmul+2
 41170  003330  C084  F071         	movff	___flmul@prod+3,?___flmul+3
 41171  003334  0012               	return	
 41172  003336                     __end_of___flmul:
 41173                           	opt stack 0
 41174                           tblptru	equ	0xFF8
 41175                           tblptrh	equ	0xFF7
 41176                           tblptrl	equ	0xFF6
 41177                           tablat	equ	0xFF5
 41178                           prodh	equ	0xFF4
 41179                           prodl	equ	0xFF3
 41180                           intcon	equ	0xFF2
 41181                           intcon2	equ	0xFF1
 41182                           indf0	equ	0xFEF
 41183                           postinc0	equ	0xFEE
 41184                           postdec0	equ	0xFED
 41185                           fsr0h	equ	0xFEA
 41186                           fsr0l	equ	0xFE9
 41187                           wreg	equ	0xFE8
 41188                           postinc1	equ	0xFE6
 41189                           postdec1	equ	0xFE5
 41190                           plusw1	equ	0xFE3
 41191                           fsr1h	equ	0xFE2
 41192                           fsr1l	equ	0xFE1
 41193                           indf2	equ	0xFDF
 41194                           postinc2	equ	0xFDE
 41195                           postdec2	equ	0xFDD
 41196                           plusw2	equ	0xFDB
 41197                           fsr2h	equ	0xFDA
 41198                           fsr2l	equ	0xFD9
 41199                           status	equ	0xFD8
 41200                           
 41201 ;; *************** function ___fladd *****************
 41202 ;; Defined at:
 41203 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
 41204 ;; Parameters:    Size  Location     Type
 41205 ;;  b               4   68[BANK0 ] unsigned char 
 41206 ;;  a               4   72[BANK0 ] unsigned char 
 41207 ;; Auto vars:     Size  Location     Type
 41208 ;;  grs             1   87[BANK0 ] unsigned char 
 41209 ;;  bexp            1   86[BANK0 ] unsigned char 
 41210 ;;  aexp            1   85[BANK0 ] unsigned char 
 41211 ;;  signs           1   84[BANK0 ] unsigned char 
 41212 ;; Return value:  Size  Location     Type
 41213 ;;                  4   68[BANK0 ] unsigned char 
 41214 ;; Registers used:
 41215 ;;		wreg, status,2, status,0
 41216 ;; Tracked objects:
 41217 ;;		On entry : 0/0
 41218 ;;		On exit  : 0/0
 41219 ;;		Unchanged: 0/0
 41220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 41221 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41222 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41223 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41224 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41225 ;;Total ram usage:       20 bytes
 41226 ;; Hardware stack levels used:    1
 41227 ;; Hardware stack levels required when called:    5
 41228 ;; This function calls:
 41229 ;;		Nothing
 41230 ;; This function is called by:
 41231 ;;		_readPotentiometers
 41232 ;;		_calculate_pulse_length
 41233 ;; This function uses a non-reentrant model
 41234 ;;
 41235                           
 41236                           	psect	text120
 41237  003336                     __ptext120:
 41238                           	opt stack 0
 41239  003336                     ___fladd:
 41240                           	opt stack 22
 41241                           
 41242                           ; BSR set to: 0
 41243                           ;incstack = 0
 41244  003336  0100               	movlb	0	; () banked
 41245  003338  51A7               	movf	(___fladd@b+3)& (0+255),w,b
 41246  00333A  0B80               	andlw	128
 41247  00333C  6FB4               	movwf	___fladd@signs& (0+255),b
 41248  00333E  51A7               	movf	(___fladd@b+3)& (0+255),w,b
 41249  003340  25A7               	addwf	(___fladd@b+3)& (0+255),w,b
 41250  003342  6FB6               	movwf	___fladd@bexp& (0+255),b
 41251                           
 41252                           ; BSR set to: 0
 41253  003344  BFA6               	btfsc	(___fladd@b+2)& (0+255),7,b
 41254                           
 41255                           ; BSR set to: 0
 41256  003346  81B6               	bsf	___fladd@bexp& (0+255),0,b
 41257                           
 41258                           ; BSR set to: 0
 41259                           
 41260                           ; BSR set to: 0
 41261  003348  51B6               	movf	___fladd@bexp& (0+255),w,b
 41262  00334A  B4D8               	btfsc	status,2,c
 41263  00334C  D00D               	goto	l6079
 41264                           
 41265                           ; BSR set to: 0
 41266  00334E  29B6               	incf	___fladd@bexp& (0+255),w,b
 41267  003350  A4D8               	btfss	status,2,c
 41268  003352  D008               	goto	l6080
 41269                           
 41270                           ; BSR set to: 0
 41271  003354  0E00               	movlw	0
 41272  003356  6FA4               	movwf	___fladd@b& (0+255),b
 41273  003358  0E00               	movlw	0
 41274  00335A  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 41275  00335C  0E00               	movlw	0
 41276  00335E  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 41277  003360  0E00               	movlw	0
 41278  003362  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 41279  003364                     l6080:
 41280                           
 41281                           ; BSR set to: 0
 41282                           
 41283                           ; BSR set to: 0
 41284  003364  8FA6               	bsf	(___fladd@b+2)& (0+255),7,b
 41285  003366  D006               	goto	L23
 41286  003368                     l6079:
 41287                           
 41288                           ; BSR set to: 0
 41289                           
 41290                           ; BSR set to: 0
 41291  003368  0E00               	movlw	0
 41292  00336A  6FA4               	movwf	___fladd@b& (0+255),b
 41293  00336C  0E00               	movlw	0
 41294  00336E  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 41295  003370  0E00               	movlw	0
 41296  003372  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 41297  003374                     L23:
 41298  003374  0E00               	movlw	0
 41299  003376  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 41300                           
 41301                           ; BSR set to: 0
 41302                           
 41303                           ; BSR set to: 0
 41304  003378  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 41305  00337A  0B80               	andlw	128
 41306  00337C  6FB5               	movwf	___fladd@aexp& (0+255),b
 41307                           
 41308                           ; BSR set to: 0
 41309  00337E  51B4               	movf	___fladd@signs& (0+255),w,b
 41310  003380  19B5               	xorwf	___fladd@aexp& (0+255),w,b
 41311  003382  A4D8               	btfss	status,2,c
 41312                           
 41313                           ; BSR set to: 0
 41314  003384  8DB4               	bsf	___fladd@signs& (0+255),6,b
 41315                           
 41316                           ; BSR set to: 0
 41317                           
 41318                           ; BSR set to: 0
 41319  003386  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 41320  003388  25AB               	addwf	(___fladd@a+3)& (0+255),w,b
 41321  00338A  6FB5               	movwf	___fladd@aexp& (0+255),b
 41322                           
 41323                           ; BSR set to: 0
 41324  00338C  BFAA               	btfsc	(___fladd@a+2)& (0+255),7,b
 41325                           
 41326                           ; BSR set to: 0
 41327  00338E  81B5               	bsf	___fladd@aexp& (0+255),0,b
 41328                           
 41329                           ; BSR set to: 0
 41330                           
 41331                           ; BSR set to: 0
 41332  003390  51B5               	movf	___fladd@aexp& (0+255),w,b
 41333  003392  B4D8               	btfsc	status,2,c
 41334  003394  D00D               	goto	l6084
 41335                           
 41336                           ; BSR set to: 0
 41337  003396  29B5               	incf	___fladd@aexp& (0+255),w,b
 41338  003398  A4D8               	btfss	status,2,c
 41339  00339A  D008               	goto	l6085
 41340                           
 41341                           ; BSR set to: 0
 41342  00339C  0E00               	movlw	0
 41343  00339E  6FA8               	movwf	___fladd@a& (0+255),b
 41344  0033A0  0E00               	movlw	0
 41345  0033A2  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 41346  0033A4  0E00               	movlw	0
 41347  0033A6  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 41348  0033A8  0E00               	movlw	0
 41349  0033AA  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 41350  0033AC                     l6085:
 41351                           
 41352                           ; BSR set to: 0
 41353                           
 41354                           ; BSR set to: 0
 41355  0033AC  8FAA               	bsf	(___fladd@a+2)& (0+255),7,b
 41356  0033AE  D006               	goto	L24
 41357  0033B0                     l6084:
 41358                           
 41359                           ; BSR set to: 0
 41360                           
 41361                           ; BSR set to: 0
 41362  0033B0  0E00               	movlw	0
 41363  0033B2  6FA8               	movwf	___fladd@a& (0+255),b
 41364  0033B4  0E00               	movlw	0
 41365  0033B6  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 41366  0033B8  0E00               	movlw	0
 41367  0033BA  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 41368  0033BC                     L24:
 41369  0033BC  0E00               	movlw	0
 41370  0033BE  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 41371                           
 41372                           ; BSR set to: 0
 41373                           
 41374                           ; BSR set to: 0
 41375  0033C0  51B6               	movf	___fladd@bexp& (0+255),w,b
 41376  0033C2  5DB5               	subwf	___fladd@aexp& (0+255),w,b
 41377  0033C4  B0D8               	btfsc	status,0,c
 41378  0033C6  D022               	goto	l6087
 41379                           
 41380                           ; BSR set to: 0
 41381  0033C8  ADB4               	btfss	___fladd@signs& (0+255),6,b
 41382  0033CA  D002               	goto	l6088
 41383                           
 41384                           ; BSR set to: 0
 41385  0033CC  0E80               	movlw	128
 41386  0033CE  1BB4               	xorwf	___fladd@signs& (0+255),f,b
 41387  0033D0                     l6088:
 41388                           
 41389                           ; BSR set to: 0
 41390                           
 41391                           ; BSR set to: 0
 41392  0033D0  C0B6  F0B7         	movff	___fladd@bexp,___fladd@grs
 41393                           
 41394                           ; BSR set to: 0
 41395  0033D4  C0B5  F0B6         	movff	___fladd@aexp,___fladd@bexp
 41396                           
 41397                           ; BSR set to: 0
 41398  0033D8  C0B7  F0B5         	movff	___fladd@grs,___fladd@aexp
 41399                           
 41400                           ; BSR set to: 0
 41401  0033DC  C0A4  F0B7         	movff	___fladd@b,___fladd@grs
 41402                           
 41403                           ; BSR set to: 0
 41404  0033E0  C0A8  F0A4         	movff	___fladd@a,___fladd@b
 41405                           
 41406                           ; BSR set to: 0
 41407  0033E4  C0B7  F0A8         	movff	___fladd@grs,___fladd@a
 41408                           
 41409                           ; BSR set to: 0
 41410  0033E8  C0A5  F0B7         	movff	___fladd@b+1,___fladd@grs
 41411                           
 41412                           ; BSR set to: 0
 41413  0033EC  C0A9  F0A5         	movff	___fladd@a+1,___fladd@b+1
 41414                           
 41415                           ; BSR set to: 0
 41416  0033F0  C0B7  F0A9         	movff	___fladd@grs,___fladd@a+1
 41417                           
 41418                           ; BSR set to: 0
 41419  0033F4  C0A6  F0B7         	movff	___fladd@b+2,___fladd@grs
 41420                           
 41421                           ; BSR set to: 0
 41422  0033F8  C0AA  F0A6         	movff	___fladd@a+2,___fladd@b+2
 41423                           
 41424                           ; BSR set to: 0
 41425  0033FC  C0B7  F0AA         	movff	___fladd@grs,___fladd@a+2
 41426                           
 41427                           ; BSR set to: 0
 41428  003400  C0A7  F0B7         	movff	___fladd@b+3,___fladd@grs
 41429                           
 41430                           ; BSR set to: 0
 41431  003404  C0AB  F0A7         	movff	___fladd@a+3,___fladd@b+3
 41432                           
 41433                           ; BSR set to: 0
 41434  003408  C0B7  F0AB         	movff	___fladd@grs,___fladd@a+3
 41435  00340C                     l6087:
 41436                           
 41437                           ; BSR set to: 0
 41438                           
 41439                           ; BSR set to: 0
 41440  00340C  0E00               	movlw	0
 41441  00340E  6FB7               	movwf	___fladd@grs& (0+255),b
 41442                           
 41443                           ; BSR set to: 0
 41444  003410  51B6               	movf	___fladd@bexp& (0+255),w,b
 41445  003412  6FAC               	movwf	??___fladd& (0+255),b
 41446  003414  6BAD               	clrf	(??___fladd+1)& (0+255),b
 41447  003416  1FAC               	comf	??___fladd& (0+255),f,b
 41448  003418  1FAD               	comf	(??___fladd+1)& (0+255),f,b
 41449  00341A  4BAC               	infsnz	??___fladd& (0+255),f,b
 41450  00341C  2BAD               	incf	(??___fladd+1)& (0+255),f,b
 41451  00341E  51B5               	movf	___fladd@aexp& (0+255),w,b
 41452  003420  6FAE               	movwf	(??___fladd+2)& (0+255),b
 41453  003422  6BAF               	clrf	(??___fladd+3)& (0+255),b
 41454  003424  51AC               	movf	??___fladd& (0+255),w,b
 41455  003426  27AE               	addwf	(??___fladd+2)& (0+255),f,b
 41456  003428  51AD               	movf	(??___fladd+1)& (0+255),w,b
 41457  00342A  23AF               	addwfc	(??___fladd+3)& (0+255),f,b
 41458  00342C  BFAF               	btfsc	(??___fladd+3)& (0+255),7,b
 41459  00342E  D02C               	goto	l6091
 41460  003430  51AF               	movf	(??___fladd+3)& (0+255),w,b
 41461  003432  E104               	bnz	u51610
 41462  003434  0E1A               	movlw	26
 41463  003436  5DAE               	subwf	(??___fladd+2)& (0+255),w,b
 41464  003438  A0D8               	btfss	status,0,c
 41465  00343A  D026               	goto	l6091
 41466  00343C                     u51610:
 41467                           
 41468                           ; BSR set to: 0
 41469  00343C  51A4               	movf	___fladd@b& (0+255),w,b
 41470  00343E  11A5               	iorwf	(___fladd@b+1)& (0+255),w,b
 41471  003440  11A6               	iorwf	(___fladd@b+2)& (0+255),w,b
 41472  003442  11A7               	iorwf	(___fladd@b+3)& (0+255),w,b
 41473  003444  B4D8               	btfsc	status,2,c
 41474  003446  D002               	goto	u51620
 41475  003448  0E01               	movlw	1
 41476  00344A  D001               	goto	u51630
 41477  00344C                     u51620:
 41478  00344C  0E00               	movlw	0
 41479  00344E                     u51630:
 41480  00344E  6FB7               	movwf	___fladd@grs& (0+255),b
 41481                           
 41482                           ; BSR set to: 0
 41483  003450  0E00               	movlw	0
 41484  003452  6FA4               	movwf	___fladd@b& (0+255),b
 41485  003454  0E00               	movlw	0
 41486  003456  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 41487  003458  0E00               	movlw	0
 41488  00345A  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 41489  00345C  0E00               	movlw	0
 41490  00345E  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 41491                           
 41492                           ; BSR set to: 0
 41493  003460  C0B5  F0B6         	movff	___fladd@aexp,___fladd@bexp
 41494  003464  D015               	goto	u51660
 41495  003466                     l6092:
 41496                           
 41497                           ; BSR set to: 0
 41498  003466  A1B7               	btfss	___fladd@grs& (0+255),0,b
 41499  003468  D005               	goto	l6093
 41500                           
 41501                           ; BSR set to: 0
 41502  00346A  90D8               	bcf	status,0,c
 41503  00346C  31B7               	rrcf	___fladd@grs& (0+255),w,b
 41504  00346E  0901               	iorlw	1
 41505  003470  6FB7               	movwf	___fladd@grs& (0+255),b
 41506  003472  D002               	goto	l6094
 41507  003474                     l6093:
 41508                           
 41509                           ; BSR set to: 0
 41510                           
 41511                           ; BSR set to: 0
 41512  003474  90D8               	bcf	status,0,c
 41513  003476  33B7               	rrcf	___fladd@grs& (0+255),f,b
 41514  003478                     l6094:
 41515                           
 41516                           ; BSR set to: 0
 41517                           
 41518                           ; BSR set to: 0
 41519  003478  B1A4               	btfsc	___fladd@b& (0+255),0,b
 41520                           
 41521                           ; BSR set to: 0
 41522  00347A  8FB7               	bsf	___fladd@grs& (0+255),7,b
 41523                           
 41524                           ; BSR set to: 0
 41525                           
 41526                           ; BSR set to: 0
 41527  00347C  35A7               	rlcf	(___fladd@b+3)& (0+255),w,b
 41528  00347E  33A7               	rrcf	(___fladd@b+3)& (0+255),f,b
 41529  003480  33A6               	rrcf	(___fladd@b+2)& (0+255),f,b
 41530  003482  33A5               	rrcf	(___fladd@b+1)& (0+255),f,b
 41531  003484  33A4               	rrcf	___fladd@b& (0+255),f,b
 41532                           
 41533                           ; BSR set to: 0
 41534  003486  2BB6               	incf	___fladd@bexp& (0+255),f,b
 41535  003488                     l6091:
 41536                           
 41537                           ; BSR set to: 0
 41538  003488  51B5               	movf	___fladd@aexp& (0+255),w,b
 41539  00348A  5DB6               	subwf	___fladd@bexp& (0+255),w,b
 41540  00348C  A0D8               	btfss	status,0,c
 41541  00348E  D7EB               	goto	l6092
 41542  003490                     u51660:
 41543                           
 41544                           ; BSR set to: 0
 41545                           
 41546                           ; BSR set to: 0
 41547  003490  BDB4               	btfsc	___fladd@signs& (0+255),6,b
 41548  003492  D029               	goto	l6097
 41549                           
 41550                           ; BSR set to: 0
 41551  003494  51B6               	movf	___fladd@bexp& (0+255),w,b
 41552  003496  A4D8               	btfss	status,2,c
 41553  003498  D009               	goto	l6098
 41554                           
 41555                           ; BSR set to: 0
 41556  00349A  0E00               	movlw	0
 41557  00349C  6FA4               	movwf	?___fladd& (0+255),b
 41558  00349E  0E00               	movlw	0
 41559  0034A0  6FA5               	movwf	(?___fladd+1)& (0+255),b
 41560  0034A2  0E00               	movlw	0
 41561  0034A4  6FA6               	movwf	(?___fladd+2)& (0+255),b
 41562  0034A6  0E00               	movlw	0
 41563  0034A8  6FA7               	movwf	(?___fladd+3)& (0+255),b
 41564                           
 41565                           ; BSR set to: 0
 41566  0034AA  0012               	return	
 41567  0034AC                     l6098:
 41568                           
 41569                           ; BSR set to: 0
 41570                           
 41571                           ; BSR set to: 0
 41572  0034AC  51A8               	movf	___fladd@a& (0+255),w,b
 41573  0034AE  27A4               	addwf	___fladd@b& (0+255),f,b
 41574  0034B0  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 41575  0034B2  23A5               	addwfc	(___fladd@b+1)& (0+255),f,b
 41576  0034B4  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 41577  0034B6  23A6               	addwfc	(___fladd@b+2)& (0+255),f,b
 41578  0034B8  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 41579  0034BA  23A7               	addwfc	(___fladd@b+3)& (0+255),f,b
 41580                           
 41581                           ; BSR set to: 0
 41582  0034BC  A1A7               	btfss	(___fladd@b+3)& (0+255),0,b
 41583  0034BE  D083               	goto	u51790
 41584                           
 41585                           ; BSR set to: 0
 41586  0034C0  A1B7               	btfss	___fladd@grs& (0+255),0,b
 41587  0034C2  D006               	goto	l6101
 41588                           
 41589                           ; BSR set to: 0
 41590  0034C4  90D8               	bcf	status,0,c
 41591  0034C6  33B7               	rrcf	___fladd@grs& (0+255),f,b
 41592  0034C8  51B7               	movf	___fladd@grs& (0+255),w,b
 41593  0034CA  0901               	iorlw	1
 41594  0034CC  6FB7               	movwf	___fladd@grs& (0+255),b
 41595  0034CE  D002               	goto	l6102
 41596  0034D0                     l6101:
 41597                           
 41598                           ; BSR set to: 0
 41599                           
 41600                           ; BSR set to: 0
 41601  0034D0  90D8               	bcf	status,0,c
 41602  0034D2  33B7               	rrcf	___fladd@grs& (0+255),f,b
 41603  0034D4                     l6102:
 41604                           
 41605                           ; BSR set to: 0
 41606                           
 41607                           ; BSR set to: 0
 41608  0034D4  B1A4               	btfsc	___fladd@b& (0+255),0,b
 41609                           
 41610                           ; BSR set to: 0
 41611  0034D6  8FB7               	bsf	___fladd@grs& (0+255),7,b
 41612                           
 41613                           ; BSR set to: 0
 41614                           
 41615                           ; BSR set to: 0
 41616  0034D8  35A7               	rlcf	(___fladd@b+3)& (0+255),w,b
 41617  0034DA  33A7               	rrcf	(___fladd@b+3)& (0+255),f,b
 41618  0034DC  33A6               	rrcf	(___fladd@b+2)& (0+255),f,b
 41619  0034DE  33A5               	rrcf	(___fladd@b+1)& (0+255),f,b
 41620  0034E0  33A4               	rrcf	___fladd@b& (0+255),f,b
 41621                           
 41622                           ; BSR set to: 0
 41623  0034E2  2BB6               	incf	___fladd@bexp& (0+255),f,b
 41624                           
 41625                           ; BSR set to: 0
 41626  0034E4  D070               	goto	u51790
 41627  0034E6                     l6097:
 41628                           
 41629                           ; BSR set to: 0
 41630                           
 41631                           ; BSR set to: 0
 41632  0034E6  51A8               	movf	___fladd@a& (0+255),w,b
 41633  0034E8  5DA4               	subwf	___fladd@b& (0+255),w,b
 41634  0034EA  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 41635  0034EC  59A5               	subwfb	(___fladd@b+1)& (0+255),w,b
 41636  0034EE  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 41637  0034F0  59A6               	subwfb	(___fladd@b+2)& (0+255),w,b
 41638  0034F2  51A7               	movf	(___fladd@b+3)& (0+255),w,b
 41639  0034F4  0A80               	xorlw	128
 41640  0034F6  6FAC               	movwf	??___fladd& (0+255),b
 41641  0034F8  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 41642  0034FA  0A80               	xorlw	128
 41643  0034FC  59AC               	subwfb	??___fladd& (0+255),w,b
 41644  0034FE  B0D8               	btfsc	status,0,c
 41645  003500  D036               	goto	l6105
 41646                           
 41647                           ; BSR set to: 0
 41648  003502  C0A4  F0AC         	movff	___fladd@b,??___fladd
 41649  003506  C0A5  F0AD         	movff	___fladd@b+1,??___fladd+1
 41650  00350A  C0A6  F0AE         	movff	___fladd@b+2,??___fladd+2
 41651  00350E  C0A7  F0AF         	movff	___fladd@b+3,??___fladd+3
 41652  003512  1FAC               	comf	??___fladd& (0+255),f,b
 41653  003514  1FAD               	comf	(??___fladd+1)& (0+255),f,b
 41654  003516  1FAE               	comf	(??___fladd+2)& (0+255),f,b
 41655  003518  1FAF               	comf	(??___fladd+3)& (0+255),f,b
 41656  00351A  2BAC               	incf	??___fladd& (0+255),f,b
 41657  00351C  0E00               	movlw	0
 41658  00351E  23AD               	addwfc	(??___fladd+1)& (0+255),f,b
 41659  003520  23AE               	addwfc	(??___fladd+2)& (0+255),f,b
 41660  003522  23AF               	addwfc	(??___fladd+3)& (0+255),f,b
 41661  003524  51A8               	movf	___fladd@a& (0+255),w,b
 41662  003526  25AC               	addwf	??___fladd& (0+255),w,b
 41663  003528  6FB0               	movwf	(??___fladd+4)& (0+255),b
 41664  00352A  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 41665  00352C  21AD               	addwfc	(??___fladd+1)& (0+255),w,b
 41666  00352E  6FB1               	movwf	(??___fladd+5)& (0+255),b
 41667  003530  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 41668  003532  21AE               	addwfc	(??___fladd+2)& (0+255),w,b
 41669  003534  6FB2               	movwf	(??___fladd+6)& (0+255),b
 41670  003536  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 41671  003538  21AF               	addwfc	(??___fladd+3)& (0+255),w,b
 41672  00353A  6FB3               	movwf	(??___fladd+7)& (0+255),b
 41673  00353C  0EFF               	movlw	255
 41674  00353E  25B0               	addwf	(??___fladd+4)& (0+255),w,b
 41675  003540  6FA4               	movwf	___fladd@b& (0+255),b
 41676  003542  0EFF               	movlw	255
 41677  003544  21B1               	addwfc	(??___fladd+5)& (0+255),w,b
 41678  003546  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 41679  003548  0EFF               	movlw	255
 41680  00354A  21B2               	addwfc	(??___fladd+6)& (0+255),w,b
 41681  00354C  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 41682  00354E  0EFF               	movlw	255
 41683  003550  21B3               	addwfc	(??___fladd+7)& (0+255),w,b
 41684  003552  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 41685  003554  0E80               	movlw	128
 41686  003556  1BB4               	xorwf	___fladd@signs& (0+255),f,b
 41687                           
 41688                           ; BSR set to: 0
 41689  003558  6DB7               	negf	___fladd@grs& (0+255),b
 41690                           
 41691                           ; BSR set to: 0
 41692  00355A  51B7               	movf	___fladd@grs& (0+255),w,b
 41693  00355C  A4D8               	btfss	status,2,c
 41694  00355E  D00F               	goto	l6107
 41695                           
 41696                           ; BSR set to: 0
 41697  003560  0E01               	movlw	1
 41698  003562  27A4               	addwf	___fladd@b& (0+255),f,b
 41699  003564  0E00               	movlw	0
 41700  003566  23A5               	addwfc	(___fladd@b+1)& (0+255),f,b
 41701  003568  23A6               	addwfc	(___fladd@b+2)& (0+255),f,b
 41702  00356A  23A7               	addwfc	(___fladd@b+3)& (0+255),f,b
 41703                           
 41704                           ; BSR set to: 0
 41705  00356C  D008               	goto	l6107
 41706  00356E                     l6105:
 41707                           
 41708                           ; BSR set to: 0
 41709                           
 41710                           ; BSR set to: 0
 41711  00356E  51A8               	movf	___fladd@a& (0+255),w,b
 41712  003570  5FA4               	subwf	___fladd@b& (0+255),f,b
 41713  003572  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 41714  003574  5BA5               	subwfb	(___fladd@b+1)& (0+255),f,b
 41715  003576  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 41716  003578  5BA6               	subwfb	(___fladd@b+2)& (0+255),f,b
 41717  00357A  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 41718  00357C  5BA7               	subwfb	(___fladd@b+3)& (0+255),f,b
 41719  00357E                     l6107:
 41720                           
 41721                           ; BSR set to: 0
 41722  00357E  51A4               	movf	___fladd@b& (0+255),w,b
 41723  003580  11A5               	iorwf	(___fladd@b+1)& (0+255),w,b
 41724  003582  11A6               	iorwf	(___fladd@b+2)& (0+255),w,b
 41725  003584  11A7               	iorwf	(___fladd@b+3)& (0+255),w,b
 41726  003586  A4D8               	btfss	status,2,c
 41727  003588  D01C               	goto	l6114
 41728                           
 41729                           ; BSR set to: 0
 41730  00358A  51B7               	movf	___fladd@grs& (0+255),w,b
 41731  00358C  A4D8               	btfss	status,2,c
 41732  00358E  D019               	goto	l6114
 41733                           
 41734                           ; BSR set to: 0
 41735  003590  0E00               	movlw	0
 41736  003592  6FA4               	movwf	?___fladd& (0+255),b
 41737  003594  0E00               	movlw	0
 41738  003596  6FA5               	movwf	(?___fladd+1)& (0+255),b
 41739  003598  0E00               	movlw	0
 41740  00359A  6FA6               	movwf	(?___fladd+2)& (0+255),b
 41741  00359C  0E00               	movlw	0
 41742  00359E  6FA7               	movwf	(?___fladd+3)& (0+255),b
 41743                           
 41744                           ; BSR set to: 0
 41745  0035A0  0012               	return	
 41746  0035A2                     
 41747                           ; BSR set to: 0
 41748                           
 41749                           ; BSR set to: 0
 41750  0035A2  90D8               	bcf	status,0,c
 41751  0035A4  37A4               	rlcf	___fladd@b& (0+255),f,b
 41752  0035A6  37A5               	rlcf	(___fladd@b+1)& (0+255),f,b
 41753  0035A8  37A6               	rlcf	(___fladd@b+2)& (0+255),f,b
 41754  0035AA  37A7               	rlcf	(___fladd@b+3)& (0+255),f,b
 41755                           
 41756                           ; BSR set to: 0
 41757  0035AC  BFB7               	btfsc	___fladd@grs& (0+255),7,b
 41758                           
 41759                           ; BSR set to: 0
 41760  0035AE  81A4               	bsf	___fladd@b& (0+255),0,b
 41761                           
 41762                           ; BSR set to: 0
 41763                           
 41764                           ; BSR set to: 0
 41765  0035B0  A1B7               	btfss	___fladd@grs& (0+255),0,b
 41766  0035B2  D002               	goto	l6112
 41767                           
 41768                           ; BSR set to: 0
 41769  0035B4  80D8               	bsf	status,0,c
 41770  0035B6  D001               	goto	L25
 41771  0035B8                     l6112:
 41772                           
 41773                           ; BSR set to: 0
 41774                           
 41775                           ; BSR set to: 0
 41776  0035B8  90D8               	bcf	status,0,c
 41777  0035BA                     L25:
 41778  0035BA  37B7               	rlcf	___fladd@grs& (0+255),f,b
 41779                           
 41780                           ; BSR set to: 0
 41781                           
 41782                           ; BSR set to: 0
 41783  0035BC  51B6               	movf	___fladd@bexp& (0+255),w,b
 41784  0035BE  A4D8               	btfss	status,2,c
 41785                           
 41786                           ; BSR set to: 0
 41787  0035C0  07B6               	decf	___fladd@bexp& (0+255),f,b
 41788  0035C2                     l6114:
 41789                           
 41790                           ; BSR set to: 0
 41791                           
 41792                           ; BSR set to: 0
 41793                           
 41794                           ; BSR set to: 0
 41795  0035C2  AFA6               	btfss	(___fladd@b+2)& (0+255),7,b
 41796  0035C4  D7EE               	goto	l6110
 41797  0035C6                     u51790:
 41798                           
 41799                           ; BSR set to: 0
 41800                           
 41801                           ; BSR set to: 0
 41802                           
 41803                           ; BSR set to: 0
 41804  0035C6  0E00               	movlw	0
 41805  0035C8  6FB5               	movwf	___fladd@aexp& (0+255),b
 41806                           
 41807                           ; BSR set to: 0
 41808  0035CA  AFB7               	btfss	___fladd@grs& (0+255),7,b
 41809  0035CC  D00A               	goto	l6119
 41810                           
 41811                           ; BSR set to: 0
 41812  0035CE  C0B7  F0AC         	movff	___fladd@grs,??___fladd
 41813  0035D2  0E7F               	movlw	127
 41814  0035D4  17AC               	andwf	??___fladd& (0+255),f,b
 41815  0035D6  A4D8               	btfss	status,2,c
 41816  0035D8  D002               	goto	u51820
 41817                           
 41818                           ; BSR set to: 0
 41819                           
 41820                           ; BSR set to: 0
 41821  0035DA  A1A4               	btfss	___fladd@b& (0+255),0,b
 41822  0035DC  D002               	goto	l6119
 41823  0035DE                     u51820:
 41824                           
 41825                           ; BSR set to: 0
 41826  0035DE  0E01               	movlw	1
 41827  0035E0  6FB5               	movwf	___fladd@aexp& (0+255),b
 41828  0035E2                     l6119:
 41829                           
 41830                           ; BSR set to: 0
 41831                           
 41832                           ; BSR set to: 0
 41833                           
 41834                           ; BSR set to: 0
 41835  0035E2  51B5               	movf	___fladd@aexp& (0+255),w,b
 41836  0035E4  B4D8               	btfsc	status,2,c
 41837  0035E6  D020               	goto	l6122
 41838                           
 41839                           ; BSR set to: 0
 41840  0035E8  0E01               	movlw	1
 41841  0035EA  27A4               	addwf	___fladd@b& (0+255),f,b
 41842  0035EC  0E00               	movlw	0
 41843  0035EE  23A5               	addwfc	(___fladd@b+1)& (0+255),f,b
 41844  0035F0  23A6               	addwfc	(___fladd@b+2)& (0+255),f,b
 41845  0035F2  23A7               	addwfc	(___fladd@b+3)& (0+255),f,b
 41846                           
 41847                           ; BSR set to: 0
 41848  0035F4  A1A7               	btfss	(___fladd@b+3)& (0+255),0,b
 41849  0035F6  D018               	goto	l6122
 41850                           
 41851                           ; BSR set to: 0
 41852  0035F8  C0A4  F0AC         	movff	___fladd@b,??___fladd
 41853  0035FC  C0A5  F0AD         	movff	___fladd@b+1,??___fladd+1
 41854  003600  C0A6  F0AE         	movff	___fladd@b+2,??___fladd+2
 41855  003604  C0A7  F0AF         	movff	___fladd@b+3,??___fladd+3
 41856  003608  35AF               	rlcf	(??___fladd+3)& (0+255),w,b
 41857  00360A  33AF               	rrcf	(??___fladd+3)& (0+255),f,b
 41858  00360C  33AE               	rrcf	(??___fladd+2)& (0+255),f,b
 41859  00360E  33AD               	rrcf	(??___fladd+1)& (0+255),f,b
 41860  003610  33AC               	rrcf	??___fladd& (0+255),f,b
 41861  003612  C0AC  F0A4         	movff	??___fladd,___fladd@b
 41862  003616  C0AD  F0A5         	movff	??___fladd+1,___fladd@b+1
 41863  00361A  C0AE  F0A6         	movff	??___fladd+2,___fladd@b+2
 41864  00361E  C0AF  F0A7         	movff	??___fladd+3,___fladd@b+3
 41865  003622  29B6               	incf	___fladd@bexp& (0+255),w,b
 41866  003624  A4D8               	btfss	status,2,c
 41867                           
 41868                           ; BSR set to: 0
 41869  003626  2BB6               	incf	___fladd@bexp& (0+255),f,b
 41870  003628                     l6122:
 41871                           
 41872                           ; BSR set to: 0
 41873                           
 41874                           ; BSR set to: 0
 41875                           
 41876                           ; BSR set to: 0
 41877                           
 41878                           ; BSR set to: 0
 41879  003628  29B6               	incf	___fladd@bexp& (0+255),w,b
 41880  00362A  B4D8               	btfsc	status,2,c
 41881  00362C  D003               	goto	u51870
 41882                           
 41883                           ; BSR set to: 0
 41884  00362E  51B6               	movf	___fladd@bexp& (0+255),w,b
 41885  003630  A4D8               	btfss	status,2,c
 41886  003632  D00D               	goto	l6126
 41887  003634                     u51870:
 41888                           
 41889                           ; BSR set to: 0
 41890                           
 41891                           ; BSR set to: 0
 41892  003634  0E00               	movlw	0
 41893  003636  6FA4               	movwf	___fladd@b& (0+255),b
 41894  003638  0E00               	movlw	0
 41895  00363A  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 41896  00363C  0E00               	movlw	0
 41897  00363E  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 41898  003640  0E00               	movlw	0
 41899  003642  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 41900  003644  51B6               	movf	___fladd@bexp& (0+255),w,b
 41901  003646  A4D8               	btfss	status,2,c
 41902  003648  D002               	goto	l6126
 41903                           
 41904                           ; BSR set to: 0
 41905  00364A  0E00               	movlw	0
 41906  00364C  6FB4               	movwf	___fladd@signs& (0+255),b
 41907  00364E                     l6126:
 41908                           
 41909                           ; BSR set to: 0
 41910                           
 41911                           ; BSR set to: 0
 41912                           
 41913                           ; BSR set to: 0
 41914  00364E  A1B6               	btfss	___fladd@bexp& (0+255),0,b
 41915  003650  D002               	goto	l6127
 41916                           
 41917                           ; BSR set to: 0
 41918  003652  8FA6               	bsf	(___fladd@b+2)& (0+255),7,b
 41919  003654  D001               	goto	l6128
 41920  003656                     l6127:
 41921                           
 41922                           ; BSR set to: 0
 41923                           
 41924                           ; BSR set to: 0
 41925  003656  9FA6               	bcf	(___fladd@b+2)& (0+255),7,b
 41926  003658                     l6128:
 41927                           
 41928                           ; BSR set to: 0
 41929                           
 41930                           ; BSR set to: 0
 41931  003658  90D8               	bcf	status,0,c
 41932  00365A  31B6               	rrcf	___fladd@bexp& (0+255),w,b
 41933  00365C  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 41934                           
 41935                           ; BSR set to: 0
 41936  00365E  BFB4               	btfsc	___fladd@signs& (0+255),7,b
 41937                           
 41938                           ; BSR set to: 0
 41939  003660  8FA7               	bsf	(___fladd@b+3)& (0+255),7,b
 41940                           
 41941                           ; BSR set to: 0
 41942                           
 41943                           ; BSR set to: 0
 41944  003662  C0A4  F0A4         	movff	___fladd@b,?___fladd
 41945  003666  C0A5  F0A5         	movff	___fladd@b+1,?___fladd+1
 41946  00366A  C0A6  F0A6         	movff	___fladd@b+2,?___fladd+2
 41947  00366E  C0A7  F0A7         	movff	___fladd@b+3,?___fladd+3
 41948  003672  0012               	return	
 41949  003674                     __end_of___fladd:
 41950                           	opt stack 0
 41951                           tblptru	equ	0xFF8
 41952                           tblptrh	equ	0xFF7
 41953                           tblptrl	equ	0xFF6
 41954                           tablat	equ	0xFF5
 41955                           prodh	equ	0xFF4
 41956                           prodl	equ	0xFF3
 41957                           intcon	equ	0xFF2
 41958                           intcon2	equ	0xFF1
 41959                           indf0	equ	0xFEF
 41960                           postinc0	equ	0xFEE
 41961                           postdec0	equ	0xFED
 41962                           fsr0h	equ	0xFEA
 41963                           fsr0l	equ	0xFE9
 41964                           wreg	equ	0xFE8
 41965                           postinc1	equ	0xFE6
 41966                           postdec1	equ	0xFE5
 41967                           plusw1	equ	0xFE3
 41968                           fsr1h	equ	0xFE2
 41969                           fsr1l	equ	0xFE1
 41970                           indf2	equ	0xFDF
 41971                           postinc2	equ	0xFDE
 41972                           postdec2	equ	0xFDD
 41973                           plusw2	equ	0xFDB
 41974                           fsr2h	equ	0xFDA
 41975                           fsr2l	equ	0xFD9
 41976                           status	equ	0xFD8
 41977                           
 41978 ;; *************** function _ADC_Read *****************
 41979 ;; Defined at:
 41980 ;;		line 35 in file "adc.c"
 41981 ;; Parameters:    Size  Location     Type
 41982 ;;  adc_channel     1    wreg     unsigned char 
 41983 ;; Auto vars:     Size  Location     Type
 41984 ;;  adc_channel     1    4[BANK0 ] unsigned char 
 41985 ;; Return value:  Size  Location     Type
 41986 ;;                  2    0[BANK0 ] unsigned int 
 41987 ;; Registers used:
 41988 ;;		wreg, status,2, status,0
 41989 ;; Tracked objects:
 41990 ;;		On entry : 0/0
 41991 ;;		On exit  : 0/0
 41992 ;;		Unchanged: 0/0
 41993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 41994 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41995 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41996 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41997 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41998 ;;Total ram usage:        5 bytes
 41999 ;; Hardware stack levels used:    1
 42000 ;; Hardware stack levels required when called:    5
 42001 ;; This function calls:
 42002 ;;		Nothing
 42003 ;; This function is called by:
 42004 ;;		_readPotentiometers
 42005 ;; This function uses a non-reentrant model
 42006 ;;
 42007                           
 42008                           	psect	text121
 42009  009680                     __ptext121:
 42010                           	opt stack 0
 42011  009680                     _ADC_Read:
 42012                           	opt stack 20
 42013                           
 42014                           ; BSR set to: 0
 42015                           ;incstack = 0
 42016                           ;ADC_Read@adc_channel stored from wreg
 42017  009680  0100               	movlb	0	; () banked
 42018  009682  6F64               	movwf	ADC_Read@adc_channel& (0+255),b
 42019                           
 42020                           ;adc.c: 52: adc_channel &= 0x0F;
 42021  009684  0E0F               	movlw	15
 42022  009686  0100               	movlb	0	; () banked
 42023  009688  1764               	andwf	ADC_Read@adc_channel& (0+255),f,b
 42024                           
 42025                           ;adc.c: 53: ADCON0 &= 0x00000001;
 42026  00968A  0E01               	movlw	1
 42027  00968C  16C2               	andwf	4034,f,c	;volatile
 42028                           
 42029                           ;adc.c: 54: PORTA = (adc_channel << 1);
 42030  00968E  5164               	movf	ADC_Read@adc_channel& (0+255),w,b
 42031  009690  2564               	addwf	ADC_Read@adc_channel& (0+255),w,b
 42032  009692  6E80               	movwf	3968,c	;volatile
 42033                           
 42034                           ; BSR set to: 0
 42035                           ;adc.c: 56: _delay((unsigned long)((20)*(20000000/4000000.0)));
 42036  009694  0E21               	movlw	33
 42037  009696                     u67217:
 42038  009696  2EE8               	decfsz	wreg,f,c
 42039  009698  D7FE               	bra	u67217
 42040  00969A  F000               	nop	
 42041                           
 42042                           ;adc.c: 57: GO_nDONE = 1;
 42043  00969C  82C2               	bsf	4034,1,c	;volatile
 42044  00969E  B2C2               	btfsc	4034,1,c	;volatile
 42045  0096A0  D7FE               	goto	l94
 42046                           
 42047                           ;adc.c: 59: return ((ADRESH<<8)+ADRESL);
 42048  0096A2  50C4               	movf	4036,w,c	;volatile
 42049  0096A4  0100               	movlb	0	; () banked
 42050  0096A6  6F63               	movwf	(??_ADC_Read+1)& (0+255),b
 42051  0096A8  6B62               	clrf	??_ADC_Read& (0+255),b
 42052  0096AA  50C3               	movf	4035,w,c	;volatile
 42053  0096AC  2562               	addwf	??_ADC_Read& (0+255),w,b
 42054  0096AE  6F60               	movwf	?_ADC_Read& (0+255),b
 42055  0096B0  0E00               	movlw	0
 42056  0096B2  2163               	addwfc	(??_ADC_Read+1)& (0+255),w,b
 42057  0096B4  6F61               	movwf	(?_ADC_Read+1)& (0+255),b
 42058  0096B6  0012               	return	
 42059  0096B8                     __end_of_ADC_Read:
 42060                           	opt stack 0
 42061                           tblptru	equ	0xFF8
 42062                           tblptrh	equ	0xFF7
 42063                           tblptrl	equ	0xFF6
 42064                           tablat	equ	0xFF5
 42065                           prodh	equ	0xFF4
 42066                           prodl	equ	0xFF3
 42067                           intcon	equ	0xFF2
 42068                           intcon2	equ	0xFF1
 42069                           indf0	equ	0xFEF
 42070                           postinc0	equ	0xFEE
 42071                           postdec0	equ	0xFED
 42072                           fsr0h	equ	0xFEA
 42073                           fsr0l	equ	0xFE9
 42074                           wreg	equ	0xFE8
 42075                           postinc1	equ	0xFE6
 42076                           postdec1	equ	0xFE5
 42077                           plusw1	equ	0xFE3
 42078                           fsr1h	equ	0xFE2
 42079                           fsr1l	equ	0xFE1
 42080                           indf2	equ	0xFDF
 42081                           postinc2	equ	0xFDE
 42082                           postdec2	equ	0xFDD
 42083                           plusw2	equ	0xFDB
 42084                           fsr2h	equ	0xFDA
 42085                           fsr2l	equ	0xFD9
 42086                           status	equ	0xFD8
 42087                           
 42088 ;; *************** function _clear_row2 *****************
 42089 ;; Defined at:
 42090 ;;		line 79 in file "menu.c"
 42091 ;; Parameters:    Size  Location     Type
 42092 ;;		None
 42093 ;; Auto vars:     Size  Location     Type
 42094 ;;		None
 42095 ;; Return value:  Size  Location     Type
 42096 ;;                  1    wreg      void 
 42097 ;; Registers used:
 42098 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 42099 ;; Tracked objects:
 42100 ;;		On entry : 0/0
 42101 ;;		On exit  : 0/0
 42102 ;;		Unchanged: 0/0
 42103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42108 ;;Total ram usage:        0 bytes
 42109 ;; Hardware stack levels used:    1
 42110 ;; Hardware stack levels required when called:    8
 42111 ;; This function calls:
 42112 ;;		_Lcd_Print_String
 42113 ;;		_Lcd_Set_Cursor
 42114 ;; This function is called by:
 42115 ;;		_Function_A_1
 42116 ;;		_Function_A_2
 42117 ;;		_Function_A_3
 42118 ;;		_Function_A
 42119 ;;		_Function_B
 42120 ;;		_Function_C_1
 42121 ;;		_Function_C_2
 42122 ;;		_Function_C_3
 42123 ;;		_Function_C
 42124 ;;		_Function_D_1
 42125 ;;		_Function_D_3
 42126 ;;		_Function_D_4
 42127 ;;		_Function_D_5
 42128 ;;		_Function_D
 42129 ;;		_Function_E
 42130 ;;		_Function_F
 42131 ;;		_Function_G_1
 42132 ;;		_Function_G_2
 42133 ;;		_Function_G_3
 42134 ;;		_Function_G_4
 42135 ;;		_Function_G
 42136 ;;		_Function_H
 42137 ;;		_Function_H_1
 42138 ;;		_Function_H_2
 42139 ;;		_Function_H_3
 42140 ;;		_Function_H_4
 42141 ;;		_Function_H_5
 42142 ;;		_Function_H_6_1
 42143 ;;		_Function_H_6_2
 42144 ;;		_Function_H_6
 42145 ;;		_Function_H_7
 42146 ;;		_Function_H_8_1
 42147 ;;		_Function_H_8_2
 42148 ;;		_Function_H_8
 42149 ;;		_Function_H_9_1
 42150 ;;		_Function_H_9_2
 42151 ;;		_Function_H_9_3
 42152 ;;		_Function_H_9_4
 42153 ;;		_Function_H_9
 42154 ;; This function uses a non-reentrant model
 42155 ;;
 42156                           
 42157                           	psect	text122
 42158  009808                     __ptext122:
 42159                           	opt stack 0
 42160  009808                     _clear_row2:
 42161                           	opt stack 20
 42162                           
 42163                           ;menu.c: 80: Lcd_Set_Cursor(2,1);
 42164                           
 42165                           ; BSR set to: 0
 42166                           ;incstack = 0
 42167  009808  0E01               	movlw	1
 42168  00980A  0100               	movlb	0	; () banked
 42169  00980C  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 42170  00980E  0E02               	movlw	2
 42171  009810  ECDF  F047         	call	_Lcd_Set_Cursor
 42172                           
 42173                           ;menu.c: 81: Lcd_Print_String("                ");
 42174  009814  0E64               	movlw	low STR_10
 42175  009816  0100               	movlb	0	; () banked
 42176  009818  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 42177  00981A  0EFD               	movlw	high STR_10
 42178  00981C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 42179  00981E  EC76  F042         	call	_Lcd_Print_String	;wreg free
 42180                           
 42181                           ;menu.c: 82: Lcd_Set_Cursor(2,1);
 42182  009822  0E01               	movlw	1
 42183  009824  0100               	movlb	0	; () banked
 42184  009826  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 42185  009828  0E02               	movlw	2
 42186  00982A  ECDF  F047         	call	_Lcd_Set_Cursor
 42187  00982E  0012               	return		;funcret
 42188  009830                     __end_of_clear_row2:
 42189                           	opt stack 0
 42190                           tblptru	equ	0xFF8
 42191                           tblptrh	equ	0xFF7
 42192                           tblptrl	equ	0xFF6
 42193                           tablat	equ	0xFF5
 42194                           prodh	equ	0xFF4
 42195                           prodl	equ	0xFF3
 42196                           intcon	equ	0xFF2
 42197                           intcon2	equ	0xFF1
 42198                           indf0	equ	0xFEF
 42199                           postinc0	equ	0xFEE
 42200                           postdec0	equ	0xFED
 42201                           fsr0h	equ	0xFEA
 42202                           fsr0l	equ	0xFE9
 42203                           wreg	equ	0xFE8
 42204                           postinc1	equ	0xFE6
 42205                           postdec1	equ	0xFE5
 42206                           plusw1	equ	0xFE3
 42207                           fsr1h	equ	0xFE2
 42208                           fsr1l	equ	0xFE1
 42209                           indf2	equ	0xFDF
 42210                           postinc2	equ	0xFDE
 42211                           postdec2	equ	0xFDD
 42212                           plusw2	equ	0xFDB
 42213                           fsr2h	equ	0xFDA
 42214                           fsr2l	equ	0xFD9
 42215                           status	equ	0xFD8
 42216                           
 42217 ;; *************** function _clear_row1 *****************
 42218 ;; Defined at:
 42219 ;;		line 72 in file "menu.c"
 42220 ;; Parameters:    Size  Location     Type
 42221 ;;		None
 42222 ;; Auto vars:     Size  Location     Type
 42223 ;;		None
 42224 ;; Return value:  Size  Location     Type
 42225 ;;                  1    wreg      void 
 42226 ;; Registers used:
 42227 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 42228 ;; Tracked objects:
 42229 ;;		On entry : 0/0
 42230 ;;		On exit  : 0/0
 42231 ;;		Unchanged: 0/0
 42232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42237 ;;Total ram usage:        0 bytes
 42238 ;; Hardware stack levels used:    1
 42239 ;; Hardware stack levels required when called:    8
 42240 ;; This function calls:
 42241 ;;		_Lcd_Print_String
 42242 ;;		_Lcd_Set_Cursor
 42243 ;; This function is called by:
 42244 ;;		_exitFunction
 42245 ;;		_exitSave
 42246 ;;		_exitLoad
 42247 ;;		_eepromExit
 42248 ;;		_Function_A_1
 42249 ;;		_Function_A_2
 42250 ;;		_Function_A_3
 42251 ;;		_Function_C_1
 42252 ;;		_Function_C_2
 42253 ;;		_Function_C_3
 42254 ;;		_Function_D_1
 42255 ;;		_Function_D_3
 42256 ;;		_Function_D_4
 42257 ;;		_Function_D_5
 42258 ;;		_Function_G_1
 42259 ;;		_Function_G_2
 42260 ;;		_Function_G_3
 42261 ;;		_Function_G_4
 42262 ;;		_Function_H_4
 42263 ;;		_Function_H_5
 42264 ;;		_Function_H_6_1
 42265 ;;		_Function_H_6_2
 42266 ;;		_Function_H_7
 42267 ;;		_Function_H_8_1
 42268 ;;		_Function_H_9_1
 42269 ;;		_Function_H_9_2
 42270 ;;		_Function_H_9_3
 42271 ;;		_Function_H_9_4
 42272 ;;		_Function_H_9
 42273 ;; This function uses a non-reentrant model
 42274 ;;
 42275                           
 42276                           	psect	text123
 42277  009830                     __ptext123:
 42278                           	opt stack 0
 42279  009830                     _clear_row1:
 42280                           	opt stack 20
 42281                           
 42282                           ;menu.c: 73: Lcd_Set_Cursor(1,1);
 42283                           
 42284                           ;incstack = 0
 42285  009830  0E01               	movlw	1
 42286  009832  0100               	movlb	0	; () banked
 42287  009834  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 42288  009836  0E01               	movlw	1
 42289  009838  ECDF  F047         	call	_Lcd_Set_Cursor
 42290                           
 42291                           ;menu.c: 74: Lcd_Print_String("                ");
 42292  00983C  0E64               	movlw	low STR_10
 42293  00983E  0100               	movlb	0	; () banked
 42294  009840  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 42295  009842  0EFD               	movlw	high STR_10
 42296  009844  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 42297  009846  EC76  F042         	call	_Lcd_Print_String	;wreg free
 42298                           
 42299                           ;menu.c: 75: Lcd_Set_Cursor(1,1);
 42300  00984A  0E01               	movlw	1
 42301  00984C  0100               	movlb	0	; () banked
 42302  00984E  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 42303  009850  0E01               	movlw	1
 42304  009852  ECDF  F047         	call	_Lcd_Set_Cursor
 42305  009856  0012               	return		;funcret
 42306  009858                     __end_of_clear_row1:
 42307                           	opt stack 0
 42308                           tblptru	equ	0xFF8
 42309                           tblptrh	equ	0xFF7
 42310                           tblptrl	equ	0xFF6
 42311                           tablat	equ	0xFF5
 42312                           prodh	equ	0xFF4
 42313                           prodl	equ	0xFF3
 42314                           intcon	equ	0xFF2
 42315                           intcon2	equ	0xFF1
 42316                           indf0	equ	0xFEF
 42317                           postinc0	equ	0xFEE
 42318                           postdec0	equ	0xFED
 42319                           fsr0h	equ	0xFEA
 42320                           fsr0l	equ	0xFE9
 42321                           wreg	equ	0xFE8
 42322                           postinc1	equ	0xFE6
 42323                           postdec1	equ	0xFE5
 42324                           plusw1	equ	0xFE3
 42325                           fsr1h	equ	0xFE2
 42326                           fsr1l	equ	0xFE1
 42327                           indf2	equ	0xFDF
 42328                           postinc2	equ	0xFDE
 42329                           postdec2	equ	0xFDD
 42330                           plusw2	equ	0xFDB
 42331                           fsr2h	equ	0xFDA
 42332                           fsr2l	equ	0xFD9
 42333                           status	equ	0xFD8
 42334                           
 42335 ;; *************** function _Lcd_Set_Cursor *****************
 42336 ;; Defined at:
 42337 ;;		line 66 in file "lcd.c"
 42338 ;; Parameters:    Size  Location     Type
 42339 ;;  a               1    wreg     unsigned char 
 42340 ;;  b               1    3[BANK0 ] unsigned char 
 42341 ;; Auto vars:     Size  Location     Type
 42342 ;;  a               1    4[BANK0 ] unsigned char 
 42343 ;;  temp            1    7[BANK0 ] unsigned char 
 42344 ;;  y               1    6[BANK0 ] unsigned char 
 42345 ;;  z               1    5[BANK0 ] unsigned char 
 42346 ;; Return value:  Size  Location     Type
 42347 ;;                  1    wreg      void 
 42348 ;; Registers used:
 42349 ;;		wreg, status,2, status,0, cstack
 42350 ;; Tracked objects:
 42351 ;;		On entry : 0/0
 42352 ;;		On exit  : 0/0
 42353 ;;		Unchanged: 0/0
 42354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42355 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42356 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42358 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42359 ;;Total ram usage:        5 bytes
 42360 ;; Hardware stack levels used:    1
 42361 ;; Hardware stack levels required when called:    7
 42362 ;; This function calls:
 42363 ;;		_Lcd_Cmd
 42364 ;; This function is called by:
 42365 ;;		_clear_row1
 42366 ;;		_clear_row2
 42367 ;;		_setControllerNumbers
 42368 ;;		_menu_lcd
 42369 ;;		_Function_C_2
 42370 ;;		_Function_C_3
 42371 ;;		_Function_D_2
 42372 ;;		_Function_E_1
 42373 ;;		_Function_E_2
 42374 ;;		_Function_F
 42375 ;;		_Function_H_2
 42376 ;;		_Function_H_3
 42377 ;; This function uses a non-reentrant model
 42378 ;;
 42379                           
 42380                           	psect	text124
 42381  008FBE                     __ptext124:
 42382                           	opt stack 0
 42383  008FBE                     _Lcd_Set_Cursor:
 42384                           	opt stack 20
 42385                           
 42386                           ;incstack = 0
 42387                           ;Lcd_Set_Cursor@a stored from wreg
 42388  008FBE  0100               	movlb	0	; () banked
 42389  008FC0  6F64               	movwf	Lcd_Set_Cursor@a& (0+255),b
 42390                           
 42391                           ;lcd.c: 69: TMR2ON = 0;
 42392  008FC2  94CA               	bcf	4042,2,c	;volatile
 42393                           
 42394                           ;lcd.c: 70: PORTC &= 0xF0;
 42395  008FC4  0EF0               	movlw	240
 42396  008FC6  1682               	andwf	3970,f,c	;volatile
 42397                           
 42398                           ;lcd.c: 72: char temp,z,y;
 42399                           ;lcd.c: 73: if(a== 1)
 42400  008FC8  0100               	movlb	0	; () banked
 42401  008FCA  0564               	decf	Lcd_Set_Cursor@a& (0+255),w,b
 42402  008FCC  A4D8               	btfss	status,2,c
 42403  008FCE  D011               	goto	l40
 42404                           
 42405                           ; BSR set to: 0
 42406                           ;lcd.c: 74: {
 42407                           ;lcd.c: 75: temp = 0x80 + b - 1;
 42408  008FD0  5163               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 42409  008FD2  0F7F               	addlw	127
 42410  008FD4  6F67               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 42411                           
 42412                           ;lcd.c: 76: z = temp>>4;
 42413  008FD6  3967               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 42414  008FD8  0B0F               	andlw	15
 42415  008FDA  6F65               	movwf	Lcd_Set_Cursor@z& (0+255),b
 42416                           
 42417                           ;lcd.c: 77: y = temp & 0x0F;
 42418  008FDC  5167               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 42419  008FDE  0B0F               	andlw	15
 42420  008FE0  6F66               	movwf	Lcd_Set_Cursor@y& (0+255),b
 42421                           
 42422                           ; BSR set to: 0
 42423                           ;lcd.c: 78: Lcd_Cmd(z);
 42424  008FE2  5165               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 42425  008FE4  EC40  F04C         	call	_Lcd_Cmd
 42426                           
 42427                           ;lcd.c: 79: Lcd_Cmd(y);
 42428  008FE8  0100               	movlb	0	; () banked
 42429  008FEA  5166               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 42430  008FEC  EC40  F04C         	call	_Lcd_Cmd
 42431                           
 42432                           ;lcd.c: 80: }
 42433  008FF0  D015               	goto	l42
 42434  008FF2                     l40:
 42435                           
 42436                           ;lcd.c: 81: else if(a== 2)
 42437  008FF2  0E02               	movlw	2
 42438  008FF4  0100               	movlb	0	; () banked
 42439  008FF6  1964               	xorwf	Lcd_Set_Cursor@a& (0+255),w,b
 42440  008FF8  A4D8               	btfss	status,2,c
 42441  008FFA  D010               	goto	l42
 42442                           
 42443                           ; BSR set to: 0
 42444                           ;lcd.c: 82: {
 42445                           ;lcd.c: 83: temp = 0xC0 + b - 1;
 42446  008FFC  5163               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 42447  008FFE  0FBF               	addlw	191
 42448  009000  6F67               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 42449                           
 42450                           ;lcd.c: 84: z = temp>>4;
 42451  009002  3967               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 42452  009004  0B0F               	andlw	15
 42453  009006  6F65               	movwf	Lcd_Set_Cursor@z& (0+255),b
 42454                           
 42455                           ;lcd.c: 85: y = temp & 0x0F;
 42456  009008  5167               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 42457  00900A  0B0F               	andlw	15
 42458  00900C  6F66               	movwf	Lcd_Set_Cursor@y& (0+255),b
 42459                           
 42460                           ; BSR set to: 0
 42461                           ;lcd.c: 86: Lcd_Cmd(z);
 42462  00900E  5165               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 42463  009010  EC40  F04C         	call	_Lcd_Cmd
 42464                           
 42465                           ;lcd.c: 87: Lcd_Cmd(y);
 42466  009014  0100               	movlb	0	; () banked
 42467  009016  5166               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 42468  009018  EC40  F04C         	call	_Lcd_Cmd
 42469  00901C                     l42:
 42470                           
 42471                           ;lcd.c: 88: }
 42472                           ;lcd.c: 91: TMR2ON = 1;
 42473  00901C  84CA               	bsf	4042,2,c	;volatile
 42474  00901E  0012               	return		;funcret
 42475  009020                     __end_of_Lcd_Set_Cursor:
 42476                           	opt stack 0
 42477                           tblptru	equ	0xFF8
 42478                           tblptrh	equ	0xFF7
 42479                           tblptrl	equ	0xFF6
 42480                           tablat	equ	0xFF5
 42481                           prodh	equ	0xFF4
 42482                           prodl	equ	0xFF3
 42483                           intcon	equ	0xFF2
 42484                           intcon2	equ	0xFF1
 42485                           indf0	equ	0xFEF
 42486                           postinc0	equ	0xFEE
 42487                           postdec0	equ	0xFED
 42488                           fsr0h	equ	0xFEA
 42489                           fsr0l	equ	0xFE9
 42490                           wreg	equ	0xFE8
 42491                           postinc1	equ	0xFE6
 42492                           postdec1	equ	0xFE5
 42493                           plusw1	equ	0xFE3
 42494                           fsr1h	equ	0xFE2
 42495                           fsr1l	equ	0xFE1
 42496                           indf2	equ	0xFDF
 42497                           postinc2	equ	0xFDE
 42498                           postdec2	equ	0xFDD
 42499                           plusw2	equ	0xFDB
 42500                           fsr2h	equ	0xFDA
 42501                           fsr2l	equ	0xFD9
 42502                           status	equ	0xFD8
 42503                           
 42504 ;; *************** function _Lcd_Print_String *****************
 42505 ;; Defined at:
 42506 ;;		line 128 in file "lcd.c"
 42507 ;; Parameters:    Size  Location     Type
 42508 ;;  a               2    8[BANK0 ] PTR unsigned char 
 42509 ;;		 -> STR_75(16), STR_74(12), STR_73(10), STR_72(12), 
 42510 ;;		 -> STR_71(10), STR_70(12), STR_69(10), STR_68(12), 
 42511 ;;		 -> STR_67(10), STR_66(12), STR_65(13), STR_64(15), 
 42512 ;;		 -> STR_63(15), STR_62(16), STR_60(14), STR_58(12), 
 42513 ;;		 -> STR_57(15), STR_55(14), STR_53(15), STR_52(17), 
 42514 ;;		 -> STR_51(9), STR_50(10), STR_49(13), STR_48(13), 
 42515 ;;		 -> STR_47(17), STR_46(14), STR_45(14), STR_42(15), 
 42516 ;;		 -> STR_40(16), STR_39(17), STR_38(13), STR_37(17), 
 42517 ;;		 -> STR_36(8), STR_35(8), STR_34(12), STR_33(17), 
 42518 ;;		 -> STR_32(15), STR_31(14), STR_30(17), STR_29(15), 
 42519 ;;		 -> STR_28(17), STR_27(14), STR_26(16), STR_25(14), 
 42520 ;;		 -> STR_24(12), LCD_STRINGS(2397), STR_23(13), STR_22(17), 
 42521 ;;		 -> STR_21(16), STR_20(5), STR_19(11), STR_18(11), 
 42522 ;;		 -> STR_17(11), STR_16(10), STR_15(11), STR_14(11), 
 42523 ;;		 -> STR_13(11), STR_12(10), string2display(5), STR_11(17), 
 42524 ;;		 -> STR_10(17), 
 42525 ;; Auto vars:     Size  Location     Type
 42526 ;;  i               2   12[BANK0 ] int 
 42527 ;; Return value:  Size  Location     Type
 42528 ;;                  1    wreg      void 
 42529 ;; Registers used:
 42530 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 42531 ;; Tracked objects:
 42532 ;;		On entry : 0/0
 42533 ;;		On exit  : 0/0
 42534 ;;		Unchanged: 0/0
 42535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42536 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42537 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42538 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42539 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42540 ;;Total ram usage:        6 bytes
 42541 ;; Hardware stack levels used:    1
 42542 ;; Hardware stack levels required when called:    7
 42543 ;; This function calls:
 42544 ;;		_Lcd_Print_Char
 42545 ;; This function is called by:
 42546 ;;		_clear_row1
 42547 ;;		_clear_row2
 42548 ;;		_setControllerNumbers
 42549 ;;		_exitFunction
 42550 ;;		_exitSave
 42551 ;;		_exitLoad
 42552 ;;		_eepromExit
 42553 ;;		_menu_lcd
 42554 ;;		_Function_A_1
 42555 ;;		_Function_A_2
 42556 ;;		_Function_A_3
 42557 ;;		_Function_A
 42558 ;;		_Function_B
 42559 ;;		_Function_C_1
 42560 ;;		_Function_C_2
 42561 ;;		_Function_C_3
 42562 ;;		_Function_C
 42563 ;;		_Function_D_1
 42564 ;;		_Function_D_2
 42565 ;;		_Function_D_3
 42566 ;;		_Function_D_4
 42567 ;;		_Function_D_5
 42568 ;;		_Function_D
 42569 ;;		_Function_E_1
 42570 ;;		_Function_E_2
 42571 ;;		_Function_E
 42572 ;;		_Function_F
 42573 ;;		_Function_G_1
 42574 ;;		_Function_G_2
 42575 ;;		_Function_G_3
 42576 ;;		_Function_G_4
 42577 ;;		_Function_G
 42578 ;;		_Function_H
 42579 ;;		_Function_H_1
 42580 ;;		_Function_H_2
 42581 ;;		_Function_H_3
 42582 ;;		_Function_H_4
 42583 ;;		_Function_H_5
 42584 ;;		_Function_H_6_1
 42585 ;;		_Function_H_6_2
 42586 ;;		_Function_H_6
 42587 ;;		_Function_H_7
 42588 ;;		_Function_H_8_1
 42589 ;;		_Function_H_8_2
 42590 ;;		_Function_H_8
 42591 ;;		_Function_H_9_1
 42592 ;;		_Function_H_9_2
 42593 ;;		_Function_H_9_3
 42594 ;;		_Function_H_9_4
 42595 ;;		_Function_H_9
 42596 ;; This function uses a non-reentrant model
 42597 ;;
 42598                           
 42599                           	psect	text125
 42600  0084EC                     __ptext125:
 42601                           	opt stack 0
 42602  0084EC                     _Lcd_Print_String:
 42603                           	opt stack 20
 42604                           
 42605                           ;lcd.c: 131: TMR2ON = 0;
 42606                           
 42607                           ;incstack = 0
 42608  0084EC  94CA               	bcf	4042,2,c	;volatile
 42609                           
 42610                           ;lcd.c: 132: PORTC &= 0xF0;
 42611  0084EE  0EF0               	movlw	240
 42612  0084F0  1682               	andwf	3970,f,c	;volatile
 42613                           
 42614                           ;lcd.c: 134: int i;
 42615                           ;lcd.c: 135: for(i=0;a[i]!='\0';i++)
 42616  0084F2  0E00               	movlw	0
 42617  0084F4  0100               	movlb	0	; () banked
 42618  0084F6  6F6D               	movwf	(Lcd_Print_String@i+1)& (0+255),b
 42619  0084F8  0E00               	movlw	0
 42620  0084FA  6F6C               	movwf	Lcd_Print_String@i& (0+255),b
 42621  0084FC  D01D               	goto	l58
 42622  0084FE                     
 42623                           ;lcd.c: 136: Lcd_Print_Char(a[i]);
 42624                           
 42625                           ; BSR set to: 0
 42626  0084FE  0100               	movlb	0	; () banked
 42627  008500  516C               	movf	Lcd_Print_String@i& (0+255),w,b
 42628  008502  2568               	addwf	Lcd_Print_String@a& (0+255),w,b
 42629  008504  6F6A               	movwf	??_Lcd_Print_String& (0+255),b
 42630  008506  516D               	movf	(Lcd_Print_String@i+1)& (0+255),w,b
 42631  008508  2169               	addwfc	(Lcd_Print_String@a+1)& (0+255),w,b
 42632  00850A  6F6B               	movwf	(??_Lcd_Print_String+1)& (0+255),b
 42633  00850C  C06A  FFF6         	movff	??_Lcd_Print_String,tblptrl
 42634  008510  C06B  FFF7         	movff	??_Lcd_Print_String+1,tblptrh
 42635  008514  0E00               	movlw	low (__mediumconst shr (0+16))
 42636  008516  6EF8               	movwf	tblptru,c
 42637  008518  0E0C               	movlw	(high __ramtop+-1)
 42638  00851A  64F7               	cpfsgt	tblptrh,c
 42639  00851C  D003               	bra	u54907
 42640  00851E  0008               	tblrd		*
 42641  008520  50F5               	movf	tablat,w,c
 42642  008522  D005               	bra	u54900
 42643  008524                     u54907:
 42644  008524  CFF6 FFE9          	movff	tblptrl,fsr0l
 42645  008528  CFF7 FFEA          	movff	tblptrh,fsr0h
 42646  00852C  50EF               	movf	indf0,w,c
 42647  00852E                     u54900:
 42648  00852E  ECB8  F042         	call	_Lcd_Print_Char
 42649  008532  0100               	movlb	0	; () banked
 42650  008534  4B6C               	infsnz	Lcd_Print_String@i& (0+255),f,b
 42651  008536  2B6D               	incf	(Lcd_Print_String@i+1)& (0+255),f,b
 42652  008538                     l58:
 42653                           
 42654                           ; BSR set to: 0
 42655                           
 42656                           ; BSR set to: 0
 42657  008538  516C               	movf	Lcd_Print_String@i& (0+255),w,b
 42658  00853A  2568               	addwf	Lcd_Print_String@a& (0+255),w,b
 42659  00853C  6F6A               	movwf	??_Lcd_Print_String& (0+255),b
 42660  00853E  516D               	movf	(Lcd_Print_String@i+1)& (0+255),w,b
 42661  008540  2169               	addwfc	(Lcd_Print_String@a+1)& (0+255),w,b
 42662  008542  6F6B               	movwf	(??_Lcd_Print_String+1)& (0+255),b
 42663  008544  C06A  FFF6         	movff	??_Lcd_Print_String,tblptrl
 42664  008548  C06B  FFF7         	movff	??_Lcd_Print_String+1,tblptrh
 42665  00854C  0E00               	movlw	low (__mediumconst shr (0+16))
 42666  00854E  6EF8               	movwf	tblptru,c
 42667  008550  0E0C               	movlw	(high __ramtop+-1)
 42668  008552  64F7               	cpfsgt	tblptrh,c
 42669  008554  D003               	bra	u54917
 42670  008556  0008               	tblrd		*
 42671  008558  50F5               	movf	tablat,w,c
 42672  00855A  D005               	bra	u54910
 42673  00855C                     u54917:
 42674  00855C  CFF6 FFE9          	movff	tblptrl,fsr0l
 42675  008560  CFF7 FFEA          	movff	tblptrh,fsr0h
 42676  008564  50EF               	movf	indf0,w,c
 42677  008566                     u54910:
 42678  008566  0900               	iorlw	0
 42679  008568  A4D8               	btfss	status,2,c
 42680  00856A  D7C9               	goto	l59
 42681                           
 42682                           ;lcd.c: 139: TMR2ON = 1;
 42683  00856C  84CA               	bsf	4042,2,c	;volatile
 42684  00856E  0012               	return		;funcret
 42685  008570                     __end_of_Lcd_Print_String:
 42686                           	opt stack 0
 42687                           tblptru	equ	0xFF8
 42688                           tblptrh	equ	0xFF7
 42689                           tblptrl	equ	0xFF6
 42690                           tablat	equ	0xFF5
 42691                           prodh	equ	0xFF4
 42692                           prodl	equ	0xFF3
 42693                           intcon	equ	0xFF2
 42694                           intcon2	equ	0xFF1
 42695                           indf0	equ	0xFEF
 42696                           postinc0	equ	0xFEE
 42697                           postdec0	equ	0xFED
 42698                           fsr0h	equ	0xFEA
 42699                           fsr0l	equ	0xFE9
 42700                           wreg	equ	0xFE8
 42701                           postinc1	equ	0xFE6
 42702                           postdec1	equ	0xFE5
 42703                           plusw1	equ	0xFE3
 42704                           fsr1h	equ	0xFE2
 42705                           fsr1l	equ	0xFE1
 42706                           indf2	equ	0xFDF
 42707                           postinc2	equ	0xFDE
 42708                           postdec2	equ	0xFDD
 42709                           plusw2	equ	0xFDB
 42710                           fsr2h	equ	0xFDA
 42711                           fsr2l	equ	0xFD9
 42712                           status	equ	0xFD8
 42713                           
 42714 ;; *************** function _Lcd_Print_Char *****************
 42715 ;; Defined at:
 42716 ;;		line 112 in file "lcd.c"
 42717 ;; Parameters:    Size  Location     Type
 42718 ;;  data            1    wreg     unsigned char 
 42719 ;; Auto vars:     Size  Location     Type
 42720 ;;  data            1    3[BANK0 ] unsigned char 
 42721 ;;  i               2    6[BANK0 ] int 
 42722 ;;  i               2    4[BANK0 ] int 
 42723 ;;  Upper_Nibble    1    2[BANK0 ] unsigned char 
 42724 ;;  Lower_Nibble    1    1[BANK0 ] unsigned char 
 42725 ;; Return value:  Size  Location     Type
 42726 ;;                  1    wreg      void 
 42727 ;; Registers used:
 42728 ;;		wreg, status,2, status,0, cstack
 42729 ;; Tracked objects:
 42730 ;;		On entry : 0/0
 42731 ;;		On exit  : 0/0
 42732 ;;		Unchanged: 0/0
 42733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42735 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42737 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42738 ;;Total ram usage:        7 bytes
 42739 ;; Hardware stack levels used:    1
 42740 ;; Hardware stack levels required when called:    6
 42741 ;; This function calls:
 42742 ;;		_Lcd_SetBit
 42743 ;; This function is called by:
 42744 ;;		_Lcd_Print_String
 42745 ;; This function uses a non-reentrant model
 42746 ;;
 42747                           
 42748                           	psect	text126
 42749  008570                     __ptext126:
 42750                           	opt stack 0
 42751  008570                     _Lcd_Print_Char:
 42752                           	opt stack 20
 42753                           
 42754                           ;incstack = 0
 42755                           ;Lcd_Print_Char@data stored from wreg
 42756  008570  0100               	movlb	0	; () banked
 42757  008572  6F63               	movwf	Lcd_Print_Char@data& (0+255),b
 42758                           
 42759                           ;lcd.c: 114: char Lower_Nibble,Upper_Nibble;
 42760                           ;lcd.c: 115: Lower_Nibble = data&0x0F;
 42761  008574  0100               	movlb	0	; () banked
 42762  008576  5163               	movf	Lcd_Print_Char@data& (0+255),w,b
 42763  008578  0B0F               	andlw	15
 42764  00857A  6F61               	movwf	Lcd_Print_Char@Lower_Nibble& (0+255),b
 42765                           
 42766                           ;lcd.c: 116: Upper_Nibble = data&0xF0;
 42767  00857C  5163               	movf	Lcd_Print_Char@data& (0+255),w,b
 42768  00857E  0BF0               	andlw	240
 42769  008580  6F62               	movwf	Lcd_Print_Char@Upper_Nibble& (0+255),b
 42770                           
 42771                           ; BSR set to: 0
 42772                           ;lcd.c: 117: RE0 = 1;
 42773  008582  8084               	bsf	3972,0,c	;volatile
 42774                           
 42775                           ; BSR set to: 0
 42776                           ;lcd.c: 118: Lcd_SetBit(Upper_Nibble>>4);
 42777  008584  3962               	swapf	Lcd_Print_Char@Upper_Nibble& (0+255),w,b
 42778  008586  0B0F               	andlw	15
 42779  008588  ECC1  F04B         	call	_Lcd_SetBit
 42780                           
 42781                           ;lcd.c: 119: RE1 = 1;
 42782  00858C  8284               	bsf	3972,1,c	;volatile
 42783                           
 42784                           ;lcd.c: 120: for(int i=2130483; i<=0; i--) __nop();
 42785  00858E  0E82               	movlw	130
 42786  008590  0100               	movlb	0	; () banked
 42787  008592  6F65               	movwf	(Lcd_Print_Char@i+1)& (0+255),b
 42788  008594  0E33               	movlw	51
 42789  008596  6F64               	movwf	Lcd_Print_Char@i& (0+255),b
 42790                           
 42791                           ; BSR set to: 0
 42792  008598  BF65               	btfsc	(Lcd_Print_Char@i+1)& (0+255),7,b
 42793  00859A  D003               	goto	l51
 42794  00859C  5165               	movf	(Lcd_Print_Char@i+1)& (0+255),w,b
 42795  00859E  E10D               	bnz	l52
 42796  0085A0  D009               	goto	L26
 42797  0085A2                     l51:
 42798                           
 42799                           ; BSR set to: 0
 42800  0085A2  F000               	nop	
 42801  0085A4  0100               	movlb	0	; () banked
 42802  0085A6  0764               	decf	Lcd_Print_Char@i& (0+255),f,b
 42803  0085A8  A0D8               	btfss	status,0,c
 42804  0085AA  0765               	decf	(Lcd_Print_Char@i+1)& (0+255),f,b
 42805                           
 42806                           ; BSR set to: 0
 42807  0085AC  BF65               	btfsc	(Lcd_Print_Char@i+1)& (0+255),7,b
 42808  0085AE  D7F9               	goto	l51
 42809  0085B0  5165               	movf	(Lcd_Print_Char@i+1)& (0+255),w,b
 42810  0085B2  E103               	bnz	u52290
 42811  0085B4                     L26:
 42812  0085B4  0564               	decf	Lcd_Print_Char@i& (0+255),w,b
 42813  0085B6  A0D8               	btfss	status,0,c
 42814  0085B8  D7F4               	goto	l51
 42815  0085BA                     u52290:
 42816  0085BA                     l52:
 42817                           
 42818                           ; BSR set to: 0
 42819                           ;lcd.c: 121: RE1 = 0;
 42820  0085BA  9284               	bcf	3972,1,c	;volatile
 42821                           
 42822                           ; BSR set to: 0
 42823                           ;lcd.c: 122: Lcd_SetBit(Lower_Nibble);
 42824  0085BC  5161               	movf	Lcd_Print_Char@Lower_Nibble& (0+255),w,b
 42825  0085BE  ECC1  F04B         	call	_Lcd_SetBit
 42826                           
 42827                           ;lcd.c: 123: RE1 = 1;
 42828  0085C2  8284               	bsf	3972,1,c	;volatile
 42829                           
 42830                           ;lcd.c: 124: for(int i=2130483; i<=0; i--) __nop();
 42831  0085C4  0E82               	movlw	130
 42832  0085C6  0100               	movlb	0	; () banked
 42833  0085C8  6F67               	movwf	(Lcd_Print_Char@i_59+1)& (0+255),b
 42834  0085CA  0E33               	movlw	51
 42835  0085CC  6F66               	movwf	Lcd_Print_Char@i_59& (0+255),b
 42836                           
 42837                           ; BSR set to: 0
 42838  0085CE  BF67               	btfsc	(Lcd_Print_Char@i_59+1)& (0+255),7,b
 42839  0085D0  D003               	goto	l53
 42840  0085D2  5167               	movf	(Lcd_Print_Char@i_59+1)& (0+255),w,b
 42841  0085D4  E10D               	bnz	l54
 42842  0085D6  D009               	goto	L27
 42843  0085D8                     l53:
 42844                           
 42845                           ; BSR set to: 0
 42846  0085D8  F000               	nop	
 42847  0085DA  0100               	movlb	0	; () banked
 42848  0085DC  0766               	decf	Lcd_Print_Char@i_59& (0+255),f,b
 42849  0085DE  A0D8               	btfss	status,0,c
 42850  0085E0  0767               	decf	(Lcd_Print_Char@i_59+1)& (0+255),f,b
 42851                           
 42852                           ; BSR set to: 0
 42853  0085E2  BF67               	btfsc	(Lcd_Print_Char@i_59+1)& (0+255),7,b
 42854  0085E4  D7F9               	goto	l53
 42855  0085E6  5167               	movf	(Lcd_Print_Char@i_59+1)& (0+255),w,b
 42856  0085E8  E103               	bnz	u52310
 42857  0085EA                     L27:
 42858  0085EA  0566               	decf	Lcd_Print_Char@i_59& (0+255),w,b
 42859  0085EC  A0D8               	btfss	status,0,c
 42860  0085EE  D7F4               	goto	l53
 42861  0085F0                     u52310:
 42862  0085F0                     l54:
 42863                           
 42864                           ; BSR set to: 0
 42865                           ;lcd.c: 125: RE1 = 0;
 42866  0085F0  9284               	bcf	3972,1,c	;volatile
 42867                           
 42868                           ; BSR set to: 0
 42869  0085F2  0012               	return		;funcret
 42870  0085F4                     __end_of_Lcd_Print_Char:
 42871                           	opt stack 0
 42872                           tblptru	equ	0xFF8
 42873                           tblptrh	equ	0xFF7
 42874                           tblptrl	equ	0xFF6
 42875                           tablat	equ	0xFF5
 42876                           prodh	equ	0xFF4
 42877                           prodl	equ	0xFF3
 42878                           intcon	equ	0xFF2
 42879                           intcon2	equ	0xFF1
 42880                           indf0	equ	0xFEF
 42881                           postinc0	equ	0xFEE
 42882                           postdec0	equ	0xFED
 42883                           fsr0h	equ	0xFEA
 42884                           fsr0l	equ	0xFE9
 42885                           wreg	equ	0xFE8
 42886                           postinc1	equ	0xFE6
 42887                           postdec1	equ	0xFE5
 42888                           plusw1	equ	0xFE3
 42889                           fsr1h	equ	0xFE2
 42890                           fsr1l	equ	0xFE1
 42891                           indf2	equ	0xFDF
 42892                           postinc2	equ	0xFDE
 42893                           postdec2	equ	0xFDD
 42894                           plusw2	equ	0xFDB
 42895                           fsr2h	equ	0xFDA
 42896                           fsr2l	equ	0xFD9
 42897                           status	equ	0xFD8
 42898                           
 42899 ;; *************** function _initializeSaveSlotsOnce *****************
 42900 ;; Defined at:
 42901 ;;		line 28 in file "eeprom.c"
 42902 ;; Parameters:    Size  Location     Type
 42903 ;;		None
 42904 ;; Auto vars:     Size  Location     Type
 42905 ;;  initializeSl    1   84[BANK0 ] unsigned char 
 42906 ;; Return value:  Size  Location     Type
 42907 ;;                  1    wreg      void 
 42908 ;; Registers used:
 42909 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 42910 ;; Tracked objects:
 42911 ;;		On entry : 0/0
 42912 ;;		On exit  : 0/0
 42913 ;;		Unchanged: 0/0
 42914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42916 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42918 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42919 ;;Total ram usage:        1 bytes
 42920 ;; Hardware stack levels used:    1
 42921 ;; Hardware stack levels required when called:    7
 42922 ;; This function calls:
 42923 ;;		_Busy_eep
 42924 ;;		_Read_b_eep
 42925 ;;		_Write_b_eep
 42926 ;;		_saveToEEPROM
 42927 ;; This function is called by:
 42928 ;;		_main
 42929 ;; This function uses a non-reentrant model
 42930 ;;
 42931                           
 42932                           	psect	text127
 42933  009372                     __ptext127:
 42934                           	opt stack 0
 42935  009372                     _initializeSaveSlotsOnce:
 42936                           	opt stack 23
 42937                           
 42938                           ;eeprom.c: 30: unsigned char initializeSlotsOnce = Read_b_eep(0x01);
 42939                           
 42940                           ; BSR set to: 0
 42941                           ;incstack = 0
 42942  009372  0E00               	movlw	0
 42943  009374  0100               	movlb	0	; () banked
 42944  009376  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
 42945  009378  0E01               	movlw	1
 42946  00937A  6F60               	movwf	Read_b_eep@badd& (0+255),b
 42947  00937C  EC93  F04C         	call	_Read_b_eep	;wreg free
 42948  009380  0100               	movlb	0	; () banked
 42949  009382  6FB4               	movwf	initializeSaveSlotsOnce@initializeSlotsOnce& (0+255),b
 42950                           
 42951                           ; BSR set to: 0
 42952                           ;eeprom.c: 32: if (initializeSlotsOnce == 0x24) {
 42953  009384  0E24               	movlw	36
 42954  009386  19B4               	xorwf	initializeSaveSlotsOnce@initializeSlotsOnce& (0+255),w,b
 42955  009388  A4D8               	btfss	status,2,c
 42956  00938A  0012               	return	
 42957                           
 42958                           ; BSR set to: 0
 42959                           ;eeprom.c: 33: saveToEEPROM(SLOT1);
 42960  00938C  0E01               	movlw	1
 42961  00938E  ECF6  F027         	call	_saveToEEPROM
 42962                           
 42963                           ;eeprom.c: 34: saveToEEPROM(SLOT2);
 42964  009392  0E02               	movlw	2
 42965  009394  ECF6  F027         	call	_saveToEEPROM
 42966                           
 42967                           ;eeprom.c: 35: saveToEEPROM(SLOT3);
 42968  009398  0E03               	movlw	3
 42969  00939A  ECF6  F027         	call	_saveToEEPROM
 42970                           
 42971                           ;eeprom.c: 36: saveToEEPROM(SLOT4);
 42972  00939E  0E04               	movlw	4
 42973  0093A0  ECF6  F027         	call	_saveToEEPROM
 42974                           
 42975                           ;eeprom.c: 37: (Busy_eep(), Write_b_eep(0x01,0x48));
 42976  0093A4  ECFC  F04C         	call	_Busy_eep	;wreg free
 42977  0093A8  0E00               	movlw	0
 42978  0093AA  0100               	movlb	0	; () banked
 42979  0093AC  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 42980  0093AE  0E01               	movlw	1
 42981  0093B0  6F60               	movwf	Write_b_eep@badd& (0+255),b
 42982  0093B2  0E48               	movlw	72
 42983  0093B4  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 42984  0093B6  EC6E  F04A         	call	_Write_b_eep	;wreg free
 42985  0093BA  0012               	return	
 42986  0093BC                     __end_of_initializeSaveSlotsOnce:
 42987                           	opt stack 0
 42988                           tblptru	equ	0xFF8
 42989                           tblptrh	equ	0xFF7
 42990                           tblptrl	equ	0xFF6
 42991                           tablat	equ	0xFF5
 42992                           prodh	equ	0xFF4
 42993                           prodl	equ	0xFF3
 42994                           intcon	equ	0xFF2
 42995                           intcon2	equ	0xFF1
 42996                           indf0	equ	0xFEF
 42997                           postinc0	equ	0xFEE
 42998                           postdec0	equ	0xFED
 42999                           fsr0h	equ	0xFEA
 43000                           fsr0l	equ	0xFE9
 43001                           wreg	equ	0xFE8
 43002                           postinc1	equ	0xFE6
 43003                           postdec1	equ	0xFE5
 43004                           plusw1	equ	0xFE3
 43005                           fsr1h	equ	0xFE2
 43006                           fsr1l	equ	0xFE1
 43007                           indf2	equ	0xFDF
 43008                           postinc2	equ	0xFDE
 43009                           postdec2	equ	0xFDD
 43010                           plusw2	equ	0xFDB
 43011                           fsr2h	equ	0xFDA
 43012                           fsr2l	equ	0xFD9
 43013                           status	equ	0xFD8
 43014                           
 43015 ;; *************** function _saveToEEPROM *****************
 43016 ;; Defined at:
 43017 ;;		line 198 in file "eeprom.c"
 43018 ;; Parameters:    Size  Location     Type
 43019 ;;  slotNumber      1    wreg     unsigned char 
 43020 ;; Auto vars:     Size  Location     Type
 43021 ;;  slotNumber      1   81[BANK0 ] unsigned char 
 43022 ;;  byte_count      2   82[BANK0 ] unsigned int 
 43023 ;;  to_save        75    4[BANK0 ] unsigned char [75]
 43024 ;;  baseAddress     2   79[BANK0 ] unsigned int 
 43025 ;; Return value:  Size  Location     Type
 43026 ;;                  1    wreg      void 
 43027 ;; Registers used:
 43028 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 43029 ;; Tracked objects:
 43030 ;;		On entry : 0/0
 43031 ;;		On exit  : 0/0
 43032 ;;		Unchanged: 0/0
 43033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43035 ;;      Locals:         0      80       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43037 ;;      Totals:         0      80       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43038 ;;Total ram usage:       80 bytes
 43039 ;; Hardware stack levels used:    1
 43040 ;; Hardware stack levels required when called:    6
 43041 ;; This function calls:
 43042 ;;		_Busy_eep
 43043 ;;		_Write_b_eep
 43044 ;; This function is called by:
 43045 ;;		_Function_G_1
 43046 ;;		_initializeSaveSlotsOnce
 43047 ;; This function uses a non-reentrant model
 43048 ;;
 43049                           
 43050                           	psect	text128
 43051  004FEC                     __ptext128:
 43052                           	opt stack 0
 43053  004FEC                     _saveToEEPROM:
 43054                           	opt stack 21
 43055                           
 43056                           ;incstack = 0
 43057                           ;saveToEEPROM@slotNumber stored from wreg
 43058  004FEC  0100               	movlb	0	; () banked
 43059  004FEE  6FB1               	movwf	saveToEEPROM@slotNumber& (0+255),b
 43060                           
 43061                           ;eeprom.c: 200: unsigned int baseAddress = 0;
 43062  004FF0  0E00               	movlw	0
 43063  004FF2  0100               	movlb	0	; () banked
 43064  004FF4  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 43065  004FF6  0E00               	movlw	0
 43066  004FF8  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 43067                           
 43068                           ; BSR set to: 0
 43069                           ;eeprom.c: 203: if (slotNumber == SLOT1) {baseAddress = 128;}
 43070  004FFA  05B1               	decf	saveToEEPROM@slotNumber& (0+255),w,b
 43071  004FFC  A4D8               	btfss	status,2,c
 43072  004FFE  D004               	goto	l4461
 43073                           
 43074                           ; BSR set to: 0
 43075  005000  0E00               	movlw	0
 43076  005002  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 43077  005004  0E80               	movlw	128
 43078  005006  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 43079  005008                     l4461:
 43080                           
 43081                           ; BSR set to: 0
 43082                           ;eeprom.c: 204: if (slotNumber == SLOT2) {baseAddress = 256;}
 43083                           
 43084                           ; BSR set to: 0
 43085  005008  0E02               	movlw	2
 43086  00500A  19B1               	xorwf	saveToEEPROM@slotNumber& (0+255),w,b
 43087  00500C  A4D8               	btfss	status,2,c
 43088  00500E  D004               	goto	l4462
 43089                           
 43090                           ; BSR set to: 0
 43091  005010  0E01               	movlw	1
 43092  005012  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 43093  005014  0E00               	movlw	0
 43094  005016  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 43095  005018                     l4462:
 43096                           
 43097                           ; BSR set to: 0
 43098                           ;eeprom.c: 205: if (slotNumber == SLOT3) {baseAddress = 384;}
 43099                           
 43100                           ; BSR set to: 0
 43101  005018  0E03               	movlw	3
 43102  00501A  19B1               	xorwf	saveToEEPROM@slotNumber& (0+255),w,b
 43103  00501C  A4D8               	btfss	status,2,c
 43104  00501E  D004               	goto	l4463
 43105                           
 43106                           ; BSR set to: 0
 43107  005020  0E01               	movlw	1
 43108  005022  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 43109  005024  0E80               	movlw	128
 43110  005026  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 43111  005028                     l4463:
 43112                           
 43113                           ; BSR set to: 0
 43114                           ;eeprom.c: 206: if (slotNumber == SLOT4) {baseAddress = 512;}
 43115                           
 43116                           ; BSR set to: 0
 43117  005028  0E04               	movlw	4
 43118  00502A  19B1               	xorwf	saveToEEPROM@slotNumber& (0+255),w,b
 43119  00502C  A4D8               	btfss	status,2,c
 43120  00502E  D004               	goto	l4464
 43121                           
 43122                           ; BSR set to: 0
 43123  005030  0E02               	movlw	2
 43124  005032  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 43125  005034  0E00               	movlw	0
 43126  005036  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 43127  005038                     l4464:
 43128                           
 43129                           ; BSR set to: 0
 43130                           ;eeprom.c: 209: unsigned char to_save[75];
 43131                           ;eeprom.c: 214: to_save[0] = KEYBOARD_MODE;
 43132                           
 43133                           ; BSR set to: 0
 43134  005038  C0F2  F064         	movff	_KEYBOARD_MODE,saveToEEPROM@to_save
 43135                           
 43136                           ; BSR set to: 0
 43137                           ;eeprom.c: 215: to_save[1] = which_mode;
 43138  00503C  C0F1  F065         	movff	_which_mode,saveToEEPROM@to_save+1
 43139                           
 43140                           ; BSR set to: 0
 43141                           ;eeprom.c: 216: to_save[2] = which_triad;
 43142  005040  C0F0  F066         	movff	_which_triad,saveToEEPROM@to_save+2
 43143                           
 43144                           ; BSR set to: 0
 43145                           ;eeprom.c: 217: to_save[3] = which_seventh;
 43146  005044  C0EF  F067         	movff	_which_seventh,saveToEEPROM@to_save+3
 43147                           
 43148                           ;eeprom.c: 220: to_save[4] = TRANSPOSE_MODE;
 43149  005048  0E00               	movlw	0
 43150  00504A  BA04               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 43151  00504C  0E01               	movlw	1
 43152  00504E  6F68               	movwf	(saveToEEPROM@to_save+4)& (0+255),b
 43153                           
 43154                           ;eeprom.c: 223: to_save[5] = DRUM_MODE;
 43155  005050  0E00               	movlw	0
 43156  005052  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 43157  005054  0E01               	movlw	1
 43158  005056  6F69               	movwf	(saveToEEPROM@to_save+5)& (0+255),b
 43159                           
 43160                           ;eeprom.c: 224: to_save[6] = CONTROL_MODE;
 43161  005058  0E00               	movlw	0
 43162  00505A  B601               	btfsc	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 43163  00505C  0E01               	movlw	1
 43164  00505E  6F6A               	movwf	(saveToEEPROM@to_save+6)& (0+255),b
 43165                           
 43166                           ; BSR set to: 0
 43167                           ;eeprom.c: 227: to_save[7] = DRUM_NOTE[0];
 43168  005060  C1E7  F06B         	movff	_DRUM_NOTE,saveToEEPROM@to_save+7
 43169                           
 43170                           ; BSR set to: 0
 43171                           ;eeprom.c: 228: to_save[8] = DRUM_NOTE[1];
 43172  005064  C1E8  F06C         	movff	_DRUM_NOTE+1,saveToEEPROM@to_save+8
 43173                           
 43174                           ; BSR set to: 0
 43175                           ;eeprom.c: 229: to_save[9] = DRUM_NOTE[2];
 43176  005068  C1E9  F06D         	movff	_DRUM_NOTE+2,saveToEEPROM@to_save+9
 43177                           
 43178                           ; BSR set to: 0
 43179                           ;eeprom.c: 230: to_save[10] = DRUM_NOTE[3];
 43180  00506C  C1EA  F06E         	movff	_DRUM_NOTE+3,saveToEEPROM@to_save+10
 43181                           
 43182                           ; BSR set to: 0
 43183                           ;eeprom.c: 231: to_save[11] = DRUM_NOTE[4];
 43184  005070  C1EB  F06F         	movff	_DRUM_NOTE+4,saveToEEPROM@to_save+11
 43185                           
 43186                           ; BSR set to: 0
 43187                           ;eeprom.c: 232: to_save[12] = DRUM_NOTE[5];
 43188  005074  C1EC  F070         	movff	_DRUM_NOTE+5,saveToEEPROM@to_save+12
 43189                           
 43190                           ; BSR set to: 0
 43191                           ;eeprom.c: 233: to_save[13] = DRUM_NOTE[6];
 43192  005078  C1ED  F071         	movff	_DRUM_NOTE+6,saveToEEPROM@to_save+13
 43193                           
 43194                           ; BSR set to: 0
 43195                           ;eeprom.c: 234: to_save[14] = DRUM_NOTE[7];
 43196  00507C  C1EE  F072         	movff	_DRUM_NOTE+7,saveToEEPROM@to_save+14
 43197                           
 43198                           ; BSR set to: 0
 43199                           ;eeprom.c: 237: to_save[15] = DRUM_CC[0];
 43200  005080  C0F5  F073         	movff	_DRUM_CC,saveToEEPROM@to_save+15
 43201                           
 43202                           ; BSR set to: 0
 43203                           ;eeprom.c: 238: to_save[16] = DRUM_CC[1];
 43204  005084  C0F6  F074         	movff	_DRUM_CC+1,saveToEEPROM@to_save+16
 43205                           
 43206                           ; BSR set to: 0
 43207                           ;eeprom.c: 239: to_save[17] = DRUM_CC[2];
 43208  005088  C0F7  F075         	movff	_DRUM_CC+2,saveToEEPROM@to_save+17
 43209                           
 43210                           ; BSR set to: 0
 43211                           ;eeprom.c: 240: to_save[18] = DRUM_CC[3];
 43212  00508C  C0F8  F076         	movff	_DRUM_CC+3,saveToEEPROM@to_save+18
 43213                           
 43214                           ; BSR set to: 0
 43215                           ;eeprom.c: 241: to_save[19] = DRUM_CC[4];
 43216  005090  C0F9  F077         	movff	_DRUM_CC+4,saveToEEPROM@to_save+19
 43217                           
 43218                           ; BSR set to: 0
 43219                           ;eeprom.c: 242: to_save[20] = DRUM_CC[5];
 43220  005094  C0FA  F078         	movff	_DRUM_CC+5,saveToEEPROM@to_save+20
 43221                           
 43222                           ; BSR set to: 0
 43223                           ;eeprom.c: 243: to_save[21] = DRUM_CC[6];
 43224  005098  C0FB  F079         	movff	_DRUM_CC+6,saveToEEPROM@to_save+21
 43225                           
 43226                           ; BSR set to: 0
 43227                           ;eeprom.c: 244: to_save[22] = DRUM_CC[7];
 43228  00509C  C0FC  F07A         	movff	_DRUM_CC+7,saveToEEPROM@to_save+22
 43229                           
 43230                           ;eeprom.c: 247: to_save[23] = POT_MODE;
 43231  0050A0  0E00               	movlw	0
 43232  0050A2  BA05               	btfsc	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 43233  0050A4  0E01               	movlw	1
 43234  0050A6  6F7B               	movwf	(saveToEEPROM@to_save+23)& (0+255),b
 43235                           
 43236                           ; BSR set to: 0
 43237                           ;eeprom.c: 250: to_save[24] = inputPotsArray[0].controller_number;
 43238  0050A8  C289  F07C         	movff	_inputPotsArray+1,saveToEEPROM@to_save+24
 43239                           
 43240                           ; BSR set to: 0
 43241                           ;eeprom.c: 251: to_save[25] = inputPotsArray[0].controller_number_two_byte;
 43242  0050AC  C28A  F07D         	movff	_inputPotsArray+2,saveToEEPROM@to_save+25
 43243                           
 43244                           ; BSR set to: 0
 43245                           ;eeprom.c: 253: to_save[26] = inputPotsArray[1].controller_number;
 43246  0050B0  C28C  F07E         	movff	_inputPotsArray+4,saveToEEPROM@to_save+26
 43247                           
 43248                           ; BSR set to: 0
 43249                           ;eeprom.c: 254: to_save[27] = inputPotsArray[1].controller_number_two_byte;
 43250  0050B4  C28D  F07F         	movff	_inputPotsArray+5,saveToEEPROM@to_save+27
 43251                           
 43252                           ; BSR set to: 0
 43253                           ;eeprom.c: 256: to_save[28] = inputPotsArray[2].controller_number;
 43254  0050B8  C28F  F080         	movff	_inputPotsArray+7,saveToEEPROM@to_save+28
 43255                           
 43256                           ; BSR set to: 0
 43257                           ;eeprom.c: 257: to_save[29] = inputPotsArray[2].controller_number_two_byte;
 43258  0050BC  C290  F081         	movff	_inputPotsArray+8,saveToEEPROM@to_save+29
 43259                           
 43260                           ; BSR set to: 0
 43261                           ;eeprom.c: 259: to_save[30] = inputPotsArray[3].controller_number;
 43262  0050C0  C292  F082         	movff	_inputPotsArray+10,saveToEEPROM@to_save+30
 43263                           
 43264                           ; BSR set to: 0
 43265                           ;eeprom.c: 260: to_save[31] = inputPotsArray[3].controller_number_two_byte;
 43266  0050C4  C293  F083         	movff	_inputPotsArray+11,saveToEEPROM@to_save+31
 43267                           
 43268                           ; BSR set to: 0
 43269                           ;eeprom.c: 262: to_save[32] = inputPotsArray[4].controller_number;
 43270  0050C8  C295  F084         	movff	_inputPotsArray+13,saveToEEPROM@to_save+32
 43271                           
 43272                           ; BSR set to: 0
 43273                           ;eeprom.c: 263: to_save[33] = inputPotsArray[4].controller_number_two_byte;
 43274  0050CC  C296  F085         	movff	_inputPotsArray+14,saveToEEPROM@to_save+33
 43275                           
 43276                           ; BSR set to: 0
 43277                           ;eeprom.c: 265: to_save[34] = inputPotsArray[5].controller_number;
 43278  0050D0  C298  F086         	movff	_inputPotsArray+16,saveToEEPROM@to_save+34
 43279                           
 43280                           ; BSR set to: 0
 43281                           ;eeprom.c: 266: to_save[35] = inputPotsArray[5].controller_number_two_byte;
 43282  0050D4  C299  F087         	movff	_inputPotsArray+17,saveToEEPROM@to_save+35
 43283                           
 43284                           ; BSR set to: 0
 43285                           ;eeprom.c: 268: to_save[36] = inputPotsArray[6].controller_number;
 43286  0050D8  C29B  F088         	movff	_inputPotsArray+19,saveToEEPROM@to_save+36
 43287                           
 43288                           ; BSR set to: 0
 43289                           ;eeprom.c: 269: to_save[37] = inputPotsArray[6].controller_number_two_byte;
 43290  0050DC  C29C  F089         	movff	_inputPotsArray+20,saveToEEPROM@to_save+37
 43291                           
 43292                           ; BSR set to: 0
 43293                           ;eeprom.c: 273: to_save[38] = inputPotsArray[7].controller_number;
 43294  0050E0  C29E  F08A         	movff	_inputPotsArray+22,saveToEEPROM@to_save+38
 43295                           
 43296                           ; BSR set to: 0
 43297                           ;eeprom.c: 274: to_save[39] = inputPotsArray[7].controller_number_two_byte;
 43298  0050E4  C29F  F08B         	movff	_inputPotsArray+23,saveToEEPROM@to_save+39
 43299                           
 43300                           ; BSR set to: 0
 43301                           ;eeprom.c: 276: to_save[40] = inputPotsArray[8].controller_number;
 43302  0050E8  C2A1  F08C         	movff	_inputPotsArray+25,saveToEEPROM@to_save+40
 43303                           
 43304                           ; BSR set to: 0
 43305                           ;eeprom.c: 277: to_save[41] = inputPotsArray[8].controller_number_two_byte;
 43306  0050EC  C2A2  F08D         	movff	_inputPotsArray+26,saveToEEPROM@to_save+41
 43307                           
 43308                           ; BSR set to: 0
 43309                           ;eeprom.c: 279: to_save[42] = inputPotsArray[9].controller_number;
 43310  0050F0  C2A4  F08E         	movff	_inputPotsArray+28,saveToEEPROM@to_save+42
 43311                           
 43312                           ; BSR set to: 0
 43313                           ;eeprom.c: 280: to_save[43] = inputPotsArray[9].controller_number_two_byte;
 43314  0050F4  C2A5  F08F         	movff	_inputPotsArray+29,saveToEEPROM@to_save+43
 43315                           
 43316                           ; BSR set to: 0
 43317                           ;eeprom.c: 282: to_save[44] = inputPotsArray[10].controller_number;
 43318  0050F8  C2A7  F090         	movff	_inputPotsArray+31,saveToEEPROM@to_save+44
 43319                           
 43320                           ; BSR set to: 0
 43321                           ;eeprom.c: 283: to_save[45] = inputPotsArray[10].controller_number_two_byte;
 43322  0050FC  C2A8  F091         	movff	_inputPotsArray+32,saveToEEPROM@to_save+45
 43323                           
 43324                           ; BSR set to: 0
 43325                           ;eeprom.c: 285: to_save[46] = inputPotsArray[11].controller_number;
 43326  005100  C2AA  F092         	movff	_inputPotsArray+34,saveToEEPROM@to_save+46
 43327                           
 43328                           ; BSR set to: 0
 43329                           ;eeprom.c: 286: to_save[47] = inputPotsArray[11].controller_number_two_byte;
 43330  005104  C2AB  F093         	movff	_inputPotsArray+35,saveToEEPROM@to_save+47
 43331                           
 43332                           ; BSR set to: 0
 43333                           ;eeprom.c: 288: to_save[48] = inputPotsArray[12].controller_number;
 43334  005108  C2AD  F094         	movff	_inputPotsArray+37,saveToEEPROM@to_save+48
 43335                           
 43336                           ; BSR set to: 0
 43337                           ;eeprom.c: 289: to_save[49] = inputPotsArray[12].controller_number_two_byte;
 43338  00510C  C2AE  F095         	movff	_inputPotsArray+38,saveToEEPROM@to_save+49
 43339                           
 43340                           ; BSR set to: 0
 43341                           ;eeprom.c: 291: to_save[50] = inputPotsArray[13].controller_number;
 43342  005110  C2B0  F096         	movff	_inputPotsArray+40,saveToEEPROM@to_save+50
 43343                           
 43344                           ; BSR set to: 0
 43345                           ;eeprom.c: 292: to_save[51] = inputPotsArray[13].controller_number_two_byte;
 43346  005114  C2B1  F097         	movff	_inputPotsArray+41,saveToEEPROM@to_save+51
 43347                           
 43348                           ; BSR set to: 0
 43349                           ;eeprom.c: 294: to_save[52] = inputPotsArray[14].controller_number;
 43350  005118  C2B3  F098         	movff	_inputPotsArray+43,saveToEEPROM@to_save+52
 43351                           
 43352                           ; BSR set to: 0
 43353                           ;eeprom.c: 295: to_save[53] = inputPotsArray[14].controller_number_two_byte;
 43354  00511C  C2B4  F099         	movff	_inputPotsArray+44,saveToEEPROM@to_save+53
 43355                           
 43356                           ; BSR set to: 0
 43357                           ;eeprom.c: 297: to_save[54] = inputPotsArray[15].controller_number;
 43358  005120  C2B6  F09A         	movff	_inputPotsArray+46,saveToEEPROM@to_save+54
 43359                           
 43360                           ; BSR set to: 0
 43361                           ;eeprom.c: 298: to_save[55] = inputPotsArray[15].controller_number_two_byte;
 43362  005124  C2B7  F09B         	movff	_inputPotsArray+47,saveToEEPROM@to_save+55
 43363                           
 43364                           ; BSR set to: 0
 43365                           ;eeprom.c: 302: to_save[56] = channel;
 43366  005128  C03E  F09C         	movff	_channel,saveToEEPROM@to_save+56
 43367                           
 43368                           ; BSR set to: 0
 43369                           ;eeprom.c: 303: to_save[57] = drumchannel;
 43370  00512C  C052  F09D         	movff	_drumchannel,saveToEEPROM@to_save+57
 43371                           
 43372                           ; BSR set to: 0
 43373                           ;eeprom.c: 306: to_save[58] = octave;
 43374  005130  C050  F09E         	movff	_octave,saveToEEPROM@to_save+58
 43375                           
 43376                           ; BSR set to: 0
 43377                           ;eeprom.c: 307: to_save[59] = semitone;
 43378  005134  C03B  F09F         	movff	_semitone,saveToEEPROM@to_save+59
 43379                           
 43380                           ; BSR set to: 0
 43381                           ;eeprom.c: 310: to_save[60] = patch_number;
 43382  005138  C0F3  F0A0         	movff	_patch_number,saveToEEPROM@to_save+60
 43383                           
 43384                           ;eeprom.c: 313: to_save[61] = ARPEGGIO_ON;
 43385  00513C  0E00               	movlw	0
 43386  00513E  B604               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 43387  005140  0E01               	movlw	1
 43388  005142  6FA1               	movwf	(saveToEEPROM@to_save+61)& (0+255),b
 43389                           
 43390                           ; BSR set to: 0
 43391                           ;eeprom.c: 314: to_save[62] = BPM;
 43392  005144  C0FF  F0A2         	movff	_BPM,saveToEEPROM@to_save+62
 43393                           
 43394                           ; BSR set to: 0
 43395                           ;eeprom.c: 315: to_save[63] = OCTAVES;
 43396  005148  C04E  F0A3         	movff	_OCTAVES,saveToEEPROM@to_save+63
 43397                           
 43398                           ; BSR set to: 0
 43399                           ;eeprom.c: 316: to_save[64] = ARPEGGIO_TYPE;
 43400  00514C  C035  F0A4         	movff	_ARPEGGIO_TYPE,saveToEEPROM@to_save+64
 43401                           
 43402                           ; BSR set to: 0
 43403                           ;eeprom.c: 317: to_save[65] = NOTE_LENGTH_PULSES;
 43404  005150  C04D  F0A5         	movff	_NOTE_LENGTH_PULSES,saveToEEPROM@to_save+65
 43405                           
 43406                           ;eeprom.c: 318: to_save[66] = LATCH;
 43407  005154  0E00               	movlw	0
 43408  005156  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 43409  005158  0E01               	movlw	1
 43410  00515A  6FA6               	movwf	(saveToEEPROM@to_save+66)& (0+255),b
 43411                           
 43412                           ;eeprom.c: 319: to_save[67] = AUTO_LATCH;
 43413  00515C  0E00               	movlw	0
 43414  00515E  BC03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 43415  005160  0E01               	movlw	1
 43416  005162  6FA7               	movwf	(saveToEEPROM@to_save+67)& (0+255),b
 43417                           
 43418                           ;eeprom.c: 320: to_save[68] = UN_LATCH_MODE;
 43419  005164  0E00               	movlw	0
 43420  005166  BE03               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 43421  005168  0E01               	movlw	1
 43422  00516A  6FA8               	movwf	(saveToEEPROM@to_save+68)& (0+255),b
 43423                           
 43424                           ;eeprom.c: 321: to_save[69] = AUTO_RANDOMIZE;
 43425  00516C  0E00               	movlw	0
 43426  00516E  B803               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 43427  005170  0E01               	movlw	1
 43428  005172  6FA9               	movwf	(saveToEEPROM@to_save+69)& (0+255),b
 43429                           
 43430                           ;eeprom.c: 322: to_save[70] = skipFirstLast;
 43431  005174  0E00               	movlw	0
 43432  005176  B603               	btfsc	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 43433  005178  0E01               	movlw	1
 43434  00517A  6FAA               	movwf	(saveToEEPROM@to_save+70)& (0+255),b
 43435                           
 43436                           ;eeprom.c: 323: to_save[71] = LAST_NOTE_MODE_KEY_PRESS;
 43437  00517C  0E00               	movlw	0
 43438  00517E  B203               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 43439  005180  0E01               	movlw	1
 43440  005182  6FAB               	movwf	(saveToEEPROM@to_save+71)& (0+255),b
 43441                           
 43442                           ;eeprom.c: 324: to_save[72] = LAST_NOTE_MODE_KEY_RELEASE;
 43443  005184  0E00               	movlw	0
 43444  005186  B003               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 43445  005188  0E01               	movlw	1
 43446  00518A  6FAC               	movwf	(saveToEEPROM@to_save+72)& (0+255),b
 43447                           
 43448                           ;eeprom.c: 325: to_save[73] = LAST_NOTE_MODE_TRANSPOSE;
 43449  00518C  0E00               	movlw	0
 43450  00518E  BE02               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 43451  005190  0E01               	movlw	1
 43452  005192  6FAD               	movwf	(saveToEEPROM@to_save+73)& (0+255),b
 43453                           
 43454                           ;eeprom.c: 326: to_save[74] = LAST_NOTE_MODE_RESET;
 43455  005194  0E00               	movlw	0
 43456  005196  BC02               	btfsc	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 43457  005198  0E01               	movlw	1
 43458  00519A  6FAE               	movwf	(saveToEEPROM@to_save+74)& (0+255),b
 43459                           
 43460                           ;eeprom.c: 329: for (unsigned int byte_count = 0; byte_count < 75; byte_count++){
 43461  00519C  0E00               	movlw	0
 43462  00519E  6FB3               	movwf	(saveToEEPROM@byte_count+1)& (0+255),b
 43463  0051A0  0E00               	movlw	0
 43464  0051A2  6FB2               	movwf	saveToEEPROM@byte_count& (0+255),b
 43465  0051A4                     l31502:
 43466                           
 43467                           ; BSR set to: 0
 43468  0051A4  51B3               	movf	(saveToEEPROM@byte_count+1)& (0+255),w,b
 43469  0051A6  E11B               	bnz	l4467
 43470  0051A8  0E4B               	movlw	75
 43471  0051AA  5DB2               	subwf	saveToEEPROM@byte_count& (0+255),w,b
 43472  0051AC  B0D8               	btfsc	status,0,c
 43473  0051AE  0012               	return	
 43474                           
 43475                           ; BSR set to: 0
 43476                           ;eeprom.c: 330: (Busy_eep(), Write_b_eep((byte_count + baseAddress),to_save[byte_count])
      +                          );
 43477                           
 43478                           ; BSR set to: 0
 43479                           
 43480                           ; BSR set to: 0
 43481  0051B0  ECFC  F04C         	call	_Busy_eep	;wreg free
 43482  0051B4  0100               	movlb	0	; () banked
 43483  0051B6  51AF               	movf	saveToEEPROM@baseAddress& (0+255),w,b
 43484  0051B8  25B2               	addwf	saveToEEPROM@byte_count& (0+255),w,b
 43485  0051BA  6F60               	movwf	Write_b_eep@badd& (0+255),b
 43486  0051BC  51B0               	movf	(saveToEEPROM@baseAddress+1)& (0+255),w,b
 43487  0051BE  21B3               	addwfc	(saveToEEPROM@byte_count+1)& (0+255),w,b
 43488  0051C0  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 43489  0051C2  0E64               	movlw	low saveToEEPROM@to_save
 43490  0051C4  25B2               	addwf	saveToEEPROM@byte_count& (0+255),w,b
 43491  0051C6  6ED9               	movwf	fsr2l,c
 43492  0051C8  0E00               	movlw	high saveToEEPROM@to_save
 43493  0051CA  21B3               	addwfc	(saveToEEPROM@byte_count+1)& (0+255),w,b
 43494  0051CC  6EDA               	movwf	fsr2h,c
 43495  0051CE  50DF               	movf	indf2,w,c
 43496  0051D0  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 43497  0051D2  EC6E  F04A         	call	_Write_b_eep	;wreg free
 43498  0051D6  0100               	movlb	0	; () banked
 43499  0051D8  4BB2               	infsnz	saveToEEPROM@byte_count& (0+255),f,b
 43500  0051DA  2BB3               	incf	(saveToEEPROM@byte_count+1)& (0+255),f,b
 43501  0051DC  D7E3               	goto	l31502
 43502  0051DE                     l4467:
 43503                           
 43504                           ; BSR set to: 0
 43505  0051DE  0012               	return		;funcret
 43506  0051E0                     __end_of_saveToEEPROM:
 43507                           	opt stack 0
 43508                           tblptru	equ	0xFF8
 43509                           tblptrh	equ	0xFF7
 43510                           tblptrl	equ	0xFF6
 43511                           tablat	equ	0xFF5
 43512                           prodh	equ	0xFF4
 43513                           prodl	equ	0xFF3
 43514                           intcon	equ	0xFF2
 43515                           intcon2	equ	0xFF1
 43516                           indf0	equ	0xFEF
 43517                           postinc0	equ	0xFEE
 43518                           postdec0	equ	0xFED
 43519                           fsr0h	equ	0xFEA
 43520                           fsr0l	equ	0xFE9
 43521                           wreg	equ	0xFE8
 43522                           postinc1	equ	0xFE6
 43523                           postdec1	equ	0xFE5
 43524                           plusw1	equ	0xFE3
 43525                           fsr1h	equ	0xFE2
 43526                           fsr1l	equ	0xFE1
 43527                           indf2	equ	0xFDF
 43528                           postinc2	equ	0xFDE
 43529                           postdec2	equ	0xFDD
 43530                           plusw2	equ	0xFDB
 43531                           fsr2h	equ	0xFDA
 43532                           fsr2l	equ	0xFD9
 43533                           status	equ	0xFD8
 43534                           
 43535 ;; *************** function _Write_b_eep *****************
 43536 ;; Defined at:
 43537 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\EEP\write_B.c"
 43538 ;; Parameters:    Size  Location     Type
 43539 ;;  badd            2    0[BANK0 ] unsigned int 
 43540 ;;  bdat            1    2[BANK0 ] unsigned char 
 43541 ;; Auto vars:     Size  Location     Type
 43542 ;;  GIE_BIT_VAL     1    3[BANK0 ] unsigned char 
 43543 ;; Return value:  Size  Location     Type
 43544 ;;                  1    wreg      void 
 43545 ;; Registers used:
 43546 ;;		wreg, status,2, status,0
 43547 ;; Tracked objects:
 43548 ;;		On entry : 0/0
 43549 ;;		On exit  : 0/0
 43550 ;;		Unchanged: 0/0
 43551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43552 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43553 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43555 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43556 ;;Total ram usage:        4 bytes
 43557 ;; Hardware stack levels used:    1
 43558 ;; Hardware stack levels required when called:    5
 43559 ;; This function calls:
 43560 ;;		Nothing
 43561 ;; This function is called by:
 43562 ;;		_Function_D_2
 43563 ;;		_Function_G_1
 43564 ;;		_Function_G_2
 43565 ;;		_Function_G_3
 43566 ;;		_Function_G_4
 43567 ;;		_initializeSaveSlotsOnce
 43568 ;;		_saveToEEPROM
 43569 ;; This function uses a non-reentrant model
 43570 ;;
 43571                           
 43572                           	psect	text129
 43573  0094DC                     __ptext129:
 43574                           	opt stack 0
 43575  0094DC                     _Write_b_eep:
 43576                           	opt stack 22
 43577                           
 43578                           ; BSR set to: 0
 43579                           ;incstack = 0
 43580  0094DC  0E00               	movlw	0
 43581  0094DE  0100               	movlb	0	; () banked
 43582  0094E0  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
 43583                           
 43584                           ; BSR set to: 0
 43585  0094E2  5161               	movf	(Write_b_eep@badd+1)& (0+255),w,b
 43586  0094E4  0B03               	andlw	3
 43587  0094E6  6EAA               	movwf	4010,c	;volatile
 43588                           
 43589                           ; BSR set to: 0
 43590  0094E8  C060  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 43591                           
 43592                           ; BSR set to: 0
 43593  0094EC  C062  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 43594                           
 43595                           ; BSR set to: 0
 43596  0094F0  9EA6               	bcf	4006,7,c	;volsfr
 43597                           
 43598                           ; BSR set to: 0
 43599  0094F2  9CA6               	bcf	4006,6,c	;volsfr
 43600                           
 43601                           ; BSR set to: 0
 43602  0094F4  84A6               	bsf	4006,2,c	;volsfr
 43603                           
 43604                           ; BSR set to: 0
 43605  0094F6  0E00               	movlw	0
 43606  0094F8  BEF2               	btfsc	intcon,7,c	;volatile
 43607  0094FA  0E01               	movlw	1
 43608  0094FC  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
 43609                           
 43610                           ; BSR set to: 0
 43611  0094FE  9EF2               	bcf	intcon,7,c	;volatile
 43612                           
 43613                           ; BSR set to: 0
 43614  009500  0E55               	movlw	85
 43615  009502  6EA7               	movwf	4007,c	;volsfr
 43616                           
 43617                           ; BSR set to: 0
 43618  009504  0EAA               	movlw	170
 43619  009506  6EA7               	movwf	4007,c	;volsfr
 43620                           
 43621                           ; BSR set to: 0
 43622  009508  82A6               	bsf	4006,1,c	;volsfr
 43623  00950A                     
 43624                           ; BSR set to: 0
 43625  00950A  B2A6               	btfsc	4006,1,c	;volsfr
 43626  00950C  D7FE               	goto	l5640
 43627  00950E  0100               	movlb	0	; () banked
 43628  009510  B163               	btfsc	Write_b_eep@GIE_BIT_VAL& (0+255),0,b
 43629  009512  D002               	bra	u56735
 43630  009514  9EF2               	bcf	intcon,7,c	;volatile
 43631  009516  D001               	bra	u56736
 43632  009518                     u56735:
 43633  009518  8EF2               	bsf	intcon,7,c	;volatile
 43634  00951A                     u56736:
 43635  00951A  94A6               	bcf	4006,2,c	;volsfr
 43636  00951C  0012               	return		;funcret
 43637  00951E                     __end_of_Write_b_eep:
 43638                           	opt stack 0
 43639                           tblptru	equ	0xFF8
 43640                           tblptrh	equ	0xFF7
 43641                           tblptrl	equ	0xFF6
 43642                           tablat	equ	0xFF5
 43643                           prodh	equ	0xFF4
 43644                           prodl	equ	0xFF3
 43645                           intcon	equ	0xFF2
 43646                           intcon2	equ	0xFF1
 43647                           indf0	equ	0xFEF
 43648                           postinc0	equ	0xFEE
 43649                           postdec0	equ	0xFED
 43650                           fsr0h	equ	0xFEA
 43651                           fsr0l	equ	0xFE9
 43652                           wreg	equ	0xFE8
 43653                           postinc1	equ	0xFE6
 43654                           postdec1	equ	0xFE5
 43655                           plusw1	equ	0xFE3
 43656                           fsr1h	equ	0xFE2
 43657                           fsr1l	equ	0xFE1
 43658                           indf2	equ	0xFDF
 43659                           postinc2	equ	0xFDE
 43660                           postdec2	equ	0xFDD
 43661                           plusw2	equ	0xFDB
 43662                           fsr2h	equ	0xFDA
 43663                           fsr2l	equ	0xFD9
 43664                           status	equ	0xFD8
 43665                           
 43666 ;; *************** function _Busy_eep *****************
 43667 ;; Defined at:
 43668 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\EEP\busy_eep.c"
 43669 ;; Parameters:    Size  Location     Type
 43670 ;;		None
 43671 ;; Auto vars:     Size  Location     Type
 43672 ;;		None
 43673 ;; Return value:  Size  Location     Type
 43674 ;;                  1    wreg      void 
 43675 ;; Registers used:
 43676 ;;		None
 43677 ;; Tracked objects:
 43678 ;;		On entry : 0/0
 43679 ;;		On exit  : 0/0
 43680 ;;		Unchanged: 0/0
 43681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43686 ;;Total ram usage:        0 bytes
 43687 ;; Hardware stack levels used:    1
 43688 ;; Hardware stack levels required when called:    5
 43689 ;; This function calls:
 43690 ;;		Nothing
 43691 ;; This function is called by:
 43692 ;;		_Function_D_2
 43693 ;;		_Function_G_1
 43694 ;;		_Function_G_2
 43695 ;;		_Function_G_3
 43696 ;;		_Function_G_4
 43697 ;;		_initializeSaveSlotsOnce
 43698 ;;		_saveToEEPROM
 43699 ;; This function uses a non-reentrant model
 43700 ;;
 43701                           
 43702                           	psect	text130
 43703  0099F8                     __ptext130:
 43704                           	opt stack 0
 43705  0099F8                     _Busy_eep:
 43706                           	opt stack 22
 43707                           
 43708                           ;incstack = 0
 43709  0099F8  B2A6               	btfsc	4006,1,c	;volsfr
 43710  0099FA  D7FE               	goto	_Busy_eep
 43711  0099FC  0012               	return	
 43712  0099FE                     __end_of_Busy_eep:
 43713                           	opt stack 0
 43714                           tblptru	equ	0xFF8
 43715                           tblptrh	equ	0xFF7
 43716                           tblptrl	equ	0xFF6
 43717                           tablat	equ	0xFF5
 43718                           prodh	equ	0xFF4
 43719                           prodl	equ	0xFF3
 43720                           intcon	equ	0xFF2
 43721                           intcon2	equ	0xFF1
 43722                           indf0	equ	0xFEF
 43723                           postinc0	equ	0xFEE
 43724                           postdec0	equ	0xFED
 43725                           fsr0h	equ	0xFEA
 43726                           fsr0l	equ	0xFE9
 43727                           wreg	equ	0xFE8
 43728                           postinc1	equ	0xFE6
 43729                           postdec1	equ	0xFE5
 43730                           plusw1	equ	0xFE3
 43731                           fsr1h	equ	0xFE2
 43732                           fsr1l	equ	0xFE1
 43733                           indf2	equ	0xFDF
 43734                           postinc2	equ	0xFDE
 43735                           postdec2	equ	0xFDD
 43736                           plusw2	equ	0xFDB
 43737                           fsr2h	equ	0xFDA
 43738                           fsr2l	equ	0xFD9
 43739                           status	equ	0xFD8
 43740                           
 43741 ;; *************** function _Read_b_eep *****************
 43742 ;; Defined at:
 43743 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\EEP\read_B.c"
 43744 ;; Parameters:    Size  Location     Type
 43745 ;;  badd            2    0[BANK0 ] unsigned int 
 43746 ;; Auto vars:     Size  Location     Type
 43747 ;;		None
 43748 ;; Return value:  Size  Location     Type
 43749 ;;                  1    wreg      unsigned char 
 43750 ;; Registers used:
 43751 ;;		wreg, status,2, status,0
 43752 ;; Tracked objects:
 43753 ;;		On entry : 0/0
 43754 ;;		On exit  : 0/0
 43755 ;;		Unchanged: 0/0
 43756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43757 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43760 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43761 ;;Total ram usage:        2 bytes
 43762 ;; Hardware stack levels used:    1
 43763 ;; Hardware stack levels required when called:    5
 43764 ;; This function calls:
 43765 ;;		Nothing
 43766 ;; This function is called by:
 43767 ;;		_initializeSaveSlotsOnce
 43768 ;;		_selectSlotOnBoot
 43769 ;;		_loadFromEEPROM
 43770 ;;		_main
 43771 ;; This function uses a non-reentrant model
 43772 ;;
 43773                           
 43774                           	psect	text131
 43775  009926                     __ptext131:
 43776                           	opt stack 0
 43777  009926                     _Read_b_eep:
 43778                           	opt stack 23
 43779                           
 43780                           ;incstack = 0
 43781  009926  0100               	movlb	0	; () banked
 43782  009928  5161               	movf	(Read_b_eep@badd+1)& (0+255),w,b
 43783  00992A  0B03               	andlw	3
 43784  00992C  6EAA               	movwf	4010,c	;volatile
 43785                           
 43786                           ; BSR set to: 0
 43787  00992E  C060  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 43788                           
 43789                           ; BSR set to: 0
 43790  009932  9CA6               	bcf	4006,6,c	;volsfr
 43791                           
 43792                           ; BSR set to: 0
 43793  009934  9EA6               	bcf	4006,7,c	;volsfr
 43794                           
 43795                           ; BSR set to: 0
 43796  009936  80A6               	bsf	4006,0,c	;volsfr
 43797                           
 43798                           ; BSR set to: 0
 43799  009938  F000               	nop	
 43800  00993A  F000               	nop	
 43801  00993C  50A8               	movf	4008,w,c	;volatile
 43802  00993E  0012               	return	
 43803  009940                     __end_of_Read_b_eep:
 43804                           	opt stack 0
 43805                           tblptru	equ	0xFF8
 43806                           tblptrh	equ	0xFF7
 43807                           tblptrl	equ	0xFF6
 43808                           tablat	equ	0xFF5
 43809                           prodh	equ	0xFF4
 43810                           prodl	equ	0xFF3
 43811                           intcon	equ	0xFF2
 43812                           intcon2	equ	0xFF1
 43813                           indf0	equ	0xFEF
 43814                           postinc0	equ	0xFEE
 43815                           postdec0	equ	0xFED
 43816                           fsr0h	equ	0xFEA
 43817                           fsr0l	equ	0xFE9
 43818                           wreg	equ	0xFE8
 43819                           postinc1	equ	0xFE6
 43820                           postdec1	equ	0xFE5
 43821                           plusw1	equ	0xFE3
 43822                           fsr1h	equ	0xFE2
 43823                           fsr1l	equ	0xFE1
 43824                           indf2	equ	0xFDF
 43825                           postinc2	equ	0xFDE
 43826                           postdec2	equ	0xFDD
 43827                           plusw2	equ	0xFDB
 43828                           fsr2h	equ	0xFDA
 43829                           fsr2l	equ	0xFD9
 43830                           status	equ	0xFD8
 43831                           
 43832 ;; *************** function _initializeMenuArray *****************
 43833 ;; Defined at:
 43834 ;;		line 27 in file "menu.c"
 43835 ;; Parameters:    Size  Location     Type
 43836 ;;		None
 43837 ;; Auto vars:     Size  Location     Type
 43838 ;;  i               1    8[BANK0 ] unsigned char 
 43839 ;;  NumberOfElem    1    7[BANK0 ] unsigned char 
 43840 ;; Return value:  Size  Location     Type
 43841 ;;                  1    wreg      void 
 43842 ;; Registers used:
 43843 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 43844 ;; Tracked objects:
 43845 ;;		On entry : 0/0
 43846 ;;		On exit  : 0/0
 43847 ;;		Unchanged: 0/0
 43848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43850 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43851 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43852 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43853 ;;Total ram usage:        3 bytes
 43854 ;; Hardware stack levels used:    1
 43855 ;; Hardware stack levels required when called:    6
 43856 ;; This function calls:
 43857 ;;		___wmul
 43858 ;; This function is called by:
 43859 ;;		_main
 43860 ;; This function uses a non-reentrant model
 43861 ;;
 43862                           
 43863                           	psect	text132
 43864  004DEA                     __ptext132:
 43865                           	opt stack 0
 43866  004DEA                     _initializeMenuArray:
 43867                           	opt stack 24
 43868                           
 43869                           ;menu.c: 30: unsigned char NumberOfElements = sizeof(menuArray)/sizeof(menuArray[0]);
 43870                           
 43871                           ;incstack = 0
 43872  004DEA  0E23               	movlw	35
 43873  004DEC  0100               	movlb	0	; () banked
 43874  004DEE  6F67               	movwf	initializeMenuArray@NumberOfElements& (0+255),b
 43875                           
 43876                           ;menu.c: 33: for(unsigned char i = 1;i<NumberOfElements;i++) {
 43877  004DF0  0E01               	movlw	1
 43878  004DF2  6F68               	movwf	initializeMenuArray@i& (0+255),b
 43879  004DF4  D03C               	goto	l3449
 43880  004DF6                     
 43881                           ; BSR set to: 0
 43882                           ;menu.c: 34: menuArray[i].address = menuArray[i-1].address + menuArray[i-1].number;
 43883                           
 43884                           ; BSR set to: 0
 43885  004DF6  5168               	movf	initializeMenuArray@i& (0+255),w,b
 43886  004DF8  0D03               	mullw	3
 43887  004DFA  0E01               	movlw	1
 43888  004DFC  26F3               	addwf	prodl,f,c
 43889  004DFE  0E00               	movlw	0
 43890  004E00  22F4               	addwfc	prodh,f,c
 43891  004E02  0E00               	movlw	low _menuArray
 43892  004E04  24F3               	addwf	prodl,w,c
 43893  004E06  6ED9               	movwf	fsr2l,c
 43894  004E08  0E03               	movlw	high _menuArray
 43895  004E0A  20F4               	addwfc	prodh,w,c
 43896  004E0C  6EDA               	movwf	fsr2h,c
 43897  004E0E  0EFF               	movlw	255
 43898  004E10  2568               	addwf	initializeMenuArray@i& (0+255),w,b
 43899  004E12  6F60               	movwf	___wmul@multiplier& (0+255),b
 43900  004E14  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 43901  004E16  0EFF               	movlw	255
 43902  004E18  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 43903  004E1A  0E00               	movlw	0
 43904  004E1C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 43905  004E1E  0E03               	movlw	3
 43906  004E20  6F62               	movwf	___wmul@multiplicand& (0+255),b
 43907  004E22  EC2C  F04C         	call	___wmul	;wreg free
 43908  004E26  0E00               	movlw	low _menuArray
 43909  004E28  0100               	movlb	0	; () banked
 43910  004E2A  2560               	addwf	?___wmul& (0+255),w,b
 43911  004E2C  6EE9               	movwf	fsr0l,c
 43912  004E2E  0E03               	movlw	high _menuArray
 43913  004E30  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 43914  004E32  6EEA               	movwf	fsr0h,c
 43915  004E34  50EF               	movf	indf0,w,c
 43916  004E36  6F66               	movwf	??_initializeMenuArray& (0+255),b
 43917  004E38  0EFF               	movlw	255
 43918  004E3A  2568               	addwf	initializeMenuArray@i& (0+255),w,b
 43919  004E3C  6F60               	movwf	___wmul@multiplier& (0+255),b
 43920  004E3E  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 43921  004E40  0EFF               	movlw	255
 43922  004E42  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 43923  004E44  0E00               	movlw	0
 43924  004E46  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 43925  004E48  0E03               	movlw	3
 43926  004E4A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 43927  004E4C  EC2C  F04C         	call	___wmul	;wreg free
 43928  004E50  0E01               	movlw	1
 43929  004E52  0100               	movlb	0	; () banked
 43930  004E54  2760               	addwf	?___wmul& (0+255),f,b
 43931  004E56  0E00               	movlw	0
 43932  004E58  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 43933  004E5A  0E00               	movlw	low _menuArray
 43934  004E5C  2560               	addwf	?___wmul& (0+255),w,b
 43935  004E5E  6EE9               	movwf	fsr0l,c
 43936  004E60  0E03               	movlw	high _menuArray
 43937  004E62  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 43938  004E64  6EEA               	movwf	fsr0h,c
 43939  004E66  50EF               	movf	indf0,w,c
 43940  004E68  2566               	addwf	??_initializeMenuArray& (0+255),w,b
 43941  004E6A  6EDF               	movwf	indf2,c
 43942                           
 43943                           ; BSR set to: 0
 43944  004E6C  2B68               	incf	initializeMenuArray@i& (0+255),f,b
 43945  004E6E                     l3449:
 43946                           
 43947                           ; BSR set to: 0
 43948                           
 43949                           ; BSR set to: 0
 43950  004E6E  5167               	movf	initializeMenuArray@NumberOfElements& (0+255),w,b
 43951  004E70  5D68               	subwf	initializeMenuArray@i& (0+255),w,b
 43952  004E72  A0D8               	btfss	status,0,c
 43953  004E74  D7C0               	goto	l3450
 43954                           
 43955                           ; BSR set to: 0
 43956                           ;menu.c: 35: }
 43957                           ;menu.c: 38: mainMenu = menuArray[0];
 43958  004E76  C300  F174         	movff	_menuArray,_mainMenu
 43959  004E7A  C301  F175         	movff	_menuArray+1,_mainMenu+1
 43960  004E7E  C302  F176         	movff	_menuArray+2,_mainMenu+2
 43961                           
 43962                           ;menu.c: 39: keyboardMenu = menuArray[1];
 43963  004E82  C303  F0E5         	movff	_menuArray+3,_keyboardMenu
 43964  004E86  C304  F0E6         	movff	_menuArray+4,_keyboardMenu+1
 43965  004E8A  C305  F0E7         	movff	_menuArray+5,_keyboardMenu+2
 43966                           
 43967                           ;menu.c: 40: modeMenu = menuArray[2];
 43968  004E8E  C306  F171         	movff	_menuArray+6,_modeMenu
 43969  004E92  C307  F172         	movff	_menuArray+7,_modeMenu+1
 43970  004E96  C308  F173         	movff	_menuArray+8,_modeMenu+2
 43971                           
 43972                           ;menu.c: 41: triadMenu = menuArray[3];
 43973  004E9A  C309  F16E         	movff	_menuArray+9,_triadMenu
 43974  004E9E  C30A  F16F         	movff	_menuArray+10,_triadMenu+1
 43975  004EA2  C30B  F170         	movff	_menuArray+11,_triadMenu+2
 43976                           
 43977                           ;menu.c: 42: seventhMenu = menuArray[4];
 43978  004EA6  C30C  F16B         	movff	_menuArray+12,_seventhMenu
 43979  004EAA  C30D  F16C         	movff	_menuArray+13,_seventhMenu+1
 43980  004EAE  C30E  F16D         	movff	_menuArray+14,_seventhMenu+2
 43981                           
 43982                           ;menu.c: 43: transposeMenu = menuArray[5];
 43983  004EB2  C30F  F168         	movff	_menuArray+15,_transposeMenu
 43984  004EB6  C310  F169         	movff	_menuArray+16,_transposeMenu+1
 43985  004EBA  C311  F16A         	movff	_menuArray+17,_transposeMenu+2
 43986                           
 43987                           ;menu.c: 44: drumMenu = menuArray[6];
 43988  004EBE  C312  F165         	movff	_menuArray+18,_drumMenu
 43989  004EC2  C313  F166         	movff	_menuArray+19,_drumMenu+1
 43990  004EC6  C314  F167         	movff	_menuArray+20,_drumMenu+2
 43991                           
 43992                           ;menu.c: 45: drumCCTypeMenu = menuArray[7];
 43993  004ECA  C315  F162         	movff	_menuArray+21,_drumCCTypeMenu
 43994  004ECE  C316  F163         	movff	_menuArray+22,_drumCCTypeMenu+1
 43995  004ED2  C317  F164         	movff	_menuArray+23,_drumCCTypeMenu+2
 43996                           
 43997                           ;menu.c: 46: drumNNMenu = menuArray[8];
 43998  004ED6  C318  F15F         	movff	_menuArray+24,_drumNNMenu
 43999  004EDA  C319  F160         	movff	_menuArray+25,_drumNNMenu+1
 44000  004EDE  C31A  F161         	movff	_menuArray+26,_drumNNMenu+2
 44001                           
 44002                           ;menu.c: 47: drumCCMenu = menuArray[9];
 44003  004EE2  C31B  F15C         	movff	_menuArray+27,_drumCCMenu
 44004  004EE6  C31C  F15D         	movff	_menuArray+28,_drumCCMenu+1
 44005  004EEA  C31D  F15E         	movff	_menuArray+29,_drumCCMenu+2
 44006                           
 44007                           ;menu.c: 48: potsMenu = menuArray[10];
 44008  004EEE  C31E  F159         	movff	_menuArray+30,_potsMenu
 44009  004EF2  C31F  F15A         	movff	_menuArray+31,_potsMenu+1
 44010  004EF6  C320  F15B         	movff	_menuArray+32,_potsMenu+2
 44011                           
 44012                           ;menu.c: 49: potsResoMenu = menuArray[11];
 44013  004EFA  C321  F156         	movff	_menuArray+33,_potsResoMenu
 44014  004EFE  C322  F157         	movff	_menuArray+34,_potsResoMenu+1
 44015  004F02  C323  F158         	movff	_menuArray+35,_potsResoMenu+2
 44016                           
 44017                           ;menu.c: 50: potsCCMenu = menuArray[12];
 44018  004F06  C324  F150         	movff	_menuArray+36,_potsCCMenu
 44019  004F0A  C325  F151         	movff	_menuArray+37,_potsCCMenu+1
 44020  004F0E  C326  F152         	movff	_menuArray+38,_potsCCMenu+2
 44021                           
 44022                           ;menu.c: 51: slidepotsCCMenu = menuArray[13];
 44023  004F12  C327  F14D         	movff	_menuArray+39,_slidepotsCCMenu
 44024  004F16  C328  F14E         	movff	_menuArray+40,_slidepotsCCMenu+1
 44025  004F1A  C329  F14F         	movff	_menuArray+41,_slidepotsCCMenu+2
 44026                           
 44027                           ;menu.c: 52: joystickCCMenu = menuArray[14];
 44028  004F1E  C32A  F14A         	movff	_menuArray+42,_joystickCCMenu
 44029  004F22  C32B  F14B         	movff	_menuArray+43,_joystickCCMenu+1
 44030  004F26  C32C  F14C         	movff	_menuArray+44,_joystickCCMenu+2
 44031                           
 44032                           ;menu.c: 53: midiChannelMenu = menuArray[15];
 44033  004F2A  C32D  F147         	movff	_menuArray+45,_midiChannelMenu
 44034  004F2E  C32E  F148         	movff	_menuArray+46,_midiChannelMenu+1
 44035  004F32  C32F  F149         	movff	_menuArray+47,_midiChannelMenu+2
 44036                           
 44037                           ;menu.c: 54: eepromMenu = menuArray[16];
 44038  004F36  C330  F13B         	movff	_menuArray+48,_eepromMenu
 44039  004F3A  C331  F13C         	movff	_menuArray+49,_eepromMenu+1
 44040  004F3E  C332  F13D         	movff	_menuArray+50,_eepromMenu+2
 44041                           
 44042                           ;menu.c: 55: savesMenu = menuArray[17];
 44043  004F42  C333  F0E2         	movff	_menuArray+51,_savesMenu
 44044  004F46  C334  F0E3         	movff	_menuArray+52,_savesMenu+1
 44045  004F4A  C335  F0E4         	movff	_menuArray+53,_savesMenu+2
 44046                           
 44047                           ;menu.c: 56: encoderPolarityMenu = menuArray[18];
 44048  004F4E  C336  F138         	movff	_menuArray+54,_encoderPolarityMenu
 44049  004F52  C337  F139         	movff	_menuArray+55,_encoderPolarityMenu+1
 44050  004F56  C338  F13A         	movff	_menuArray+56,_encoderPolarityMenu+2
 44051                           
 44052                           ;menu.c: 57: arpeggiatorMenu = menuArray[19];
 44053  004F5A  C339  F0DF         	movff	_menuArray+57,_arpeggiatorMenu
 44054  004F5E  C33A  F0E0         	movff	_menuArray+58,_arpeggiatorMenu+1
 44055  004F62  C33B  F0E1         	movff	_menuArray+59,_arpeggiatorMenu+2
 44056                           
 44057                           ;menu.c: 58: arpeggiatorOnOffMenu = menuArray[20];
 44058  004F66  C33C  F135         	movff	_menuArray+60,_arpeggiatorOnOffMenu
 44059  004F6A  C33D  F136         	movff	_menuArray+61,_arpeggiatorOnOffMenu+1
 44060  004F6E  C33E  F137         	movff	_menuArray+62,_arpeggiatorOnOffMenu+2
 44061                           
 44062                           ;menu.c: 59: arpeggiatorTypeMenu = menuArray[21];
 44063  004F72  C33F  F12C         	movff	_menuArray+63,_arpeggiatorTypeMenu
 44064  004F76  C340  F12D         	movff	_menuArray+64,_arpeggiatorTypeMenu+1
 44065  004F7A  C341  F12E         	movff	_menuArray+65,_arpeggiatorTypeMenu+2
 44066                           
 44067                           ;menu.c: 60: arpeggiatorNoteLengthMenu = menuArray[22];
 44068  004F7E  C342  F129         	movff	_menuArray+66,_arpeggiatorNoteLengthMenu
 44069  004F82  C343  F12A         	movff	_menuArray+67,_arpeggiatorNoteLengthMenu+1
 44070  004F86  C344  F12B         	movff	_menuArray+68,_arpeggiatorNoteLengthMenu+2
 44071                           
 44072                           ;menu.c: 61: arpeggiatorLatchMenu = menuArray[23];
 44073  004F8A  C345  F126         	movff	_menuArray+69,_arpeggiatorLatchMenu
 44074  004F8E  C346  F127         	movff	_menuArray+70,_arpeggiatorLatchMenu+1
 44075  004F92  C347  F128         	movff	_menuArray+71,_arpeggiatorLatchMenu+2
 44076                           
 44077                           ;menu.c: 62: arpeggiatorLatchOnOffMenu = menuArray[24];
 44078  004F96  C348  F123         	movff	_menuArray+72,_arpeggiatorLatchOnOffMenu
 44079  004F9A  C349  F124         	movff	_menuArray+73,_arpeggiatorLatchOnOffMenu+1
 44080  004F9E  C34A  F125         	movff	_menuArray+74,_arpeggiatorLatchOnOffMenu+2
 44081                           
 44082                           ;menu.c: 63: arpeggiatorAutoLatchOnOffMenu = menuArray[25];
 44083  004FA2  C34B  F120         	movff	_menuArray+75,_arpeggiatorAutoLatchOnOffMenu
 44084  004FA6  C34C  F121         	movff	_menuArray+76,_arpeggiatorAutoLatchOnOffMenu+1
 44085  004FAA  C34D  F122         	movff	_menuArray+77,_arpeggiatorAutoLatchOnOffMenu+2
 44086                           
 44087                           ;menu.c: 64: arpeggiatorUnLatchModeMenu = menuArray[26];
 44088  004FAE  C34E  F11D         	movff	_menuArray+78,_arpeggiatorUnLatchModeMenu
 44089  004FB2  C34F  F11E         	movff	_menuArray+79,_arpeggiatorUnLatchModeMenu+1
 44090  004FB6  C350  F11F         	movff	_menuArray+80,_arpeggiatorUnLatchModeMenu+2
 44091                           
 44092                           ;menu.c: 65: arpeggiatorRandomizeSkipMenu = menuArray[27];
 44093  004FBA  C351  F11A         	movff	_menuArray+81,_arpeggiatorRandomizeSkipMenu
 44094  004FBE  C352  F11B         	movff	_menuArray+82,_arpeggiatorRandomizeSkipMenu+1
 44095  004FC2  C353  F11C         	movff	_menuArray+83,_arpeggiatorRandomizeSkipMenu+2
 44096                           
 44097                           ;menu.c: 66: arpeggiatorRandomizeTypeMenu = menuArray[28];
 44098  004FC6  C354  F117         	movff	_menuArray+84,_arpeggiatorRandomizeTypeMenu
 44099  004FCA  C355  F118         	movff	_menuArray+85,_arpeggiatorRandomizeTypeMenu+1
 44100  004FCE  C356  F119         	movff	_menuArray+86,_arpeggiatorRandomizeTypeMenu+2
 44101                           
 44102                           ;menu.c: 67: arpeggiatorSkipFirstLastMenu = menuArray[29];
 44103  004FD2  C357  F114         	movff	_menuArray+87,_arpeggiatorSkipFirstLastMenu
 44104  004FD6  C358  F115         	movff	_menuArray+88,_arpeggiatorSkipFirstLastMenu+1
 44105  004FDA  C359  F116         	movff	_menuArray+89,_arpeggiatorSkipFirstLastMenu+2
 44106                           
 44107                           ;menu.c: 68: arpeggiatorLastNoteModeMenu = menuArray[30];
 44108  004FDE  C35A  F0DC         	movff	_menuArray+90,_arpeggiatorLastNoteModeMenu
 44109  004FE2  C35B  F0DD         	movff	_menuArray+91,_arpeggiatorLastNoteModeMenu+1
 44110  004FE6  C35C  F0DE         	movff	_menuArray+92,_arpeggiatorLastNoteModeMenu+2
 44111                           
 44112                           ; BSR set to: 0
 44113  004FEA  0012               	return		;funcret
 44114  004FEC                     __end_of_initializeMenuArray:
 44115                           	opt stack 0
 44116                           tblptru	equ	0xFF8
 44117                           tblptrh	equ	0xFF7
 44118                           tblptrl	equ	0xFF6
 44119                           tablat	equ	0xFF5
 44120                           prodh	equ	0xFF4
 44121                           prodl	equ	0xFF3
 44122                           intcon	equ	0xFF2
 44123                           intcon2	equ	0xFF1
 44124                           indf0	equ	0xFEF
 44125                           postinc0	equ	0xFEE
 44126                           postdec0	equ	0xFED
 44127                           fsr0h	equ	0xFEA
 44128                           fsr0l	equ	0xFE9
 44129                           wreg	equ	0xFE8
 44130                           postinc1	equ	0xFE6
 44131                           postdec1	equ	0xFE5
 44132                           plusw1	equ	0xFE3
 44133                           fsr1h	equ	0xFE2
 44134                           fsr1l	equ	0xFE1
 44135                           indf2	equ	0xFDF
 44136                           postinc2	equ	0xFDE
 44137                           postdec2	equ	0xFDD
 44138                           plusw2	equ	0xFDB
 44139                           fsr2h	equ	0xFDA
 44140                           fsr2l	equ	0xFD9
 44141                           status	equ	0xFD8
 44142                           
 44143 ;; *************** function ___wmul *****************
 44144 ;; Defined at:
 44145 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 44146 ;; Parameters:    Size  Location     Type
 44147 ;;  multiplier      2    0[BANK0 ] unsigned int 
 44148 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 44149 ;; Auto vars:     Size  Location     Type
 44150 ;;  product         2    4[BANK0 ] unsigned int 
 44151 ;; Return value:  Size  Location     Type
 44152 ;;                  2    0[BANK0 ] unsigned int 
 44153 ;; Registers used:
 44154 ;;		wreg, status,2, status,0, prodl, prodh
 44155 ;; Tracked objects:
 44156 ;;		On entry : 0/0
 44157 ;;		On exit  : 0/0
 44158 ;;		Unchanged: 0/0
 44159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44160 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44161 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44163 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44164 ;;Total ram usage:        6 bytes
 44165 ;; Hardware stack levels used:    1
 44166 ;; Hardware stack levels required when called:    5
 44167 ;; This function calls:
 44168 ;;		Nothing
 44169 ;; This function is called by:
 44170 ;;		_processOctave
 44171 ;;		_initializeMenuArray
 44172 ;;		_menu_lcd
 44173 ;;		_Function_A_1
 44174 ;;		_Function_A_2
 44175 ;;		_Function_A_3
 44176 ;;		_Function_A
 44177 ;;		_Function_B
 44178 ;;		_Function_C_1
 44179 ;;		_Function_C_2
 44180 ;;		_Function_C_3
 44181 ;;		_Function_C
 44182 ;;		_Function_D_1
 44183 ;;		_Function_D_3
 44184 ;;		_Function_D_4
 44185 ;;		_Function_D_5
 44186 ;;		_Function_D
 44187 ;;		_Function_E
 44188 ;;		_Function_G_1
 44189 ;;		_Function_G_2
 44190 ;;		_Function_G_4
 44191 ;;		_Function_G
 44192 ;;		_Function_H
 44193 ;;		_Function_H_4
 44194 ;;		_Function_H_5
 44195 ;;		_Function_H_6
 44196 ;;		_Function_H_8
 44197 ;;		_Function_H_9_1
 44198 ;;		_Function_H_9_2
 44199 ;;		_Function_H_9_3
 44200 ;;		_Function_H_9_4
 44201 ;;		_Function_H_9
 44202 ;; This function uses a non-reentrant model
 44203 ;;
 44204                           
 44205                           	psect	text133
 44206  009858                     __ptext133:
 44207                           	opt stack 0
 44208  009858                     ___wmul:
 44209                           	opt stack 24
 44210                           
 44211                           ; BSR set to: 0
 44212                           ;incstack = 0
 44213  009858  0100               	movlb	0	; () banked
 44214  00985A  5160               	movf	___wmul@multiplier& (0+255),w,b
 44215  00985C  0362               	mulwf	___wmul@multiplicand& (0+255),b
 44216  00985E  CFF3 F064          	movff	prodl,___wmul@product
 44217  009862  CFF4 F065          	movff	prodh,___wmul@product+1
 44218  009866  5160               	movf	___wmul@multiplier& (0+255),w,b
 44219  009868  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 44220  00986A  50F3               	movf	prodl,w,c
 44221  00986C  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 44222  00986E  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 44223  009870  0362               	mulwf	___wmul@multiplicand& (0+255),b
 44224  009872  50F3               	movf	prodl,w,c
 44225  009874  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 44226                           
 44227                           ; BSR set to: 0
 44228  009876  C064  F060         	movff	___wmul@product,?___wmul
 44229  00987A  C065  F061         	movff	___wmul@product+1,?___wmul+1
 44230  00987E  0012               	return	
 44231  009880                     __end_of___wmul:
 44232                           	opt stack 0
 44233                           tblptru	equ	0xFF8
 44234                           tblptrh	equ	0xFF7
 44235                           tblptrl	equ	0xFF6
 44236                           tablat	equ	0xFF5
 44237                           prodh	equ	0xFF4
 44238                           prodl	equ	0xFF3
 44239                           intcon	equ	0xFF2
 44240                           intcon2	equ	0xFF1
 44241                           indf0	equ	0xFEF
 44242                           postinc0	equ	0xFEE
 44243                           postdec0	equ	0xFED
 44244                           fsr0h	equ	0xFEA
 44245                           fsr0l	equ	0xFE9
 44246                           wreg	equ	0xFE8
 44247                           postinc1	equ	0xFE6
 44248                           postdec1	equ	0xFE5
 44249                           plusw1	equ	0xFE3
 44250                           fsr1h	equ	0xFE2
 44251                           fsr1l	equ	0xFE1
 44252                           indf2	equ	0xFDF
 44253                           postinc2	equ	0xFDE
 44254                           postdec2	equ	0xFDD
 44255                           plusw2	equ	0xFDB
 44256                           fsr2h	equ	0xFDA
 44257                           fsr2l	equ	0xFD9
 44258                           status	equ	0xFD8
 44259                           
 44260 ;; *************** function _displayTest *****************
 44261 ;; Defined at:
 44262 ;;		line 32 in file "segment.c"
 44263 ;; Parameters:    Size  Location     Type
 44264 ;;		None
 44265 ;; Auto vars:     Size  Location     Type
 44266 ;;		None
 44267 ;; Return value:  Size  Location     Type
 44268 ;;                  1    wreg      void 
 44269 ;; Registers used:
 44270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 44271 ;; Tracked objects:
 44272 ;;		On entry : 0/0
 44273 ;;		On exit  : 0/0
 44274 ;;		Unchanged: 0/0
 44275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44278 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44279 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44280 ;;Total ram usage:        2 bytes
 44281 ;; Hardware stack levels used:    1
 44282 ;; Hardware stack levels required when called:    6
 44283 ;; This function calls:
 44284 ;;		_strcpy
 44285 ;; This function is called by:
 44286 ;;		_main
 44287 ;; This function uses a non-reentrant model
 44288 ;;
 44289                           
 44290                           	psect	text134
 44291  0085F4                     __ptext134:
 44292                           	opt stack 0
 44293  0085F4                     _displayTest:
 44294                           	opt stack 24
 44295                           
 44296                           ;segment.c: 38: DISPLAY_MODE = 1;
 44297                           
 44298                           ; BSR set to: 0
 44299                           ;incstack = 0
 44300  0085F4  0E01               	movlw	1
 44301  0085F6  0100               	movlb	0	; () banked
 44302  0085F8  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 44303                           
 44304                           ; BSR set to: 0
 44305                           ;segment.c: 39: strcpy(string_to_display,"tESt");
 44306  0085FA  0EF8               	movlw	low _string_to_display
 44307  0085FC  6F60               	movwf	strcpy@to& (0+255),b
 44308  0085FE  0E01               	movlw	high _string_to_display
 44309  008600  6F61               	movwf	(strcpy@to+1)& (0+255),b
 44310  008602  0ED7               	movlw	low STR_8
 44311  008604  6F62               	movwf	strcpy@from& (0+255),b
 44312  008606  0EFF               	movlw	high STR_8
 44313  008608  6F63               	movwf	(strcpy@from+1)& (0+255),b
 44314  00860A  EC90  F04B         	call	_strcpy	;wreg free
 44315                           
 44316                           ;segment.c: 41: _delay((unsigned long)((500)*(20000000/4000.0)));
 44317  00860E  0E0D               	movlw	13
 44318  008610  0100               	movlb	0	; () banked
 44319  008612  6F67               	movwf	(??_displayTest+1)& (0+255),b
 44320  008614  0EAF               	movlw	175
 44321  008616  6F66               	movwf	??_displayTest& (0+255),b
 44322  008618  0EB6               	movlw	182
 44323  00861A                     u67227:
 44324  00861A  2EE8               	decfsz	wreg,f,c
 44325  00861C  D7FE               	bra	u67227
 44326  00861E  2F66               	decfsz	??_displayTest& (0+255),f,b
 44327  008620  D7FC               	bra	u67227
 44328  008622  2F67               	decfsz	(??_displayTest+1)& (0+255),f,b
 44329  008624  D7FA               	bra	u67227
 44330  008626  F000               	nop	
 44331                           
 44332                           ;segment.c: 43: DISPLAY_MODE = 0;
 44333  008628  0E00               	movlw	0
 44334  00862A  0100               	movlb	0	; () banked
 44335  00862C  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 44336                           
 44337                           ; BSR set to: 0
 44338                           ;segment.c: 44: DIGIT_MODE = 0;
 44339  00862E  0E00               	movlw	0
 44340  008630  6E3A               	movwf	_DIGIT_MODE,c
 44341                           
 44342                           ; BSR set to: 0
 44343                           ;segment.c: 45: number_to_display = 8888;
 44344  008632  0E22               	movlw	34
 44345  008634  6E4C               	movwf	_number_to_display+1,c
 44346  008636  0EB8               	movlw	184
 44347  008638  6E4B               	movwf	_number_to_display,c
 44348                           
 44349                           ; BSR set to: 0
 44350                           ;segment.c: 46: light_decimal_points = 1;
 44351  00863A  8006               	bsf	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 44352                           
 44353                           ; BSR set to: 0
 44354                           ;segment.c: 47: _delay((unsigned long)((1000)*(20000000/4000.0)));
 44355  00863C  0E1A               	movlw	26
 44356  00863E  0100               	movlb	0	; () banked
 44357  008640  6F67               	movwf	(??_displayTest+1)& (0+255),b
 44358  008642  0E5E               	movlw	94
 44359  008644  6F66               	movwf	??_displayTest& (0+255),b
 44360  008646  0E6E               	movlw	110
 44361  008648                     u67237:
 44362  008648  2EE8               	decfsz	wreg,f,c
 44363  00864A  D7FE               	bra	u67237
 44364  00864C  2F66               	decfsz	??_displayTest& (0+255),f,b
 44365  00864E  D7FC               	bra	u67237
 44366  008650  2F67               	decfsz	(??_displayTest+1)& (0+255),f,b
 44367  008652  D7FA               	bra	u67237
 44368  008654  F000               	nop	
 44369                           
 44370                           ;segment.c: 48: light_decimal_points = 0;
 44371  008656  9006               	bcf	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 44372                           
 44373                           ;segment.c: 50: DISPLAY_MODE = 1;
 44374  008658  0E01               	movlw	1
 44375  00865A  0100               	movlb	0	; () banked
 44376  00865C  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 44377                           
 44378                           ; BSR set to: 0
 44379                           ;segment.c: 51: strcpy(string_to_display,"    ");
 44380  00865E  0EF8               	movlw	low _string_to_display
 44381  008660  6F60               	movwf	strcpy@to& (0+255),b
 44382  008662  0E01               	movlw	high _string_to_display
 44383  008664  6F61               	movwf	(strcpy@to+1)& (0+255),b
 44384  008666  0E70               	movlw	low (STR_10+12)
 44385  008668  6F62               	movwf	strcpy@from& (0+255),b
 44386  00866A  0EFD               	movlw	high (STR_10+12)
 44387  00866C  6F63               	movwf	(strcpy@from+1)& (0+255),b
 44388  00866E  EC90  F04B         	call	_strcpy	;wreg free
 44389  008672  0012               	return		;funcret
 44390  008674                     __end_of_displayTest:
 44391                           	opt stack 0
 44392                           tblptru	equ	0xFF8
 44393                           tblptrh	equ	0xFF7
 44394                           tblptrl	equ	0xFF6
 44395                           tablat	equ	0xFF5
 44396                           prodh	equ	0xFF4
 44397                           prodl	equ	0xFF3
 44398                           intcon	equ	0xFF2
 44399                           intcon2	equ	0xFF1
 44400                           indf0	equ	0xFEF
 44401                           postinc0	equ	0xFEE
 44402                           postdec0	equ	0xFED
 44403                           fsr0h	equ	0xFEA
 44404                           fsr0l	equ	0xFE9
 44405                           wreg	equ	0xFE8
 44406                           postinc1	equ	0xFE6
 44407                           postdec1	equ	0xFE5
 44408                           plusw1	equ	0xFE3
 44409                           fsr1h	equ	0xFE2
 44410                           fsr1l	equ	0xFE1
 44411                           indf2	equ	0xFDF
 44412                           postinc2	equ	0xFDE
 44413                           postdec2	equ	0xFDD
 44414                           plusw2	equ	0xFDB
 44415                           fsr2h	equ	0xFDA
 44416                           fsr2l	equ	0xFD9
 44417                           status	equ	0xFD8
 44418                           
 44419 ;; *************** function _strcpy *****************
 44420 ;; Defined at:
 44421 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
 44422 ;; Parameters:    Size  Location     Type
 44423 ;;  to              2    0[BANK0 ] PTR unsigned char 
 44424 ;;		 -> string_to_display(5), 
 44425 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 44426 ;;		 -> STR_61(5), STR_59(5), STR_56(5), STR_54(5), 
 44427 ;;		 -> STR_44(5), STR_43(5), STR_41(5), STR_9(5), 
 44428 ;;		 -> STR_8(5), STR_7(5), STR_6(5), STR_5(5), 
 44429 ;;		 -> STR_4(5), STR_3(5), STR_2(5), STR_1(5), 
 44430 ;; Auto vars:     Size  Location     Type
 44431 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 44432 ;;		 -> string_to_display(5), 
 44433 ;; Return value:  Size  Location     Type
 44434 ;;                  2    0[BANK0 ] PTR unsigned char 
 44435 ;; Registers used:
 44436 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 44437 ;; Tracked objects:
 44438 ;;		On entry : 0/0
 44439 ;;		On exit  : 0/0
 44440 ;;		Unchanged: 0/0
 44441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44442 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44443 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44445 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44446 ;;Total ram usage:        6 bytes
 44447 ;; Hardware stack levels used:    1
 44448 ;; Hardware stack levels required when called:    5
 44449 ;; This function calls:
 44450 ;;		Nothing
 44451 ;; This function is called by:
 44452 ;;		_doTheLatch
 44453 ;;		_doTheUnLatch
 44454 ;;		_processOctave
 44455 ;;		_displayTest
 44456 ;;		_Function_H_1
 44457 ;;		_Function_H_6_2
 44458 ;;		_Function_H_7
 44459 ;; This function uses a non-reentrant model
 44460 ;;
 44461                           
 44462                           	psect	text135
 44463  009720                     __ptext135:
 44464                           	opt stack 0
 44465  009720                     _strcpy:
 44466                           	opt stack 20
 44467                           
 44468                           ;incstack = 0
 44469  009720  C060  F064         	movff	strcpy@to,strcpy@cp
 44470  009724  C061  F065         	movff	strcpy@to+1,strcpy@cp+1
 44471  009728  D005               	goto	l6198
 44472  00972A  0100               	movlb	0	; () banked
 44473  00972C  4B64               	infsnz	strcpy@cp& (0+255),f,b
 44474  00972E  2B65               	incf	(strcpy@cp+1)& (0+255),f,b
 44475  009730  4B62               	infsnz	strcpy@from& (0+255),f,b
 44476  009732  2B63               	incf	(strcpy@from+1)& (0+255),f,b
 44477  009734                     l6198:
 44478                           
 44479                           ; BSR set to: 0
 44480  009734  C062  FFF6         	movff	strcpy@from,tblptrl
 44481  009738  C063  FFF7         	movff	strcpy@from+1,tblptrh
 44482  00973C                     	if	0	;tblptru may be non-zero
 44483  00973C                     	endif
 44484  00973C                     	if	0	;tblptru may be non-zero
 44485  00973C                     	endif
 44486  00973C  C064  FFD9         	movff	strcpy@cp,fsr2l
 44487  009740  C065  FFDA         	movff	strcpy@cp+1,fsr2h
 44488  009744  0008               	tblrd		*
 44489  009746  CFF5 FFDF          	movff	tablat,indf2
 44490  00974A  50DF               	movf	indf2,w,c
 44491  00974C  B4D8               	btfsc	status,2,c
 44492  00974E  0012               	return	
 44493  009750  D7EC               	goto	l6199
 44494  009752                     __end_of_strcpy:
 44495                           	opt stack 0
 44496                           tblptru	equ	0xFF8
 44497                           tblptrh	equ	0xFF7
 44498                           tblptrl	equ	0xFF6
 44499                           tablat	equ	0xFF5
 44500                           prodh	equ	0xFF4
 44501                           prodl	equ	0xFF3
 44502                           intcon	equ	0xFF2
 44503                           intcon2	equ	0xFF1
 44504                           indf0	equ	0xFEF
 44505                           postinc0	equ	0xFEE
 44506                           postdec0	equ	0xFED
 44507                           fsr0h	equ	0xFEA
 44508                           fsr0l	equ	0xFE9
 44509                           wreg	equ	0xFE8
 44510                           postinc1	equ	0xFE6
 44511                           postdec1	equ	0xFE5
 44512                           plusw1	equ	0xFE3
 44513                           fsr1h	equ	0xFE2
 44514                           fsr1l	equ	0xFE1
 44515                           indf2	equ	0xFDF
 44516                           postinc2	equ	0xFDE
 44517                           postdec2	equ	0xFDD
 44518                           plusw2	equ	0xFDB
 44519                           fsr2h	equ	0xFDA
 44520                           fsr2l	equ	0xFD9
 44521                           status	equ	0xFD8
 44522                           
 44523 ;; *************** function _Lcd_Start *****************
 44524 ;; Defined at:
 44525 ;;		line 94 in file "lcd.c"
 44526 ;; Parameters:    Size  Location     Type
 44527 ;;		None
 44528 ;; Auto vars:     Size  Location     Type
 44529 ;;  i               2    4[BANK0 ] int 
 44530 ;; Return value:  Size  Location     Type
 44531 ;;                  1    wreg      void 
 44532 ;; Registers used:
 44533 ;;		wreg, status,2, status,0, cstack
 44534 ;; Tracked objects:
 44535 ;;		On entry : 0/0
 44536 ;;		On exit  : 0/0
 44537 ;;		Unchanged: 0/0
 44538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44540 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44541 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44542 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44543 ;;Total ram usage:        3 bytes
 44544 ;; Hardware stack levels used:    1
 44545 ;; Hardware stack levels required when called:    7
 44546 ;; This function calls:
 44547 ;;		_Lcd_Cmd
 44548 ;;		_Lcd_SetBit
 44549 ;; This function is called by:
 44550 ;;		_main
 44551 ;; This function uses a non-reentrant model
 44552 ;;
 44553                           
 44554                           	psect	text136
 44555  008354                     __ptext136:
 44556                           	opt stack 0
 44557  008354                     _Lcd_Start:
 44558                           	opt stack 23
 44559                           
 44560                           ;lcd.c: 96: Lcd_SetBit(0x00);
 44561                           
 44562                           ;incstack = 0
 44563  008354  0E00               	movlw	0
 44564  008356  ECC1  F04B         	call	_Lcd_SetBit
 44565                           
 44566                           ;lcd.c: 97: for(int i=1065244; i<=0; i--) __nop();
 44567  00835A  0E41               	movlw	65
 44568  00835C  0100               	movlb	0	; () banked
 44569  00835E  6F65               	movwf	(Lcd_Start@i+1)& (0+255),b
 44570  008360  0E1C               	movlw	28
 44571  008362  6F64               	movwf	Lcd_Start@i& (0+255),b
 44572  008364                     l33120:
 44573                           
 44574                           ; BSR set to: 0
 44575  008364  BF65               	btfsc	(Lcd_Start@i+1)& (0+255),7,b
 44576  008366  D005               	goto	l46
 44577  008368  5165               	movf	(Lcd_Start@i+1)& (0+255),w,b
 44578  00836A  E109               	bnz	l33128
 44579  00836C  0564               	decf	Lcd_Start@i& (0+255),w,b
 44580  00836E  B0D8               	btfsc	status,0,c
 44581  008370  D006               	goto	u60260
 44582  008372                     l46:
 44583                           
 44584                           ; BSR set to: 0
 44585  008372  F000               	nop	
 44586  008374  0100               	movlb	0	; () banked
 44587  008376  0764               	decf	Lcd_Start@i& (0+255),f,b
 44588  008378  A0D8               	btfss	status,0,c
 44589  00837A  0765               	decf	(Lcd_Start@i+1)& (0+255),f,b
 44590  00837C  D7F3               	goto	l33120
 44591  00837E                     u60260:
 44592  00837E                     l33128:
 44593                           
 44594                           ; BSR set to: 0
 44595                           ;lcd.c: 98: Lcd_Cmd(0x03);
 44596  00837E  0E03               	movlw	3
 44597  008380  EC40  F04C         	call	_Lcd_Cmd
 44598                           
 44599                           ;lcd.c: 99: _delay((unsigned long)((5)*(20000000/4000.0)));
 44600  008384  0E21               	movlw	33
 44601  008386  0100               	movlb	0	; () banked
 44602  008388  6F63               	movwf	??_Lcd_Start& (0+255),b
 44603  00838A  0E76               	movlw	118
 44604  00838C                     u67247:
 44605  00838C  2EE8               	decfsz	wreg,f,c
 44606  00838E  D7FE               	bra	u67247
 44607  008390  2F63               	decfsz	??_Lcd_Start& (0+255),f,b
 44608  008392  D7FC               	bra	u67247
 44609  008394  F000               	nop	
 44610                           
 44611                           ;lcd.c: 100: Lcd_Cmd(0x03);
 44612  008396  0E03               	movlw	3
 44613  008398  EC40  F04C         	call	_Lcd_Cmd
 44614                           
 44615                           ;lcd.c: 101: _delay((unsigned long)((11)*(20000000/4000.0)));
 44616  00839C  0E48               	movlw	72
 44617  00839E  0100               	movlb	0	; () banked
 44618  0083A0  6F63               	movwf	??_Lcd_Start& (0+255),b
 44619  0083A2  0E6C               	movlw	108
 44620  0083A4                     u67257:
 44621  0083A4  2EE8               	decfsz	wreg,f,c
 44622  0083A6  D7FE               	bra	u67257
 44623  0083A8  2F63               	decfsz	??_Lcd_Start& (0+255),f,b
 44624  0083AA  D7FC               	bra	u67257
 44625  0083AC  F000               	nop	
 44626                           
 44627                           ;lcd.c: 102: Lcd_Cmd(0x03);
 44628  0083AE  0E03               	movlw	3
 44629  0083B0  EC40  F04C         	call	_Lcd_Cmd
 44630                           
 44631                           ;lcd.c: 103: Lcd_Cmd(0x02);
 44632  0083B4  0E02               	movlw	2
 44633  0083B6  EC40  F04C         	call	_Lcd_Cmd
 44634                           
 44635                           ;lcd.c: 104: Lcd_Cmd(0x02);
 44636  0083BA  0E02               	movlw	2
 44637  0083BC  EC40  F04C         	call	_Lcd_Cmd
 44638                           
 44639                           ;lcd.c: 105: Lcd_Cmd(0x08);
 44640  0083C0  0E08               	movlw	8
 44641  0083C2  EC40  F04C         	call	_Lcd_Cmd
 44642                           
 44643                           ;lcd.c: 106: Lcd_Cmd(0x00);
 44644  0083C6  0E00               	movlw	0
 44645  0083C8  EC40  F04C         	call	_Lcd_Cmd
 44646                           
 44647                           ;lcd.c: 107: Lcd_Cmd(0x0C);
 44648  0083CC  0E0C               	movlw	12
 44649  0083CE  EC40  F04C         	call	_Lcd_Cmd
 44650                           
 44651                           ;lcd.c: 108: Lcd_Cmd(0x00);
 44652  0083D2  0E00               	movlw	0
 44653  0083D4  EC40  F04C         	call	_Lcd_Cmd
 44654                           
 44655                           ;lcd.c: 109: Lcd_Cmd(0x06);
 44656  0083D8  0E06               	movlw	6
 44657  0083DA  EC40  F04C         	call	_Lcd_Cmd
 44658  0083DE  0012               	return		;funcret
 44659  0083E0                     __end_of_Lcd_Start:
 44660                           	opt stack 0
 44661                           tblptru	equ	0xFF8
 44662                           tblptrh	equ	0xFF7
 44663                           tblptrl	equ	0xFF6
 44664                           tablat	equ	0xFF5
 44665                           prodh	equ	0xFF4
 44666                           prodl	equ	0xFF3
 44667                           intcon	equ	0xFF2
 44668                           intcon2	equ	0xFF1
 44669                           indf0	equ	0xFEF
 44670                           postinc0	equ	0xFEE
 44671                           postdec0	equ	0xFED
 44672                           fsr0h	equ	0xFEA
 44673                           fsr0l	equ	0xFE9
 44674                           wreg	equ	0xFE8
 44675                           postinc1	equ	0xFE6
 44676                           postdec1	equ	0xFE5
 44677                           plusw1	equ	0xFE3
 44678                           fsr1h	equ	0xFE2
 44679                           fsr1l	equ	0xFE1
 44680                           indf2	equ	0xFDF
 44681                           postinc2	equ	0xFDE
 44682                           postdec2	equ	0xFDD
 44683                           plusw2	equ	0xFDB
 44684                           fsr2h	equ	0xFDA
 44685                           fsr2l	equ	0xFD9
 44686                           status	equ	0xFD8
 44687                           
 44688 ;; *************** function _Lcd_Cmd *****************
 44689 ;; Defined at:
 44690 ;;		line 44 in file "lcd.c"
 44691 ;; Parameters:    Size  Location     Type
 44692 ;;  a               1    wreg     unsigned char 
 44693 ;; Auto vars:     Size  Location     Type
 44694 ;;  a               1    2[BANK0 ] unsigned char 
 44695 ;; Return value:  Size  Location     Type
 44696 ;;                  1    wreg      void 
 44697 ;; Registers used:
 44698 ;;		wreg, status,2, cstack
 44699 ;; Tracked objects:
 44700 ;;		On entry : 0/0
 44701 ;;		On exit  : 0/0
 44702 ;;		Unchanged: 0/0
 44703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44705 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44706 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44707 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44708 ;;Total ram usage:        2 bytes
 44709 ;; Hardware stack levels used:    1
 44710 ;; Hardware stack levels required when called:    6
 44711 ;; This function calls:
 44712 ;;		_Lcd_SetBit
 44713 ;; This function is called by:
 44714 ;;		_Lcd_Clear
 44715 ;;		_Lcd_Set_Cursor
 44716 ;;		_Lcd_Start
 44717 ;; This function uses a non-reentrant model
 44718 ;;
 44719                           
 44720                           	psect	text137
 44721  009880                     __ptext137:
 44722                           	opt stack 0
 44723  009880                     _Lcd_Cmd:
 44724                           	opt stack 20
 44725                           
 44726                           ;incstack = 0
 44727                           ;Lcd_Cmd@a stored from wreg
 44728  009880  0100               	movlb	0	; () banked
 44729  009882  6F62               	movwf	Lcd_Cmd@a& (0+255),b
 44730                           
 44731                           ;lcd.c: 46: RE0 = 0;
 44732  009884  9084               	bcf	3972,0,c	;volatile
 44733                           
 44734                           ;lcd.c: 47: Lcd_SetBit(a);
 44735  009886  0100               	movlb	0	; () banked
 44736  009888  5162               	movf	Lcd_Cmd@a& (0+255),w,b
 44737  00988A  ECC1  F04B         	call	_Lcd_SetBit
 44738                           
 44739                           ;lcd.c: 48: RE1 = 1;
 44740  00988E  8284               	bsf	3972,1,c	;volatile
 44741                           
 44742                           ;lcd.c: 49: _delay((unsigned long)((4)*(20000000/4000.0)));
 44743  009890  0E1A               	movlw	26
 44744  009892  0100               	movlb	0	; () banked
 44745  009894  6F61               	movwf	??_Lcd_Cmd& (0+255),b
 44746  009896  0EF8               	movlw	248
 44747  009898                     u67267:
 44748  009898  2EE8               	decfsz	wreg,f,c
 44749  00989A  D7FE               	bra	u67267
 44750  00989C  2F61               	decfsz	??_Lcd_Cmd& (0+255),f,b
 44751  00989E  D7FC               	bra	u67267
 44752  0098A0  F000               	nop	
 44753                           
 44754                           ;lcd.c: 50: RE1 = 0;
 44755  0098A2  9284               	bcf	3972,1,c	;volatile
 44756  0098A4  0012               	return		;funcret
 44757  0098A6                     __end_of_Lcd_Cmd:
 44758                           	opt stack 0
 44759                           tblptru	equ	0xFF8
 44760                           tblptrh	equ	0xFF7
 44761                           tblptrl	equ	0xFF6
 44762                           tablat	equ	0xFF5
 44763                           prodh	equ	0xFF4
 44764                           prodl	equ	0xFF3
 44765                           intcon	equ	0xFF2
 44766                           intcon2	equ	0xFF1
 44767                           indf0	equ	0xFEF
 44768                           postinc0	equ	0xFEE
 44769                           postdec0	equ	0xFED
 44770                           fsr0h	equ	0xFEA
 44771                           fsr0l	equ	0xFE9
 44772                           wreg	equ	0xFE8
 44773                           postinc1	equ	0xFE6
 44774                           postdec1	equ	0xFE5
 44775                           plusw1	equ	0xFE3
 44776                           fsr1h	equ	0xFE2
 44777                           fsr1l	equ	0xFE1
 44778                           indf2	equ	0xFDF
 44779                           postinc2	equ	0xFDE
 44780                           postdec2	equ	0xFDD
 44781                           plusw2	equ	0xFDB
 44782                           fsr2h	equ	0xFDA
 44783                           fsr2l	equ	0xFD9
 44784                           status	equ	0xFD8
 44785                           
 44786 ;; *************** function _Lcd_SetBit *****************
 44787 ;; Defined at:
 44788 ;;		line 21 in file "lcd.c"
 44789 ;; Parameters:    Size  Location     Type
 44790 ;;  data_bit        1    wreg     unsigned char 
 44791 ;; Auto vars:     Size  Location     Type
 44792 ;;  data_bit        1    0[BANK0 ] unsigned char 
 44793 ;; Return value:  Size  Location     Type
 44794 ;;                  1    wreg      void 
 44795 ;; Registers used:
 44796 ;;		wreg
 44797 ;; Tracked objects:
 44798 ;;		On entry : 0/0
 44799 ;;		On exit  : 0/0
 44800 ;;		Unchanged: 0/0
 44801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44803 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44805 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44806 ;;Total ram usage:        1 bytes
 44807 ;; Hardware stack levels used:    1
 44808 ;; Hardware stack levels required when called:    5
 44809 ;; This function calls:
 44810 ;;		Nothing
 44811 ;; This function is called by:
 44812 ;;		_Lcd_Cmd
 44813 ;;		_Lcd_Start
 44814 ;;		_Lcd_Print_Char
 44815 ;; This function uses a non-reentrant model
 44816 ;;
 44817                           
 44818                           	psect	text138
 44819  009782                     __ptext138:
 44820                           	opt stack 0
 44821  009782                     _Lcd_SetBit:
 44822                           	opt stack 20
 44823                           
 44824                           ;incstack = 0
 44825                           ;Lcd_SetBit@data_bit stored from wreg
 44826  009782  0100               	movlb	0	; () banked
 44827  009784  6F60               	movwf	Lcd_SetBit@data_bit& (0+255),b
 44828                           
 44829                           ;lcd.c: 23: if(data_bit& 1)
 44830  009786  0100               	movlb	0	; () banked
 44831  009788  A160               	btfss	Lcd_SetBit@data_bit& (0+255),0,b
 44832  00978A  D002               	goto	l23
 44833                           
 44834                           ; BSR set to: 0
 44835                           ;lcd.c: 24: RD4 = 1;
 44836  00978C  8883               	bsf	3971,4,c	;volatile
 44837  00978E  D001               	goto	l24
 44838  009790                     l23:
 44839                           
 44840                           ; BSR set to: 0
 44841                           ;lcd.c: 25: else
 44842                           ;lcd.c: 26: RD4 = 0;
 44843  009790  9883               	bcf	3971,4,c	;volatile
 44844  009792                     l24:
 44845                           
 44846                           ; BSR set to: 0
 44847                           ;lcd.c: 28: if(data_bit& 2)
 44848                           
 44849                           ; BSR set to: 0
 44850  009792  A360               	btfss	Lcd_SetBit@data_bit& (0+255),1,b
 44851  009794  D002               	goto	l25
 44852                           
 44853                           ; BSR set to: 0
 44854                           ;lcd.c: 29: RD5 = 1;
 44855  009796  8A83               	bsf	3971,5,c	;volatile
 44856  009798  D001               	goto	l26
 44857  00979A                     l25:
 44858                           
 44859                           ; BSR set to: 0
 44860                           ;lcd.c: 30: else
 44861                           ;lcd.c: 31: RD5 = 0;
 44862  00979A  9A83               	bcf	3971,5,c	;volatile
 44863  00979C                     l26:
 44864                           
 44865                           ; BSR set to: 0
 44866                           ;lcd.c: 33: if(data_bit& 4)
 44867                           
 44868                           ; BSR set to: 0
 44869  00979C  A560               	btfss	Lcd_SetBit@data_bit& (0+255),2,b
 44870  00979E  D002               	goto	l27
 44871                           
 44872                           ; BSR set to: 0
 44873                           ;lcd.c: 34: RD6 = 1;
 44874  0097A0  8C83               	bsf	3971,6,c	;volatile
 44875  0097A2  D001               	goto	l28
 44876  0097A4                     l27:
 44877                           
 44878                           ; BSR set to: 0
 44879                           ;lcd.c: 35: else
 44880                           ;lcd.c: 36: RD6 = 0;
 44881  0097A4  9C83               	bcf	3971,6,c	;volatile
 44882  0097A6                     l28:
 44883                           
 44884                           ; BSR set to: 0
 44885                           ;lcd.c: 38: if(data_bit& 8)
 44886                           
 44887                           ; BSR set to: 0
 44888  0097A6  A760               	btfss	Lcd_SetBit@data_bit& (0+255),3,b
 44889  0097A8  D002               	goto	l29
 44890                           
 44891                           ; BSR set to: 0
 44892                           ;lcd.c: 39: RD7 = 1;
 44893  0097AA  8E83               	bsf	3971,7,c	;volatile
 44894  0097AC  0012               	return	
 44895  0097AE                     l29:
 44896                           
 44897                           ; BSR set to: 0
 44898                           ;lcd.c: 40: else
 44899                           ;lcd.c: 41: RD7 = 0;
 44900  0097AE  9E83               	bcf	3971,7,c	;volatile
 44901  0097B0  0012               	return	
 44902  0097B2                     __end_of_Lcd_SetBit:
 44903                           	opt stack 0
 44904                           tblptru	equ	0xFF8
 44905                           tblptrh	equ	0xFF7
 44906                           tblptrl	equ	0xFF6
 44907                           tablat	equ	0xFF5
 44908                           prodh	equ	0xFF4
 44909                           prodl	equ	0xFF3
 44910                           intcon	equ	0xFF2
 44911                           intcon2	equ	0xFF1
 44912                           indf0	equ	0xFEF
 44913                           postinc0	equ	0xFEE
 44914                           postdec0	equ	0xFED
 44915                           fsr0h	equ	0xFEA
 44916                           fsr0l	equ	0xFE9
 44917                           wreg	equ	0xFE8
 44918                           postinc1	equ	0xFE6
 44919                           postdec1	equ	0xFE5
 44920                           plusw1	equ	0xFE3
 44921                           fsr1h	equ	0xFE2
 44922                           fsr1l	equ	0xFE1
 44923                           indf2	equ	0xFDF
 44924                           postinc2	equ	0xFDE
 44925                           postdec2	equ	0xFDD
 44926                           plusw2	equ	0xFDB
 44927                           fsr2h	equ	0xFDA
 44928                           fsr2l	equ	0xFD9
 44929                           status	equ	0xFD8
 44930                           
 44931 ;; *************** function _ADC_Initialize *****************
 44932 ;; Defined at:
 44933 ;;		line 22 in file "adc.c"
 44934 ;; Parameters:    Size  Location     Type
 44935 ;;		None
 44936 ;; Auto vars:     Size  Location     Type
 44937 ;;		None
 44938 ;; Return value:  Size  Location     Type
 44939 ;;                  1    wreg      void 
 44940 ;; Registers used:
 44941 ;;		wreg, status,2
 44942 ;; Tracked objects:
 44943 ;;		On entry : 0/0
 44944 ;;		On exit  : 0/0
 44945 ;;		Unchanged: 0/0
 44946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44950 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44951 ;;Total ram usage:        0 bytes
 44952 ;; Hardware stack levels used:    1
 44953 ;; Hardware stack levels required when called:    5
 44954 ;; This function calls:
 44955 ;;		Nothing
 44956 ;; This function is called by:
 44957 ;;		_main
 44958 ;; This function uses a non-reentrant model
 44959 ;;
 44960                           
 44961                           	psect	text139
 44962  0099B4                     __ptext139:
 44963                           	opt stack 0
 44964  0099B4                     _ADC_Initialize:
 44965                           	opt stack 25
 44966                           
 44967                           ;adc.c: 24: CMCON = 0x7;
 44968                           
 44969                           ; BSR set to: 0
 44970                           ;incstack = 0
 44971  0099B4  0E07               	movlw	7
 44972  0099B6  6EB4               	movwf	4020,c	;volatile
 44973                           
 44974                           ;adc.c: 25: ADCON0 = 0b00000000;
 44975  0099B8  0E00               	movlw	0
 44976  0099BA  6EC2               	movwf	4034,c	;volatile
 44977                           
 44978                           ;adc.c: 26: ADCON1 = 0b00001110;
 44979  0099BC  0E0E               	movlw	14
 44980  0099BE  6EC1               	movwf	4033,c	;volatile
 44981                           
 44982                           ;adc.c: 27: ADCON2 = 0b10000010;
 44983  0099C0  0E82               	movlw	130
 44984  0099C2  6EC0               	movwf	4032,c	;volatile
 44985                           
 44986                           ;adc.c: 31: ADON = 1;
 44987  0099C4  80C2               	bsf	4034,0,c	;volatile
 44988  0099C6  0012               	return		;funcret
 44989  0099C8                     __end_of_ADC_Initialize:
 44990                           	opt stack 0
 44991                           tblptru	equ	0xFF8
 44992                           tblptrh	equ	0xFF7
 44993                           tblptrl	equ	0xFF6
 44994                           tablat	equ	0xFF5
 44995                           prodh	equ	0xFF4
 44996                           prodl	equ	0xFF3
 44997                           intcon	equ	0xFF2
 44998                           intcon2	equ	0xFF1
 44999                           indf0	equ	0xFEF
 45000                           postinc0	equ	0xFEE
 45001                           postdec0	equ	0xFED
 45002                           fsr0h	equ	0xFEA
 45003                           fsr0l	equ	0xFE9
 45004                           wreg	equ	0xFE8
 45005                           postinc1	equ	0xFE6
 45006                           postdec1	equ	0xFE5
 45007                           plusw1	equ	0xFE3
 45008                           fsr1h	equ	0xFE2
 45009                           fsr1l	equ	0xFE1
 45010                           indf2	equ	0xFDF
 45011                           postinc2	equ	0xFDE
 45012                           postdec2	equ	0xFDD
 45013                           plusw2	equ	0xFDB
 45014                           fsr2h	equ	0xFDA
 45015                           fsr2l	equ	0xFD9
 45016                           status	equ	0xFD8
 45017                           
 45018 ;; *************** function _ISR *****************
 45019 ;; Defined at:
 45020 ;;		line 380 in file "main.c"
 45021 ;; Parameters:    Size  Location     Type
 45022 ;;		None
 45023 ;; Auto vars:     Size  Location     Type
 45024 ;;		None
 45025 ;; Return value:  Size  Location     Type
 45026 ;;                  1    wreg      void 
 45027 ;; Registers used:
 45028 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 45029 ;; Tracked objects:
 45030 ;;		On entry : 0/0
 45031 ;;		On exit  : 0/0
 45032 ;;		Unchanged: 0/0
 45033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 45034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45036 ;;      Temps:         24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45037 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45038 ;;Total ram usage:       24 bytes
 45039 ;; Hardware stack levels used:    1
 45040 ;; Hardware stack levels required when called:    4
 45041 ;; This function calls:
 45042 ;;		___lbmod
 45043 ;;		_display
 45044 ;;		_encoderInputsBuxton
 45045 ;;		_playArpeggio
 45046 ;; This function is called by:
 45047 ;;		Interrupt level 2
 45048 ;; This function uses a non-reentrant model
 45049 ;;
 45050                           
 45051                           	psect	intcode
 45052  000008                     __pintcode:
 45053                           	opt stack 0
 45054  000008                     _ISR:
 45055                           	opt stack 11
 45056                           
 45057                           ;incstack = 0
 45058  000008  EDCF  F029         	call	int_func,f	;refresh shadow registers
 45059                           tblptru	equ	0xFF8
 45060                           tblptrh	equ	0xFF7
 45061                           tblptrl	equ	0xFF6
 45062                           tablat	equ	0xFF5
 45063                           prodh	equ	0xFF4
 45064                           prodl	equ	0xFF3
 45065                           intcon	equ	0xFF2
 45066                           intcon2	equ	0xFF1
 45067                           indf0	equ	0xFEF
 45068                           postinc0	equ	0xFEE
 45069                           postdec0	equ	0xFED
 45070                           fsr0h	equ	0xFEA
 45071                           fsr0l	equ	0xFE9
 45072                           wreg	equ	0xFE8
 45073                           postinc1	equ	0xFE6
 45074                           postdec1	equ	0xFE5
 45075                           plusw1	equ	0xFE3
 45076                           fsr1h	equ	0xFE2
 45077                           fsr1l	equ	0xFE1
 45078                           indf2	equ	0xFDF
 45079                           postinc2	equ	0xFDE
 45080                           postdec2	equ	0xFDD
 45081                           plusw2	equ	0xFDB
 45082                           fsr2h	equ	0xFDA
 45083                           fsr2l	equ	0xFD9
 45084                           status	equ	0xFD8
 45085                           
 45086                           	psect	intcode_body
 45087  00539E                     __pintcode_body:
 45088                           	opt stack 11
 45089  00539E                     int_func:
 45090                           	opt stack 11
 45091  00539E  0006               	pop		; remove dummy address from shadow register refresh
 45092  0053A0  CFE9 F013          	movff	fsr0l,??_ISR+1
 45093  0053A4  CFEA F014          	movff	fsr0h,??_ISR+2
 45094  0053A8  CFE1 F015          	movff	fsr1l,??_ISR+3
 45095  0053AC  CFE2 F016          	movff	fsr1h,??_ISR+4
 45096  0053B0  CFD9 F017          	movff	fsr2l,??_ISR+5
 45097  0053B4  CFDA F018          	movff	fsr2h,??_ISR+6
 45098  0053B8  CFF3 F019          	movff	prodl,??_ISR+7
 45099  0053BC  CFF4 F01A          	movff	prodh,??_ISR+8
 45100  0053C0  CFF6 F01B          	movff	tblptrl,??_ISR+9
 45101  0053C4  CFF7 F01C          	movff	tblptrh,??_ISR+10
 45102  0053C8  CFF8 F01D          	movff	tblptru,??_ISR+11
 45103  0053CC  CFF5 F01E          	movff	tablat,??_ISR+12
 45104  0053D0  C03F  F01F         	movff	btemp,??_ISR+13
 45105  0053D4  C040  F020         	movff	btemp+1,??_ISR+14
 45106  0053D8  C041  F021         	movff	btemp+2,??_ISR+15
 45107  0053DC  C042  F022         	movff	btemp+3,??_ISR+16
 45108  0053E0  C043  F023         	movff	btemp+4,??_ISR+17
 45109  0053E4  C044  F024         	movff	btemp+5,??_ISR+18
 45110  0053E8  C045  F025         	movff	btemp+6,??_ISR+19
 45111  0053EC  C046  F026         	movff	btemp+7,??_ISR+20
 45112  0053F0  C048  F027         	movff	btemp+9,??_ISR+21
 45113  0053F4  C049  F028         	movff	btemp+10,??_ISR+22
 45114  0053F8  C04A  F029         	movff	btemp+11,??_ISR+23
 45115  0053FC  EE16  F0B2         	lfsr	1,___inthi_sp
 45116                           
 45117                           ;main.c: 383: if(TMR2IF==1){
 45118  005400  A29E               	btfss	3998,1,c	;volatile
 45119  005402  D005               	goto	i2l4995
 45120                           
 45121                           ;main.c: 384: display();
 45122  005404  ECB9  F04C         	call	_display	;wreg free
 45123                           
 45124                           ;main.c: 386: TMR2 = 0x83;
 45125  005408  0E83               	movlw	131
 45126  00540A  6ECC               	movwf	4044,c	;volatile
 45127                           
 45128                           ;main.c: 387: TMR2IF = 0;
 45129  00540C  929E               	bcf	3998,1,c	;volatile
 45130  00540E                     i2l4995:
 45131                           
 45132                           ;main.c: 388: }
 45133                           ;main.c: 391: if(TMR1IF==1){
 45134  00540E  A09E               	btfss	3998,0,c	;volatile
 45135  005410  D00C               	goto	i2l4996
 45136                           
 45137                           ;main.c: 392: count_ISR++;
 45138  005412  0E01               	movlw	1
 45139  005414  0102               	movlb	2	; () banked
 45140  005416  2764               	addwf	_count_ISR& (0+255),f,b
 45141  005418  0E00               	movlw	0
 45142  00541A  2365               	addwfc	(_count_ISR+1)& (0+255),f,b
 45143  00541C  2366               	addwfc	(_count_ISR+2)& (0+255),f,b
 45144  00541E  2367               	addwfc	(_count_ISR+3)& (0+255),f,b
 45145                           
 45146                           ; BSR set to: 2
 45147                           ;main.c: 393: TMR1 = 0xEC78;
 45148  005420  0EEC               	movlw	236
 45149  005422  6ECF               	movwf	4047,c	;volatile
 45150  005424  0E78               	movlw	120
 45151  005426  6ECE               	movwf	4046,c	;volatile
 45152                           
 45153                           ; BSR set to: 2
 45154                           ;main.c: 394: TMR1IF = 0;
 45155  005428  909E               	bcf	3998,0,c	;volatile
 45156  00542A                     i2l4996:
 45157                           
 45158                           ;main.c: 395: }
 45159                           ;main.c: 398: if(INT0IF==1) {
 45160                           
 45161                           ; BSR set to: 2
 45162  00542A  A2F2               	btfss	intcon,1,c	;volatile
 45163  00542C  D00B               	goto	i2l4997
 45164                           
 45165                           ;main.c: 399: _delay((unsigned long)((10)*(20000000/4000.0)));
 45166  00542E  0E41               	movlw	65
 45167  005430  6E12               	movwf	??_ISR& (0+255),c
 45168  005432  0EEE               	movlw	238
 45169  005434                     i2u6727_47:
 45170  005434  2EE8               	decfsz	wreg,f,c
 45171  005436  D7FE               	bra	i2u6727_47
 45172  005438  2E12               	decfsz	??_ISR& (0+255),f,c
 45173  00543A  D7FC               	bra	i2u6727_47
 45174  00543C  D000               	nop2	
 45175                           
 45176                           ;main.c: 400: if(RB0 == 0){encoder_click = 1;}
 45177  00543E  A081               	btfss	3969,0,c	;volatile
 45178  005440  8205               	bsf	_encoder_click/(0+8),_encoder_click& (0+7),c
 45179                           
 45180                           ;main.c: 401: INT0IF = 0;
 45181  005442  92F2               	bcf	intcon,1,c	;volatile
 45182  005444                     i2l4997:
 45183                           
 45184                           ;main.c: 402: }
 45185                           ;main.c: 405: if(RBIF==1) {
 45186  005444  A0F2               	btfss	intcon,0,c	;volatile
 45187  005446  D003               	goto	i2l4999
 45188                           
 45189                           ;main.c: 406: encoderInputsBuxton();
 45190  005448  EC3A  F043         	call	_encoderInputsBuxton	;wreg free
 45191                           
 45192                           ;main.c: 408: RBIF = 0;
 45193  00544C  90F2               	bcf	intcon,0,c	;volatile
 45194  00544E                     i2l4999:
 45195                           
 45196                           ;main.c: 409: }
 45197                           ;main.c: 413: if(TMR0IF==1) {
 45198  00544E  A4F2               	btfss	intcon,2,c	;volatile
 45199  005450  D04C               	goto	i2l5000
 45200                           
 45201                           ;main.c: 422: TMR0IE = 0;
 45202  005452  9AF2               	bcf	intcon,5,c	;volatile
 45203                           
 45204                           ;main.c: 425: if((finishLastNote == 0) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 0))
      +                          {
 45205  005454  BA02               	btfsc	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 45206  005456  D02D               	goto	i2l5005
 45207  005458  504D               	movf	_NOTE_LENGTH_PULSES,w,c
 45208  00545A  6EE6               	movwf	postinc1,c
 45209  00545C  502E               	movf	_TIMER_OVERFLOWS,w,c
 45210  00545E  6EE6               	movwf	postinc1,c
 45211  005460  EC63  F041         	call	___lbmod	;wreg free
 45212  005464  503F               	movf	btemp,w,c
 45213  005466  A4D8               	btfss	status,2,c
 45214  005468  D024               	goto	i2l5005
 45215                           
 45216                           ;main.c: 428: if((ARPEGGIO_TYPE == AS_PRESSED) || (ARPEGGIO_TYPE == UP) || (ARPEGGIO_TYP
      +                          E == DOWN) || (ARPEGGIO_TYPE == UP_DOWN) || (ARPEGGIO_TYPE == DOWN_UP)){
 45217  00546A  0E06               	movlw	6
 45218  00546C  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45219  00546E  B4D8               	btfsc	status,2,c
 45220  005470  D00D               	goto	i2u6692_40
 45221  005472  5035               	movf	_ARPEGGIO_TYPE,w,c
 45222  005474  B4D8               	btfsc	status,2,c
 45223  005476  D00A               	goto	i2u6692_40
 45224  005478  0435               	decf	_ARPEGGIO_TYPE,w,c
 45225  00547A  B4D8               	btfsc	status,2,c
 45226  00547C  D007               	goto	i2u6692_40
 45227  00547E  0E02               	movlw	2
 45228  005480  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45229  005482  B4D8               	btfsc	status,2,c
 45230  005484  D003               	goto	i2u6692_40
 45231  005486  0E03               	movlw	3
 45232  005488  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45233  00548A  B4D8               	btfsc	status,2,c
 45234  00548C                     i2u6692_40:
 45235                           
 45236                           ;main.c: 429: stored_octave = which_octave;
 45237  00548C  C032  F031         	movff	_which_octave,_stored_octave
 45238                           
 45239                           ;main.c: 430: }
 45240                           ;main.c: 451: ARPEGGIO_IS_PLAYING = 1;
 45241  005490  8406               	bsf	_ARPEGGIO_IS_PLAYING/(0+8),_ARPEGGIO_IS_PLAYING& (0+7),c
 45242                           
 45243                           ;main.c: 452: playArpeggio();
 45244  005492  ECCC  F008         	call	_playArpeggio	;wreg free
 45245                           
 45246                           ;main.c: 453: ARPEGGIO_IS_PLAYING = 0;
 45247  005496  9406               	bcf	_ARPEGGIO_IS_PLAYING/(0+8),_ARPEGGIO_IS_PLAYING& (0+7),c
 45248                           
 45249                           ;main.c: 456: suppress_note_on = 0;
 45250  005498  9802               	bcf	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 45251                           
 45252                           ;main.c: 457: suppress_note_off = 0;
 45253  00549A  9602               	bcf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45254                           
 45255                           ;main.c: 458: flag1 = 0;
 45256  00549C  9E01               	bcf	_flag1/(0+8),_flag1& (0+7),c
 45257                           
 45258                           ;main.c: 459: flag2 = 0;
 45259  00549E  9C01               	bcf	_flag2/(0+8),_flag2& (0+7),c
 45260                           
 45261                           ;main.c: 462: if((ARPEGGIO_TYPE == RANDOM) || (ARPEGGIO_TYPE == RANDOM_NON_REPEATING)) {
 45262  0054A0  0E05               	movlw	5
 45263  0054A2  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45264  0054A4  B4D8               	btfsc	status,2,c
 45265  0054A6  D003               	goto	i2u6694_40
 45266  0054A8  0E04               	movlw	4
 45267  0054AA  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45268  0054AC  B4D8               	btfsc	status,2,c
 45269  0054AE                     i2u6694_40:
 45270                           
 45271                           ;main.c: 463: stored_octave = which_octave;
 45272  0054AE  C032  F031         	movff	_which_octave,_stored_octave
 45273  0054B2                     i2l5005:
 45274                           
 45275                           ;main.c: 464: }
 45276                           ;main.c: 465: }
 45277                           ;main.c: 486: if(lastNoteMode == 1){
 45278  0054B2  B403               	btfsc	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 45279                           
 45280                           ;main.c: 487: if((finishLastNote == 1) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 0))
      +                          {
 45281  0054B4  AA02               	btfss	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 45282  0054B6  D00C               	goto	i2l5009
 45283  0054B8  504D               	movf	_NOTE_LENGTH_PULSES,w,c
 45284  0054BA  6EE6               	movwf	postinc1,c
 45285  0054BC  502E               	movf	_TIMER_OVERFLOWS,w,c
 45286  0054BE  6EE6               	movwf	postinc1,c
 45287  0054C0  EC63  F041         	call	___lbmod	;wreg free
 45288  0054C4  503F               	movf	btemp,w,c
 45289  0054C6  A4D8               	btfss	status,2,c
 45290  0054C8  D003               	goto	i2l5009
 45291                           
 45292                           ;main.c: 496: finishLastNote = 0;
 45293  0054CA  9A02               	bcf	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 45294                           
 45295                           ;main.c: 499: TIMER_OVERFLOWS = NOTE_LENGTH_PULSES;
 45296  0054CC  C04D  F02E         	movff	_NOTE_LENGTH_PULSES,_TIMER_OVERFLOWS
 45297  0054D0                     i2l5009:
 45298                           
 45299                           ;main.c: 500: }
 45300                           ;main.c: 501: }
 45301                           ;main.c: 503: TIMER_OVERFLOWS++;
 45302  0054D0  2A2E               	incf	_TIMER_OVERFLOWS,f,c
 45303                           
 45304                           ;main.c: 505: if(TIMER_OVERFLOWS >= (NOTE_LENGTH_PULSES)){TIMER_OVERFLOWS = 0;}
 45305  0054D2  504D               	movf	_NOTE_LENGTH_PULSES,w,c
 45306  0054D4  5C2E               	subwf	_TIMER_OVERFLOWS,w,c
 45307  0054D6  A0D8               	btfss	status,0,c
 45308  0054D8  D002               	goto	i2l5010
 45309  0054DA  0E00               	movlw	0
 45310  0054DC  6E2E               	movwf	_TIMER_OVERFLOWS,c
 45311  0054DE                     i2l5010:
 45312                           
 45313                           ;main.c: 507: TMR0 = TIMER_PRELOAD;
 45314  0054DE  C17B  FFD6         	movff	_TIMER_PRELOAD,4054	;volatile
 45315  0054E2  C17C  FFD7         	movff	_TIMER_PRELOAD+1,4055	;volatile
 45316                           
 45317                           ;main.c: 508: TMR0IF = 0;
 45318  0054E6  94F2               	bcf	intcon,2,c	;volatile
 45319                           
 45320                           ;main.c: 509: TMR0IE = 1;
 45321  0054E8  8AF2               	bsf	intcon,5,c	;volatile
 45322  0054EA                     i2l5000:
 45323  0054EA  C029  F04A         	movff	??_ISR+23,btemp+11
 45324  0054EE  C028  F049         	movff	??_ISR+22,btemp+10
 45325  0054F2  C027  F048         	movff	??_ISR+21,btemp+9
 45326  0054F6  C026  F046         	movff	??_ISR+20,btemp+7
 45327  0054FA  C025  F045         	movff	??_ISR+19,btemp+6
 45328  0054FE  C024  F044         	movff	??_ISR+18,btemp+5
 45329  005502  C023  F043         	movff	??_ISR+17,btemp+4
 45330  005506  C022  F042         	movff	??_ISR+16,btemp+3
 45331  00550A  C021  F041         	movff	??_ISR+15,btemp+2
 45332  00550E  C020  F040         	movff	??_ISR+14,btemp+1
 45333  005512  C01F  F03F         	movff	??_ISR+13,btemp
 45334  005516  C01E  FFF5         	movff	??_ISR+12,tablat
 45335  00551A  C01D  FFF8         	movff	??_ISR+11,tblptru
 45336  00551E  C01C  FFF7         	movff	??_ISR+10,tblptrh
 45337  005522  C01B  FFF6         	movff	??_ISR+9,tblptrl
 45338  005526  C01A  FFF4         	movff	??_ISR+8,prodh
 45339  00552A  C019  FFF3         	movff	??_ISR+7,prodl
 45340  00552E  C018  FFDA         	movff	??_ISR+6,fsr2h
 45341  005532  C017  FFD9         	movff	??_ISR+5,fsr2l
 45342  005536  C016  FFE2         	movff	??_ISR+4,fsr1h
 45343  00553A  C015  FFE1         	movff	??_ISR+3,fsr1l
 45344  00553E  C014  FFEA         	movff	??_ISR+2,fsr0h
 45345  005542  C013  FFE9         	movff	??_ISR+1,fsr0l
 45346  005546  0011               	retfie		f
 45347  005548                     __end_of_ISR:
 45348                           	opt stack 0
 45349                           tblptru	equ	0xFF8
 45350                           tblptrh	equ	0xFF7
 45351                           tblptrl	equ	0xFF6
 45352                           tablat	equ	0xFF5
 45353                           prodh	equ	0xFF4
 45354                           prodl	equ	0xFF3
 45355                           intcon	equ	0xFF2
 45356                           intcon2	equ	0xFF1
 45357                           indf0	equ	0xFEF
 45358                           postinc0	equ	0xFEE
 45359                           postdec0	equ	0xFED
 45360                           fsr0h	equ	0xFEA
 45361                           fsr0l	equ	0xFE9
 45362                           wreg	equ	0xFE8
 45363                           postinc1	equ	0xFE6
 45364                           postdec1	equ	0xFE5
 45365                           plusw1	equ	0xFE3
 45366                           fsr1h	equ	0xFE2
 45367                           fsr1l	equ	0xFE1
 45368                           indf2	equ	0xFDF
 45369                           postinc2	equ	0xFDE
 45370                           postdec2	equ	0xFDD
 45371                           plusw2	equ	0xFDB
 45372                           fsr2h	equ	0xFDA
 45373                           fsr2l	equ	0xFD9
 45374                           status	equ	0xFD8
 45375                           
 45376 ;; *************** function _playArpeggio *****************
 45377 ;; Defined at:
 45378 ;;		line 277 in file "arpeggio.c"
 45379 ;; Parameters:    Size  Location     Type
 45380 ;;		None
 45381 ;; Auto vars:     Size  Location     Type
 45382 ;;		None
 45383 ;; Return value:  Size  Location     Type
 45384 ;;                  1    wreg      void 
 45385 ;; Registers used:
 45386 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, prodl, prodh, cstack
 45387 ;; Tracked objects:
 45388 ;;		On entry : 0/0
 45389 ;;		On exit  : 0/0
 45390 ;;		Unchanged: 0/0
 45391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 45392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45394 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45395 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45396 ;;Total ram usage:        6 bytes
 45397 ;; Hardware stack levels used:    1
 45398 ;; Hardware stack levels required when called:    3
 45399 ;; This function calls:
 45400 ;;		___awmod
 45401 ;;		_noteOff
 45402 ;;		_noteOn
 45403 ;;		_rand
 45404 ;;		_random_pitches
 45405 ;;		_random_pitches_non_repeating
 45406 ;;		_sort_pitches
 45407 ;; This function is called by:
 45408 ;;		_ISR
 45409 ;; This function uses a non-reentrant model
 45410 ;;
 45411                           
 45412                           	psect	text141
 45413  001198                     __ptext141:
 45414                           	opt stack 0
 45415  001198                     _playArpeggio:
 45416                           	opt stack 11
 45417                           
 45418                           ;arpeggio.c: 280: if(NUM_NOTES_PRESSED == 0){return;}
 45419                           
 45420                           ;incstack = 0
 45421  001198  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45422  00119A  B4D8               	btfsc	status,2,c
 45423  00119C  0012               	return	
 45424                           
 45425                           ;arpeggio.c: 288: if(ARPEGGIO_TYPE == UP | ARPEGGIO_TYPE == UP_DOWN | ARPEGGIO_TYPE == A
      +                          S_PRESSED) {
 45426  00119E  5035               	movf	_ARPEGGIO_TYPE,w,c
 45427  0011A0  B4D8               	btfsc	status,2,c
 45428  0011A2  D008               	goto	i2u6037_40
 45429  0011A4  0E02               	movlw	2
 45430  0011A6  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45431  0011A8  B4D8               	btfsc	status,2,c
 45432  0011AA  D004               	goto	i2u6037_40
 45433  0011AC  0E06               	movlw	6
 45434  0011AE  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45435  0011B0  A4D8               	btfss	status,2,c
 45436  0011B2  D0B7               	goto	i2l5522
 45437  0011B4                     i2u6037_40:
 45438                           
 45439                           ;arpeggio.c: 290: if(startingDirection == UP){
 45440  0011B4  5034               	movf	_startingDirection,w,c
 45441  0011B6  B4D8               	btfsc	status,2,c
 45442                           
 45443                           ;arpeggio.c: 292: if((overflow == 1) && (which_octave > 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 45444  0011B8  A402               	btfss	_overflow/(0+8),_overflow& (0+7),c
 45445  0011BA  D027               	goto	i2l5511
 45446  0011BC  5032               	movf	_which_octave,w,c
 45447  0011BE  0A80               	xorlw	128
 45448  0011C0  0F7F               	addlw	-129
 45449  0011C2  B0D8               	btfsc	status,0,c
 45450  0011C4  B202               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45451  0011C6  D021               	goto	i2l5511
 45452  0011C8  BE01               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 45453  0011CA  D01F               	goto	i2l5511
 45454                           
 45455                           ;arpeggio.c: 295: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((which_oct
      +                          ave - 1) * 12),velocity);
 45456  0011CC  5051               	movf	_velocity,w,c
 45457  0011CE  6EE6               	movwf	postinc1,c
 45458  0011D0  0EFF               	movlw	255
 45459  0011D2  6E0C               	movwf	??_playArpeggio& (0+255),c
 45460  0011D4  0EFF               	movlw	255
 45461  0011D6  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45462  0011D8  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45463  0011DA  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45464  0011DC  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45465  0011DE  500C               	movf	??_playArpeggio,w,c
 45466  0011E0  260E               	addwf	??_playArpeggio+2,f,c
 45467  0011E2  500D               	movf	??_playArpeggio+1,w,c
 45468  0011E4  220F               	addwfc	??_playArpeggio+3,f,c
 45469  0011E6  500E               	movf	??_playArpeggio+2,w,c
 45470  0011E8  242A               	addwf	_arpeggioPtr,w,c
 45471  0011EA  6ED9               	movwf	fsr2l,c
 45472  0011EC  500F               	movf	??_playArpeggio+3,w,c
 45473  0011EE  202B               	addwfc	_arpeggioPtr+1,w,c
 45474  0011F0  6EDA               	movwf	fsr2h,c
 45475  0011F2  50DF               	movf	indf2,w,c
 45476  0011F4  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45477  0011F6  0432               	decf	_which_octave,w,c
 45478  0011F8  0D0C               	mullw	12
 45479  0011FA  50F3               	movf	prodl,w,c
 45480  0011FC  2410               	addwf	??_playArpeggio+4,w,c
 45481  0011FE  6EE6               	movwf	postinc1,c
 45482  001200  503E               	movf	_channel,w,c
 45483  001202  6EE6               	movwf	postinc1,c
 45484  001204  EC4A  F04A         	call	_noteOff	;wreg free
 45485                           
 45486                           ;arpeggio.c: 296: overflow = 0;
 45487  001208  9402               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45488  00120A                     i2l5511:
 45489                           
 45490                           ;arpeggio.c: 297: }
 45491                           ;arpeggio.c: 298: }
 45492                           ;arpeggio.c: 300: if(startingDirection == DOWN){
 45493  00120A  0434               	decf	_startingDirection,w,c
 45494  00120C  B4D8               	btfsc	status,2,c
 45495                           
 45496                           ;arpeggio.c: 302: if((overflow == 1) && (which_octave > 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 45497  00120E  A402               	btfss	_overflow/(0+8),_overflow& (0+7),c
 45498  001210  D029               	goto	i2l5513
 45499  001212  5032               	movf	_which_octave,w,c
 45500  001214  0A80               	xorlw	128
 45501  001216  0F7F               	addlw	-129
 45502  001218  B0D8               	btfsc	status,0,c
 45503  00121A  B202               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45504  00121C  D023               	goto	i2l5513
 45505  00121E  BE01               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 45506  001220  D021               	goto	i2l5513
 45507                           
 45508                           ;arpeggio.c: 303: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((which_oct
      +                          ave - OCTAVES) * 12),velocity);
 45509  001222  5051               	movf	_velocity,w,c
 45510  001224  6EE6               	movwf	postinc1,c
 45511  001226  0EFF               	movlw	255
 45512  001228  6E0C               	movwf	??_playArpeggio& (0+255),c
 45513  00122A  0EFF               	movlw	255
 45514  00122C  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45515  00122E  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45516  001230  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45517  001232  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45518  001234  500C               	movf	??_playArpeggio,w,c
 45519  001236  260E               	addwf	??_playArpeggio+2,f,c
 45520  001238  500D               	movf	??_playArpeggio+1,w,c
 45521  00123A  220F               	addwfc	??_playArpeggio+3,f,c
 45522  00123C  500E               	movf	??_playArpeggio+2,w,c
 45523  00123E  242A               	addwf	_arpeggioPtr,w,c
 45524  001240  6ED9               	movwf	fsr2l,c
 45525  001242  500F               	movf	??_playArpeggio+3,w,c
 45526  001244  202B               	addwfc	_arpeggioPtr+1,w,c
 45527  001246  6EDA               	movwf	fsr2h,c
 45528  001248  50DF               	movf	indf2,w,c
 45529  00124A  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45530  00124C  504E               	movf	_OCTAVES,w,c
 45531  00124E  0800               	sublw	0
 45532  001250  2432               	addwf	_which_octave,w,c
 45533  001252  0D0C               	mullw	12
 45534  001254  50F3               	movf	prodl,w,c
 45535  001256  2410               	addwf	??_playArpeggio+4,w,c
 45536  001258  6EE6               	movwf	postinc1,c
 45537  00125A  503E               	movf	_channel,w,c
 45538  00125C  6EE6               	movwf	postinc1,c
 45539  00125E  EC4A  F04A         	call	_noteOff	;wreg free
 45540                           
 45541                           ;arpeggio.c: 304: overflow = 0;
 45542  001262  9402               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45543  001264                     i2l5513:
 45544                           
 45545                           ;arpeggio.c: 305: }
 45546                           ;arpeggio.c: 306: }
 45547                           ;arpeggio.c: 308: if(octave_overflow == 1){
 45548  001264  A202               	btfss	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45549  001266  D05D               	goto	i2l5522
 45550                           
 45551                           ;arpeggio.c: 309: if(startingDirection == UP) {
 45552  001268  5034               	movf	_startingDirection,w,c
 45553  00126A  A4D8               	btfss	status,2,c
 45554  00126C  D021               	goto	i2l5515
 45555                           
 45556                           ;arpeggio.c: 311: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )) + ((OCTAVES - 1) * 12),velocity);}
 45557  00126E  BC01               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 45558  001270  D01E               	goto	i2l5516
 45559  001272  5051               	movf	_velocity,w,c
 45560  001274  6EE6               	movwf	postinc1,c
 45561  001276  0EFF               	movlw	255
 45562  001278  6E0C               	movwf	??_playArpeggio& (0+255),c
 45563  00127A  0EFF               	movlw	255
 45564  00127C  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45565  00127E  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45566  001280  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45567  001282  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45568  001284  500C               	movf	??_playArpeggio,w,c
 45569  001286  260E               	addwf	??_playArpeggio+2,f,c
 45570  001288  500D               	movf	??_playArpeggio+1,w,c
 45571  00128A  220F               	addwfc	??_playArpeggio+3,f,c
 45572  00128C  500E               	movf	??_playArpeggio+2,w,c
 45573  00128E  242A               	addwf	_arpeggioPtr,w,c
 45574  001290  6ED9               	movwf	fsr2l,c
 45575  001292  500F               	movf	??_playArpeggio+3,w,c
 45576  001294  202B               	addwfc	_arpeggioPtr+1,w,c
 45577  001296  6EDA               	movwf	fsr2h,c
 45578  001298  50DF               	movf	indf2,w,c
 45579  00129A  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45580  00129C  044E               	decf	_OCTAVES,w,c
 45581  00129E  0D0C               	mullw	12
 45582  0012A0  50F3               	movf	prodl,w,c
 45583  0012A2  2410               	addwf	??_playArpeggio+4,w,c
 45584  0012A4  6EE6               	movwf	postinc1,c
 45585  0012A6  503E               	movf	_channel,w,c
 45586  0012A8  6EE6               	movwf	postinc1,c
 45587  0012AA  EC4A  F04A         	call	_noteOff	;wreg free
 45588  0012AE                     i2l5516:
 45589                           
 45590                           ;arpeggio.c: 312: octave_overflow = 0;
 45591  0012AE  9202               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45592  0012B0                     i2l5515:
 45593                           
 45594                           ;arpeggio.c: 313: }
 45595                           ;arpeggio.c: 315: if(startingDirection == DOWN){
 45596  0012B0  0434               	decf	_startingDirection,w,c
 45597  0012B2  A4D8               	btfss	status,2,c
 45598  0012B4  D01C               	goto	i2l5517
 45599                           
 45600                           ;arpeggio.c: 317: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )),velocity);}
 45601  0012B6  BC01               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 45602  0012B8  D019               	goto	i2l5518
 45603  0012BA  5051               	movf	_velocity,w,c
 45604  0012BC  6EE6               	movwf	postinc1,c
 45605  0012BE  0EFF               	movlw	255
 45606  0012C0  6E0C               	movwf	??_playArpeggio& (0+255),c
 45607  0012C2  0EFF               	movlw	255
 45608  0012C4  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45609  0012C6  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45610  0012C8  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45611  0012CA  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45612  0012CC  500C               	movf	??_playArpeggio,w,c
 45613  0012CE  260E               	addwf	??_playArpeggio+2,f,c
 45614  0012D0  500D               	movf	??_playArpeggio+1,w,c
 45615  0012D2  220F               	addwfc	??_playArpeggio+3,f,c
 45616  0012D4  500E               	movf	??_playArpeggio+2,w,c
 45617  0012D6  242A               	addwf	_arpeggioPtr,w,c
 45618  0012D8  6ED9               	movwf	fsr2l,c
 45619  0012DA  500F               	movf	??_playArpeggio+3,w,c
 45620  0012DC  202B               	addwfc	_arpeggioPtr+1,w,c
 45621  0012DE  6EDA               	movwf	fsr2h,c
 45622  0012E0  50DF               	movf	indf2,w,c
 45623  0012E2  6EE6               	movwf	postinc1,c
 45624  0012E4  503E               	movf	_channel,w,c
 45625  0012E6  6EE6               	movwf	postinc1,c
 45626  0012E8  EC4A  F04A         	call	_noteOff	;wreg free
 45627  0012EC                     i2l5518:
 45628                           
 45629                           ;arpeggio.c: 318: octave_overflow = 0;
 45630  0012EC  9202               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45631  0012EE                     i2l5517:
 45632                           
 45633                           ;arpeggio.c: 319: }
 45634                           ;arpeggio.c: 323: if(skipFirstLast == 1){
 45635  0012EE  A603               	btfss	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 45636  0012F0  D012               	goto	i2l5521
 45637                           
 45638                           ;arpeggio.c: 324: if(NUM_NOTES_PRESSED > 1){
 45639  0012F2  0E01               	movlw	1
 45640  0012F4  642F               	cpfsgt	_NUM_NOTES_PRESSED,c
 45641  0012F6  D003               	goto	i2l5520
 45642                           
 45643                           ;arpeggio.c: 325: which_note = 1;
 45644  0012F8  0E01               	movlw	1
 45645  0012FA  6E33               	movwf	_which_note,c
 45646                           
 45647                           ;arpeggio.c: 326: suppress_note_off = 1;
 45648  0012FC  8602               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45649  0012FE                     i2l5520:
 45650                           
 45651                           ;arpeggio.c: 327: }
 45652                           ;arpeggio.c: 331: if((NUM_NOTES_PRESSED == 1) && (OCTAVES > 1)){
 45653  0012FE  042F               	decf	_NUM_NOTES_PRESSED,w,c
 45654  001300  A4D8               	btfss	status,2,c
 45655  001302  D009               	goto	i2l5521
 45656  001304  0E01               	movlw	1
 45657  001306  644E               	cpfsgt	_OCTAVES,c
 45658  001308  D006               	goto	i2l5521
 45659                           
 45660                           ;arpeggio.c: 332: flag1 = 1;
 45661  00130A  8E01               	bsf	_flag1/(0+8),_flag1& (0+7),c
 45662                           
 45663                           ;arpeggio.c: 334: which_note = 0;
 45664  00130C  0E00               	movlw	0
 45665  00130E  6E33               	movwf	_which_note,c
 45666                           
 45667                           ;arpeggio.c: 335: which_octave--;
 45668  001310  0632               	decf	_which_octave,f,c
 45669                           
 45670                           ;arpeggio.c: 336: stored_octave = which_octave;
 45671  001312  C032  F031         	movff	_which_octave,_stored_octave
 45672  001316                     i2l5521:
 45673                           
 45674                           ;arpeggio.c: 337: }
 45675                           ;arpeggio.c: 338: }
 45676                           ;arpeggio.c: 341: if(ARPEGGIO_TYPE == UP_DOWN) {ARPEGGIO_TYPE = DOWN_UP;}
 45677  001316  0E02               	movlw	2
 45678  001318  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45679  00131A  A4D8               	btfss	status,2,c
 45680  00131C  D002               	goto	i2l5522
 45681  00131E  0E03               	movlw	3
 45682  001320  6E35               	movwf	_ARPEGGIO_TYPE,c
 45683  001322                     i2l5522:
 45684                           
 45685                           ;arpeggio.c: 342: }
 45686                           ;arpeggio.c: 343: }
 45687                           ;arpeggio.c: 346: if(ARPEGGIO_TYPE == DOWN | ARPEGGIO_TYPE == DOWN_UP) {
 45688  001322  0435               	decf	_ARPEGGIO_TYPE,w,c
 45689  001324  B4D8               	btfsc	status,2,c
 45690  001326  D004               	goto	i2u6059_40
 45691  001328  0E03               	movlw	3
 45692  00132A  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45693  00132C  A4D8               	btfss	status,2,c
 45694  00132E  D0BE               	goto	i2l5538
 45695  001330                     i2u6059_40:
 45696                           
 45697                           ;arpeggio.c: 348: if(startingDirection == UP){
 45698  001330  5034               	movf	_startingDirection,w,c
 45699  001332  B4D8               	btfsc	status,2,c
 45700                           
 45701                           ;arpeggio.c: 350: if((overflow == 1) && (which_octave < 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 45702  001334  A402               	btfss	_overflow/(0+8),_overflow& (0+7),c
 45703  001336  D025               	goto	i2l5527
 45704  001338  BE32               	btfsc	_which_octave,7,c
 45705  00133A  B202               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45706  00133C  D022               	goto	i2l5527
 45707  00133E  BE01               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 45708  001340  D020               	goto	i2l5527
 45709                           
 45710                           ;arpeggio.c: 351: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((OCTAVES +
      +                           which_octave) * 12),velocity);
 45711  001342  5051               	movf	_velocity,w,c
 45712  001344  6EE6               	movwf	postinc1,c
 45713  001346  0EFF               	movlw	255
 45714  001348  6E0C               	movwf	??_playArpeggio& (0+255),c
 45715  00134A  0EFF               	movlw	255
 45716  00134C  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45717  00134E  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45718  001350  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45719  001352  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45720  001354  500C               	movf	??_playArpeggio,w,c
 45721  001356  260E               	addwf	??_playArpeggio+2,f,c
 45722  001358  500D               	movf	??_playArpeggio+1,w,c
 45723  00135A  220F               	addwfc	??_playArpeggio+3,f,c
 45724  00135C  500E               	movf	??_playArpeggio+2,w,c
 45725  00135E  242A               	addwf	_arpeggioPtr,w,c
 45726  001360  6ED9               	movwf	fsr2l,c
 45727  001362  500F               	movf	??_playArpeggio+3,w,c
 45728  001364  202B               	addwfc	_arpeggioPtr+1,w,c
 45729  001366  6EDA               	movwf	fsr2h,c
 45730  001368  50DF               	movf	indf2,w,c
 45731  00136A  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45732  00136C  5032               	movf	_which_octave,w,c
 45733  00136E  244E               	addwf	_OCTAVES,w,c
 45734  001370  0D0C               	mullw	12
 45735  001372  50F3               	movf	prodl,w,c
 45736  001374  2410               	addwf	??_playArpeggio+4,w,c
 45737  001376  6EE6               	movwf	postinc1,c
 45738  001378  503E               	movf	_channel,w,c
 45739  00137A  6EE6               	movwf	postinc1,c
 45740  00137C  EC4A  F04A         	call	_noteOff	;wreg free
 45741                           
 45742                           ;arpeggio.c: 352: overflow = 0;
 45743  001380  9402               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45744  001382                     i2l5527:
 45745                           
 45746                           ;arpeggio.c: 353: }
 45747                           ;arpeggio.c: 354: }
 45748                           ;arpeggio.c: 356: if(startingDirection == DOWN) {
 45749  001382  0434               	decf	_startingDirection,w,c
 45750  001384  B4D8               	btfsc	status,2,c
 45751                           
 45752                           ;arpeggio.c: 358: if((overflow == 1) && (which_octave < 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 45753  001386  A402               	btfss	_overflow/(0+8),_overflow& (0+7),c
 45754  001388  D024               	goto	i2l5529
 45755  00138A  BE32               	btfsc	_which_octave,7,c
 45756  00138C  B202               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45757  00138E  D021               	goto	i2l5529
 45758  001390  BE01               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 45759  001392  D01F               	goto	i2l5529
 45760                           
 45761                           ;arpeggio.c: 359: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((which_oct
      +                          ave + 1) * 12),velocity);
 45762  001394  5051               	movf	_velocity,w,c
 45763  001396  6EE6               	movwf	postinc1,c
 45764  001398  0EFF               	movlw	255
 45765  00139A  6E0C               	movwf	??_playArpeggio& (0+255),c
 45766  00139C  0EFF               	movlw	255
 45767  00139E  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45768  0013A0  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45769  0013A2  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45770  0013A4  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45771  0013A6  500C               	movf	??_playArpeggio,w,c
 45772  0013A8  260E               	addwf	??_playArpeggio+2,f,c
 45773  0013AA  500D               	movf	??_playArpeggio+1,w,c
 45774  0013AC  220F               	addwfc	??_playArpeggio+3,f,c
 45775  0013AE  500E               	movf	??_playArpeggio+2,w,c
 45776  0013B0  242A               	addwf	_arpeggioPtr,w,c
 45777  0013B2  6ED9               	movwf	fsr2l,c
 45778  0013B4  500F               	movf	??_playArpeggio+3,w,c
 45779  0013B6  202B               	addwfc	_arpeggioPtr+1,w,c
 45780  0013B8  6EDA               	movwf	fsr2h,c
 45781  0013BA  50DF               	movf	indf2,w,c
 45782  0013BC  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45783  0013BE  2832               	incf	_which_octave,w,c
 45784  0013C0  0D0C               	mullw	12
 45785  0013C2  50F3               	movf	prodl,w,c
 45786  0013C4  2410               	addwf	??_playArpeggio+4,w,c
 45787  0013C6  6EE6               	movwf	postinc1,c
 45788  0013C8  503E               	movf	_channel,w,c
 45789  0013CA  6EE6               	movwf	postinc1,c
 45790  0013CC  EC4A  F04A         	call	_noteOff	;wreg free
 45791                           
 45792                           ;arpeggio.c: 360: overflow = 0;
 45793  0013D0  9402               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45794  0013D2                     i2l5529:
 45795                           
 45796                           ;arpeggio.c: 361: }
 45797                           ;arpeggio.c: 362: }
 45798                           ;arpeggio.c: 364: if(octave_overflow == 1){
 45799  0013D2  A202               	btfss	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45800  0013D4  D06B               	goto	i2l5538
 45801                           
 45802                           ;arpeggio.c: 366: if(startingDirection == UP){
 45803  0013D6  5034               	movf	_startingDirection,w,c
 45804  0013D8  A4D8               	btfss	status,2,c
 45805  0013DA  D025               	goto	i2l5531
 45806                           
 45807                           ;arpeggio.c: 368: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )) + (((OCTAVES * - 1) + OCTAVES) * 12),velocity);}
 45808  0013DC  BC01               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 45809  0013DE  D022               	goto	i2l5532
 45810  0013E0  5051               	movf	_velocity,w,c
 45811  0013E2  6EE6               	movwf	postinc1,c
 45812  0013E4  0EFF               	movlw	255
 45813  0013E6  6E0C               	movwf	??_playArpeggio& (0+255),c
 45814  0013E8  0EFF               	movlw	255
 45815  0013EA  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45816  0013EC  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45817  0013EE  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45818  0013F0  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45819  0013F2  500C               	movf	??_playArpeggio,w,c
 45820  0013F4  260E               	addwf	??_playArpeggio+2,f,c
 45821  0013F6  500D               	movf	??_playArpeggio+1,w,c
 45822  0013F8  220F               	addwfc	??_playArpeggio+3,f,c
 45823  0013FA  500E               	movf	??_playArpeggio+2,w,c
 45824  0013FC  242A               	addwf	_arpeggioPtr,w,c
 45825  0013FE  6ED9               	movwf	fsr2l,c
 45826  001400  500F               	movf	??_playArpeggio+3,w,c
 45827  001402  202B               	addwfc	_arpeggioPtr+1,w,c
 45828  001404  6EDA               	movwf	fsr2h,c
 45829  001406  50DF               	movf	indf2,w,c
 45830  001408  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45831  00140A  504E               	movf	_OCTAVES,w,c
 45832  00140C  0D01               	mullw	1
 45833  00140E  50F3               	movf	prodl,w,c
 45834  001410  0800               	sublw	0
 45835  001412  244E               	addwf	_OCTAVES,w,c
 45836  001414  0D0C               	mullw	12
 45837  001416  50F3               	movf	prodl,w,c
 45838  001418  2410               	addwf	??_playArpeggio+4,w,c
 45839  00141A  6EE6               	movwf	postinc1,c
 45840  00141C  503E               	movf	_channel,w,c
 45841  00141E  6EE6               	movwf	postinc1,c
 45842  001420  EC4A  F04A         	call	_noteOff	;wreg free
 45843  001424                     i2l5532:
 45844                           
 45845                           ;arpeggio.c: 369: octave_overflow = 0;
 45846  001424  9202               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45847  001426                     i2l5531:
 45848                           
 45849                           ;arpeggio.c: 370: }
 45850                           ;arpeggio.c: 372: if(startingDirection == DOWN){
 45851  001426  0434               	decf	_startingDirection,w,c
 45852  001428  A4D8               	btfss	status,2,c
 45853  00142A  D026               	goto	i2l5533
 45854                           
 45855                           ;arpeggio.c: 374: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )) + (((OCTAVES * - 1) + 1) * 12),velocity);}
 45856  00142C  BC01               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 45857  00142E  D023               	goto	i2l5534
 45858  001430  5051               	movf	_velocity,w,c
 45859  001432  6EE6               	movwf	postinc1,c
 45860  001434  0EFF               	movlw	255
 45861  001436  6E0C               	movwf	??_playArpeggio& (0+255),c
 45862  001438  0EFF               	movlw	255
 45863  00143A  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45864  00143C  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45865  00143E  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45866  001440  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45867  001442  500C               	movf	??_playArpeggio,w,c
 45868  001444  260E               	addwf	??_playArpeggio+2,f,c
 45869  001446  500D               	movf	??_playArpeggio+1,w,c
 45870  001448  220F               	addwfc	??_playArpeggio+3,f,c
 45871  00144A  500E               	movf	??_playArpeggio+2,w,c
 45872  00144C  242A               	addwf	_arpeggioPtr,w,c
 45873  00144E  6ED9               	movwf	fsr2l,c
 45874  001450  500F               	movf	??_playArpeggio+3,w,c
 45875  001452  202B               	addwfc	_arpeggioPtr+1,w,c
 45876  001454  6EDA               	movwf	fsr2h,c
 45877  001456  50DF               	movf	indf2,w,c
 45878  001458  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45879  00145A  504E               	movf	_OCTAVES,w,c
 45880  00145C  0D01               	mullw	1
 45881  00145E  50F3               	movf	prodl,w,c
 45882  001460  0800               	sublw	0
 45883  001462  6E11               	movwf	(??_playArpeggio+5)& (0+255),c
 45884  001464  2811               	incf	??_playArpeggio+5,w,c
 45885  001466  0D0C               	mullw	12
 45886  001468  50F3               	movf	prodl,w,c
 45887  00146A  2410               	addwf	??_playArpeggio+4,w,c
 45888  00146C  6EE6               	movwf	postinc1,c
 45889  00146E  503E               	movf	_channel,w,c
 45890  001470  6EE6               	movwf	postinc1,c
 45891  001472  EC4A  F04A         	call	_noteOff	;wreg free
 45892  001476                     i2l5534:
 45893                           
 45894                           ;arpeggio.c: 375: octave_overflow = 0;
 45895  001476  9202               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45896  001478                     i2l5533:
 45897                           
 45898                           ;arpeggio.c: 376: }
 45899                           ;arpeggio.c: 380: if(skipFirstLast == 1){
 45900  001478  A603               	btfss	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 45901  00147A  D012               	goto	i2l5537
 45902                           
 45903                           ;arpeggio.c: 381: if(NUM_NOTES_PRESSED > 1){
 45904  00147C  0E01               	movlw	1
 45905  00147E  642F               	cpfsgt	_NUM_NOTES_PRESSED,c
 45906  001480  D003               	goto	i2l5536
 45907                           
 45908                           ;arpeggio.c: 382: which_note = 1;
 45909  001482  0E01               	movlw	1
 45910  001484  6E33               	movwf	_which_note,c
 45911                           
 45912                           ;arpeggio.c: 383: suppress_note_off = 1;
 45913  001486  8602               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45914  001488                     i2l5536:
 45915                           
 45916                           ;arpeggio.c: 384: }
 45917                           ;arpeggio.c: 388: if((NUM_NOTES_PRESSED == 1) && (OCTAVES > 1)){
 45918  001488  042F               	decf	_NUM_NOTES_PRESSED,w,c
 45919  00148A  A4D8               	btfss	status,2,c
 45920  00148C  D009               	goto	i2l5537
 45921  00148E  0E01               	movlw	1
 45922  001490  644E               	cpfsgt	_OCTAVES,c
 45923  001492  D006               	goto	i2l5537
 45924                           
 45925                           ;arpeggio.c: 389: flag1 = 1;
 45926  001494  8E01               	bsf	_flag1/(0+8),_flag1& (0+7),c
 45927                           
 45928                           ;arpeggio.c: 391: which_note = 0;
 45929  001496  0E00               	movlw	0
 45930  001498  6E33               	movwf	_which_note,c
 45931                           
 45932                           ;arpeggio.c: 392: which_octave++;
 45933  00149A  2A32               	incf	_which_octave,f,c
 45934                           
 45935                           ;arpeggio.c: 393: stored_octave = which_octave;
 45936  00149C  C032  F031         	movff	_which_octave,_stored_octave
 45937  0014A0                     i2l5537:
 45938                           
 45939                           ;arpeggio.c: 394: }
 45940                           ;arpeggio.c: 395: }
 45941                           ;arpeggio.c: 397: if(ARPEGGIO_TYPE == DOWN_UP) {ARPEGGIO_TYPE = UP_DOWN;}
 45942  0014A0  0E03               	movlw	3
 45943  0014A2  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45944  0014A4  A4D8               	btfss	status,2,c
 45945  0014A6  D002               	goto	i2l5538
 45946  0014A8  0E02               	movlw	2
 45947  0014AA  6E35               	movwf	_ARPEGGIO_TYPE,c
 45948  0014AC                     i2l5538:
 45949                           
 45950                           ;arpeggio.c: 398: }
 45951                           ;arpeggio.c: 399: }
 45952                           ;arpeggio.c: 402: if(ARPEGGIO_TYPE == RANDOM | ARPEGGIO_TYPE == RANDOM_NON_REPEATING){
 45953  0014AC  0E05               	movlw	5
 45954  0014AE  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45955  0014B0  B4D8               	btfsc	status,2,c
 45956  0014B2  D004               	goto	i2u6081_40
 45957  0014B4  0E04               	movlw	4
 45958  0014B6  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45959  0014B8  A4D8               	btfss	status,2,c
 45960  0014BA  D05A               	goto	i2l5544
 45961  0014BC                     i2u6081_40:
 45962                           
 45963                           ;arpeggio.c: 404: last_octave = which_octave;
 45964  0014BC  C032  F17D         	movff	_which_octave,_last_octave
 45965                           
 45966                           ;arpeggio.c: 406: if((overflow == 1) && (flag1 == 0)){
 45967  0014C0  B402               	btfsc	_overflow/(0+8),_overflow& (0+7),c
 45968  0014C2  BE01               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 45969  0014C4  D00E               	goto	i2l5542
 45970                           
 45971                           ;arpeggio.c: 407: noteOff(channel,last_note + (last_octave * 12),velocity);
 45972  0014C6  5051               	movf	_velocity,w,c
 45973  0014C8  6EE6               	movwf	postinc1,c
 45974  0014CA  0101               	movlb	1	; () banked
 45975  0014CC  517D               	movf	_last_octave& (0+255),w,b
 45976  0014CE  0D0C               	mullw	12
 45977  0014D0  50F3               	movf	prodl,w,c
 45978  0014D2  0100               	movlb	0	; () banked
 45979  0014D4  25EC               	addwf	_last_note& (0+255),w,b
 45980  0014D6  6EE6               	movwf	postinc1,c
 45981  0014D8  503E               	movf	_channel,w,c
 45982  0014DA  6EE6               	movwf	postinc1,c
 45983  0014DC  EC4A  F04A         	call	_noteOff	;wreg free
 45984                           
 45985                           ;arpeggio.c: 408: overflow = 0;
 45986  0014E0  9402               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45987  0014E2                     i2l5542:
 45988                           
 45989                           ;arpeggio.c: 409: }
 45990                           ;arpeggio.c: 411: if((which_note > 0) && (suppress_note_off == 0)){noteOff(channel,*(arp
      +                          eggioPtr + (which_note - 1)) + (which_octave * 12),velocity);}
 45991  0014E2  5033               	movf	_which_note,w,c
 45992  0014E4  A4D8               	btfss	status,2,c
 45993  0014E6  B602               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45994  0014E8  D01E               	goto	i2l5543
 45995  0014EA  5051               	movf	_velocity,w,c
 45996  0014EC  6EE6               	movwf	postinc1,c
 45997  0014EE  0EFF               	movlw	255
 45998  0014F0  6E0C               	movwf	??_playArpeggio& (0+255),c
 45999  0014F2  0EFF               	movlw	255
 46000  0014F4  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 46001  0014F6  5033               	movf	_which_note,w,c
 46002  0014F8  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 46003  0014FA  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 46004  0014FC  500C               	movf	??_playArpeggio,w,c
 46005  0014FE  260E               	addwf	??_playArpeggio+2,f,c
 46006  001500  500D               	movf	??_playArpeggio+1,w,c
 46007  001502  220F               	addwfc	??_playArpeggio+3,f,c
 46008  001504  500E               	movf	??_playArpeggio+2,w,c
 46009  001506  242A               	addwf	_arpeggioPtr,w,c
 46010  001508  6ED9               	movwf	fsr2l,c
 46011  00150A  500F               	movf	??_playArpeggio+3,w,c
 46012  00150C  202B               	addwfc	_arpeggioPtr+1,w,c
 46013  00150E  6EDA               	movwf	fsr2h,c
 46014  001510  50DF               	movf	indf2,w,c
 46015  001512  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46016  001514  5032               	movf	_which_octave,w,c
 46017  001516  0D0C               	mullw	12
 46018  001518  50F3               	movf	prodl,w,c
 46019  00151A  2410               	addwf	??_playArpeggio+4,w,c
 46020  00151C  6EE6               	movwf	postinc1,c
 46021  00151E  503E               	movf	_channel,w,c
 46022  001520  6EE6               	movwf	postinc1,c
 46023  001522  EC4A  F04A         	call	_noteOff	;wreg free
 46024  001526                     i2l5543:
 46025                           
 46026                           ;arpeggio.c: 412: which_octave = rand() % OCTAVES;
 46027  001526  504E               	movf	_OCTAVES,w,c
 46028  001528  6EE6               	movwf	postinc1,c
 46029  00152A  0E00               	movlw	0
 46030  00152C  6EE6               	movwf	postinc1,c
 46031  00152E  ECF0  F041         	call	_rand	;wreg free
 46032  001532  C03F  FFE6         	movff	btemp,postinc1
 46033  001536  C040  FFE6         	movff	btemp+1,postinc1
 46034  00153A  EC74  F034         	call	___awmod	;wreg free
 46035  00153E  503F               	movf	btemp,w,c
 46036  001540  6E32               	movwf	_which_octave,c
 46037                           
 46038                           ;arpeggio.c: 413: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           (which_octave * 12),velocity);}
 46039  001542  B802               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 46040  001544  D015               	goto	i2l5544
 46041  001546  5051               	movf	_velocity,w,c
 46042  001548  6EE6               	movwf	postinc1,c
 46043  00154A  5033               	movf	_which_note,w,c
 46044  00154C  0D01               	mullw	1
 46045  00154E  50F3               	movf	prodl,w,c
 46046  001550  242A               	addwf	_arpeggioPtr,w,c
 46047  001552  6ED9               	movwf	fsr2l,c
 46048  001554  50F4               	movf	prodh,w,c
 46049  001556  202B               	addwfc	_arpeggioPtr+1,w,c
 46050  001558  6EDA               	movwf	fsr2h,c
 46051  00155A  50DF               	movf	indf2,w,c
 46052  00155C  6E0C               	movwf	??_playArpeggio& (0+255),c
 46053  00155E  5032               	movf	_which_octave,w,c
 46054  001560  0D0C               	mullw	12
 46055  001562  50F3               	movf	prodl,w,c
 46056  001564  240C               	addwf	??_playArpeggio,w,c
 46057  001566  6EE6               	movwf	postinc1,c
 46058  001568  503E               	movf	_channel,w,c
 46059  00156A  6EE6               	movwf	postinc1,c
 46060  00156C  EC95  F045         	call	_noteOn	;wreg free
 46061  001570                     i2l5544:
 46062                           
 46063                           ;arpeggio.c: 414: }
 46064                           ;arpeggio.c: 416: if((ARPEGGIO_TYPE == UP) | (ARPEGGIO_TYPE == UP_DOWN | ARPEGGIO_TYPE =
      +                          = AS_PRESSED)) {
 46065  001570  5035               	movf	_ARPEGGIO_TYPE,w,c
 46066  001572  B4D8               	btfsc	status,2,c
 46067  001574  D008               	goto	i2u6089_40
 46068  001576  0E02               	movlw	2
 46069  001578  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46070  00157A  B4D8               	btfsc	status,2,c
 46071  00157C  D004               	goto	i2u6089_40
 46072  00157E  0E06               	movlw	6
 46073  001580  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46074  001582  A4D8               	btfss	status,2,c
 46075  001584  D07F               	goto	i2l5555
 46076  001586                     i2u6089_40:
 46077                           
 46078                           ;arpeggio.c: 418: SORT_DIRECTION = 0;
 46079  001586  9804               	bcf	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 46080                           
 46081                           ;arpeggio.c: 419: sort_pitches();
 46082  001588  EC5D  F032         	call	_sort_pitches	;wreg free
 46083                           
 46084                           ;arpeggio.c: 421: if(startingDirection == UP){
 46085  00158C  5034               	movf	_startingDirection,w,c
 46086  00158E  A4D8               	btfss	status,2,c
 46087  001590  D039               	goto	i2l5552
 46088                           
 46089                           ;arpeggio.c: 423: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + (which_octave * 12),velocity);}
 46090  001592  5033               	movf	_which_note,w,c
 46091  001594  A4D8               	btfss	status,2,c
 46092  001596  B602               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 46093  001598  D01E               	goto	i2l5551
 46094  00159A  5051               	movf	_velocity,w,c
 46095  00159C  6EE6               	movwf	postinc1,c
 46096  00159E  0EFF               	movlw	255
 46097  0015A0  6E0C               	movwf	??_playArpeggio& (0+255),c
 46098  0015A2  0EFF               	movlw	255
 46099  0015A4  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 46100  0015A6  5033               	movf	_which_note,w,c
 46101  0015A8  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 46102  0015AA  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 46103  0015AC  500C               	movf	??_playArpeggio,w,c
 46104  0015AE  260E               	addwf	??_playArpeggio+2,f,c
 46105  0015B0  500D               	movf	??_playArpeggio+1,w,c
 46106  0015B2  220F               	addwfc	??_playArpeggio+3,f,c
 46107  0015B4  500E               	movf	??_playArpeggio+2,w,c
 46108  0015B6  242A               	addwf	_arpeggioPtr,w,c
 46109  0015B8  6ED9               	movwf	fsr2l,c
 46110  0015BA  500F               	movf	??_playArpeggio+3,w,c
 46111  0015BC  202B               	addwfc	_arpeggioPtr+1,w,c
 46112  0015BE  6EDA               	movwf	fsr2h,c
 46113  0015C0  50DF               	movf	indf2,w,c
 46114  0015C2  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46115  0015C4  5032               	movf	_which_octave,w,c
 46116  0015C6  0D0C               	mullw	12
 46117  0015C8  50F3               	movf	prodl,w,c
 46118  0015CA  2410               	addwf	??_playArpeggio+4,w,c
 46119  0015CC  6EE6               	movwf	postinc1,c
 46120  0015CE  503E               	movf	_channel,w,c
 46121  0015D0  6EE6               	movwf	postinc1,c
 46122  0015D2  EC4A  F04A         	call	_noteOff	;wreg free
 46123  0015D6                     i2l5551:
 46124                           
 46125                           ;arpeggio.c: 424: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           (which_octave * 12),velocity);}
 46126  0015D6  B802               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 46127  0015D8  D015               	goto	i2l5552
 46128  0015DA  5051               	movf	_velocity,w,c
 46129  0015DC  6EE6               	movwf	postinc1,c
 46130  0015DE  5033               	movf	_which_note,w,c
 46131  0015E0  0D01               	mullw	1
 46132  0015E2  50F3               	movf	prodl,w,c
 46133  0015E4  242A               	addwf	_arpeggioPtr,w,c
 46134  0015E6  6ED9               	movwf	fsr2l,c
 46135  0015E8  50F4               	movf	prodh,w,c
 46136  0015EA  202B               	addwfc	_arpeggioPtr+1,w,c
 46137  0015EC  6EDA               	movwf	fsr2h,c
 46138  0015EE  50DF               	movf	indf2,w,c
 46139  0015F0  6E0C               	movwf	??_playArpeggio& (0+255),c
 46140  0015F2  5032               	movf	_which_octave,w,c
 46141  0015F4  0D0C               	mullw	12
 46142  0015F6  50F3               	movf	prodl,w,c
 46143  0015F8  240C               	addwf	??_playArpeggio,w,c
 46144  0015FA  6EE6               	movwf	postinc1,c
 46145  0015FC  503E               	movf	_channel,w,c
 46146  0015FE  6EE6               	movwf	postinc1,c
 46147  001600  EC95  F045         	call	_noteOn	;wreg free
 46148  001604                     i2l5552:
 46149                           
 46150                           ;arpeggio.c: 425: }
 46151                           ;arpeggio.c: 427: if(startingDirection == DOWN) {
 46152  001604  0434               	decf	_startingDirection,w,c
 46153  001606  A4D8               	btfss	status,2,c
 46154  001608  D03D               	goto	i2l5555
 46155                           
 46156                           ;arpeggio.c: 429: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + ((which_octave - (OCTAVES - 1)) * 12),velocity);}
 46157  00160A  5033               	movf	_which_note,w,c
 46158  00160C  A4D8               	btfss	status,2,c
 46159  00160E  B602               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 46160  001610  D020               	goto	i2l5554
 46161  001612  5051               	movf	_velocity,w,c
 46162  001614  6EE6               	movwf	postinc1,c
 46163  001616  0EFF               	movlw	255
 46164  001618  6E0C               	movwf	??_playArpeggio& (0+255),c
 46165  00161A  0EFF               	movlw	255
 46166  00161C  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 46167  00161E  5033               	movf	_which_note,w,c
 46168  001620  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 46169  001622  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 46170  001624  500C               	movf	??_playArpeggio,w,c
 46171  001626  260E               	addwf	??_playArpeggio+2,f,c
 46172  001628  500D               	movf	??_playArpeggio+1,w,c
 46173  00162A  220F               	addwfc	??_playArpeggio+3,f,c
 46174  00162C  500E               	movf	??_playArpeggio+2,w,c
 46175  00162E  242A               	addwf	_arpeggioPtr,w,c
 46176  001630  6ED9               	movwf	fsr2l,c
 46177  001632  500F               	movf	??_playArpeggio+3,w,c
 46178  001634  202B               	addwfc	_arpeggioPtr+1,w,c
 46179  001636  6EDA               	movwf	fsr2h,c
 46180  001638  50DF               	movf	indf2,w,c
 46181  00163A  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46182  00163C  044E               	decf	_OCTAVES,w,c
 46183  00163E  0800               	sublw	0
 46184  001640  2432               	addwf	_which_octave,w,c
 46185  001642  0D0C               	mullw	12
 46186  001644  50F3               	movf	prodl,w,c
 46187  001646  2410               	addwf	??_playArpeggio+4,w,c
 46188  001648  6EE6               	movwf	postinc1,c
 46189  00164A  503E               	movf	_channel,w,c
 46190  00164C  6EE6               	movwf	postinc1,c
 46191  00164E  EC4A  F04A         	call	_noteOff	;wreg free
 46192  001652                     i2l5554:
 46193                           
 46194                           ;arpeggio.c: 430: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           ((which_octave - (OCTAVES - 1)) * 12),velocity);}
 46195  001652  B802               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 46196  001654  D017               	goto	i2l5555
 46197  001656  5051               	movf	_velocity,w,c
 46198  001658  6EE6               	movwf	postinc1,c
 46199  00165A  5033               	movf	_which_note,w,c
 46200  00165C  0D01               	mullw	1
 46201  00165E  50F3               	movf	prodl,w,c
 46202  001660  242A               	addwf	_arpeggioPtr,w,c
 46203  001662  6ED9               	movwf	fsr2l,c
 46204  001664  50F4               	movf	prodh,w,c
 46205  001666  202B               	addwfc	_arpeggioPtr+1,w,c
 46206  001668  6EDA               	movwf	fsr2h,c
 46207  00166A  50DF               	movf	indf2,w,c
 46208  00166C  6E0C               	movwf	??_playArpeggio& (0+255),c
 46209  00166E  044E               	decf	_OCTAVES,w,c
 46210  001670  0800               	sublw	0
 46211  001672  2432               	addwf	_which_octave,w,c
 46212  001674  0D0C               	mullw	12
 46213  001676  50F3               	movf	prodl,w,c
 46214  001678  240C               	addwf	??_playArpeggio,w,c
 46215  00167A  6EE6               	movwf	postinc1,c
 46216  00167C  503E               	movf	_channel,w,c
 46217  00167E  6EE6               	movwf	postinc1,c
 46218  001680  EC95  F045         	call	_noteOn	;wreg free
 46219  001684                     i2l5555:
 46220                           
 46221                           ;arpeggio.c: 431: }
 46222                           ;arpeggio.c: 432: }
 46223                           ;arpeggio.c: 434: if((ARPEGGIO_TYPE == DOWN) | (ARPEGGIO_TYPE == DOWN_UP)) {
 46224  001684  0435               	decf	_ARPEGGIO_TYPE,w,c
 46225  001686  B4D8               	btfsc	status,2,c
 46226  001688  D004               	goto	i2u6099_40
 46227  00168A  0E03               	movlw	3
 46228  00168C  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46229  00168E  A4D8               	btfss	status,2,c
 46230  001690  D082               	goto	i2l5564
 46231  001692                     i2u6099_40:
 46232                           
 46233                           ;arpeggio.c: 436: SORT_DIRECTION = 1;
 46234  001692  8804               	bsf	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 46235                           
 46236                           ;arpeggio.c: 437: sort_pitches();
 46237  001694  EC5D  F032         	call	_sort_pitches	;wreg free
 46238                           
 46239                           ;arpeggio.c: 439: suppress_note_on = 0;
 46240  001698  9802               	bcf	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 46241                           
 46242                           ;arpeggio.c: 441: if(startingDirection == UP){
 46243  00169A  5034               	movf	_startingDirection,w,c
 46244  00169C  A4D8               	btfss	status,2,c
 46245  00169E  D03F               	goto	i2l5561
 46246                           
 46247                           ;arpeggio.c: 443: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + ((which_octave + (OCTAVES - 1)) * 12),velocity);}
 46248  0016A0  5033               	movf	_which_note,w,c
 46249  0016A2  A4D8               	btfss	status,2,c
 46250  0016A4  B602               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 46251  0016A6  D021               	goto	i2l5560
 46252  0016A8  5051               	movf	_velocity,w,c
 46253  0016AA  6EE6               	movwf	postinc1,c
 46254  0016AC  0EFF               	movlw	255
 46255  0016AE  6E0C               	movwf	??_playArpeggio& (0+255),c
 46256  0016B0  0EFF               	movlw	255
 46257  0016B2  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 46258  0016B4  5033               	movf	_which_note,w,c
 46259  0016B6  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 46260  0016B8  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 46261  0016BA  500C               	movf	??_playArpeggio,w,c
 46262  0016BC  260E               	addwf	??_playArpeggio+2,f,c
 46263  0016BE  500D               	movf	??_playArpeggio+1,w,c
 46264  0016C0  220F               	addwfc	??_playArpeggio+3,f,c
 46265  0016C2  500E               	movf	??_playArpeggio+2,w,c
 46266  0016C4  242A               	addwf	_arpeggioPtr,w,c
 46267  0016C6  6ED9               	movwf	fsr2l,c
 46268  0016C8  500F               	movf	??_playArpeggio+3,w,c
 46269  0016CA  202B               	addwfc	_arpeggioPtr+1,w,c
 46270  0016CC  6EDA               	movwf	fsr2h,c
 46271  0016CE  50DF               	movf	indf2,w,c
 46272  0016D0  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46273  0016D2  504E               	movf	_OCTAVES,w,c
 46274  0016D4  2432               	addwf	_which_octave,w,c
 46275  0016D6  6E11               	movwf	(??_playArpeggio+5)& (0+255),c
 46276  0016D8  0411               	decf	??_playArpeggio+5,w,c
 46277  0016DA  0D0C               	mullw	12
 46278  0016DC  50F3               	movf	prodl,w,c
 46279  0016DE  2410               	addwf	??_playArpeggio+4,w,c
 46280  0016E0  6EE6               	movwf	postinc1,c
 46281  0016E2  503E               	movf	_channel,w,c
 46282  0016E4  6EE6               	movwf	postinc1,c
 46283  0016E6  EC4A  F04A         	call	_noteOff	;wreg free
 46284  0016EA                     i2l5560:
 46285                           
 46286                           ;arpeggio.c: 444: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           ((which_octave + (OCTAVES - 1)) * 12),velocity);}
 46287  0016EA  B802               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 46288  0016EC  D018               	goto	i2l5561
 46289  0016EE  5051               	movf	_velocity,w,c
 46290  0016F0  6EE6               	movwf	postinc1,c
 46291  0016F2  5033               	movf	_which_note,w,c
 46292  0016F4  0D01               	mullw	1
 46293  0016F6  50F3               	movf	prodl,w,c
 46294  0016F8  242A               	addwf	_arpeggioPtr,w,c
 46295  0016FA  6ED9               	movwf	fsr2l,c
 46296  0016FC  50F4               	movf	prodh,w,c
 46297  0016FE  202B               	addwfc	_arpeggioPtr+1,w,c
 46298  001700  6EDA               	movwf	fsr2h,c
 46299  001702  50DF               	movf	indf2,w,c
 46300  001704  6E0C               	movwf	??_playArpeggio& (0+255),c
 46301  001706  504E               	movf	_OCTAVES,w,c
 46302  001708  2432               	addwf	_which_octave,w,c
 46303  00170A  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 46304  00170C  040D               	decf	??_playArpeggio+1,w,c
 46305  00170E  0D0C               	mullw	12
 46306  001710  50F3               	movf	prodl,w,c
 46307  001712  240C               	addwf	??_playArpeggio,w,c
 46308  001714  6EE6               	movwf	postinc1,c
 46309  001716  503E               	movf	_channel,w,c
 46310  001718  6EE6               	movwf	postinc1,c
 46311  00171A  EC95  F045         	call	_noteOn	;wreg free
 46312  00171E                     i2l5561:
 46313                           
 46314                           ;arpeggio.c: 445: }
 46315                           ;arpeggio.c: 447: if(startingDirection == DOWN){
 46316  00171E  0434               	decf	_startingDirection,w,c
 46317  001720  A4D8               	btfss	status,2,c
 46318  001722  D039               	goto	i2l5564
 46319                           
 46320                           ;arpeggio.c: 449: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + ((which_octave) * 12),velocity);}
 46321  001724  5033               	movf	_which_note,w,c
 46322  001726  A4D8               	btfss	status,2,c
 46323  001728  B602               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 46324  00172A  D01E               	goto	i2l5563
 46325  00172C  5051               	movf	_velocity,w,c
 46326  00172E  6EE6               	movwf	postinc1,c
 46327  001730  0EFF               	movlw	255
 46328  001732  6E0C               	movwf	??_playArpeggio& (0+255),c
 46329  001734  0EFF               	movlw	255
 46330  001736  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 46331  001738  5033               	movf	_which_note,w,c
 46332  00173A  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 46333  00173C  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 46334  00173E  500C               	movf	??_playArpeggio,w,c
 46335  001740  260E               	addwf	??_playArpeggio+2,f,c
 46336  001742  500D               	movf	??_playArpeggio+1,w,c
 46337  001744  220F               	addwfc	??_playArpeggio+3,f,c
 46338  001746  500E               	movf	??_playArpeggio+2,w,c
 46339  001748  242A               	addwf	_arpeggioPtr,w,c
 46340  00174A  6ED9               	movwf	fsr2l,c
 46341  00174C  500F               	movf	??_playArpeggio+3,w,c
 46342  00174E  202B               	addwfc	_arpeggioPtr+1,w,c
 46343  001750  6EDA               	movwf	fsr2h,c
 46344  001752  50DF               	movf	indf2,w,c
 46345  001754  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46346  001756  5032               	movf	_which_octave,w,c
 46347  001758  0D0C               	mullw	12
 46348  00175A  50F3               	movf	prodl,w,c
 46349  00175C  2410               	addwf	??_playArpeggio+4,w,c
 46350  00175E  6EE6               	movwf	postinc1,c
 46351  001760  503E               	movf	_channel,w,c
 46352  001762  6EE6               	movwf	postinc1,c
 46353  001764  EC4A  F04A         	call	_noteOff	;wreg free
 46354  001768                     i2l5563:
 46355                           
 46356                           ;arpeggio.c: 450: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           (which_octave * 12),velocity);}
 46357  001768  B802               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 46358  00176A  D015               	goto	i2l5564
 46359  00176C  5051               	movf	_velocity,w,c
 46360  00176E  6EE6               	movwf	postinc1,c
 46361  001770  5033               	movf	_which_note,w,c
 46362  001772  0D01               	mullw	1
 46363  001774  50F3               	movf	prodl,w,c
 46364  001776  242A               	addwf	_arpeggioPtr,w,c
 46365  001778  6ED9               	movwf	fsr2l,c
 46366  00177A  50F4               	movf	prodh,w,c
 46367  00177C  202B               	addwfc	_arpeggioPtr+1,w,c
 46368  00177E  6EDA               	movwf	fsr2h,c
 46369  001780  50DF               	movf	indf2,w,c
 46370  001782  6E0C               	movwf	??_playArpeggio& (0+255),c
 46371  001784  5032               	movf	_which_octave,w,c
 46372  001786  0D0C               	mullw	12
 46373  001788  50F3               	movf	prodl,w,c
 46374  00178A  240C               	addwf	??_playArpeggio,w,c
 46375  00178C  6EE6               	movwf	postinc1,c
 46376  00178E  503E               	movf	_channel,w,c
 46377  001790  6EE6               	movwf	postinc1,c
 46378  001792  EC95  F045         	call	_noteOn	;wreg free
 46379  001796                     i2l5564:
 46380                           
 46381                           ;arpeggio.c: 451: }
 46382                           ;arpeggio.c: 452: }
 46383                           ;arpeggio.c: 454: last_note = *(arpeggioPtr + which_note);
 46384  001796  5033               	movf	_which_note,w,c
 46385  001798  0D01               	mullw	1
 46386  00179A  50F3               	movf	prodl,w,c
 46387  00179C  242A               	addwf	_arpeggioPtr,w,c
 46388  00179E  6ED9               	movwf	fsr2l,c
 46389  0017A0  50F4               	movf	prodh,w,c
 46390  0017A2  202B               	addwfc	_arpeggioPtr+1,w,c
 46391  0017A4  6EDA               	movwf	fsr2h,c
 46392  0017A6  50DF               	movf	indf2,w,c
 46393  0017A8  0100               	movlb	0	; () banked
 46394  0017AA  6FEC               	movwf	_last_note& (0+255),b
 46395                           
 46396                           ; BSR set to: 0
 46397                           ;arpeggio.c: 455: which_note++;
 46398  0017AC  2A33               	incf	_which_note,f,c
 46399                           
 46400                           ; BSR set to: 0
 46401                           ;arpeggio.c: 456: suppress_note_off = 0;
 46402  0017AE  9602               	bcf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 46403                           
 46404                           ; BSR set to: 0
 46405                           ;arpeggio.c: 468: if((ARPEGGIO_TYPE == UP) | (ARPEGGIO_TYPE == UP_DOWN) | (ARPEGGIO_TYPE
      +                           == RANDOM) | (ARPEGGIO_TYPE == RANDOM_NON_REPEATING) | ARPEGGIO_TYPE == AS_PRESSED) {
 46406  0017B0  5035               	movf	_ARPEGGIO_TYPE,w,c
 46407  0017B2  B4D8               	btfsc	status,2,c
 46408  0017B4  D010               	goto	i2u6112_40
 46409                           
 46410                           ; BSR set to: 0
 46411  0017B6  0E02               	movlw	2
 46412  0017B8  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46413  0017BA  B4D8               	btfsc	status,2,c
 46414  0017BC  D00C               	goto	i2u6112_40
 46415                           
 46416                           ; BSR set to: 0
 46417  0017BE  0E05               	movlw	5
 46418  0017C0  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46419  0017C2  B4D8               	btfsc	status,2,c
 46420  0017C4  D008               	goto	i2u6112_40
 46421                           
 46422                           ; BSR set to: 0
 46423  0017C6  0E04               	movlw	4
 46424  0017C8  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46425  0017CA  B4D8               	btfsc	status,2,c
 46426  0017CC  D004               	goto	i2u6112_40
 46427                           
 46428                           ; BSR set to: 0
 46429  0017CE  0E06               	movlw	6
 46430  0017D0  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46431  0017D2  A4D8               	btfss	status,2,c
 46432  0017D4  D037               	goto	i2l5576
 46433  0017D6                     i2u6112_40:
 46434                           
 46435                           ; BSR set to: 0
 46436                           ;arpeggio.c: 470: if(which_note >= (NUM_NOTES_PRESSED)){
 46437                           
 46438                           ; BSR set to: 0
 46439  0017D6  502F               	movf	_NUM_NOTES_PRESSED,w,c
 46440  0017D8  5C33               	subwf	_which_note,w,c
 46441  0017DA  A0D8               	btfss	status,0,c
 46442  0017DC  D01D               	goto	i2l5575
 46443                           
 46444                           ; BSR set to: 0
 46445                           ;arpeggio.c: 472: which_note = 0;
 46446  0017DE  0E00               	movlw	0
 46447  0017E0  6E33               	movwf	_which_note,c
 46448                           
 46449                           ;arpeggio.c: 475: if((ARPEGGIO_TYPE == UP) | (ARPEGGIO_TYPE == UP_DOWN) | ARPEGGIO_TYPE 
      +                          == AS_PRESSED) {
 46450  0017E2  5035               	movf	_ARPEGGIO_TYPE,w,c
 46451  0017E4  B4D8               	btfsc	status,2,c
 46452  0017E6  D007               	goto	i2u6116_40
 46453                           
 46454                           ; BSR set to: 0
 46455  0017E8  0E02               	movlw	2
 46456  0017EA  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46457  0017EC  B4D8               	btfsc	status,2,c
 46458  0017EE  D003               	goto	i2u6116_40
 46459                           
 46460                           ; BSR set to: 0
 46461  0017F0  0E06               	movlw	6
 46462  0017F2  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46463  0017F4  B4D8               	btfsc	status,2,c
 46464  0017F6                     i2u6116_40:
 46465                           
 46466                           ; BSR set to: 0
 46467                           ;arpeggio.c: 476: which_octave++;
 46468                           
 46469                           ; BSR set to: 0
 46470  0017F6  2A32               	incf	_which_octave,f,c
 46471                           
 46472                           ; BSR set to: 0
 46473                           ;arpeggio.c: 477: }
 46474                           ;arpeggio.c: 479: overflow = 1;
 46475                           
 46476                           ; BSR set to: 0
 46477  0017F8  8402               	bsf	_overflow/(0+8),_overflow& (0+7),c
 46478                           
 46479                           ; BSR set to: 0
 46480                           ;arpeggio.c: 480: flag1 = 0;
 46481  0017FA  9E01               	bcf	_flag1/(0+8),_flag1& (0+7),c
 46482                           
 46483                           ; BSR set to: 0
 46484                           ;arpeggio.c: 483: if(ARPEGGIO_TYPE == RANDOM) {
 46485  0017FC  0E05               	movlw	5
 46486  0017FE  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46487  001800  B4D8               	btfsc	status,2,c
 46488                           
 46489                           ; BSR set to: 0
 46490                           ;arpeggio.c: 484: if(AUTO_RANDOMIZE == 0) {random_pitches();}
 46491  001802  B803               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 46492  001804  D002               	goto	i2l5573
 46493                           
 46494                           ; BSR set to: 0
 46495  001806  ECCE  F045         	call	_random_pitches	;wreg free
 46496  00180A                     i2l5573:
 46497                           
 46498                           ;arpeggio.c: 485: }
 46499                           ;arpeggio.c: 486: if(ARPEGGIO_TYPE == RANDOM_NON_REPEATING) {
 46500  00180A  0E04               	movlw	4
 46501  00180C  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46502  00180E  B4D8               	btfsc	status,2,c
 46503                           
 46504                           ;arpeggio.c: 487: if(AUTO_RANDOMIZE == 0) {random_pitches_non_repeating();}
 46505  001810  B803               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 46506  001812  D002               	goto	i2l5575
 46507  001814  EC7C  F03C         	call	_random_pitches_non_repeating	;wreg free
 46508  001818                     i2l5575:
 46509                           
 46510                           ;arpeggio.c: 488: }
 46511                           ;arpeggio.c: 489: }
 46512                           ;arpeggio.c: 491: if(which_octave>=OCTAVES) {
 46513  001818  504E               	movf	_OCTAVES,w,c
 46514  00181A  6E0C               	movwf	??_playArpeggio& (0+255),c
 46515  00181C  6A0D               	clrf	(??_playArpeggio+1)& (0+255),c
 46516  00181E  C032  F00E         	movff	_which_octave,??_playArpeggio+2
 46517  001822  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 46518  001824  BE0E               	btfsc	(??_playArpeggio+2)& (0+255),7,c
 46519  001826  060F               	decf	(??_playArpeggio+3)& (0+255),f,c
 46520  001828  500C               	movf	??_playArpeggio,w,c
 46521  00182A  5C0E               	subwf	??_playArpeggio+2,w,c
 46522  00182C  500F               	movf	??_playArpeggio+3,w,c
 46523  00182E  0A80               	xorlw	128
 46524  001830  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46525  001832  500D               	movf	??_playArpeggio+1,w,c
 46526  001834  0A80               	xorlw	128
 46527  001836  5810               	subwfb	(??_playArpeggio+4)& (0+255),w,c
 46528  001838  A0D8               	btfss	status,0,c
 46529  00183A  D004               	goto	i2l5576
 46530                           
 46531                           ;arpeggio.c: 492: which_octave = 0;
 46532  00183C  0E00               	movlw	0
 46533  00183E  6E32               	movwf	_which_octave,c
 46534                           
 46535                           ;arpeggio.c: 493: octave_overflow = 1;
 46536  001840  8202               	bsf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 46537                           
 46538                           ;arpeggio.c: 494: flag2 = 0;
 46539  001842  9C01               	bcf	_flag2/(0+8),_flag2& (0+7),c
 46540  001844                     i2l5576:
 46541                           
 46542                           ;arpeggio.c: 495: }
 46543                           ;arpeggio.c: 496: }
 46544                           ;arpeggio.c: 499: if((ARPEGGIO_TYPE == DOWN) | (ARPEGGIO_TYPE == DOWN_UP)) {
 46545  001844  0435               	decf	_ARPEGGIO_TYPE,w,c
 46546  001846  B4D8               	btfsc	status,2,c
 46547  001848  D004               	goto	i2u6123_40
 46548  00184A  0E03               	movlw	3
 46549  00184C  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46550  00184E  A4D8               	btfss	status,2,c
 46551  001850  0012               	return	
 46552  001852                     i2u6123_40:
 46553                           
 46554                           ;arpeggio.c: 501: if(which_note>=(NUM_NOTES_PRESSED)){
 46555  001852  502F               	movf	_NUM_NOTES_PRESSED,w,c
 46556  001854  5C33               	subwf	_which_note,w,c
 46557  001856  A0D8               	btfss	status,0,c
 46558  001858  D005               	goto	i2l5580
 46559                           
 46560                           ;arpeggio.c: 502: which_note = 0;
 46561  00185A  0E00               	movlw	0
 46562  00185C  6E33               	movwf	_which_note,c
 46563                           
 46564                           ;arpeggio.c: 503: which_octave--;
 46565  00185E  0632               	decf	_which_octave,f,c
 46566                           
 46567                           ;arpeggio.c: 504: overflow = 1;
 46568  001860  8402               	bsf	_overflow/(0+8),_overflow& (0+7),c
 46569                           
 46570                           ;arpeggio.c: 505: flag1 = 0;
 46571  001862  9E01               	bcf	_flag1/(0+8),_flag1& (0+7),c
 46572  001864                     i2l5580:
 46573                           
 46574                           ;arpeggio.c: 506: }
 46575                           ;arpeggio.c: 507: if(which_octave <= (OCTAVES * -1)) {
 46576  001864  C032  F00C         	movff	_which_octave,??_playArpeggio
 46577  001868  6A0D               	clrf	(??_playArpeggio+1)& (0+255),c
 46578  00186A  BE0C               	btfsc	??_playArpeggio& (0+255),7,c
 46579  00186C  060D               	decf	(??_playArpeggio+1)& (0+255),f,c
 46580  00186E  504E               	movf	_OCTAVES,w,c
 46581  001870  0D01               	mullw	1
 46582  001872  1EF3               	comf	prodl,f,c
 46583  001874  1EF4               	comf	prodh,f,c
 46584  001876  4AF3               	infsnz	prodl,f,c
 46585  001878  2AF4               	incf	prodh,f,c
 46586  00187A  500C               	movf	??_playArpeggio,w,c
 46587  00187C  5CF3               	subwf	prodl,w,c
 46588  00187E  50F4               	movf	prodh,w,c
 46589  001880  0A80               	xorlw	128
 46590  001882  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 46591  001884  500D               	movf	??_playArpeggio+1,w,c
 46592  001886  0A80               	xorlw	128
 46593  001888  580E               	subwfb	(??_playArpeggio+2)& (0+255),w,c
 46594  00188A  A0D8               	btfss	status,0,c
 46595  00188C  0012               	return	
 46596                           
 46597                           ;arpeggio.c: 508: which_octave = 0;
 46598  00188E  0E00               	movlw	0
 46599  001890  6E32               	movwf	_which_octave,c
 46600                           
 46601                           ;arpeggio.c: 509: octave_overflow = 1;
 46602  001892  8202               	bsf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 46603                           
 46604                           ;arpeggio.c: 510: flag2 = 0;
 46605  001894  9C01               	bcf	_flag2/(0+8),_flag2& (0+7),c
 46606  001896  0012               	return	
 46607  001898                     __end_of_playArpeggio:
 46608                           	opt stack 0
 46609                           tblptru	equ	0xFF8
 46610                           tblptrh	equ	0xFF7
 46611                           tblptrl	equ	0xFF6
 46612                           tablat	equ	0xFF5
 46613                           prodh	equ	0xFF4
 46614                           prodl	equ	0xFF3
 46615                           intcon	equ	0xFF2
 46616                           intcon2	equ	0xFF1
 46617                           indf0	equ	0xFEF
 46618                           postinc0	equ	0xFEE
 46619                           postdec0	equ	0xFED
 46620                           fsr0h	equ	0xFEA
 46621                           fsr0l	equ	0xFE9
 46622                           wreg	equ	0xFE8
 46623                           postinc1	equ	0xFE6
 46624                           postdec1	equ	0xFE5
 46625                           plusw1	equ	0xFE3
 46626                           fsr1h	equ	0xFE2
 46627                           fsr1l	equ	0xFE1
 46628                           indf2	equ	0xFDF
 46629                           postinc2	equ	0xFDE
 46630                           postdec2	equ	0xFDD
 46631                           plusw2	equ	0xFDB
 46632                           fsr2h	equ	0xFDA
 46633                           fsr2l	equ	0xFD9
 46634                           status	equ	0xFD8
 46635                           
 46636 ;; *************** function _sort_pitches *****************
 46637 ;; Defined at:
 46638 ;;		line 222 in file "arpeggio.c"
 46639 ;; Parameters:    Size  Location     Type
 46640 ;;		None
 46641 ;; Auto vars:     Size  Location     Type
 46642 ;;  j               1    3[COMRAM] unsigned char 
 46643 ;;  i               1    4[COMRAM] unsigned char 
 46644 ;;  a               1    2[COMRAM] unsigned char 
 46645 ;; Return value:  Size  Location     Type
 46646 ;;                  1    wreg      void 
 46647 ;; Registers used:
 46648 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 46649 ;; Tracked objects:
 46650 ;;		On entry : 0/0
 46651 ;;		On exit  : 0/0
 46652 ;;		Unchanged: 0/0
 46653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46655 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46656 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46657 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46658 ;;Total ram usage:        5 bytes
 46659 ;; Hardware stack levels used:    1
 46660 ;; This function calls:
 46661 ;;		Nothing
 46662 ;; This function is called by:
 46663 ;;		_playArpeggio
 46664 ;; This function uses a non-reentrant model
 46665 ;;
 46666                           
 46667                           	psect	text142
 46668  0064BA                     __ptext142:
 46669                           	opt stack 0
 46670  0064BA                     _sort_pitches:
 46671                           	opt stack 13
 46672                           
 46673                           ;arpeggio.c: 224: if(NUM_NOTES_PRESSED == 0){return;}
 46674                           
 46675                           ;incstack = 0
 46676  0064BA  502F               	movf	_NUM_NOTES_PRESSED,w,c
 46677  0064BC  B4D8               	btfsc	status,2,c
 46678  0064BE  0012               	return	
 46679                           
 46680                           ;arpeggio.c: 226: unsigned char a;
 46681                           ;arpeggio.c: 227: for(unsigned char i = 0; i < NUM_NOTES_PRESSED; ++i){
 46682  0064C0  0E00               	movlw	0
 46683  0064C2  6E0B               	movwf	sort_pitches@i,c
 46684  0064C4  D081               	goto	i2l5479
 46685  0064C6                     
 46686                           ;arpeggio.c: 228: for(unsigned char j = i + 1; j < NUM_NOTES_PRESSED; ++j){
 46687  0064C6  280B               	incf	sort_pitches@i,w,c
 46688  0064C8  6E0A               	movwf	sort_pitches@j,c
 46689  0064CA  D079               	goto	i2l5481
 46690  0064CC                     i2l5482:
 46691                           
 46692                           ;arpeggio.c: 234: if(SORT_DIRECTION == 0) {
 46693  0064CC  B804               	btfsc	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 46694  0064CE  D03A               	goto	i2l5484
 46695                           
 46696                           ;arpeggio.c: 235: if(ARPEGGIO_SORTED[i] > ARPEGGIO_SORTED[j]){
 46697  0064D0  500B               	movf	sort_pitches@i,w,c
 46698  0064D2  0D01               	mullw	1
 46699  0064D4  0E78               	movlw	low _ARPEGGIO_SORTED
 46700  0064D6  24F3               	addwf	prodl,w,c
 46701  0064D8  6ED9               	movwf	fsr2l,c
 46702  0064DA  0E02               	movlw	high _ARPEGGIO_SORTED
 46703  0064DC  20F4               	addwfc	prodh,w,c
 46704  0064DE  6EDA               	movwf	fsr2h,c
 46705  0064E0  500A               	movf	sort_pitches@j,w,c
 46706  0064E2  0D01               	mullw	1
 46707  0064E4  0E78               	movlw	low _ARPEGGIO_SORTED
 46708  0064E6  24F3               	addwf	prodl,w,c
 46709  0064E8  6EE9               	movwf	fsr0l,c
 46710  0064EA  0E02               	movlw	high _ARPEGGIO_SORTED
 46711  0064EC  20F4               	addwfc	prodh,w,c
 46712  0064EE  6EEA               	movwf	fsr0h,c
 46713  0064F0  50DE               	movf	postinc2,w,c
 46714  0064F2  5CEE               	subwf	postinc0,w,c
 46715  0064F4  B0D8               	btfsc	status,0,c
 46716  0064F6  D026               	goto	i2l5484
 46717                           
 46718                           ;arpeggio.c: 236: a = ARPEGGIO_SORTED[i];
 46719  0064F8  500B               	movf	sort_pitches@i,w,c
 46720  0064FA  0D01               	mullw	1
 46721  0064FC  0E78               	movlw	low _ARPEGGIO_SORTED
 46722  0064FE  24F3               	addwf	prodl,w,c
 46723  006500  6ED9               	movwf	fsr2l,c
 46724  006502  0E02               	movlw	high _ARPEGGIO_SORTED
 46725  006504  20F4               	addwfc	prodh,w,c
 46726  006506  6EDA               	movwf	fsr2h,c
 46727  006508  50DF               	movf	indf2,w,c
 46728  00650A  6E09               	movwf	sort_pitches@a,c
 46729                           
 46730                           ;arpeggio.c: 237: ARPEGGIO_SORTED[i] = ARPEGGIO_SORTED[j];
 46731  00650C  500A               	movf	sort_pitches@j,w,c
 46732  00650E  0D01               	mullw	1
 46733  006510  0E78               	movlw	low _ARPEGGIO_SORTED
 46734  006512  24F3               	addwf	prodl,w,c
 46735  006514  6ED9               	movwf	fsr2l,c
 46736  006516  0E02               	movlw	high _ARPEGGIO_SORTED
 46737  006518  20F4               	addwfc	prodh,w,c
 46738  00651A  6EDA               	movwf	fsr2h,c
 46739  00651C  500B               	movf	sort_pitches@i,w,c
 46740  00651E  0D01               	mullw	1
 46741  006520  0E78               	movlw	low _ARPEGGIO_SORTED
 46742  006522  24F3               	addwf	prodl,w,c
 46743  006524  6EE9               	movwf	fsr0l,c
 46744  006526  0E02               	movlw	high _ARPEGGIO_SORTED
 46745  006528  20F4               	addwfc	prodh,w,c
 46746  00652A  6EEA               	movwf	fsr0h,c
 46747  00652C  CFDF FFEF          	movff	indf2,indf0
 46748                           
 46749                           ;arpeggio.c: 238: ARPEGGIO_SORTED[j] = a;
 46750  006530  500A               	movf	sort_pitches@j,w,c
 46751  006532  0D01               	mullw	1
 46752  006534  0E78               	movlw	low _ARPEGGIO_SORTED
 46753  006536  24F3               	addwf	prodl,w,c
 46754  006538  6ED9               	movwf	fsr2l,c
 46755  00653A  0E02               	movlw	high _ARPEGGIO_SORTED
 46756  00653C  20F4               	addwfc	prodh,w,c
 46757  00653E  6EDA               	movwf	fsr2h,c
 46758  006540  C009  FFDF         	movff	sort_pitches@a,indf2
 46759  006544                     i2l5484:
 46760                           
 46761                           ;arpeggio.c: 239: }
 46762                           ;arpeggio.c: 240: }
 46763                           ;arpeggio.c: 242: if(SORT_DIRECTION == 1) {
 46764  006544  A804               	btfss	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 46765  006546  D03A               	goto	i2l5486
 46766                           
 46767                           ;arpeggio.c: 243: if(ARPEGGIO_SORTED[i] < ARPEGGIO_SORTED[j]){
 46768  006548  500A               	movf	sort_pitches@j,w,c
 46769  00654A  0D01               	mullw	1
 46770  00654C  0E78               	movlw	low _ARPEGGIO_SORTED
 46771  00654E  24F3               	addwf	prodl,w,c
 46772  006550  6ED9               	movwf	fsr2l,c
 46773  006552  0E02               	movlw	high _ARPEGGIO_SORTED
 46774  006554  20F4               	addwfc	prodh,w,c
 46775  006556  6EDA               	movwf	fsr2h,c
 46776  006558  500B               	movf	sort_pitches@i,w,c
 46777  00655A  0D01               	mullw	1
 46778  00655C  0E78               	movlw	low _ARPEGGIO_SORTED
 46779  00655E  24F3               	addwf	prodl,w,c
 46780  006560  6EE9               	movwf	fsr0l,c
 46781  006562  0E02               	movlw	high _ARPEGGIO_SORTED
 46782  006564  20F4               	addwfc	prodh,w,c
 46783  006566  6EEA               	movwf	fsr0h,c
 46784  006568  50DE               	movf	postinc2,w,c
 46785  00656A  5CEE               	subwf	postinc0,w,c
 46786  00656C  B0D8               	btfsc	status,0,c
 46787  00656E  D026               	goto	i2l5486
 46788                           
 46789                           ;arpeggio.c: 244: a = ARPEGGIO_SORTED[i];
 46790  006570  500B               	movf	sort_pitches@i,w,c
 46791  006572  0D01               	mullw	1
 46792  006574  0E78               	movlw	low _ARPEGGIO_SORTED
 46793  006576  24F3               	addwf	prodl,w,c
 46794  006578  6ED9               	movwf	fsr2l,c
 46795  00657A  0E02               	movlw	high _ARPEGGIO_SORTED
 46796  00657C  20F4               	addwfc	prodh,w,c
 46797  00657E  6EDA               	movwf	fsr2h,c
 46798  006580  50DF               	movf	indf2,w,c
 46799  006582  6E09               	movwf	sort_pitches@a,c
 46800                           
 46801                           ;arpeggio.c: 245: ARPEGGIO_SORTED[i] = ARPEGGIO_SORTED[j];
 46802  006584  500A               	movf	sort_pitches@j,w,c
 46803  006586  0D01               	mullw	1
 46804  006588  0E78               	movlw	low _ARPEGGIO_SORTED
 46805  00658A  24F3               	addwf	prodl,w,c
 46806  00658C  6ED9               	movwf	fsr2l,c
 46807  00658E  0E02               	movlw	high _ARPEGGIO_SORTED
 46808  006590  20F4               	addwfc	prodh,w,c
 46809  006592  6EDA               	movwf	fsr2h,c
 46810  006594  500B               	movf	sort_pitches@i,w,c
 46811  006596  0D01               	mullw	1
 46812  006598  0E78               	movlw	low _ARPEGGIO_SORTED
 46813  00659A  24F3               	addwf	prodl,w,c
 46814  00659C  6EE9               	movwf	fsr0l,c
 46815  00659E  0E02               	movlw	high _ARPEGGIO_SORTED
 46816  0065A0  20F4               	addwfc	prodh,w,c
 46817  0065A2  6EEA               	movwf	fsr0h,c
 46818  0065A4  CFDF FFEF          	movff	indf2,indf0
 46819                           
 46820                           ;arpeggio.c: 246: ARPEGGIO_SORTED[j] = a;
 46821  0065A8  500A               	movf	sort_pitches@j,w,c
 46822  0065AA  0D01               	mullw	1
 46823  0065AC  0E78               	movlw	low _ARPEGGIO_SORTED
 46824  0065AE  24F3               	addwf	prodl,w,c
 46825  0065B0  6ED9               	movwf	fsr2l,c
 46826  0065B2  0E02               	movlw	high _ARPEGGIO_SORTED
 46827  0065B4  20F4               	addwfc	prodh,w,c
 46828  0065B6  6EDA               	movwf	fsr2h,c
 46829  0065B8  C009  FFDF         	movff	sort_pitches@a,indf2
 46830  0065BC                     i2l5486:
 46831  0065BC  2A0A               	incf	sort_pitches@j,f,c
 46832  0065BE                     i2l5481:
 46833  0065BE  502F               	movf	_NUM_NOTES_PRESSED,w,c
 46834  0065C0  5C0A               	subwf	sort_pitches@j,w,c
 46835  0065C2  A0D8               	btfss	status,0,c
 46836  0065C4  D783               	goto	i2l5482
 46837  0065C6  2A0B               	incf	sort_pitches@i,f,c
 46838  0065C8                     i2l5479:
 46839  0065C8  502F               	movf	_NUM_NOTES_PRESSED,w,c
 46840  0065CA  5C0B               	subwf	sort_pitches@i,w,c
 46841  0065CC  B0D8               	btfsc	status,0,c
 46842  0065CE  0012               	return	
 46843  0065D0  D77A               	goto	i2l5480
 46844  0065D2                     __end_of_sort_pitches:
 46845                           	opt stack 0
 46846                           tblptru	equ	0xFF8
 46847                           tblptrh	equ	0xFF7
 46848                           tblptrl	equ	0xFF6
 46849                           tablat	equ	0xFF5
 46850                           prodh	equ	0xFF4
 46851                           prodl	equ	0xFF3
 46852                           intcon	equ	0xFF2
 46853                           intcon2	equ	0xFF1
 46854                           indf0	equ	0xFEF
 46855                           postinc0	equ	0xFEE
 46856                           postdec0	equ	0xFED
 46857                           fsr0h	equ	0xFEA
 46858                           fsr0l	equ	0xFE9
 46859                           wreg	equ	0xFE8
 46860                           postinc1	equ	0xFE6
 46861                           postdec1	equ	0xFE5
 46862                           plusw1	equ	0xFE3
 46863                           fsr1h	equ	0xFE2
 46864                           fsr1l	equ	0xFE1
 46865                           indf2	equ	0xFDF
 46866                           postinc2	equ	0xFDE
 46867                           postdec2	equ	0xFDD
 46868                           plusw2	equ	0xFDB
 46869                           fsr2h	equ	0xFDA
 46870                           fsr2l	equ	0xFD9
 46871                           status	equ	0xFD8
 46872                           
 46873 ;; *************** function _encoderInputsBuxton *****************
 46874 ;; Defined at:
 46875 ;;		line 27 in file "encoder.c"
 46876 ;; Parameters:    Size  Location     Type
 46877 ;;		None
 46878 ;; Auto vars:     Size  Location     Type
 46879 ;;  pinstate        1    5[COMRAM] unsigned char 
 46880 ;;  tempB           1    4[COMRAM] unsigned char 
 46881 ;;  tempA           1    3[COMRAM] unsigned char 
 46882 ;; Return value:  Size  Location     Type
 46883 ;;                  1    wreg      void 
 46884 ;; Registers used:
 46885 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 46886 ;; Tracked objects:
 46887 ;;		On entry : 0/0
 46888 ;;		On exit  : 0/0
 46889 ;;		Unchanged: 0/0
 46890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46892 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46893 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46894 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46895 ;;Total ram usage:        6 bytes
 46896 ;; Hardware stack levels used:    1
 46897 ;; This function calls:
 46898 ;;		Nothing
 46899 ;; This function is called by:
 46900 ;;		_ISR
 46901 ;; This function uses a non-reentrant model
 46902 ;;
 46903                           
 46904                           	psect	text143
 46905  008674                     __ptext143:
 46906                           	opt stack 0
 46907  008674                     _encoderInputsBuxton:
 46908                           	opt stack 14
 46909                           
 46910                           ;encoder.c: 30: if(encoderPolarity == 0){
 46911                           
 46912                           ;incstack = 0
 46913  008674  B405               	btfsc	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 46914  008676  D006               	goto	i2l858
 46915                           
 46916                           ;encoder.c: 31: encoderA = RB5;
 46917  008678  8805               	bsf	_encoderA/(0+8),_encoderA& (0+7),c
 46918  00867A  AA81               	btfss	3969,5,c	;volatile
 46919  00867C  9805               	bcf	_encoderA/(0+8),_encoderA& (0+7),c
 46920                           
 46921                           ;encoder.c: 32: encoderB = RB4;
 46922  00867E  8605               	bsf	_encoderB/(0+8),_encoderB& (0+7),c
 46923  008680  A881               	btfss	3969,4,c	;volatile
 46924  008682  9605               	bcf	_encoderB/(0+8),_encoderB& (0+7),c
 46925  008684                     i2l858:
 46926                           
 46927                           ;encoder.c: 33: }
 46928                           ;encoder.c: 36: if(encoderPolarity == 1){
 46929  008684  A405               	btfss	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 46930  008686  D006               	goto	i2l859
 46931                           
 46932                           ;encoder.c: 37: encoderA = RB4;
 46933  008688  8805               	bsf	_encoderA/(0+8),_encoderA& (0+7),c
 46934  00868A  A881               	btfss	3969,4,c	;volatile
 46935  00868C  9805               	bcf	_encoderA/(0+8),_encoderA& (0+7),c
 46936                           
 46937                           ;encoder.c: 38: encoderB = RB5;
 46938  00868E  8605               	bsf	_encoderB/(0+8),_encoderB& (0+7),c
 46939  008690  AA81               	btfss	3969,5,c	;volatile
 46940  008692  9605               	bcf	_encoderB/(0+8),_encoderB& (0+7),c
 46941  008694                     i2l859:
 46942                           
 46943                           ;encoder.c: 39: }
 46944                           ;encoder.c: 42: unsigned char tempA = encoderA << 1;
 46945  008694  A805               	btfss	_encoderA/(0+8),_encoderA& (0+7),c
 46946  008696  D003               	goto	i2u3799_40
 46947  008698  6A07               	clrf	??_encoderInputsBuxton& (0+255),c
 46948  00869A  2A07               	incf	??_encoderInputsBuxton& (0+255),f,c
 46949  00869C  D001               	goto	i2u3800_48
 46950  00869E                     i2u3799_40:
 46951  00869E  6A07               	clrf	??_encoderInputsBuxton& (0+255),c
 46952  0086A0                     i2u3800_48:
 46953  0086A0  90D8               	bcf	status,0,c
 46954  0086A2  3407               	rlcf	??_encoderInputsBuxton,w,c
 46955  0086A4  6E0A               	movwf	encoderInputsBuxton@tempA,c
 46956                           
 46957                           ;encoder.c: 43: unsigned char tempB = encoderB;
 46958  0086A6  0E00               	movlw	0
 46959  0086A8  B605               	btfsc	_encoderB/(0+8),_encoderB& (0+7),c
 46960  0086AA  0E01               	movlw	1
 46961  0086AC  6E0B               	movwf	encoderInputsBuxton@tempB,c
 46962                           
 46963                           ;encoder.c: 44: unsigned char pinstate = tempA | tempB;
 46964  0086AE  500A               	movf	encoderInputsBuxton@tempA,w,c
 46965  0086B0  100B               	iorwf	encoderInputsBuxton@tempB,w,c
 46966  0086B2  6E0C               	movwf	encoderInputsBuxton@pinstate,c
 46967                           
 46968                           ;encoder.c: 46: state = ttable[state & 0xf][pinstate];
 46969  0086B4  C0ED  F007         	movff	_state,??_encoderInputsBuxton
 46970  0086B8  0E0F               	movlw	15
 46971  0086BA  1607               	andwf	??_encoderInputsBuxton,f,c
 46972  0086BC  5007               	movf	??_encoderInputsBuxton,w,c
 46973  0086BE  0D04               	mullw	4
 46974  0086C0  0E3D               	movlw	low _ttable
 46975  0086C2  6E08               	movwf	(??_encoderInputsBuxton+1)& (0+255),c
 46976  0086C4  0EF3               	movlw	high _ttable
 46977  0086C6  6E09               	movwf	(??_encoderInputsBuxton+2)& (0+255),c
 46978  0086C8  50F3               	movf	prodl,w,c
 46979  0086CA  2608               	addwf	??_encoderInputsBuxton+1,f,c
 46980  0086CC  50F4               	movf	prodh,w,c
 46981  0086CE  2209               	addwfc	??_encoderInputsBuxton+2,f,c
 46982  0086D0  500C               	movf	encoderInputsBuxton@pinstate,w,c
 46983  0086D2  0D01               	mullw	1
 46984  0086D4  50F3               	movf	prodl,w,c
 46985  0086D6  2608               	addwf	??_encoderInputsBuxton+1,f,c
 46986  0086D8  50F4               	movf	prodh,w,c
 46987  0086DA  2209               	addwfc	??_encoderInputsBuxton+2,f,c
 46988  0086DC  C008  FFF6         	movff	??_encoderInputsBuxton+1,tblptrl
 46989  0086E0  C009  FFF7         	movff	??_encoderInputsBuxton+2,tblptrh
 46990  0086E4                     	if	0	;tblptru may be non-zero
 46991  0086E4                     	endif
 46992  0086E4                     	if	0	;tblptru may be non-zero
 46993  0086E4                     	endif
 46994  0086E4  0008               	tblrd		*
 46995  0086E6  CFF5 F0ED          	movff	tablat,_state
 46996                           
 46997                           ;encoder.c: 47: encoder_direction = state & 0x30;
 46998  0086EA  0100               	movlb	0	; () banked
 46999  0086EC  51ED               	movf	_state& (0+255),w,b
 47000  0086EE  0B30               	andlw	48
 47001  0086F0  6E36               	movwf	_encoder_direction,c
 47002                           
 47003                           ; BSR set to: 0
 47004  0086F2  0012               	return		;funcret
 47005  0086F4                     __end_of_encoderInputsBuxton:
 47006                           	opt stack 0
 47007                           tblptru	equ	0xFF8
 47008                           tblptrh	equ	0xFF7
 47009                           tblptrl	equ	0xFF6
 47010                           tablat	equ	0xFF5
 47011                           prodh	equ	0xFF4
 47012                           prodl	equ	0xFF3
 47013                           intcon	equ	0xFF2
 47014                           intcon2	equ	0xFF1
 47015                           indf0	equ	0xFEF
 47016                           postinc0	equ	0xFEE
 47017                           postdec0	equ	0xFED
 47018                           fsr0h	equ	0xFEA
 47019                           fsr0l	equ	0xFE9
 47020                           wreg	equ	0xFE8
 47021                           postinc1	equ	0xFE6
 47022                           postdec1	equ	0xFE5
 47023                           plusw1	equ	0xFE3
 47024                           fsr1h	equ	0xFE2
 47025                           fsr1l	equ	0xFE1
 47026                           indf2	equ	0xFDF
 47027                           postinc2	equ	0xFDE
 47028                           postdec2	equ	0xFDD
 47029                           plusw2	equ	0xFDB
 47030                           fsr2h	equ	0xFDA
 47031                           fsr2l	equ	0xFD9
 47032                           status	equ	0xFD8
 47033                           
 47034 ;; *************** function _display *****************
 47035 ;; Defined at:
 47036 ;;		line 22 in file "segment.c"
 47037 ;; Parameters:    Size  Location     Type
 47038 ;;		None
 47039 ;; Auto vars:     Size  Location     Type
 47040 ;;		None
 47041 ;; Return value:  Size  Location     Type
 47042 ;;                  1    wreg      void 
 47043 ;; Registers used:
 47044 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh, cstack
 47045 ;; Tracked objects:
 47046 ;;		On entry : 0/0
 47047 ;;		On exit  : 0/0
 47048 ;;		Unchanged: 0/0
 47049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47054 ;;Total ram usage:        0 bytes
 47055 ;; Hardware stack levels used:    1
 47056 ;; Hardware stack levels required when called:    2
 47057 ;; This function calls:
 47058 ;;		_displayDigits
 47059 ;;		_displayString
 47060 ;; This function is called by:
 47061 ;;		_ISR
 47062 ;; This function uses a non-reentrant model
 47063 ;;
 47064                           
 47065                           	psect	text144
 47066  009972                     __ptext144:
 47067                           	opt stack 0
 47068  009972                     _display:
 47069                           	opt stack 12
 47070                           
 47071                           ;segment.c: 23: if (DISPLAY_MODE == 0) {displayDigits();}
 47072                           
 47073                           ; BSR set to: 0
 47074                           ;incstack = 0
 47075  009972  0100               	movlb	0	; () banked
 47076  009974  51EE               	movf	_DISPLAY_MODE& (0+255),w,b
 47077  009976  B4D8               	btfsc	status,2,c
 47078                           
 47079                           ; BSR set to: 0
 47080  009978  ECC1  F01C         	call	_displayDigits	;wreg free
 47081                           
 47082                           ;segment.c: 24: if (DISPLAY_MODE == 1) {displayString();}
 47083  00997C  0100               	movlb	0	; () banked
 47084  00997E  05EE               	decf	_DISPLAY_MODE& (0+255),w,b
 47085  009980  A4D8               	btfss	status,2,c
 47086  009982  0012               	return	
 47087                           
 47088                           ; BSR set to: 0
 47089  009984  ECE9  F032         	call	_displayString	;wreg free
 47090  009988  0012               	return	
 47091  00998A                     __end_of_display:
 47092                           	opt stack 0
 47093                           tblptru	equ	0xFF8
 47094                           tblptrh	equ	0xFF7
 47095                           tblptrl	equ	0xFF6
 47096                           tablat	equ	0xFF5
 47097                           prodh	equ	0xFF4
 47098                           prodl	equ	0xFF3
 47099                           intcon	equ	0xFF2
 47100                           intcon2	equ	0xFF1
 47101                           indf0	equ	0xFEF
 47102                           postinc0	equ	0xFEE
 47103                           postdec0	equ	0xFED
 47104                           fsr0h	equ	0xFEA
 47105                           fsr0l	equ	0xFE9
 47106                           wreg	equ	0xFE8
 47107                           postinc1	equ	0xFE6
 47108                           postdec1	equ	0xFE5
 47109                           plusw1	equ	0xFE3
 47110                           fsr1h	equ	0xFE2
 47111                           fsr1l	equ	0xFE1
 47112                           indf2	equ	0xFDF
 47113                           postinc2	equ	0xFDE
 47114                           postdec2	equ	0xFDD
 47115                           plusw2	equ	0xFDB
 47116                           fsr2h	equ	0xFDA
 47117                           fsr2l	equ	0xFD9
 47118                           status	equ	0xFD8
 47119                           
 47120 ;; *************** function _displayString *****************
 47121 ;; Defined at:
 47122 ;;		line 174 in file "segment.c"
 47123 ;; Parameters:    Size  Location     Type
 47124 ;;		None
 47125 ;; Auto vars:     Size  Location     Type
 47126 ;;  i               1    1[COMRAM] unsigned char 
 47127 ;; Return value:  Size  Location     Type
 47128 ;;                  1    wreg      void 
 47129 ;; Registers used:
 47130 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 47131 ;; Tracked objects:
 47132 ;;		On entry : 0/0
 47133 ;;		On exit  : 0/0
 47134 ;;		Unchanged: 0/0
 47135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47137 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47138 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47139 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47140 ;;Total ram usage:        2 bytes
 47141 ;; Hardware stack levels used:    1
 47142 ;; This function calls:
 47143 ;;		Nothing
 47144 ;; This function is called by:
 47145 ;;		_display
 47146 ;; This function uses a non-reentrant model
 47147 ;;
 47148                           
 47149                           	psect	text145
 47150  0065D2                     __ptext145:
 47151                           	opt stack 0
 47152  0065D2                     _displayString:
 47153                           	opt stack 13
 47154                           
 47155                           ;segment.c: 176: static unsigned char letter[4];
 47156                           ;segment.c: 177: static unsigned char letter_counter;
 47157                           ;segment.c: 180: for(unsigned char i=0;i<4;i++) {
 47158                           
 47159                           ;incstack = 0
 47160  0065D2  0E00               	movlw	0
 47161  0065D4  6E08               	movwf	displayString@i,c
 47162  0065D6                     i2l22924:
 47163  0065D6  0E03               	movlw	3
 47164  0065D8  6408               	cpfsgt	displayString@i,c
 47165  0065DA  D001               	goto	i2l3009
 47166  0065DC  D02A               	goto	i2u3733_40
 47167  0065DE                     i2l3009:
 47168                           
 47169                           ;segment.c: 181: if(string_to_display[i] > (unsigned char) 'z') {letter[i] = 'z';}
 47170  0065DE  5008               	movf	displayString@i,w,c
 47171  0065E0  0D01               	mullw	1
 47172  0065E2  0EF8               	movlw	low _string_to_display
 47173  0065E4  24F3               	addwf	prodl,w,c
 47174  0065E6  6ED9               	movwf	fsr2l,c
 47175  0065E8  0E01               	movlw	high _string_to_display
 47176  0065EA  20F4               	addwfc	prodh,w,c
 47177  0065EC  6EDA               	movwf	fsr2h,c
 47178  0065EE  0E7A               	movlw	122
 47179  0065F0  64DF               	cpfsgt	indf2,c
 47180  0065F2  D00A               	goto	i2l3011
 47181  0065F4  5008               	movf	displayString@i,w,c
 47182  0065F6  0D01               	mullw	1
 47183  0065F8  0E00               	movlw	low displayString@letter
 47184  0065FA  24F3               	addwf	prodl,w,c
 47185  0065FC  6ED9               	movwf	fsr2l,c
 47186  0065FE  0E01               	movlw	high displayString@letter
 47187  006600  20F4               	addwfc	prodh,w,c
 47188  006602  6EDA               	movwf	fsr2h,c
 47189  006604  0E7A               	movlw	122
 47190  006606  D012               	goto	L28
 47191  006608                     i2l3011:
 47192                           
 47193                           ;segment.c: 182: else letter[i] = string_to_display[i] - '0';
 47194  006608  5008               	movf	displayString@i,w,c
 47195  00660A  0D01               	mullw	1
 47196  00660C  0E00               	movlw	low displayString@letter
 47197  00660E  24F3               	addwf	prodl,w,c
 47198  006610  6ED9               	movwf	fsr2l,c
 47199  006612  0E01               	movlw	high displayString@letter
 47200  006614  20F4               	addwfc	prodh,w,c
 47201  006616  6EDA               	movwf	fsr2h,c
 47202  006618  5008               	movf	displayString@i,w,c
 47203  00661A  0D01               	mullw	1
 47204  00661C  0EF8               	movlw	low _string_to_display
 47205  00661E  24F3               	addwf	prodl,w,c
 47206  006620  6EE9               	movwf	fsr0l,c
 47207  006622  0E01               	movlw	high _string_to_display
 47208  006624  20F4               	addwfc	prodh,w,c
 47209  006626  6EEA               	movwf	fsr0h,c
 47210  006628  50EF               	movf	indf0,w,c
 47211  00662A  0FD0               	addlw	208
 47212  00662C                     L28:
 47213  00662C  6EDF               	movwf	indf2,c
 47214  00662E  2A08               	incf	displayString@i,f,c
 47215  006630  D7D2               	goto	i2l22924
 47216  006632                     i2u3733_40:
 47217                           
 47218                           ;segment.c: 183: }
 47219                           ;segment.c: 185: if(letter_counter == 0){
 47220  006632  0100               	movlb	0	; () banked
 47221  006634  51E8               	movf	displayString@letter_counter& (0+255),w,b
 47222  006636  A4D8               	btfss	status,2,c
 47223  006638  D00F               	goto	i2l3013
 47224                           
 47225                           ; BSR set to: 0
 47226                           ;segment.c: 187: PORTC &= 0xF0;
 47227  00663A  0EF0               	movlw	240
 47228  00663C  1682               	andwf	3970,f,c	;volatile
 47229                           
 47230                           ; BSR set to: 0
 47231                           ;segment.c: 190: PORTD = seg_ascii[letter[0]];
 47232  00663E  0101               	movlb	1	; () banked
 47233  006640  5100               	movf	displayString@letter& (0+255),w,b
 47234  006642  0D01               	mullw	1
 47235  006644  0E20               	movlw	low _seg_ascii
 47236  006646  24F3               	addwf	prodl,w,c
 47237  006648  6EF6               	movwf	tblptrl,c
 47238  00664A  0EF2               	movlw	high _seg_ascii
 47239  00664C  20F4               	addwfc	prodh,w,c
 47240  00664E  6EF7               	movwf	tblptrh,c
 47241  006650                     	if	0	;There are less than 3 active tblptr bytes
 47242  006650                     	endif
 47243  006650  0008               	tblrd		*
 47244  006652  CFF5 FF83          	movff	tablat,3971	;volatile
 47245                           
 47246                           ; BSR set to: 1
 47247                           ;segment.c: 192: PORTC |= 0x1;
 47248  006656  8082               	bsf	3970,0,c	;volatile
 47249  006658                     i2l3013:
 47250                           
 47251                           ;segment.c: 193: }
 47252                           ;segment.c: 194: if(letter_counter == 1){
 47253                           
 47254                           ; BSR set to: 1
 47255  006658  0100               	movlb	0	; () banked
 47256  00665A  05E8               	decf	displayString@letter_counter& (0+255),w,b
 47257  00665C  A4D8               	btfss	status,2,c
 47258  00665E  D00F               	goto	i2l3014
 47259                           
 47260                           ; BSR set to: 0
 47261                           ;segment.c: 196: PORTC &= 0xF0;
 47262  006660  0EF0               	movlw	240
 47263  006662  1682               	andwf	3970,f,c	;volatile
 47264                           
 47265                           ; BSR set to: 0
 47266                           ;segment.c: 198: PORTD = seg_ascii[letter[1]];
 47267  006664  0101               	movlb	1	; () banked
 47268  006666  5101               	movf	(displayString@letter+1)& (0+255),w,b
 47269  006668  0D01               	mullw	1
 47270  00666A  0E20               	movlw	low _seg_ascii
 47271  00666C  24F3               	addwf	prodl,w,c
 47272  00666E  6EF6               	movwf	tblptrl,c
 47273  006670  0EF2               	movlw	high _seg_ascii
 47274  006672  20F4               	addwfc	prodh,w,c
 47275  006674  6EF7               	movwf	tblptrh,c
 47276  006676                     	if	0	;There are less than 3 active tblptr bytes
 47277  006676                     	endif
 47278  006676  0008               	tblrd		*
 47279  006678  CFF5 FF83          	movff	tablat,3971	;volatile
 47280                           
 47281                           ; BSR set to: 1
 47282                           ;segment.c: 200: PORTC |= 0x2;
 47283  00667C  8282               	bsf	3970,1,c	;volatile
 47284  00667E                     i2l3014:
 47285                           
 47286                           ;segment.c: 201: }
 47287                           ;segment.c: 202: if(letter_counter == 2){
 47288                           
 47289                           ; BSR set to: 1
 47290  00667E  0E02               	movlw	2
 47291  006680  0100               	movlb	0	; () banked
 47292  006682  19E8               	xorwf	displayString@letter_counter& (0+255),w,b
 47293  006684  A4D8               	btfss	status,2,c
 47294  006686  D00F               	goto	i2l3015
 47295                           
 47296                           ; BSR set to: 0
 47297                           ;segment.c: 204: PORTC &= 0xF0;
 47298  006688  0EF0               	movlw	240
 47299  00668A  1682               	andwf	3970,f,c	;volatile
 47300                           
 47301                           ; BSR set to: 0
 47302                           ;segment.c: 206: PORTD = seg_ascii[letter[2]];
 47303  00668C  0101               	movlb	1	; () banked
 47304  00668E  5102               	movf	(displayString@letter+2)& (0+255),w,b
 47305  006690  0D01               	mullw	1
 47306  006692  0E20               	movlw	low _seg_ascii
 47307  006694  24F3               	addwf	prodl,w,c
 47308  006696  6EF6               	movwf	tblptrl,c
 47309  006698  0EF2               	movlw	high _seg_ascii
 47310  00669A  20F4               	addwfc	prodh,w,c
 47311  00669C  6EF7               	movwf	tblptrh,c
 47312  00669E                     	if	0	;There are less than 3 active tblptr bytes
 47313  00669E                     	endif
 47314  00669E  0008               	tblrd		*
 47315  0066A0  CFF5 FF83          	movff	tablat,3971	;volatile
 47316                           
 47317                           ; BSR set to: 1
 47318                           ;segment.c: 208: PORTC |= 0x4;
 47319  0066A4  8482               	bsf	3970,2,c	;volatile
 47320  0066A6                     i2l3015:
 47321                           
 47322                           ;segment.c: 209: }
 47323                           ;segment.c: 210: if(letter_counter == 3){
 47324                           
 47325                           ; BSR set to: 1
 47326  0066A6  0E03               	movlw	3
 47327  0066A8  0100               	movlb	0	; () banked
 47328  0066AA  19E8               	xorwf	displayString@letter_counter& (0+255),w,b
 47329  0066AC  A4D8               	btfss	status,2,c
 47330  0066AE  D00F               	goto	i2l3016
 47331                           
 47332                           ; BSR set to: 0
 47333                           ;segment.c: 212: PORTC &= 0xF0;
 47334  0066B0  0EF0               	movlw	240
 47335  0066B2  1682               	andwf	3970,f,c	;volatile
 47336                           
 47337                           ; BSR set to: 0
 47338                           ;segment.c: 214: PORTD = seg_ascii[letter[3]];
 47339  0066B4  0101               	movlb	1	; () banked
 47340  0066B6  5103               	movf	(displayString@letter+3)& (0+255),w,b
 47341  0066B8  0D01               	mullw	1
 47342  0066BA  0E20               	movlw	low _seg_ascii
 47343  0066BC  24F3               	addwf	prodl,w,c
 47344  0066BE  6EF6               	movwf	tblptrl,c
 47345  0066C0  0EF2               	movlw	high _seg_ascii
 47346  0066C2  20F4               	addwfc	prodh,w,c
 47347  0066C4  6EF7               	movwf	tblptrh,c
 47348  0066C6                     	if	0	;There are less than 3 active tblptr bytes
 47349  0066C6                     	endif
 47350  0066C6  0008               	tblrd		*
 47351  0066C8  CFF5 FF83          	movff	tablat,3971	;volatile
 47352                           
 47353                           ; BSR set to: 1
 47354                           ;segment.c: 216: PORTC |= 0x8;
 47355  0066CC  8682               	bsf	3970,3,c	;volatile
 47356  0066CE                     i2l3016:
 47357                           
 47358                           ;segment.c: 217: }
 47359                           ;segment.c: 220: letter_counter++;
 47360                           
 47361                           ; BSR set to: 1
 47362  0066CE  0100               	movlb	0	; () banked
 47363  0066D0  2BE8               	incf	displayString@letter_counter& (0+255),f,b
 47364                           
 47365                           ; BSR set to: 0
 47366                           ;segment.c: 222: if(letter_counter > 3){letter_counter = 0;}
 47367  0066D2  0E03               	movlw	3
 47368  0066D4  65E8               	cpfsgt	displayString@letter_counter& (0+255),b
 47369  0066D6  0012               	return	
 47370                           
 47371                           ; BSR set to: 0
 47372  0066D8  0E00               	movlw	0
 47373  0066DA  6FE8               	movwf	displayString@letter_counter& (0+255),b
 47374  0066DC  0012               	return	
 47375  0066DE                     __end_of_displayString:
 47376                           	opt stack 0
 47377                           tblptru	equ	0xFF8
 47378                           tblptrh	equ	0xFF7
 47379                           tblptrl	equ	0xFF6
 47380                           tablat	equ	0xFF5
 47381                           prodh	equ	0xFF4
 47382                           prodl	equ	0xFF3
 47383                           intcon	equ	0xFF2
 47384                           intcon2	equ	0xFF1
 47385                           indf0	equ	0xFEF
 47386                           postinc0	equ	0xFEE
 47387                           postdec0	equ	0xFED
 47388                           fsr0h	equ	0xFEA
 47389                           fsr0l	equ	0xFE9
 47390                           wreg	equ	0xFE8
 47391                           postinc1	equ	0xFE6
 47392                           postdec1	equ	0xFE5
 47393                           plusw1	equ	0xFE3
 47394                           fsr1h	equ	0xFE2
 47395                           fsr1l	equ	0xFE1
 47396                           indf2	equ	0xFDF
 47397                           postinc2	equ	0xFDE
 47398                           postdec2	equ	0xFDD
 47399                           plusw2	equ	0xFDB
 47400                           fsr2h	equ	0xFDA
 47401                           fsr2l	equ	0xFD9
 47402                           status	equ	0xFD8
 47403                           
 47404 ;; *************** function _displayDigits *****************
 47405 ;; Defined at:
 47406 ;;		line 55 in file "segment.c"
 47407 ;; Parameters:    Size  Location     Type
 47408 ;;		None
 47409 ;; Auto vars:     Size  Location     Type
 47410 ;;  highByte        1    4[COMRAM] unsigned char 
 47411 ;;  lowByte         1    3[COMRAM] unsigned char 
 47412 ;; Return value:  Size  Location     Type
 47413 ;;                  1    wreg      void 
 47414 ;; Registers used:
 47415 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prod
      +l, prodh
 47416 ;; Tracked objects:
 47417 ;;		On entry : 0/0
 47418 ;;		On exit  : 0/0
 47419 ;;		Unchanged: 0/0
 47420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47422 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47423 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47424 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47425 ;;Total ram usage:        5 bytes
 47426 ;; Hardware stack levels used:    1
 47427 ;; Hardware stack levels required when called:    1
 47428 ;; This function calls:
 47429 ;;		___awdiv
 47430 ;;		___awmod
 47431 ;; This function is called by:
 47432 ;;		_display
 47433 ;; This function uses a non-reentrant model
 47434 ;;
 47435                           
 47436                           	psect	text146
 47437  003982                     __ptext146:
 47438                           	opt stack 0
 47439  003982                     _displayDigits:
 47440                           	opt stack 12
 47441                           
 47442                           ;segment.c: 61: static unsigned char digit[4];
 47443                           ;segment.c: 62: static unsigned char digit_counter;
 47444                           ;segment.c: 63: static signed int number_to_display_last;
 47445                           ;segment.c: 64: static signed int number_to_display_temp;
 47446                           ;segment.c: 67: if(number_to_display != number_to_display_last){
 47447                           
 47448                           ; BSR set to: 0
 47449                           ;incstack = 0
 47450  003982  0101               	movlb	1	; () banked
 47451  003984  5179               	movf	displayDigits@number_to_display_last& (0+255),w,b
 47452  003986  184B               	xorwf	_number_to_display,w,c
 47453  003988  E104               	bnz	i2u5937_40
 47454  00398A  517A               	movf	(displayDigits@number_to_display_last+1)& (0+255),w,b
 47455  00398C  184C               	xorwf	_number_to_display+1,w,c
 47456  00398E  B4D8               	btfsc	status,2,c
 47457  003990  D0B7               	goto	i2l2970
 47458  003992                     i2u5937_40:
 47459                           
 47460                           ; BSR set to: 1
 47461                           ;segment.c: 69: if(DIGIT_MODE == 0) {
 47462  003992  503A               	movf	_DIGIT_MODE,w,c
 47463  003994  A4D8               	btfss	status,2,c
 47464  003996  D066               	goto	i2l2971
 47465                           
 47466                           ; BSR set to: 1
 47467                           ;segment.c: 71: if(number_to_display >= 0){number_to_display_temp = number_to_display;}
 47468  003998  BE4C               	btfsc	_number_to_display+1,7,c
 47469  00399A  D004               	goto	i2l2972
 47470                           
 47471                           ; BSR set to: 1
 47472  00399C  C04B  F177         	movff	_number_to_display,displayDigits@number_to_display_temp
 47473  0039A0  C04C  F178         	movff	_number_to_display+1,displayDigits@number_to_display_temp+1
 47474  0039A4                     i2l2972:
 47475                           
 47476                           ; BSR set to: 1
 47477                           ;segment.c: 72: if(number_to_display < 0){number_to_display_temp = 0 - number_to_display
      +                          ;}
 47478                           
 47479                           ; BSR set to: 1
 47480  0039A4  AE4C               	btfss	_number_to_display+1,7,c
 47481  0039A6  D00C               	goto	i2l2973
 47482                           
 47483                           ; BSR set to: 1
 47484  0039A8  C04B  F007         	movff	_number_to_display,??_displayDigits
 47485  0039AC  C04C  F008         	movff	_number_to_display+1,??_displayDigits+1
 47486  0039B0  1E07               	comf	??_displayDigits,f,c
 47487  0039B2  1E08               	comf	??_displayDigits+1,f,c
 47488  0039B4  4A07               	infsnz	??_displayDigits,f,c
 47489  0039B6  2A08               	incf	??_displayDigits+1,f,c
 47490  0039B8  C007  F177         	movff	??_displayDigits,displayDigits@number_to_display_temp
 47491  0039BC  C008  F178         	movff	??_displayDigits+1,displayDigits@number_to_display_temp+1
 47492  0039C0                     i2l2973:
 47493                           
 47494                           ; BSR set to: 1
 47495                           ;segment.c: 74: digit[0] = (number_to_display_temp / 1000) % 10;
 47496                           
 47497                           ; BSR set to: 1
 47498  0039C0  0E0A               	movlw	10
 47499  0039C2  6EE6               	movwf	postinc1,c
 47500  0039C4  0E00               	movlw	0
 47501  0039C6  6EE6               	movwf	postinc1,c
 47502  0039C8  0EE8               	movlw	232
 47503  0039CA  6EE6               	movwf	postinc1,c
 47504  0039CC  0E03               	movlw	3
 47505  0039CE  6EE6               	movwf	postinc1,c
 47506  0039D0  C177  FFE6         	movff	displayDigits@number_to_display_temp,postinc1
 47507  0039D4  C178  FFE6         	movff	displayDigits@number_to_display_temp+1,postinc1
 47508  0039D8  EC9E  F030         	call	___awdiv	;wreg free
 47509  0039DC  C03F  FFE6         	movff	btemp,postinc1
 47510  0039E0  C040  FFE6         	movff	btemp+1,postinc1
 47511  0039E4  EC74  F034         	call	___awmod	;wreg free
 47512  0039E8  503F               	movf	btemp,w,c
 47513  0039EA  0100               	movlb	0	; () banked
 47514  0039EC  6FCC               	movwf	displayDigits@digit& (0+255),b
 47515                           
 47516                           ;segment.c: 75: digit[1] = (number_to_display_temp / 100) % 10;
 47517  0039EE  0E0A               	movlw	10
 47518  0039F0  6EE6               	movwf	postinc1,c
 47519  0039F2  0E00               	movlw	0
 47520  0039F4  6EE6               	movwf	postinc1,c
 47521  0039F6  0E64               	movlw	100
 47522  0039F8  6EE6               	movwf	postinc1,c
 47523  0039FA  0E00               	movlw	0
 47524  0039FC  6EE6               	movwf	postinc1,c
 47525  0039FE  C177  FFE6         	movff	displayDigits@number_to_display_temp,postinc1
 47526  003A02  C178  FFE6         	movff	displayDigits@number_to_display_temp+1,postinc1
 47527  003A06  EC9E  F030         	call	___awdiv	;wreg free
 47528  003A0A  C03F  FFE6         	movff	btemp,postinc1
 47529  003A0E  C040  FFE6         	movff	btemp+1,postinc1
 47530  003A12  EC74  F034         	call	___awmod	;wreg free
 47531  003A16  503F               	movf	btemp,w,c
 47532  003A18  0100               	movlb	0	; () banked
 47533  003A1A  6FCD               	movwf	(displayDigits@digit+1)& (0+255),b
 47534                           
 47535                           ;segment.c: 76: digit[2] = (number_to_display_temp / 10) % 10;
 47536  003A1C  0E0A               	movlw	10
 47537  003A1E  6EE6               	movwf	postinc1,c
 47538  003A20  0E00               	movlw	0
 47539  003A22  6EE6               	movwf	postinc1,c
 47540  003A24  0E0A               	movlw	10
 47541  003A26  6EE6               	movwf	postinc1,c
 47542  003A28  0E00               	movlw	0
 47543  003A2A  6EE6               	movwf	postinc1,c
 47544  003A2C  C177  FFE6         	movff	displayDigits@number_to_display_temp,postinc1
 47545  003A30  C178  FFE6         	movff	displayDigits@number_to_display_temp+1,postinc1
 47546  003A34  EC9E  F030         	call	___awdiv	;wreg free
 47547  003A38  C03F  FFE6         	movff	btemp,postinc1
 47548  003A3C  C040  FFE6         	movff	btemp+1,postinc1
 47549  003A40  EC74  F034         	call	___awmod	;wreg free
 47550  003A44  503F               	movf	btemp,w,c
 47551  003A46  0100               	movlb	0	; () banked
 47552  003A48  6FCE               	movwf	(displayDigits@digit+2)& (0+255),b
 47553                           
 47554                           ;segment.c: 77: digit[3] = number_to_display_temp % 10;
 47555  003A4A  0E0A               	movlw	10
 47556  003A4C  6EE6               	movwf	postinc1,c
 47557  003A4E  0E00               	movlw	0
 47558  003A50  6EE6               	movwf	postinc1,c
 47559  003A52  C177  FFE6         	movff	displayDigits@number_to_display_temp,postinc1
 47560  003A56  C178  FFE6         	movff	displayDigits@number_to_display_temp+1,postinc1
 47561  003A5A  EC74  F034         	call	___awmod	;wreg free
 47562  003A5E  503F               	movf	btemp,w,c
 47563  003A60  0100               	movlb	0	; () banked
 47564  003A62  6FCF               	movwf	(displayDigits@digit+3)& (0+255),b
 47565  003A64                     i2l2971:
 47566                           
 47567                           ;segment.c: 78: }
 47568                           ;segment.c: 80: if(DIGIT_MODE == 1) {
 47569                           
 47570                           ; BSR set to: 0
 47571  003A64  043A               	decf	_DIGIT_MODE,w,c
 47572  003A66  A4D8               	btfss	status,2,c
 47573  003A68  D023               	goto	i2l2974
 47574                           
 47575                           ;segment.c: 81: digit[0] = (number_to_display >> 12) % 16;
 47576  003A6A  C04B  F007         	movff	_number_to_display,??_displayDigits
 47577  003A6E  C04C  F008         	movff	_number_to_display+1,??_displayDigits+1
 47578  003A72  0E0C               	movlw	12
 47579  003A74  6E09               	movwf	(??_displayDigits+2)& (0+255),c
 47580  003A76                     i2u5942_45:
 47581  003A76  3408               	rlcf	??_displayDigits+1,w,c
 47582  003A78  3208               	rrcf	??_displayDigits+1,f,c
 47583  003A7A  3207               	rrcf	??_displayDigits,f,c
 47584  003A7C  2E09               	decfsz	(??_displayDigits+2)& (0+255),f,c
 47585  003A7E  D7FB               	goto	i2u5942_45
 47586  003A80  5007               	movf	??_displayDigits,w,c
 47587  003A82  0B0F               	andlw	15
 47588  003A84  0100               	movlb	0	; () banked
 47589  003A86  6FCC               	movwf	displayDigits@digit& (0+255),b
 47590                           
 47591                           ;segment.c: 82: digit[1] = (number_to_display >> 8) % 16;
 47592  003A88  504C               	movf	_number_to_display+1,w,c
 47593  003A8A  0B0F               	andlw	15
 47594  003A8C  6FCD               	movwf	(displayDigits@digit+1)& (0+255),b
 47595                           
 47596                           ;segment.c: 83: digit[2] = (number_to_display >> 4) % 16;
 47597  003A8E  C04B  F007         	movff	_number_to_display,??_displayDigits
 47598  003A92  C04C  F008         	movff	_number_to_display+1,??_displayDigits+1
 47599  003A96  0E04               	movlw	4
 47600  003A98  6E09               	movwf	(??_displayDigits+2)& (0+255),c
 47601  003A9A                     i2u5943_45:
 47602  003A9A  3408               	rlcf	??_displayDigits+1,w,c
 47603  003A9C  3208               	rrcf	??_displayDigits+1,f,c
 47604  003A9E  3207               	rrcf	??_displayDigits,f,c
 47605  003AA0  2E09               	decfsz	(??_displayDigits+2)& (0+255),f,c
 47606  003AA2  D7FB               	goto	i2u5943_45
 47607  003AA4  5007               	movf	??_displayDigits,w,c
 47608  003AA6  0B0F               	andlw	15
 47609  003AA8  6FCE               	movwf	(displayDigits@digit+2)& (0+255),b
 47610                           
 47611                           ;segment.c: 84: digit[3] = number_to_display % 16;
 47612  003AAA  504B               	movf	_number_to_display,w,c
 47613  003AAC  0B0F               	andlw	15
 47614  003AAE  6FCF               	movwf	(displayDigits@digit+3)& (0+255),b
 47615  003AB0                     i2l2974:
 47616                           
 47617                           ;segment.c: 85: }
 47618                           ;segment.c: 87: if(DIGIT_MODE == 2) {
 47619  003AB0  0E02               	movlw	2
 47620  003AB2  183A               	xorwf	_DIGIT_MODE,w,c
 47621  003AB4  A4D8               	btfss	status,2,c
 47622  003AB6  D020               	goto	i2l2975
 47623                           
 47624                           ;segment.c: 89: unsigned char lowByte = number_to_display & 0x7F;
 47625  003AB8  504B               	movf	_number_to_display,w,c
 47626  003ABA  0B7F               	andlw	127
 47627  003ABC  6E0A               	movwf	displayDigits@lowByte,c
 47628                           
 47629                           ;segment.c: 90: unsigned char highByte = (number_to_display >> 7) & 0x7F;
 47630  003ABE  C04B  F007         	movff	_number_to_display,??_displayDigits
 47631  003AC2  C04C  F008         	movff	_number_to_display+1,??_displayDigits+1
 47632  003AC6  0E07               	movlw	7
 47633  003AC8  6E09               	movwf	(??_displayDigits+2)& (0+255),c
 47634  003ACA                     i2u5945_45:
 47635  003ACA  3408               	rlcf	??_displayDigits+1,w,c
 47636  003ACC  3208               	rrcf	??_displayDigits+1,f,c
 47637  003ACE  3207               	rrcf	??_displayDigits,f,c
 47638  003AD0  2E09               	decfsz	(??_displayDigits+2)& (0+255),f,c
 47639  003AD2  D7FB               	goto	i2u5945_45
 47640  003AD4  5007               	movf	??_displayDigits,w,c
 47641  003AD6  0B7F               	andlw	127
 47642  003AD8  6E0B               	movwf	displayDigits@highByte,c
 47643                           
 47644                           ;segment.c: 92: digit[0] = (highByte >> 4) % 0x8;
 47645  003ADA  380B               	swapf	displayDigits@highByte,w,c
 47646  003ADC  0B0F               	andlw	15
 47647  003ADE  0B07               	andlw	7
 47648  003AE0  0100               	movlb	0	; () banked
 47649  003AE2  6FCC               	movwf	displayDigits@digit& (0+255),b
 47650                           
 47651                           ;segment.c: 93: digit[1] = highByte % 16;
 47652  003AE4  500B               	movf	displayDigits@highByte,w,c
 47653  003AE6  0B0F               	andlw	15
 47654  003AE8  6FCD               	movwf	(displayDigits@digit+1)& (0+255),b
 47655                           
 47656                           ;segment.c: 94: digit[2] = (lowByte >> 4) % 0x8;
 47657  003AEA  380A               	swapf	displayDigits@lowByte,w,c
 47658  003AEC  0B0F               	andlw	15
 47659  003AEE  0B07               	andlw	7
 47660  003AF0  6FCE               	movwf	(displayDigits@digit+2)& (0+255),b
 47661                           
 47662                           ;segment.c: 95: digit[3] = lowByte % 16;
 47663  003AF2  500A               	movf	displayDigits@lowByte,w,c
 47664  003AF4  0B0F               	andlw	15
 47665  003AF6  6FCF               	movwf	(displayDigits@digit+3)& (0+255),b
 47666  003AF8                     i2l2975:
 47667                           
 47668                           ;segment.c: 97: }
 47669                           ;segment.c: 100: number_to_display_last = number_to_display;
 47670                           
 47671                           ; BSR set to: 0
 47672  003AF8  C04B  F179         	movff	_number_to_display,displayDigits@number_to_display_last
 47673  003AFC  C04C  F17A         	movff	_number_to_display+1,displayDigits@number_to_display_last+1
 47674  003B00                     i2l2970:
 47675                           
 47676                           ;segment.c: 101: }
 47677                           ;segment.c: 106: if (DIGIT_MODE == 0 || DIGIT_MODE == 1 || DIGIT_MODE == 2) {
 47678  003B00  503A               	movf	_DIGIT_MODE,w,c
 47679  003B02  B4D8               	btfsc	status,2,c
 47680  003B04  D007               	goto	i2u5948_40
 47681  003B06  043A               	decf	_DIGIT_MODE,w,c
 47682  003B08  B4D8               	btfsc	status,2,c
 47683  003B0A  D004               	goto	i2u5948_40
 47684  003B0C  0E02               	movlw	2
 47685  003B0E  183A               	xorwf	_DIGIT_MODE,w,c
 47686  003B10  A4D8               	btfss	status,2,c
 47687  003B12  D08B               	goto	i2l2999
 47688  003B14                     i2u5948_40:
 47689                           
 47690                           ;segment.c: 111: if(digit_counter == 0){
 47691  003B14  0100               	movlb	0	; () banked
 47692  003B16  51E9               	movf	displayDigits@digit_counter& (0+255),w,b
 47693  003B18  A4D8               	btfss	status,2,c
 47694  003B1A  D022               	goto	i2l2986
 47695                           
 47696                           ; BSR set to: 0
 47697                           ;segment.c: 112: RC3 = 0;
 47698  003B1C  9682               	bcf	3970,3,c	;volatile
 47699                           
 47700                           ; BSR set to: 0
 47701                           ;segment.c: 116: if(DIGIT_MODE == 0 && number_to_display < 0){
 47702  003B1E  503A               	movf	_DIGIT_MODE,w,c
 47703  003B20  B4D8               	btfsc	status,2,c
 47704                           
 47705                           ; BSR set to: 0
 47706  003B22  AE4C               	btfss	_number_to_display+1,7,c
 47707  003B24  D00A               	goto	i2l2980
 47708                           
 47709                           ; BSR set to: 0
 47710                           ;segment.c: 119: if(digit[1] > 0){PORTD = 0x40; RC0 = 1;}
 47711  003B26  51CD               	movf	(displayDigits@digit+1)& (0+255),w,b
 47712  003B28  B4D8               	btfsc	status,2,c
 47713  003B2A  D003               	goto	i2l2981
 47714                           
 47715                           ; BSR set to: 0
 47716  003B2C  0E40               	movlw	64
 47717  003B2E  6E83               	movwf	3971,c	;volatile
 47718                           
 47719                           ; BSR set to: 0
 47720  003B30  8082               	bsf	3970,0,c	;volatile
 47721  003B32                     i2l2981:
 47722                           
 47723                           ; BSR set to: 0
 47724                           ;segment.c: 120: if(light_decimal_points == 1){PORTD |= 0x80;}
 47725                           
 47726                           ; BSR set to: 0
 47727  003B32  A006               	btfss	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 47728  003B34  D015               	goto	i2l2986
 47729                           
 47730                           ; BSR set to: 0
 47731  003B36  8E83               	bsf	3971,7,c	;volatile
 47732                           
 47733                           ; BSR set to: 0
 47734                           ;segment.c: 121: }
 47735  003B38  D013               	goto	i2l2986
 47736  003B3A                     i2l2980:
 47737                           
 47738                           ; BSR set to: 0
 47739                           ;segment.c: 123: else {
 47740                           ;segment.c: 124: PORTD = seg_bcd_hex[digit[0]];
 47741                           
 47742                           ; BSR set to: 0
 47743  003B3A  51CC               	movf	displayDigits@digit& (0+255),w,b
 47744  003B3C  0D01               	mullw	1
 47745  003B3E  0E59               	movlw	low _seg_bcd_hex
 47746  003B40  24F3               	addwf	prodl,w,c
 47747  003B42  6EF6               	movwf	tblptrl,c
 47748  003B44  0EF3               	movlw	high _seg_bcd_hex
 47749  003B46  20F4               	addwfc	prodh,w,c
 47750  003B48  6EF7               	movwf	tblptrh,c
 47751  003B4A                     	if	0	;There are less than 3 active tblptr bytes
 47752  003B4A                     	endif
 47753  003B4A  0008               	tblrd		*
 47754  003B4C  CFF5 FF83          	movff	tablat,3971	;volatile
 47755                           
 47756                           ; BSR set to: 0
 47757                           ;segment.c: 125: if(light_decimal_points == 1){PORTD |= 0x80;}
 47758  003B50  B006               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 47759                           
 47760                           ; BSR set to: 0
 47761  003B52  8E83               	bsf	3971,7,c	;volatile
 47762                           
 47763                           ; BSR set to: 0
 47764                           ;segment.c: 126: if(digit[0] == 0){RC0 = 0;}
 47765                           
 47766                           ; BSR set to: 0
 47767  003B54  51CC               	movf	displayDigits@digit& (0+255),w,b
 47768  003B56  A4D8               	btfss	status,2,c
 47769  003B58  D002               	goto	i2l2985
 47770                           
 47771                           ; BSR set to: 0
 47772  003B5A  9082               	bcf	3970,0,c	;volatile
 47773  003B5C  D001               	goto	i2l2986
 47774  003B5E                     i2l2985:
 47775                           
 47776                           ; BSR set to: 0
 47777                           ;segment.c: 127: else{RC0 = 1;}
 47778  003B5E  8082               	bsf	3970,0,c	;volatile
 47779  003B60                     i2l2986:
 47780                           
 47781                           ; BSR set to: 0
 47782                           ;segment.c: 128: }
 47783                           ;segment.c: 129: }
 47784                           ;segment.c: 130: if(digit_counter == 1){
 47785                           
 47786                           ; BSR set to: 0
 47787                           
 47788                           ; BSR set to: 0
 47789                           
 47790                           ; BSR set to: 0
 47791  003B60  05E9               	decf	displayDigits@digit_counter& (0+255),w,b
 47792  003B62  A4D8               	btfss	status,2,c
 47793  003B64  D024               	goto	i2l2992
 47794                           
 47795                           ; BSR set to: 0
 47796                           ;segment.c: 131: RC0 = 0;
 47797  003B66  9082               	bcf	3970,0,c	;volatile
 47798                           
 47799                           ; BSR set to: 0
 47800                           ;segment.c: 134: PORTD = seg_bcd_hex[digit[1]];
 47801  003B68  51CD               	movf	(displayDigits@digit+1)& (0+255),w,b
 47802  003B6A  0D01               	mullw	1
 47803  003B6C  0E59               	movlw	low _seg_bcd_hex
 47804  003B6E  24F3               	addwf	prodl,w,c
 47805  003B70  6EF6               	movwf	tblptrl,c
 47806  003B72  0EF3               	movlw	high _seg_bcd_hex
 47807  003B74  20F4               	addwfc	prodh,w,c
 47808  003B76  6EF7               	movwf	tblptrh,c
 47809  003B78                     	if	0	;There are less than 3 active tblptr bytes
 47810  003B78                     	endif
 47811  003B78  0008               	tblrd		*
 47812  003B7A  CFF5 FF83          	movff	tablat,3971	;volatile
 47813                           
 47814                           ; BSR set to: 0
 47815                           ;segment.c: 135: if(light_decimal_points == 1){PORTD |= 0x80;}
 47816  003B7E  B006               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 47817                           
 47818                           ; BSR set to: 0
 47819  003B80  8E83               	bsf	3971,7,c	;volatile
 47820                           
 47821                           ; BSR set to: 0
 47822                           ;segment.c: 136: if(digit[0] == 0 && digit[1] == 0){RC1 = 0;}
 47823                           
 47824                           ; BSR set to: 0
 47825  003B82  51CC               	movf	displayDigits@digit& (0+255),w,b
 47826  003B84  A4D8               	btfss	status,2,c
 47827  003B86  D005               	goto	i2l2989
 47828                           
 47829                           ; BSR set to: 0
 47830  003B88  51CD               	movf	(displayDigits@digit+1)& (0+255),w,b
 47831  003B8A  A4D8               	btfss	status,2,c
 47832  003B8C  D002               	goto	i2l2989
 47833                           
 47834                           ; BSR set to: 0
 47835  003B8E  9282               	bcf	3970,1,c	;volatile
 47836  003B90  D001               	goto	i2l2990
 47837  003B92                     i2l2989:
 47838                           
 47839                           ; BSR set to: 0
 47840                           ;segment.c: 137: else{RC1 = 1;}
 47841  003B92  8282               	bsf	3970,1,c	;volatile
 47842  003B94                     i2l2990:
 47843                           
 47844                           ; BSR set to: 0
 47845                           ;segment.c: 139: if(DIGIT_MODE == 0 && number_to_display < 0){
 47846                           
 47847                           ; BSR set to: 0
 47848  003B94  503A               	movf	_DIGIT_MODE,w,c
 47849  003B96  B4D8               	btfsc	status,2,c
 47850                           
 47851                           ; BSR set to: 0
 47852  003B98  AE4C               	btfss	_number_to_display+1,7,c
 47853  003B9A  D009               	goto	i2l2992
 47854                           
 47855                           ; BSR set to: 0
 47856                           ;segment.c: 141: if(digit[2] > 0 && digit[1] == 0){PORTD = 0x40; RC1 = 1;}
 47857  003B9C  51CE               	movf	(displayDigits@digit+2)& (0+255),w,b
 47858  003B9E  B4D8               	btfsc	status,2,c
 47859  003BA0  D006               	goto	i2l2992
 47860                           
 47861                           ; BSR set to: 0
 47862  003BA2  51CD               	movf	(displayDigits@digit+1)& (0+255),w,b
 47863  003BA4  A4D8               	btfss	status,2,c
 47864  003BA6  D003               	goto	i2l2992
 47865                           
 47866                           ; BSR set to: 0
 47867  003BA8  0E40               	movlw	64
 47868  003BAA  6E83               	movwf	3971,c	;volatile
 47869                           
 47870                           ; BSR set to: 0
 47871  003BAC  8282               	bsf	3970,1,c	;volatile
 47872  003BAE                     i2l2992:
 47873                           
 47874                           ; BSR set to: 0
 47875                           ;segment.c: 142: }
 47876                           ;segment.c: 143: }
 47877                           ;segment.c: 144: if(digit_counter == 2){
 47878                           
 47879                           ; BSR set to: 0
 47880                           
 47881                           ; BSR set to: 0
 47882                           
 47883                           ; BSR set to: 0
 47884  003BAE  0E02               	movlw	2
 47885  003BB0  19E9               	xorwf	displayDigits@digit_counter& (0+255),w,b
 47886  003BB2  A4D8               	btfss	status,2,c
 47887  003BB4  D027               	goto	i2l2998
 47888                           
 47889                           ; BSR set to: 0
 47890                           ;segment.c: 145: RC1 = 0;
 47891  003BB6  9282               	bcf	3970,1,c	;volatile
 47892                           
 47893                           ; BSR set to: 0
 47894                           ;segment.c: 148: PORTD = seg_bcd_hex[digit[2]];
 47895  003BB8  51CE               	movf	(displayDigits@digit+2)& (0+255),w,b
 47896  003BBA  0D01               	mullw	1
 47897  003BBC  0E59               	movlw	low _seg_bcd_hex
 47898  003BBE  24F3               	addwf	prodl,w,c
 47899  003BC0  6EF6               	movwf	tblptrl,c
 47900  003BC2  0EF3               	movlw	high _seg_bcd_hex
 47901  003BC4  20F4               	addwfc	prodh,w,c
 47902  003BC6  6EF7               	movwf	tblptrh,c
 47903  003BC8                     	if	0	;There are less than 3 active tblptr bytes
 47904  003BC8                     	endif
 47905  003BC8  0008               	tblrd		*
 47906  003BCA  CFF5 FF83          	movff	tablat,3971	;volatile
 47907                           
 47908                           ; BSR set to: 0
 47909                           ;segment.c: 149: if(light_decimal_points == 1){PORTD |= 0x80;}
 47910  003BCE  B006               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 47911                           
 47912                           ; BSR set to: 0
 47913  003BD0  8E83               	bsf	3971,7,c	;volatile
 47914                           
 47915                           ; BSR set to: 0
 47916                           ;segment.c: 150: if(digit[0] == 0 && digit[1] == 0 && digit[2] == 0){RC2 = 0;}
 47917                           
 47918                           ; BSR set to: 0
 47919  003BD2  51CC               	movf	displayDigits@digit& (0+255),w,b
 47920  003BD4  A4D8               	btfss	status,2,c
 47921  003BD6  D008               	goto	i2l2995
 47922                           
 47923                           ; BSR set to: 0
 47924  003BD8  51CD               	movf	(displayDigits@digit+1)& (0+255),w,b
 47925  003BDA  A4D8               	btfss	status,2,c
 47926  003BDC  D005               	goto	i2l2995
 47927                           
 47928                           ; BSR set to: 0
 47929  003BDE  51CE               	movf	(displayDigits@digit+2)& (0+255),w,b
 47930  003BE0  A4D8               	btfss	status,2,c
 47931  003BE2  D002               	goto	i2l2995
 47932                           
 47933                           ; BSR set to: 0
 47934  003BE4  9482               	bcf	3970,2,c	;volatile
 47935  003BE6  D001               	goto	i2l2996
 47936  003BE8                     i2l2995:
 47937                           
 47938                           ; BSR set to: 0
 47939                           ;segment.c: 151: else{RC2 = 1;}
 47940  003BE8  8482               	bsf	3970,2,c	;volatile
 47941  003BEA                     i2l2996:
 47942                           
 47943                           ; BSR set to: 0
 47944                           ;segment.c: 153: if(DIGIT_MODE == 0 && number_to_display < 0){
 47945                           
 47946                           ; BSR set to: 0
 47947  003BEA  503A               	movf	_DIGIT_MODE,w,c
 47948  003BEC  B4D8               	btfsc	status,2,c
 47949                           
 47950                           ; BSR set to: 0
 47951  003BEE  AE4C               	btfss	_number_to_display+1,7,c
 47952  003BF0  D009               	goto	i2l2998
 47953                           
 47954                           ; BSR set to: 0
 47955                           ;segment.c: 154: if(digit[3] > 0 && digit[2] == 0){PORTD = 0x40; RC2 = 1;}
 47956  003BF2  51CF               	movf	(displayDigits@digit+3)& (0+255),w,b
 47957  003BF4  B4D8               	btfsc	status,2,c
 47958  003BF6  D006               	goto	i2l2998
 47959                           
 47960                           ; BSR set to: 0
 47961  003BF8  51CE               	movf	(displayDigits@digit+2)& (0+255),w,b
 47962  003BFA  A4D8               	btfss	status,2,c
 47963  003BFC  D003               	goto	i2l2998
 47964                           
 47965                           ; BSR set to: 0
 47966  003BFE  0E40               	movlw	64
 47967  003C00  6E83               	movwf	3971,c	;volatile
 47968                           
 47969                           ; BSR set to: 0
 47970  003C02  8482               	bsf	3970,2,c	;volatile
 47971  003C04                     i2l2998:
 47972                           
 47973                           ; BSR set to: 0
 47974                           ;segment.c: 155: }
 47975                           ;segment.c: 156: }
 47976                           ;segment.c: 157: if(digit_counter == 3){
 47977                           
 47978                           ; BSR set to: 0
 47979                           
 47980                           ; BSR set to: 0
 47981                           
 47982                           ; BSR set to: 0
 47983  003C04  0E03               	movlw	3
 47984  003C06  19E9               	xorwf	displayDigits@digit_counter& (0+255),w,b
 47985  003C08  A4D8               	btfss	status,2,c
 47986  003C0A  D00F               	goto	i2l2999
 47987                           
 47988                           ; BSR set to: 0
 47989                           ;segment.c: 158: RC2 = 0;
 47990  003C0C  9482               	bcf	3970,2,c	;volatile
 47991                           
 47992                           ; BSR set to: 0
 47993                           ;segment.c: 161: PORTD = seg_bcd_hex[digit[3]];
 47994  003C0E  51CF               	movf	(displayDigits@digit+3)& (0+255),w,b
 47995  003C10  0D01               	mullw	1
 47996  003C12  0E59               	movlw	low _seg_bcd_hex
 47997  003C14  24F3               	addwf	prodl,w,c
 47998  003C16  6EF6               	movwf	tblptrl,c
 47999  003C18  0EF3               	movlw	high _seg_bcd_hex
 48000  003C1A  20F4               	addwfc	prodh,w,c
 48001  003C1C  6EF7               	movwf	tblptrh,c
 48002  003C1E                     	if	0	;There are less than 3 active tblptr bytes
 48003  003C1E                     	endif
 48004  003C1E  0008               	tblrd		*
 48005  003C20  CFF5 FF83          	movff	tablat,3971	;volatile
 48006                           
 48007                           ; BSR set to: 0
 48008                           ;segment.c: 162: if(light_decimal_points == 1){PORTD |= 0x80;}
 48009  003C24  B006               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 48010                           
 48011                           ; BSR set to: 0
 48012  003C26  8E83               	bsf	3971,7,c	;volatile
 48013                           
 48014                           ; BSR set to: 0
 48015                           ;segment.c: 163: RC3 = 1;
 48016                           
 48017                           ; BSR set to: 0
 48018  003C28  8682               	bsf	3970,3,c	;volatile
 48019  003C2A                     i2l2999:
 48020                           
 48021                           ;segment.c: 164: }
 48022                           ;segment.c: 165: }
 48023                           ;segment.c: 168: digit_counter++;
 48024                           
 48025                           ; BSR set to: 0
 48026  003C2A  0100               	movlb	0	; () banked
 48027  003C2C  2BE9               	incf	displayDigits@digit_counter& (0+255),f,b
 48028                           
 48029                           ; BSR set to: 0
 48030                           ;segment.c: 169: if(digit_counter > 3){digit_counter = 0;}
 48031  003C2E  0E03               	movlw	3
 48032  003C30  65E9               	cpfsgt	displayDigits@digit_counter& (0+255),b
 48033  003C32  0012               	return	
 48034                           
 48035                           ; BSR set to: 0
 48036  003C34  0E00               	movlw	0
 48037  003C36  6FE9               	movwf	displayDigits@digit_counter& (0+255),b
 48038  003C38  0012               	return	
 48039  003C3A                     __end_of_displayDigits:
 48040                           	opt stack 0
 48041                           tblptru	equ	0xFF8
 48042                           tblptrh	equ	0xFF7
 48043                           tblptrl	equ	0xFF6
 48044                           tablat	equ	0xFF5
 48045                           prodh	equ	0xFF4
 48046                           prodl	equ	0xFF3
 48047                           intcon	equ	0xFF2
 48048                           intcon2	equ	0xFF1
 48049                           indf0	equ	0xFEF
 48050                           postinc0	equ	0xFEE
 48051                           postdec0	equ	0xFED
 48052                           fsr0h	equ	0xFEA
 48053                           fsr0l	equ	0xFE9
 48054                           wreg	equ	0xFE8
 48055                           postinc1	equ	0xFE6
 48056                           postdec1	equ	0xFE5
 48057                           plusw1	equ	0xFE3
 48058                           fsr1h	equ	0xFE2
 48059                           fsr1l	equ	0xFE1
 48060                           indf2	equ	0xFDF
 48061                           postinc2	equ	0xFDE
 48062                           postdec2	equ	0xFDD
 48063                           plusw2	equ	0xFDB
 48064                           fsr2h	equ	0xFDA
 48065                           fsr2l	equ	0xFD9
 48066                           status	equ	0xFD8
 48067                           tblptru	equ	0xFF8
 48068                           tblptrh	equ	0xFF7
 48069                           tblptrl	equ	0xFF6
 48070                           tablat	equ	0xFF5
 48071                           prodh	equ	0xFF4
 48072                           prodl	equ	0xFF3
 48073                           intcon	equ	0xFF2
 48074                           intcon2	equ	0xFF1
 48075                           indf0	equ	0xFEF
 48076                           postinc0	equ	0xFEE
 48077                           postdec0	equ	0xFED
 48078                           fsr0h	equ	0xFEA
 48079                           fsr0l	equ	0xFE9
 48080                           wreg	equ	0xFE8
 48081                           postinc1	equ	0xFE6
 48082                           postdec1	equ	0xFE5
 48083                           plusw1	equ	0xFE3
 48084                           fsr1h	equ	0xFE2
 48085                           fsr1l	equ	0xFE1
 48086                           indf2	equ	0xFDF
 48087                           postinc2	equ	0xFDE
 48088                           postdec2	equ	0xFDD
 48089                           plusw2	equ	0xFDB
 48090                           fsr2h	equ	0xFDA
 48091                           fsr2l	equ	0xFD9
 48092                           status	equ	0xFD8
 48093                           
 48094                           	psect	rparam
 48095  0000                     tblptru	equ	0xFF8
 48096                           tblptrh	equ	0xFF7
 48097                           tblptrl	equ	0xFF6
 48098                           tablat	equ	0xFF5
 48099                           prodh	equ	0xFF4
 48100                           prodl	equ	0xFF3
 48101                           intcon	equ	0xFF2
 48102                           intcon2	equ	0xFF1
 48103                           indf0	equ	0xFEF
 48104                           postinc0	equ	0xFEE
 48105                           postdec0	equ	0xFED
 48106                           fsr0h	equ	0xFEA
 48107                           fsr0l	equ	0xFE9
 48108                           wreg	equ	0xFE8
 48109                           postinc1	equ	0xFE6
 48110                           postdec1	equ	0xFE5
 48111                           plusw1	equ	0xFE3
 48112                           fsr1h	equ	0xFE2
 48113                           fsr1l	equ	0xFE1
 48114                           indf2	equ	0xFDF
 48115                           postinc2	equ	0xFDE
 48116                           postdec2	equ	0xFDD
 48117                           plusw2	equ	0xFDB
 48118                           fsr2h	equ	0xFDA
 48119                           fsr2l	equ	0xFD9
 48120                           status	equ	0xFD8
 48121                           
 48122                           	psect	temp
 48123  00003F                     btemp:
 48124                           	opt stack 0
 48125  00003F                     	ds	12
 48126  0000                     wtemp0	set	btemp
 48127  0000                     wtemp1	set	btemp+2
 48128  0000                     wtemp2	set	btemp+4
 48129  0000                     wtemp3	set	btemp+6
 48130  0000                     wtemp4	set	btemp+8
 48131  0000                     wtemp5	set	btemp+10
 48132  0000                     wtemp6	set	btemp+1
 48133  0000                     ttemp0	set	btemp
 48134  0000                     ttemp1	set	btemp+3
 48135  0000                     ttemp2	set	btemp+6
 48136  0000                     ttemp3	set	btemp+9
 48137  0000                     ltemp0	set	btemp
 48138  0000                     ltemp1	set	btemp+4
 48139  0000                     ltemp2	set	btemp+8
 48140                           tblptru	equ	0xFF8
 48141                           tblptrh	equ	0xFF7
 48142                           tblptrl	equ	0xFF6
 48143                           tablat	equ	0xFF5
 48144                           prodh	equ	0xFF4
 48145                           prodl	equ	0xFF3
 48146                           intcon	equ	0xFF2
 48147                           intcon2	equ	0xFF1
 48148                           indf0	equ	0xFEF
 48149                           postinc0	equ	0xFEE
 48150                           postdec0	equ	0xFED
 48151                           fsr0h	equ	0xFEA
 48152                           fsr0l	equ	0xFE9
 48153                           wreg	equ	0xFE8
 48154                           postinc1	equ	0xFE6
 48155                           postdec1	equ	0xFE5
 48156                           plusw1	equ	0xFE3
 48157                           fsr1h	equ	0xFE2
 48158                           fsr1l	equ	0xFE1
 48159                           indf2	equ	0xFDF
 48160                           postinc2	equ	0xFDE
 48161                           postdec2	equ	0xFDD
 48162                           plusw2	equ	0xFDB
 48163                           fsr2h	equ	0xFDA
 48164                           fsr2l	equ	0xFD9
 48165                           status	equ	0xFD8


Data Sizes:
    Strings     667
    Constant    5281
    Data        242
    BSS         381
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           83     35      70
    BANK0           160    108     160
    BANK1           256     80     256
    BANK2           256      2     231
    BANK3           256      0     137
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_61(CODE[5]), STR_59(CODE[5]), STR_56(CODE[5]), STR_54(CODE[5]), 
		 -> STR_44(CODE[5]), STR_43(CODE[5]), STR_41(CODE[5]), STR_9(CODE[5]), 
		 -> STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[5]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 5
		 -> string_to_display(BANK1[5]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 5
		 -> string_to_display(BANK1[5]), 

    arpeggioPtr	PTR unsigned char  size(2) Largest target is 16
		 -> NULL(NULL[0]), ARPEGGIO_RANDOM(BANK2[16]), ARPEGGIO_SORTED(BANK2[16]), ARPEGGIO(BANK1[16]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 5
		 -> string_to_display(BANK1[5]), 

    playThisNote8@mode_p	PTR unsigned char  size(2) Largest target is 15
		 -> locrian_key(CODE[15]), aeolian_key(CODE[15]), mixolydian_key(CODE[15]), lydian_key(CODE[15]), 
		 -> phrygian_key(CODE[15]), dorian_key(CODE[15]), ionian_key(CODE[15]), 

    playSeventh@seventh_p	PTR unsigned char  size(2) Largest target is 4
		 -> diminished_7th(BANK2[4]), half_diminished_7th(BANK2[4]), minor_7th(BANK2[4]), major_7th(BANK2[4]), 
		 -> dominant_7th(BANK2[4]), 

    playTriad@triad_p	PTR unsigned char  size(2) Largest target is 3
		 -> diminished_triad(BANK2[3]), augmented_triad(BANK2[3]), minor_triad(BANK2[3]), major_triad(BANK1[3]), 

    Lcd_Print_String@a	PTR unsigned char  size(2) Largest target is 2397
		 -> STR_75(CODE[16]), STR_74(CODE[12]), STR_73(CODE[10]), STR_72(CODE[12]), 
		 -> STR_71(CODE[10]), STR_70(CODE[12]), STR_69(CODE[10]), STR_68(CODE[12]), 
		 -> STR_67(CODE[10]), STR_66(CODE[12]), STR_65(CODE[13]), STR_64(CODE[15]), 
		 -> STR_63(CODE[15]), STR_62(CODE[16]), STR_60(CODE[14]), STR_58(CODE[12]), 
		 -> STR_57(CODE[15]), STR_55(CODE[14]), STR_53(CODE[15]), STR_52(CODE[17]), 
		 -> STR_51(CODE[9]), STR_50(CODE[10]), STR_49(CODE[13]), STR_48(CODE[13]), 
		 -> STR_47(CODE[17]), STR_46(CODE[14]), STR_45(CODE[14]), STR_42(CODE[15]), 
		 -> STR_40(CODE[16]), STR_39(CODE[17]), STR_38(CODE[13]), STR_37(CODE[17]), 
		 -> STR_36(CODE[8]), STR_35(CODE[8]), STR_34(CODE[12]), STR_33(CODE[17]), 
		 -> STR_32(CODE[15]), STR_31(CODE[14]), STR_30(CODE[17]), STR_29(CODE[15]), 
		 -> STR_28(CODE[17]), STR_27(CODE[14]), STR_26(CODE[16]), STR_25(CODE[14]), 
		 -> STR_24(CODE[12]), LCD_STRINGS(CODE[2397]), STR_23(CODE[13]), STR_22(CODE[17]), 
		 -> STR_21(CODE[16]), STR_20(CODE[5]), STR_19(CODE[11]), STR_18(CODE[11]), 
		 -> STR_17(CODE[11]), STR_16(CODE[10]), STR_15(CODE[11]), STR_14(CODE[11]), 
		 -> STR_13(CODE[11]), STR_12(CODE[10]), string2display(BANK1[5]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_playArpeggio
    _playArpeggio->_sort_pitches
    _display->_displayDigits

Critical Paths under _main in BANK0

    _main->_calculate_pulse_length
    _panic_button->_controlChange
    _Lcd_Clear->_Lcd_Cmd
    _Function_H_6->_Function_H_6_1
    _Function_H_2->_calculate_pulse_length
    _exitFunction->_Lcd_Print_String
    _Function_G_3->_Lcd_Print_String
    _loadFromEEPROM->_calculate_pulse_length
    _calculate_pulse_length->___fltol
    _exitLoad->_Lcd_Print_String
    _exitSave->_Lcd_Print_String
    _eepromExit->_Lcd_Print_String
    _Function_D->_Function_D_3
    _Function_D->_Function_D_4
    _Function_D->_Function_D_5
    _setControllerNumbers->_Lcd_Print_String
    _calculate_alpha->___fldiv
    ___fldiv->___flmul
    _Function_C->_Function_C_2
    _Function_C->_Function_C_3
    _digitalInputs->_processOctave
    _processOctave->_doTheUnLatch
    _doTheUnLatch->_playThisNote8
    _doTheLatch->_strcpy
    _processKeyboard->_keyboard_eight_note_efficient
    _keyboard_sharps_only_efficient->_playThisNotePentatonic
    _playThisNotePentatonic->_add_notes_to_arpeggio
    _keyboard_eight_note_efficient->_playThisNote8
    _playThisNote8->_add_notes_to_arpeggio
    _playDiatonicTriadMinor->_wait_one_pulse
    _playDiatonicTriadMajor->_wait_one_pulse
    _playDiatonicSeventhMinor->_wait_one_pulse
    _playDiatonicSeventhMajor->_wait_one_pulse
    _keyboard_all_note_efficient->_playThisNote
    _playThisNote->_add_notes_to_arpeggio
    _playTriad->_wait_one_pulse
    _playSeventh->_wait_one_pulse
    _setupArpeggio->_copy_array
    _delete_notes_from_arpeggio->_rotateArrayLeft
    _add_notes_to_arpeggio->_rotateArrayLeft
    _processDrumpad->_controlChange
    _processDrumpad->_noteOffDrum
    _processDrumpad->_noteOnDrum
    _keyboardTranspose->_printThisNumber
    _analogInputs->_readPotentiometers
    _readPotentiometers->___fltol
    _processPotentiometers->_controlChange
    _processPotentiometers->_pitchBend
    _map->___aldiv
    ___fltol->___fladd
    ___flneg->___fldiv
    ___flmul->___xxtofl
    ___fladd->___flneg
    _clear_row2->_Lcd_Print_String
    _clear_row1->_Lcd_Print_String
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Print_String->_Lcd_Print_Char
    _Lcd_Print_Char->_Lcd_SetBit
    _initializeSaveSlotsOnce->_saveToEEPROM
    _saveToEEPROM->_Write_b_eep
    _initializeMenuArray->___wmul
    _displayTest->_strcpy
    _Lcd_Start->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_SetBit

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _selectSlotOnBoot->_loadFromEEPROM
    _Function_G_2->_loadFromEEPROM
    _un_block_code->_analogInputs
    _analogInputs->_readPotentiometers

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_selectSlotOnBoot

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0 53486963
                                              1 BANK2      1     1      0
                     _ADC_Initialize
                          _Lcd_Start
                         _Read_b_eep
                       _analogInputs
                    _calculate_alpha
             _calculate_pulse_length
                      _digitalInputs
                        _displayTest
                _initializeMenuArray
            _initializeSaveSlotsOnce
                           _menu_lcd
                       _panic_button
               _processEncoderBuxton
                   _selectSlotOnBoot
                              _setup
                              _srand
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _selectSlotOnBoot                                     1     1      0   15019
                                              0 BANK2      1     1      0
                         _Read_b_eep
                     _loadFromEEPROM
 ---------------------------------------------------------------------------------
 (1) _panic_button                                         0     0      0   23217
                      _controlChange
 ---------------------------------------------------------------------------------
 (1) _menu_lcd                                             0     0      0 52212139
                         _Function_A
                         _Function_B
                         _Function_C
                         _Function_D
                         _Function_E
                         _Function_F
                         _Function_G
                         _Function_H
                          _Lcd_Clear
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                            ___lbmod
                             ___wmul
                       _exitFunction
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     155
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Function_H                                           0     0      0 23390808
                       _Function_H_1
                       _Function_H_2
                       _Function_H_3
                       _Function_H_4
                       _Function_H_5
                       _Function_H_6
                       _Function_H_7
                       _Function_H_8
                       _Function_H_9
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_9                                         0     0      0 6235055
                     _Function_H_9_1
                     _Function_H_9_2
                     _Function_H_9_3
                     _Function_H_9_4
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_4                                       0     0      0 1247011
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_3                                       0     0      0 1247011
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_2                                       0     0      0 1247011
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_1                                       0     0      0 1247011
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_8                                         0     0      0 3699751
                     _Function_H_8_1
                     _Function_H_8_2
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_8_2                                       0     0      0 1226370
                   _Lcd_Print_String
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_8_1                                       0     0      0 1238775
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_7                                         0     0      0 1241764
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
                             _strcpy
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_6                                         0     0      0 4249015
                     _Function_H_6_1
                     _Function_H_6_2
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_6_2                                       0     0      0 1241764
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
                             _strcpy
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_6_1                                       1     1      0 1772645
                                            103 BANK0      1     1      0
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
                         _doTheLatch
                       _doTheUnLatch
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_5                                         2     2      0 1247141
                                            103 BANK0      2     2      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_4                                         0     0      0 1249390
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _setupArpeggio
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_3                                         0     0      0 1231400
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _clear_row2
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_2                                         0     0      0 1242446
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
             _calculate_pulse_length
                         _clear_row2
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_1                                         1     1      0 1760240
                                            103 BANK0      1     1      0
                   _Lcd_Print_String
                         _clear_row2
                       _doTheUnLatch
                             _strcpy
                      _un_block_code
 ---------------------------------------------------------------------------------
 (2) _Function_G                                           0     0      0 5167876
                       _Function_G_1
                       _Function_G_2
                       _Function_G_3
                       _Function_G_4
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                         _eepromExit
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_G_4                                         0     0      0 1270596
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                       _exitFunction
                      _un_block_code
 ---------------------------------------------------------------------------------
 (2) _exitFunction                                         2     2      0   22195
                                             14 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (3) _Function_G_3                                         2     2      0   35990
                                             14 BANK0      2     2      0
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                         _clear_row1
                         _clear_row2
 ---------------------------------------------------------------------------------
 (3) _Function_G_2                                         0     0      0 1307233
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _eepromExit
                           _exitLoad
                     _loadFromEEPROM
                      _un_block_code
 ---------------------------------------------------------------------------------
 (2) _loadFromEEPROM                                      80    80      0   14442
                                              0 BANK1     80    80      0
                         _Read_b_eep
             _calculate_pulse_length
 ---------------------------------------------------------------------------------
 (3) _calculate_pulse_length                              10     8      2   11046
                                             98 BANK0     10     8      2
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) _exitLoad                                             2     2      0   22195
                                             14 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (3) _Function_G_1                                         0     0      0 1297256
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _eepromExit
                           _exitSave
                       _saveToEEPROM
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _exitSave                                             2     2      0   22195
                                             14 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (3) _eepromExit                                           2     2      0   22195
                                             14 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (2) _Function_F                                           0     0      0 1247535
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _clear_row2
                         _int2string
                      _programChange
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _programChange                                        3     1      2   16135
                                              0 BANK0      3     1      2
                            ___lbmod
         _key_press_release_note_off
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (2) _Function_E                                           0     0      0 3672596
                       _Function_E_1
                       _Function_E_2
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_E_2                                         0     0      0 1218995
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_E_1                                         0     0      0 1218995
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (2) _Function_D                                           0     0      0 7494073
                       _Function_D_1
                       _Function_D_2
                       _Function_D_3
                       _Function_D_4
                       _Function_D_5
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_D_5                                         1     1      0 1262857
                                            103 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _setControllerNumbers
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_D_4                                         1     1      0 1262857
                                            103 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _setControllerNumbers
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_D_3                                         1     1      0 1262857
                                            103 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _setControllerNumbers
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _setControllerNumbers                                 2     2      0   15812
                                             14 BANK0      2     2      0
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _int2string
 ---------------------------------------------------------------------------------
 (3) _Function_D_2                                         0     0      0 1223786
                           _Busy_eep
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                        _Write_b_eep
                    _calculate_alpha
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _calculate_alpha                                      0     0      0    3401
                            ___fldiv
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___fldiv                                             25    17      8    2475
                                             39 BANK0     25    17      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _Function_D_1                                         0     0      0 1247110
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
            _setControllerResolution
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _setControllerResolution                              1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Function_C                                           0     0      0 4986015
                       _Function_C_1
                       _Function_C_2
                       _Function_C_3
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_C_3                                         2     2      0 1252199
                                            103 BANK0      2     2      0
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_C_2                                         2     2      0 1252199
                                            103 BANK0      2     2      0
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _int2string                                           6     4      2    2415
                                              0 BANK0      6     4      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (19) ___awdiv                                             8     4      4     575
 ---------------------------------------------------------------------------------
 (3) _Function_C_1                                         0     0      0 1247011
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (2) _Function_B                                           0     0      0 1234606
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (2) _Function_A                                           0     0      0 4975639
                       _Function_A_1
                       _Function_A_2
                       _Function_A_3
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_A_3                                         0     0      0 1247011
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_A_2                                         0     0      0 1247011
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_A_1                                         0     0      0 1247011
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _un_block_code                                        0     0      0 1204175
                       _analogInputs
                      _digitalInputs
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (1) _processEncoderBuxton                                 7     7      0       0
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (4) _digitalInputs                                        0     0      0 1151643
                 _buttonInputsSerial
                  _keyboardTranspose
                     _processDrumpad
                    _processKeyboard
                      _processOctave
 ---------------------------------------------------------------------------------
 (5) _processOctave                                        2     2      0  561545
                                             30 BANK0      2     2      0
                            ___awmod
                             ___wmul
                         _doTheLatch
                       _doTheUnLatch
         _key_press_release_note_off
                    _printThisNumber
                     _random_pitches
       _random_pitches_non_repeating
                      _resetArpeggio
                             _strcpy
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (6) _doTheUnLatch                                         4     4      0  530847
                                             26 BANK0      4     4      0
                       _playThisNote
                      _playThisNote8
             _playThisNotePentatonic
                             _strcpy
 ---------------------------------------------------------------------------------
 (6) _doTheLatch                                           0     0      0    2989
                             _strcpy
 ---------------------------------------------------------------------------------
 (5) _processKeyboard                                      0     0      0  532958
        _keyboard_all_note_efficient
      _keyboard_eight_note_efficient
     _keyboard_sharps_only_efficient
 ---------------------------------------------------------------------------------
 (6) _keyboard_sharps_only_efficient                       2     2      0   61473
                                             23 BANK0      2     2      0
             _playThisNotePentatonic
 ---------------------------------------------------------------------------------
 (7) _playThisNotePentatonic                               7     6      1   60113
                                             17 BANK0      6     5      1
              _add_notes_to_arpeggio
         _delete_notes_from_arpeggio
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (6) _keyboard_eight_note_efficient                        2     2      0  295993
                                             26 BANK0      2     2      0
                      _playThisNote8
 ---------------------------------------------------------------------------------
 (7) _playThisNote8                                        9     8      1  293953
                                             17 BANK0      9     8      1
              _add_notes_to_arpeggio
         _delete_notes_from_arpeggio
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
           _playDiatonicSeventhMajor
           _playDiatonicSeventhMinor
             _playDiatonicTriadMajor
             _playDiatonicTriadMinor
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (8) _playDiatonicTriadMinor                               8     7      1   58143
                                              1 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (8) _playDiatonicTriadMajor                               8     7      1   57895
                                              1 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (8) _playDiatonicSeventhMinor                             8     7      1   58143
                                              1 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (8) _playDiatonicSeventhMajor                             8     7      1   57895
                                              1 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (6) _keyboard_all_note_efficient                          1     1      0  175492
                                             22 BANK0      1     1      0
                       _playThisNote
 ---------------------------------------------------------------------------------
 (7) _playThisNote                                         5     5      0  173792
                                             17 BANK0      5     5      0
              _add_notes_to_arpeggio
         _delete_notes_from_arpeggio
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                        _playSeventh
                          _playTriad
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (8) _playTriad                                            9     9      0   57817
                                              1 BANK0      9     9      0
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (8) _playSeventh                                          9     9      0   57820
                                              1 BANK0      9     9      0
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (18) _noteOn                                              3     0      3   27261
                            _noteOff
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (8) _finish_arpeggio_setup                                0     0      0    2379
                      _resetArpeggio
                      _setupArpeggio
 ---------------------------------------------------------------------------------
 (9) _setupArpeggio                                        0     0      0    2379
                         _copy_array
                     _random_pitches
       _random_pitches_non_repeating
 ---------------------------------------------------------------------------------
 (18) _random_pitches_non_repeating                        3     3      0    1157
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (18) _random_pitches                                      2     2      0    1061
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (19) _rand                                                0     0      0     214
                             ___lmul
 ---------------------------------------------------------------------------------
 (19) ___awmod                                             6     2      4     745
 ---------------------------------------------------------------------------------
 (10) _copy_array                                          1     1      0     161
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _resetArpeggio                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _delete_notes_from_arpeggio                           2     2      0     387
                                              9 BANK0      2     2      0
                     _findArrayIndex
                    _rotateArrayLeft
 ---------------------------------------------------------------------------------
 (9) _findArrayIndex                                       3     3      0     161
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (8) _add_notes_to_arpeggio                                8     8      0     223
                                              9 BANK0      8     8      0
                    _rotateArrayLeft
 ---------------------------------------------------------------------------------
 (9) _rotateArrayLeft                                      9     9      0     161
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (5) _processDrumpad                                       0     0      0   42679
                      _controlChange
                        _noteOffDrum
                         _noteOnDrum
 ---------------------------------------------------------------------------------
 (6) _noteOnDrum                                           3     1      2   16715
                                              0 BANK0      3     1      2
                            _noteOff
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (6) _noteOffDrum                                          3     1      2    2747
                                              0 BANK0      3     1      2
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (5) _keyboardTranspose                                    0     0      0   14325
         _key_press_release_note_off
                    _printThisNumber
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (6) _wait_one_pulse                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _printThisNumber                                      2     0      2     481
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _buttonInputsSerial                                   6     6      0     136
                                              0 BANK0      6     6      0
                              _clock
                               _load
 ---------------------------------------------------------------------------------
 (6) _load                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _clock                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _analogInputs                                         7     7      0   52532
                                              7 BANK1      7     7      0
                 _readPotentiometers
 ---------------------------------------------------------------------------------
 (5) _readPotentiometers                                  12    12      0   52532
                                             98 BANK0      5     5      0
                                              0 BANK1      7     7      0
                           _ADC_Read
                            ___fladd
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _map
              _processPotentiometers
 ---------------------------------------------------------------------------------
 (6) _processPotentiometers                                6     6      0   40375
                                              3 BANK0      6     6      0
                      _controlChange
                          _pitchBend
 ---------------------------------------------------------------------------------
 (7) _pitchBend                                            3     1      2   16315
                                              0 BANK0      3     1      2
                            ___lbmod
         _key_press_release_note_off
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (2) _controlChange                                        3     1      2   23217
                                              0 BANK0      3     1      2
                            ___lbmod
         _key_press_release_note_off
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (3) _key_press_release_note_off                           0     0      0   13813
                            _noteOff
 ---------------------------------------------------------------------------------
 (19) _noteOff                                             3     0      3   13813
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (19) _sendUSB                                             8     5      3     584
 ---------------------------------------------------------------------------------
 (19) _sendOut                                             8     5      3     599
 ---------------------------------------------------------------------------------
 (17) ___lbmod                                             4     2      2     804
 ---------------------------------------------------------------------------------
 (6) _map                                                 40    20     20    1956
                                             14 BANK0     40    20     20
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (20) ___lmul                                             12     4      8     214
 ---------------------------------------------------------------------------------
 (7) ___aldiv                                             14     6      8     625
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4     926
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     517
                                             88 BANK0     10     6      4
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flneg                                              4     0      4     245
                                             64 BANK0      4     0      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             25    17      8    3053
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             20    12      8    3762
                                             68 BANK0     20    12      8
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) _ADC_Read                                             5     3      2      34
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _clear_row2                                           0     0      0   12405
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
 ---------------------------------------------------------------------------------
 (3) _clear_row1                                           0     0      0   12405
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
 ---------------------------------------------------------------------------------
 (4) _Lcd_Set_Cursor                                       5     4      1    2615
                                              3 BANK0      5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (4) _Lcd_Print_String                                     6     4      2    9790
                                              8 BANK0      6     4      2
                     _Lcd_Print_Char
                            ___lbmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _Lcd_Print_Char                                       7     7      0     390
                                              1 BANK0      7     7      0
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (1) _initializeSaveSlotsOnce                              1     1      0    6401
                                             84 BANK0      1     1      0
                           _Busy_eep
                         _Read_b_eep
                        _Write_b_eep
                       _saveToEEPROM
 ---------------------------------------------------------------------------------
 (4) _saveToEEPROM                                        80    80      0    4465
                                              4 BANK0     80    80      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (4) _Write_b_eep                                          4     1      3    1390
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (4) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2     512
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initializeMenuArray                                  3     3      0    7596
                                              6 BANK0      3     3      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    7432
                                              0 BANK0      6     2      4
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _displayTest                                          2     2      0    2989
                                              6 BANK0      2     2      0
                             _strcpy
 ---------------------------------------------------------------------------------
 (6) _strcpy                                               6     2      4    2989
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Start                                            3     3      0     347
                                              3 BANK0      3     3      0
                            _Lcd_Cmd
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (5) _Lcd_Cmd                                              2     2      0     155
                                              1 BANK0      2     2      0
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (6) _Lcd_SetBit                                           1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _ISR                                                24    24      0   47088
                                             11 COMRAM    24    24      0
                            ___lbmod
                            _display
                _encoderInputsBuxton
                       _playArpeggio
 ---------------------------------------------------------------------------------
 (17) _playArpeggio                                        6     6      0   44631
                                              5 COMRAM     6     6      0
                            ___awmod
                            _noteOff
                             _noteOn
                               _rand
                     _random_pitches
       _random_pitches_non_repeating
                       _sort_pitches
 ---------------------------------------------------------------------------------
 (18) _sort_pitches                                        5     5      0     380
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (18) _random_pitches_non_repeating                        3     3      0    1157
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (18) _random_pitches                                      2     2      0    1061
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (19) _rand                                                0     0      0     214
                             ___lmul
 ---------------------------------------------------------------------------------
 (20) ___lmul                                             12     4      8     214
 ---------------------------------------------------------------------------------
 (18) _noteOn                                              3     0      3   27261
                            _noteOff
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (19) _noteOff                                             3     0      3   13813
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (19) _sendUSB                                             8     5      3     584
 ---------------------------------------------------------------------------------
 (19) _sendOut                                             8     5      3     599
 ---------------------------------------------------------------------------------
 (17) _encoderInputsBuxton                                 6     6      0      69
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (17) _display                                             0     0      0    1584
                      _displayDigits
                      _displayString
 ---------------------------------------------------------------------------------
 (18) _displayString                                       2     2      0     134
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (18) _displayDigits                                       5     5      0    1450
                                              0 COMRAM     5     5      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (19) ___awmod                                             6     2      4     745
 ---------------------------------------------------------------------------------
 (19) ___awdiv                                             8     4      4     575
 ---------------------------------------------------------------------------------
 (17) ___lbmod                                             4     2      2     804
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 20
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _Lcd_Start
     _Lcd_Cmd
       _Lcd_SetBit
     _Lcd_SetBit
   _Read_b_eep
   _analogInputs
     _readPotentiometers
       _ADC_Read
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul
         ___xxtofl (ARG)
       ___flneg
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _map
         ___aldiv
           ___lmul (ARG)
         ___lmul
       _processPotentiometers
         _controlChange
           ___lbmod
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _sendOut
           _sendUSB
         _pitchBend
           ___lbmod
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _sendOut
           _sendUSB
   _calculate_alpha
     ___fldiv
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___xxtofl
   _calculate_pulse_length
     ___fladd
       ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fldiv
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___flmul
       ___xxtofl (ARG)
     ___flneg
       ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fltol
       ___fladd (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___xxtofl
   _digitalInputs
     _buttonInputsSerial
       _clock
       _load
     _keyboardTranspose
       _key_press_release_note_off
         _noteOff
           _sendOut
           _sendUSB
       _printThisNumber
       _wait_one_pulse
     _processDrumpad
       _controlChange
         ___lbmod
         _key_press_release_note_off
           _noteOff
             _sendOut
             _sendUSB
         _sendOut
         _sendUSB
       _noteOffDrum
         _sendOut
         _sendUSB
       _noteOnDrum
         _noteOff
           _sendOut
           _sendUSB
         _sendOut
         _sendUSB
     _processKeyboard
       _keyboard_all_note_efficient
         _playThisNote
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playSeventh
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playTriad
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
       _keyboard_eight_note_efficient
         _playThisNote8
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playDiatonicSeventhMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicSeventhMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
       _keyboard_sharps_only_efficient
         _playThisNotePentatonic
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _wait_one_pulse
     _processOctave
       ___awmod
       ___wmul
         ___lbmod (ARG)
       _doTheLatch
         _strcpy
       _doTheUnLatch
         _playThisNote
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playSeventh
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playTriad
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
         _playThisNote8
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playDiatonicSeventhMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicSeventhMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
         _playThisNotePentatonic
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _wait_one_pulse
         _strcpy
       _key_press_release_note_off
         _noteOff
           _sendOut
           _sendUSB
       _printThisNumber
       _random_pitches
         ___awmod
         _rand
           ___lmul
       _random_pitches_non_repeating
         ___awmod
         _rand
           ___lmul
       _resetArpeggio
       _strcpy
       _wait_one_pulse
   _displayTest
     _strcpy
   _initializeMenuArray
     ___wmul
       ___lbmod (ARG)
   _initializeSaveSlotsOnce
     _Busy_eep
     _Read_b_eep
     _Write_b_eep
     _saveToEEPROM
       _Busy_eep
       _Write_b_eep
   _menu_lcd
     _Function_A
       _Function_A_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_A_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_A_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_B
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_C
       _Function_C_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_C_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_C_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_D
       _Function_D_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _setControllerResolution
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_D_2
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _Write_b_eep
         _calculate_alpha
           ___fldiv
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_D_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _setControllerNumbers
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
           _int2string
             ___awdiv
             ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_D_4
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _setControllerNumbers
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
           _int2string
             ___awdiv
             ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_D_5
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _setControllerNumbers
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
           _int2string
             ___awdiv
             ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_E
       _Function_E_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_E_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_F
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_SetBit
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _int2string
         ___awdiv
         ___awmod
       _programChange
         ___lbmod
         _key_press_release_note_off
           _noteOff
             _sendOut
             _sendUSB
         _sendOut
         _sendUSB
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_G
       _Function_G_1
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _eepromExit
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _exitSave
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _saveToEEPROM
           _Busy_eep
           _Write_b_eep
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_G_2
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _eepromExit
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _exitLoad
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _loadFromEEPROM
           _Read_b_eep
           _calculate_pulse_length
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fldiv
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_G_3
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
       _Function_G_4
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _exitFunction
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _eepromExit
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_H
       _Function_H_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _doTheUnLatch
           _playThisNote
             _add_notes_to_arpeggio
               _rotateArrayLeft
             _delete_notes_from_arpeggio
               _findArrayIndex
               _rotateArrayLeft
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _playSeventh
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _playTriad
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _wait_one_pulse
           _playThisNote8
             _add_notes_to_arpeggio
               _rotateArrayLeft
             _delete_notes_from_arpeggio
               _findArrayIndex
               _rotateArrayLeft
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _playDiatonicSeventhMajor
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _playDiatonicSeventhMinor
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _playDiatonicTriadMajor
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _playDiatonicTriadMinor
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _wait_one_pulse
           _playThisNotePentatonic
             _add_notes_to_arpeggio
               _rotateArrayLeft
             _delete_notes_from_arpeggio
               _findArrayIndex
               _rotateArrayLeft
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _strcpy
         _strcpy
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _calculate_pulse_length
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fldiv
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul
             ___xxtofl (ARG)
           ___flneg
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_4
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _setupArpeggio
           _copy_array
           _random_pitches
             ___awmod
             _rand
               ___lmul
           _random_pitches_non_repeating
             ___awmod
             _rand
               ___lmul
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_5
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_6
         _Function_H_6_1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _doTheLatch
             _strcpy
           _doTheUnLatch
             _playThisNote
               _add_notes_to_arpeggio
                 _rotateArrayLeft
               _delete_notes_from_arpeggio
                 _findArrayIndex
                 _rotateArrayLeft
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _playSeventh
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _playTriad
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _wait_one_pulse
             _playThisNote8
               _add_notes_to_arpeggio
                 _rotateArrayLeft
               _delete_notes_from_arpeggio
                 _findArrayIndex
                 _rotateArrayLeft
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _playDiatonicSeventhMajor
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _playDiatonicSeventhMinor
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _playDiatonicTriadMajor
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _playDiatonicTriadMinor
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _wait_one_pulse
             _playThisNotePentatonic
               _add_notes_to_arpeggio
                 _rotateArrayLeft
               _delete_notes_from_arpeggio
                 _findArrayIndex
                 _rotateArrayLeft
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _strcpy
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Function_H_6_2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _strcpy
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_7
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _strcpy
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_8
         _Function_H_8_1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Function_H_8_2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_9
         _Function_H_9_1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Function_H_9_2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Function_H_9_3
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Function_H_9_4
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_SetBit
     _Lcd_Print_String
       _Lcd_Print_Char
         _Lcd_SetBit
       ___lbmod (ARG)
       ___wmul (ARG)
         ___lbmod (ARG)
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_SetBit
     ___lbmod
     ___wmul
       ___lbmod (ARG)
     _exitFunction
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       _clear_row1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
   _panic_button
     _controlChange
       ___lbmod
       _key_press_release_note_off
         _noteOff
           _sendOut
           _sendUSB
       _sendOut
       _sendUSB
   _processEncoderBuxton
   _selectSlotOnBoot
     _Read_b_eep
     _loadFromEEPROM
       _Read_b_eep
       _calculate_pulse_length
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul
           ___xxtofl (ARG)
         ___flneg
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl
   _setup
   _srand

 _ISR (ROOT)
   ___lbmod
   _display
     _displayDigits
       ___awdiv
       ___awmod
     _displayString
   _encoderInputsBuxton
   _playArpeggio
     ___awmod
     _noteOff
       _sendOut
       _sendUSB
     _noteOn
       _noteOff
         _sendOut
         _sendUSB
       _sendOut
       _sendUSB
     _rand
       ___lmul
     _random_pitches
       ___awmod
       _rand
         ___lmul
     _random_pitches_non_repeating
       ___awmod
       _rand
         ___lmul
     _sort_pitches

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0       0      31        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      89      11       53.5%
BITBANK2           100      0       0       8        0.0%
BANK2              100      2      E7       9       90.2%
BITBANK1           100      0       0       6        0.0%
BANK1              100     50     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6C      A0       5      100.0%
BITCOMRAM           53      0       6       0        7.2%
COMRAM              53     23      46       1       84.3%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0      25       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     356      20        0.0%
DATA                 0      0     37B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Feb 04 19:08:47 2024

                   _arpeggiatorAutoLatchOnOffMenu 0120                           playThisNote8@temp_pitch 0077  
                       ?_playDiatonicSeventhMinor 0061                           _readPotentiometers$5907 0197  
                                    ___fldiv@aexp 009F                                      ___fldiv@bexp 009E  
                              _RESET_ON_KEY_PRESS 0022                                      ___fldiv@sign 0093  
                                    ?_displayTest 0007                                                l23 9790  
                                              l24 9792                                                l40 8FF2  
                                              l25 979A                                                l26 979C  
                                              l42 901C                                                l27 97A4  
                                              l51 85A2                                                l28 97A6  
                                              l52 85BA                                                l29 97AE  
                                              l53 85D8                                                l46 8372  
                                              l54 85F0                                                l58 8538  
                                              l59 84FE                                                l94 969E  
                   __size_of_processEncoderBuxton 0A1C                               ___wmul@multiplicand 0062  
                                     __CFG_BORV$3 000000                                    ?_programChange 0060  
                                 _GLOBAL_CC_VALUE 0180                   __size_of_playDiatonicTriadMajor 0190  
                                    __CFG_CP0$OFF 000000                                      __CFG_CP1$OFF 000000  
                                    __CFG_CP2$OFF 000000                                      __CFG_CP3$OFF 000000  
                                     __CFG_OSC$HS 000000                   __size_of_playDiatonicTriadMinor 0262  
                        _LAST_NOTE_MODE_KEY_PRESS 0019                           playDiatonicTriadMajor@i 0066  
                            __end_of_doTheUnLatch 539E                                               l500 9468  
                                             l504 93D8                                               l466 6D80  
                                             l491 9212                                               l484 8B94  
                                             l901 046E                                               l911 0558  
                                             l903 0480                                               l496 91AE  
                                             l920 060A                                               l913 0592  
                                             l905 0492                                               l930 0714  
                                             l922 0650                                               l914 05A0  
                                             l931 0722                                               l907 04D8  
                                             l940 07B0                                               l924 0696  
                                             l916 05B2                                               l933 075C  
                                             l925 06A4                                               l909 051E  
                                             l950 0800                                               l942 07C0  
                                             l934 076A                                               l926 06B2  
                                             l918 05C4                                               l935 0778  
                                             l927 06C0                                               l871 00EC  
                                             l960 0850                                               l952 0810  
                                             l944 07D0                                               l936 0786  
                                             l937 0794                                               l929 0706  
                                             l881 024A                                               l873 0132  
                                             l970 08A4                                               l962 0860  
                                             l954 0820                                               l946 07E0  
                                             l891 03A8                                               l883 0290  
                                             l875 0178                                               l867 006C  
                                             l980 08EC                                               l972 08B0  
                                             l964 0870                                               l956 0830  
                                             l948 07F0                                               l893 03BC  
                                             l885 02D6                                               l877 01BE  
                                             l869 00A6                                               l982 08FC  
                                             l974 08C0                                               l966 0884  
                                             l958 0840                                               l991 094E  
                                             l895 03D0                                               l887 031C  
                                             l879 0204                                               l984 090C  
                                             l976 08D0                                               l968 0898  
                                             l993 095E                                               l897 0416  
                                             l889 0362                                               l986 091C  
                                             l978 08E0                                               l995 096E  
                                             l987 092A                                               l899 045C  
                                             _GIE 007F97                              _RESET_ON_KEY_RELEASE 0021  
                                             l997 097E                                               l989 093C  
                                             _BPM 00FF                                               l998 098C  
                                             l999 099A                                      __CFG_CPB$OFF 000000  
                                             _RB0 007C08                                               _RB1 007C09  
                                             _RB2 007C0A                                               _RC0 007C10  
                                             _RA5 007C05                                               _RC1 007C11  
                                             _RB4 007C0C                                               _RC2 007C12  
                                             _RB5 007C0D                                               _RC3 007C13  
                                             _RE0 007C20                                               _RC4 007C14  
                                             _RE1 007C21                                               _RC5 007C15  
                                             _RD4 007C1C                                               _RE2 007C22  
                                             _RD5 007C1D                                               _RD6 007C1E  
                                             _RD7 007C1F                                      __CFG_CPD$OFF 000000  
                                             _ISR 0008                                               _PSA 007EAB  
                                             _map 66DE                           playDiatonicTriadMinor@i 0067  
                            __size_of_Write_b_eep 0042                                               prod 000FF3  
                                             wreg 000FE8                                    ?_displayDigits 0007  
                                _GLOBAL_CC_NUMBER 00F4                                  ??_wait_one_pulse 0060  
                                    ___flmul@aexp 007B                                      ___flmul@bexp 0080  
                  __end_of_playThisNotePentatonic 56E2                                      ___flmul@sign 007A  
                                    ___flmul@temp 0085                                      ___flmul@prod 0081  
                        loadFromEEPROM@slotNumber 01E4                                      __CFG_LVP$OFF 000000  
                                            ?_ISR 0007                       _potentiometer_filtered_last 0200  
                                    ___fltol@exp1 00C1                                      __CFG_WDT$OFF 000000  
                                            l1000 09A8                                              l1010 0A1C  
                                            l1002 09B8                                              l1011 0A2A  
                                            l1003 09C6                                    ?_displayString 0007  
                                            l1004 09D4                                              l1006 09E4  
                                            l1007 09F2                                              l1008 0A00  
                                            l1009 0A0E                                              l1410 5620  
                                            l1411 563E                                              l1500 59BE  
                                            l1420 56CC                                              l1412 5674  
                                            l1404 557C                                              l1421 56DA  
                                            l1413 5662                                              l1405 55A4  
                                            l1502 59E2                                              l1430 3FBE  
                                            l1503 59EA                                              l1511 6808  
                                            l1407 55D4                                              l1431 3FE0  
                                            l2400 1FEE                                              l1504 59FE  
                                            l1520 687C                                              l1512 681E  
                                            l1408 55FC                                              l1440 4112  
                                            l1432 4002                                              l2401 2004  
                                            l1601 2910                                              l1417 5698  
                                            l1441 4134                                              l1433 4024  
                                            l1425 3F14                                              l2410 20C6  
                                            l2402 201E                                              l1450 5BDC  
                                            l1522 68A8                                              l1514 685A  
                                            l1530 18CE                                              l1610 2A42  
                                            l1602 2944                                              l1442 4156  
                                            l1434 4046                                              l1426 3F36  
                                            l2411 20DC                                              l2403 2038  
                                            l1451 5BA6                                              l1523 68B0  
                                            l1515 6846                                              l1531 18E8  
                                            l1611 2A7A                                              l1419 56C4  
                                            l1443 4178                                              l1435 4068  
                                            l1427 3F58                                              l2412 20F6  
                                            l2404 20A6                                              l1452 5BAE  
                                            l1524 68BE                                              l1540 19D2  
                                            l1532 1902                                              l1620 2AE8  
                                            l1612 2AC6                                              l1604 298E  
                                            l1436 408A                                              l1428 3F7A  
                                            l2421 2198                                              l2413 2110  
                                            l2405 205A                                              l1461 5CB0  
                                            l1453 5BB6                                              l1525 68D6  
                                            l1541 19EC                                              l1533 191C  
                                            l1701 4848                                              l1613 2A9E  
                                            l1605 29D2                                              l1437 40AC  
                                            l1429 3F9C                                              l4030 0A3E  
                                            l2430 2234                                              l2422 21AE  
                                            l2406 2070                                              l1462 5C68  
                                            l1550 1AD6                                              l1542 1A06  
                                            l1534 1936                                              l1710 492A  
                                            l1630 2B8A                                              l1622 2B06  
                                            l1438 40CE                                              l2431 224A  
                                            l2415 2130                                              l2407 208A  
                                            l1471 5CF6                                              l1519 68C6  
                                            l1551 1AF0                                              l1543 1A20  
                                            l1535 1950                                              l1711 4932  
                                            l1703 4874                                              l1615 2ABC  
                                            l1607 29F4                                              l1439 40F0  
                                            l4040 116A                                              l4032 0A8E  
                                            l2424 21CC                                              l2416 2146  
                                            l2408 20A4                                              l1480 58C8  
                                            l1472 5CFE                                              l1464 5C76  
                                            l1456 5BEC                                              l1448 5BC0  
                                            l1560 1BDA                                              l1552 1B0A  
                                            l1544 1A3A                                              l1536 196A  
                                            l1712 4946                                              l1704 48D0  
                                            l1608 2A12                                              l4033 0AA0  
                                            l2433 2268                                              l2425 21E2  
                                            l2409 2112                                              l1481 5884  
                                            l1473 5D12                                              l1449 5B9C  
                                            l1561 1BF4                                              l1553 1B24  
                                            l1545 1A54                                              l1537 1984  
                                            l1529 18B4                                              l1721 4990  
                                            l1625 2B2A                                              l2434 227E  
                                            l2418 2164                                              l1490 5926  
                                            l1482 588C                                              l1458 5C12  
                                            l1570 1CDE                                              l1562 1C0E  
                                            l1554 1B3E                                              l1546 1A6E  
                                            l1538 199E                                              l1730 4AAA  
                                            l1722 49B8                                              l1626 2B32  
                                            l4051 0FA4                                              l4043 0D1E  
                                            l4035 0BEE                                              l2427 2200  
                                            l2419 217A                                              l1483 5894  
                                            l1459 5C3A                                              l1571 1CF8  
                                            l1563 1C28                                              l1555 1B58  
                                            l1547 1A88                                              l1539 19B8  
                                            l1651 5ADA                                              l1643 5A1C  
                                            l1635 2BA4                                              l1619 2B90  
                                            l1627 2B56                                              l4052 0FE0  
                                            l2436 229E                                              l2428 2216  
                                            l2380 1E3E                                              l1492 599C  
                                            l1484 589C                                              l1572 1D12  
                                            l1564 1C42                                              l1556 1B72  
                                            l1548 1AA2                                              l1740 4BA6  
                                            l1732 4AD6                                              l1724 4A16  
                                            l1708 4906                                              l1636 2BB8  
                                            l2381 1E54                                              l1493 5954  
                                            l1469 5CD2                                              l1573 1D2C  
                                            l1565 1C5C                                              l1557 1B8C  
                                            l1549 1ABC                                              l1733 4B32  
                                            l1725 4A6E                                              l1645 5A5C  
                                            l1637 2BCC                                              l3501 2734  
                                            l4062 4230                                              l4054 10F4  
                                            l2390 1F16                                              l2382 1E6E  
                                            l2374 1E1E                                              l1478 58A6  
                                            l1574 1D46                                              l1566 1C76  
                                            l1558 1BA6                                              l1718 4964  
                                            l1646 5A9E                                              l1582 27F0  
                                            l1590 27E6                                              l1750 2C8E  
                                            l3502 276E                                              l5030 6BC8  
                                            l4063 4264                                              l4055 112C  
                                            l4047 0DBA                                              l4039 0C2A  
                                            l2391 1F2C                                              l2383 1E88  
                                            l2375 1DD2                                              l1495 5962  
                                            l1487 58D8                                              l1479 587A  
                                            l1575 1D60                                              l1567 1C90  
                                            l1559 1BC0                                              l1671 580A  
                                            l1727 4B44                                              l1655 5B4E  
                                            l1583 27B4                                              l1751 2CB0  
                                            l3503 27A8                                              l4064 42A2  
                                            l4056 1140                                              l4048 0E54  
                                            l2392 1F46                                              l2384 1EF6  
                                            l2376 1DE8                                              l1576 1D7A  
                                            l1568 1CAA                                              l1672 57A8  
                                            l1736 4B66                                              l1728 4A9C  
                                            l1648 5B2C                                              l1584 281E  
                                            l1760 2DE2                                              l1752 2CD2  
                                            l3600 88D8                                              l5024 6BB0  
                                            l4065 42E2                                              l4057 118E  
                                            l2393 1F60                                              l2385 1EAA  
                                            l2377 1E02                                              l1489 58FE  
                                            l1577 1D94                                              l1569 1CC4  
                                            l1681 5850                                              l1657 5B72  
                                            l1649 5ACC                                              l1585 27BE  
                                            l1761 2E04                                              l1753 2CF4  
                                            l3601 8876                                              l3450 4DF6  
                                            l2394 1FCE                                              l2386 1EC0  
                                            l2378 1E1C                                              l1682 5858  
                                            l1674 57B6                                              l1666 56F8  
                                            l1738 4B8A                                              l1658 5B7A  
                                            l1594 284E                                              l1586 27C6  
                                            l1770 2F36                                              l1762 2E26  
                                            l1754 2D16                                              l1746 2C06  
                                            l4067 43B4                                              l2395 1F82  
                                            l2387 1EDA                                              l2379 1E8A  
                                            l1683 586C                                              l1739 4B92  
                                            l1659 5B8E                                              l1595 2876  
                                            l1587 27CE                                              l1771 2F58  
                                            l1763 2E48                                              l1755 2D38  
                                            l1747 2C28                                              l5027 6BC2  
                                            l2820 451C                                              l2812 445E  
                                            l2396 1F98                                              l2388 1EF4  
                                            l1668 5738                                              l1692 472E  
                                            l1588 27D6                                              l1772 2F7A  
                                            l1764 2E6A                                              l1756 2D5A  
                                            l1748 2C4A                                              l3620 64B4  
                                            l3540 6F22                                              l3532 6EF2  
                                            l6101 34D0                                              l4069 4404  
                                            l2821 4534                                              l2813 4476  
                                            l2397 1FB2                                              l2389 1F62  
                                            l1669 577A                                              l1693 4756  
                                            l1597 28A6                                              l1589 27DE  
                                            l1773 2F9C                                              l1765 2E8C  
                                            l1757 2D7C                                              l1749 2C6C  
                                            l3621 6444                                              l3541 6F2C  
                                            l6110 35A2                                              l6102 34D4  
                                            l2830 4608                                              l2822 454C  
                                            l2814 448E                                              l2398 1FCC  
                                            l1598 28CE                                              l1774 2FBE  
                                            l1766 2EAE                                              l1758 2D9E  
                                            l2910 3970                                              l2902 388C  
                                            l3622 6440                                              l3614 63F8  
                                            l3630 6278                                              l3470 97C0  
                                            l3702 931E                                              l3534 6F46  
                                            l3542 6F36                                              l2831 4620  
                                            l2823 4562                                              l2815 44A6  
                                            l2399 203A                                              l1679 582C  
                                            l1695 47B4                                              l1767 2ED0  
                                            l1759 2DC0                                              l2903 38B8  
                                            l3607 82A6                                              l3463 763E  
                                            l3623 647A                                              l3615 639E  
                                            l3631 62D0                                              l3703 92EA  
                                            l3543 6F40                                              l3535 6EFA  
                                            l6112 35B8                                              l2840 46C8  
                                            l2832 4638                                              l2824 457A  
                                            l2816 44BE                                              l1696 480C  
                                            l1768 2EF2                                              l3608 824C  
                                            l3464 7648                                              l3624 6476  
                                            l3616 63F6                                              l3800 8E3A  
                                            l3449 4E6E                                              l6105 356E  
                                            l2841 46D6                                              l2833 4650  
                                            l2825 4592                                              l2817 44D6  
                                            l1689 4702                                              l1769 2F14  
                                            l3553 73AC                                              l3609 82A4  
                                            l3465 7650                                              l3481 2362  
                                            l3801 8E54                                              l3537 6F04  
                                            l6122 3628                                              l6114 35C2  
                                            l2834 4668                                              l2826 45AA  
                                            l2818 44EE                                              l1698 48E4  
                                            l2906 3930                                              l3554 72F0  
                                            l3634 62E4                                              l3714 8D3A  
                                            l3730 7E7C                                              l3538 6F0E  
                                            l6107 357E                                              l6211 60A8  
                                            l2835 4680                                              l2827 45C2  
                                            l2819 4506                                              l1699 483A  
                                            l3619 640A                                              l3635 638E  
                                            l3491 2524                                              l3483 23B8  
                                            l3715 8CF2                                              l3723 8EE0  
                                            l3731 7E24                                              l4451 4BCA  
                                            l3539 6F18                                              l6220 612A  
                                            l6212 6090                                              l6204 602A  
                                            l5404 97FA                                              l2836 4694  
                                            l2828 45D8                                              l5412 6A72  
                                            l2860 5280                                              l3564 72D6  
                                            l3580 71E6                                              l3636 631E  
                                            l3644 80E0                                              l6140 3CAC  
                                            l3484 2528                                              l3476 22C6  
                                            l3708 92D2                                              l3716 8D38  
                                            l3724 8E9E                                              l3732 7E7A  
                                            l4452 4BDA                                              l3740 7D84  
                                            l3820 7844                                              l4461 5008  
                                            l6205 603A                                              l2829 45F0  
                                            l5413 6AC2                                              l2909 3944  
                                            l3557 734A                                              l3565 721A  
                                            l3637 631A                                              l3629 62D2  
                                            l3645 8098                                              l6141 3CA8  
                                            l3493 25BC                                              l3709 929E  
                                            l3725 8EB8                                              l4453 4BEA  
                                            l3741 7DDA                                              l3813 7800  
                                            l3901 7D68                                              l4462 5018  
                                            l6126 364E                                              l6214 60DA  
                                            l6206 6058                                              l5430 5D3E  
                                            l2838 46B8                                              l2870 5332  
                                            l2854 522A                                              l3558 7392  
                                            l3590 7404                                              l3638 6354  
                                            l3646 80DE                                              l6150 3DC6  
                                            l3486 241A                                              l3478 23BC  
                                            l3670 89D6                                              l3734 7E90  
                                            l4454 4BFA                                              l3806 9188  
                                            l3814 77A6                                              l3830 7A84  
                                            l3902 7CEE                                              l3910 7CC8  
                                 ??_un_block_code 00C7                                              ?_map 006E  
                                            l4463 5028                                              l6127 3656  
                                            l6119 35E2                                              l6215 60CE  
                                            l2871 5368                                              l2863 52C6  
                                            l3575 7200                                              l3591 744A  
                                            l3639 6350                                              l6143 3CF2  
                                            l3663 905A                                              l3495 25F4  
                                            l3487 2456                                              l3671 8A2E  
                                            l3735 7EB2                                              l4455 4C08  
                                            l3743 7DF0                                              l3807 9146  
                                            l3815 77FE                                              l3831 7ADC  
                                            l3911 7C4E                                              l4464 5038  
                                            l6128 3658                                              l6080 3364  
                                            l6208 606A                                              l5440 5E38  
                                            l5408 9802                                              l5424 9912  
                                            l2848 52E8                                              l3568 7274  
                                            l3576 7144                                              l3656 84D6  
                                            l6160 3E34                                              l6136 3C6C  
                                            l3664 902E                                              l3496 262E  
                                            l3488 2492                                              l4456 4C3E  
                                            l3744 7E12                                              l3808 9160  
                                            l3840 7F1C                                              l3904 7D4C  
                                            l3920 7BAE                                              l6209 605E  
                                            l5441 5E5E                                              l5433 5E3A  
                                            l5425 991C                                              l2857 5244  
                                            l2881 3684                                              l3569 72BC  
                                            l3657 847C                                              l6153 3DFC  
                                            l6145 3D1A                                              l6137 3C68  
                                            l3497 2668                                              l3489 24CE  
                                            l3761 8168                                              l3817 7832  
                                            l3905 7D66                                              l3913 7CAC  
                                            l6170 3016                                              l5442 5E7E  
                                            l5434 5D72                                              l2866 52E6  
                                            l2882 3690                                              l3586 7454  
                                            l3658 84D4                                              l6162 3E78  
                                            l6154 3DDE                                              l6146 3DC8  
                                            l3690 81F8                                              l3754 7FC4  
                                            l3762 8120                                              l3826 7A66  
                                            l3850 7A08                                              l3914 7CC6  
                                            l3922 7C0C                                              l4467 51DE  
                                            l6091 3488                                              l6171 3012  
                                            l6219 60F8                                              l5435 5D98  
                                            l5419 96E0                                              l2891 377A  
                                            l2883 36C6                                              l3579 719E  
                                            l3587 73BE                                              l6163 3E9C  
                                            l6147 3D78                                              l3499 26FC  
                                            l3683 87D4                                              l3691 81B0  
                                            l3739 7DDC                                              l3755 7F6A  
                                            l3763 8166                                              l3851 7A3C  
                                            l3923 7C26                                              l3931 7B6C  
                                            l6092 3466                                              l6084 33B0  
                                            l6172 3026                                              l5436 5DBA  
                                            l6164 3EC6                                              l6148 3DA0  
                                            l3676 884E                                              l3684 877A  
                                            l3692 81F6                                              l3756 7FC2  
                                            l3836 7F1E                                              l3932 7B86  
                                            l6093 3474                                              l6085 33AC  
                                            l6181 3244                                              l5701 74E4  
                                            l5437 5DD0                                              l5429 5D2C  
                                            l2869 530E                                              l2893 380E  
                                            l6165 3ED2                                              l3669 8A30  
                                            l3677 87F4                                              l3685 87D2  
                                            l3829 7ADE                                              l3837 7ECE  
                                            l3773 7728                                              l6094 3478  
                                            l6190 32C0                                              l6182 3226  
                                            l6174 3056                                              l5702 74D8  
                                            l5438 5DF0                                              l5462 8B10  
                                            l2894 37F4                                              l2886 3700  
                                            l6166 3ED4                                              l3678 884C  
                                            l3790 706E                                              l3774 76E2  
                                            l6087 340C                                              l6079 3368  
                                            l6191 32DE                                              l6175 3052  
                                            l5439 5E14                                              l3839 7F02  
                                            l3847 7A3E                                              l3919 7C28  
                                            l3775 7726                                              l5640 950A  
                                            l6088 33D0                                              l6176 3066  
                                            l5472 8FB4                                              l2896 37FE  
                                            l2888 378A                                              l3792 70AA  
                                            l3848 79BA                                              l3856 8CCE  
                                            l3928 7B88                                              l6097 34E6  
                                            l6193 3302                                              l6177 3084  
                                            l5705 7518                                              l5449 9548  
                                            l5473 8F6A                                              l2889 376A  
                                            l3793 70DE                                              l3857 8C86  
                                            l3865 78E6                                              l3929 7B0E  
                                            l3937 8052                                              l6098 34AC  
                                            l6194 3320                                              l5706 7526  
                                            l5458 8AE4                                              l2898 38C8  
                                            l3858 8CCC                                              l3866 785E  
                                            l3874 89BA                                              l3938 7FFA  
                                            l5707 753C                                              l5459 8AFA  
                                            l2899 3878                                              l3795 7122  
                                            l3875 896A                                              l3883 8F4A  
                                            l3939 8050                                              l6188 327C  
                                            l3868 78B0                                              l3884 8F0C  
                                            l3892 8C60                                              l3789 70E0  
                                            l3869 78E4                                              l3877 899E  
                                            l3893 8C18                                              l6198 9734  
                                            l5654 7566                                              l3878 89B8  
                                            l3886 8F2E                                              l3894 8C5E  
                                            l6199 972A                                              l3799 8E7C  
                                            l3887 8F48                                              l4975 871C  
                                            l5880 702C                                              l5872 6F9C  
                                            l5849 9770                                              l5881 7020  
                                            l4977 873A                                              l5874 7008  
                                            l5698 749E                                              l5883 7048  
                                            l5875 6FF8                                              l5699 74B6  
                                            l4988 927A                                              _ADON 007E10  
                           __size_of_sort_pitches 0118                                              STR_1 FFE6  
                                            STR_2 FFE1                                              STR_3 FFFA  
                                            STR_4 FFF0                                              STR_5 FFDC  
                                            STR_6 FFEB                                              STR_7 FFF5  
                                            STR_8 FFD7                                              STR_9 FD70  
                                            _BRGH 007D62                            __end_of_random_pitches 8C0E  
                                            _CREN 007D5C                                              _T0CS 007EAD  
                                            _IPEN 007E87                                              _PEIE 007F96  
                                            _RBIE 007F93                                              _RBIF 007F90  
                                            _TMR0 000FD6                                              _TMR1 000FCE  
                                            _TMR2 000FCC                                              _SPEN 007D5F  
                                            _PPQN 01F6                                              _TRMT 007D61  
                                            _TXIF 007CF4                                              _TXEN 007D65  
                                            _SYNC 007D64                          _LAST_NOTE_MODE_TRANSPOSE 0017  
                                            _main 6AE6                                              _drum 0037  
                                            _load 99EC                                              _rand 83E0  
                                            fsr0h 000FEA                                              fsr1h 000FE2  
                                            indf0 000FEF                                              fsr2h 000FDA  
                                            fsr0l 000FE9                                              indf2 000FDF  
                                            fsr1l 000FE1                                              map@x 006E  
                                            fsr2l 000FD9                                              btemp 003F  
                                __end_of_ADC_Read 96B8                      ??_key_press_release_note_off 0060  
                                            prodh 000FF4                                              prodl 000FF3  
              keyboard_eight_note_efficient@index 007B                                   ??_setupArpeggio 0061  
                                            start 000C                                Lcd_Print_Char@i_59 0066  
              keyboard_eight_note_efficient@pitch 007A                                     __CFG_IESO$OFF 000000  
                                 ___fldiv@new_exp 0098                                Lcd_Print_Char@data 0063  
                            __end_of_analogInputs 944C                                    _drumCCTypeMenu 0162  
                                 __end_of_Lcd_Cmd 98A6                                     __CFG_MCLRE$ON 000000  
                                 _rotateArrayLeft 88DE                                      ___param_bank 000000  
                                           ??_ISR 0012                                             ??_map 0082  
                 __end_of_setControllerResolution 97DE                         _arpeggiatorLatchOnOffMenu 0123  
                                      _Lcd_SetBit 9782                                             l30000 45AA  
                                           l30012 45D8                                             l30030 4620  
                                           l30006 45C2                                             l30024 4608  
                                           l30042 4650                                             l30018 45F0  
                                           l30036 4638                                             l31004 3EC6  
                                           l30054 4680                                             l30230 38C8  
                                           l30048 4668                              programChange@channel 0062  
                                           l31130 6D38                                             l31134 6D50  
                                           l31144 6D98                                             l30168 378A  
                                           l31138 6D5E                                             l31170 6E06  
                                           l30282 0A98                                             l30266 0A36  
                                           l31164 6E02                                             l31502 51A4  
                                           l30294 0BE6                                             l30374 8714  
                                           l33120 8364                                             l31194 97B8  
                                           l30388 8732                                             l33128 837E  
                                           l32424 7A5E                                             l32610 6226  
                                           l26300 9594                                             l32700 8BFA  
                                           l32630 6908                                             l32634 691A  
                                           l32618 6258                                             l32708 790A  
                                           l27044 56C4                                             l32638 6930  
                                           l32718 7990                                             l27118 68A8  
                                           l32590 6176                                             l33640 82D4  
                                           l32656 69D2                                             l32648 69A0  
                                           l32680 8B66                                             l26424 5CF6  
                                           l32584 6160                                             l31778 75B4  
                                           l26290 9566                                             l26356 5BE4  
                                           l32596 6194                                             l32694 8BAC  
                                           l32686 8B92                                             l26526 59E2  
                                           l26614 5B72                                             l33648 8330  
                                           l26720 492A                                             l26632 46FA  
                                           l26458 58D0                                             l26386 5C6E  
                                           l26546 5A14                                             l27282 2B2A  
                                           l26740 56F0                                             l26488 595A  
                                           l26808 5850                                             l26576 5AD2  
                                           l26770 57AE                                             l26916 4B8A  
                                           l26828 495C                                             l26676 4840  
                                   ___fltol@sign1 00C0                                             l26872 4AA2  
                                 __end_of___aldiv 754E                                             l29930 448E  
                                           l29924 4476                                             l29942 44BE  
                                           l29918 445E                                             l29960 4506  
                                           l29936 44A6                                             l29954 44EE  
                                           l29972 4534                                             l29948 44D6  
                                           l29982 4562                                             l29966 451C  
                                           l29994 4592                                             l29978 454C  
                                           l29988 457A                                   __end_of___fladd 3674  
                                           ?_main 0007                                             ?_load 0007  
                                 __end_of___fldiv 3EF0                                   __end_of___awdiv 626E  
                                ?_calculate_alpha 0007                                   __end_of___flneg 9782  
                                           _EEADR 000FA9                                             STR_10 FD64  
                                           STR_11 FD64                                             STR_12 FD6B  
                                           STR_20 FFC3                                             STR_13 FF9E  
                                           STR_21 FDFD                                             STR_14 FF88  
                                           STR_30 FDA8                                             STR_22 FD75  
                                           STR_15 FF93                                             STR_23 FF18  
                                           STR_31 FEC4                                             STR_16 FD6B  
                                           STR_24 FF58                                             STR_32 FE4D  
                                           STR_40 FE3D                                             STR_17 FF9E  
                                           STR_41 FFCD                                             STR_25 FED2  
                                           STR_33 FD97                                             STR_18 FF88  
                                           STR_50 FE8E                                             STR_34 FF4C  
                                           STR_42 FE98                                             STR_26 FE2D  
                                           STR_19 FF93                                             STR_51 FF0F  
                                           STR_43 FFD2                                             STR_35 FFBB  
                                           STR_27 FEE0                                             STR_44 FFCD  
                                           STR_36 FFB3                                             STR_60 FEFC  
                                           STR_52 FDDB                                             STR_28 FDCA  
                                 __end_of___awmod 69E8                                             STR_61 FFC8  
                                           STR_45 FEB6                                             STR_53 FE89  
                                           STR_29 FE6B                                             STR_37 FD86  
                                           STR_54 FFDC                                             STR_70 FF7C  
                                           STR_38 FF25                                             STR_46 FEEE  
                                           STR_62 FE1D                                             STR_71 FFA9  
                                           STR_55 FF0A                                             STR_63 FEA7  
                                           STR_39 FDEC                                             STR_47 FDB9  
                                           STR_72 FF7C                                             STR_56 FFF0  
                                           STR_48 FF32                                             STR_64 FE7A  
                                           STR_73 FFA9                                             STR_49 FDDF  
                                           STR_65 FF3F                                             STR_57 FE5C  
                                           STR_74 FF7C                                             STR_66 FF70  
                                           STR_58 FF64                                             STR_59 FF6B  
                                           STR_67 FFA9                                             STR_75 FE0D  
                                           STR_68 FF7C                                   __end_of___lbmod 8354  
                                           STR_69 FFA9                                   __end_of___flmul 3336  
                                 __end_of___fltol 705A                                             _CMCON 000FB4  
                                           _T0CON 000FD5                                             _T1CON 000FCD  
                                           _T2CON 000FCA                                             _LATCH 0020  
                                           u51120 523A                                             u51050 5206  
                                           u51230 52BA                                             u51150 5254  
                                           u52040 3278                                             u52120 6FBA  
                                           u51090 5220                                             u45020 8AF2  
                                           u51260 52DA                                             u52125 6FB0  
                                           u52310 85F0                                             u52070 32CE  
                                           u51350 5340                                             u52080 32EC  
                                           u52160 7032                                             u52240 60E4  
                                           u45040 8B08                                             u51610 343C  
                                           u52410 8DA6                                             u60260 837E  
                                           u51620 344C                                             u45060 8B20  
                                           u52340 8D6C                                             u51630 344E  
                                           u52430 8DBC                                             u51390 5374  
                                           u45240 97EC                                             u52290 85BA  
                                           u51475 4336                                             u51820 35DE  
                                           u51660 3490                                             u54310 374A  
                                           u45255 97EE                                             u46080 5B82  
                                           u45700 592C                                             u45540 5CA0  
                                           u46420 5780                                             u46260 48D4  
                                           u46180 4812                                             u51870 3634  
                                           u51790 35C6                                             u54510 3910  
                                           u54430 3858                                             u54600 0A94  
                                           u45640 5D06                                             u45480 5C40  
                                           u46360 493A                                             u54370 37D4  
                                           u51980 3072                                             u54700 0D7C  
                                           u54620 0BE2                                             u51990 31E8  
                                           u54710 0E0E                                             u45760 598C  
                                           u46480 57FA                                             u45920 5AA4  
                                           u47600 2AB6                                             u54810 1194  
                                           u58010 7C36                                             u51995 31DE  
                                           u54900 852E                                             u54660 0CEA  
                                           u45860 59F2                                             u46580 5860  
                                           u57300 4C62                                             u54910 8566  
                                           u54750 0FC8                                             u54830 872E  
                                           u54680 0CFC                                             u46760 4B36  
                                           u46680 4A74                                             u47800 2B76  
                                           u57320 4C6E                                             u54850 8754  
                                           u56610 3E30                                             u57410 4D92  
                                           u67010 6B34                                             u54907 8524  
                                           u57315 4C64                                             u54860 8756  
                                           u46860 4B9A                                             u45980 5B1E  
                                           u47820 2B7E                                             u47740 2B48  
                                           u56380 925E                                             u57340 4CBA  
                           _processPotentiometers 419E                                             u54917 855C  
                                           u57510 4DCE                                             u57430 4D9E  
                                           u57270 4C3E                                             u58070 7B96  
                                           u57335 4C70                                             u47920 74E8  
                                           u47680 2B00                                             u59200 61BC  
                                           u56640 3E86                                             u57360 4D5A  
                                           u57280 4C56                                             u59040 78F4  
                                           u57505 4DC4                                             u57425 4D94  
                                           u67025 6B36                                             u56650 3EAA  
                                           u57530 4DDA                                             u57450 4DAA  
                                           u57610 7F2C                                             u57355 4CBC  
                                           u67107 95BA                                             u59220 6244  
                                           u57380 4D82                                             u56805 6E4E  
                                           u57525 4DD0                                             u57445 4DA0  
                                           u67117 9126                                             u58270 82C2  
                                           u57550 4DE6                                             u57470 4DB6  
                                           u57710 7A4C                                             u67070 6BAC  
                                           u56735 9518                                             u67207 6D88  
                                           u67127 95F4                                             u57375 4D5C  
                                           u57295 4C58                                             u56736 951A  
                                           u67217 9696                                             u67137 962E  
                                           u57545 4DDC                                             u57465 4DAC  
                                           u57625 7F2E                                             u57490 4DC2  
                                           u57650 7F52                                             u67090 6BBE  
                                           u67227 861A                                             u67147 9668  
                                           u57395 4D84                                             u59340 8C08  
                                           u67237 8648                                             u67157 6DF8  
                                           u59165 843A                                             u57485 4DB8  
                                           u56790 6E4C                                             u59270 6958  
                                           u59166 8440                                             u58470 84E4  
                                           u57830 8F58                                             u67247 838C  
                                           u67167 6E50                                             u59167 844E  
                                           u56784 6E3A                                             u59360 799E  
                                           u67257 83A4                                             u67177 6E5A  
                                           u56785 6E36                                             i2l858 8684  
                                           u59290 69BE                                             u57770 89C8  
                                           i2l859 8694                                             u67267 9898  
                                           u67187 6E64                                             u58740 7106  
                                           u58900 7840                                             u67197 6E8E  
                                           u58485 84E6                                             u58670 7FD2  
                                           u57950 7CD6                                             u58760 712C  
                                           u57890 7D76                                             u58755 7108  
                                           u58685 7FD4                                             u58880 782E  
                                   _controlChange 9192                                             u59950 88D4  
                                           u59965 88D6                                             _SPBRG 000FAF  
                                           _PORTA 000F80                                             _PORTB 000F81  
                                           _PORTC 000F82                                             _PORTD 000F83  
                                           _PORTE 000F84                                      _sort_pitches 64BA  
                         __size_of_Lcd_Set_Cursor 0062                                             _TRISA 000F92  
                                           _TRISB 000F93                                             _TRISC 000F94  
                                           _TRISD 000F95                                             _TRISE 000F96  
                                           _TXREG 000FAD                    ?_keyboard_eight_note_efficient 0007  
                                   __CFG_PWRT$OFF 000000                             __end_of_playThisNote8 2BE2  
                                   __CFG_WRT0$OFF 000000                                     __CFG_WRT1$OFF 000000  
                      __size_of_keyboardTranspose 02A6                                     __CFG_WRT2$OFF 000000  
                                   __CFG_WRT3$OFF 000000                       encoderInputsBuxton@pinstate 000C  
                                  __CFG_EBTR0$OFF 000000                                    __CFG_FCMEN$OFF 000000  
                                  __CFG_EBTR1$OFF 000000                                    __CFG_EBTR2$OFF 000000  
                                  __CFG_EBTR3$OFF 000000                                     __CFG_WRTB$OFF 000000  
                                 __end_of_display 998A                                     __CFG_WRTC$OFF 000000  
                                   __CFG_WRTD$OFF 000000                                    Read_b_eep@badd 0060  
                                 ??_processOctave 007E                                    __CFG_EBTRB$OFF 000000  
                                           _flag1 000F                                             _flag2 000E  
                                   _transposeMenu 0168                                             _clock 99F2  
                 ?_keyboard_sharps_only_efficient 0007                  ??_keyboard_sharps_only_efficient 0077  
             __size_of_key_press_release_note_off 0168                            Write_b_eep@GIE_BIT_VAL 0063  
                                           _randx 01EF                                             _setup 8A42  
                                           _srand 99C8                                             _state 00ED  
                                 __end_of_sendUSB 6E9E                                       copy_array@i 0060  
                                 __end_of_sendOut 6DBA                                    __pbitbssCOMRAM 0008  
                                 __end_of_noteOff 94DC                                    __CFG_BOREN$OFF 000000  
                                           tablat 000FF5                                             ltemp0 003F  
                                           ltemp1 0043                                             ltemp2 0047  
                          _playDiatonicTriadMajor 5A06                                  _suppress_note_on 0014  
                  __size_of_finish_arpeggio_setup 001E                            _playDiatonicTriadMinor 46EC  
                                           plusw1 000FE3                                             plusw2 000FDB  
                   __end_of_finish_arpeggio_setup 9926                         __size_of_Lcd_Print_String 0084  
              __end_of_delete_notes_from_arpeggio 96EC                        _delete_notes_from_arpeggio 96B8  
                                           ttemp0 003F                                             ttemp1 0042  
                                           ttemp2 0045                                             ttemp3 0048  
                  keyboardTranspose@semitone_temp 00EA                                             status 000FD8  
                                   _UN_LATCH_MODE 001F                                             wtemp0 003F  
                                           wtemp1 0041                                             wtemp2 0043  
                                           wtemp3 0045                                             wtemp4 0047  
                                           wtemp5 0049                                             wtemp6 0040  
                              _encoder_state_last 017E                              _LAST_NOTE_MODE_RESET 0016  
                         __size_of_Lcd_Print_Char 0084                       __size_of_buttonInputsSerial 007C  
                                   ?_Function_A_1 0007                                     ?_Function_A_2 0007  
                                   ?_Function_A_3 0007                                     ?_Function_C_1 0007  
                                   ?_Function_C_2 0007                                     ?_Function_C_3 0007  
                                   ?_Function_D_1 0007                                     ?_Function_D_2 0007  
                                   ?_Function_D_3 0007                                     ?_Function_D_4 0007  
                                   ?_Function_E_1 0007                                     ?_Function_D_5 0007  
                                   ?_Function_E_2 0007                                     ?_Function_G_1 0007  
                                   ?_Function_G_2 0007                                     ?_Function_G_3 0007  
                                   ?_Function_G_4 0007                                     ?_Function_H_1 0007  
                                   ?_Function_H_2 0007                                     ?_Function_H_3 0007  
                                   ?_Function_H_4 0007                                     ?_Function_H_5 0007  
                                   ?_Function_H_6 0007                                     ?_Function_H_7 0007  
                                   ?_Function_H_8 0007                                     ?_Function_H_9 0007  
                                 __initialization 6BDA                                      __end_of_main 6BDA  
                                    __end_of_load 99F2                                      __end_of_rand 8468  
                                 ??_programChange 0062                                        _Read_b_eep 9926  
                                __end_of_Busy_eep 99FE                               _half_diminished_7th 02CC  
                         _initializeSaveSlotsOnce 9372                                        _Function_A 73B2  
                                      _Function_B 8864                                        _Function_C 8086  
                                      _Function_D 81A8                                        _Function_E 8CEA  
                                      _Function_F 8E92                                        _Function_G 8118  
                                      _Function_H 76D8                           __size_of_loadFromEEPROM 023C  
                                          ??_main 02E6                            _arpeggiatorOctavesMenu 012F  
                                          ??_load 0060                               _ARPEGGIO_IS_PLAYING 0032  
                                  ?_controlChange 0060                                __size_of_Lcd_Clear 0016  
                                   __activetblptr 000002                                   ??_displayDigits 0007  
                                    ?_playSeventh 0007                                __size_of_Lcd_Start 008C  
                      rotateArrayLeft@array_index 0067                              displayDigits@lowByte 000A  
                                 ??_displayString 0007                                            ?_clock 0007  
                                          _ADCON0 000FC2                                            _ADCON1 000FC1  
                                          _ADCON2 000FC0                                            _ADRESH 000FC4  
                                          _EEADRH 000FAA                                            _ADRESL 000FC3  
                                          _EEDATA 000FA8                                            _EECON2 000FA7  
                                          _T08BIT 007EAE                                            ?_setup 0007  
                                          ?_srand 0060                      calculate_pulse_length@s_tick 00C4  
                                 __CFG_BBSIZ$1024 000000                                      ?_noteOffDrum 0060  
                   _which_functions_are_unblocked 0028                               saveToEEPROM@to_save 0064  
                                          _INT0IE 007F94                                            _INT0IF 007F91  
                                   ?_exitFunction 0007                                            i2l3011 6608  
                                          i2l3013 6658                                            i2l3014 667E  
                                          i2l3015 66A6                                            i2l3016 66CE  
                                          i2l3009 65DE                                            i2l5000 54EA  
                                          i2l5010 54DE                                            i2l5005 54B2  
                                          i2l5009 54D0                                            i2l5511 120A  
                                          i2l5520 12FE                                            i2l5521 1316  
                                          i2l5513 1264                                            i2l2970 3B00  
                                          i2l5522 1322                                            i2l2971 3A64  
                                          i2l5531 1426                                            i2l5515 12B0  
                                          i2l2980 3B3A                                            i2l2972 39A4  
                                          i2l5532 1424                                            i2l5516 12AE  
                                          i2l2981 3B32                                            i2l2973 39C0  
                                          i2l5533 1478                                            i2l5517 12EE  
                                          i2l2990 3B94                                            i2l2974 3AB0  
                                          i2l5542 14E2                                            i2l5534 1476  
                                          i2l5518 12EC                                            i2l2975 3AF8  
                                          i2l5551 15D6                                            i2l5543 1526  
                                          i2l5527 1382                                            i2l2992 3BAE  
                                          i2l5480 64C6                                            i2l5560 16EA  
                                          i2l5552 1604                                            i2l5544 1570  
                                          i2l5536 1488                                            i2l2985 3B5E  
                                          i2l5481 65BE                                            i2l5561 171E  
                                          i2l5537 14A0                                            i2l5529 13D2  
                                          i2l2986 3B60                                            i2l5482 64CC  
                                          i2l5554 1652                                            i2l5538 14AC  
                                          i2l2995 3BE8                                            i2l5563 1768  
                                          i2l5555 1684                                            i2l2996 3BEA  
                                          i2l5484 6544                                            i2l5580 1864  
                                          i2l5564 1796                                            i2l2989 3B92  
                                          i2l5573 180A                                            i2l2998 3C04  
                                          i2l5486 65BC                                            i2l2999 3C2A  
                                          i2l5479 65C8                                            i2l5575 1818  
                                          i2l5576 1844                                            i2l4995 540E  
                                          i2l4996 542A                                            i2l4997 5444  
                                          i2l4999 544E                                         ??_Lcd_Cmd 0061  
                                          _TMR0IE 007F95                                            _TMR0IF 007F92  
                                          _TMR1IE 007CE8                                            _TMR1IF 007CF0  
                                          _TMR2IE 007CE9                                            _TMR2IF 007CF1  
                                          _TMR0ON 007EAF                                            _TMR1ON 007E68  
                                          _TMR2ON 007E52                           __end_of_rotateArrayLeft 8956  
                                          _ON_OFF 002F                                  __end_of___xxtofl 613C  
                    __size_of_initializeMenuArray 0202                          __end_of_selectSlotOnBoot 98E8  
                                  ??_Function_A_1 00C7                                    ??_Function_A_2 00C7  
                                  ??_Function_A_3 00C7                                    ??_Function_C_1 00C7  
                                  ??_Function_C_2 00C7                                    ??_Function_C_3 00C7  
                                  ??_Function_D_1 00C7                                    ??_Function_D_2 00C7  
                                  ??_Function_D_3 00C7                                    ??_Function_D_4 00C7  
                                  ??_Function_E_1 00C7                                    ??_Function_D_5 00C7  
                                  ??_Function_E_2 00C7                                    ??_Function_G_1 00C7  
                                  ??_Function_G_2 00CC                                    ??_Function_G_3 006E  
                                  ??_Function_G_4 00C7                                    ??_Function_H_1 00C7  
                                  ??_Function_H_2 00CC                                    ??_Function_H_3 00C7  
                                  ??_Function_H_4 00C7                                    ??_Function_H_5 00C7  
                                  ??_Function_H_6 00C8                                    ??_Function_H_7 00C7  
                                  ??_Function_H_8 00C7                                    ??_Function_H_9 00C7  
                                   ?_panic_button 0007                             __end_of_resetArpeggio 955C  
                                  __CFG_XINST$OFF 000000                           __size_of_Function_H_6_1 009C  
                         __size_of_Function_H_6_2 00AA                           __size_of_Function_H_8_1 0076  
                         __size_of_Function_H_8_2 0064                           __size_of_Function_H_9_1 00A0  
                         __size_of_Function_H_9_2 00A0                           __size_of_Function_H_9_3 00A0  
                         __size_of_Function_H_9_4 00A0                                  ??_processDrumpad 0063  
                        readPotentiometers@i_3434 019B                          readPotentiometers@i_3435 019D  
                                          ___lmul 754E                                  ascii@LCD_STRINGS E8C3  
                                       ??___aldiv 0068                                         ??___fladd 00AC  
                                          ___wmul 9858                                         ??___fldiv 008F  
                                       ??___flneg 00A4                                         ??___flmul 0076  
                                       ??___fltol 00BC                             __size_of_doTheUnLatch 01BE  
                         ??_add_notes_to_arpeggio 0069                                       ?_Lcd_SetBit 0007  
                                __end_of_exitLoad 960C                                  __end_of_exitSave 9646  
                                          _octave 0050                                            clear_0 6C80  
                                          clear_1 6C8C                                            clear_2 6C98  
                                          clear_3 6CA4                                            clear_4 6CBC  
                                __end_of_menu_lcd 6F7C                                            _noteOn 8B2A  
                          ?_processPotentiometers 0007                                            _ttable F33D  
                            __size_of_displayTest 0080                                            _strcpy 9720  
                                       ??_display 000C                         _arpeggiatorNoteLengthMenu 0129  
                               _programChangeMenu 0144                                 _latch_was_pressed 001D  
                                    __pdataCOMRAM 004B                                         ?_ADC_Read 0060  
                        __size_of_printThisNumber 0014                                 _suppress_note_off 0013  
                                    __mediumconst E8C2                  keyboard_all_note_efficient@pitch 0076  
                                          tblptrh 000FF7                                            tblptrl 000FF6  
                                          tblptru 000FF8                                            srand@x 0060  
                                  ??_exitFunction 006E                                   Lcd_Set_Cursor@a 0064  
                                 Lcd_Set_Cursor@b 0063                                   Lcd_Set_Cursor@y 0066  
                                 Lcd_Set_Cursor@z 0065                      __size_of_encoderInputsBuxton 0080  
                                 noteOnDrum@pitch 0060                         loadFromEEPROM@baseAddress 01E2  
                                    ___xxtofl@arg 006A                                      ___xxtofl@exp 0069  
                            selectSlotOnBoot@slot 02E5                             __size_of_analogInputs 0048  
                                    ___xxtofl@val 0060                        _LAST_NOTE_MODE_KEY_RELEASE 0018  
                                      __accesstop 0060                           __end_of__initialization 6CC2  
                                 __CFG_PBADEN$OFF 000000                                        ___flneg@f1 00A0  
              __end_of_key_press_release_note_off 5E82                        _key_press_release_note_off 5D1A  
                                   _MAX_NUM_NOTES F39D                                      _doTheUnLatch 51E0  
                               __end_of_Lcd_Clear 99A0                          __size_of_processKeyboard 006C  
                                   ___rparam_used 000001                                    ??_panic_button 0063  
                               _button_state_last 00D4                                        ___fltol@f1 00B8  
                           __end_of_digitalInputs 9290                                 __end_of_Lcd_Start 83E0  
                   processPotentiometers@highByte 0067                     __size_of_setControllerNumbers 04F6  
                                  __pcstackCOMRAM 0007                                        ___inthi_sp 06B2  
                          _diatonic_seventh_major F2A7                         ??_initializeSaveSlotsOnce 00B4  
                    ?_keyboard_all_note_efficient 0007                              initializeMenuArray@i 0068  
                                    __pidataBANK0 99D8                                      __pidataBANK1 9940  
                                    __pidataBANK2 907E                                      __pidataBANK3 8DC2  
                          _diatonic_seventh_minor F26B                               buttonInputsSerial@i 0064  
                                   __end_of_clock 99F8                                       ?_Read_b_eep 0060  
                                   _stored_octave 0031                                     __end_of_setup 8AB6  
                                   __end_of_srand 99D8                                   ??_controlChange 0062  
                                     ?_Function_A 0007                                       ?_Function_B 0007  
                                     ?_Function_C 0007                                       ?_Function_D 0007  
                                     ?_Function_E 0007                                       ?_Function_F 0007  
                                     ?_Function_G 0007                                       ?_Function_H 0007  
                     _arpeggiatorLastNoteModeMenu 00DC                      _CONTROL_CHANGE_IS_BEING_SENT 0031  
                             ADC_Read@adc_channel 0064                           Function_C_2@array_index 00C8  
                                   ?_playArpeggio 0007                              _number_of_interrupts 02C4  
                                  _Lcd_Set_Cursor 8FBE                                        ??_ADC_Read 0062  
                                   ?_saveToEEPROM 0007                                      _analogInputs 9404  
                    __end_of_pentatonic_major_key F39D                                   _slidepotsCCMenu 014D  
                      add_notes_to_arpeggio@pitch 0070                                  playSeventh@pitch 0069  
delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT 006A                        __end_of_readPotentiometers 1198  
                                         ??_clock 0060                                   findArrayIndex@i 0062  
                    __end_of_processEncoderBuxton 0A30                                           ??_setup 0060  
                                         ??_srand 0062                             displayDigits@highByte 000B  
                                      __pbssBANK0 00CC                                        __pbssBANK1 0100  
                                      __pbssBANK2 0200                                        __pbssBANK3 0369  
                                      _doTheLatch 98E8                                     ?_playThisNote 0007  
                                _Lcd_Print_String 84EC                         keyboardTranspose@keyPress 000A  
                             __size_of_Lcd_SetBit 0030                                         ?_Busy_eep 0007  
                    __end_of_pentatonic_minor_key F392                                  ?_rotateArrayLeft 0007  
                          _drum_button_state_last 0038                                    _Lcd_Print_Char 8570  
                        ??_calculate_pulse_length 00C4                      ??_delete_notes_from_arpeggio 0069  
                                    _DISPLAY_MODE 00EE                                        _clear_row1 9830  
                                      _clear_row2 9808                                           ?___wmul 0060  
                          saveToEEPROM@byte_count 00B2                      playDiatonicTriadMajor@i_1713 0067  
                              __size_of_playTriad 0184                                __size_of_pitchBend 0048  
                   ??_keyboard_all_note_efficient 0076                                Lcd_SetBit@data_bit 0060  
                                  _loadFromEEPROM 4BAE                            __end_of_Lcd_Set_Cursor 9020  
                                   ??_Write_b_eep 0063                                    ??_playArpeggio 000C  
                         __size_of_ADC_Initialize 0014                                           ?_strcpy 0060  
                         Function_C_3@array_index 00C8                                  Function_H_1@temp 00C7  
                               _number_to_display 004B                                        _eepromMenu 013B  
                                      _eepromExit 9646                           __size_of_findArrayIndex 003C  
                                  ??_saveToEEPROM 0064                                           i2l22924 65D6  
                                         _INTEDG0 007F8E                                           _DRUM_CC 00F5  
                                       ?___xxtofl 0060                                           _OCTAVES 004E  
              findArrayIndex@pitch_of_key_release 0061                              __end_of_Function_A_1 73B2  
                int2string@number_to_display_temp 0064                              __end_of_Function_A_2 72DC  
                            __end_of_Function_A_3 7206                              __end_of_Function_C_1 82C6  
                            __end_of_Function_C_2 64BA                              __end_of_Function_C_3 6394  
                            __end_of_Function_D_1 84EC                              __end_of_Function_D_2 907E  
                            __end_of_Function_D_3 8A42                              __end_of_Function_D_4 8864  
                            __end_of_Function_D_5 87EA                              __end_of_Function_E_1 9328  
                            __end_of_Function_E_2 92DC                              __end_of_Function_G_1 7EBA  
                            __end_of_Function_G_2 7E1A                              __end_of_Function_G_3 9138  
                            __end_of_Function_G_4 7FF0                              __end_of_Function_H_1 7130  
                            __end_of_Function_H_2 8E92                              __end_of_Function_H_3 9192  
                            __end_of_Function_H_4 784A                              __end_of_Function_H_5 7AFA  
                            __end_of_Function_H_6 8CEA                              __end_of_Function_H_7 78F8  
                            __end_of_Function_H_8 8C7C                              __end_of_Function_H_9 8086  
                        ?_setControllerResolution 0007                              __size_of_playSeventh 0192  
                 __end_of_initializeSaveSlotsOnce 93BC                           ?_playDiatonicTriadMajor 0061  
                         ?_playDiatonicTriadMinor 0061                                        _drumCCMenu 015C  
                                  ??_playThisNote 0071               _arpeggiatorLastNoteModeKeyPressMenu 0111  
                               ??_printThisNumber 0062                               __size_of_Read_b_eep 001A  
                                doTheUnLatch@once 0009                                        _int2string 7614  
                                 _ARPEGGIO_RANDOM 0268                                   Lcd_Print_Char@i 0064  
                           __end_of_un_block_code 9972                                        _dorian_key FD46  
                                      ??_Busy_eep 0060                                           _Lcd_Cmd 9880  
                          __end_of_Lcd_Print_Char 85F4                                        _drumNNMenu 015F  
                                       ?_exitLoad 0007                              __size_of_noteOffDrum 0034  
                                      _copy_array 8F5C                                         ?_exitSave 0007  
                     ?_delete_notes_from_arpeggio 0007                                   _ARPEGGIO_SORTED 0278  
                             __size_of_Function_A 00CE                               __size_of_Function_B 007A  
                             __size_of_Function_C 0092                               __size_of_Function_D 0090  
                             __size_of_Function_E 006C                               __size_of_Function_F 0066  
                             __size_of_Function_G 0090                               __size_of_Function_H 00C0  
                                       ?_menu_lcd 0007                          _playDiatonicSeventhMajor 56E2  
                 ??_keyboard_eight_note_efficient 007A                          _playDiatonicSeventhMinor 494E  
                                         __Hparam 0000                                      _CONTROL_MODE 000B  
                       playDiatonicSeventhMajor@i 0066                                    _mixolydian_key FD19  
                                         __Lparam 0000                                 _potentiometer_raw 0369  
                           __end_of_setupArpeggio 8B2A                                    _Function_H_6_1 7EBA  
                                  _Function_H_6_2 79A6                                    _Function_H_8_1 8956  
                                  _Function_H_8_2 8EF8                                    _Function_H_9_1 7CDA  
                                  _Function_H_9_2 7C3A                                    _Function_H_9_3 7B9A  
                                  _Function_H_9_4 7AFA            __end_of_keyboard_sharps_only_efficient 419E  
         __size_of_keyboard_sharps_only_efficient 02AE                    _keyboard_sharps_only_efficient 3EF0  
                       playDiatonicSeventhMinor@i 0067                                           ___aldiv 7480  
                                         ___fladd 3336                                   _midiChannelMenu 0147  
                                         ___fldiv 3C3A                                           ___awdiv 613C  
                                         ___flneg 9752                                   __size_of___lmul 00C6  
                                         ___awmod 68E8                                           ___lbmod 82C6  
                                         ___flmul 2FE4                            __end_of_loadFromEEPROM 4DEA  
                                         ___fltol 6F7C                                   __size_of___wmul 0028  
                               ??_processKeyboard 007C                              __end_of_exitFunction 95D2  
                                 __CFG_STVREN$OFF 000000                                           _channel 003E  
                                         __pcinit 6BDA                                           __ramtop 0D00  
                                 ?_Lcd_Set_Cursor 0063                                        _ionian_key FD55  
                                 __size_of_noteOn 0072                                           _ema_sum 0240  
                               __end_of_major_key F387                                           __ptext0 6AE6  
                                         __ptext1 99C8                                           __ptext2 8A42  
                                         __ptext3 98C8                                           __ptext4 98A6  
                                         __ptext5 6E9E                                           __ptext6 998A  
                                         __ptext7 76D8                                           __ptext8 7FF0  
                                         __ptext9 7AFA                                           _command 01F7  
                              _NOTE_LENGTH_PULSES 004D                                           _display 9972  
                                 __size_of_strcpy 0032                                      __size_of_ISR 5540  
                             _initializeMenuArray 4DEA                                      __size_of_map 0106  
                                      ??___xxtofl 0064                            saveToEEPROM@slotNumber 00B1  
                            __end_of_panic_button 98C8                                Function_H_6_1@temp 00C7  
                                         _sendUSB 6DBA                                  ___aldiv@dividend 0060  
                  __end_of_playDiatonicTriadMajor 5B96                                           _sendOut 6CCC  
                  __end_of_playDiatonicTriadMinor 494E                                  rotateArrayLeft@i 0068  
                                         _noteOff 9494                                _GLOBAL_STATUS_BYTE 0181  
                                noteOffDrum@pitch 0060                               __end_of_Write_b_eep 951E  
           _arpeggiatorLastNoteModeKeyReleaseMenu 010E                                  playTriad@triad_p 0065  
                               __end_of_seg_ascii F26B                           saveToEEPROM@baseAddress 00AF  
                        __end_ofascii@LCD_STRINGS F220              __size_of_keyboard_all_note_efficient 051A  
                               __end_of_minor_key F378                          __size_of_calculate_alpha 004A  
                 setControllerNumbers@array_index 006F                                         _DRUM_MODE 000C  
                                       _DRUM_NOTE 01E7                                    __pintcode_body 539E  
            __end_of_random_pitches_non_repeating 79A6             __size_of_random_pitches_non_repeating 00AE  
                           __end_of_processOctave 3982                      _random_pitches_non_repeating 78F8  
                            end_of_initialization 6CC2                                 __end_of_playTriad 5D1A  
                                     ?_doTheLatch 0007                                 __end_of_pitchBend 9494  
                                 ?_Lcd_Print_Char 0007                                        ??_exitLoad 006E  
                                   __Lmediumconst E8C2                              _light_decimal_points 0030  
                                         int_func 539E                                        ??_exitSave 006E  
                                      ??_menu_lcd 00CC                        __end_of_buttonInputsSerial 8770  
                                      _noteOnDrum 91EA                                    displayString@i 0008  
                          __end_of_mixolydian_key FD28                           __size_of_wait_one_pulse 002A  
                            ?_initializeMenuArray 0007                            __end_of_Function_H_6_1 7F56  
                          __end_of_Function_H_6_2 7A50                            __end_of_Function_H_8_1 89CC  
                          __end_of_Function_H_8_2 8F5C                            __end_of_Function_H_9_1 7D7A  
                          __end_of_Function_H_9_2 7CDA                            __end_of_Function_H_9_3 7C3A  
                          __end_of_Function_H_9_4 7B9A                             _finish_arpeggio_setup 9908  
                                       i2u6112_40 17D6                                         i2u3800_48 86A0  
                                      _noteNumber 003C                                         i2u6123_40 1852  
                                       i2u6116_40 17F6                                         i2u3733_40 6632  
                                       i2u6037_40 11B4                                         i2u6081_40 14BC  
                                       i2u6059_40 1330                                 ?_selectSlotOnBoot 0007  
                                       i2u6089_40 1586                                         i2u6099_40 1692  
                               pitchBend@highByte 0061                                         i2u3799_40 869E  
                                      _lydian_key FD28                                         i2u5942_45 3A76  
                                       i2u5943_45 3A9A                                         i2u6727_47 5434  
                                       i2u5937_40 3992                                         i2u5945_45 3ACA  
                                       i2u5948_40 3B14                                         i2u6692_40 548C  
                                       i2u6694_40 54AE                   __size_of_calculate_pulse_length 0166  
                                     ?_clear_row1 0007                                       ?_clear_row2 0007  
                                  _diatonic_major F310                                    _diatonic_minor F2E3  
                          __size_of_playThisNote8 0434                              _pentatonic_major_key F392  
                                  _joystickCCMenu 014A                                         _PRESCALER 01F5  
                                      _potsCCMenu 0150                                  ___aldiv@quotient 006A  
                              ??_selectSlotOnBoot 00CC                                           postdec0 000FED  
                                         postdec1 000FE5                                           postdec2 000FDD  
                                         postinc0 000FEE                                           postinc1 000FE6  
                                         postinc2 000FDE                           ??_processPotentiometers 0063  
                                 _drumChannelMenu 013E                                   ?_loadFromEEPROM 0007  
                             noteOffDrum@velocity 0061                                controlChange@value 0061  
                             _encoderInputsBuxton 8674                                      ??_Lcd_SetBit 0060  
                            _processEncoderBuxton 0014                             __end_of_programChange 9404  
                               playThisNote@pitch 0075                    __size_of_add_notes_to_arpeggio 00FE  
                        ??_playThisNotePentatonic 0072                     __end_of_add_notes_to_arpeggio 6AE6  
                                  _string2display 0192                                 _encoder_direction 0036  
                            _pentatonic_minor_key F387                                        _which_mode 00F1  
                                      _which_note 0033                                       ?_eepromExit 0007  
                                     ___fladd@grs 00B7                             __end_of_displayDigits 3C3A  
                                   ___xxtofl@sign 0068                             loadFromEEPROM@to_load 0197  
                                     ___fldiv@grs 009A                                       ___fldiv@rem 0094  
                               __size_of_ADC_Read 0038                             __end_of_displayString 66DE  
                            ?_encoderInputsBuxton 0007                      playDiatonicTriadMinor@i_1723 0068  
                                 _TIMER_OVERFLOWS 002E                                      _dominant_7th 02D8  
                             __end_of_aeolian_key FD19                                        map@out_max 007E  
                                      map@out_min 007A                                       ?_int2string 0060  
                            _arpeggiatorLatchMenu 0126                                        _statusByte 003D  
                                     ___flmul@grs 007C                              _arpeggiatorOnOffMenu 0135  
                                     ?_copy_array 0007                                programChange@data1 0060  
                              programChange@data2 0061                        _potentiometer_filtered_now 0220  
                              __end_of_Lcd_SetBit 97B2                             ??_initializeMenuArray 0066  
                     ?_key_press_release_note_off 0007                              __end_of_playArpeggio 1898  
                      _arpeggiatorUnLatchModeMenu 011D                            __end_of_diatonic_major F33D  
                                 ?_Function_H_6_1 0007                                   ?_Function_H_6_2 0007  
                                 ?_Function_H_8_1 0007                                   ?_Function_H_8_2 0007  
                                 ?_Function_H_9_1 0007                                   ?_Function_H_9_2 0007  
                                 ?_Function_H_9_3 0007                                   ?_Function_H_9_4 0007  
                          __end_of_diatonic_minor F310                              __end_of_saveToEEPROM 51E0  
                                _print_row_2_once 0026                                         _Lcd_Clear 998A  
           __end_of_keyboard_eight_note_efficient 2FE4            __size_of_keyboard_eight_note_efficient 0402  
                   _keyboard_eight_note_efficient 2BE2                                displayDigits@digit 00CC  
                     _calculate_pulse_length$5908 00C8                                     ??_displayTest 0066  
                                    ??_Read_b_eep 0062                                         _Lcd_Start 8354  
                           ?_processEncoderBuxton 0007                                    __end_of___lmul 7614  
                                  __end_of___wmul 9880                                     __pidataCOMRAM 99E3  
                            __end_of_playThisNote 68E8                                      ??_Function_A 00C7  
                                    ??_Function_B 00C7                                      ??_Function_C 00C9  
                                    ??_Function_D 00C8                                      ??_Function_E 00C7  
                                    ??_Function_F 00C7                                      ??_Function_G 00CC  
                                    ??_Function_H 00CC                             __size_of_Function_A_1 00D6  
                           __size_of_Function_A_2 00D6                               __size_of_doTheLatch 0020  
                           __size_of_Function_A_3 00D6                             __size_of_Function_C_1 008E  
                           __size_of_Function_C_2 0126                             __size_of_Function_C_3 0126  
                           __size_of_Function_D_1 0084                             __size_of_Function_D_2 005E  
                           __size_of_Function_D_3 0076                             __size_of_Function_D_4 007A  
                           __size_of_Function_D_5 007A                             __size_of_Function_E_1 004C  
                           __size_of_Function_E_2 004C                             __size_of_Function_G_1 00A0  
                           __size_of_Function_G_2 00A0                             __size_of_Function_G_3 005C  
                           __size_of_Function_G_4 009A                             __size_of_Function_H_1 00D6  
                           __size_of_Function_H_2 0066                             __size_of_Function_H_3 005A  
                           __size_of_Function_H_4 00B2                             __size_of_Function_H_5 00AA  
                           __size_of_Function_H_6 006E                             __size_of_Function_H_7 00AE  
                           __size_of_Function_H_8 006E                             __size_of_Function_H_9 0096  
                                  _ADC_Initialize 99B4                          __end_of_Lcd_Print_String 8570  
                        setControllerResolution@i 0060                                       _Write_b_eep 94DC  
                     playThisNotePentatonic@index 0071                                    __end_of_noteOn 8B9C  
                                  _TRANSPOSE_MODE 0025                       playThisNotePentatonic@pitch 0007  
                                  _findArrayIndex 955C                                    __end_of_ttable F359  
                            _arpeggiatorTempoMenu 0132                                    __end_of_strcpy 9752  
                    __end_of_setControllerNumbers 27AE                               start_initialization 6BDA  
                          _calculate_pulse_length 5E82                                 _encoder_state_now 017F  
                                     __end_of_ISR 5548                                     _playThisNote8 27AE  
                          __size_of_resetArpeggio 003E                                       __end_of_map 67E4  
                             __size_of_clear_row1 0028                               __size_of_clear_row2 0028  
                              wait_one_pulse@mode 0060                             ??_encoderInputsBuxton 0007  
                               playSeventh@i_1696 0068                  playThisNotePentatonic@temp_pitch 0076  
                              __end_of_Read_b_eep 9940                    __end_of_diatonic_seventh_major F2E3  
                          ?_finish_arpeggio_setup 0007                    __end_of_diatonic_seventh_minor F2A7  
                                     ?_noteOnDrum 0060                                 Lcd_Print_String@a 0068  
                               Lcd_Print_String@i 006C                                      _lastNoteMode 001A  
                               ??_calculate_alpha 00A0                                __end_of_Function_A 7480  
                              __end_of_Function_B 88DE                                __end_of_Function_C 8118  
                              __end_of_Function_D 8238                                __end_of_Function_E 8D56  
                              __end_of_Function_F 8EF8                                __end_of_Function_G 81A8  
                              __end_of_Function_H 7798                                 __size_of_Busy_eep 0006  
                              _readPotentiometers 0A30                               __size_of_eepromExit 003A  
                                   _ARPEGGIO_TYPE 0035                             __size_of_exitFunction 003A  
                                    _Function_A_1 72DC                                      _Function_A_2 7206  
                                    _Function_A_3 7130                                      _Function_C_1 8238  
                                    _Function_C_2 6394                                      _Function_C_3 626E  
                                    _Function_D_1 8468                                      _Function_D_2 9020  
                                    _Function_D_3 89CC                                      _Function_D_4 87EA  
                                    _Function_D_5 8770                                      _Function_E_1 92DC  
                                    _Function_E_2 9290                                      _Function_G_1 7E1A  
                                    _Function_G_2 7D7A                                      _Function_G_3 90DC  
                                    _Function_G_4 7F56                                      _Function_H_1 705A  
                                    _Function_H_2 8E2C                                      _Function_H_3 9138  
                                    _Function_H_4 7798                                      _Function_H_5 7A50  
                                    _Function_H_6 8C7C                                      _Function_H_7 784A  
                                    _Function_H_8 8C0E                                      _Function_H_9 7FF0  
                                 _encoderPolarity 002A                                        ?_Lcd_Clear 0007  
                             displayString@letter 0100                                          ??___wmul 0064  
                                      ?_Lcd_Start 0007                            __end_of_ADC_Initialize 99C8  
                         readPotentiometers@count 0260                               ?_readPotentiometers 0007  
                                     __pdataBANK0 00F5                                       __pdataBANK1 01E7  
                                     __pdataBANK2 0288                                       __pdataBANK3 0300  
                                __CFG_LPT1OSC$OFF 000000                               __end_of_LCD_STRINGS FCFB  
                           __size_of_panic_button 0022                        Lcd_Print_Char@Lower_Nibble 0061  
                          __end_of_findArrayIndex 9598                               __size_of_int2string 00C4  
                             _encoderPolarityMenu 0138                             __end_of_controlChange 91EA  
                                        ??_strcpy 0064                   __size_of_playThisNotePentatonic 019A  
                                       ___fladd@a 00A8                                         ___fladd@b 00A4  
                             __size_of_copy_array 0062                                   _printThisNumber 99A0  
                                   ?_sort_pitches 0007                                         ___fldiv@a 008B  
                                       ___fldiv@b 0087                                     _TIMER_PRELOAD 017B  
                             __end_of_displayTest 8674                           Function_D_3@array_index 00C7  
                         __size_of_processDrumpad 0506                                         ___flmul@a 0072  
                                       ___flmul@b 006E                                       __pbssCOMRAM 002A  
                                     _aeolian_key FD0A                                  _button_state_now 00D8  
                      displayDigits@digit_counter 00E9                                    ?_playThisNote8 0071  
                                   __pcstackBANK0 0060                                     __pcstackBANK1 0197  
                                   __pcstackBANK2 02E5                            __size_of_digitalInputs 0052  
                      ??_playDiatonicSeventhMajor 0062                  _arpeggiatorLastNoteModeResetMenu 0108  
                      ??_playDiatonicSeventhMinor 0062                                 __size_of___xxtofl 0154  
                                   sort_pitches@a 0009                       displayString@letter_counter 00E8  
                                   sort_pitches@i 000B                                     sort_pitches@j 000A  
                            ??_readPotentiometers 00C2                            processPotentiometers@i 0068  
                                    _exitFunction 9598                                       _ARPEGGIO_ON 0023  
                                        ?_Lcd_Cmd 0007                                      _keyboardMenu 00E5  
                                 _processKeyboard 8D56                                    _wait_one_pulse 97DE  
                                printThisNumber@n 0060                          ?_initializeSaveSlotsOnce 0007  
                           _drum_button_state_now 0039                  __size_of_setControllerResolution 002C  
                               __size_of_exitLoad 003A                              __end_of_phrygian_key FD46  
                               __size_of_exitSave 003A                               readPotentiometers@i 019C  
                               __size_of_menu_lcd 00DE                                      _panic_button 98A6  
                                   _resetArpeggio 951E                                  ??_Lcd_Set_Cursor 0064  
                                       _ema_alpha 0104                                     Function_H_5@i 00C8  
                                       __pintcode 0008                                     __pmediumconst E8C2  
                          ??_processEncoderBuxton 0060                                          ?___aldiv 0060  
                                        ?___fladd 00A4                                   _arpeggiatorMenu 00DF  
                                        ?___fldiv 0087                          __size_of_rotateArrayLeft 0078  
                                       __ptext100 86F4                                         __ptext101 99EC  
                                       __ptext110 6DBA                                         __ptext102 99F2  
                                        ?___flneg 00A0                                         __ptext111 6CCC  
                                       __ptext103 9404                                         __ptext120 3336  
                                       __ptext112 82C6                                         __ptext104 0A30  
                                       __ptext121 9680                                         __ptext113 66DE  
                                       __ptext105 419E                                         __ptext130 99F8  
                                       __ptext122 9808                                         __ptext114 754E  
                                       __ptext106 944C                                         __ptext131 9926  
                                       __ptext123 9830                                         __ptext115 7480  
                                       __ptext107 9192                                         __ptext132 4DEA  
                                       __ptext124 8FBE                                         __ptext116 5FE8  
                                       __ptext108 5D1A                                         __ptext141 1198  
                                       __ptext133 9858                                         __ptext125 84EC  
                                       __ptext117 6F7C                                         __ptext109 9494  
                                       __ptext142 64BA                                         __ptext134 85F4  
                                       __ptext126 8570                                         __ptext118 9752  
                                       __ptext143 8674                                         __ptext135 9720  
                                       __ptext127 9372                                         __ptext119 2FE4  
                                       __ptext144 9972                                         __ptext136 8354  
                                       __ptext128 4FEC                                         __ptext145 65D2  
                                       __ptext137 9880                                         __ptext129 94DC  
                                       __ptext146 3982                                         __ptext138 9782  
                                       __ptext139 99B4                                          ?___flmul 006E  
                                        ?___fltol 00B8                                   ?_ADC_Initialize 0007  
                                      playTriad@i 0067                                       _ARRAY_INDEX 00EB  
            _arpeggiatorLastNoteModeTransposeMenu 010B                                    _diminished_7th 02C8  
                                 ?_findArrayIndex 0007                                       _ema_integer 00FE  
                                  ??_sort_pitches 0007                                          ?_display 0007  
                                   ??_playSeventh 0061                    playDiatonicSeventhMajor@i_1718 0067  
                             __size_of_noteOnDrum 0054                                         _count_ISR 0264  
                   controlChange@controllerNumber 0060                          encoderInputsBuxton@tempA 000A  
                        encoderInputsBuxton@tempB 000B                           Function_D_4@array_index 00C7  
                                       _major_7th 02D4                                   playTriad@i_1691 0068  
                                        _ADC_Read 9680                                         _major_key F378  
                                       _last_note 00EC                                  ??_Lcd_Print_Char 0061  
                                       _menuArray 0300                                      _patch_number 00F3  
                                  __size_of_clock 0006                                      playSeventh@i 0067  
                                        _ARPEGGIO 0182                             __size_of_playArpeggio 0700  
                                   ??_noteOffDrum 0062                                    __size_of_setup 0074  
                                  __size_of_srand 0010                                      ??_doTheLatch 0066  
                          __end_of_wait_one_pulse 9808                             __size_of_saveToEEPROM 01F4  
                                       _minor_7th 02D0                                   ___aldiv@divisor 0064  
                              noteOffDrum@channel 0062                                         _seg_ascii F220  
                                 ___aldiv@counter 0068                            _playThisNotePentatonic 5548  
                                       _minor_key F369                                    ___wmul@product 0064  
                                       _playTriad 5B96                              int2string@isNegative 0008  
                                       _pitchBend 944C                                  ??_loadFromEEPROM 00CC  
                                pitchBend@channel 0062                                         _savesMenu 00E2  
                                     _arpeggioPtr 002A                                    ?_resetArpeggio 0007  
                                   _digitalInputs 923E                                          Lcd_Cmd@a 0062  
                                    ??_clear_row1 006E                                      ??_clear_row2 006E  
                            _setControllerNumbers 22B8                                       _LCD_STRINGS F39E  
                           __size_of_playThisNote 0104                                          _GO_nDONE 007E11  
             __end_of_keyboard_all_note_efficient 1DB2                       _keyboard_all_note_efficient 1898  
                                     ??_Lcd_Clear 0063                                  __CFG_WDTPS$32768 000000  
      initializeSaveSlotsOnce@initializeSlotsOnce 00B4                                          _HYST_VAL 01F3  
                                _diminished_triad 02DC                           __end_of_printThisNumber 99B4  
                                     ??_Lcd_Start 0063                                  pitchBend@lowByte 0060  
                                     _displayTest 85F4                               __end_of_locrian_key FD0A  
                                        _POT_MODE 002D                               __end_of_seg_bcd_hex F369  
                  key_press_release_note_off@temp 002C                    __size_of_processPotentiometers 02A8  
                              _buttonInputsSerial 86F4                     __end_of_processPotentiometers 4446  
                                       map@in_max 0076                                         map@in_min 0072  
                                       _triadMenu 016E                                __end_of_doTheLatch 9908  
                        buttonInputsSerial@i_4479 0065                                 ___wmul@multiplier 0060  
                                   _skipFirstLast 001B                            __size_of_un_block_code 0018  
                                 ??_playThisNote8 0072                                      _playArpeggio 1198  
                                 Write_b_eep@badd 0060                                   Write_b_eep@bdat 0062  
                                    ??_eepromExit 006E                      _arpeggiatorSkipFirstLastMenu 0114  
                       __size_of_selectSlotOnBoot 0020                      _arpeggiatorRandomizeSkipMenu 011A  
                         Function_D_5@array_index 00C7                               ?_buttonInputsSerial 0007  
                                    _saveToEEPROM 4FEC                           __end_of_processKeyboard 8DC2  
                          __size_of_setupArpeggio 0074                                 _string_to_display 01F8  
                              __end_of_clear_row1 9858                                __end_of_clear_row2 9830  
                             __end_of_playSeventh 5A06                                         copy_data0 6BEE  
                                       copy_data1 6C0E                                         copy_data2 6C2E  
                                       copy_data3 6C4E                                         copy_data4 6C6E  
                                ??_Function_H_6_1 00C7                                  ??_Function_H_6_2 00C7  
                                ??_Function_H_8_1 00C7                                  ??_Function_H_8_2 00C7  
                                ??_Function_H_9_1 00C7                                  ??_Function_H_9_2 00C7  
                                ??_Function_H_9_3 00C7                                  ??_Function_H_9_4 00C7  
             displayDigits@number_to_display_last 0179                      _arpeggiatorRandomizeTypeMenu 0117  
                                    ??_int2string 0062                                   ?_wait_one_pulse 0007  
             displayDigits@number_to_display_temp 0177                                      _playThisNote 67E4  
                                        _Busy_eep 99F8                                      ??_copy_array 0060  
                           __end_of_MAX_NUM_NOTES F39E                                 _NUM_NOTES_PRESSED 002F  
                         __size_of_random_pitches 0072                                     ?_doTheUnLatch 0007  
                                __size_of_Lcd_Cmd 0026                                        ?_playTriad 0007  
                                      _EECON1bits 000FA6                                        ?_pitchBend 0060  
                             __end_of_noteOffDrum 9720                                   _octave_overflow 0011  
                                  ?_digitalInputs 0007                              ??_buttonInputsSerial 0060  
                                     _major_triad 01FD                                          __Hrparam 0000  
                           ?_setControllerNumbers 0007                               _arpeggiatorTypeMenu 012C  
                                        __Lrparam 0000                                   _augmented_triad 02DF  
                              __end_of_eepromExit 9680                                        _DIGIT_MODE 003A  
                                __size_of___aldiv 00CE                                  __size_of___fladd 033E  
                                __size_of___fldiv 02B6                                  __size_of___awdiv 0132  
                                __size_of___flneg 0030                                       _last_octave 017D  
                                __size_of___awmod 0100                                  __size_of___lbmod 008E  
                                __size_of___flmul 0352                                  __size_of___fltol 00DE  
                                     _drumchannel 0052                            __size_of_processOctave 030E  
                            playSeventh@seventh_p 0065                                      ?_Write_b_eep 0060  
                         ?_calculate_pulse_length 00C2                                 ?_Lcd_Print_String 0068  
                              __end_of_int2string 76D8                                 ??_rotateArrayLeft 0060  
                              __end_of_dorian_key FD55                                    _processDrumpad 1DB2  
                                __size_of_display 0018                                __end_of_copy_array 8FBE  
                                        ___xxtofl 5FE8                             _add_notes_to_arpeggio 69E8  
                              ??_Lcd_Print_String 006A                                     ?_analogInputs 0007  
                                 _mainChannelMenu 0141                  __end_of_playDiatonicSeventhMajor 5874  
                __end_of_playDiatonicSeventhMinor 4BAE                                  __size_of_sendUSB 00E4  
                                 _calculate_alpha 9328                                  __size_of_sendOut 00EE  
                                __size_of_noteOff 0048                                          __ptext10 7B9A  
                                        __ptext11 7C3A                                          __ptext20 7A50  
                                        __ptext12 7CDA                                          __ptext21 7798  
                                        __ptext13 8C0E                                          __ptext30 4BAE  
                                        __ptext22 9138                                          __ptext14 8EF8  
                                        __ptext31 5E82                                          __ptext23 8E2C  
                                        __ptext15 8956                                          __ptext40 92DC  
                                        __ptext32 95D2                                          __ptext24 705A  
                                        __ptext16 784A                                          __ptext41 81A8  
                                        __ptext33 7E1A                                          __ptext25 8118  
                                        __ptext17 8C7C                                          __ptext50 97B2  
                                        __ptext42 8770                                          __ptext34 960C  
                                        __ptext26 7F56                                          __ptext18 79A6  
                                        __ptext51 8086                                          __ptext43 87EA  
                                        __ptext35 9646                                          __ptext27 9598  
                                        __ptext19 7EBA                                          __ptext60 7206  
                                        __ptext52 626E                                          __ptext44 89CC  
                                        __ptext36 8E92                                          __ptext28 90DC  
                                        __ptext61 72DC                                          __ptext53 6394  
                                        __ptext45 22B8                                          __ptext37 93BC  
                                        __ptext29 7D7A                                          __ptext70 5548  
                                        __ptext62 995A                                          __ptext54 7614  
                                        __ptext46 9020                                          __ptext38 8CEA  
                                        __ptext71 2BE2                                          __ptext63 0014  
                                        __ptext55 613C                                          __ptext47 9328  
                                        __ptext39 9290                                          __ptext80 5874  
                                        __ptext72 27AE                                          __ptext64 923E  
                                        __ptext56 8238                                          __ptext48 3C3A  
                                        __ptext81 8B2A                                          __ptext73 46EC  
                                        __ptext65 3674                                          __ptext57 8864  
                                        __ptext49 8468                                          __ptext90 96B8  
                                        __ptext82 9908                                          __ptext74 5A06  
                                        __ptext66 51E0                                          __ptext58 73B2  
                                        __ptext91 955C                                          __ptext83 8AB6  
                                        __ptext75 494E                                          __ptext67 98E8  
                                        __ptext59 7130                                          __ptext92 69E8  
                                        __ptext84 78F8                                          __ptext76 56E2  
                                        __ptext68 8D56                                          __ptext93 88DE  
                                        __ptext85 8B9C                                          __ptext77 1898  
                                        __ptext69 3EF0                                          __ptext94 1DB2  
                                        __ptext86 83E0                                          __ptext78 67E4  
                                        __ptext95 91EA                                          __ptext87 68E8  
                                        __ptext79 5B96                                          __ptext96 96EC  
                                        __ptext88 8F5C                                          __ptext97 4446  
                                        __ptext89 951E                                          __ptext98 97DE  
                                        __ptext99 99A0                       __end_of_initializeMenuArray 4FEC  
                                        _encoderA 002C                                          _encoderB 002B  
                         ??_finish_arpeggio_setup 0061                                          _mainMenu 0174  
                    processPotentiometers@lowByte 0066                               _DISPLAY_STEP_NUMBER 000D  
                                      strcpy@from 0062                                          _drumMenu 0165  
                                  ??_doTheUnLatch 007A                            __size_of_programChange 0048  
                                        _exitLoad 95D2                                          _keyboard 00D0  
                                   __size_of_main 00F4                                          _exitSave 960C  
                               _startingDirection 0034                                          _modeMenu 0171  
                                   __size_of_load 0006                                     __size_of_rand 0088  
                                   _un_block_code 995A                                      ??_noteOnDrum 0062  
                   playDiatonicSeventhMajor@index 0061                                          _menu_lcd 6E9E  
                                        _parallel 0030                                   ??_resetArpeggio 0060  
                   playDiatonicSeventhMajor@pitch 0068                           _setControllerResolution 97B2  
                            __end_of_sort_pitches 65D2                                    playTriad@pitch 0069  
                              __end_of_ionian_key FD64                                       _locrian_key FCFB  
                  playDiatonicSeventhMinor@i_1728 0068                                       _seg_bcd_hex F359  
                                        _semitone 003B                            __size_of_displayDigits 02B8  
                                      _AUTO_LATCH 001E                                     _potsAlphaMenu 0153  
                                   _setupArpeggio 8AB6                               playThisNote8@mode_p 0078  
                                        _potsMenu 0159                                          _velocity 0051  
                                        _overflow 0012                                  ?_printThisNumber 0060  
                      Lcd_Print_Char@Upper_Nibble 0062                    __end_of_calculate_pulse_length 5FE8  
                                     _minor_triad 02E2                            __size_of_displayString 010C  
                        ??_playDiatonicTriadMajor 0062                          ??_playDiatonicTriadMinor 0062  
                                   _FIRST_READING 002E                                 _note_off_was_sent 0010  
                     playDiatonicTriadMajor@index 0061                            __end_of_processDrumpad 22B8  
                     playDiatonicTriadMajor@pitch 0068                              controlChange@channel 0062  
                     __end_of_encoderInputsBuxton 86F4                                    ??_analogInputs 019E  
                                     _playSeventh 5874                                        _INTCONbits 000FF2  
                              __end_of_noteOnDrum 923E                                      _phrygian_key FD37  
                                ?_processKeyboard 0007                                     _encoder_click 0029  
                              __end_of_lydian_key FD37                                 _keyboardTranspose 4446  
                                     _noteOffDrum 96EC                                          intlevel2 0000  
                              ?_keyboardTranspose 0007                                     _processOctave 3674  
                                  ?_un_block_code 0007                                    _AUTO_RANDOMIZE 001C  
                                 ??_digitalInputs 0080                   delete_notes_from_arpeggio@pitch 0069  
                                     ??_playTriad 0061                            ??_setControllerNumbers 006E  
                                     ??_pitchBend 0062                                    _SORT_DIRECTION 0024  
                                  _iterator_focus 00FD                                  int2string@number 0060  
             initializeMenuArray@NumberOfElements 0067                                  ??_ADC_Initialize 0060  
                             ??_keyboardTranspose 0062                          _NOTE_LENGTH_PULSES_ARRAY 02B8  
                                  ?_setupArpeggio 0007                                     _which_seventh 00EF  
                                ??_findArrayIndex 0060                                playThisNote8@index 0071  
                                  _lcd_print_once 0027                                playThisNote8@pitch 0076  
                   playDiatonicSeventhMinor@index 0061                     playDiatonicSeventhMinor@pitch 0066  
             keyboard_sharps_only_efficient@index 0078                                    _finishLastNote 0015  
                              Lcd_Set_Cursor@temp 0067               keyboard_sharps_only_efficient@pitch 0077  
                        loadFromEEPROM@byte_count 01E5                                     _programChange 93BC  
                                      Lcd_Start@i 0064                           __end_of_calculate_alpha 9372  
                                 ?_processDrumpad 0007                  __size_of_initializeSaveSlotsOnce 004A  
                                  _inputPotsArray 0288                            ?_add_notes_to_arpeggio 0007  
                                _selectSlotOnBoot 98C8                                       _seventhMenu 016B  
                                        strcpy@cp 0064                                          strcpy@to 0060  
                               noteOnDrum@channel 0062                                      _which_octave 0032  
                       __end_of_keyboardTranspose 46EC                                      _which_screen 004F  
                                    ___aldiv@sign 0069                                      _potsResoMenu 0156  
                                   _displayDigits 3982                       playDiatonicTriadMinor@index 0061  
                              noteOnDrum@velocity 0061                       playDiatonicTriadMinor@pitch 0066  
             __size_of_delete_notes_from_arpeggio 0034                                     ___fladd@signs 00B4  
                         ?_playThisNotePentatonic 0071                                    ?_processOctave 0007  
                     __size_of_readPotentiometers 0768                                     _displayString 65D2  
                       ??_setControllerResolution 0060                                       _which_triad 00F0  
                                   _KEYBOARD_MODE 00F2                                      ___fladd@aexp 00B5  
                                    ___fladd@bexp 00B6                                    _random_pitches 8B9C  
                                    _toggle_state 002D                            __size_of_controlChange 0058  
               __size_of_playDiatonicSeventhMajor 0192                 __size_of_playDiatonicSeventhMinor 0260  
                       ?_playDiatonicSeventhMajor 0061  

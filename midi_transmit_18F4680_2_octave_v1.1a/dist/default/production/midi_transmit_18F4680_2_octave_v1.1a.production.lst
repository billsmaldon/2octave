

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Jan 17 18:26:15 2024

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4680
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1,noexec
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     9                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
    10                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
    11                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
    12                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    13                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    19                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    21                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    23                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    26                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    27                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	text0,global,reloc=2,class=CODE,delta=1
    29                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text2,global,reloc=2,class=CODE,delta=1
    31                           	psect	text3,global,reloc=2,class=CODE,delta=1
    32                           	psect	text4,global,reloc=2,class=CODE,delta=1
    33                           	psect	text5,global,reloc=2,class=CODE,delta=1
    34                           	psect	text6,global,reloc=2,class=CODE,delta=1
    35                           	psect	text7,global,reloc=2,class=CODE,delta=1
    36                           	psect	text8,global,reloc=2,class=CODE,delta=1
    37                           	psect	text9,global,reloc=2,class=CODE,delta=1
    38                           	psect	text10,global,reloc=2,class=CODE,delta=1
    39                           	psect	text11,global,reloc=2,class=CODE,delta=1
    40                           	psect	text12,global,reloc=2,class=CODE,delta=1
    41                           	psect	text13,global,reloc=2,class=CODE,delta=1
    42                           	psect	text14,global,reloc=2,class=CODE,delta=1
    43                           	psect	text15,global,reloc=2,class=CODE,delta=1
    44                           	psect	text16,global,reloc=2,class=CODE,delta=1
    45                           	psect	text17,global,reloc=2,class=CODE,delta=1
    46                           	psect	text18,global,reloc=2,class=CODE,delta=1
    47                           	psect	text19,global,reloc=2,class=CODE,delta=1
    48                           	psect	text20,global,reloc=2,class=CODE,delta=1
    49                           	psect	text21,global,reloc=2,class=CODE,delta=1
    50                           	psect	text22,global,reloc=2,class=CODE,delta=1
    51                           	psect	text23,global,reloc=2,class=CODE,delta=1
    52                           	psect	text24,global,reloc=2,class=CODE,delta=1
    53                           	psect	text25,global,reloc=2,class=CODE,delta=1
    54                           	psect	text26,global,reloc=2,class=CODE,delta=1
    55                           	psect	text27,global,reloc=2,class=CODE,delta=1
    56                           	psect	text28,global,reloc=2,class=CODE,delta=1
    57                           	psect	text29,global,reloc=2,class=CODE,delta=1
    58                           	psect	text30,global,reloc=2,class=CODE,delta=1
    59                           	psect	text31,global,reloc=2,class=CODE,delta=1
    60                           	psect	text32,global,reloc=2,class=CODE,delta=1
    61                           	psect	text33,global,reloc=2,class=CODE,delta=1
    62                           	psect	text34,global,reloc=2,class=CODE,delta=1
    63                           	psect	text35,global,reloc=2,class=CODE,delta=1
    64                           	psect	text36,global,reloc=2,class=CODE,delta=1
    65                           	psect	text37,global,reloc=2,class=CODE,delta=1
    66                           	psect	text38,global,reloc=2,class=CODE,delta=1
    67                           	psect	text39,global,reloc=2,class=CODE,delta=1
    68                           	psect	text40,global,reloc=2,class=CODE,delta=1
    69                           	psect	text41,global,reloc=2,class=CODE,delta=1
    70                           	psect	text42,global,reloc=2,class=CODE,delta=1
    71                           	psect	text43,global,reloc=2,class=CODE,delta=1
    72                           	psect	text44,global,reloc=2,class=CODE,delta=1
    73                           	psect	text45,global,reloc=2,class=CODE,delta=1
    74                           	psect	text46,global,reloc=2,class=CODE,delta=1
    75                           	psect	text47,global,reloc=2,class=CODE,delta=1
    76                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=2
    77                           	psect	text49,global,reloc=2,class=CODE,delta=1
    78                           	psect	text50,global,reloc=2,class=CODE,delta=1
    79                           	psect	text51,global,reloc=2,class=CODE,delta=1
    80                           	psect	text52,global,reloc=2,class=CODE,delta=1
    81                           	psect	text53,global,reloc=2,class=CODE,delta=1
    82                           	psect	text54,global,reloc=2,class=CODE,delta=1
    83                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=2
    84                           	psect	text56,global,reloc=2,class=CODE,delta=1
    85                           	psect	text57,global,reloc=2,class=CODE,delta=1
    86                           	psect	text58,global,reloc=2,class=CODE,delta=1
    87                           	psect	text59,global,reloc=2,class=CODE,delta=1
    88                           	psect	text60,global,reloc=2,class=CODE,delta=1
    89                           	psect	text61,global,reloc=2,class=CODE,delta=1
    90                           	psect	text62,global,reloc=2,class=CODE,delta=1
    91                           	psect	text63,global,reloc=2,class=CODE,delta=1
    92                           	psect	text64,global,reloc=2,class=CODE,delta=1
    93                           	psect	text65,global,reloc=2,class=CODE,delta=1
    94                           	psect	text66,global,reloc=2,class=CODE,delta=1
    95                           	psect	text67,global,reloc=2,class=CODE,delta=1
    96                           	psect	text68,global,reloc=2,class=CODE,delta=1
    97                           	psect	text69,global,reloc=2,class=CODE,delta=1
    98                           	psect	text70,global,reloc=2,class=CODE,delta=1
    99                           	psect	text71,global,reloc=2,class=CODE,delta=1
   100                           	psect	text72,global,reloc=2,class=CODE,delta=1
   101                           	psect	text73,global,reloc=2,class=CODE,delta=1
   102                           	psect	text74,global,reloc=2,class=CODE,delta=1
   103                           	psect	text75,global,reloc=2,class=CODE,delta=1
   104                           	psect	text76,global,reloc=2,class=CODE,delta=1
   105                           	psect	text77,global,reloc=2,class=CODE,delta=1
   106                           	psect	text78,global,reloc=2,class=CODE,delta=1
   107                           	psect	text79,global,reloc=2,class=CODE,delta=1
   108                           	psect	text80,global,reloc=2,class=CODE,delta=1
   109                           	psect	text81,global,reloc=2,class=CODE,delta=1
   110                           	psect	text82,global,reloc=2,class=CODE,delta=1
   111                           	psect	text83,global,reloc=2,class=CODE,delta=1
   112                           	psect	text84,global,reloc=2,class=CODE,delta=1
   113                           	psect	text85,global,reloc=2,class=CODE,delta=1
   114                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=2
   115                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=2
   116                           	psect	text88,global,reloc=2,class=CODE,delta=1
   117                           	psect	text89,global,reloc=2,class=CODE,delta=1
   118                           	psect	text90,global,reloc=2,class=CODE,delta=1
   119                           	psect	text91,global,reloc=2,class=CODE,delta=1
   120                           	psect	text92,global,reloc=2,class=CODE,delta=1
   121                           	psect	text93,global,reloc=2,class=CODE,delta=1
   122                           	psect	text94,global,reloc=2,class=CODE,delta=1
   123                           	psect	text95,global,reloc=2,class=CODE,delta=1
   124                           	psect	text96,global,reloc=2,class=CODE,delta=1
   125                           	psect	text97,global,reloc=2,class=CODE,delta=1
   126                           	psect	text98,global,reloc=2,class=CODE,delta=1
   127                           	psect	text99,global,reloc=2,class=CODE,delta=1
   128                           	psect	text100,global,reloc=2,class=CODE,delta=1
   129                           	psect	text101,global,reloc=2,class=CODE,delta=1
   130                           	psect	text102,global,reloc=2,class=CODE,delta=1
   131                           	psect	text103,global,reloc=2,class=CODE,delta=1
   132                           	psect	text104,global,reloc=2,class=CODE,delta=1
   133                           	psect	text105,global,reloc=2,class=CODE,delta=1
   134                           	psect	text106,global,reloc=2,class=CODE,delta=1
   135                           	psect	text107,global,reloc=2,class=CODE,delta=1
   136                           	psect	text108,global,reloc=2,class=CODE,delta=1
   137                           	psect	text109,global,reloc=2,class=CODE,delta=1
   138                           	psect	text110,global,reloc=2,class=CODE,delta=1
   139                           	psect	text111,global,reloc=2,class=CODE,delta=1
   140                           	psect	text112,global,reloc=2,class=CODE,delta=1,group=2
   141                           	psect	text113,global,reloc=2,class=CODE,delta=1
   142                           	psect	text114,global,reloc=2,class=CODE,delta=1,group=2
   143                           	psect	text115,global,reloc=2,class=CODE,delta=1,group=2
   144                           	psect	text116,global,reloc=2,class=CODE,delta=1,group=2
   145                           	psect	text117,global,reloc=2,class=CODE,delta=1,group=2
   146                           	psect	text118,global,reloc=2,class=CODE,delta=1,group=2
   147                           	psect	text119,global,reloc=2,class=CODE,delta=1,group=2
   148                           	psect	text120,global,reloc=2,class=CODE,delta=1,group=2
   149                           	psect	text121,global,reloc=2,class=CODE,delta=1
   150                           	psect	text122,global,reloc=2,class=CODE,delta=1
   151                           	psect	text123,global,reloc=2,class=CODE,delta=1
   152                           	psect	text124,global,reloc=2,class=CODE,delta=1
   153                           	psect	text125,global,reloc=2,class=CODE,delta=1
   154                           	psect	text126,global,reloc=2,class=CODE,delta=1
   155                           	psect	text127,global,reloc=2,class=CODE,delta=1
   156                           	psect	text128,global,reloc=2,class=CODE,delta=1
   157                           	psect	text129,global,reloc=2,class=CODE,delta=1,group=1
   158                           	psect	text130,global,reloc=2,class=CODE,delta=1,group=1
   159                           	psect	text131,global,reloc=2,class=CODE,delta=1,group=1
   160                           	psect	text132,global,reloc=2,class=CODE,delta=1
   161                           	psect	text133,global,reloc=2,class=CODE,delta=1,group=2
   162                           	psect	text134,global,reloc=2,class=CODE,delta=1
   163                           	psect	text135,global,reloc=2,class=CODE,delta=1,group=2
   164                           	psect	text136,global,reloc=2,class=CODE,delta=1
   165                           	psect	text137,global,reloc=2,class=CODE,delta=1
   166                           	psect	text138,global,reloc=2,class=CODE,delta=1
   167                           	psect	text139,global,reloc=2,class=CODE,delta=1
   168                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   169                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   170                           	psect	text141,global,reloc=2,class=CODE,delta=1
   171                           	psect	text142,global,reloc=2,class=CODE,delta=1
   172                           	psect	text143,global,reloc=2,class=CODE,delta=1
   173                           	psect	text144,global,reloc=2,class=CODE,delta=1
   174                           	psect	text145,global,reloc=2,class=CODE,delta=1
   175                           	psect	text146,global,reloc=2,class=CODE,delta=1
   176                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   177                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   178                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   179  0000                     
   180                           ; Version 1.45
   181                           ; Generated 16/11/2017 GMT
   182                           ; 
   183                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   184                           ; All rights reserved.
   185                           ; 
   186                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   187                           ; 
   188                           ; Redistribution and use in source and binary forms, with or without modification, are
   189                           ; permitted provided that the following conditions are met:
   190                           ; 
   191                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   192                           ;        conditions and the following disclaimer.
   193                           ; 
   194                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   195                           ;        of conditions and the following disclaimer in the documentation and/or other
   196                           ;        materials provided with the distribution.
   197                           ; 
   198                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   199                           ;        software without specific prior written permission.
   200                           ; 
   201                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   202                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   203                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   204                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   205                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   206                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   207                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   208                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   209                           ; 
   210                           ; 
   211                           ; Code-generator required, PIC18F4680 Definitions
   212                           ; 
   213                           ; SFR Addresses
   214  0000                     
   215                           	psect	eeprom_data
   216  F00000  00 24 00 32 FF FF FF FF 	db	0,36,0,50,255,255,255,255	;# 
   217  0000                     
   218 ;;___awdiv@quotient	offset	0
   219 ;;___awdiv@sign	offset	2
   220 ;;___awdiv@counter	offset	3
   221 ;;___awdiv@dividend	offset=-2 (param)
   222 ;;___awdiv@divisor	offset=-4 (param)
   223 ;;noteOn@channel	offset=-1 (param)
   224 ;;noteOn@pitch	offset=-2 (param)
   225 ;;noteOn@velocity	offset=-3 (param)
   226 ;;random_pitches_non_repeating@randomIndex	offset	0
   227 ;;random_pitches_non_repeating@temp	offset	1
   228 ;;random_pitches_non_repeating@i	offset	2
   229 ;;random_pitches@random_array_index	offset	0
   230 ;;random_pitches@i	offset	1
   231 ;;___awmod@sign	offset	0
   232 ;;___awmod@counter	offset	1
   233 ;;___awmod@dividend	offset=-2 (param)
   234 ;;___awmod@divisor	offset=-4 (param)
   235 ;;noteOff@channel	offset=-1 (param)
   236 ;;noteOff@pitch	offset=-2 (param)
   237 ;;noteOff@velocity	offset=-3 (param)
   238 ;;sendUSB@ii	offset	0
   239 ;;sendUSB@i	offset	1
   240 ;;sendUSB@midiMessage	offset	2
   241 ;;sendUSB@message1	offset=-1 (param)
   242 ;;sendUSB@message2	offset=-2 (param)
   243 ;;sendUSB@message3	offset=-3 (param)
   244 ;;sendOut@i	offset	0
   245 ;;sendOut@midiMessage	offset	1
   246 ;;sendOut@number_of_midi_message_bytes	offset	4
   247 ;;sendOut@message1	offset=-1 (param)
   248 ;;sendOut@message2	offset=-2 (param)
   249 ;;sendOut@message3	offset=-3 (param)
   250 ;;___lbmod@rem	offset	0
   251 ;;___lbmod@counter	offset	1
   252 ;;___lbmod@dividend	offset=-1 (param)
   253 ;;___lbmod@divisor	offset=-2 (param)
   254 ;;___lmul@product	offset	0
   255 ;;___lmul@multiplier	offset=-4 (param)
   256 ;;___lmul@multiplicand	offset=-8 (param)
   257 ;;random_pitches_non_repeating@randomIndex	offset	0
   258 ;;random_pitches_non_repeating@temp	offset	1
   259 ;;random_pitches_non_repeating@i	offset	2
   260 ;;random_pitches@random_array_index	offset	0
   261 ;;random_pitches@i	offset	1
   262 ;;___lmul@product	offset	0
   263 ;;___lmul@multiplier	offset=-4 (param)
   264 ;;___lmul@multiplicand	offset=-8 (param)
   265 ;;noteOn@channel	offset=-1 (param)
   266 ;;noteOn@pitch	offset=-2 (param)
   267 ;;noteOn@velocity	offset=-3 (param)
   268 ;;noteOff@channel	offset=-1 (param)
   269 ;;noteOff@pitch	offset=-2 (param)
   270 ;;noteOff@velocity	offset=-3 (param)
   271 ;;sendUSB@ii	offset	0
   272 ;;sendUSB@i	offset	1
   273 ;;sendUSB@midiMessage	offset	2
   274 ;;sendUSB@message1	offset=-1 (param)
   275 ;;sendUSB@message2	offset=-2 (param)
   276 ;;sendUSB@message3	offset=-3 (param)
   277 ;;sendOut@i	offset	0
   278 ;;sendOut@midiMessage	offset	1
   279 ;;sendOut@number_of_midi_message_bytes	offset	4
   280 ;;sendOut@message1	offset=-1 (param)
   281 ;;sendOut@message2	offset=-2 (param)
   282 ;;sendOut@message3	offset=-3 (param)
   283 ;;___awmod@sign	offset	0
   284 ;;___awmod@counter	offset	1
   285 ;;___awmod@dividend	offset=-2 (param)
   286 ;;___awmod@divisor	offset=-4 (param)
   287 ;;___awdiv@quotient	offset	0
   288 ;;___awdiv@sign	offset	2
   289 ;;___awdiv@counter	offset	3
   290 ;;___awdiv@dividend	offset=-2 (param)
   291 ;;___awdiv@divisor	offset=-4 (param)
   292 ;;___lbmod@rem	offset	0
   293 ;;___lbmod@counter	offset	1
   294 ;;___lbmod@dividend	offset=-1 (param)
   295 ;;___lbmod@divisor	offset=-2 (param)
   296                           
   297                           	psect	idataCOMRAM
   298  0098A9                     __pidataCOMRAM:
   299                           	opt stack 0
   300                           
   301                           ;initializer for _number_to_display
   302  0098A9  FF80               	dw	65408
   303                           
   304                           ;initializer for _NOTE_LENGTH_PULSES
   305  0098AB  0C                 	db	12
   306                           
   307                           ;initializer for _OCTAVES
   308  0098AC  03                 	db	3
   309                           
   310                           ;initializer for _which_screen
   311  0098AD  02                 	db	2
   312                           
   313                           ;initializer for _octave
   314  0098AE  04                 	db	4
   315                           
   316                           ;initializer for _velocity
   317  0098AF  7F                 	db	127
   318                           
   319                           ;initializer for _drumchannel
   320  0098B0  09                 	db	9
   321                           
   322                           	psect	idataBANK0
   323  00989E                     __pidataBANK0:
   324                           	opt stack 0
   325                           
   326                           ;initializer for _DRUM_CC
   327  00989E  50                 	db	80
   328  00989F  51                 	db	81
   329  0098A0  52                 	db	82
   330  0098A1  53                 	db	83
   331  0098A2  55                 	db	85
   332  0098A3  56                 	db	86
   333  0098A4  57                 	db	87
   334  0098A5  58                 	db	88
   335                           
   336                           ;initializer for _iterator_focus
   337  0098A6  FF                 	db	255
   338                           
   339                           ;initializer for _ema_integer
   340  0098A7  32                 	db	50
   341                           
   342                           ;initializer for _BPM
   343  0098A8  78                 	db	120
   344                           
   345                           	psect	idataBANK1
   346  009806                     __pidataBANK1:
   347                           	opt stack 0
   348                           
   349                           ;initializer for _DRUM_NOTE
   350  009806  24                 	db	36
   351  009807  26                 	db	38
   352  009808  27                 	db	39
   353  009809  28                 	db	40
   354  00980A  2A                 	db	42
   355  00980B  2E                 	db	46
   356  00980C  31                 	db	49
   357  00980D  36                 	db	54
   358                           
   359                           ;initializer for _randx
   360  00980E  0001               	dw	1
   361  009810  0000               	dw	0
   362                           
   363                           ;initializer for _HYST_VAL
   364  009812  0010               	dw	16
   365                           
   366                           ;initializer for _PRESCALER
   367  009814  04                 	db	4
   368                           
   369                           ;initializer for _PPQN
   370  009815  30                 	db	48
   371                           
   372                           ;initializer for _command
   373  009816  80                 	db	128
   374                           
   375                           ;initializer for _string_to_display
   376  009817  74                 	db	116
   377  009818  45                 	db	69
   378  009819  53                 	db	83
   379  00981A  74                 	db	116
   380  00981B  00                 	db	0
   381                           
   382                           ;initializer for _major_triad
   383  00981C  00                 	db	0
   384  00981D  04                 	db	4
   385  00981E  07                 	db	7
   386                           
   387                           	psect	idataBANK2
   388  008F44                     __pidataBANK2:
   389                           	opt stack 0
   390                           
   391                           ;initializer for _inputPotsArray
   392  008F44  00                 	db	0
   393  008F45  46                 	db	70
   394  008F46  10                 	db	16
   395  008F47  00                 	db	0
   396  008F48  47                 	db	71
   397  008F49  11                 	db	17
   398  008F4A  00                 	db	0
   399  008F4B  48                 	db	72
   400  008F4C  12                 	db	18
   401  008F4D  00                 	db	0
   402  008F4E  49                 	db	73
   403  008F4F  13                 	db	19
   404  008F50  00                 	db	0
   405  008F51  4A                 	db	74
   406  008F52  14                 	db	20
   407  008F53  00                 	db	0
   408  008F54  4B                 	db	75
   409  008F55  15                 	db	21
   410  008F56  00                 	db	0
   411  008F57  4C                 	db	76
   412  008F58  16                 	db	22
   413  008F59  00                 	db	0
   414  008F5A  66                 	db	102
   415  008F5B  17                 	db	23
   416  008F5C  00                 	db	0
   417  008F5D  67                 	db	103
   418  008F5E  18                 	db	24
   419  008F5F  00                 	db	0
   420  008F60  68                 	db	104
   421  008F61  19                 	db	25
   422  008F62  00                 	db	0
   423  008F63  6A                 	db	106
   424  008F64  1A                 	db	26
   425  008F65  00                 	db	0
   426  008F66  6B                 	db	107
   427  008F67  1B                 	db	27
   428  008F68  00                 	db	0
   429  008F69  6C                 	db	108
   430  008F6A  1C                 	db	28
   431  008F6B  00                 	db	0
   432  008F6C  6D                 	db	109
   433  008F6D  1D                 	db	29
   434  008F6E  00                 	db	0
   435  008F6F  FD                 	db	253
   436  008F70  FD                 	db	253
   437  008F71  00                 	db	0
   438  008F72  FE                 	db	254
   439  008F73  FE                 	db	254
   440                           
   441                           ;initializer for _NOTE_LENGTH_PULSES_ARRAY
   442  008F74  30                 	db	48
   443  008F75  48                 	db	72
   444  008F76  20                 	db	32
   445  008F77  18                 	db	24
   446  008F78  24                 	db	36
   447  008F79  10                 	db	16
   448  008F7A  0C                 	db	12
   449  008F7B  12                 	db	18
   450  008F7C  08                 	db	8
   451  008F7D  06                 	db	6
   452  008F7E  09                 	db	9
   453  008F7F  04                 	db	4
   454                           
   455                           ;initializer for _number_of_interrupts
   456  008F80  007D               	dw	125
   457  008F82  0000               	dw	0
   458                           
   459                           ;initializer for _diminished_7th
   460  008F84  00                 	db	0
   461  008F85  03                 	db	3
   462  008F86  06                 	db	6
   463  008F87  09                 	db	9
   464                           
   465                           ;initializer for _half_diminished_7th
   466  008F88  00                 	db	0
   467  008F89  03                 	db	3
   468  008F8A  06                 	db	6
   469  008F8B  0A                 	db	10
   470                           
   471                           ;initializer for _minor_7th
   472  008F8C  00                 	db	0
   473  008F8D  03                 	db	3
   474  008F8E  07                 	db	7
   475  008F8F  0A                 	db	10
   476                           
   477                           ;initializer for _major_7th
   478  008F90  00                 	db	0
   479  008F91  04                 	db	4
   480  008F92  07                 	db	7
   481  008F93  0B                 	db	11
   482                           
   483                           ;initializer for _dominant_7th
   484  008F94  00                 	db	0
   485  008F95  04                 	db	4
   486  008F96  07                 	db	7
   487  008F97  0A                 	db	10
   488                           
   489                           ;initializer for _diminished_triad
   490  008F98  00                 	db	0
   491  008F99  03                 	db	3
   492  008F9A  06                 	db	6
   493                           
   494                           ;initializer for _augmented_triad
   495  008F9B  00                 	db	0
   496  008F9C  04                 	db	4
   497  008F9D  08                 	db	8
   498                           
   499                           ;initializer for _minor_triad
   500  008F9E  00                 	db	0
   501  008F9F  03                 	db	3
   502  008FA0  07                 	db	7
   503                           
   504                           	psect	idataBANK3
   505  008C88                     __pidataBANK3:
   506                           	opt stack 0
   507                           
   508                           ;initializer for _menuArray
   509  008C88  08                 	db	8
   510  008C89  00                 	db	0
   511  008C8A  00                 	db	0
   512  008C8B  0C                 	db	12
   513  008C8C  00                 	db	0
   514  008C8D  00                 	db	0
   515  008C8E  07                 	db	7
   516  008C8F  00                 	db	0
   517  008C90  00                 	db	0
   518  008C91  04                 	db	4
   519  008C92  00                 	db	0
   520  008C93  00                 	db	0
   521  008C94  05                 	db	5
   522  008C95  00                 	db	0
   523  008C96  00                 	db	0
   524  008C97  02                 	db	2
   525  008C98  00                 	db	0
   526  008C99  00                 	db	0
   527  008C9A  05                 	db	5
   528  008C9B  00                 	db	0
   529  008C9C  00                 	db	0
   530  008C9D  02                 	db	2
   531  008C9E  00                 	db	0
   532  008C9F  00                 	db	0
   533  008CA0  08                 	db	8
   534  008CA1  00                 	db	0
   535  008CA2  00                 	db	0
   536  008CA3  08                 	db	8
   537  008CA4  00                 	db	0
   538  008CA5  00                 	db	0
   539  008CA6  05                 	db	5
   540  008CA7  00                 	db	0
   541  008CA8  00                 	db	0
   542  008CA9  02                 	db	2
   543  008CAA  00                 	db	0
   544  008CAB  00                 	db	0
   545  008CAC  07                 	db	7
   546  008CAD  00                 	db	0
   547  008CAE  00                 	db	0
   548  008CAF  07                 	db	7
   549  008CB0  00                 	db	0
   550  008CB1  00                 	db	0
   551  008CB2  02                 	db	2
   552  008CB3  00                 	db	0
   553  008CB4  00                 	db	0
   554  008CB5  02                 	db	2
   555  008CB6  00                 	db	0
   556  008CB7  00                 	db	0
   557  008CB8  05                 	db	5
   558  008CB9  00                 	db	0
   559  008CBA  00                 	db	0
   560  008CBB  05                 	db	5
   561  008CBC  00                 	db	0
   562  008CBD  00                 	db	0
   563  008CBE  02                 	db	2
   564  008CBF  00                 	db	0
   565  008CC0  00                 	db	0
   566  008CC1  09                 	db	9
   567  008CC2  00                 	db	0
   568  008CC3  00                 	db	0
   569  008CC4  02                 	db	2
   570  008CC5  00                 	db	0
   571  008CC6  00                 	db	0
   572  008CC7  07                 	db	7
   573  008CC8  00                 	db	0
   574  008CC9  00                 	db	0
   575  008CCA  0C                 	db	12
   576  008CCB  00                 	db	0
   577  008CCC  00                 	db	0
   578  008CCD  02                 	db	2
   579  008CCE  00                 	db	0
   580  008CCF  00                 	db	0
   581  008CD0  01                 	db	1
   582  008CD1  00                 	db	0
   583  008CD2  00                 	db	0
   584  008CD3  01                 	db	1
   585  008CD4  00                 	db	0
   586  008CD5  00                 	db	0
   587  008CD6  01                 	db	1
   588  008CD7  00                 	db	0
   589  008CD8  00                 	db	0
   590  008CD9  02                 	db	2
   591  008CDA  00                 	db	0
   592  008CDB  00                 	db	0
   593  008CDC  01                 	db	1
   594  008CDD  00                 	db	0
   595  008CDE  00                 	db	0
   596  008CDF  01                 	db	1
   597  008CE0  00                 	db	0
   598  008CE1  00                 	db	0
   599  008CE2  04                 	db	4
   600  008CE3  00                 	db	0
   601  008CE4  00                 	db	0
   602  008CE5  01                 	db	1
   603  008CE6  00                 	db	0
   604  008CE7  00                 	db	0
   605  008CE8  01                 	db	1
   606  008CE9  00                 	db	0
   607  008CEA  00                 	db	0
   608  008CEB  01                 	db	1
   609  008CEC  00                 	db	0
   610  008CED  00                 	db	0
   611  008CEE  01                 	db	1
   612  008CEF  00                 	db	0
   613  008CF0  00                 	db	0
   614                           
   615                           	psect	mediumconst
   616  00E8C2                     __pmediumconst:
   617                           	opt stack 0
   618  00E8C2  00                 	db	0
   619  00E8C3  4B                 	db	75
   620  00E8C4  45                 	db	69
   621  00E8C5  59                 	db	89
   622  00E8C6  42                 	db	66
   623  00E8C7  4F                 	db	79
   624  00E8C8  41                 	db	65
   625  00E8C9  52                 	db	82
   626  00E8CA  44                 	db	68
   627  00E8CB  20                 	db	32
   628  00E8CC  4D                 	db	77
   629  00E8CD  4F                 	db	79
   630  00E8CE  44                 	db	68
   631  00E8CF  45                 	db	69
   632  00E8D0  3A                 	db	58
   633  00E8D1  00                 	db	0
   634  00E8D2  00                 	db	0
   635  00E8D3  00                 	db	0
   636  00E8D4  41                 	db	65
   637  00E8D5  52                 	db	82
   638  00E8D6  50                 	db	80
   639  00E8D7  45                 	db	69
   640  00E8D8  47                 	db	71
   641  00E8D9  47                 	db	71
   642  00E8DA  49                 	db	73
   643  00E8DB  4F                 	db	79
   644  00E8DC  20                 	db	32
   645  00E8DD  4D                 	db	77
   646  00E8DE  45                 	db	69
   647  00E8DF  4E                 	db	78
   648  00E8E0  55                 	db	85
   649  00E8E1  3A                 	db	58
   650  00E8E2  00                 	db	0
   651  00E8E3  00                 	db	0
   652  00E8E4  00                 	db	0
   653  00E8E5  54                 	db	84
   654  00E8E6  52                 	db	82
   655  00E8E7  41                 	db	65
   656  00E8E8  4E                 	db	78
   657  00E8E9  53                 	db	83
   658  00E8EA  50                 	db	80
   659  00E8EB  4F                 	db	79
   660  00E8EC  53                 	db	83
   661  00E8ED  45                 	db	69
   662  00E8EE  20                 	db	32
   663  00E8EF  4D                 	db	77
   664  00E8F0  4F                 	db	79
   665  00E8F1  44                 	db	68
   666  00E8F2  45                 	db	69
   667  00E8F3  3A                 	db	58
   668  00E8F4  00                 	db	0
   669  00E8F5  00                 	db	0
   670  00E8F6  44                 	db	68
   671  00E8F7  52                 	db	82
   672  00E8F8  55                 	db	85
   673  00E8F9  4D                 	db	77
   674  00E8FA  20                 	db	32
   675  00E8FB  4D                 	db	77
   676  00E8FC  4F                 	db	79
   677  00E8FD  44                 	db	68
   678  00E8FE  45                 	db	69
   679  00E8FF  3A                 	db	58
   680  00E900  00                 	db	0
   681  00E901  00                 	db	0
   682  00E902  00                 	db	0
   683  00E903  00                 	db	0
   684  00E904  00                 	db	0
   685  00E905  00                 	db	0
   686  00E906  00                 	db	0
   687  00E907  50                 	db	80
   688  00E908  4F                 	db	79
   689  00E909  54                 	db	84
   690  00E90A  53                 	db	83
   691  00E90B  20                 	db	32
   692  00E90C  4D                 	db	77
   693  00E90D  4F                 	db	79
   694  00E90E  44                 	db	68
   695  00E90F  45                 	db	69
   696  00E910  3A                 	db	58
   697  00E911  00                 	db	0
   698  00E912  00                 	db	0
   699  00E913  00                 	db	0
   700  00E914  00                 	db	0
   701  00E915  00                 	db	0
   702  00E916  00                 	db	0
   703  00E917  00                 	db	0
   704  00E918  4D                 	db	77
   705  00E919  49                 	db	73
   706  00E91A  44                 	db	68
   707  00E91B  49                 	db	73
   708  00E91C  20                 	db	32
   709  00E91D  43                 	db	67
   710  00E91E  48                 	db	72
   711  00E91F  41                 	db	65
   712  00E920  4E                 	db	78
   713  00E921  4E                 	db	78
   714  00E922  45                 	db	69
   715  00E923  4C                 	db	76
   716  00E924  53                 	db	83
   717  00E925  3A                 	db	58
   718  00E926  00                 	db	0
   719  00E927  00                 	db	0
   720  00E928  00                 	db	0
   721  00E929  50                 	db	80
   722  00E92A  52                 	db	82
   723  00E92B  4F                 	db	79
   724  00E92C  47                 	db	71
   725  00E92D  52                 	db	82
   726  00E92E  41                 	db	65
   727  00E92F  4D                 	db	77
   728  00E930  20                 	db	32
   729  00E931  43                 	db	67
   730  00E932  48                 	db	72
   731  00E933  41                 	db	65
   732  00E934  4E                 	db	78
   733  00E935  47                 	db	71
   734  00E936  45                 	db	69
   735  00E937  3A                 	db	58
   736  00E938  00                 	db	0
   737  00E939  00                 	db	0
   738  00E93A  45                 	db	69
   739  00E93B  45                 	db	69
   740  00E93C  50                 	db	80
   741  00E93D  52                 	db	82
   742  00E93E  4F                 	db	79
   743  00E93F  4D                 	db	77
   744  00E940  20                 	db	32
   745  00E941  4D                 	db	77
   746  00E942  45                 	db	69
   747  00E943  4E                 	db	78
   748  00E944  55                 	db	85
   749  00E945  3A                 	db	58
   750  00E946  00                 	db	0
   751  00E947  00                 	db	0
   752  00E948  00                 	db	0
   753  00E949  00                 	db	0
   754  00E94A  00                 	db	0
   755  00E94B  43                 	db	67
   756  00E94C  48                 	db	72
   757  00E94D  52                 	db	82
   758  00E94E  4F                 	db	79
   759  00E94F  4D                 	db	77
   760  00E950  41                 	db	65
   761  00E951  54                 	db	84
   762  00E952  49                 	db	73
   763  00E953  43                 	db	67
   764  00E954  00                 	db	0
   765  00E955  00                 	db	0
   766  00E956  00                 	db	0
   767  00E957  00                 	db	0
   768  00E958  00                 	db	0
   769  00E959  00                 	db	0
   770  00E95A  00                 	db	0
   771  00E95B  00                 	db	0
   772  00E95C  4D                 	db	77
   773  00E95D  41                 	db	65
   774  00E95E  4A                 	db	74
   775  00E95F  4F                 	db	79
   776  00E960  52                 	db	82
   777  00E961  00                 	db	0
   778  00E962  00                 	db	0
   779  00E963  00                 	db	0
   780  00E964  00                 	db	0
   781  00E965  00                 	db	0
   782  00E966  00                 	db	0
   783  00E967  00                 	db	0
   784  00E968  00                 	db	0
   785  00E969  00                 	db	0
   786  00E96A  00                 	db	0
   787  00E96B  00                 	db	0
   788  00E96C  00                 	db	0
   789  00E96D  4D                 	db	77
   790  00E96E  49                 	db	73
   791  00E96F  4E                 	db	78
   792  00E970  4F                 	db	79
   793  00E971  52                 	db	82
   794  00E972  00                 	db	0
   795  00E973  00                 	db	0
   796  00E974  00                 	db	0
   797  00E975  00                 	db	0
   798  00E976  00                 	db	0
   799  00E977  00                 	db	0
   800  00E978  00                 	db	0
   801  00E979  00                 	db	0
   802  00E97A  00                 	db	0
   803  00E97B  00                 	db	0
   804  00E97C  00                 	db	0
   805  00E97D  00                 	db	0
   806  00E97E  4D                 	db	77
   807  00E97F  4F                 	db	79
   808  00E980  44                 	db	68
   809  00E981  45                 	db	69
   810  00E982  53                 	db	83
   811  00E983  00                 	db	0
   812  00E984  00                 	db	0
   813  00E985  00                 	db	0
   814  00E986  00                 	db	0
   815  00E987  00                 	db	0
   816  00E988  00                 	db	0
   817  00E989  00                 	db	0
   818  00E98A  00                 	db	0
   819  00E98B  00                 	db	0
   820  00E98C  00                 	db	0
   821  00E98D  00                 	db	0
   822  00E98E  00                 	db	0
   823  00E98F  50                 	db	80
   824  00E990  45                 	db	69
   825  00E991  4E                 	db	78
   826  00E992  54                 	db	84
   827  00E993  41                 	db	65
   828  00E994  54                 	db	84
   829  00E995  4F                 	db	79
   830  00E996  4E                 	db	78
   831  00E997  49                 	db	73
   832  00E998  43                 	db	67
   833  00E999  20                 	db	32
   834  00E99A  4D                 	db	77
   835  00E99B  41                 	db	65
   836  00E99C  4A                 	db	74
   837  00E99D  4F                 	db	79
   838  00E99E  52                 	db	82
   839  00E99F  00                 	db	0
   840  00E9A0  50                 	db	80
   841  00E9A1  45                 	db	69
   842  00E9A2  4E                 	db	78
   843  00E9A3  54                 	db	84
   844  00E9A4  41                 	db	65
   845  00E9A5  54                 	db	84
   846  00E9A6  4F                 	db	79
   847  00E9A7  4E                 	db	78
   848  00E9A8  49                 	db	73
   849  00E9A9  43                 	db	67
   850  00E9AA  20                 	db	32
   851  00E9AB  4D                 	db	77
   852  00E9AC  49                 	db	73
   853  00E9AD  4E                 	db	78
   854  00E9AE  4F                 	db	79
   855  00E9AF  52                 	db	82
   856  00E9B0  00                 	db	0
   857  00E9B1  54                 	db	84
   858  00E9B2  52                 	db	82
   859  00E9B3  49                 	db	73
   860  00E9B4  41                 	db	65
   861  00E9B5  44                 	db	68
   862  00E9B6  00                 	db	0
   863  00E9B7  00                 	db	0
   864  00E9B8  00                 	db	0
   865  00E9B9  00                 	db	0
   866  00E9BA  00                 	db	0
   867  00E9BB  00                 	db	0
   868  00E9BC  00                 	db	0
   869  00E9BD  00                 	db	0
   870  00E9BE  00                 	db	0
   871  00E9BF  00                 	db	0
   872  00E9C0  00                 	db	0
   873  00E9C1  00                 	db	0
   874  00E9C2  44                 	db	68
   875  00E9C3  49                 	db	73
   876  00E9C4  41                 	db	65
   877  00E9C5  54                 	db	84
   878  00E9C6  4F                 	db	79
   879  00E9C7  4E                 	db	78
   880  00E9C8  49                 	db	73
   881  00E9C9  43                 	db	67
   882  00E9CA  20                 	db	32
   883  00E9CB  54                 	db	84
   884  00E9CC  20                 	db	32
   885  00E9CD  4D                 	db	77
   886  00E9CE  41                 	db	65
   887  00E9CF  4A                 	db	74
   888  00E9D0  4F                 	db	79
   889  00E9D1  52                 	db	82
   890  00E9D2  00                 	db	0
   891  00E9D3  44                 	db	68
   892  00E9D4  49                 	db	73
   893  00E9D5  41                 	db	65
   894  00E9D6  54                 	db	84
   895  00E9D7  4F                 	db	79
   896  00E9D8  4E                 	db	78
   897  00E9D9  49                 	db	73
   898  00E9DA  43                 	db	67
   899  00E9DB  20                 	db	32
   900  00E9DC  54                 	db	84
   901  00E9DD  20                 	db	32
   902  00E9DE  4D                 	db	77
   903  00E9DF  49                 	db	73
   904  00E9E0  4E                 	db	78
   905  00E9E1  4F                 	db	79
   906  00E9E2  52                 	db	82
   907  00E9E3  00                 	db	0
   908  00E9E4  53                 	db	83
   909  00E9E5  45                 	db	69
   910  00E9E6  56                 	db	86
   911  00E9E7  45                 	db	69
   912  00E9E8  4E                 	db	78
   913  00E9E9  54                 	db	84
   914  00E9EA  48                 	db	72
   915  00E9EB  00                 	db	0
   916  00E9EC  00                 	db	0
   917  00E9ED  00                 	db	0
   918  00E9EE  00                 	db	0
   919  00E9EF  00                 	db	0
   920  00E9F0  00                 	db	0
   921  00E9F1  00                 	db	0
   922  00E9F2  00                 	db	0
   923  00E9F3  00                 	db	0
   924  00E9F4  00                 	db	0
   925  00E9F5  44                 	db	68
   926  00E9F6  49                 	db	73
   927  00E9F7  41                 	db	65
   928  00E9F8  54                 	db	84
   929  00E9F9  4F                 	db	79
   930  00E9FA  4E                 	db	78
   931  00E9FB  49                 	db	73
   932  00E9FC  43                 	db	67
   933  00E9FD  20                 	db	32
   934  00E9FE  37                 	db	55
   935  00E9FF  20                 	db	32
   936  00EA00  4D                 	db	77
   937  00EA01  41                 	db	65
   938  00EA02  4A                 	db	74
   939  00EA03  4F                 	db	79
   940  00EA04  52                 	db	82
   941  00EA05  00                 	db	0
   942  00EA06  44                 	db	68
   943  00EA07  49                 	db	73
   944  00EA08  41                 	db	65
   945  00EA09  54                 	db	84
   946  00EA0A  4F                 	db	79
   947  00EA0B  4E                 	db	78
   948  00EA0C  49                 	db	73
   949  00EA0D  43                 	db	67
   950  00EA0E  20                 	db	32
   951  00EA0F  37                 	db	55
   952  00EA10  20                 	db	32
   953  00EA11  4D                 	db	77
   954  00EA12  49                 	db	73
   955  00EA13  4E                 	db	78
   956  00EA14  4F                 	db	79
   957  00EA15  52                 	db	82
   958  00EA16  00                 	db	0
   959  00EA17  69                 	db	105
   960  00EA18  6F                 	db	111
   961  00EA19  6E                 	db	110
   962  00EA1A  69                 	db	105
   963  00EA1B  61                 	db	97
   964  00EA1C  6E                 	db	110
   965  00EA1D  00                 	db	0
   966  00EA1E  00                 	db	0
   967  00EA1F  00                 	db	0
   968  00EA20  00                 	db	0
   969  00EA21  00                 	db	0
   970  00EA22  00                 	db	0
   971  00EA23  00                 	db	0
   972  00EA24  00                 	db	0
   973  00EA25  00                 	db	0
   974  00EA26  00                 	db	0
   975  00EA27  00                 	db	0
   976  00EA28  64                 	db	100
   977  00EA29  6F                 	db	111
   978  00EA2A  72                 	db	114
   979  00EA2B  69                 	db	105
   980  00EA2C  61                 	db	97
   981  00EA2D  6E                 	db	110
   982  00EA2E  00                 	db	0
   983  00EA2F  00                 	db	0
   984  00EA30  00                 	db	0
   985  00EA31  00                 	db	0
   986  00EA32  00                 	db	0
   987  00EA33  00                 	db	0
   988  00EA34  00                 	db	0
   989  00EA35  00                 	db	0
   990  00EA36  00                 	db	0
   991  00EA37  00                 	db	0
   992  00EA38  00                 	db	0
   993  00EA39  70                 	db	112
   994  00EA3A  68                 	db	104
   995  00EA3B  72                 	db	114
   996  00EA3C  79                 	db	121
   997  00EA3D  67                 	db	103
   998  00EA3E  69                 	db	105
   999  00EA3F  61                 	db	97
  1000  00EA40  6E                 	db	110
  1001  00EA41  00                 	db	0
  1002  00EA42  00                 	db	0
  1003  00EA43  00                 	db	0
  1004  00EA44  00                 	db	0
  1005  00EA45  00                 	db	0
  1006  00EA46  00                 	db	0
  1007  00EA47  00                 	db	0
  1008  00EA48  00                 	db	0
  1009  00EA49  00                 	db	0
  1010  00EA4A  6C                 	db	108
  1011  00EA4B  79                 	db	121
  1012  00EA4C  64                 	db	100
  1013  00EA4D  69                 	db	105
  1014  00EA4E  61                 	db	97
  1015  00EA4F  6E                 	db	110
  1016  00EA50  00                 	db	0
  1017  00EA51  00                 	db	0
  1018  00EA52  00                 	db	0
  1019  00EA53  00                 	db	0
  1020  00EA54  00                 	db	0
  1021  00EA55  00                 	db	0
  1022  00EA56  00                 	db	0
  1023  00EA57  00                 	db	0
  1024  00EA58  00                 	db	0
  1025  00EA59  00                 	db	0
  1026  00EA5A  00                 	db	0
  1027  00EA5B  6D                 	db	109
  1028  00EA5C  69                 	db	105
  1029  00EA5D  78                 	db	120
  1030  00EA5E  6F                 	db	111
  1031  00EA5F  6C                 	db	108
  1032  00EA60  79                 	db	121
  1033  00EA61  64                 	db	100
  1034  00EA62  69                 	db	105
  1035  00EA63  61                 	db	97
  1036  00EA64  6E                 	db	110
  1037  00EA65  00                 	db	0
  1038  00EA66  00                 	db	0
  1039  00EA67  00                 	db	0
  1040  00EA68  00                 	db	0
  1041  00EA69  00                 	db	0
  1042  00EA6A  00                 	db	0
  1043  00EA6B  00                 	db	0
  1044  00EA6C  61                 	db	97
  1045  00EA6D  65                 	db	101
  1046  00EA6E  6F                 	db	111
  1047  00EA6F  6C                 	db	108
  1048  00EA70  69                 	db	105
  1049  00EA71  61                 	db	97
  1050  00EA72  6E                 	db	110
  1051  00EA73  00                 	db	0
  1052  00EA74  00                 	db	0
  1053  00EA75  00                 	db	0
  1054  00EA76  00                 	db	0
  1055  00EA77  00                 	db	0
  1056  00EA78  00                 	db	0
  1057  00EA79  00                 	db	0
  1058  00EA7A  00                 	db	0
  1059  00EA7B  00                 	db	0
  1060  00EA7C  00                 	db	0
  1061  00EA7D  6C                 	db	108
  1062  00EA7E  6F                 	db	111
  1063  00EA7F  63                 	db	99
  1064  00EA80  72                 	db	114
  1065  00EA81  69                 	db	105
  1066  00EA82  61                 	db	97
  1067  00EA83  6E                 	db	110
  1068  00EA84  00                 	db	0
  1069  00EA85  00                 	db	0
  1070  00EA86  00                 	db	0
  1071  00EA87  00                 	db	0
  1072  00EA88  00                 	db	0
  1073  00EA89  00                 	db	0
  1074  00EA8A  00                 	db	0
  1075  00EA8B  00                 	db	0
  1076  00EA8C  00                 	db	0
  1077  00EA8D  00                 	db	0
  1078  00EA8E  6D                 	db	109
  1079  00EA8F  61                 	db	97
  1080  00EA90  6A                 	db	106
  1081  00EA91  6F                 	db	111
  1082  00EA92  72                 	db	114
  1083  00EA93  20                 	db	32
  1084  00EA94  74                 	db	116
  1085  00EA95  72                 	db	114
  1086  00EA96  69                 	db	105
  1087  00EA97  61                 	db	97
  1088  00EA98  64                 	db	100
  1089  00EA99  00                 	db	0
  1090  00EA9A  00                 	db	0
  1091  00EA9B  00                 	db	0
  1092  00EA9C  00                 	db	0
  1093  00EA9D  00                 	db	0
  1094  00EA9E  00                 	db	0
  1095  00EA9F  6D                 	db	109
  1096  00EAA0  69                 	db	105
  1097  00EAA1  6E                 	db	110
  1098  00EAA2  6F                 	db	111
  1099  00EAA3  72                 	db	114
  1100  00EAA4  20                 	db	32
  1101  00EAA5  74                 	db	116
  1102  00EAA6  72                 	db	114
  1103  00EAA7  69                 	db	105
  1104  00EAA8  61                 	db	97
  1105  00EAA9  64                 	db	100
  1106  00EAAA  00                 	db	0
  1107  00EAAB  00                 	db	0
  1108  00EAAC  00                 	db	0
  1109  00EAAD  00                 	db	0
  1110  00EAAE  00                 	db	0
  1111  00EAAF  00                 	db	0
  1112  00EAB0  61                 	db	97
  1113  00EAB1  75                 	db	117
  1114  00EAB2  67                 	db	103
  1115  00EAB3  6D                 	db	109
  1116  00EAB4  65                 	db	101
  1117  00EAB5  6E                 	db	110
  1118  00EAB6  74                 	db	116
  1119  00EAB7  65                 	db	101
  1120  00EAB8  64                 	db	100
  1121  00EAB9  20                 	db	32
  1122  00EABA  74                 	db	116
  1123  00EABB  72                 	db	114
  1124  00EABC  69                 	db	105
  1125  00EABD  61                 	db	97
  1126  00EABE  64                 	db	100
  1127  00EABF  00                 	db	0
  1128  00EAC0  00                 	db	0
  1129  00EAC1  64                 	db	100
  1130  00EAC2  69                 	db	105
  1131  00EAC3  6D                 	db	109
  1132  00EAC4  69                 	db	105
  1133  00EAC5  6E                 	db	110
  1134  00EAC6  69                 	db	105
  1135  00EAC7  73                 	db	115
  1136  00EAC8  68                 	db	104
  1137  00EAC9  65                 	db	101
  1138  00EACA  64                 	db	100
  1139  00EACB  20                 	db	32
  1140  00EACC  74                 	db	116
  1141  00EACD  72                 	db	114
  1142  00EACE  69                 	db	105
  1143  00EACF  61                 	db	97
  1144  00EAD0  64                 	db	100
  1145  00EAD1  00                 	db	0
  1146  00EAD2  64                 	db	100
  1147  00EAD3  6F                 	db	111
  1148  00EAD4  6D                 	db	109
  1149  00EAD5  69                 	db	105
  1150  00EAD6  6E                 	db	110
  1151  00EAD7  61                 	db	97
  1152  00EAD8  6E                 	db	110
  1153  00EAD9  74                 	db	116
  1154  00EADA  20                 	db	32
  1155  00EADB  37                 	db	55
  1156  00EADC  74                 	db	116
  1157  00EADD  68                 	db	104
  1158  00EADE  00                 	db	0
  1159  00EADF  00                 	db	0
  1160  00EAE0  00                 	db	0
  1161  00EAE1  00                 	db	0
  1162  00EAE2  00                 	db	0
  1163  00EAE3  6D                 	db	109
  1164  00EAE4  61                 	db	97
  1165  00EAE5  6A                 	db	106
  1166  00EAE6  6F                 	db	111
  1167  00EAE7  72                 	db	114
  1168  00EAE8  20                 	db	32
  1169  00EAE9  37                 	db	55
  1170  00EAEA  74                 	db	116
  1171  00EAEB  68                 	db	104
  1172  00EAEC  00                 	db	0
  1173  00EAED  00                 	db	0
  1174  00EAEE  00                 	db	0
  1175  00EAEF  00                 	db	0
  1176  00EAF0  00                 	db	0
  1177  00EAF1  00                 	db	0
  1178  00EAF2  00                 	db	0
  1179  00EAF3  00                 	db	0
  1180  00EAF4  6D                 	db	109
  1181  00EAF5  69                 	db	105
  1182  00EAF6  6E                 	db	110
  1183  00EAF7  6F                 	db	111
  1184  00EAF8  72                 	db	114
  1185  00EAF9  20                 	db	32
  1186  00EAFA  37                 	db	55
  1187  00EAFB  74                 	db	116
  1188  00EAFC  68                 	db	104
  1189  00EAFD  00                 	db	0
  1190  00EAFE  00                 	db	0
  1191  00EAFF  00                 	db	0
  1192  00EB00  00                 	db	0
  1193  00EB01  00                 	db	0
  1194  00EB02  00                 	db	0
  1195  00EB03  00                 	db	0
  1196  00EB04  00                 	db	0
  1197  00EB05  68                 	db	104
  1198  00EB06  61                 	db	97
  1199  00EB07  6C                 	db	108
  1200  00EB08  66                 	db	102
  1201  00EB09  20                 	db	32
  1202  00EB0A  64                 	db	100
  1203  00EB0B  69                 	db	105
  1204  00EB0C  6D                 	db	109
  1205  00EB0D  69                 	db	105
  1206  00EB0E  6E                 	db	110
  1207  00EB0F  69                 	db	105
  1208  00EB10  73                 	db	115
  1209  00EB11  68                 	db	104
  1210  00EB12  65                 	db	101
  1211  00EB13  64                 	db	100
  1212  00EB14  00                 	db	0
  1213  00EB15  00                 	db	0
  1214  00EB16  64                 	db	100
  1215  00EB17  69                 	db	105
  1216  00EB18  6D                 	db	109
  1217  00EB19  69                 	db	105
  1218  00EB1A  6E                 	db	110
  1219  00EB1B  69                 	db	105
  1220  00EB1C  73                 	db	115
  1221  00EB1D  68                 	db	104
  1222  00EB1E  65                 	db	101
  1223  00EB1F  64                 	db	100
  1224  00EB20  20                 	db	32
  1225  00EB21  37                 	db	55
  1226  00EB22  74                 	db	116
  1227  00EB23  68                 	db	104
  1228  00EB24  00                 	db	0
  1229  00EB25  00                 	db	0
  1230  00EB26  00                 	db	0
  1231  00EB27  48                 	db	72
  1232  00EB28  41                 	db	65
  1233  00EB29  4C                 	db	76
  1234  00EB2A  46                 	db	70
  1235  00EB2B  20                 	db	32
  1236  00EB2C  53                 	db	83
  1237  00EB2D  54                 	db	84
  1238  00EB2E  45                 	db	69
  1239  00EB2F  50                 	db	80
  1240  00EB30  00                 	db	0
  1241  00EB31  00                 	db	0
  1242  00EB32  00                 	db	0
  1243  00EB33  00                 	db	0
  1244  00EB34  00                 	db	0
  1245  00EB35  00                 	db	0
  1246  00EB36  00                 	db	0
  1247  00EB37  00                 	db	0
  1248  00EB38  43                 	db	67
  1249  00EB39  49                 	db	73
  1250  00EB3A  52                 	db	82
  1251  00EB3B  43                 	db	67
  1252  00EB3C  4C                 	db	76
  1253  00EB3D  45                 	db	69
  1254  00EB3E  20                 	db	32
  1255  00EB3F  4F                 	db	79
  1256  00EB40  46                 	db	70
  1257  00EB41  20                 	db	32
  1258  00EB42  46                 	db	70
  1259  00EB43  49                 	db	73
  1260  00EB44  46                 	db	70
  1261  00EB45  54                 	db	84
  1262  00EB46  48                 	db	72
  1263  00EB47  53                 	db	83
  1264  00EB48  00                 	db	0
  1265  00EB49  44                 	db	68
  1266  00EB4A  52                 	db	82
  1267  00EB4B  55                 	db	85
  1268  00EB4C  4D                 	db	77
  1269  00EB4D  20                 	db	32
  1270  00EB4E  49                 	db	73
  1271  00EB4F  53                 	db	83
  1272  00EB50  20                 	db	32
  1273  00EB51  4E                 	db	78
  1274  00EB52  4F                 	db	79
  1275  00EB53  54                 	db	84
  1276  00EB54  45                 	db	69
  1277  00EB55  20                 	db	32
  1278  00EB56  4F                 	db	79
  1279  00EB57  4E                 	db	78
  1280  00EB58  00                 	db	0
  1281  00EB59  00                 	db	0
  1282  00EB5A  44                 	db	68
  1283  00EB5B  52                 	db	82
  1284  00EB5C  55                 	db	85
  1285  00EB5D  4D                 	db	77
  1286  00EB5E  20                 	db	32
  1287  00EB5F  49                 	db	73
  1288  00EB60  53                 	db	83
  1289  00EB61  20                 	db	32
  1290  00EB62  43                 	db	67
  1291  00EB63  43                 	db	67
  1292  00EB64  00                 	db	0
  1293  00EB65  00                 	db	0
  1294  00EB66  00                 	db	0
  1295  00EB67  00                 	db	0
  1296  00EB68  00                 	db	0
  1297  00EB69  00                 	db	0
  1298  00EB6A  00                 	db	0
  1299  00EB6B  44                 	db	68
  1300  00EB6C  52                 	db	82
  1301  00EB6D  55                 	db	85
  1302  00EB6E  4D                 	db	77
  1303  00EB6F  20                 	db	32
  1304  00EB70  43                 	db	67
  1305  00EB71  43                 	db	67
  1306  00EB72  20                 	db	32
  1307  00EB73  54                 	db	84
  1308  00EB74  59                 	db	89
  1309  00EB75  50                 	db	80
  1310  00EB76  45                 	db	69
  1311  00EB77  00                 	db	0
  1312  00EB78  00                 	db	0
  1313  00EB79  00                 	db	0
  1314  00EB7A  00                 	db	0
  1315  00EB7B  00                 	db	0
  1316  00EB7C  44                 	db	68
  1317  00EB7D  52                 	db	82
  1318  00EB7E  55                 	db	85
  1319  00EB7F  4D                 	db	77
  1320  00EB80  20                 	db	32
  1321  00EB81  53                 	db	83
  1322  00EB82  45                 	db	69
  1323  00EB83  54                 	db	84
  1324  00EB84  20                 	db	32
  1325  00EB85  4E                 	db	78
  1326  00EB86  4E                 	db	78
  1327  00EB87  23                 	db	35
  1328  00EB88  00                 	db	0
  1329  00EB89  00                 	db	0
  1330  00EB8A  00                 	db	0
  1331  00EB8B  00                 	db	0
  1332  00EB8C  00                 	db	0
  1333  00EB8D  44                 	db	68
  1334  00EB8E  52                 	db	82
  1335  00EB8F  55                 	db	85
  1336  00EB90  4D                 	db	77
  1337  00EB91  20                 	db	32
  1338  00EB92  53                 	db	83
  1339  00EB93  45                 	db	69
  1340  00EB94  54                 	db	84
  1341  00EB95  20                 	db	32
  1342  00EB96  43                 	db	67
  1343  00EB97  43                 	db	67
  1344  00EB98  23                 	db	35
  1345  00EB99  00                 	db	0
  1346  00EB9A  00                 	db	0
  1347  00EB9B  00                 	db	0
  1348  00EB9C  00                 	db	0
  1349  00EB9D  00                 	db	0
  1350  00EB9E  44                 	db	68
  1351  00EB9F  52                 	db	82
  1352  00EBA0  55                 	db	85
  1353  00EBA1  4D                 	db	77
  1354  00EBA2  20                 	db	32
  1355  00EBA3  43                 	db	67
  1356  00EBA4  43                 	db	67
  1357  00EBA5  20                 	db	32
  1358  00EBA6  54                 	db	84
  1359  00EBA7  52                 	db	82
  1360  00EBA8  49                 	db	73
  1361  00EBA9  47                 	db	71
  1362  00EBAA  47                 	db	71
  1363  00EBAB  45                 	db	69
  1364  00EBAC  52                 	db	82
  1365  00EBAD  00                 	db	0
  1366  00EBAE  00                 	db	0
  1367  00EBAF  44                 	db	68
  1368  00EBB0  52                 	db	82
  1369  00EBB1  55                 	db	85
  1370  00EBB2  4D                 	db	77
  1371  00EBB3  20                 	db	32
  1372  00EBB4  43                 	db	67
  1373  00EBB5  43                 	db	67
  1374  00EBB6  20                 	db	32
  1375  00EBB7  54                 	db	84
  1376  00EBB8  4F                 	db	79
  1377  00EBB9  47                 	db	71
  1378  00EBBA  47                 	db	71
  1379  00EBBB  4C                 	db	76
  1380  00EBBC  45                 	db	69
  1381  00EBBD  00                 	db	0
  1382  00EBBE  00                 	db	0
  1383  00EBBF  00                 	db	0
  1384  00EBC0  44                 	db	68
  1385  00EBC1  52                 	db	82
  1386  00EBC2  55                 	db	85
  1387  00EBC3  4D                 	db	77
  1388  00EBC4  20                 	db	32
  1389  00EBC5  31                 	db	49
  1390  00EBC6  20                 	db	32
  1391  00EBC7  4E                 	db	78
  1392  00EBC8  4E                 	db	78
  1393  00EBC9  3A                 	db	58
  1394  00EBCA  20                 	db	32
  1395  00EBCB  00                 	db	0
  1396  00EBCC  00                 	db	0
  1397  00EBCD  00                 	db	0
  1398  00EBCE  00                 	db	0
  1399  00EBCF  00                 	db	0
  1400  00EBD0  00                 	db	0
  1401  00EBD1  44                 	db	68
  1402  00EBD2  52                 	db	82
  1403  00EBD3  55                 	db	85
  1404  00EBD4  4D                 	db	77
  1405  00EBD5  20                 	db	32
  1406  00EBD6  32                 	db	50
  1407  00EBD7  20                 	db	32
  1408  00EBD8  4E                 	db	78
  1409  00EBD9  4E                 	db	78
  1410  00EBDA  3A                 	db	58
  1411  00EBDB  20                 	db	32
  1412  00EBDC  00                 	db	0
  1413  00EBDD  00                 	db	0
  1414  00EBDE  00                 	db	0
  1415  00EBDF  00                 	db	0
  1416  00EBE0  00                 	db	0
  1417  00EBE1  00                 	db	0
  1418  00EBE2  44                 	db	68
  1419  00EBE3  52                 	db	82
  1420  00EBE4  55                 	db	85
  1421  00EBE5  4D                 	db	77
  1422  00EBE6  20                 	db	32
  1423  00EBE7  33                 	db	51
  1424  00EBE8  20                 	db	32
  1425  00EBE9  4E                 	db	78
  1426  00EBEA  4E                 	db	78
  1427  00EBEB  3A                 	db	58
  1428  00EBEC  20                 	db	32
  1429  00EBED  00                 	db	0
  1430  00EBEE  00                 	db	0
  1431  00EBEF  00                 	db	0
  1432  00EBF0  00                 	db	0
  1433  00EBF1  00                 	db	0
  1434  00EBF2  00                 	db	0
  1435  00EBF3  44                 	db	68
  1436  00EBF4  52                 	db	82
  1437  00EBF5  55                 	db	85
  1438  00EBF6  4D                 	db	77
  1439  00EBF7  20                 	db	32
  1440  00EBF8  34                 	db	52
  1441  00EBF9  20                 	db	32
  1442  00EBFA  4E                 	db	78
  1443  00EBFB  4E                 	db	78
  1444  00EBFC  3A                 	db	58
  1445  00EBFD  20                 	db	32
  1446  00EBFE  00                 	db	0
  1447  00EBFF  00                 	db	0
  1448  00EC00  00                 	db	0
  1449  00EC01  00                 	db	0
  1450  00EC02  00                 	db	0
  1451  00EC03  00                 	db	0
  1452  00EC04  44                 	db	68
  1453  00EC05  52                 	db	82
  1454  00EC06  55                 	db	85
  1455  00EC07  4D                 	db	77
  1456  00EC08  20                 	db	32
  1457  00EC09  35                 	db	53
  1458  00EC0A  20                 	db	32
  1459  00EC0B  4E                 	db	78
  1460  00EC0C  4E                 	db	78
  1461  00EC0D  3A                 	db	58
  1462  00EC0E  20                 	db	32
  1463  00EC0F  00                 	db	0
  1464  00EC10  00                 	db	0
  1465  00EC11  00                 	db	0
  1466  00EC12  00                 	db	0
  1467  00EC13  00                 	db	0
  1468  00EC14  00                 	db	0
  1469  00EC15  44                 	db	68
  1470  00EC16  52                 	db	82
  1471  00EC17  55                 	db	85
  1472  00EC18  4D                 	db	77
  1473  00EC19  20                 	db	32
  1474  00EC1A  36                 	db	54
  1475  00EC1B  20                 	db	32
  1476  00EC1C  4E                 	db	78
  1477  00EC1D  4E                 	db	78
  1478  00EC1E  3A                 	db	58
  1479  00EC1F  20                 	db	32
  1480  00EC20  00                 	db	0
  1481  00EC21  00                 	db	0
  1482  00EC22  00                 	db	0
  1483  00EC23  00                 	db	0
  1484  00EC24  00                 	db	0
  1485  00EC25  00                 	db	0
  1486  00EC26  44                 	db	68
  1487  00EC27  52                 	db	82
  1488  00EC28  55                 	db	85
  1489  00EC29  4D                 	db	77
  1490  00EC2A  20                 	db	32
  1491  00EC2B  37                 	db	55
  1492  00EC2C  20                 	db	32
  1493  00EC2D  4E                 	db	78
  1494  00EC2E  4E                 	db	78
  1495  00EC2F  3A                 	db	58
  1496  00EC30  20                 	db	32
  1497  00EC31  00                 	db	0
  1498  00EC32  00                 	db	0
  1499  00EC33  00                 	db	0
  1500  00EC34  00                 	db	0
  1501  00EC35  00                 	db	0
  1502  00EC36  00                 	db	0
  1503  00EC37  44                 	db	68
  1504  00EC38  52                 	db	82
  1505  00EC39  55                 	db	85
  1506  00EC3A  4D                 	db	77
  1507  00EC3B  20                 	db	32
  1508  00EC3C  38                 	db	56
  1509  00EC3D  20                 	db	32
  1510  00EC3E  4E                 	db	78
  1511  00EC3F  4E                 	db	78
  1512  00EC40  3A                 	db	58
  1513  00EC41  20                 	db	32
  1514  00EC42  00                 	db	0
  1515  00EC43  00                 	db	0
  1516  00EC44  00                 	db	0
  1517  00EC45  00                 	db	0
  1518  00EC46  00                 	db	0
  1519  00EC47  00                 	db	0
  1520  00EC48  44                 	db	68
  1521  00EC49  52                 	db	82
  1522  00EC4A  55                 	db	85
  1523  00EC4B  4D                 	db	77
  1524  00EC4C  20                 	db	32
  1525  00EC4D  31                 	db	49
  1526  00EC4E  20                 	db	32
  1527  00EC4F  43                 	db	67
  1528  00EC50  43                 	db	67
  1529  00EC51  3A                 	db	58
  1530  00EC52  20                 	db	32
  1531  00EC53  00                 	db	0
  1532  00EC54  00                 	db	0
  1533  00EC55  00                 	db	0
  1534  00EC56  00                 	db	0
  1535  00EC57  00                 	db	0
  1536  00EC58  00                 	db	0
  1537  00EC59  44                 	db	68
  1538  00EC5A  52                 	db	82
  1539  00EC5B  55                 	db	85
  1540  00EC5C  4D                 	db	77
  1541  00EC5D  20                 	db	32
  1542  00EC5E  32                 	db	50
  1543  00EC5F  20                 	db	32
  1544  00EC60  43                 	db	67
  1545  00EC61  43                 	db	67
  1546  00EC62  3A                 	db	58
  1547  00EC63  20                 	db	32
  1548  00EC64  00                 	db	0
  1549  00EC65  00                 	db	0
  1550  00EC66  00                 	db	0
  1551  00EC67  00                 	db	0
  1552  00EC68  00                 	db	0
  1553  00EC69  00                 	db	0
  1554  00EC6A  44                 	db	68
  1555  00EC6B  52                 	db	82
  1556  00EC6C  55                 	db	85
  1557  00EC6D  4D                 	db	77
  1558  00EC6E  20                 	db	32
  1559  00EC6F  33                 	db	51
  1560  00EC70  20                 	db	32
  1561  00EC71  43                 	db	67
  1562  00EC72  43                 	db	67
  1563  00EC73  3A                 	db	58
  1564  00EC74  20                 	db	32
  1565  00EC75  00                 	db	0
  1566  00EC76  00                 	db	0
  1567  00EC77  00                 	db	0
  1568  00EC78  00                 	db	0
  1569  00EC79  00                 	db	0
  1570  00EC7A  00                 	db	0
  1571  00EC7B  44                 	db	68
  1572  00EC7C  52                 	db	82
  1573  00EC7D  55                 	db	85
  1574  00EC7E  4D                 	db	77
  1575  00EC7F  20                 	db	32
  1576  00EC80  34                 	db	52
  1577  00EC81  20                 	db	32
  1578  00EC82  43                 	db	67
  1579  00EC83  43                 	db	67
  1580  00EC84  3A                 	db	58
  1581  00EC85  20                 	db	32
  1582  00EC86  00                 	db	0
  1583  00EC87  00                 	db	0
  1584  00EC88  00                 	db	0
  1585  00EC89  00                 	db	0
  1586  00EC8A  00                 	db	0
  1587  00EC8B  00                 	db	0
  1588  00EC8C  44                 	db	68
  1589  00EC8D  52                 	db	82
  1590  00EC8E  55                 	db	85
  1591  00EC8F  4D                 	db	77
  1592  00EC90  20                 	db	32
  1593  00EC91  35                 	db	53
  1594  00EC92  20                 	db	32
  1595  00EC93  43                 	db	67
  1596  00EC94  43                 	db	67
  1597  00EC95  3A                 	db	58
  1598  00EC96  20                 	db	32
  1599  00EC97  00                 	db	0
  1600  00EC98  00                 	db	0
  1601  00EC99  00                 	db	0
  1602  00EC9A  00                 	db	0
  1603  00EC9B  00                 	db	0
  1604  00EC9C  00                 	db	0
  1605  00EC9D  44                 	db	68
  1606  00EC9E  52                 	db	82
  1607  00EC9F  55                 	db	85
  1608  00ECA0  4D                 	db	77
  1609  00ECA1  20                 	db	32
  1610  00ECA2  36                 	db	54
  1611  00ECA3  20                 	db	32
  1612  00ECA4  43                 	db	67
  1613  00ECA5  43                 	db	67
  1614  00ECA6  3A                 	db	58
  1615  00ECA7  20                 	db	32
  1616  00ECA8  00                 	db	0
  1617  00ECA9  00                 	db	0
  1618  00ECAA  00                 	db	0
  1619  00ECAB  00                 	db	0
  1620  00ECAC  00                 	db	0
  1621  00ECAD  00                 	db	0
  1622  00ECAE  44                 	db	68
  1623  00ECAF  52                 	db	82
  1624  00ECB0  55                 	db	85
  1625  00ECB1  4D                 	db	77
  1626  00ECB2  20                 	db	32
  1627  00ECB3  37                 	db	55
  1628  00ECB4  20                 	db	32
  1629  00ECB5  43                 	db	67
  1630  00ECB6  43                 	db	67
  1631  00ECB7  3A                 	db	58
  1632  00ECB8  20                 	db	32
  1633  00ECB9  00                 	db	0
  1634  00ECBA  00                 	db	0
  1635  00ECBB  00                 	db	0
  1636  00ECBC  00                 	db	0
  1637  00ECBD  00                 	db	0
  1638  00ECBE  00                 	db	0
  1639  00ECBF  44                 	db	68
  1640  00ECC0  52                 	db	82
  1641  00ECC1  55                 	db	85
  1642  00ECC2  4D                 	db	77
  1643  00ECC3  20                 	db	32
  1644  00ECC4  38                 	db	56
  1645  00ECC5  20                 	db	32
  1646  00ECC6  43                 	db	67
  1647  00ECC7  43                 	db	67
  1648  00ECC8  3A                 	db	58
  1649  00ECC9  20                 	db	32
  1650  00ECCA  00                 	db	0
  1651  00ECCB  00                 	db	0
  1652  00ECCC  00                 	db	0
  1653  00ECCD  00                 	db	0
  1654  00ECCE  00                 	db	0
  1655  00ECCF  00                 	db	0
  1656  00ECD0  50                 	db	80
  1657  00ECD1  4F                 	db	79
  1658  00ECD2  54                 	db	84
  1659  00ECD3  53                 	db	83
  1660  00ECD4  20                 	db	32
  1661  00ECD5  52                 	db	82
  1662  00ECD6  45                 	db	69
  1663  00ECD7  53                 	db	83
  1664  00ECD8  4F                 	db	79
  1665  00ECD9  4C                 	db	76
  1666  00ECDA  55                 	db	85
  1667  00ECDB  54                 	db	84
  1668  00ECDC  49                 	db	73
  1669  00ECDD  4F                 	db	79
  1670  00ECDE  4E                 	db	78
  1671  00ECDF  00                 	db	0
  1672  00ECE0  00                 	db	0
  1673  00ECE1  50                 	db	80
  1674  00ECE2  4F                 	db	79
  1675  00ECE3  54                 	db	84
  1676  00ECE4  53                 	db	83
  1677  00ECE5  20                 	db	32
  1678  00ECE6  41                 	db	65
  1679  00ECE7  4C                 	db	76
  1680  00ECE8  50                 	db	80
  1681  00ECE9  48                 	db	72
  1682  00ECEA  41                 	db	65
  1683  00ECEB  00                 	db	0
  1684  00ECEC  00                 	db	0
  1685  00ECED  00                 	db	0
  1686  00ECEE  00                 	db	0
  1687  00ECEF  00                 	db	0
  1688  00ECF0  00                 	db	0
  1689  00ECF1  00                 	db	0
  1690  00ECF2  50                 	db	80
  1691  00ECF3  4F                 	db	79
  1692  00ECF4  54                 	db	84
  1693  00ECF5  53                 	db	83
  1694  00ECF6  20                 	db	32
  1695  00ECF7  53                 	db	83
  1696  00ECF8  45                 	db	69
  1697  00ECF9  54                 	db	84
  1698  00ECFA  20                 	db	32
  1699  00ECFB  43                 	db	67
  1700  00ECFC  43                 	db	67
  1701  00ECFD  23                 	db	35
  1702  00ECFE  00                 	db	0
  1703  00ECFF  00                 	db	0
  1704  00ED00  00                 	db	0
  1705  00ED01  00                 	db	0
  1706  00ED02  00                 	db	0
  1707  00ED03  53                 	db	83
  1708  00ED04  4C                 	db	76
  1709  00ED05  49                 	db	73
  1710  00ED06  44                 	db	68
  1711  00ED07  45                 	db	69
  1712  00ED08  50                 	db	80
  1713  00ED09  4F                 	db	79
  1714  00ED0A  54                 	db	84
  1715  00ED0B  20                 	db	32
  1716  00ED0C  53                 	db	83
  1717  00ED0D  45                 	db	69
  1718  00ED0E  54                 	db	84
  1719  00ED0F  20                 	db	32
  1720  00ED10  43                 	db	67
  1721  00ED11  43                 	db	67
  1722  00ED12  23                 	db	35
  1723  00ED13  00                 	db	0
  1724  00ED14  4A                 	db	74
  1725  00ED15  4F                 	db	79
  1726  00ED16  59                 	db	89
  1727  00ED17  53                 	db	83
  1728  00ED18  54                 	db	84
  1729  00ED19  49                 	db	73
  1730  00ED1A  43                 	db	67
  1731  00ED1B  4B                 	db	75
  1732  00ED1C  20                 	db	32
  1733  00ED1D  53                 	db	83
  1734  00ED1E  45                 	db	69
  1735  00ED1F  54                 	db	84
  1736  00ED20  20                 	db	32
  1737  00ED21  43                 	db	67
  1738  00ED22  43                 	db	67
  1739  00ED23  23                 	db	35
  1740  00ED24  00                 	db	0
  1741  00ED25  50                 	db	80
  1742  00ED26  4F                 	db	79
  1743  00ED27  54                 	db	84
  1744  00ED28  53                 	db	83
  1745  00ED29  20                 	db	32
  1746  00ED2A  4C                 	db	76
  1747  00ED2B  4F                 	db	79
  1748  00ED2C  20                 	db	32
  1749  00ED2D  52                 	db	82
  1750  00ED2E  45                 	db	69
  1751  00ED2F  53                 	db	83
  1752  00ED30  00                 	db	0
  1753  00ED31  00                 	db	0
  1754  00ED32  00                 	db	0
  1755  00ED33  00                 	db	0
  1756  00ED34  00                 	db	0
  1757  00ED35  00                 	db	0
  1758  00ED36  50                 	db	80
  1759  00ED37  4F                 	db	79
  1760  00ED38  54                 	db	84
  1761  00ED39  53                 	db	83
  1762  00ED3A  20                 	db	32
  1763  00ED3B  48                 	db	72
  1764  00ED3C  49                 	db	73
  1765  00ED3D  20                 	db	32
  1766  00ED3E  52                 	db	82
  1767  00ED3F  45                 	db	69
  1768  00ED40  53                 	db	83
  1769  00ED41  00                 	db	0
  1770  00ED42  00                 	db	0
  1771  00ED43  00                 	db	0
  1772  00ED44  00                 	db	0
  1773  00ED45  00                 	db	0
  1774  00ED46  00                 	db	0
  1775  00ED47  50                 	db	80
  1776  00ED48  31                 	db	49
  1777  00ED49  20                 	db	32
  1778  00ED4A  43                 	db	67
  1779  00ED4B  43                 	db	67
  1780  00ED4C  3A                 	db	58
  1781  00ED4D  00                 	db	0
  1782  00ED4E  00                 	db	0
  1783  00ED4F  00                 	db	0
  1784  00ED50  00                 	db	0
  1785  00ED51  00                 	db	0
  1786  00ED52  00                 	db	0
  1787  00ED53  00                 	db	0
  1788  00ED54  00                 	db	0
  1789  00ED55  00                 	db	0
  1790  00ED56  00                 	db	0
  1791  00ED57  00                 	db	0
  1792  00ED58  50                 	db	80
  1793  00ED59  32                 	db	50
  1794  00ED5A  20                 	db	32
  1795  00ED5B  43                 	db	67
  1796  00ED5C  43                 	db	67
  1797  00ED5D  3A                 	db	58
  1798  00ED5E  00                 	db	0
  1799  00ED5F  00                 	db	0
  1800  00ED60  00                 	db	0
  1801  00ED61  00                 	db	0
  1802  00ED62  00                 	db	0
  1803  00ED63  00                 	db	0
  1804  00ED64  00                 	db	0
  1805  00ED65  00                 	db	0
  1806  00ED66  00                 	db	0
  1807  00ED67  00                 	db	0
  1808  00ED68  00                 	db	0
  1809  00ED69  50                 	db	80
  1810  00ED6A  33                 	db	51
  1811  00ED6B  20                 	db	32
  1812  00ED6C  43                 	db	67
  1813  00ED6D  43                 	db	67
  1814  00ED6E  3A                 	db	58
  1815  00ED6F  00                 	db	0
  1816  00ED70  00                 	db	0
  1817  00ED71  00                 	db	0
  1818  00ED72  00                 	db	0
  1819  00ED73  00                 	db	0
  1820  00ED74  00                 	db	0
  1821  00ED75  00                 	db	0
  1822  00ED76  00                 	db	0
  1823  00ED77  00                 	db	0
  1824  00ED78  00                 	db	0
  1825  00ED79  00                 	db	0
  1826  00ED7A  50                 	db	80
  1827  00ED7B  34                 	db	52
  1828  00ED7C  20                 	db	32
  1829  00ED7D  43                 	db	67
  1830  00ED7E  43                 	db	67
  1831  00ED7F  3A                 	db	58
  1832  00ED80  00                 	db	0
  1833  00ED81  00                 	db	0
  1834  00ED82  00                 	db	0
  1835  00ED83  00                 	db	0
  1836  00ED84  00                 	db	0
  1837  00ED85  00                 	db	0
  1838  00ED86  00                 	db	0
  1839  00ED87  00                 	db	0
  1840  00ED88  00                 	db	0
  1841  00ED89  00                 	db	0
  1842  00ED8A  00                 	db	0
  1843  00ED8B  50                 	db	80
  1844  00ED8C  35                 	db	53
  1845  00ED8D  20                 	db	32
  1846  00ED8E  43                 	db	67
  1847  00ED8F  43                 	db	67
  1848  00ED90  3A                 	db	58
  1849  00ED91  00                 	db	0
  1850  00ED92  00                 	db	0
  1851  00ED93  00                 	db	0
  1852  00ED94  00                 	db	0
  1853  00ED95  00                 	db	0
  1854  00ED96  00                 	db	0
  1855  00ED97  00                 	db	0
  1856  00ED98  00                 	db	0
  1857  00ED99  00                 	db	0
  1858  00ED9A  00                 	db	0
  1859  00ED9B  00                 	db	0
  1860  00ED9C  50                 	db	80
  1861  00ED9D  36                 	db	54
  1862  00ED9E  20                 	db	32
  1863  00ED9F  43                 	db	67
  1864  00EDA0  43                 	db	67
  1865  00EDA1  3A                 	db	58
  1866  00EDA2  00                 	db	0
  1867  00EDA3  00                 	db	0
  1868  00EDA4  00                 	db	0
  1869  00EDA5  00                 	db	0
  1870  00EDA6  00                 	db	0
  1871  00EDA7  00                 	db	0
  1872  00EDA8  00                 	db	0
  1873  00EDA9  00                 	db	0
  1874  00EDAA  00                 	db	0
  1875  00EDAB  00                 	db	0
  1876  00EDAC  00                 	db	0
  1877  00EDAD  50                 	db	80
  1878  00EDAE  37                 	db	55
  1879  00EDAF  20                 	db	32
  1880  00EDB0  43                 	db	67
  1881  00EDB1  43                 	db	67
  1882  00EDB2  3A                 	db	58
  1883  00EDB3  00                 	db	0
  1884  00EDB4  00                 	db	0
  1885  00EDB5  00                 	db	0
  1886  00EDB6  00                 	db	0
  1887  00EDB7  00                 	db	0
  1888  00EDB8  00                 	db	0
  1889  00EDB9  00                 	db	0
  1890  00EDBA  00                 	db	0
  1891  00EDBB  00                 	db	0
  1892  00EDBC  00                 	db	0
  1893  00EDBD  00                 	db	0
  1894  00EDBE  53                 	db	83
  1895  00EDBF  31                 	db	49
  1896  00EDC0  20                 	db	32
  1897  00EDC1  43                 	db	67
  1898  00EDC2  43                 	db	67
  1899  00EDC3  3A                 	db	58
  1900  00EDC4  20                 	db	32
  1901  00EDC5  00                 	db	0
  1902  00EDC6  00                 	db	0
  1903  00EDC7  00                 	db	0
  1904  00EDC8  00                 	db	0
  1905  00EDC9  00                 	db	0
  1906  00EDCA  00                 	db	0
  1907  00EDCB  00                 	db	0
  1908  00EDCC  00                 	db	0
  1909  00EDCD  00                 	db	0
  1910  00EDCE  00                 	db	0
  1911  00EDCF  53                 	db	83
  1912  00EDD0  32                 	db	50
  1913  00EDD1  20                 	db	32
  1914  00EDD2  43                 	db	67
  1915  00EDD3  43                 	db	67
  1916  00EDD4  3A                 	db	58
  1917  00EDD5  20                 	db	32
  1918  00EDD6  00                 	db	0
  1919  00EDD7  00                 	db	0
  1920  00EDD8  00                 	db	0
  1921  00EDD9  00                 	db	0
  1922  00EDDA  00                 	db	0
  1923  00EDDB  00                 	db	0
  1924  00EDDC  00                 	db	0
  1925  00EDDD  00                 	db	0
  1926  00EDDE  00                 	db	0
  1927  00EDDF  00                 	db	0
  1928  00EDE0  53                 	db	83
  1929  00EDE1  33                 	db	51
  1930  00EDE2  20                 	db	32
  1931  00EDE3  43                 	db	67
  1932  00EDE4  43                 	db	67
  1933  00EDE5  3A                 	db	58
  1934  00EDE6  20                 	db	32
  1935  00EDE7  00                 	db	0
  1936  00EDE8  00                 	db	0
  1937  00EDE9  00                 	db	0
  1938  00EDEA  00                 	db	0
  1939  00EDEB  00                 	db	0
  1940  00EDEC  00                 	db	0
  1941  00EDED  00                 	db	0
  1942  00EDEE  00                 	db	0
  1943  00EDEF  00                 	db	0
  1944  00EDF0  00                 	db	0
  1945  00EDF1  53                 	db	83
  1946  00EDF2  34                 	db	52
  1947  00EDF3  20                 	db	32
  1948  00EDF4  43                 	db	67
  1949  00EDF5  43                 	db	67
  1950  00EDF6  3A                 	db	58
  1951  00EDF7  20                 	db	32
  1952  00EDF8  00                 	db	0
  1953  00EDF9  00                 	db	0
  1954  00EDFA  00                 	db	0
  1955  00EDFB  00                 	db	0
  1956  00EDFC  00                 	db	0
  1957  00EDFD  00                 	db	0
  1958  00EDFE  00                 	db	0
  1959  00EDFF  00                 	db	0
  1960  00EE00  00                 	db	0
  1961  00EE01  00                 	db	0
  1962  00EE02  53                 	db	83
  1963  00EE03  35                 	db	53
  1964  00EE04  20                 	db	32
  1965  00EE05  43                 	db	67
  1966  00EE06  43                 	db	67
  1967  00EE07  3A                 	db	58
  1968  00EE08  20                 	db	32
  1969  00EE09  00                 	db	0
  1970  00EE0A  00                 	db	0
  1971  00EE0B  00                 	db	0
  1972  00EE0C  00                 	db	0
  1973  00EE0D  00                 	db	0
  1974  00EE0E  00                 	db	0
  1975  00EE0F  00                 	db	0
  1976  00EE10  00                 	db	0
  1977  00EE11  00                 	db	0
  1978  00EE12  00                 	db	0
  1979  00EE13  53                 	db	83
  1980  00EE14  36                 	db	54
  1981  00EE15  20                 	db	32
  1982  00EE16  43                 	db	67
  1983  00EE17  43                 	db	67
  1984  00EE18  3A                 	db	58
  1985  00EE19  20                 	db	32
  1986  00EE1A  00                 	db	0
  1987  00EE1B  00                 	db	0
  1988  00EE1C  00                 	db	0
  1989  00EE1D  00                 	db	0
  1990  00EE1E  00                 	db	0
  1991  00EE1F  00                 	db	0
  1992  00EE20  00                 	db	0
  1993  00EE21  00                 	db	0
  1994  00EE22  00                 	db	0
  1995  00EE23  00                 	db	0
  1996  00EE24  53                 	db	83
  1997  00EE25  37                 	db	55
  1998  00EE26  20                 	db	32
  1999  00EE27  43                 	db	67
  2000  00EE28  43                 	db	67
  2001  00EE29  3A                 	db	58
  2002  00EE2A  20                 	db	32
  2003  00EE2B  00                 	db	0
  2004  00EE2C  00                 	db	0
  2005  00EE2D  00                 	db	0
  2006  00EE2E  00                 	db	0
  2007  00EE2F  00                 	db	0
  2008  00EE30  00                 	db	0
  2009  00EE31  00                 	db	0
  2010  00EE32  00                 	db	0
  2011  00EE33  00                 	db	0
  2012  00EE34  00                 	db	0
  2013  00EE35  4A                 	db	74
  2014  00EE36  58                 	db	88
  2015  00EE37  20                 	db	32
  2016  00EE38  43                 	db	67
  2017  00EE39  43                 	db	67
  2018  00EE3A  3A                 	db	58
  2019  00EE3B  20                 	db	32
  2020  00EE3C  00                 	db	0
  2021  00EE3D  00                 	db	0
  2022  00EE3E  00                 	db	0
  2023  00EE3F  00                 	db	0
  2024  00EE40  00                 	db	0
  2025  00EE41  00                 	db	0
  2026  00EE42  00                 	db	0
  2027  00EE43  00                 	db	0
  2028  00EE44  00                 	db	0
  2029  00EE45  00                 	db	0
  2030  00EE46  4A                 	db	74
  2031  00EE47  59                 	db	89
  2032  00EE48  20                 	db	32
  2033  00EE49  43                 	db	67
  2034  00EE4A  43                 	db	67
  2035  00EE4B  3A                 	db	58
  2036  00EE4C  20                 	db	32
  2037  00EE4D  00                 	db	0
  2038  00EE4E  00                 	db	0
  2039  00EE4F  00                 	db	0
  2040  00EE50  00                 	db	0
  2041  00EE51  00                 	db	0
  2042  00EE52  00                 	db	0
  2043  00EE53  00                 	db	0
  2044  00EE54  00                 	db	0
  2045  00EE55  00                 	db	0
  2046  00EE56  00                 	db	0
  2047  00EE57  4D                 	db	77
  2048  00EE58  61                 	db	97
  2049  00EE59  69                 	db	105
  2050  00EE5A  6E                 	db	110
  2051  00EE5B  20                 	db	32
  2052  00EE5C  63                 	db	99
  2053  00EE5D  68                 	db	104
  2054  00EE5E  61                 	db	97
  2055  00EE5F  6E                 	db	110
  2056  00EE60  6E                 	db	110
  2057  00EE61  65                 	db	101
  2058  00EE62  6C                 	db	108
  2059  00EE63  00                 	db	0
  2060  00EE64  00                 	db	0
  2061  00EE65  00                 	db	0
  2062  00EE66  00                 	db	0
  2063  00EE67  00                 	db	0
  2064  00EE68  44                 	db	68
  2065  00EE69  72                 	db	114
  2066  00EE6A  75                 	db	117
  2067  00EE6B  6D                 	db	109
  2068  00EE6C  20                 	db	32
  2069  00EE6D  63                 	db	99
  2070  00EE6E  68                 	db	104
  2071  00EE6F  61                 	db	97
  2072  00EE70  6E                 	db	110
  2073  00EE71  6E                 	db	110
  2074  00EE72  65                 	db	101
  2075  00EE73  6C                 	db	108
  2076  00EE74  00                 	db	0
  2077  00EE75  00                 	db	0
  2078  00EE76  00                 	db	0
  2079  00EE77  00                 	db	0
  2080  00EE78  00                 	db	0
  2081  00EE79  53                 	db	83
  2082  00EE7A  61                 	db	97
  2083  00EE7B  76                 	db	118
  2084  00EE7C  65                 	db	101
  2085  00EE7D  20                 	db	32
  2086  00EE7E  73                 	db	115
  2087  00EE7F  65                 	db	101
  2088  00EE80  74                 	db	116
  2089  00EE81  74                 	db	116
  2090  00EE82  69                 	db	105
  2091  00EE83  6E                 	db	110
  2092  00EE84  67                 	db	103
  2093  00EE85  73                 	db	115
  2094  00EE86  00                 	db	0
  2095  00EE87  00                 	db	0
  2096  00EE88  00                 	db	0
  2097  00EE89  00                 	db	0
  2098  00EE8A  4C                 	db	76
  2099  00EE8B  6F                 	db	111
  2100  00EE8C  61                 	db	97
  2101  00EE8D  64                 	db	100
  2102  00EE8E  20                 	db	32
  2103  00EE8F  73                 	db	115
  2104  00EE90  65                 	db	101
  2105  00EE91  74                 	db	116
  2106  00EE92  74                 	db	116
  2107  00EE93  69                 	db	105
  2108  00EE94  6E                 	db	110
  2109  00EE95  67                 	db	103
  2110  00EE96  73                 	db	115
  2111  00EE97  00                 	db	0
  2112  00EE98  00                 	db	0
  2113  00EE99  00                 	db	0
  2114  00EE9A  00                 	db	0
  2115  00EE9B  52                 	db	82
  2116  00EE9C  65                 	db	101
  2117  00EE9D  73                 	db	115
  2118  00EE9E  74                 	db	116
  2119  00EE9F  6F                 	db	111
  2120  00EEA0  72                 	db	114
  2121  00EEA1  65                 	db	101
  2122  00EEA2  20                 	db	32
  2123  00EEA3  64                 	db	100
  2124  00EEA4  65                 	db	101
  2125  00EEA5  66                 	db	102
  2126  00EEA6  61                 	db	97
  2127  00EEA7  75                 	db	117
  2128  00EEA8  6C                 	db	108
  2129  00EEA9  74                 	db	116
  2130  00EEAA  73                 	db	115
  2131  00EEAB  00                 	db	0
  2132  00EEAC  45                 	db	69
  2133  00EEAD  6E                 	db	110
  2134  00EEAE  63                 	db	99
  2135  00EEAF  6F                 	db	111
  2136  00EEB0  64                 	db	100
  2137  00EEB1  65                 	db	101
  2138  00EEB2  72                 	db	114
  2139  00EEB3  20                 	db	32
  2140  00EEB4  50                 	db	80
  2141  00EEB5  6F                 	db	111
  2142  00EEB6  6C                 	db	108
  2143  00EEB7  61                 	db	97
  2144  00EEB8  72                 	db	114
  2145  00EEB9  69                 	db	105
  2146  00EEBA  74                 	db	116
  2147  00EEBB  79                 	db	121
  2148  00EEBC  00                 	db	0
  2149  00EEBD  45                 	db	69
  2150  00EEBE  78                 	db	120
  2151  00EEBF  69                 	db	105
  2152  00EEC0  74                 	db	116
  2153  00EEC1  00                 	db	0
  2154  00EEC2  00                 	db	0
  2155  00EEC3  00                 	db	0
  2156  00EEC4  00                 	db	0
  2157  00EEC5  00                 	db	0
  2158  00EEC6  00                 	db	0
  2159  00EEC7  00                 	db	0
  2160  00EEC8  00                 	db	0
  2161  00EEC9  00                 	db	0
  2162  00EECA  00                 	db	0
  2163  00EECB  00                 	db	0
  2164  00EECC  00                 	db	0
  2165  00EECD  00                 	db	0
  2166  00EECE  53                 	db	83
  2167  00EECF  6C                 	db	108
  2168  00EED0  6F                 	db	111
  2169  00EED1  74                 	db	116
  2170  00EED2  20                 	db	32
  2171  00EED3  31                 	db	49
  2172  00EED4  00                 	db	0
  2173  00EED5  00                 	db	0
  2174  00EED6  00                 	db	0
  2175  00EED7  00                 	db	0
  2176  00EED8  00                 	db	0
  2177  00EED9  00                 	db	0
  2178  00EEDA  00                 	db	0
  2179  00EEDB  00                 	db	0
  2180  00EEDC  00                 	db	0
  2181  00EEDD  00                 	db	0
  2182  00EEDE  00                 	db	0
  2183  00EEDF  53                 	db	83
  2184  00EEE0  6C                 	db	108
  2185  00EEE1  6F                 	db	111
  2186  00EEE2  74                 	db	116
  2187  00EEE3  20                 	db	32
  2188  00EEE4  32                 	db	50
  2189  00EEE5  00                 	db	0
  2190  00EEE6  00                 	db	0
  2191  00EEE7  00                 	db	0
  2192  00EEE8  00                 	db	0
  2193  00EEE9  00                 	db	0
  2194  00EEEA  00                 	db	0
  2195  00EEEB  00                 	db	0
  2196  00EEEC  00                 	db	0
  2197  00EEED  00                 	db	0
  2198  00EEEE  00                 	db	0
  2199  00EEEF  00                 	db	0
  2200  00EEF0  53                 	db	83
  2201  00EEF1  6C                 	db	108
  2202  00EEF2  6F                 	db	111
  2203  00EEF3  74                 	db	116
  2204  00EEF4  20                 	db	32
  2205  00EEF5  33                 	db	51
  2206  00EEF6  00                 	db	0
  2207  00EEF7  00                 	db	0
  2208  00EEF8  00                 	db	0
  2209  00EEF9  00                 	db	0
  2210  00EEFA  00                 	db	0
  2211  00EEFB  00                 	db	0
  2212  00EEFC  00                 	db	0
  2213  00EEFD  00                 	db	0
  2214  00EEFE  00                 	db	0
  2215  00EEFF  00                 	db	0
  2216  00EF00  00                 	db	0
  2217  00EF01  53                 	db	83
  2218  00EF02  6C                 	db	108
  2219  00EF03  6F                 	db	111
  2220  00EF04  74                 	db	116
  2221  00EF05  20                 	db	32
  2222  00EF06  34                 	db	52
  2223  00EF07  00                 	db	0
  2224  00EF08  00                 	db	0
  2225  00EF09  00                 	db	0
  2226  00EF0A  00                 	db	0
  2227  00EF0B  00                 	db	0
  2228  00EF0C  00                 	db	0
  2229  00EF0D  00                 	db	0
  2230  00EF0E  00                 	db	0
  2231  00EF0F  00                 	db	0
  2232  00EF10  00                 	db	0
  2233  00EF11  00                 	db	0
  2234  00EF12  45                 	db	69
  2235  00EF13  78                 	db	120
  2236  00EF14  69                 	db	105
  2237  00EF15  74                 	db	116
  2238  00EF16  00                 	db	0
  2239  00EF17  00                 	db	0
  2240  00EF18  00                 	db	0
  2241  00EF19  00                 	db	0
  2242  00EF1A  00                 	db	0
  2243  00EF1B  00                 	db	0
  2244  00EF1C  00                 	db	0
  2245  00EF1D  00                 	db	0
  2246  00EF1E  00                 	db	0
  2247  00EF1F  00                 	db	0
  2248  00EF20  00                 	db	0
  2249  00EF21  00                 	db	0
  2250  00EF22  00                 	db	0
  2251  00EF23  43                 	db	67
  2252  00EF24  57                 	db	87
  2253  00EF25  20                 	db	32
  2254  00EF26  49                 	db	73
  2255  00EF27  53                 	db	83
  2256  00EF28  20                 	db	32
  2257  00EF29  49                 	db	73
  2258  00EF2A  4E                 	db	78
  2259  00EF2B  43                 	db	67
  2260  00EF2C  52                 	db	82
  2261  00EF2D  45                 	db	69
  2262  00EF2E  41                 	db	65
  2263  00EF2F  53                 	db	83
  2264  00EF30  45                 	db	69
  2265  00EF31  00                 	db	0
  2266  00EF32  00                 	db	0
  2267  00EF33  00                 	db	0
  2268  00EF34  43                 	db	67
  2269  00EF35  43                 	db	67
  2270  00EF36  57                 	db	87
  2271  00EF37  20                 	db	32
  2272  00EF38  49                 	db	73
  2273  00EF39  53                 	db	83
  2274  00EF3A  20                 	db	32
  2275  00EF3B  49                 	db	73
  2276  00EF3C  4E                 	db	78
  2277  00EF3D  43                 	db	67
  2278  00EF3E  52                 	db	82
  2279  00EF3F  45                 	db	69
  2280  00EF40  41                 	db	65
  2281  00EF41  53                 	db	83
  2282  00EF42  45                 	db	69
  2283  00EF43  00                 	db	0
  2284  00EF44  00                 	db	0
  2285  00EF45  41                 	db	65
  2286  00EF46  72                 	db	114
  2287  00EF47  70                 	db	112
  2288  00EF48  65                 	db	101
  2289  00EF49  67                 	db	103
  2290  00EF4A  67                 	db	103
  2291  00EF4B  69                 	db	105
  2292  00EF4C  6F                 	db	111
  2293  00EF4D  20                 	db	32
  2294  00EF4E  4F                 	db	79
  2295  00EF4F  46                 	db	70
  2296  00EF50  46                 	db	70
  2297  00EF51  2F                 	db	47
  2298  00EF52  4F                 	db	79
  2299  00EF53  4E                 	db	78
  2300  00EF54  00                 	db	0
  2301  00EF55  00                 	db	0
  2302  00EF56  54                 	db	84
  2303  00EF57  65                 	db	101
  2304  00EF58  6D                 	db	109
  2305  00EF59  70                 	db	112
  2306  00EF5A  6F                 	db	111
  2307  00EF5B  00                 	db	0
  2308  00EF5C  00                 	db	0
  2309  00EF5D  00                 	db	0
  2310  00EF5E  00                 	db	0
  2311  00EF5F  00                 	db	0
  2312  00EF60  00                 	db	0
  2313  00EF61  00                 	db	0
  2314  00EF62  00                 	db	0
  2315  00EF63  00                 	db	0
  2316  00EF64  00                 	db	0
  2317  00EF65  00                 	db	0
  2318  00EF66  00                 	db	0
  2319  00EF67  4F                 	db	79
  2320  00EF68  63                 	db	99
  2321  00EF69  74                 	db	116
  2322  00EF6A  61                 	db	97
  2323  00EF6B  76                 	db	118
  2324  00EF6C  65                 	db	101
  2325  00EF6D  20                 	db	32
  2326  00EF6E  52                 	db	82
  2327  00EF6F  61                 	db	97
  2328  00EF70  6E                 	db	110
  2329  00EF71  67                 	db	103
  2330  00EF72  65                 	db	101
  2331  00EF73  00                 	db	0
  2332  00EF74  00                 	db	0
  2333  00EF75  00                 	db	0
  2334  00EF76  00                 	db	0
  2335  00EF77  00                 	db	0
  2336  00EF78  41                 	db	65
  2337  00EF79  72                 	db	114
  2338  00EF7A  70                 	db	112
  2339  00EF7B  65                 	db	101
  2340  00EF7C  67                 	db	103
  2341  00EF7D  67                 	db	103
  2342  00EF7E  69                 	db	105
  2343  00EF7F  6F                 	db	111
  2344  00EF80  20                 	db	32
  2345  00EF81  54                 	db	84
  2346  00EF82  79                 	db	121
  2347  00EF83  70                 	db	112
  2348  00EF84  65                 	db	101
  2349  00EF85  00                 	db	0
  2350  00EF86  00                 	db	0
  2351  00EF87  00                 	db	0
  2352  00EF88  00                 	db	0
  2353  00EF89  4E                 	db	78
  2354  00EF8A  6F                 	db	111
  2355  00EF8B  74                 	db	116
  2356  00EF8C  65                 	db	101
  2357  00EF8D  20                 	db	32
  2358  00EF8E  4C                 	db	76
  2359  00EF8F  65                 	db	101
  2360  00EF90  6E                 	db	110
  2361  00EF91  67                 	db	103
  2362  00EF92  74                 	db	116
  2363  00EF93  68                 	db	104
  2364  00EF94  00                 	db	0
  2365  00EF95  00                 	db	0
  2366  00EF96  00                 	db	0
  2367  00EF97  00                 	db	0
  2368  00EF98  00                 	db	0
  2369  00EF99  00                 	db	0
  2370  00EF9A  4C                 	db	76
  2371  00EF9B  61                 	db	97
  2372  00EF9C  74                 	db	116
  2373  00EF9D  63                 	db	99
  2374  00EF9E  68                 	db	104
  2375  00EF9F  2F                 	db	47
  2376  00EFA0  41                 	db	65
  2377  00EFA1  75                 	db	117
  2378  00EFA2  74                 	db	116
  2379  00EFA3  6F                 	db	111
  2380  00EFA4  20                 	db	32
  2381  00EFA5  4C                 	db	76
  2382  00EFA6  61                 	db	97
  2383  00EFA7  74                 	db	116
  2384  00EFA8  63                 	db	99
  2385  00EFA9  68                 	db	104
  2386  00EFAA  00                 	db	0
  2387  00EFAB  55                 	db	85
  2388  00EFAC  6E                 	db	110
  2389  00EFAD  2D                 	db	45
  2390  00EFAE  6C                 	db	108
  2391  00EFAF  61                 	db	97
  2392  00EFB0  74                 	db	116
  2393  00EFB1  63                 	db	99
  2394  00EFB2  68                 	db	104
  2395  00EFB3  20                 	db	32
  2396  00EFB4  4D                 	db	77
  2397  00EFB5  6F                 	db	111
  2398  00EFB6  64                 	db	100
  2399  00EFB7  65                 	db	101
  2400  00EFB8  00                 	db	0
  2401  00EFB9  00                 	db	0
  2402  00EFBA  00                 	db	0
  2403  00EFBB  00                 	db	0
  2404  00EFBC  52                 	db	82
  2405  00EFBD  61                 	db	97
  2406  00EFBE  6E                 	db	110
  2407  00EFBF  64                 	db	100
  2408  00EFC0  6F                 	db	111
  2409  00EFC1  6D                 	db	109
  2410  00EFC2  69                 	db	105
  2411  00EFC3  7A                 	db	122
  2412  00EFC4  65                 	db	101
  2413  00EFC5  2F                 	db	47
  2414  00EFC6  53                 	db	83
  2415  00EFC7  6B                 	db	107
  2416  00EFC8  69                 	db	105
  2417  00EFC9  70                 	db	112
  2418  00EFCA  00                 	db	0
  2419  00EFCB  00                 	db	0
  2420  00EFCC  00                 	db	0
  2421  00EFCD  4C                 	db	76
  2422  00EFCE  61                 	db	97
  2423  00EFCF  73                 	db	115
  2424  00EFD0  74                 	db	116
  2425  00EFD1  20                 	db	32
  2426  00EFD2  4E                 	db	78
  2427  00EFD3  6F                 	db	111
  2428  00EFD4  74                 	db	116
  2429  00EFD5  65                 	db	101
  2430  00EFD6  20                 	db	32
  2431  00EFD7  4D                 	db	77
  2432  00EFD8  6F                 	db	111
  2433  00EFD9  64                 	db	100
  2434  00EFDA  65                 	db	101
  2435  00EFDB  00                 	db	0
  2436  00EFDC  00                 	db	0
  2437  00EFDD  00                 	db	0
  2438  00EFDE  41                 	db	65
  2439  00EFDF  52                 	db	82
  2440  00EFE0  50                 	db	80
  2441  00EFE1  45                 	db	69
  2442  00EFE2  47                 	db	71
  2443  00EFE3  47                 	db	71
  2444  00EFE4  49                 	db	73
  2445  00EFE5  41                 	db	65
  2446  00EFE6  54                 	db	84
  2447  00EFE7  4F                 	db	79
  2448  00EFE8  52                 	db	82
  2449  00EFE9  20                 	db	32
  2450  00EFEA  4F                 	db	79
  2451  00EFEB  46                 	db	70
  2452  00EFEC  46                 	db	70
  2453  00EFED  00                 	db	0
  2454  00EFEE  00                 	db	0
  2455  00EFEF  41                 	db	65
  2456  00EFF0  52                 	db	82
  2457  00EFF1  50                 	db	80
  2458  00EFF2  45                 	db	69
  2459  00EFF3  47                 	db	71
  2460  00EFF4  47                 	db	71
  2461  00EFF5  49                 	db	73
  2462  00EFF6  41                 	db	65
  2463  00EFF7  54                 	db	84
  2464  00EFF8  4F                 	db	79
  2465  00EFF9  52                 	db	82
  2466  00EFFA  20                 	db	32
  2467  00EFFB  4F                 	db	79
  2468  00EFFC  4E                 	db	78
  2469  00EFFD  00                 	db	0
  2470  00EFFE  00                 	db	0
  2471  00EFFF  00                 	db	0
  2472  00F000  55                 	db	85
  2473  00F001  50                 	db	80
  2474  00F002  00                 	db	0
  2475  00F003  00                 	db	0
  2476  00F004  00                 	db	0
  2477  00F005  00                 	db	0
  2478  00F006  00                 	db	0
  2479  00F007  00                 	db	0
  2480  00F008  00                 	db	0
  2481  00F009  00                 	db	0
  2482  00F00A  00                 	db	0
  2483  00F00B  00                 	db	0
  2484  00F00C  00                 	db	0
  2485  00F00D  00                 	db	0
  2486  00F00E  00                 	db	0
  2487  00F00F  00                 	db	0
  2488  00F010  00                 	db	0
  2489  00F011  44                 	db	68
  2490  00F012  4F                 	db	79
  2491  00F013  57                 	db	87
  2492  00F014  4E                 	db	78
  2493  00F015  00                 	db	0
  2494  00F016  00                 	db	0
  2495  00F017  00                 	db	0
  2496  00F018  00                 	db	0
  2497  00F019  00                 	db	0
  2498  00F01A  00                 	db	0
  2499  00F01B  00                 	db	0
  2500  00F01C  00                 	db	0
  2501  00F01D  00                 	db	0
  2502  00F01E  00                 	db	0
  2503  00F01F  00                 	db	0
  2504  00F020  00                 	db	0
  2505  00F021  00                 	db	0
  2506  00F022  55                 	db	85
  2507  00F023  50                 	db	80
  2508  00F024  2F                 	db	47
  2509  00F025  44                 	db	68
  2510  00F026  4F                 	db	79
  2511  00F027  57                 	db	87
  2512  00F028  4E                 	db	78
  2513  00F029  00                 	db	0
  2514  00F02A  00                 	db	0
  2515  00F02B  00                 	db	0
  2516  00F02C  00                 	db	0
  2517  00F02D  00                 	db	0
  2518  00F02E  00                 	db	0
  2519  00F02F  00                 	db	0
  2520  00F030  00                 	db	0
  2521  00F031  00                 	db	0
  2522  00F032  00                 	db	0
  2523  00F033  44                 	db	68
  2524  00F034  4F                 	db	79
  2525  00F035  57                 	db	87
  2526  00F036  4E                 	db	78
  2527  00F037  2F                 	db	47
  2528  00F038  55                 	db	85
  2529  00F039  50                 	db	80
  2530  00F03A  00                 	db	0
  2531  00F03B  00                 	db	0
  2532  00F03C  00                 	db	0
  2533  00F03D  00                 	db	0
  2534  00F03E  00                 	db	0
  2535  00F03F  00                 	db	0
  2536  00F040  00                 	db	0
  2537  00F041  00                 	db	0
  2538  00F042  00                 	db	0
  2539  00F043  00                 	db	0
  2540  00F044  53                 	db	83
  2541  00F045  48                 	db	72
  2542  00F046  55                 	db	85
  2543  00F047  46                 	db	70
  2544  00F048  46                 	db	70
  2545  00F049  4C                 	db	76
  2546  00F04A  45                 	db	69
  2547  00F04B  00                 	db	0
  2548  00F04C  00                 	db	0
  2549  00F04D  00                 	db	0
  2550  00F04E  00                 	db	0
  2551  00F04F  00                 	db	0
  2552  00F050  00                 	db	0
  2553  00F051  00                 	db	0
  2554  00F052  00                 	db	0
  2555  00F053  00                 	db	0
  2556  00F054  00                 	db	0
  2557  00F055  52                 	db	82
  2558  00F056  41                 	db	65
  2559  00F057  4E                 	db	78
  2560  00F058  44                 	db	68
  2561  00F059  4F                 	db	79
  2562  00F05A  4D                 	db	77
  2563  00F05B  00                 	db	0
  2564  00F05C  00                 	db	0
  2565  00F05D  00                 	db	0
  2566  00F05E  00                 	db	0
  2567  00F05F  00                 	db	0
  2568  00F060  00                 	db	0
  2569  00F061  00                 	db	0
  2570  00F062  00                 	db	0
  2571  00F063  00                 	db	0
  2572  00F064  00                 	db	0
  2573  00F065  00                 	db	0
  2574  00F066  41                 	db	65
  2575  00F067  53                 	db	83
  2576  00F068  20                 	db	32
  2577  00F069  50                 	db	80
  2578  00F06A  52                 	db	82
  2579  00F06B  45                 	db	69
  2580  00F06C  53                 	db	83
  2581  00F06D  53                 	db	83
  2582  00F06E  45                 	db	69
  2583  00F06F  44                 	db	68
  2584  00F070  00                 	db	0
  2585  00F071  00                 	db	0
  2586  00F072  00                 	db	0
  2587  00F073  00                 	db	0
  2588  00F074  00                 	db	0
  2589  00F075  00                 	db	0
  2590  00F076  00                 	db	0
  2591  00F077  31                 	db	49
  2592  00F078  2F                 	db	47
  2593  00F079  34                 	db	52
  2594  00F07A  00                 	db	0
  2595  00F07B  00                 	db	0
  2596  00F07C  00                 	db	0
  2597  00F07D  00                 	db	0
  2598  00F07E  00                 	db	0
  2599  00F07F  00                 	db	0
  2600  00F080  00                 	db	0
  2601  00F081  00                 	db	0
  2602  00F082  00                 	db	0
  2603  00F083  00                 	db	0
  2604  00F084  00                 	db	0
  2605  00F085  00                 	db	0
  2606  00F086  00                 	db	0
  2607  00F087  00                 	db	0
  2608  00F088  31                 	db	49
  2609  00F089  2F                 	db	47
  2610  00F08A  34                 	db	52
  2611  00F08B  20                 	db	32
  2612  00F08C  44                 	db	68
  2613  00F08D  4F                 	db	79
  2614  00F08E  54                 	db	84
  2615  00F08F  54                 	db	84
  2616  00F090  45                 	db	69
  2617  00F091  44                 	db	68
  2618  00F092  00                 	db	0
  2619  00F093  00                 	db	0
  2620  00F094  00                 	db	0
  2621  00F095  00                 	db	0
  2622  00F096  00                 	db	0
  2623  00F097  00                 	db	0
  2624  00F098  00                 	db	0
  2625  00F099  31                 	db	49
  2626  00F09A  2F                 	db	47
  2627  00F09B  34                 	db	52
  2628  00F09C  20                 	db	32
  2629  00F09D  54                 	db	84
  2630  00F09E  52                 	db	82
  2631  00F09F  49                 	db	73
  2632  00F0A0  50                 	db	80
  2633  00F0A1  4C                 	db	76
  2634  00F0A2  45                 	db	69
  2635  00F0A3  54                 	db	84
  2636  00F0A4  00                 	db	0
  2637  00F0A5  00                 	db	0
  2638  00F0A6  00                 	db	0
  2639  00F0A7  00                 	db	0
  2640  00F0A8  00                 	db	0
  2641  00F0A9  00                 	db	0
  2642  00F0AA  31                 	db	49
  2643  00F0AB  2F                 	db	47
  2644  00F0AC  38                 	db	56
  2645  00F0AD  00                 	db	0
  2646  00F0AE  00                 	db	0
  2647  00F0AF  00                 	db	0
  2648  00F0B0  00                 	db	0
  2649  00F0B1  00                 	db	0
  2650  00F0B2  00                 	db	0
  2651  00F0B3  00                 	db	0
  2652  00F0B4  00                 	db	0
  2653  00F0B5  00                 	db	0
  2654  00F0B6  00                 	db	0
  2655  00F0B7  00                 	db	0
  2656  00F0B8  00                 	db	0
  2657  00F0B9  00                 	db	0
  2658  00F0BA  00                 	db	0
  2659  00F0BB  31                 	db	49
  2660  00F0BC  2F                 	db	47
  2661  00F0BD  38                 	db	56
  2662  00F0BE  20                 	db	32
  2663  00F0BF  44                 	db	68
  2664  00F0C0  4F                 	db	79
  2665  00F0C1  54                 	db	84
  2666  00F0C2  54                 	db	84
  2667  00F0C3  45                 	db	69
  2668  00F0C4  44                 	db	68
  2669  00F0C5  00                 	db	0
  2670  00F0C6  00                 	db	0
  2671  00F0C7  00                 	db	0
  2672  00F0C8  00                 	db	0
  2673  00F0C9  00                 	db	0
  2674  00F0CA  00                 	db	0
  2675  00F0CB  00                 	db	0
  2676  00F0CC  31                 	db	49
  2677  00F0CD  2F                 	db	47
  2678  00F0CE  38                 	db	56
  2679  00F0CF  20                 	db	32
  2680  00F0D0  54                 	db	84
  2681  00F0D1  52                 	db	82
  2682  00F0D2  49                 	db	73
  2683  00F0D3  50                 	db	80
  2684  00F0D4  4C                 	db	76
  2685  00F0D5  45                 	db	69
  2686  00F0D6  54                 	db	84
  2687  00F0D7  00                 	db	0
  2688  00F0D8  00                 	db	0
  2689  00F0D9  00                 	db	0
  2690  00F0DA  00                 	db	0
  2691  00F0DB  00                 	db	0
  2692  00F0DC  00                 	db	0
  2693  00F0DD  31                 	db	49
  2694  00F0DE  2F                 	db	47
  2695  00F0DF  31                 	db	49
  2696  00F0E0  36                 	db	54
  2697  00F0E1  00                 	db	0
  2698  00F0E2  00                 	db	0
  2699  00F0E3  00                 	db	0
  2700  00F0E4  00                 	db	0
  2701  00F0E5  00                 	db	0
  2702  00F0E6  00                 	db	0
  2703  00F0E7  00                 	db	0
  2704  00F0E8  00                 	db	0
  2705  00F0E9  00                 	db	0
  2706  00F0EA  00                 	db	0
  2707  00F0EB  00                 	db	0
  2708  00F0EC  00                 	db	0
  2709  00F0ED  00                 	db	0
  2710  00F0EE  31                 	db	49
  2711  00F0EF  2F                 	db	47
  2712  00F0F0  31                 	db	49
  2713  00F0F1  36                 	db	54
  2714  00F0F2  20                 	db	32
  2715  00F0F3  44                 	db	68
  2716  00F0F4  4F                 	db	79
  2717  00F0F5  54                 	db	84
  2718  00F0F6  54                 	db	84
  2719  00F0F7  45                 	db	69
  2720  00F0F8  44                 	db	68
  2721  00F0F9  00                 	db	0
  2722  00F0FA  00                 	db	0
  2723  00F0FB  00                 	db	0
  2724  00F0FC  00                 	db	0
  2725  00F0FD  00                 	db	0
  2726  00F0FE  00                 	db	0
  2727  00F0FF  31                 	db	49
  2728  00F100  2F                 	db	47
  2729  00F101  31                 	db	49
  2730  00F102  36                 	db	54
  2731  00F103  20                 	db	32
  2732  00F104  54                 	db	84
  2733  00F105  52                 	db	82
  2734  00F106  49                 	db	73
  2735  00F107  50                 	db	80
  2736  00F108  4C                 	db	76
  2737  00F109  45                 	db	69
  2738  00F10A  54                 	db	84
  2739  00F10B  00                 	db	0
  2740  00F10C  00                 	db	0
  2741  00F10D  00                 	db	0
  2742  00F10E  00                 	db	0
  2743  00F10F  00                 	db	0
  2744  00F110  31                 	db	49
  2745  00F111  2F                 	db	47
  2746  00F112  33                 	db	51
  2747  00F113  32                 	db	50
  2748  00F114  00                 	db	0
  2749  00F115  00                 	db	0
  2750  00F116  00                 	db	0
  2751  00F117  00                 	db	0
  2752  00F118  00                 	db	0
  2753  00F119  00                 	db	0
  2754  00F11A  00                 	db	0
  2755  00F11B  00                 	db	0
  2756  00F11C  00                 	db	0
  2757  00F11D  00                 	db	0
  2758  00F11E  00                 	db	0
  2759  00F11F  00                 	db	0
  2760  00F120  00                 	db	0
  2761  00F121  31                 	db	49
  2762  00F122  2F                 	db	47
  2763  00F123  33                 	db	51
  2764  00F124  32                 	db	50
  2765  00F125  20                 	db	32
  2766  00F126  44                 	db	68
  2767  00F127  4F                 	db	79
  2768  00F128  54                 	db	84
  2769  00F129  54                 	db	84
  2770  00F12A  45                 	db	69
  2771  00F12B  44                 	db	68
  2772  00F12C  00                 	db	0
  2773  00F12D  00                 	db	0
  2774  00F12E  00                 	db	0
  2775  00F12F  00                 	db	0
  2776  00F130  00                 	db	0
  2777  00F131  00                 	db	0
  2778  00F132  31                 	db	49
  2779  00F133  2F                 	db	47
  2780  00F134  33                 	db	51
  2781  00F135  32                 	db	50
  2782  00F136  20                 	db	32
  2783  00F137  54                 	db	84
  2784  00F138  52                 	db	82
  2785  00F139  49                 	db	73
  2786  00F13A  50                 	db	80
  2787  00F13B  4C                 	db	76
  2788  00F13C  45                 	db	69
  2789  00F13D  54                 	db	84
  2790  00F13E  00                 	db	0
  2791  00F13F  00                 	db	0
  2792  00F140  00                 	db	0
  2793  00F141  00                 	db	0
  2794  00F142  00                 	db	0
  2795  00F143  53                 	db	83
  2796  00F144  45                 	db	69
  2797  00F145  54                 	db	84
  2798  00F146  2F                 	db	47
  2799  00F147  43                 	db	67
  2800  00F148  4C                 	db	76
  2801  00F149  45                 	db	69
  2802  00F14A  41                 	db	65
  2803  00F14B  52                 	db	82
  2804  00F14C  20                 	db	32
  2805  00F14D  4C                 	db	76
  2806  00F14E  41                 	db	65
  2807  00F14F  54                 	db	84
  2808  00F150  43                 	db	67
  2809  00F151  48                 	db	72
  2810  00F152  00                 	db	0
  2811  00F153  00                 	db	0
  2812  00F154  41                 	db	65
  2813  00F155  55                 	db	85
  2814  00F156  54                 	db	84
  2815  00F157  4F                 	db	79
  2816  00F158  20                 	db	32
  2817  00F159  4C                 	db	76
  2818  00F15A  41                 	db	65
  2819  00F15B  54                 	db	84
  2820  00F15C  43                 	db	67
  2821  00F15D  48                 	db	72
  2822  00F15E  00                 	db	0
  2823  00F15F  00                 	db	0
  2824  00F160  00                 	db	0
  2825  00F161  00                 	db	0
  2826  00F162  00                 	db	0
  2827  00F163  00                 	db	0
  2828  00F164  00                 	db	0
  2829  00F165  55                 	db	85
  2830  00F166  6E                 	db	110
  2831  00F167  2D                 	db	45
  2832  00F168  4C                 	db	76
  2833  00F169  61                 	db	97
  2834  00F16A  74                 	db	116
  2835  00F16B  63                 	db	99
  2836  00F16C  68                 	db	104
  2837  00F16D  20                 	db	32
  2838  00F16E  4D                 	db	77
  2839  00F16F  6F                 	db	111
  2840  00F170  64                 	db	100
  2841  00F171  65                 	db	101
  2842  00F172  00                 	db	0
  2843  00F173  00                 	db	0
  2844  00F174  00                 	db	0
  2845  00F175  00                 	db	0
  2846  00F176  55                 	db	85
  2847  00F177  4E                 	db	78
  2848  00F178  4C                 	db	76
  2849  00F179  41                 	db	65
  2850  00F17A  54                 	db	84
  2851  00F17B  43                 	db	67
  2852  00F17C  48                 	db	72
  2853  00F17D  20                 	db	32
  2854  00F17E  41                 	db	65
  2855  00F17F  4C                 	db	76
  2856  00F180  4C                 	db	76
  2857  00F181  00                 	db	0
  2858  00F182  00                 	db	0
  2859  00F183  00                 	db	0
  2860  00F184  00                 	db	0
  2861  00F185  00                 	db	0
  2862  00F186  00                 	db	0
  2863  00F187  4F                 	db	79
  2864  00F188  4E                 	db	78
  2865  00F189  45                 	db	69
  2866  00F18A  20                 	db	32
  2867  00F18B  41                 	db	65
  2868  00F18C  54                 	db	84
  2869  00F18D  20                 	db	32
  2870  00F18E  41                 	db	65
  2871  00F18F  20                 	db	32
  2872  00F190  54                 	db	84
  2873  00F191  49                 	db	73
  2874  00F192  4D                 	db	77
  2875  00F193  45                 	db	69
  2876  00F194  00                 	db	0
  2877  00F195  00                 	db	0
  2878  00F196  00                 	db	0
  2879  00F197  00                 	db	0
  2880  00F198  52                 	db	82
  2881  00F199  61                 	db	97
  2882  00F19A  6E                 	db	110
  2883  00F19B  64                 	db	100
  2884  00F19C  6F                 	db	111
  2885  00F19D  6D                 	db	109
  2886  00F19E  69                 	db	105
  2887  00F19F  7A                 	db	122
  2888  00F1A0  65                 	db	101
  2889  00F1A1  00                 	db	0
  2890  00F1A2  00                 	db	0
  2891  00F1A3  00                 	db	0
  2892  00F1A4  00                 	db	0
  2893  00F1A5  00                 	db	0
  2894  00F1A6  00                 	db	0
  2895  00F1A7  00                 	db	0
  2896  00F1A8  00                 	db	0
  2897  00F1A9  53                 	db	83
  2898  00F1AA  6B                 	db	107
  2899  00F1AB  69                 	db	105
  2900  00F1AC  70                 	db	112
  2901  00F1AD  20                 	db	32
  2902  00F1AE  46                 	db	70
  2903  00F1AF  69                 	db	105
  2904  00F1B0  72                 	db	114
  2905  00F1B1  73                 	db	115
  2906  00F1B2  74                 	db	116
  2907  00F1B3  2F                 	db	47
  2908  00F1B4  4C                 	db	76
  2909  00F1B5  61                 	db	97
  2910  00F1B6  73                 	db	115
  2911  00F1B7  74                 	db	116
  2912  00F1B8  00                 	db	0
  2913  00F1B9  00                 	db	0
  2914  00F1BA  52                 	db	82
  2915  00F1BB  41                 	db	65
  2916  00F1BC  4E                 	db	78
  2917  00F1BD  44                 	db	68
  2918  00F1BE  4F                 	db	79
  2919  00F1BF  4D                 	db	77
  2920  00F1C0  49                 	db	73
  2921  00F1C1  5A                 	db	90
  2922  00F1C2  45                 	db	69
  2923  00F1C3  20                 	db	32
  2924  00F1C4  41                 	db	65
  2925  00F1C5  55                 	db	85
  2926  00F1C6  54                 	db	84
  2927  00F1C7  4F                 	db	79
  2928  00F1C8  00                 	db	0
  2929  00F1C9  00                 	db	0
  2930  00F1CA  00                 	db	0
  2931  00F1CB  52                 	db	82
  2932  00F1CC  41                 	db	65
  2933  00F1CD  4E                 	db	78
  2934  00F1CE  44                 	db	68
  2935  00F1CF  4F                 	db	79
  2936  00F1D0  4D                 	db	77
  2937  00F1D1  49                 	db	73
  2938  00F1D2  5A                 	db	90
  2939  00F1D3  45                 	db	69
  2940  00F1D4  20                 	db	32
  2941  00F1D5  4F                 	db	79
  2942  00F1D6  4E                 	db	78
  2943  00F1D7  43                 	db	67
  2944  00F1D8  45                 	db	69
  2945  00F1D9  00                 	db	0
  2946  00F1DA  00                 	db	0
  2947  00F1DB  00                 	db	0
  2948  00F1DC  4B                 	db	75
  2949  00F1DD  65                 	db	101
  2950  00F1DE  79                 	db	121
  2951  00F1DF  20                 	db	32
  2952  00F1E0  70                 	db	112
  2953  00F1E1  72                 	db	114
  2954  00F1E2  65                 	db	101
  2955  00F1E3  73                 	db	115
  2956  00F1E4  73                 	db	115
  2957  00F1E5  00                 	db	0
  2958  00F1E6  00                 	db	0
  2959  00F1E7  00                 	db	0
  2960  00F1E8  00                 	db	0
  2961  00F1E9  00                 	db	0
  2962  00F1EA  00                 	db	0
  2963  00F1EB  00                 	db	0
  2964  00F1EC  00                 	db	0
  2965  00F1ED  4B                 	db	75
  2966  00F1EE  65                 	db	101
  2967  00F1EF  79                 	db	121
  2968  00F1F0  20                 	db	32
  2969  00F1F1  72                 	db	114
  2970  00F1F2  65                 	db	101
  2971  00F1F3  6C                 	db	108
  2972  00F1F4  65                 	db	101
  2973  00F1F5  61                 	db	97
  2974  00F1F6  73                 	db	115
  2975  00F1F7  65                 	db	101
  2976  00F1F8  00                 	db	0
  2977  00F1F9  00                 	db	0
  2978  00F1FA  00                 	db	0
  2979  00F1FB  00                 	db	0
  2980  00F1FC  00                 	db	0
  2981  00F1FD  00                 	db	0
  2982  00F1FE  54                 	db	84
  2983  00F1FF  72                 	db	114
  2984  00F200  61                 	db	97
  2985  00F201  6E                 	db	110
  2986  00F202  73                 	db	115
  2987  00F203  70                 	db	112
  2988  00F204  6F                 	db	111
  2989  00F205  73                 	db	115
  2990  00F206  65                 	db	101
  2991  00F207  00                 	db	0
  2992  00F208  00                 	db	0
  2993  00F209  00                 	db	0
  2994  00F20A  00                 	db	0
  2995  00F20B  00                 	db	0
  2996  00F20C  00                 	db	0
  2997  00F20D  00                 	db	0
  2998  00F20E  00                 	db	0
  2999  00F20F  52                 	db	82
  3000  00F210  65                 	db	101
  3001  00F211  73                 	db	115
  3002  00F212  65                 	db	101
  3003  00F213  74                 	db	116
  3004  00F214  00                 	db	0
  3005  00F215  00                 	db	0
  3006  00F216  00                 	db	0
  3007  00F217  00                 	db	0
  3008  00F218  00                 	db	0
  3009  00F219  00                 	db	0
  3010  00F21A  00                 	db	0
  3011  00F21B  00                 	db	0
  3012  00F21C  00                 	db	0
  3013  00F21D  00                 	db	0
  3014  00F21E  00                 	db	0
  3015  00F21F  00                 	db	0
  3016  00F220                     __end_ofascii@LCD_STRINGS:
  3017                           	opt stack 0
  3018  00F220                     _seg_ascii:
  3019                           	opt stack 0
  3020  00F220  3F                 	db	63
  3021  00F221  06                 	db	6
  3022  00F222  5B                 	db	91
  3023  00F223  4F                 	db	79
  3024  00F224  66                 	db	102
  3025  00F225  6D                 	db	109
  3026  00F226  7D                 	db	125
  3027  00F227  07                 	db	7
  3028  00F228  7F                 	db	127
  3029  00F229  6F                 	db	111
  3030  00F22A  00                 	db	0
  3031  00F22B  00                 	db	0
  3032  00F22C  00                 	db	0
  3033  00F22D  00                 	db	0
  3034  00F22E  00                 	db	0
  3035  00F22F  00                 	db	0
  3036  00F230  00                 	db	0
  3037  00F231  77                 	db	119
  3038  00F232  00                 	db	0
  3039  00F233  39                 	db	57
  3040  00F234  00                 	db	0
  3041  00F235  79                 	db	121
  3042  00F236  71                 	db	113
  3043  00F237  3D                 	db	61
  3044  00F238  76                 	db	118
  3045  00F239  30                 	db	48
  3046  00F23A  1E                 	db	30
  3047  00F23B  00                 	db	0
  3048  00F23C  38                 	db	56
  3049  00F23D  00                 	db	0
  3050  00F23E  00                 	db	0
  3051  00F23F  3F                 	db	63
  3052  00F240  73                 	db	115
  3053  00F241  00                 	db	0
  3054  00F242  00                 	db	0
  3055  00F243  6D                 	db	109
  3056  00F244  00                 	db	0
  3057  00F245  3E                 	db	62
  3058  00F246  00                 	db	0
  3059  00F247  00                 	db	0
  3060  00F248  00                 	db	0
  3061  00F249  00                 	db	0
  3062  00F24A  00                 	db	0
  3063  00F24B  00                 	db	0
  3064  00F24C  00                 	db	0
  3065  00F24D  00                 	db	0
  3066  00F24E  00                 	db	0
  3067  00F24F  00                 	db	0
  3068  00F250  00                 	db	0
  3069  00F251  5F                 	db	95
  3070  00F252  7C                 	db	124
  3071  00F253  58                 	db	88
  3072  00F254  5E                 	db	94
  3073  00F255  00                 	db	0
  3074  00F256  00                 	db	0
  3075  00F257  00                 	db	0
  3076  00F258  74                 	db	116
  3077  00F259  00                 	db	0
  3078  00F25A  00                 	db	0
  3079  00F25B  00                 	db	0
  3080  00F25C  00                 	db	0
  3081  00F25D  00                 	db	0
  3082  00F25E  54                 	db	84
  3083  00F25F  5C                 	db	92
  3084  00F260  00                 	db	0
  3085  00F261  67                 	db	103
  3086  00F262  50                 	db	80
  3087  00F263  00                 	db	0
  3088  00F264  78                 	db	120
  3089  00F265  1C                 	db	28
  3090  00F266  00                 	db	0
  3091  00F267  00                 	db	0
  3092  00F268  00                 	db	0
  3093  00F269  6E                 	db	110
  3094  00F26A  00                 	db	0
  3095  00F26B                     __end_of_seg_ascii:
  3096                           	opt stack 0
  3097  00F26B                     _diatonic_seventh_minor:
  3098                           	opt stack 0
  3099  00F26B  00                 	db	0
  3100  00F26C  03                 	db	3
  3101  00F26D  07                 	db	7
  3102  00F26E  0A                 	db	10
  3103  00F26F  02                 	db	2
  3104  00F270  03                 	db	3
  3105  00F271  06                 	db	6
  3106  00F272  0A                 	db	10
  3107  00F273  03                 	db	3
  3108  00F274  04                 	db	4
  3109  00F275  07                 	db	7
  3110  00F276  0B                 	db	11
  3111  00F277  05                 	db	5
  3112  00F278  03                 	db	3
  3113  00F279  07                 	db	7
  3114  00F27A  0A                 	db	10
  3115  00F27B  07                 	db	7
  3116  00F27C  03                 	db	3
  3117  00F27D  07                 	db	7
  3118  00F27E  0A                 	db	10
  3119  00F27F  08                 	db	8
  3120  00F280  04                 	db	4
  3121  00F281  07                 	db	7
  3122  00F282  0B                 	db	11
  3123  00F283  0A                 	db	10
  3124  00F284  04                 	db	4
  3125  00F285  07                 	db	7
  3126  00F286  0A                 	db	10
  3127  00F287  0C                 	db	12
  3128  00F288  03                 	db	3
  3129  00F289  07                 	db	7
  3130  00F28A  0A                 	db	10
  3131  00F28B  0E                 	db	14
  3132  00F28C  03                 	db	3
  3133  00F28D  06                 	db	6
  3134  00F28E  0A                 	db	10
  3135  00F28F  0F                 	db	15
  3136  00F290  04                 	db	4
  3137  00F291  07                 	db	7
  3138  00F292  0B                 	db	11
  3139  00F293  11                 	db	17
  3140  00F294  03                 	db	3
  3141  00F295  07                 	db	7
  3142  00F296  0A                 	db	10
  3143  00F297  13                 	db	19
  3144  00F298  03                 	db	3
  3145  00F299  07                 	db	7
  3146  00F29A  0A                 	db	10
  3147  00F29B  14                 	db	20
  3148  00F29C  04                 	db	4
  3149  00F29D  07                 	db	7
  3150  00F29E  0B                 	db	11
  3151  00F29F  16                 	db	22
  3152  00F2A0  04                 	db	4
  3153  00F2A1  07                 	db	7
  3154  00F2A2  0A                 	db	10
  3155  00F2A3  18                 	db	24
  3156  00F2A4  03                 	db	3
  3157  00F2A5  07                 	db	7
  3158  00F2A6  0A                 	db	10
  3159  00F2A7                     __end_of_diatonic_seventh_minor:
  3160                           	opt stack 0
  3161  00F2A7                     _diatonic_seventh_major:
  3162                           	opt stack 0
  3163  00F2A7  00                 	db	0
  3164  00F2A8  04                 	db	4
  3165  00F2A9  07                 	db	7
  3166  00F2AA  0B                 	db	11
  3167  00F2AB  00                 	db	0
  3168  00F2AC  03                 	db	3
  3169  00F2AD  07                 	db	7
  3170  00F2AE  0A                 	db	10
  3171  00F2AF  00                 	db	0
  3172  00F2B0  03                 	db	3
  3173  00F2B1  07                 	db	7
  3174  00F2B2  0A                 	db	10
  3175  00F2B3  00                 	db	0
  3176  00F2B4  04                 	db	4
  3177  00F2B5  07                 	db	7
  3178  00F2B6  0B                 	db	11
  3179  00F2B7  00                 	db	0
  3180  00F2B8  04                 	db	4
  3181  00F2B9  07                 	db	7
  3182  00F2BA  0A                 	db	10
  3183  00F2BB  00                 	db	0
  3184  00F2BC  03                 	db	3
  3185  00F2BD  07                 	db	7
  3186  00F2BE  0A                 	db	10
  3187  00F2BF  00                 	db	0
  3188  00F2C0  03                 	db	3
  3189  00F2C1  06                 	db	6
  3190  00F2C2  0A                 	db	10
  3191  00F2C3  00                 	db	0
  3192  00F2C4  04                 	db	4
  3193  00F2C5  07                 	db	7
  3194  00F2C6  0B                 	db	11
  3195  00F2C7  00                 	db	0
  3196  00F2C8  03                 	db	3
  3197  00F2C9  07                 	db	7
  3198  00F2CA  0A                 	db	10
  3199  00F2CB  00                 	db	0
  3200  00F2CC  03                 	db	3
  3201  00F2CD  07                 	db	7
  3202  00F2CE  0A                 	db	10
  3203  00F2CF  00                 	db	0
  3204  00F2D0  04                 	db	4
  3205  00F2D1  07                 	db	7
  3206  00F2D2  0B                 	db	11
  3207  00F2D3  00                 	db	0
  3208  00F2D4  04                 	db	4
  3209  00F2D5  07                 	db	7
  3210  00F2D6  0A                 	db	10
  3211  00F2D7  00                 	db	0
  3212  00F2D8  03                 	db	3
  3213  00F2D9  07                 	db	7
  3214  00F2DA  0A                 	db	10
  3215  00F2DB  00                 	db	0
  3216  00F2DC  03                 	db	3
  3217  00F2DD  06                 	db	6
  3218  00F2DE  0A                 	db	10
  3219  00F2DF  00                 	db	0
  3220  00F2E0  04                 	db	4
  3221  00F2E1  07                 	db	7
  3222  00F2E2  0B                 	db	11
  3223  00F2E3                     __end_of_diatonic_seventh_major:
  3224                           	opt stack 0
  3225  00F2E3                     _diatonic_minor:
  3226                           	opt stack 0
  3227  00F2E3  00                 	db	0
  3228  00F2E4  03                 	db	3
  3229  00F2E5  07                 	db	7
  3230  00F2E6  02                 	db	2
  3231  00F2E7  03                 	db	3
  3232  00F2E8  06                 	db	6
  3233  00F2E9  03                 	db	3
  3234  00F2EA  04                 	db	4
  3235  00F2EB  07                 	db	7
  3236  00F2EC  05                 	db	5
  3237  00F2ED  03                 	db	3
  3238  00F2EE  07                 	db	7
  3239  00F2EF  07                 	db	7
  3240  00F2F0  03                 	db	3
  3241  00F2F1  07                 	db	7
  3242  00F2F2  08                 	db	8
  3243  00F2F3  04                 	db	4
  3244  00F2F4  07                 	db	7
  3245  00F2F5  0A                 	db	10
  3246  00F2F6  04                 	db	4
  3247  00F2F7  07                 	db	7
  3248  00F2F8  0C                 	db	12
  3249  00F2F9  03                 	db	3
  3250  00F2FA  07                 	db	7
  3251  00F2FB  0E                 	db	14
  3252  00F2FC  03                 	db	3
  3253  00F2FD  06                 	db	6
  3254  00F2FE  0F                 	db	15
  3255  00F2FF  04                 	db	4
  3256  00F300  07                 	db	7
  3257  00F301  11                 	db	17
  3258  00F302  03                 	db	3
  3259  00F303  07                 	db	7
  3260  00F304  13                 	db	19
  3261  00F305  03                 	db	3
  3262  00F306  07                 	db	7
  3263  00F307  14                 	db	20
  3264  00F308  04                 	db	4
  3265  00F309  07                 	db	7
  3266  00F30A  16                 	db	22
  3267  00F30B  04                 	db	4
  3268  00F30C  07                 	db	7
  3269  00F30D  18                 	db	24
  3270  00F30E  03                 	db	3
  3271  00F30F  07                 	db	7
  3272  00F310                     __end_of_diatonic_minor:
  3273                           	opt stack 0
  3274  00F310                     _diatonic_major:
  3275                           	opt stack 0
  3276  00F310  00                 	db	0
  3277  00F311  04                 	db	4
  3278  00F312  07                 	db	7
  3279  00F313  00                 	db	0
  3280  00F314  03                 	db	3
  3281  00F315  07                 	db	7
  3282  00F316  00                 	db	0
  3283  00F317  03                 	db	3
  3284  00F318  07                 	db	7
  3285  00F319  00                 	db	0
  3286  00F31A  04                 	db	4
  3287  00F31B  07                 	db	7
  3288  00F31C  00                 	db	0
  3289  00F31D  04                 	db	4
  3290  00F31E  07                 	db	7
  3291  00F31F  00                 	db	0
  3292  00F320  03                 	db	3
  3293  00F321  07                 	db	7
  3294  00F322  00                 	db	0
  3295  00F323  03                 	db	3
  3296  00F324  06                 	db	6
  3297  00F325  00                 	db	0
  3298  00F326  04                 	db	4
  3299  00F327  07                 	db	7
  3300  00F328  00                 	db	0
  3301  00F329  03                 	db	3
  3302  00F32A  07                 	db	7
  3303  00F32B  00                 	db	0
  3304  00F32C  03                 	db	3
  3305  00F32D  07                 	db	7
  3306  00F32E  00                 	db	0
  3307  00F32F  04                 	db	4
  3308  00F330  07                 	db	7
  3309  00F331  00                 	db	0
  3310  00F332  04                 	db	4
  3311  00F333  07                 	db	7
  3312  00F334  00                 	db	0
  3313  00F335  03                 	db	3
  3314  00F336  07                 	db	7
  3315  00F337  00                 	db	0
  3316  00F338  03                 	db	3
  3317  00F339  06                 	db	6
  3318  00F33A  00                 	db	0
  3319  00F33B  04                 	db	4
  3320  00F33C  07                 	db	7
  3321  00F33D                     __end_of_diatonic_major:
  3322                           	opt stack 0
  3323  00F33D                     _ttable:
  3324                           	opt stack 0
  3325  00F33D  00                 	db	0
  3326  00F33E  02                 	db	2
  3327  00F33F  04                 	db	4
  3328  00F340  00                 	db	0
  3329  00F341  03                 	db	3
  3330  00F342  00                 	db	0
  3331  00F343  01                 	db	1
  3332  00F344  10                 	db	16
  3333  00F345  03                 	db	3
  3334  00F346  02                 	db	2
  3335  00F347  00                 	db	0
  3336  00F348  00                 	db	0
  3337  00F349  03                 	db	3
  3338  00F34A  02                 	db	2
  3339  00F34B  01                 	db	1
  3340  00F34C  00                 	db	0
  3341  00F34D  06                 	db	6
  3342  00F34E  00                 	db	0
  3343  00F34F  04                 	db	4
  3344  00F350  00                 	db	0
  3345  00F351  06                 	db	6
  3346  00F352  05                 	db	5
  3347  00F353  00                 	db	0
  3348  00F354  20                 	db	32
  3349  00F355  06                 	db	6
  3350  00F356  05                 	db	5
  3351  00F357  04                 	db	4
  3352  00F358  00                 	db	0
  3353  00F359                     __end_of_ttable:
  3354                           	opt stack 0
  3355  00F359                     _seg_bcd_hex:
  3356                           	opt stack 0
  3357  00F359  3F                 	db	63
  3358  00F35A  06                 	db	6
  3359  00F35B  5B                 	db	91
  3360  00F35C  4F                 	db	79
  3361  00F35D  66                 	db	102
  3362  00F35E  6D                 	db	109
  3363  00F35F  7D                 	db	125
  3364  00F360  07                 	db	7
  3365  00F361  7F                 	db	127
  3366  00F362  6F                 	db	111
  3367  00F363  77                 	db	119
  3368  00F364  7C                 	db	124
  3369  00F365  39                 	db	57
  3370  00F366  5E                 	db	94
  3371  00F367  79                 	db	121
  3372  00F368  71                 	db	113
  3373  00F369                     __end_of_seg_bcd_hex:
  3374                           	opt stack 0
  3375  00F369                     _minor_key:
  3376                           	opt stack 0
  3377  00F369  00                 	db	0
  3378  00F36A  02                 	db	2
  3379  00F36B  03                 	db	3
  3380  00F36C  05                 	db	5
  3381  00F36D  07                 	db	7
  3382  00F36E  08                 	db	8
  3383  00F36F  0A                 	db	10
  3384  00F370  0C                 	db	12
  3385  00F371  0E                 	db	14
  3386  00F372  0F                 	db	15
  3387  00F373  11                 	db	17
  3388  00F374  13                 	db	19
  3389  00F375  14                 	db	20
  3390  00F376  16                 	db	22
  3391  00F377  18                 	db	24
  3392  00F378                     __end_of_minor_key:
  3393                           	opt stack 0
  3394  00F378                     _major_key:
  3395                           	opt stack 0
  3396  00F378  00                 	db	0
  3397  00F379  02                 	db	2
  3398  00F37A  04                 	db	4
  3399  00F37B  05                 	db	5
  3400  00F37C  07                 	db	7
  3401  00F37D  09                 	db	9
  3402  00F37E  0B                 	db	11
  3403  00F37F  0C                 	db	12
  3404  00F380  0E                 	db	14
  3405  00F381  10                 	db	16
  3406  00F382  11                 	db	17
  3407  00F383  13                 	db	19
  3408  00F384  15                 	db	21
  3409  00F385  17                 	db	23
  3410  00F386  18                 	db	24
  3411  00F387                     __end_of_major_key:
  3412                           	opt stack 0
  3413  00F387                     _pentatonic_minor_key:
  3414                           	opt stack 0
  3415  00F387  00                 	db	0
  3416  00F388  03                 	db	3
  3417  00F389  05                 	db	5
  3418  00F38A  07                 	db	7
  3419  00F38B  0A                 	db	10
  3420  00F38C  0C                 	db	12
  3421  00F38D  0F                 	db	15
  3422  00F38E  11                 	db	17
  3423  00F38F  13                 	db	19
  3424  00F390  16                 	db	22
  3425  00F391  18                 	db	24
  3426  00F392                     __end_of_pentatonic_minor_key:
  3427                           	opt stack 0
  3428  00F392                     _pentatonic_major_key:
  3429                           	opt stack 0
  3430  00F392  00                 	db	0
  3431  00F393  02                 	db	2
  3432  00F394  04                 	db	4
  3433  00F395  07                 	db	7
  3434  00F396  09                 	db	9
  3435  00F397  0C                 	db	12
  3436  00F398  0E                 	db	14
  3437  00F399  10                 	db	16
  3438  00F39A  13                 	db	19
  3439  00F39B  15                 	db	21
  3440  00F39C  18                 	db	24
  3441  00F39D                     __end_of_pentatonic_major_key:
  3442                           	opt stack 0
  3443  00F39D                     _MAX_NUM_NOTES:
  3444                           	opt stack 0
  3445  00F39D  10                 	db	16
  3446  00F39E                     __end_of_MAX_NUM_NOTES:
  3447                           	opt stack 0
  3448  00F39E                     _LCD_STRINGS:
  3449                           	opt stack 0
  3450  00F39E  4B                 	db	75
  3451  00F39F  45                 	db	69
  3452  00F3A0  59                 	db	89
  3453  00F3A1  42                 	db	66
  3454  00F3A2  4F                 	db	79
  3455  00F3A3  41                 	db	65
  3456  00F3A4  52                 	db	82
  3457  00F3A5  44                 	db	68
  3458  00F3A6  20                 	db	32
  3459  00F3A7  4D                 	db	77
  3460  00F3A8  4F                 	db	79
  3461  00F3A9  44                 	db	68
  3462  00F3AA  45                 	db	69
  3463  00F3AB  3A                 	db	58
  3464  00F3AC  00                 	db	0
  3465  00F3AD  00                 	db	0
  3466  00F3AE  00                 	db	0
  3467  00F3AF  41                 	db	65
  3468  00F3B0  52                 	db	82
  3469  00F3B1  50                 	db	80
  3470  00F3B2  45                 	db	69
  3471  00F3B3  47                 	db	71
  3472  00F3B4  47                 	db	71
  3473  00F3B5  49                 	db	73
  3474  00F3B6  4F                 	db	79
  3475  00F3B7  20                 	db	32
  3476  00F3B8  4D                 	db	77
  3477  00F3B9  45                 	db	69
  3478  00F3BA  4E                 	db	78
  3479  00F3BB  55                 	db	85
  3480  00F3BC  3A                 	db	58
  3481  00F3BD  00                 	db	0
  3482  00F3BE  00                 	db	0
  3483  00F3BF  00                 	db	0
  3484  00F3C0  54                 	db	84
  3485  00F3C1  52                 	db	82
  3486  00F3C2  41                 	db	65
  3487  00F3C3  4E                 	db	78
  3488  00F3C4  53                 	db	83
  3489  00F3C5  50                 	db	80
  3490  00F3C6  4F                 	db	79
  3491  00F3C7  53                 	db	83
  3492  00F3C8  45                 	db	69
  3493  00F3C9  20                 	db	32
  3494  00F3CA  4D                 	db	77
  3495  00F3CB  4F                 	db	79
  3496  00F3CC  44                 	db	68
  3497  00F3CD  45                 	db	69
  3498  00F3CE  3A                 	db	58
  3499  00F3CF  00                 	db	0
  3500  00F3D0  00                 	db	0
  3501  00F3D1  44                 	db	68
  3502  00F3D2  52                 	db	82
  3503  00F3D3  55                 	db	85
  3504  00F3D4  4D                 	db	77
  3505  00F3D5  20                 	db	32
  3506  00F3D6  4D                 	db	77
  3507  00F3D7  4F                 	db	79
  3508  00F3D8  44                 	db	68
  3509  00F3D9  45                 	db	69
  3510  00F3DA  3A                 	db	58
  3511  00F3DB  00                 	db	0
  3512  00F3DC  00                 	db	0
  3513  00F3DD  00                 	db	0
  3514  00F3DE  00                 	db	0
  3515  00F3DF  00                 	db	0
  3516  00F3E0  00                 	db	0
  3517  00F3E1  00                 	db	0
  3518  00F3E2  50                 	db	80
  3519  00F3E3  4F                 	db	79
  3520  00F3E4  54                 	db	84
  3521  00F3E5  53                 	db	83
  3522  00F3E6  20                 	db	32
  3523  00F3E7  4D                 	db	77
  3524  00F3E8  4F                 	db	79
  3525  00F3E9  44                 	db	68
  3526  00F3EA  45                 	db	69
  3527  00F3EB  3A                 	db	58
  3528  00F3EC  00                 	db	0
  3529  00F3ED  00                 	db	0
  3530  00F3EE  00                 	db	0
  3531  00F3EF  00                 	db	0
  3532  00F3F0  00                 	db	0
  3533  00F3F1  00                 	db	0
  3534  00F3F2  00                 	db	0
  3535  00F3F3  4D                 	db	77
  3536  00F3F4  49                 	db	73
  3537  00F3F5  44                 	db	68
  3538  00F3F6  49                 	db	73
  3539  00F3F7  20                 	db	32
  3540  00F3F8  43                 	db	67
  3541  00F3F9  48                 	db	72
  3542  00F3FA  41                 	db	65
  3543  00F3FB  4E                 	db	78
  3544  00F3FC  4E                 	db	78
  3545  00F3FD  45                 	db	69
  3546  00F3FE  4C                 	db	76
  3547  00F3FF  53                 	db	83
  3548  00F400  3A                 	db	58
  3549  00F401  00                 	db	0
  3550  00F402  00                 	db	0
  3551  00F403  00                 	db	0
  3552  00F404  50                 	db	80
  3553  00F405  52                 	db	82
  3554  00F406  4F                 	db	79
  3555  00F407  47                 	db	71
  3556  00F408  52                 	db	82
  3557  00F409  41                 	db	65
  3558  00F40A  4D                 	db	77
  3559  00F40B  20                 	db	32
  3560  00F40C  43                 	db	67
  3561  00F40D  48                 	db	72
  3562  00F40E  41                 	db	65
  3563  00F40F  4E                 	db	78
  3564  00F410  47                 	db	71
  3565  00F411  45                 	db	69
  3566  00F412  3A                 	db	58
  3567  00F413  00                 	db	0
  3568  00F414  00                 	db	0
  3569  00F415  45                 	db	69
  3570  00F416  45                 	db	69
  3571  00F417  50                 	db	80
  3572  00F418  52                 	db	82
  3573  00F419  4F                 	db	79
  3574  00F41A  4D                 	db	77
  3575  00F41B  20                 	db	32
  3576  00F41C  4D                 	db	77
  3577  00F41D  45                 	db	69
  3578  00F41E  4E                 	db	78
  3579  00F41F  55                 	db	85
  3580  00F420  3A                 	db	58
  3581  00F421  00                 	db	0
  3582  00F422  00                 	db	0
  3583  00F423  00                 	db	0
  3584  00F424  00                 	db	0
  3585  00F425  00                 	db	0
  3586  00F426  43                 	db	67
  3587  00F427  48                 	db	72
  3588  00F428  52                 	db	82
  3589  00F429  4F                 	db	79
  3590  00F42A  4D                 	db	77
  3591  00F42B  41                 	db	65
  3592  00F42C  54                 	db	84
  3593  00F42D  49                 	db	73
  3594  00F42E  43                 	db	67
  3595  00F42F  00                 	db	0
  3596  00F430  00                 	db	0
  3597  00F431  00                 	db	0
  3598  00F432  00                 	db	0
  3599  00F433  00                 	db	0
  3600  00F434  00                 	db	0
  3601  00F435  00                 	db	0
  3602  00F436  00                 	db	0
  3603  00F437  4D                 	db	77
  3604  00F438  41                 	db	65
  3605  00F439  4A                 	db	74
  3606  00F43A  4F                 	db	79
  3607  00F43B  52                 	db	82
  3608  00F43C  00                 	db	0
  3609  00F43D  00                 	db	0
  3610  00F43E  00                 	db	0
  3611  00F43F  00                 	db	0
  3612  00F440  00                 	db	0
  3613  00F441  00                 	db	0
  3614  00F442  00                 	db	0
  3615  00F443  00                 	db	0
  3616  00F444  00                 	db	0
  3617  00F445  00                 	db	0
  3618  00F446  00                 	db	0
  3619  00F447  00                 	db	0
  3620  00F448  4D                 	db	77
  3621  00F449  49                 	db	73
  3622  00F44A  4E                 	db	78
  3623  00F44B  4F                 	db	79
  3624  00F44C  52                 	db	82
  3625  00F44D  00                 	db	0
  3626  00F44E  00                 	db	0
  3627  00F44F  00                 	db	0
  3628  00F450  00                 	db	0
  3629  00F451  00                 	db	0
  3630  00F452  00                 	db	0
  3631  00F453  00                 	db	0
  3632  00F454  00                 	db	0
  3633  00F455  00                 	db	0
  3634  00F456  00                 	db	0
  3635  00F457  00                 	db	0
  3636  00F458  00                 	db	0
  3637  00F459  4D                 	db	77
  3638  00F45A  4F                 	db	79
  3639  00F45B  44                 	db	68
  3640  00F45C  45                 	db	69
  3641  00F45D  53                 	db	83
  3642  00F45E  00                 	db	0
  3643  00F45F  00                 	db	0
  3644  00F460  00                 	db	0
  3645  00F461  00                 	db	0
  3646  00F462  00                 	db	0
  3647  00F463  00                 	db	0
  3648  00F464  00                 	db	0
  3649  00F465  00                 	db	0
  3650  00F466  00                 	db	0
  3651  00F467  00                 	db	0
  3652  00F468  00                 	db	0
  3653  00F469  00                 	db	0
  3654  00F46A  50                 	db	80
  3655  00F46B  45                 	db	69
  3656  00F46C  4E                 	db	78
  3657  00F46D  54                 	db	84
  3658  00F46E  41                 	db	65
  3659  00F46F  54                 	db	84
  3660  00F470  4F                 	db	79
  3661  00F471  4E                 	db	78
  3662  00F472  49                 	db	73
  3663  00F473  43                 	db	67
  3664  00F474  20                 	db	32
  3665  00F475  4D                 	db	77
  3666  00F476  41                 	db	65
  3667  00F477  4A                 	db	74
  3668  00F478  4F                 	db	79
  3669  00F479  52                 	db	82
  3670  00F47A  00                 	db	0
  3671  00F47B  50                 	db	80
  3672  00F47C  45                 	db	69
  3673  00F47D  4E                 	db	78
  3674  00F47E  54                 	db	84
  3675  00F47F  41                 	db	65
  3676  00F480  54                 	db	84
  3677  00F481  4F                 	db	79
  3678  00F482  4E                 	db	78
  3679  00F483  49                 	db	73
  3680  00F484  43                 	db	67
  3681  00F485  20                 	db	32
  3682  00F486  4D                 	db	77
  3683  00F487  49                 	db	73
  3684  00F488  4E                 	db	78
  3685  00F489  4F                 	db	79
  3686  00F48A  52                 	db	82
  3687  00F48B  00                 	db	0
  3688  00F48C  54                 	db	84
  3689  00F48D  52                 	db	82
  3690  00F48E  49                 	db	73
  3691  00F48F  41                 	db	65
  3692  00F490  44                 	db	68
  3693  00F491  00                 	db	0
  3694  00F492  00                 	db	0
  3695  00F493  00                 	db	0
  3696  00F494  00                 	db	0
  3697  00F495  00                 	db	0
  3698  00F496  00                 	db	0
  3699  00F497  00                 	db	0
  3700  00F498  00                 	db	0
  3701  00F499  00                 	db	0
  3702  00F49A  00                 	db	0
  3703  00F49B  00                 	db	0
  3704  00F49C  00                 	db	0
  3705  00F49D  44                 	db	68
  3706  00F49E  49                 	db	73
  3707  00F49F  41                 	db	65
  3708  00F4A0  54                 	db	84
  3709  00F4A1  4F                 	db	79
  3710  00F4A2  4E                 	db	78
  3711  00F4A3  49                 	db	73
  3712  00F4A4  43                 	db	67
  3713  00F4A5  20                 	db	32
  3714  00F4A6  54                 	db	84
  3715  00F4A7  20                 	db	32
  3716  00F4A8  4D                 	db	77
  3717  00F4A9  41                 	db	65
  3718  00F4AA  4A                 	db	74
  3719  00F4AB  4F                 	db	79
  3720  00F4AC  52                 	db	82
  3721  00F4AD  00                 	db	0
  3722  00F4AE  44                 	db	68
  3723  00F4AF  49                 	db	73
  3724  00F4B0  41                 	db	65
  3725  00F4B1  54                 	db	84
  3726  00F4B2  4F                 	db	79
  3727  00F4B3  4E                 	db	78
  3728  00F4B4  49                 	db	73
  3729  00F4B5  43                 	db	67
  3730  00F4B6  20                 	db	32
  3731  00F4B7  54                 	db	84
  3732  00F4B8  20                 	db	32
  3733  00F4B9  4D                 	db	77
  3734  00F4BA  49                 	db	73
  3735  00F4BB  4E                 	db	78
  3736  00F4BC  4F                 	db	79
  3737  00F4BD  52                 	db	82
  3738  00F4BE  00                 	db	0
  3739  00F4BF  53                 	db	83
  3740  00F4C0  45                 	db	69
  3741  00F4C1  56                 	db	86
  3742  00F4C2  45                 	db	69
  3743  00F4C3  4E                 	db	78
  3744  00F4C4  54                 	db	84
  3745  00F4C5  48                 	db	72
  3746  00F4C6  00                 	db	0
  3747  00F4C7  00                 	db	0
  3748  00F4C8  00                 	db	0
  3749  00F4C9  00                 	db	0
  3750  00F4CA  00                 	db	0
  3751  00F4CB  00                 	db	0
  3752  00F4CC  00                 	db	0
  3753  00F4CD  00                 	db	0
  3754  00F4CE  00                 	db	0
  3755  00F4CF  00                 	db	0
  3756  00F4D0  44                 	db	68
  3757  00F4D1  49                 	db	73
  3758  00F4D2  41                 	db	65
  3759  00F4D3  54                 	db	84
  3760  00F4D4  4F                 	db	79
  3761  00F4D5  4E                 	db	78
  3762  00F4D6  49                 	db	73
  3763  00F4D7  43                 	db	67
  3764  00F4D8  20                 	db	32
  3765  00F4D9  37                 	db	55
  3766  00F4DA  20                 	db	32
  3767  00F4DB  4D                 	db	77
  3768  00F4DC  41                 	db	65
  3769  00F4DD  4A                 	db	74
  3770  00F4DE  4F                 	db	79
  3771  00F4DF  52                 	db	82
  3772  00F4E0  00                 	db	0
  3773  00F4E1  44                 	db	68
  3774  00F4E2  49                 	db	73
  3775  00F4E3  41                 	db	65
  3776  00F4E4  54                 	db	84
  3777  00F4E5  4F                 	db	79
  3778  00F4E6  4E                 	db	78
  3779  00F4E7  49                 	db	73
  3780  00F4E8  43                 	db	67
  3781  00F4E9  20                 	db	32
  3782  00F4EA  37                 	db	55
  3783  00F4EB  20                 	db	32
  3784  00F4EC  4D                 	db	77
  3785  00F4ED  49                 	db	73
  3786  00F4EE  4E                 	db	78
  3787  00F4EF  4F                 	db	79
  3788  00F4F0  52                 	db	82
  3789  00F4F1  00                 	db	0
  3790  00F4F2  69                 	db	105
  3791  00F4F3  6F                 	db	111
  3792  00F4F4  6E                 	db	110
  3793  00F4F5  69                 	db	105
  3794  00F4F6  61                 	db	97
  3795  00F4F7  6E                 	db	110
  3796  00F4F8  00                 	db	0
  3797  00F4F9  00                 	db	0
  3798  00F4FA  00                 	db	0
  3799  00F4FB  00                 	db	0
  3800  00F4FC  00                 	db	0
  3801  00F4FD  00                 	db	0
  3802  00F4FE  00                 	db	0
  3803  00F4FF  00                 	db	0
  3804  00F500  00                 	db	0
  3805  00F501  00                 	db	0
  3806  00F502  00                 	db	0
  3807  00F503  64                 	db	100
  3808  00F504  6F                 	db	111
  3809  00F505  72                 	db	114
  3810  00F506  69                 	db	105
  3811  00F507  61                 	db	97
  3812  00F508  6E                 	db	110
  3813  00F509  00                 	db	0
  3814  00F50A  00                 	db	0
  3815  00F50B  00                 	db	0
  3816  00F50C  00                 	db	0
  3817  00F50D  00                 	db	0
  3818  00F50E  00                 	db	0
  3819  00F50F  00                 	db	0
  3820  00F510  00                 	db	0
  3821  00F511  00                 	db	0
  3822  00F512  00                 	db	0
  3823  00F513  00                 	db	0
  3824  00F514  70                 	db	112
  3825  00F515  68                 	db	104
  3826  00F516  72                 	db	114
  3827  00F517  79                 	db	121
  3828  00F518  67                 	db	103
  3829  00F519  69                 	db	105
  3830  00F51A  61                 	db	97
  3831  00F51B  6E                 	db	110
  3832  00F51C  00                 	db	0
  3833  00F51D  00                 	db	0
  3834  00F51E  00                 	db	0
  3835  00F51F  00                 	db	0
  3836  00F520  00                 	db	0
  3837  00F521  00                 	db	0
  3838  00F522  00                 	db	0
  3839  00F523  00                 	db	0
  3840  00F524  00                 	db	0
  3841  00F525  6C                 	db	108
  3842  00F526  79                 	db	121
  3843  00F527  64                 	db	100
  3844  00F528  69                 	db	105
  3845  00F529  61                 	db	97
  3846  00F52A  6E                 	db	110
  3847  00F52B  00                 	db	0
  3848  00F52C  00                 	db	0
  3849  00F52D  00                 	db	0
  3850  00F52E  00                 	db	0
  3851  00F52F  00                 	db	0
  3852  00F530  00                 	db	0
  3853  00F531  00                 	db	0
  3854  00F532  00                 	db	0
  3855  00F533  00                 	db	0
  3856  00F534  00                 	db	0
  3857  00F535  00                 	db	0
  3858  00F536  6D                 	db	109
  3859  00F537  69                 	db	105
  3860  00F538  78                 	db	120
  3861  00F539  6F                 	db	111
  3862  00F53A  6C                 	db	108
  3863  00F53B  79                 	db	121
  3864  00F53C  64                 	db	100
  3865  00F53D  69                 	db	105
  3866  00F53E  61                 	db	97
  3867  00F53F  6E                 	db	110
  3868  00F540  00                 	db	0
  3869  00F541  00                 	db	0
  3870  00F542  00                 	db	0
  3871  00F543  00                 	db	0
  3872  00F544  00                 	db	0
  3873  00F545  00                 	db	0
  3874  00F546  00                 	db	0
  3875  00F547  61                 	db	97
  3876  00F548  65                 	db	101
  3877  00F549  6F                 	db	111
  3878  00F54A  6C                 	db	108
  3879  00F54B  69                 	db	105
  3880  00F54C  61                 	db	97
  3881  00F54D  6E                 	db	110
  3882  00F54E  00                 	db	0
  3883  00F54F  00                 	db	0
  3884  00F550  00                 	db	0
  3885  00F551  00                 	db	0
  3886  00F552  00                 	db	0
  3887  00F553  00                 	db	0
  3888  00F554  00                 	db	0
  3889  00F555  00                 	db	0
  3890  00F556  00                 	db	0
  3891  00F557  00                 	db	0
  3892  00F558  6C                 	db	108
  3893  00F559  6F                 	db	111
  3894  00F55A  63                 	db	99
  3895  00F55B  72                 	db	114
  3896  00F55C  69                 	db	105
  3897  00F55D  61                 	db	97
  3898  00F55E  6E                 	db	110
  3899  00F55F  00                 	db	0
  3900  00F560  00                 	db	0
  3901  00F561  00                 	db	0
  3902  00F562  00                 	db	0
  3903  00F563  00                 	db	0
  3904  00F564  00                 	db	0
  3905  00F565  00                 	db	0
  3906  00F566  00                 	db	0
  3907  00F567  00                 	db	0
  3908  00F568  00                 	db	0
  3909  00F569  6D                 	db	109
  3910  00F56A  61                 	db	97
  3911  00F56B  6A                 	db	106
  3912  00F56C  6F                 	db	111
  3913  00F56D  72                 	db	114
  3914  00F56E  20                 	db	32
  3915  00F56F  74                 	db	116
  3916  00F570  72                 	db	114
  3917  00F571  69                 	db	105
  3918  00F572  61                 	db	97
  3919  00F573  64                 	db	100
  3920  00F574  00                 	db	0
  3921  00F575  00                 	db	0
  3922  00F576  00                 	db	0
  3923  00F577  00                 	db	0
  3924  00F578  00                 	db	0
  3925  00F579  00                 	db	0
  3926  00F57A  6D                 	db	109
  3927  00F57B  69                 	db	105
  3928  00F57C  6E                 	db	110
  3929  00F57D  6F                 	db	111
  3930  00F57E  72                 	db	114
  3931  00F57F  20                 	db	32
  3932  00F580  74                 	db	116
  3933  00F581  72                 	db	114
  3934  00F582  69                 	db	105
  3935  00F583  61                 	db	97
  3936  00F584  64                 	db	100
  3937  00F585  00                 	db	0
  3938  00F586  00                 	db	0
  3939  00F587  00                 	db	0
  3940  00F588  00                 	db	0
  3941  00F589  00                 	db	0
  3942  00F58A  00                 	db	0
  3943  00F58B  61                 	db	97
  3944  00F58C  75                 	db	117
  3945  00F58D  67                 	db	103
  3946  00F58E  6D                 	db	109
  3947  00F58F  65                 	db	101
  3948  00F590  6E                 	db	110
  3949  00F591  74                 	db	116
  3950  00F592  65                 	db	101
  3951  00F593  64                 	db	100
  3952  00F594  20                 	db	32
  3953  00F595  74                 	db	116
  3954  00F596  72                 	db	114
  3955  00F597  69                 	db	105
  3956  00F598  61                 	db	97
  3957  00F599  64                 	db	100
  3958  00F59A  00                 	db	0
  3959  00F59B  00                 	db	0
  3960  00F59C  64                 	db	100
  3961  00F59D  69                 	db	105
  3962  00F59E  6D                 	db	109
  3963  00F59F  69                 	db	105
  3964  00F5A0  6E                 	db	110
  3965  00F5A1  69                 	db	105
  3966  00F5A2  73                 	db	115
  3967  00F5A3  68                 	db	104
  3968  00F5A4  65                 	db	101
  3969  00F5A5  64                 	db	100
  3970  00F5A6  20                 	db	32
  3971  00F5A7  74                 	db	116
  3972  00F5A8  72                 	db	114
  3973  00F5A9  69                 	db	105
  3974  00F5AA  61                 	db	97
  3975  00F5AB  64                 	db	100
  3976  00F5AC  00                 	db	0
  3977  00F5AD  64                 	db	100
  3978  00F5AE  6F                 	db	111
  3979  00F5AF  6D                 	db	109
  3980  00F5B0  69                 	db	105
  3981  00F5B1  6E                 	db	110
  3982  00F5B2  61                 	db	97
  3983  00F5B3  6E                 	db	110
  3984  00F5B4  74                 	db	116
  3985  00F5B5  20                 	db	32
  3986  00F5B6  37                 	db	55
  3987  00F5B7  74                 	db	116
  3988  00F5B8  68                 	db	104
  3989  00F5B9  00                 	db	0
  3990  00F5BA  00                 	db	0
  3991  00F5BB  00                 	db	0
  3992  00F5BC  00                 	db	0
  3993  00F5BD  00                 	db	0
  3994  00F5BE  6D                 	db	109
  3995  00F5BF  61                 	db	97
  3996  00F5C0  6A                 	db	106
  3997  00F5C1  6F                 	db	111
  3998  00F5C2  72                 	db	114
  3999  00F5C3  20                 	db	32
  4000  00F5C4  37                 	db	55
  4001  00F5C5  74                 	db	116
  4002  00F5C6  68                 	db	104
  4003  00F5C7  00                 	db	0
  4004  00F5C8  00                 	db	0
  4005  00F5C9  00                 	db	0
  4006  00F5CA  00                 	db	0
  4007  00F5CB  00                 	db	0
  4008  00F5CC  00                 	db	0
  4009  00F5CD  00                 	db	0
  4010  00F5CE  00                 	db	0
  4011  00F5CF  6D                 	db	109
  4012  00F5D0  69                 	db	105
  4013  00F5D1  6E                 	db	110
  4014  00F5D2  6F                 	db	111
  4015  00F5D3  72                 	db	114
  4016  00F5D4  20                 	db	32
  4017  00F5D5  37                 	db	55
  4018  00F5D6  74                 	db	116
  4019  00F5D7  68                 	db	104
  4020  00F5D8  00                 	db	0
  4021  00F5D9  00                 	db	0
  4022  00F5DA  00                 	db	0
  4023  00F5DB  00                 	db	0
  4024  00F5DC  00                 	db	0
  4025  00F5DD  00                 	db	0
  4026  00F5DE  00                 	db	0
  4027  00F5DF  00                 	db	0
  4028  00F5E0  68                 	db	104
  4029  00F5E1  61                 	db	97
  4030  00F5E2  6C                 	db	108
  4031  00F5E3  66                 	db	102
  4032  00F5E4  20                 	db	32
  4033  00F5E5  64                 	db	100
  4034  00F5E6  69                 	db	105
  4035  00F5E7  6D                 	db	109
  4036  00F5E8  69                 	db	105
  4037  00F5E9  6E                 	db	110
  4038  00F5EA  69                 	db	105
  4039  00F5EB  73                 	db	115
  4040  00F5EC  68                 	db	104
  4041  00F5ED  65                 	db	101
  4042  00F5EE  64                 	db	100
  4043  00F5EF  00                 	db	0
  4044  00F5F0  00                 	db	0
  4045  00F5F1  64                 	db	100
  4046  00F5F2  69                 	db	105
  4047  00F5F3  6D                 	db	109
  4048  00F5F4  69                 	db	105
  4049  00F5F5  6E                 	db	110
  4050  00F5F6  69                 	db	105
  4051  00F5F7  73                 	db	115
  4052  00F5F8  68                 	db	104
  4053  00F5F9  65                 	db	101
  4054  00F5FA  64                 	db	100
  4055  00F5FB  20                 	db	32
  4056  00F5FC  37                 	db	55
  4057  00F5FD  74                 	db	116
  4058  00F5FE  68                 	db	104
  4059  00F5FF  00                 	db	0
  4060  00F600  00                 	db	0
  4061  00F601  00                 	db	0
  4062  00F602  48                 	db	72
  4063  00F603  41                 	db	65
  4064  00F604  4C                 	db	76
  4065  00F605  46                 	db	70
  4066  00F606  20                 	db	32
  4067  00F607  53                 	db	83
  4068  00F608  54                 	db	84
  4069  00F609  45                 	db	69
  4070  00F60A  50                 	db	80
  4071  00F60B  00                 	db	0
  4072  00F60C  00                 	db	0
  4073  00F60D  00                 	db	0
  4074  00F60E  00                 	db	0
  4075  00F60F  00                 	db	0
  4076  00F610  00                 	db	0
  4077  00F611  00                 	db	0
  4078  00F612  00                 	db	0
  4079  00F613  43                 	db	67
  4080  00F614  49                 	db	73
  4081  00F615  52                 	db	82
  4082  00F616  43                 	db	67
  4083  00F617  4C                 	db	76
  4084  00F618  45                 	db	69
  4085  00F619  20                 	db	32
  4086  00F61A  4F                 	db	79
  4087  00F61B  46                 	db	70
  4088  00F61C  20                 	db	32
  4089  00F61D  46                 	db	70
  4090  00F61E  49                 	db	73
  4091  00F61F  46                 	db	70
  4092  00F620  54                 	db	84
  4093  00F621  48                 	db	72
  4094  00F622  53                 	db	83
  4095  00F623  00                 	db	0
  4096  00F624  44                 	db	68
  4097  00F625  52                 	db	82
  4098  00F626  55                 	db	85
  4099  00F627  4D                 	db	77
  4100  00F628  20                 	db	32
  4101  00F629  49                 	db	73
  4102  00F62A  53                 	db	83
  4103  00F62B  20                 	db	32
  4104  00F62C  4E                 	db	78
  4105  00F62D  4F                 	db	79
  4106  00F62E  54                 	db	84
  4107  00F62F  45                 	db	69
  4108  00F630  20                 	db	32
  4109  00F631  4F                 	db	79
  4110  00F632  4E                 	db	78
  4111  00F633  00                 	db	0
  4112  00F634  00                 	db	0
  4113  00F635  44                 	db	68
  4114  00F636  52                 	db	82
  4115  00F637  55                 	db	85
  4116  00F638  4D                 	db	77
  4117  00F639  20                 	db	32
  4118  00F63A  49                 	db	73
  4119  00F63B  53                 	db	83
  4120  00F63C  20                 	db	32
  4121  00F63D  43                 	db	67
  4122  00F63E  43                 	db	67
  4123  00F63F  00                 	db	0
  4124  00F640  00                 	db	0
  4125  00F641  00                 	db	0
  4126  00F642  00                 	db	0
  4127  00F643  00                 	db	0
  4128  00F644  00                 	db	0
  4129  00F645  00                 	db	0
  4130  00F646  44                 	db	68
  4131  00F647  52                 	db	82
  4132  00F648  55                 	db	85
  4133  00F649  4D                 	db	77
  4134  00F64A  20                 	db	32
  4135  00F64B  43                 	db	67
  4136  00F64C  43                 	db	67
  4137  00F64D  20                 	db	32
  4138  00F64E  54                 	db	84
  4139  00F64F  59                 	db	89
  4140  00F650  50                 	db	80
  4141  00F651  45                 	db	69
  4142  00F652  00                 	db	0
  4143  00F653  00                 	db	0
  4144  00F654  00                 	db	0
  4145  00F655  00                 	db	0
  4146  00F656  00                 	db	0
  4147  00F657  44                 	db	68
  4148  00F658  52                 	db	82
  4149  00F659  55                 	db	85
  4150  00F65A  4D                 	db	77
  4151  00F65B  20                 	db	32
  4152  00F65C  53                 	db	83
  4153  00F65D  45                 	db	69
  4154  00F65E  54                 	db	84
  4155  00F65F  20                 	db	32
  4156  00F660  4E                 	db	78
  4157  00F661  4E                 	db	78
  4158  00F662  23                 	db	35
  4159  00F663  00                 	db	0
  4160  00F664  00                 	db	0
  4161  00F665  00                 	db	0
  4162  00F666  00                 	db	0
  4163  00F667  00                 	db	0
  4164  00F668  44                 	db	68
  4165  00F669  52                 	db	82
  4166  00F66A  55                 	db	85
  4167  00F66B  4D                 	db	77
  4168  00F66C  20                 	db	32
  4169  00F66D  53                 	db	83
  4170  00F66E  45                 	db	69
  4171  00F66F  54                 	db	84
  4172  00F670  20                 	db	32
  4173  00F671  43                 	db	67
  4174  00F672  43                 	db	67
  4175  00F673  23                 	db	35
  4176  00F674  00                 	db	0
  4177  00F675  00                 	db	0
  4178  00F676  00                 	db	0
  4179  00F677  00                 	db	0
  4180  00F678  00                 	db	0
  4181  00F679  44                 	db	68
  4182  00F67A  52                 	db	82
  4183  00F67B  55                 	db	85
  4184  00F67C  4D                 	db	77
  4185  00F67D  20                 	db	32
  4186  00F67E  43                 	db	67
  4187  00F67F  43                 	db	67
  4188  00F680  20                 	db	32
  4189  00F681  54                 	db	84
  4190  00F682  52                 	db	82
  4191  00F683  49                 	db	73
  4192  00F684  47                 	db	71
  4193  00F685  47                 	db	71
  4194  00F686  45                 	db	69
  4195  00F687  52                 	db	82
  4196  00F688  00                 	db	0
  4197  00F689  00                 	db	0
  4198  00F68A  44                 	db	68
  4199  00F68B  52                 	db	82
  4200  00F68C  55                 	db	85
  4201  00F68D  4D                 	db	77
  4202  00F68E  20                 	db	32
  4203  00F68F  43                 	db	67
  4204  00F690  43                 	db	67
  4205  00F691  20                 	db	32
  4206  00F692  54                 	db	84
  4207  00F693  4F                 	db	79
  4208  00F694  47                 	db	71
  4209  00F695  47                 	db	71
  4210  00F696  4C                 	db	76
  4211  00F697  45                 	db	69
  4212  00F698  00                 	db	0
  4213  00F699  00                 	db	0
  4214  00F69A  00                 	db	0
  4215  00F69B  44                 	db	68
  4216  00F69C  52                 	db	82
  4217  00F69D  55                 	db	85
  4218  00F69E  4D                 	db	77
  4219  00F69F  20                 	db	32
  4220  00F6A0  31                 	db	49
  4221  00F6A1  20                 	db	32
  4222  00F6A2  4E                 	db	78
  4223  00F6A3  4E                 	db	78
  4224  00F6A4  3A                 	db	58
  4225  00F6A5  20                 	db	32
  4226  00F6A6  00                 	db	0
  4227  00F6A7  00                 	db	0
  4228  00F6A8  00                 	db	0
  4229  00F6A9  00                 	db	0
  4230  00F6AA  00                 	db	0
  4231  00F6AB  00                 	db	0
  4232  00F6AC  44                 	db	68
  4233  00F6AD  52                 	db	82
  4234  00F6AE  55                 	db	85
  4235  00F6AF  4D                 	db	77
  4236  00F6B0  20                 	db	32
  4237  00F6B1  32                 	db	50
  4238  00F6B2  20                 	db	32
  4239  00F6B3  4E                 	db	78
  4240  00F6B4  4E                 	db	78
  4241  00F6B5  3A                 	db	58
  4242  00F6B6  20                 	db	32
  4243  00F6B7  00                 	db	0
  4244  00F6B8  00                 	db	0
  4245  00F6B9  00                 	db	0
  4246  00F6BA  00                 	db	0
  4247  00F6BB  00                 	db	0
  4248  00F6BC  00                 	db	0
  4249  00F6BD  44                 	db	68
  4250  00F6BE  52                 	db	82
  4251  00F6BF  55                 	db	85
  4252  00F6C0  4D                 	db	77
  4253  00F6C1  20                 	db	32
  4254  00F6C2  33                 	db	51
  4255  00F6C3  20                 	db	32
  4256  00F6C4  4E                 	db	78
  4257  00F6C5  4E                 	db	78
  4258  00F6C6  3A                 	db	58
  4259  00F6C7  20                 	db	32
  4260  00F6C8  00                 	db	0
  4261  00F6C9  00                 	db	0
  4262  00F6CA  00                 	db	0
  4263  00F6CB  00                 	db	0
  4264  00F6CC  00                 	db	0
  4265  00F6CD  00                 	db	0
  4266  00F6CE  44                 	db	68
  4267  00F6CF  52                 	db	82
  4268  00F6D0  55                 	db	85
  4269  00F6D1  4D                 	db	77
  4270  00F6D2  20                 	db	32
  4271  00F6D3  34                 	db	52
  4272  00F6D4  20                 	db	32
  4273  00F6D5  4E                 	db	78
  4274  00F6D6  4E                 	db	78
  4275  00F6D7  3A                 	db	58
  4276  00F6D8  20                 	db	32
  4277  00F6D9  00                 	db	0
  4278  00F6DA  00                 	db	0
  4279  00F6DB  00                 	db	0
  4280  00F6DC  00                 	db	0
  4281  00F6DD  00                 	db	0
  4282  00F6DE  00                 	db	0
  4283  00F6DF  44                 	db	68
  4284  00F6E0  52                 	db	82
  4285  00F6E1  55                 	db	85
  4286  00F6E2  4D                 	db	77
  4287  00F6E3  20                 	db	32
  4288  00F6E4  35                 	db	53
  4289  00F6E5  20                 	db	32
  4290  00F6E6  4E                 	db	78
  4291  00F6E7  4E                 	db	78
  4292  00F6E8  3A                 	db	58
  4293  00F6E9  20                 	db	32
  4294  00F6EA  00                 	db	0
  4295  00F6EB  00                 	db	0
  4296  00F6EC  00                 	db	0
  4297  00F6ED  00                 	db	0
  4298  00F6EE  00                 	db	0
  4299  00F6EF  00                 	db	0
  4300  00F6F0  44                 	db	68
  4301  00F6F1  52                 	db	82
  4302  00F6F2  55                 	db	85
  4303  00F6F3  4D                 	db	77
  4304  00F6F4  20                 	db	32
  4305  00F6F5  36                 	db	54
  4306  00F6F6  20                 	db	32
  4307  00F6F7  4E                 	db	78
  4308  00F6F8  4E                 	db	78
  4309  00F6F9  3A                 	db	58
  4310  00F6FA  20                 	db	32
  4311  00F6FB  00                 	db	0
  4312  00F6FC  00                 	db	0
  4313  00F6FD  00                 	db	0
  4314  00F6FE  00                 	db	0
  4315  00F6FF  00                 	db	0
  4316  00F700  00                 	db	0
  4317  00F701  44                 	db	68
  4318  00F702  52                 	db	82
  4319  00F703  55                 	db	85
  4320  00F704  4D                 	db	77
  4321  00F705  20                 	db	32
  4322  00F706  37                 	db	55
  4323  00F707  20                 	db	32
  4324  00F708  4E                 	db	78
  4325  00F709  4E                 	db	78
  4326  00F70A  3A                 	db	58
  4327  00F70B  20                 	db	32
  4328  00F70C  00                 	db	0
  4329  00F70D  00                 	db	0
  4330  00F70E  00                 	db	0
  4331  00F70F  00                 	db	0
  4332  00F710  00                 	db	0
  4333  00F711  00                 	db	0
  4334  00F712  44                 	db	68
  4335  00F713  52                 	db	82
  4336  00F714  55                 	db	85
  4337  00F715  4D                 	db	77
  4338  00F716  20                 	db	32
  4339  00F717  38                 	db	56
  4340  00F718  20                 	db	32
  4341  00F719  4E                 	db	78
  4342  00F71A  4E                 	db	78
  4343  00F71B  3A                 	db	58
  4344  00F71C  20                 	db	32
  4345  00F71D  00                 	db	0
  4346  00F71E  00                 	db	0
  4347  00F71F  00                 	db	0
  4348  00F720  00                 	db	0
  4349  00F721  00                 	db	0
  4350  00F722  00                 	db	0
  4351  00F723  44                 	db	68
  4352  00F724  52                 	db	82
  4353  00F725  55                 	db	85
  4354  00F726  4D                 	db	77
  4355  00F727  20                 	db	32
  4356  00F728  31                 	db	49
  4357  00F729  20                 	db	32
  4358  00F72A  43                 	db	67
  4359  00F72B  43                 	db	67
  4360  00F72C  3A                 	db	58
  4361  00F72D  20                 	db	32
  4362  00F72E  00                 	db	0
  4363  00F72F  00                 	db	0
  4364  00F730  00                 	db	0
  4365  00F731  00                 	db	0
  4366  00F732  00                 	db	0
  4367  00F733  00                 	db	0
  4368  00F734  44                 	db	68
  4369  00F735  52                 	db	82
  4370  00F736  55                 	db	85
  4371  00F737  4D                 	db	77
  4372  00F738  20                 	db	32
  4373  00F739  32                 	db	50
  4374  00F73A  20                 	db	32
  4375  00F73B  43                 	db	67
  4376  00F73C  43                 	db	67
  4377  00F73D  3A                 	db	58
  4378  00F73E  20                 	db	32
  4379  00F73F  00                 	db	0
  4380  00F740  00                 	db	0
  4381  00F741  00                 	db	0
  4382  00F742  00                 	db	0
  4383  00F743  00                 	db	0
  4384  00F744  00                 	db	0
  4385  00F745  44                 	db	68
  4386  00F746  52                 	db	82
  4387  00F747  55                 	db	85
  4388  00F748  4D                 	db	77
  4389  00F749  20                 	db	32
  4390  00F74A  33                 	db	51
  4391  00F74B  20                 	db	32
  4392  00F74C  43                 	db	67
  4393  00F74D  43                 	db	67
  4394  00F74E  3A                 	db	58
  4395  00F74F  20                 	db	32
  4396  00F750  00                 	db	0
  4397  00F751  00                 	db	0
  4398  00F752  00                 	db	0
  4399  00F753  00                 	db	0
  4400  00F754  00                 	db	0
  4401  00F755  00                 	db	0
  4402  00F756  44                 	db	68
  4403  00F757  52                 	db	82
  4404  00F758  55                 	db	85
  4405  00F759  4D                 	db	77
  4406  00F75A  20                 	db	32
  4407  00F75B  34                 	db	52
  4408  00F75C  20                 	db	32
  4409  00F75D  43                 	db	67
  4410  00F75E  43                 	db	67
  4411  00F75F  3A                 	db	58
  4412  00F760  20                 	db	32
  4413  00F761  00                 	db	0
  4414  00F762  00                 	db	0
  4415  00F763  00                 	db	0
  4416  00F764  00                 	db	0
  4417  00F765  00                 	db	0
  4418  00F766  00                 	db	0
  4419  00F767  44                 	db	68
  4420  00F768  52                 	db	82
  4421  00F769  55                 	db	85
  4422  00F76A  4D                 	db	77
  4423  00F76B  20                 	db	32
  4424  00F76C  35                 	db	53
  4425  00F76D  20                 	db	32
  4426  00F76E  43                 	db	67
  4427  00F76F  43                 	db	67
  4428  00F770  3A                 	db	58
  4429  00F771  20                 	db	32
  4430  00F772  00                 	db	0
  4431  00F773  00                 	db	0
  4432  00F774  00                 	db	0
  4433  00F775  00                 	db	0
  4434  00F776  00                 	db	0
  4435  00F777  00                 	db	0
  4436  00F778  44                 	db	68
  4437  00F779  52                 	db	82
  4438  00F77A  55                 	db	85
  4439  00F77B  4D                 	db	77
  4440  00F77C  20                 	db	32
  4441  00F77D  36                 	db	54
  4442  00F77E  20                 	db	32
  4443  00F77F  43                 	db	67
  4444  00F780  43                 	db	67
  4445  00F781  3A                 	db	58
  4446  00F782  20                 	db	32
  4447  00F783  00                 	db	0
  4448  00F784  00                 	db	0
  4449  00F785  00                 	db	0
  4450  00F786  00                 	db	0
  4451  00F787  00                 	db	0
  4452  00F788  00                 	db	0
  4453  00F789  44                 	db	68
  4454  00F78A  52                 	db	82
  4455  00F78B  55                 	db	85
  4456  00F78C  4D                 	db	77
  4457  00F78D  20                 	db	32
  4458  00F78E  37                 	db	55
  4459  00F78F  20                 	db	32
  4460  00F790  43                 	db	67
  4461  00F791  43                 	db	67
  4462  00F792  3A                 	db	58
  4463  00F793  20                 	db	32
  4464  00F794  00                 	db	0
  4465  00F795  00                 	db	0
  4466  00F796  00                 	db	0
  4467  00F797  00                 	db	0
  4468  00F798  00                 	db	0
  4469  00F799  00                 	db	0
  4470  00F79A  44                 	db	68
  4471  00F79B  52                 	db	82
  4472  00F79C  55                 	db	85
  4473  00F79D  4D                 	db	77
  4474  00F79E  20                 	db	32
  4475  00F79F  38                 	db	56
  4476  00F7A0  20                 	db	32
  4477  00F7A1  43                 	db	67
  4478  00F7A2  43                 	db	67
  4479  00F7A3  3A                 	db	58
  4480  00F7A4  20                 	db	32
  4481  00F7A5  00                 	db	0
  4482  00F7A6  00                 	db	0
  4483  00F7A7  00                 	db	0
  4484  00F7A8  00                 	db	0
  4485  00F7A9  00                 	db	0
  4486  00F7AA  00                 	db	0
  4487  00F7AB  50                 	db	80
  4488  00F7AC  4F                 	db	79
  4489  00F7AD  54                 	db	84
  4490  00F7AE  53                 	db	83
  4491  00F7AF  20                 	db	32
  4492  00F7B0  52                 	db	82
  4493  00F7B1  45                 	db	69
  4494  00F7B2  53                 	db	83
  4495  00F7B3  4F                 	db	79
  4496  00F7B4  4C                 	db	76
  4497  00F7B5  55                 	db	85
  4498  00F7B6  54                 	db	84
  4499  00F7B7  49                 	db	73
  4500  00F7B8  4F                 	db	79
  4501  00F7B9  4E                 	db	78
  4502  00F7BA  00                 	db	0
  4503  00F7BB  00                 	db	0
  4504  00F7BC  50                 	db	80
  4505  00F7BD  4F                 	db	79
  4506  00F7BE  54                 	db	84
  4507  00F7BF  53                 	db	83
  4508  00F7C0  20                 	db	32
  4509  00F7C1  41                 	db	65
  4510  00F7C2  4C                 	db	76
  4511  00F7C3  50                 	db	80
  4512  00F7C4  48                 	db	72
  4513  00F7C5  41                 	db	65
  4514  00F7C6  00                 	db	0
  4515  00F7C7  00                 	db	0
  4516  00F7C8  00                 	db	0
  4517  00F7C9  00                 	db	0
  4518  00F7CA  00                 	db	0
  4519  00F7CB  00                 	db	0
  4520  00F7CC  00                 	db	0
  4521  00F7CD  50                 	db	80
  4522  00F7CE  4F                 	db	79
  4523  00F7CF  54                 	db	84
  4524  00F7D0  53                 	db	83
  4525  00F7D1  20                 	db	32
  4526  00F7D2  53                 	db	83
  4527  00F7D3  45                 	db	69
  4528  00F7D4  54                 	db	84
  4529  00F7D5  20                 	db	32
  4530  00F7D6  43                 	db	67
  4531  00F7D7  43                 	db	67
  4532  00F7D8  23                 	db	35
  4533  00F7D9  00                 	db	0
  4534  00F7DA  00                 	db	0
  4535  00F7DB  00                 	db	0
  4536  00F7DC  00                 	db	0
  4537  00F7DD  00                 	db	0
  4538  00F7DE  53                 	db	83
  4539  00F7DF  4C                 	db	76
  4540  00F7E0  49                 	db	73
  4541  00F7E1  44                 	db	68
  4542  00F7E2  45                 	db	69
  4543  00F7E3  50                 	db	80
  4544  00F7E4  4F                 	db	79
  4545  00F7E5  54                 	db	84
  4546  00F7E6  20                 	db	32
  4547  00F7E7  53                 	db	83
  4548  00F7E8  45                 	db	69
  4549  00F7E9  54                 	db	84
  4550  00F7EA  20                 	db	32
  4551  00F7EB  43                 	db	67
  4552  00F7EC  43                 	db	67
  4553  00F7ED  23                 	db	35
  4554  00F7EE  00                 	db	0
  4555  00F7EF  4A                 	db	74
  4556  00F7F0  4F                 	db	79
  4557  00F7F1  59                 	db	89
  4558  00F7F2  53                 	db	83
  4559  00F7F3  54                 	db	84
  4560  00F7F4  49                 	db	73
  4561  00F7F5  43                 	db	67
  4562  00F7F6  4B                 	db	75
  4563  00F7F7  20                 	db	32
  4564  00F7F8  53                 	db	83
  4565  00F7F9  45                 	db	69
  4566  00F7FA  54                 	db	84
  4567  00F7FB  20                 	db	32
  4568  00F7FC  43                 	db	67
  4569  00F7FD  43                 	db	67
  4570  00F7FE  23                 	db	35
  4571  00F7FF  00                 	db	0
  4572  00F800  50                 	db	80
  4573  00F801  4F                 	db	79
  4574  00F802  54                 	db	84
  4575  00F803  53                 	db	83
  4576  00F804  20                 	db	32
  4577  00F805  4C                 	db	76
  4578  00F806  4F                 	db	79
  4579  00F807  20                 	db	32
  4580  00F808  52                 	db	82
  4581  00F809  45                 	db	69
  4582  00F80A  53                 	db	83
  4583  00F80B  00                 	db	0
  4584  00F80C  00                 	db	0
  4585  00F80D  00                 	db	0
  4586  00F80E  00                 	db	0
  4587  00F80F  00                 	db	0
  4588  00F810  00                 	db	0
  4589  00F811  50                 	db	80
  4590  00F812  4F                 	db	79
  4591  00F813  54                 	db	84
  4592  00F814  53                 	db	83
  4593  00F815  20                 	db	32
  4594  00F816  48                 	db	72
  4595  00F817  49                 	db	73
  4596  00F818  20                 	db	32
  4597  00F819  52                 	db	82
  4598  00F81A  45                 	db	69
  4599  00F81B  53                 	db	83
  4600  00F81C  00                 	db	0
  4601  00F81D  00                 	db	0
  4602  00F81E  00                 	db	0
  4603  00F81F  00                 	db	0
  4604  00F820  00                 	db	0
  4605  00F821  00                 	db	0
  4606  00F822  50                 	db	80
  4607  00F823  31                 	db	49
  4608  00F824  20                 	db	32
  4609  00F825  43                 	db	67
  4610  00F826  43                 	db	67
  4611  00F827  3A                 	db	58
  4612  00F828  00                 	db	0
  4613  00F829  00                 	db	0
  4614  00F82A  00                 	db	0
  4615  00F82B  00                 	db	0
  4616  00F82C  00                 	db	0
  4617  00F82D  00                 	db	0
  4618  00F82E  00                 	db	0
  4619  00F82F  00                 	db	0
  4620  00F830  00                 	db	0
  4621  00F831  00                 	db	0
  4622  00F832  00                 	db	0
  4623  00F833  50                 	db	80
  4624  00F834  32                 	db	50
  4625  00F835  20                 	db	32
  4626  00F836  43                 	db	67
  4627  00F837  43                 	db	67
  4628  00F838  3A                 	db	58
  4629  00F839  00                 	db	0
  4630  00F83A  00                 	db	0
  4631  00F83B  00                 	db	0
  4632  00F83C  00                 	db	0
  4633  00F83D  00                 	db	0
  4634  00F83E  00                 	db	0
  4635  00F83F  00                 	db	0
  4636  00F840  00                 	db	0
  4637  00F841  00                 	db	0
  4638  00F842  00                 	db	0
  4639  00F843  00                 	db	0
  4640  00F844  50                 	db	80
  4641  00F845  33                 	db	51
  4642  00F846  20                 	db	32
  4643  00F847  43                 	db	67
  4644  00F848  43                 	db	67
  4645  00F849  3A                 	db	58
  4646  00F84A  00                 	db	0
  4647  00F84B  00                 	db	0
  4648  00F84C  00                 	db	0
  4649  00F84D  00                 	db	0
  4650  00F84E  00                 	db	0
  4651  00F84F  00                 	db	0
  4652  00F850  00                 	db	0
  4653  00F851  00                 	db	0
  4654  00F852  00                 	db	0
  4655  00F853  00                 	db	0
  4656  00F854  00                 	db	0
  4657  00F855  50                 	db	80
  4658  00F856  34                 	db	52
  4659  00F857  20                 	db	32
  4660  00F858  43                 	db	67
  4661  00F859  43                 	db	67
  4662  00F85A  3A                 	db	58
  4663  00F85B  00                 	db	0
  4664  00F85C  00                 	db	0
  4665  00F85D  00                 	db	0
  4666  00F85E  00                 	db	0
  4667  00F85F  00                 	db	0
  4668  00F860  00                 	db	0
  4669  00F861  00                 	db	0
  4670  00F862  00                 	db	0
  4671  00F863  00                 	db	0
  4672  00F864  00                 	db	0
  4673  00F865  00                 	db	0
  4674  00F866  50                 	db	80
  4675  00F867  35                 	db	53
  4676  00F868  20                 	db	32
  4677  00F869  43                 	db	67
  4678  00F86A  43                 	db	67
  4679  00F86B  3A                 	db	58
  4680  00F86C  00                 	db	0
  4681  00F86D  00                 	db	0
  4682  00F86E  00                 	db	0
  4683  00F86F  00                 	db	0
  4684  00F870  00                 	db	0
  4685  00F871  00                 	db	0
  4686  00F872  00                 	db	0
  4687  00F873  00                 	db	0
  4688  00F874  00                 	db	0
  4689  00F875  00                 	db	0
  4690  00F876  00                 	db	0
  4691  00F877  50                 	db	80
  4692  00F878  36                 	db	54
  4693  00F879  20                 	db	32
  4694  00F87A  43                 	db	67
  4695  00F87B  43                 	db	67
  4696  00F87C  3A                 	db	58
  4697  00F87D  00                 	db	0
  4698  00F87E  00                 	db	0
  4699  00F87F  00                 	db	0
  4700  00F880  00                 	db	0
  4701  00F881  00                 	db	0
  4702  00F882  00                 	db	0
  4703  00F883  00                 	db	0
  4704  00F884  00                 	db	0
  4705  00F885  00                 	db	0
  4706  00F886  00                 	db	0
  4707  00F887  00                 	db	0
  4708  00F888  50                 	db	80
  4709  00F889  37                 	db	55
  4710  00F88A  20                 	db	32
  4711  00F88B  43                 	db	67
  4712  00F88C  43                 	db	67
  4713  00F88D  3A                 	db	58
  4714  00F88E  00                 	db	0
  4715  00F88F  00                 	db	0
  4716  00F890  00                 	db	0
  4717  00F891  00                 	db	0
  4718  00F892  00                 	db	0
  4719  00F893  00                 	db	0
  4720  00F894  00                 	db	0
  4721  00F895  00                 	db	0
  4722  00F896  00                 	db	0
  4723  00F897  00                 	db	0
  4724  00F898  00                 	db	0
  4725  00F899  53                 	db	83
  4726  00F89A  31                 	db	49
  4727  00F89B  20                 	db	32
  4728  00F89C  43                 	db	67
  4729  00F89D  43                 	db	67
  4730  00F89E  3A                 	db	58
  4731  00F89F  20                 	db	32
  4732  00F8A0  00                 	db	0
  4733  00F8A1  00                 	db	0
  4734  00F8A2  00                 	db	0
  4735  00F8A3  00                 	db	0
  4736  00F8A4  00                 	db	0
  4737  00F8A5  00                 	db	0
  4738  00F8A6  00                 	db	0
  4739  00F8A7  00                 	db	0
  4740  00F8A8  00                 	db	0
  4741  00F8A9  00                 	db	0
  4742  00F8AA  53                 	db	83
  4743  00F8AB  32                 	db	50
  4744  00F8AC  20                 	db	32
  4745  00F8AD  43                 	db	67
  4746  00F8AE  43                 	db	67
  4747  00F8AF  3A                 	db	58
  4748  00F8B0  20                 	db	32
  4749  00F8B1  00                 	db	0
  4750  00F8B2  00                 	db	0
  4751  00F8B3  00                 	db	0
  4752  00F8B4  00                 	db	0
  4753  00F8B5  00                 	db	0
  4754  00F8B6  00                 	db	0
  4755  00F8B7  00                 	db	0
  4756  00F8B8  00                 	db	0
  4757  00F8B9  00                 	db	0
  4758  00F8BA  00                 	db	0
  4759  00F8BB  53                 	db	83
  4760  00F8BC  33                 	db	51
  4761  00F8BD  20                 	db	32
  4762  00F8BE  43                 	db	67
  4763  00F8BF  43                 	db	67
  4764  00F8C0  3A                 	db	58
  4765  00F8C1  20                 	db	32
  4766  00F8C2  00                 	db	0
  4767  00F8C3  00                 	db	0
  4768  00F8C4  00                 	db	0
  4769  00F8C5  00                 	db	0
  4770  00F8C6  00                 	db	0
  4771  00F8C7  00                 	db	0
  4772  00F8C8  00                 	db	0
  4773  00F8C9  00                 	db	0
  4774  00F8CA  00                 	db	0
  4775  00F8CB  00                 	db	0
  4776  00F8CC  53                 	db	83
  4777  00F8CD  34                 	db	52
  4778  00F8CE  20                 	db	32
  4779  00F8CF  43                 	db	67
  4780  00F8D0  43                 	db	67
  4781  00F8D1  3A                 	db	58
  4782  00F8D2  20                 	db	32
  4783  00F8D3  00                 	db	0
  4784  00F8D4  00                 	db	0
  4785  00F8D5  00                 	db	0
  4786  00F8D6  00                 	db	0
  4787  00F8D7  00                 	db	0
  4788  00F8D8  00                 	db	0
  4789  00F8D9  00                 	db	0
  4790  00F8DA  00                 	db	0
  4791  00F8DB  00                 	db	0
  4792  00F8DC  00                 	db	0
  4793  00F8DD  53                 	db	83
  4794  00F8DE  35                 	db	53
  4795  00F8DF  20                 	db	32
  4796  00F8E0  43                 	db	67
  4797  00F8E1  43                 	db	67
  4798  00F8E2  3A                 	db	58
  4799  00F8E3  20                 	db	32
  4800  00F8E4  00                 	db	0
  4801  00F8E5  00                 	db	0
  4802  00F8E6  00                 	db	0
  4803  00F8E7  00                 	db	0
  4804  00F8E8  00                 	db	0
  4805  00F8E9  00                 	db	0
  4806  00F8EA  00                 	db	0
  4807  00F8EB  00                 	db	0
  4808  00F8EC  00                 	db	0
  4809  00F8ED  00                 	db	0
  4810  00F8EE  53                 	db	83
  4811  00F8EF  36                 	db	54
  4812  00F8F0  20                 	db	32
  4813  00F8F1  43                 	db	67
  4814  00F8F2  43                 	db	67
  4815  00F8F3  3A                 	db	58
  4816  00F8F4  20                 	db	32
  4817  00F8F5  00                 	db	0
  4818  00F8F6  00                 	db	0
  4819  00F8F7  00                 	db	0
  4820  00F8F8  00                 	db	0
  4821  00F8F9  00                 	db	0
  4822  00F8FA  00                 	db	0
  4823  00F8FB  00                 	db	0
  4824  00F8FC  00                 	db	0
  4825  00F8FD  00                 	db	0
  4826  00F8FE  00                 	db	0
  4827  00F8FF  53                 	db	83
  4828  00F900  37                 	db	55
  4829  00F901  20                 	db	32
  4830  00F902  43                 	db	67
  4831  00F903  43                 	db	67
  4832  00F904  3A                 	db	58
  4833  00F905  20                 	db	32
  4834  00F906  00                 	db	0
  4835  00F907  00                 	db	0
  4836  00F908  00                 	db	0
  4837  00F909  00                 	db	0
  4838  00F90A  00                 	db	0
  4839  00F90B  00                 	db	0
  4840  00F90C  00                 	db	0
  4841  00F90D  00                 	db	0
  4842  00F90E  00                 	db	0
  4843  00F90F  00                 	db	0
  4844  00F910  4A                 	db	74
  4845  00F911  58                 	db	88
  4846  00F912  20                 	db	32
  4847  00F913  43                 	db	67
  4848  00F914  43                 	db	67
  4849  00F915  3A                 	db	58
  4850  00F916  20                 	db	32
  4851  00F917  00                 	db	0
  4852  00F918  00                 	db	0
  4853  00F919  00                 	db	0
  4854  00F91A  00                 	db	0
  4855  00F91B  00                 	db	0
  4856  00F91C  00                 	db	0
  4857  00F91D  00                 	db	0
  4858  00F91E  00                 	db	0
  4859  00F91F  00                 	db	0
  4860  00F920  00                 	db	0
  4861  00F921  4A                 	db	74
  4862  00F922  59                 	db	89
  4863  00F923  20                 	db	32
  4864  00F924  43                 	db	67
  4865  00F925  43                 	db	67
  4866  00F926  3A                 	db	58
  4867  00F927  20                 	db	32
  4868  00F928  00                 	db	0
  4869  00F929  00                 	db	0
  4870  00F92A  00                 	db	0
  4871  00F92B  00                 	db	0
  4872  00F92C  00                 	db	0
  4873  00F92D  00                 	db	0
  4874  00F92E  00                 	db	0
  4875  00F92F  00                 	db	0
  4876  00F930  00                 	db	0
  4877  00F931  00                 	db	0
  4878  00F932  4D                 	db	77
  4879  00F933  61                 	db	97
  4880  00F934  69                 	db	105
  4881  00F935  6E                 	db	110
  4882  00F936  20                 	db	32
  4883  00F937  63                 	db	99
  4884  00F938  68                 	db	104
  4885  00F939  61                 	db	97
  4886  00F93A  6E                 	db	110
  4887  00F93B  6E                 	db	110
  4888  00F93C  65                 	db	101
  4889  00F93D  6C                 	db	108
  4890  00F93E  00                 	db	0
  4891  00F93F  00                 	db	0
  4892  00F940  00                 	db	0
  4893  00F941  00                 	db	0
  4894  00F942  00                 	db	0
  4895  00F943  44                 	db	68
  4896  00F944  72                 	db	114
  4897  00F945  75                 	db	117
  4898  00F946  6D                 	db	109
  4899  00F947  20                 	db	32
  4900  00F948  63                 	db	99
  4901  00F949  68                 	db	104
  4902  00F94A  61                 	db	97
  4903  00F94B  6E                 	db	110
  4904  00F94C  6E                 	db	110
  4905  00F94D  65                 	db	101
  4906  00F94E  6C                 	db	108
  4907  00F94F  00                 	db	0
  4908  00F950  00                 	db	0
  4909  00F951  00                 	db	0
  4910  00F952  00                 	db	0
  4911  00F953  00                 	db	0
  4912  00F954  53                 	db	83
  4913  00F955  61                 	db	97
  4914  00F956  76                 	db	118
  4915  00F957  65                 	db	101
  4916  00F958  20                 	db	32
  4917  00F959  73                 	db	115
  4918  00F95A  65                 	db	101
  4919  00F95B  74                 	db	116
  4920  00F95C  74                 	db	116
  4921  00F95D  69                 	db	105
  4922  00F95E  6E                 	db	110
  4923  00F95F  67                 	db	103
  4924  00F960  73                 	db	115
  4925  00F961  00                 	db	0
  4926  00F962  00                 	db	0
  4927  00F963  00                 	db	0
  4928  00F964  00                 	db	0
  4929  00F965  4C                 	db	76
  4930  00F966  6F                 	db	111
  4931  00F967  61                 	db	97
  4932  00F968  64                 	db	100
  4933  00F969  20                 	db	32
  4934  00F96A  73                 	db	115
  4935  00F96B  65                 	db	101
  4936  00F96C  74                 	db	116
  4937  00F96D  74                 	db	116
  4938  00F96E  69                 	db	105
  4939  00F96F  6E                 	db	110
  4940  00F970  67                 	db	103
  4941  00F971  73                 	db	115
  4942  00F972  00                 	db	0
  4943  00F973  00                 	db	0
  4944  00F974  00                 	db	0
  4945  00F975  00                 	db	0
  4946  00F976  52                 	db	82
  4947  00F977  65                 	db	101
  4948  00F978  73                 	db	115
  4949  00F979  74                 	db	116
  4950  00F97A  6F                 	db	111
  4951  00F97B  72                 	db	114
  4952  00F97C  65                 	db	101
  4953  00F97D  20                 	db	32
  4954  00F97E  64                 	db	100
  4955  00F97F  65                 	db	101
  4956  00F980  66                 	db	102
  4957  00F981  61                 	db	97
  4958  00F982  75                 	db	117
  4959  00F983  6C                 	db	108
  4960  00F984  74                 	db	116
  4961  00F985  73                 	db	115
  4962  00F986  00                 	db	0
  4963  00F987  45                 	db	69
  4964  00F988  6E                 	db	110
  4965  00F989  63                 	db	99
  4966  00F98A  6F                 	db	111
  4967  00F98B  64                 	db	100
  4968  00F98C  65                 	db	101
  4969  00F98D  72                 	db	114
  4970  00F98E  20                 	db	32
  4971  00F98F  50                 	db	80
  4972  00F990  6F                 	db	111
  4973  00F991  6C                 	db	108
  4974  00F992  61                 	db	97
  4975  00F993  72                 	db	114
  4976  00F994  69                 	db	105
  4977  00F995  74                 	db	116
  4978  00F996  79                 	db	121
  4979  00F997  00                 	db	0
  4980  00F998  45                 	db	69
  4981  00F999  78                 	db	120
  4982  00F99A  69                 	db	105
  4983  00F99B  74                 	db	116
  4984  00F99C  00                 	db	0
  4985  00F99D  00                 	db	0
  4986  00F99E  00                 	db	0
  4987  00F99F  00                 	db	0
  4988  00F9A0  00                 	db	0
  4989  00F9A1  00                 	db	0
  4990  00F9A2  00                 	db	0
  4991  00F9A3  00                 	db	0
  4992  00F9A4  00                 	db	0
  4993  00F9A5  00                 	db	0
  4994  00F9A6  00                 	db	0
  4995  00F9A7  00                 	db	0
  4996  00F9A8  00                 	db	0
  4997  00F9A9  53                 	db	83
  4998  00F9AA  6C                 	db	108
  4999  00F9AB  6F                 	db	111
  5000  00F9AC  74                 	db	116
  5001  00F9AD  20                 	db	32
  5002  00F9AE  31                 	db	49
  5003  00F9AF  00                 	db	0
  5004  00F9B0  00                 	db	0
  5005  00F9B1  00                 	db	0
  5006  00F9B2  00                 	db	0
  5007  00F9B3  00                 	db	0
  5008  00F9B4  00                 	db	0
  5009  00F9B5  00                 	db	0
  5010  00F9B6  00                 	db	0
  5011  00F9B7  00                 	db	0
  5012  00F9B8  00                 	db	0
  5013  00F9B9  00                 	db	0
  5014  00F9BA  53                 	db	83
  5015  00F9BB  6C                 	db	108
  5016  00F9BC  6F                 	db	111
  5017  00F9BD  74                 	db	116
  5018  00F9BE  20                 	db	32
  5019  00F9BF  32                 	db	50
  5020  00F9C0  00                 	db	0
  5021  00F9C1  00                 	db	0
  5022  00F9C2  00                 	db	0
  5023  00F9C3  00                 	db	0
  5024  00F9C4  00                 	db	0
  5025  00F9C5  00                 	db	0
  5026  00F9C6  00                 	db	0
  5027  00F9C7  00                 	db	0
  5028  00F9C8  00                 	db	0
  5029  00F9C9  00                 	db	0
  5030  00F9CA  00                 	db	0
  5031  00F9CB  53                 	db	83
  5032  00F9CC  6C                 	db	108
  5033  00F9CD  6F                 	db	111
  5034  00F9CE  74                 	db	116
  5035  00F9CF  20                 	db	32
  5036  00F9D0  33                 	db	51
  5037  00F9D1  00                 	db	0
  5038  00F9D2  00                 	db	0
  5039  00F9D3  00                 	db	0
  5040  00F9D4  00                 	db	0
  5041  00F9D5  00                 	db	0
  5042  00F9D6  00                 	db	0
  5043  00F9D7  00                 	db	0
  5044  00F9D8  00                 	db	0
  5045  00F9D9  00                 	db	0
  5046  00F9DA  00                 	db	0
  5047  00F9DB  00                 	db	0
  5048  00F9DC  53                 	db	83
  5049  00F9DD  6C                 	db	108
  5050  00F9DE  6F                 	db	111
  5051  00F9DF  74                 	db	116
  5052  00F9E0  20                 	db	32
  5053  00F9E1  34                 	db	52
  5054  00F9E2  00                 	db	0
  5055  00F9E3  00                 	db	0
  5056  00F9E4  00                 	db	0
  5057  00F9E5  00                 	db	0
  5058  00F9E6  00                 	db	0
  5059  00F9E7  00                 	db	0
  5060  00F9E8  00                 	db	0
  5061  00F9E9  00                 	db	0
  5062  00F9EA  00                 	db	0
  5063  00F9EB  00                 	db	0
  5064  00F9EC  00                 	db	0
  5065  00F9ED  45                 	db	69
  5066  00F9EE  78                 	db	120
  5067  00F9EF  69                 	db	105
  5068  00F9F0  74                 	db	116
  5069  00F9F1  00                 	db	0
  5070  00F9F2  00                 	db	0
  5071  00F9F3  00                 	db	0
  5072  00F9F4  00                 	db	0
  5073  00F9F5  00                 	db	0
  5074  00F9F6  00                 	db	0
  5075  00F9F7  00                 	db	0
  5076  00F9F8  00                 	db	0
  5077  00F9F9  00                 	db	0
  5078  00F9FA  00                 	db	0
  5079  00F9FB  00                 	db	0
  5080  00F9FC  00                 	db	0
  5081  00F9FD  00                 	db	0
  5082  00F9FE  43                 	db	67
  5083  00F9FF  57                 	db	87
  5084  00FA00  20                 	db	32
  5085  00FA01  49                 	db	73
  5086  00FA02  53                 	db	83
  5087  00FA03  20                 	db	32
  5088  00FA04  49                 	db	73
  5089  00FA05  4E                 	db	78
  5090  00FA06  43                 	db	67
  5091  00FA07  52                 	db	82
  5092  00FA08  45                 	db	69
  5093  00FA09  41                 	db	65
  5094  00FA0A  53                 	db	83
  5095  00FA0B  45                 	db	69
  5096  00FA0C  00                 	db	0
  5097  00FA0D  00                 	db	0
  5098  00FA0E  00                 	db	0
  5099  00FA0F  43                 	db	67
  5100  00FA10  43                 	db	67
  5101  00FA11  57                 	db	87
  5102  00FA12  20                 	db	32
  5103  00FA13  49                 	db	73
  5104  00FA14  53                 	db	83
  5105  00FA15  20                 	db	32
  5106  00FA16  49                 	db	73
  5107  00FA17  4E                 	db	78
  5108  00FA18  43                 	db	67
  5109  00FA19  52                 	db	82
  5110  00FA1A  45                 	db	69
  5111  00FA1B  41                 	db	65
  5112  00FA1C  53                 	db	83
  5113  00FA1D  45                 	db	69
  5114  00FA1E  00                 	db	0
  5115  00FA1F  00                 	db	0
  5116  00FA20  41                 	db	65
  5117  00FA21  72                 	db	114
  5118  00FA22  70                 	db	112
  5119  00FA23  65                 	db	101
  5120  00FA24  67                 	db	103
  5121  00FA25  67                 	db	103
  5122  00FA26  69                 	db	105
  5123  00FA27  6F                 	db	111
  5124  00FA28  20                 	db	32
  5125  00FA29  4F                 	db	79
  5126  00FA2A  46                 	db	70
  5127  00FA2B  46                 	db	70
  5128  00FA2C  2F                 	db	47
  5129  00FA2D  4F                 	db	79
  5130  00FA2E  4E                 	db	78
  5131  00FA2F  00                 	db	0
  5132  00FA30  00                 	db	0
  5133  00FA31  54                 	db	84
  5134  00FA32  65                 	db	101
  5135  00FA33  6D                 	db	109
  5136  00FA34  70                 	db	112
  5137  00FA35  6F                 	db	111
  5138  00FA36  00                 	db	0
  5139  00FA37  00                 	db	0
  5140  00FA38  00                 	db	0
  5141  00FA39  00                 	db	0
  5142  00FA3A  00                 	db	0
  5143  00FA3B  00                 	db	0
  5144  00FA3C  00                 	db	0
  5145  00FA3D  00                 	db	0
  5146  00FA3E  00                 	db	0
  5147  00FA3F  00                 	db	0
  5148  00FA40  00                 	db	0
  5149  00FA41  00                 	db	0
  5150  00FA42  4F                 	db	79
  5151  00FA43  63                 	db	99
  5152  00FA44  74                 	db	116
  5153  00FA45  61                 	db	97
  5154  00FA46  76                 	db	118
  5155  00FA47  65                 	db	101
  5156  00FA48  20                 	db	32
  5157  00FA49  52                 	db	82
  5158  00FA4A  61                 	db	97
  5159  00FA4B  6E                 	db	110
  5160  00FA4C  67                 	db	103
  5161  00FA4D  65                 	db	101
  5162  00FA4E  00                 	db	0
  5163  00FA4F  00                 	db	0
  5164  00FA50  00                 	db	0
  5165  00FA51  00                 	db	0
  5166  00FA52  00                 	db	0
  5167  00FA53  41                 	db	65
  5168  00FA54  72                 	db	114
  5169  00FA55  70                 	db	112
  5170  00FA56  65                 	db	101
  5171  00FA57  67                 	db	103
  5172  00FA58  67                 	db	103
  5173  00FA59  69                 	db	105
  5174  00FA5A  6F                 	db	111
  5175  00FA5B  20                 	db	32
  5176  00FA5C  54                 	db	84
  5177  00FA5D  79                 	db	121
  5178  00FA5E  70                 	db	112
  5179  00FA5F  65                 	db	101
  5180  00FA60  00                 	db	0
  5181  00FA61  00                 	db	0
  5182  00FA62  00                 	db	0
  5183  00FA63  00                 	db	0
  5184  00FA64  4E                 	db	78
  5185  00FA65  6F                 	db	111
  5186  00FA66  74                 	db	116
  5187  00FA67  65                 	db	101
  5188  00FA68  20                 	db	32
  5189  00FA69  4C                 	db	76
  5190  00FA6A  65                 	db	101
  5191  00FA6B  6E                 	db	110
  5192  00FA6C  67                 	db	103
  5193  00FA6D  74                 	db	116
  5194  00FA6E  68                 	db	104
  5195  00FA6F  00                 	db	0
  5196  00FA70  00                 	db	0
  5197  00FA71  00                 	db	0
  5198  00FA72  00                 	db	0
  5199  00FA73  00                 	db	0
  5200  00FA74  00                 	db	0
  5201  00FA75  4C                 	db	76
  5202  00FA76  61                 	db	97
  5203  00FA77  74                 	db	116
  5204  00FA78  63                 	db	99
  5205  00FA79  68                 	db	104
  5206  00FA7A  2F                 	db	47
  5207  00FA7B  41                 	db	65
  5208  00FA7C  75                 	db	117
  5209  00FA7D  74                 	db	116
  5210  00FA7E  6F                 	db	111
  5211  00FA7F  20                 	db	32
  5212  00FA80  4C                 	db	76
  5213  00FA81  61                 	db	97
  5214  00FA82  74                 	db	116
  5215  00FA83  63                 	db	99
  5216  00FA84  68                 	db	104
  5217  00FA85  00                 	db	0
  5218  00FA86  55                 	db	85
  5219  00FA87  6E                 	db	110
  5220  00FA88  2D                 	db	45
  5221  00FA89  6C                 	db	108
  5222  00FA8A  61                 	db	97
  5223  00FA8B  74                 	db	116
  5224  00FA8C  63                 	db	99
  5225  00FA8D  68                 	db	104
  5226  00FA8E  20                 	db	32
  5227  00FA8F  4D                 	db	77
  5228  00FA90  6F                 	db	111
  5229  00FA91  64                 	db	100
  5230  00FA92  65                 	db	101
  5231  00FA93  00                 	db	0
  5232  00FA94  00                 	db	0
  5233  00FA95  00                 	db	0
  5234  00FA96  00                 	db	0
  5235  00FA97  52                 	db	82
  5236  00FA98  61                 	db	97
  5237  00FA99  6E                 	db	110
  5238  00FA9A  64                 	db	100
  5239  00FA9B  6F                 	db	111
  5240  00FA9C  6D                 	db	109
  5241  00FA9D  69                 	db	105
  5242  00FA9E  7A                 	db	122
  5243  00FA9F  65                 	db	101
  5244  00FAA0  2F                 	db	47
  5245  00FAA1  53                 	db	83
  5246  00FAA2  6B                 	db	107
  5247  00FAA3  69                 	db	105
  5248  00FAA4  70                 	db	112
  5249  00FAA5  00                 	db	0
  5250  00FAA6  00                 	db	0
  5251  00FAA7  00                 	db	0
  5252  00FAA8  4C                 	db	76
  5253  00FAA9  61                 	db	97
  5254  00FAAA  73                 	db	115
  5255  00FAAB  74                 	db	116
  5256  00FAAC  20                 	db	32
  5257  00FAAD  4E                 	db	78
  5258  00FAAE  6F                 	db	111
  5259  00FAAF  74                 	db	116
  5260  00FAB0  65                 	db	101
  5261  00FAB1  20                 	db	32
  5262  00FAB2  4D                 	db	77
  5263  00FAB3  6F                 	db	111
  5264  00FAB4  64                 	db	100
  5265  00FAB5  65                 	db	101
  5266  00FAB6  00                 	db	0
  5267  00FAB7  00                 	db	0
  5268  00FAB8  00                 	db	0
  5269  00FAB9  41                 	db	65
  5270  00FABA  52                 	db	82
  5271  00FABB  50                 	db	80
  5272  00FABC  45                 	db	69
  5273  00FABD  47                 	db	71
  5274  00FABE  47                 	db	71
  5275  00FABF  49                 	db	73
  5276  00FAC0  41                 	db	65
  5277  00FAC1  54                 	db	84
  5278  00FAC2  4F                 	db	79
  5279  00FAC3  52                 	db	82
  5280  00FAC4  20                 	db	32
  5281  00FAC5  4F                 	db	79
  5282  00FAC6  46                 	db	70
  5283  00FAC7  46                 	db	70
  5284  00FAC8  00                 	db	0
  5285  00FAC9  00                 	db	0
  5286  00FACA  41                 	db	65
  5287  00FACB  52                 	db	82
  5288  00FACC  50                 	db	80
  5289  00FACD  45                 	db	69
  5290  00FACE  47                 	db	71
  5291  00FACF  47                 	db	71
  5292  00FAD0  49                 	db	73
  5293  00FAD1  41                 	db	65
  5294  00FAD2  54                 	db	84
  5295  00FAD3  4F                 	db	79
  5296  00FAD4  52                 	db	82
  5297  00FAD5  20                 	db	32
  5298  00FAD6  4F                 	db	79
  5299  00FAD7  4E                 	db	78
  5300  00FAD8  00                 	db	0
  5301  00FAD9  00                 	db	0
  5302  00FADA  00                 	db	0
  5303  00FADB  55                 	db	85
  5304  00FADC  50                 	db	80
  5305  00FADD  00                 	db	0
  5306  00FADE  00                 	db	0
  5307  00FADF  00                 	db	0
  5308  00FAE0  00                 	db	0
  5309  00FAE1  00                 	db	0
  5310  00FAE2  00                 	db	0
  5311  00FAE3  00                 	db	0
  5312  00FAE4  00                 	db	0
  5313  00FAE5  00                 	db	0
  5314  00FAE6  00                 	db	0
  5315  00FAE7  00                 	db	0
  5316  00FAE8  00                 	db	0
  5317  00FAE9  00                 	db	0
  5318  00FAEA  00                 	db	0
  5319  00FAEB  00                 	db	0
  5320  00FAEC  44                 	db	68
  5321  00FAED  4F                 	db	79
  5322  00FAEE  57                 	db	87
  5323  00FAEF  4E                 	db	78
  5324  00FAF0  00                 	db	0
  5325  00FAF1  00                 	db	0
  5326  00FAF2  00                 	db	0
  5327  00FAF3  00                 	db	0
  5328  00FAF4  00                 	db	0
  5329  00FAF5  00                 	db	0
  5330  00FAF6  00                 	db	0
  5331  00FAF7  00                 	db	0
  5332  00FAF8  00                 	db	0
  5333  00FAF9  00                 	db	0
  5334  00FAFA  00                 	db	0
  5335  00FAFB  00                 	db	0
  5336  00FAFC  00                 	db	0
  5337  00FAFD  55                 	db	85
  5338  00FAFE  50                 	db	80
  5339  00FAFF  2F                 	db	47
  5340  00FB00  44                 	db	68
  5341  00FB01  4F                 	db	79
  5342  00FB02  57                 	db	87
  5343  00FB03  4E                 	db	78
  5344  00FB04  00                 	db	0
  5345  00FB05  00                 	db	0
  5346  00FB06  00                 	db	0
  5347  00FB07  00                 	db	0
  5348  00FB08  00                 	db	0
  5349  00FB09  00                 	db	0
  5350  00FB0A  00                 	db	0
  5351  00FB0B  00                 	db	0
  5352  00FB0C  00                 	db	0
  5353  00FB0D  00                 	db	0
  5354  00FB0E  44                 	db	68
  5355  00FB0F  4F                 	db	79
  5356  00FB10  57                 	db	87
  5357  00FB11  4E                 	db	78
  5358  00FB12  2F                 	db	47
  5359  00FB13  55                 	db	85
  5360  00FB14  50                 	db	80
  5361  00FB15  00                 	db	0
  5362  00FB16  00                 	db	0
  5363  00FB17  00                 	db	0
  5364  00FB18  00                 	db	0
  5365  00FB19  00                 	db	0
  5366  00FB1A  00                 	db	0
  5367  00FB1B  00                 	db	0
  5368  00FB1C  00                 	db	0
  5369  00FB1D  00                 	db	0
  5370  00FB1E  00                 	db	0
  5371  00FB1F  53                 	db	83
  5372  00FB20  48                 	db	72
  5373  00FB21  55                 	db	85
  5374  00FB22  46                 	db	70
  5375  00FB23  46                 	db	70
  5376  00FB24  4C                 	db	76
  5377  00FB25  45                 	db	69
  5378  00FB26  00                 	db	0
  5379  00FB27  00                 	db	0
  5380  00FB28  00                 	db	0
  5381  00FB29  00                 	db	0
  5382  00FB2A  00                 	db	0
  5383  00FB2B  00                 	db	0
  5384  00FB2C  00                 	db	0
  5385  00FB2D  00                 	db	0
  5386  00FB2E  00                 	db	0
  5387  00FB2F  00                 	db	0
  5388  00FB30  52                 	db	82
  5389  00FB31  41                 	db	65
  5390  00FB32  4E                 	db	78
  5391  00FB33  44                 	db	68
  5392  00FB34  4F                 	db	79
  5393  00FB35  4D                 	db	77
  5394  00FB36  00                 	db	0
  5395  00FB37  00                 	db	0
  5396  00FB38  00                 	db	0
  5397  00FB39  00                 	db	0
  5398  00FB3A  00                 	db	0
  5399  00FB3B  00                 	db	0
  5400  00FB3C  00                 	db	0
  5401  00FB3D  00                 	db	0
  5402  00FB3E  00                 	db	0
  5403  00FB3F  00                 	db	0
  5404  00FB40  00                 	db	0
  5405  00FB41  41                 	db	65
  5406  00FB42  53                 	db	83
  5407  00FB43  20                 	db	32
  5408  00FB44  50                 	db	80
  5409  00FB45  52                 	db	82
  5410  00FB46  45                 	db	69
  5411  00FB47  53                 	db	83
  5412  00FB48  53                 	db	83
  5413  00FB49  45                 	db	69
  5414  00FB4A  44                 	db	68
  5415  00FB4B  00                 	db	0
  5416  00FB4C  00                 	db	0
  5417  00FB4D  00                 	db	0
  5418  00FB4E  00                 	db	0
  5419  00FB4F  00                 	db	0
  5420  00FB50  00                 	db	0
  5421  00FB51  00                 	db	0
  5422  00FB52  31                 	db	49
  5423  00FB53  2F                 	db	47
  5424  00FB54  34                 	db	52
  5425  00FB55  00                 	db	0
  5426  00FB56  00                 	db	0
  5427  00FB57  00                 	db	0
  5428  00FB58  00                 	db	0
  5429  00FB59  00                 	db	0
  5430  00FB5A  00                 	db	0
  5431  00FB5B  00                 	db	0
  5432  00FB5C  00                 	db	0
  5433  00FB5D  00                 	db	0
  5434  00FB5E  00                 	db	0
  5435  00FB5F  00                 	db	0
  5436  00FB60  00                 	db	0
  5437  00FB61  00                 	db	0
  5438  00FB62  00                 	db	0
  5439  00FB63  31                 	db	49
  5440  00FB64  2F                 	db	47
  5441  00FB65  34                 	db	52
  5442  00FB66  20                 	db	32
  5443  00FB67  44                 	db	68
  5444  00FB68  4F                 	db	79
  5445  00FB69  54                 	db	84
  5446  00FB6A  54                 	db	84
  5447  00FB6B  45                 	db	69
  5448  00FB6C  44                 	db	68
  5449  00FB6D  00                 	db	0
  5450  00FB6E  00                 	db	0
  5451  00FB6F  00                 	db	0
  5452  00FB70  00                 	db	0
  5453  00FB71  00                 	db	0
  5454  00FB72  00                 	db	0
  5455  00FB73  00                 	db	0
  5456  00FB74  31                 	db	49
  5457  00FB75  2F                 	db	47
  5458  00FB76  34                 	db	52
  5459  00FB77  20                 	db	32
  5460  00FB78  54                 	db	84
  5461  00FB79  52                 	db	82
  5462  00FB7A  49                 	db	73
  5463  00FB7B  50                 	db	80
  5464  00FB7C  4C                 	db	76
  5465  00FB7D  45                 	db	69
  5466  00FB7E  54                 	db	84
  5467  00FB7F  00                 	db	0
  5468  00FB80  00                 	db	0
  5469  00FB81  00                 	db	0
  5470  00FB82  00                 	db	0
  5471  00FB83  00                 	db	0
  5472  00FB84  00                 	db	0
  5473  00FB85  31                 	db	49
  5474  00FB86  2F                 	db	47
  5475  00FB87  38                 	db	56
  5476  00FB88  00                 	db	0
  5477  00FB89  00                 	db	0
  5478  00FB8A  00                 	db	0
  5479  00FB8B  00                 	db	0
  5480  00FB8C  00                 	db	0
  5481  00FB8D  00                 	db	0
  5482  00FB8E  00                 	db	0
  5483  00FB8F  00                 	db	0
  5484  00FB90  00                 	db	0
  5485  00FB91  00                 	db	0
  5486  00FB92  00                 	db	0
  5487  00FB93  00                 	db	0
  5488  00FB94  00                 	db	0
  5489  00FB95  00                 	db	0
  5490  00FB96  31                 	db	49
  5491  00FB97  2F                 	db	47
  5492  00FB98  38                 	db	56
  5493  00FB99  20                 	db	32
  5494  00FB9A  44                 	db	68
  5495  00FB9B  4F                 	db	79
  5496  00FB9C  54                 	db	84
  5497  00FB9D  54                 	db	84
  5498  00FB9E  45                 	db	69
  5499  00FB9F  44                 	db	68
  5500  00FBA0  00                 	db	0
  5501  00FBA1  00                 	db	0
  5502  00FBA2  00                 	db	0
  5503  00FBA3  00                 	db	0
  5504  00FBA4  00                 	db	0
  5505  00FBA5  00                 	db	0
  5506  00FBA6  00                 	db	0
  5507  00FBA7  31                 	db	49
  5508  00FBA8  2F                 	db	47
  5509  00FBA9  38                 	db	56
  5510  00FBAA  20                 	db	32
  5511  00FBAB  54                 	db	84
  5512  00FBAC  52                 	db	82
  5513  00FBAD  49                 	db	73
  5514  00FBAE  50                 	db	80
  5515  00FBAF  4C                 	db	76
  5516  00FBB0  45                 	db	69
  5517  00FBB1  54                 	db	84
  5518  00FBB2  00                 	db	0
  5519  00FBB3  00                 	db	0
  5520  00FBB4  00                 	db	0
  5521  00FBB5  00                 	db	0
  5522  00FBB6  00                 	db	0
  5523  00FBB7  00                 	db	0
  5524  00FBB8  31                 	db	49
  5525  00FBB9  2F                 	db	47
  5526  00FBBA  31                 	db	49
  5527  00FBBB  36                 	db	54
  5528  00FBBC  00                 	db	0
  5529  00FBBD  00                 	db	0
  5530  00FBBE  00                 	db	0
  5531  00FBBF  00                 	db	0
  5532  00FBC0  00                 	db	0
  5533  00FBC1  00                 	db	0
  5534  00FBC2  00                 	db	0
  5535  00FBC3  00                 	db	0
  5536  00FBC4  00                 	db	0
  5537  00FBC5  00                 	db	0
  5538  00FBC6  00                 	db	0
  5539  00FBC7  00                 	db	0
  5540  00FBC8  00                 	db	0
  5541  00FBC9  31                 	db	49
  5542  00FBCA  2F                 	db	47
  5543  00FBCB  31                 	db	49
  5544  00FBCC  36                 	db	54
  5545  00FBCD  20                 	db	32
  5546  00FBCE  44                 	db	68
  5547  00FBCF  4F                 	db	79
  5548  00FBD0  54                 	db	84
  5549  00FBD1  54                 	db	84
  5550  00FBD2  45                 	db	69
  5551  00FBD3  44                 	db	68
  5552  00FBD4  00                 	db	0
  5553  00FBD5  00                 	db	0
  5554  00FBD6  00                 	db	0
  5555  00FBD7  00                 	db	0
  5556  00FBD8  00                 	db	0
  5557  00FBD9  00                 	db	0
  5558  00FBDA  31                 	db	49
  5559  00FBDB  2F                 	db	47
  5560  00FBDC  31                 	db	49
  5561  00FBDD  36                 	db	54
  5562  00FBDE  20                 	db	32
  5563  00FBDF  54                 	db	84
  5564  00FBE0  52                 	db	82
  5565  00FBE1  49                 	db	73
  5566  00FBE2  50                 	db	80
  5567  00FBE3  4C                 	db	76
  5568  00FBE4  45                 	db	69
  5569  00FBE5  54                 	db	84
  5570  00FBE6  00                 	db	0
  5571  00FBE7  00                 	db	0
  5572  00FBE8  00                 	db	0
  5573  00FBE9  00                 	db	0
  5574  00FBEA  00                 	db	0
  5575  00FBEB  31                 	db	49
  5576  00FBEC  2F                 	db	47
  5577  00FBED  33                 	db	51
  5578  00FBEE  32                 	db	50
  5579  00FBEF  00                 	db	0
  5580  00FBF0  00                 	db	0
  5581  00FBF1  00                 	db	0
  5582  00FBF2  00                 	db	0
  5583  00FBF3  00                 	db	0
  5584  00FBF4  00                 	db	0
  5585  00FBF5  00                 	db	0
  5586  00FBF6  00                 	db	0
  5587  00FBF7  00                 	db	0
  5588  00FBF8  00                 	db	0
  5589  00FBF9  00                 	db	0
  5590  00FBFA  00                 	db	0
  5591  00FBFB  00                 	db	0
  5592  00FBFC  31                 	db	49
  5593  00FBFD  2F                 	db	47
  5594  00FBFE  33                 	db	51
  5595  00FBFF  32                 	db	50
  5596  00FC00  20                 	db	32
  5597  00FC01  44                 	db	68
  5598  00FC02  4F                 	db	79
  5599  00FC03  54                 	db	84
  5600  00FC04  54                 	db	84
  5601  00FC05  45                 	db	69
  5602  00FC06  44                 	db	68
  5603  00FC07  00                 	db	0
  5604  00FC08  00                 	db	0
  5605  00FC09  00                 	db	0
  5606  00FC0A  00                 	db	0
  5607  00FC0B  00                 	db	0
  5608  00FC0C  00                 	db	0
  5609  00FC0D  31                 	db	49
  5610  00FC0E  2F                 	db	47
  5611  00FC0F  33                 	db	51
  5612  00FC10  32                 	db	50
  5613  00FC11  20                 	db	32
  5614  00FC12  54                 	db	84
  5615  00FC13  52                 	db	82
  5616  00FC14  49                 	db	73
  5617  00FC15  50                 	db	80
  5618  00FC16  4C                 	db	76
  5619  00FC17  45                 	db	69
  5620  00FC18  54                 	db	84
  5621  00FC19  00                 	db	0
  5622  00FC1A  00                 	db	0
  5623  00FC1B  00                 	db	0
  5624  00FC1C  00                 	db	0
  5625  00FC1D  00                 	db	0
  5626  00FC1E  53                 	db	83
  5627  00FC1F  45                 	db	69
  5628  00FC20  54                 	db	84
  5629  00FC21  2F                 	db	47
  5630  00FC22  43                 	db	67
  5631  00FC23  4C                 	db	76
  5632  00FC24  45                 	db	69
  5633  00FC25  41                 	db	65
  5634  00FC26  52                 	db	82
  5635  00FC27  20                 	db	32
  5636  00FC28  4C                 	db	76
  5637  00FC29  41                 	db	65
  5638  00FC2A  54                 	db	84
  5639  00FC2B  43                 	db	67
  5640  00FC2C  48                 	db	72
  5641  00FC2D  00                 	db	0
  5642  00FC2E  00                 	db	0
  5643  00FC2F  41                 	db	65
  5644  00FC30  55                 	db	85
  5645  00FC31  54                 	db	84
  5646  00FC32  4F                 	db	79
  5647  00FC33  20                 	db	32
  5648  00FC34  4C                 	db	76
  5649  00FC35  41                 	db	65
  5650  00FC36  54                 	db	84
  5651  00FC37  43                 	db	67
  5652  00FC38  48                 	db	72
  5653  00FC39  00                 	db	0
  5654  00FC3A  00                 	db	0
  5655  00FC3B  00                 	db	0
  5656  00FC3C  00                 	db	0
  5657  00FC3D  00                 	db	0
  5658  00FC3E  00                 	db	0
  5659  00FC3F  00                 	db	0
  5660  00FC40  55                 	db	85
  5661  00FC41  6E                 	db	110
  5662  00FC42  2D                 	db	45
  5663  00FC43  4C                 	db	76
  5664  00FC44  61                 	db	97
  5665  00FC45  74                 	db	116
  5666  00FC46  63                 	db	99
  5667  00FC47  68                 	db	104
  5668  00FC48  20                 	db	32
  5669  00FC49  4D                 	db	77
  5670  00FC4A  6F                 	db	111
  5671  00FC4B  64                 	db	100
  5672  00FC4C  65                 	db	101
  5673  00FC4D  00                 	db	0
  5674  00FC4E  00                 	db	0
  5675  00FC4F  00                 	db	0
  5676  00FC50  00                 	db	0
  5677  00FC51  55                 	db	85
  5678  00FC52  4E                 	db	78
  5679  00FC53  4C                 	db	76
  5680  00FC54  41                 	db	65
  5681  00FC55  54                 	db	84
  5682  00FC56  43                 	db	67
  5683  00FC57  48                 	db	72
  5684  00FC58  20                 	db	32
  5685  00FC59  41                 	db	65
  5686  00FC5A  4C                 	db	76
  5687  00FC5B  4C                 	db	76
  5688  00FC5C  00                 	db	0
  5689  00FC5D  00                 	db	0
  5690  00FC5E  00                 	db	0
  5691  00FC5F  00                 	db	0
  5692  00FC60  00                 	db	0
  5693  00FC61  00                 	db	0
  5694  00FC62  4F                 	db	79
  5695  00FC63  4E                 	db	78
  5696  00FC64  45                 	db	69
  5697  00FC65  20                 	db	32
  5698  00FC66  41                 	db	65
  5699  00FC67  54                 	db	84
  5700  00FC68  20                 	db	32
  5701  00FC69  41                 	db	65
  5702  00FC6A  20                 	db	32
  5703  00FC6B  54                 	db	84
  5704  00FC6C  49                 	db	73
  5705  00FC6D  4D                 	db	77
  5706  00FC6E  45                 	db	69
  5707  00FC6F  00                 	db	0
  5708  00FC70  00                 	db	0
  5709  00FC71  00                 	db	0
  5710  00FC72  00                 	db	0
  5711  00FC73  52                 	db	82
  5712  00FC74  61                 	db	97
  5713  00FC75  6E                 	db	110
  5714  00FC76  64                 	db	100
  5715  00FC77  6F                 	db	111
  5716  00FC78  6D                 	db	109
  5717  00FC79  69                 	db	105
  5718  00FC7A  7A                 	db	122
  5719  00FC7B  65                 	db	101
  5720  00FC7C  00                 	db	0
  5721  00FC7D  00                 	db	0
  5722  00FC7E  00                 	db	0
  5723  00FC7F  00                 	db	0
  5724  00FC80  00                 	db	0
  5725  00FC81  00                 	db	0
  5726  00FC82  00                 	db	0
  5727  00FC83  00                 	db	0
  5728  00FC84  53                 	db	83
  5729  00FC85  6B                 	db	107
  5730  00FC86  69                 	db	105
  5731  00FC87  70                 	db	112
  5732  00FC88  20                 	db	32
  5733  00FC89  46                 	db	70
  5734  00FC8A  69                 	db	105
  5735  00FC8B  72                 	db	114
  5736  00FC8C  73                 	db	115
  5737  00FC8D  74                 	db	116
  5738  00FC8E  2F                 	db	47
  5739  00FC8F  4C                 	db	76
  5740  00FC90  61                 	db	97
  5741  00FC91  73                 	db	115
  5742  00FC92  74                 	db	116
  5743  00FC93  00                 	db	0
  5744  00FC94  00                 	db	0
  5745  00FC95  52                 	db	82
  5746  00FC96  41                 	db	65
  5747  00FC97  4E                 	db	78
  5748  00FC98  44                 	db	68
  5749  00FC99  4F                 	db	79
  5750  00FC9A  4D                 	db	77
  5751  00FC9B  49                 	db	73
  5752  00FC9C  5A                 	db	90
  5753  00FC9D  45                 	db	69
  5754  00FC9E  20                 	db	32
  5755  00FC9F  41                 	db	65
  5756  00FCA0  55                 	db	85
  5757  00FCA1  54                 	db	84
  5758  00FCA2  4F                 	db	79
  5759  00FCA3  00                 	db	0
  5760  00FCA4  00                 	db	0
  5761  00FCA5  00                 	db	0
  5762  00FCA6  52                 	db	82
  5763  00FCA7  41                 	db	65
  5764  00FCA8  4E                 	db	78
  5765  00FCA9  44                 	db	68
  5766  00FCAA  4F                 	db	79
  5767  00FCAB  4D                 	db	77
  5768  00FCAC  49                 	db	73
  5769  00FCAD  5A                 	db	90
  5770  00FCAE  45                 	db	69
  5771  00FCAF  20                 	db	32
  5772  00FCB0  4F                 	db	79
  5773  00FCB1  4E                 	db	78
  5774  00FCB2  43                 	db	67
  5775  00FCB3  45                 	db	69
  5776  00FCB4  00                 	db	0
  5777  00FCB5  00                 	db	0
  5778  00FCB6  00                 	db	0
  5779  00FCB7  4B                 	db	75
  5780  00FCB8  65                 	db	101
  5781  00FCB9  79                 	db	121
  5782  00FCBA  20                 	db	32
  5783  00FCBB  70                 	db	112
  5784  00FCBC  72                 	db	114
  5785  00FCBD  65                 	db	101
  5786  00FCBE  73                 	db	115
  5787  00FCBF  73                 	db	115
  5788  00FCC0  00                 	db	0
  5789  00FCC1  00                 	db	0
  5790  00FCC2  00                 	db	0
  5791  00FCC3  00                 	db	0
  5792  00FCC4  00                 	db	0
  5793  00FCC5  00                 	db	0
  5794  00FCC6  00                 	db	0
  5795  00FCC7  00                 	db	0
  5796  00FCC8  4B                 	db	75
  5797  00FCC9  65                 	db	101
  5798  00FCCA  79                 	db	121
  5799  00FCCB  20                 	db	32
  5800  00FCCC  72                 	db	114
  5801  00FCCD  65                 	db	101
  5802  00FCCE  6C                 	db	108
  5803  00FCCF  65                 	db	101
  5804  00FCD0  61                 	db	97
  5805  00FCD1  73                 	db	115
  5806  00FCD2  65                 	db	101
  5807  00FCD3  00                 	db	0
  5808  00FCD4  00                 	db	0
  5809  00FCD5  00                 	db	0
  5810  00FCD6  00                 	db	0
  5811  00FCD7  00                 	db	0
  5812  00FCD8  00                 	db	0
  5813  00FCD9  54                 	db	84
  5814  00FCDA  72                 	db	114
  5815  00FCDB  61                 	db	97
  5816  00FCDC  6E                 	db	110
  5817  00FCDD  73                 	db	115
  5818  00FCDE  70                 	db	112
  5819  00FCDF  6F                 	db	111
  5820  00FCE0  73                 	db	115
  5821  00FCE1  65                 	db	101
  5822  00FCE2  00                 	db	0
  5823  00FCE3  00                 	db	0
  5824  00FCE4  00                 	db	0
  5825  00FCE5  00                 	db	0
  5826  00FCE6  00                 	db	0
  5827  00FCE7  00                 	db	0
  5828  00FCE8  00                 	db	0
  5829  00FCE9  00                 	db	0
  5830  00FCEA  52                 	db	82
  5831  00FCEB  65                 	db	101
  5832  00FCEC  73                 	db	115
  5833  00FCED  65                 	db	101
  5834  00FCEE  74                 	db	116
  5835  00FCEF  00                 	db	0
  5836  00FCF0  00                 	db	0
  5837  00FCF1  00                 	db	0
  5838  00FCF2  00                 	db	0
  5839  00FCF3  00                 	db	0
  5840  00FCF4  00                 	db	0
  5841  00FCF5  00                 	db	0
  5842  00FCF6  00                 	db	0
  5843  00FCF7  00                 	db	0
  5844  00FCF8  00                 	db	0
  5845  00FCF9  00                 	db	0
  5846  00FCFA  00                 	db	0
  5847  00FCFB                     __end_of_LCD_STRINGS:
  5848                           	opt stack 0
  5849  00FCFB                     _locrian_key:
  5850                           	opt stack 0
  5851  00FCFB  0B                 	db	11
  5852  00FCFC  01                 	db	1
  5853  00FCFD  03                 	db	3
  5854  00FCFE  05                 	db	5
  5855  00FCFF  06                 	db	6
  5856  00FD00  08                 	db	8
  5857  00FD01  0A                 	db	10
  5858  00FD02  0C                 	db	12
  5859  00FD03  0D                 	db	13
  5860  00FD04  0F                 	db	15
  5861  00FD05  11                 	db	17
  5862  00FD06  12                 	db	18
  5863  00FD07  14                 	db	20
  5864  00FD08  16                 	db	22
  5865  00FD09  18                 	db	24
  5866  00FD0A                     __end_of_locrian_key:
  5867                           	opt stack 0
  5868  00FD0A                     _aeolian_key:
  5869                           	opt stack 0
  5870  00FD0A  09                 	db	9
  5871  00FD0B  02                 	db	2
  5872  00FD0C  03                 	db	3
  5873  00FD0D  05                 	db	5
  5874  00FD0E  07                 	db	7
  5875  00FD0F  08                 	db	8
  5876  00FD10  0A                 	db	10
  5877  00FD11  0C                 	db	12
  5878  00FD12  0E                 	db	14
  5879  00FD13  0F                 	db	15
  5880  00FD14  11                 	db	17
  5881  00FD15  13                 	db	19
  5882  00FD16  14                 	db	20
  5883  00FD17  16                 	db	22
  5884  00FD18  18                 	db	24
  5885  00FD19                     __end_of_aeolian_key:
  5886                           	opt stack 0
  5887  00FD19                     _mixolydian_key:
  5888                           	opt stack 0
  5889  00FD19  07                 	db	7
  5890  00FD1A  02                 	db	2
  5891  00FD1B  04                 	db	4
  5892  00FD1C  05                 	db	5
  5893  00FD1D  07                 	db	7
  5894  00FD1E  09                 	db	9
  5895  00FD1F  0A                 	db	10
  5896  00FD20  0C                 	db	12
  5897  00FD21  0E                 	db	14
  5898  00FD22  10                 	db	16
  5899  00FD23  11                 	db	17
  5900  00FD24  13                 	db	19
  5901  00FD25  15                 	db	21
  5902  00FD26  16                 	db	22
  5903  00FD27  18                 	db	24
  5904  00FD28                     __end_of_mixolydian_key:
  5905                           	opt stack 0
  5906  00FD28                     _lydian_key:
  5907                           	opt stack 0
  5908  00FD28  05                 	db	5
  5909  00FD29  02                 	db	2
  5910  00FD2A  04                 	db	4
  5911  00FD2B  06                 	db	6
  5912  00FD2C  07                 	db	7
  5913  00FD2D  09                 	db	9
  5914  00FD2E  0B                 	db	11
  5915  00FD2F  0C                 	db	12
  5916  00FD30  0E                 	db	14
  5917  00FD31  10                 	db	16
  5918  00FD32  12                 	db	18
  5919  00FD33  13                 	db	19
  5920  00FD34  15                 	db	21
  5921  00FD35  17                 	db	23
  5922  00FD36  18                 	db	24
  5923  00FD37                     __end_of_lydian_key:
  5924                           	opt stack 0
  5925  00FD37                     _phrygian_key:
  5926                           	opt stack 0
  5927  00FD37  04                 	db	4
  5928  00FD38  01                 	db	1
  5929  00FD39  03                 	db	3
  5930  00FD3A  05                 	db	5
  5931  00FD3B  07                 	db	7
  5932  00FD3C  08                 	db	8
  5933  00FD3D  0A                 	db	10
  5934  00FD3E  0C                 	db	12
  5935  00FD3F  0D                 	db	13
  5936  00FD40  0F                 	db	15
  5937  00FD41  11                 	db	17
  5938  00FD42  13                 	db	19
  5939  00FD43  14                 	db	20
  5940  00FD44  16                 	db	22
  5941  00FD45  18                 	db	24
  5942  00FD46                     __end_of_phrygian_key:
  5943                           	opt stack 0
  5944  00FD46                     _dorian_key:
  5945                           	opt stack 0
  5946  00FD46  02                 	db	2
  5947  00FD47  02                 	db	2
  5948  00FD48  03                 	db	3
  5949  00FD49  05                 	db	5
  5950  00FD4A  07                 	db	7
  5951  00FD4B  09                 	db	9
  5952  00FD4C  0A                 	db	10
  5953  00FD4D  0C                 	db	12
  5954  00FD4E  0E                 	db	14
  5955  00FD4F  0F                 	db	15
  5956  00FD50  11                 	db	17
  5957  00FD51  13                 	db	19
  5958  00FD52  15                 	db	21
  5959  00FD53  16                 	db	22
  5960  00FD54  18                 	db	24
  5961  00FD55                     __end_of_dorian_key:
  5962                           	opt stack 0
  5963  00FD55                     _ionian_key:
  5964                           	opt stack 0
  5965  00FD55  00                 	db	0
  5966  00FD56  02                 	db	2
  5967  00FD57  04                 	db	4
  5968  00FD58  05                 	db	5
  5969  00FD59  07                 	db	7
  5970  00FD5A  09                 	db	9
  5971  00FD5B  0B                 	db	11
  5972  00FD5C  0C                 	db	12
  5973  00FD5D  0E                 	db	14
  5974  00FD5E  10                 	db	16
  5975  00FD5F  11                 	db	17
  5976  00FD60  13                 	db	19
  5977  00FD61  15                 	db	21
  5978  00FD62  17                 	db	23
  5979  00FD63  18                 	db	24
  5980  00FD64                     __end_of_ionian_key:
  5981                           	opt stack 0
  5982  0000                     _TMR0	set	4054
  5983  0000                     _TMR1	set	4046
  5984  0000                     _EECON2	set	4007
  5985  0000                     _INTCONbits	set	4082
  5986  0000                     _EEDATA	set	4008
  5987  0000                     _EEADR	set	4009
  5988  0000                     _EEADRH	set	4010
  5989  0000                     _EECON1bits	set	4006
  5990  0000                     _SPBRG	set	4015
  5991  0000                     _T1CON	set	4045
  5992  0000                     _TMR2	set	4044
  5993  0000                     _T2CON	set	4042
  5994  0000                     _T0CON	set	4053
  5995  0000                     _PORTE	set	3972
  5996  0000                     _PORTB	set	3969
  5997  0000                     _TRISE	set	3990
  5998  0000                     _TRISD	set	3989
  5999  0000                     _TRISC	set	3988
  6000  0000                     _TRISB	set	3987
  6001  0000                     _TRISA	set	3986
  6002  0000                     _PORTD	set	3971
  6003  0000                     _TXREG	set	4013
  6004  0000                     _ADRESL	set	4035
  6005  0000                     _ADRESH	set	4036
  6006  0000                     _PORTA	set	3968
  6007  0000                     _ADCON2	set	4032
  6008  0000                     _ADCON1	set	4033
  6009  0000                     _ADCON0	set	4034
  6010  0000                     _CMCON	set	4020
  6011  0000                     _PORTC	set	3970
  6012  0000                     _TMR0IF	set	32658
  6013  0000                     _RB0	set	31752
  6014  0000                     _TMR1IF	set	31984
  6015  0000                     _TMR2IF	set	31985
  6016  0000                     _RC4	set	31764
  6017  0000                     _RC5	set	31765
  6018  0000                     _RB1	set	31753
  6019  0000                     _GIE	set	32663
  6020  0000                     _PEIE	set	32662
  6021  0000                     _BRGH	set	32098
  6022  0000                     _CREN	set	32092
  6023  0000                     _SPEN	set	32095
  6024  0000                     _SYNC	set	32100
  6025  0000                     _TXEN	set	32101
  6026  0000                     _TMR1IE	set	31976
  6027  0000                     _TMR1ON	set	32360
  6028  0000                     _TMR2IE	set	31977
  6029  0000                     _TMR0IE	set	32661
  6030  0000                     _PSA	set	32427
  6031  0000                     _T0CS	set	32429
  6032  0000                     _T08BIT	set	32430
  6033  0000                     _INT0IE	set	32660
  6034  0000                     _INT0IF	set	32657
  6035  0000                     _INTEDG0	set	32654
  6036  0000                     _RBIE	set	32659
  6037  0000                     _RBIF	set	32656
  6038  0000                     _IPEN	set	32391
  6039  0000                     _RC2	set	31762
  6040  0000                     _RC1	set	31761
  6041  0000                     _RC0	set	31760
  6042  0000                     _RC3	set	31763
  6043  0000                     _TMR0ON	set	32431
  6044  0000                     _RB4	set	31756
  6045  0000                     _RB5	set	31757
  6046  0000                     _RE2	set	31778
  6047  0000                     _RB2	set	31754
  6048  0000                     _RA5	set	31749
  6049  0000                     _TXIF	set	31988
  6050  0000                     _TRMT	set	32097
  6051  0000                     _GO_nDONE	set	32273
  6052  0000                     _ADON	set	32272
  6053  0000                     _TMR2ON	set	32338
  6054  0000                     _RE1	set	31777
  6055  0000                     _RE0	set	31776
  6056  0000                     _RD7	set	31775
  6057  0000                     _RD6	set	31774
  6058  0000                     _RD5	set	31773
  6059  0000                     _RD4	set	31772
  6060  00FD64                     STR_10:
  6061  00FD64  20                 	db	32
  6062  00FD65  20                 	db	32
  6063  00FD66  20                 	db	32
  6064  00FD67  20                 	db	32
  6065  00FD68  20                 	db	32
  6066  00FD69  20                 	db	32
  6067  00FD6A  20                 	db	32
  6068  00FD6B  20                 	db	32
  6069  00FD6C  20                 	db	32
  6070  00FD6D  20                 	db	32
  6071  00FD6E  20                 	db	32
  6072  00FD6F  20                 	db	32
  6073  00FD70  20                 	db	32
  6074  00FD71  20                 	db	32
  6075  00FD72  20                 	db	32
  6076  00FD73  20                 	db	32
  6077  00FD74  00                 	db	0
  6078  00FD75                     STR_22:
  6079  00FD75  53                 	db	83	;'S'
  6080  00FD76  65                 	db	101	;'e'
  6081  00FD77  74                 	db	116	;'t'
  6082  00FD78  74                 	db	116	;'t'
  6083  00FD79  69                 	db	105	;'i'
  6084  00FD7A  6E                 	db	110	;'n'
  6085  00FD7B  67                 	db	103	;'g'
  6086  00FD7C  73                 	db	115	;'s'
  6087  00FD7D  20                 	db	32
  6088  00FD7E  4C                 	db	76	;'L'
  6089  00FD7F  6F                 	db	111	;'o'
  6090  00FD80  61                 	db	97	;'a'
  6091  00FD81  64                 	db	100	;'d'
  6092  00FD82  65                 	db	101	;'e'
  6093  00FD83  64                 	db	100	;'d'
  6094  00FD84  21                 	db	33
  6095  00FD85  00                 	db	0
  6096  00FD86                     STR_37:
  6097  00FD86  52                 	db	82	;'R'
  6098  00FD87  65                 	db	101	;'e'
  6099  00FD88  73                 	db	115	;'s'
  6100  00FD89  74                 	db	116	;'t'
  6101  00FD8A  6F                 	db	111	;'o'
  6102  00FD8B  72                 	db	114	;'r'
  6103  00FD8C  65                 	db	101	;'e'
  6104  00FD8D  20                 	db	32
  6105  00FD8E  53                 	db	83	;'S'
  6106  00FD8F  65                 	db	101	;'e'
  6107  00FD90  74                 	db	116	;'t'
  6108  00FD91  74                 	db	116	;'t'
  6109  00FD92  69                 	db	105	;'i'
  6110  00FD93  6E                 	db	110	;'n'
  6111  00FD94  67                 	db	103	;'g'
  6112  00FD95  21                 	db	33
  6113  00FD96  00                 	db	0
  6114  00FD97                     STR_33:
  6115  00FD97  53                 	db	83	;'S'
  6116  00FD98  65                 	db	101	;'e'
  6117  00FD99  74                 	db	116	;'t'
  6118  00FD9A  20                 	db	32
  6119  00FD9B  4A                 	db	74	;'J'
  6120  00FD9C  6F                 	db	111	;'o'
  6121  00FD9D  79                 	db	121	;'y'
  6122  00FD9E  73                 	db	115	;'s'
  6123  00FD9F  74                 	db	116	;'t'
  6124  00FDA0  69                 	db	105	;'i'
  6125  00FDA1  63                 	db	99	;'c'
  6126  00FDA2  6B                 	db	107	;'k'
  6127  00FDA3  20                 	db	32
  6128  00FDA4  43                 	db	67	;'C'
  6129  00FDA5  43                 	db	67	;'C'
  6130  00FDA6  23                 	db	35
  6131  00FDA7  00                 	db	0
  6132  00FDA8                     STR_30:
  6133  00FDA8  50                 	db	80	;'P'
  6134  00FDA9  6F                 	db	111	;'o'
  6135  00FDAA  74                 	db	116	;'t'
  6136  00FDAB  73                 	db	115	;'s'
  6137  00FDAC  20                 	db	32
  6138  00FDAD  52                 	db	82	;'R'
  6139  00FDAE  65                 	db	101	;'e'
  6140  00FDAF  73                 	db	115	;'s'
  6141  00FDB0  6F                 	db	111	;'o'
  6142  00FDB1  6C                 	db	108	;'l'
  6143  00FDB2  75                 	db	117	;'u'
  6144  00FDB3  74                 	db	116	;'t'
  6145  00FDB4  69                 	db	105	;'i'
  6146  00FDB5  6F                 	db	111	;'o'
  6147  00FDB6  6E                 	db	110	;'n'
  6148  00FDB7  3A                 	db	58	;':'
  6149  00FDB8  00                 	db	0
  6150  00FDB9                     STR_47:
  6151  00FDB9  53                 	db	83	;'S'
  6152  00FDBA  65                 	db	101	;'e'
  6153  00FDBB  6C                 	db	108	;'l'
  6154  00FDBC  65                 	db	101	;'e'
  6155  00FDBD  63                 	db	99	;'c'
  6156  00FDBE  74                 	db	116	;'t'
  6157  00FDBF  20                 	db	32
  6158  00FDC0  41                 	db	65	;'A'
  6159  00FDC1  72                 	db	114	;'r'
  6160  00FDC2  70                 	db	112	;'p'
  6161  00FDC3  65                 	db	101	;'e'
  6162  00FDC4  67                 	db	103	;'g'
  6163  00FDC5  67                 	db	103	;'g'
  6164  00FDC6  69                 	db	105	;'i'
  6165  00FDC7  6F                 	db	111	;'o'
  6166  00FDC8  3A                 	db	58	;':'
  6167  00FDC9  00                 	db	0
  6168  00FDCA                     STR_28:
  6169  00FDCA  53                 	db	83	;'S'
  6170  00FDCB  65                 	db	101	;'e'
  6171  00FDCC  74                 	db	116	;'t'
  6172  00FDCD  20                 	db	32
  6173  00FDCE  4E                 	db	78	;'N'
  6174  00FDCF  6F                 	db	111	;'o'
  6175  00FDD0  74                 	db	116	;'t'
  6176  00FDD1  65                 	db	101	;'e'
  6177  00FDD2  20                 	db	32
  6178  00FDD3  4E                 	db	78	;'N'
  6179  00FDD4  75                 	db	117	;'u'
  6180  00FDD5  6D                 	db	109	;'m'
  6181  00FDD6  62                 	db	98	;'b'
  6182  00FDD7  65                 	db	101	;'e'
  6183  00FDD8  72                 	db	114	;'r'
  6184  00FDD9  3A                 	db	58	;':'
  6185  00FDDA  00                 	db	0
  6186  00FDDB                     STR_52:
  6187  00FDDB  41                 	db	65	;'A'
  6188  00FDDC  75                 	db	117	;'u'
  6189  00FDDD  74                 	db	116	;'t'
  6190  00FDDE  6F                 	db	111	;'o'
  6191  00FDDF  4C                 	db	76	;'L'
  6192  00FDE0  61                 	db	97	;'a'
  6193  00FDE1  74                 	db	116	;'t'
  6194  00FDE2  63                 	db	99	;'c'
  6195  00FDE3  68                 	db	104	;'h'
  6196  00FDE4  20                 	db	32
  6197  00FDE5  4F                 	db	79	;'O'
  6198  00FDE6  4E                 	db	78	;'N'
  6199  00FDE7  2F                 	db	47
  6200  00FDE8  4F                 	db	79	;'O'
  6201  00FDE9  46                 	db	70	;'F'
  6202  00FDEA  46                 	db	70	;'F'
  6203  00FDEB  00                 	db	0
  6204  00FDEC                     STR_39:
  6205  00FDEC  45                 	db	69	;'E'
  6206  00FDED  6E                 	db	110	;'n'
  6207  00FDEE  63                 	db	99	;'c'
  6208  00FDEF  6F                 	db	111	;'o'
  6209  00FDF0  64                 	db	100	;'d'
  6210  00FDF1  65                 	db	101	;'e'
  6211  00FDF2  72                 	db	114	;'r'
  6212  00FDF3  20                 	db	32
  6213  00FDF4  50                 	db	80	;'P'
  6214  00FDF5  6F                 	db	111	;'o'
  6215  00FDF6  6C                 	db	108	;'l'
  6216  00FDF7  61                 	db	97	;'a'
  6217  00FDF8  72                 	db	114	;'r'
  6218  00FDF9  69                 	db	105	;'i'
  6219  00FDFA  74                 	db	116	;'t'
  6220  00FDFB  79                 	db	121	;'y'
  6221  00FDFC  00                 	db	0
  6222  00FDFD                     STR_21:
  6223  00FDFD  53                 	db	83	;'S'
  6224  00FDFE  65                 	db	101	;'e'
  6225  00FDFF  74                 	db	116	;'t'
  6226  00FE00  74                 	db	116	;'t'
  6227  00FE01  69                 	db	105	;'i'
  6228  00FE02  6E                 	db	110	;'n'
  6229  00FE03  67                 	db	103	;'g'
  6230  00FE04  73                 	db	115	;'s'
  6231  00FE05  20                 	db	32
  6232  00FE06  53                 	db	83	;'S'
  6233  00FE07  61                 	db	97	;'a'
  6234  00FE08  76                 	db	118	;'v'
  6235  00FE09  65                 	db	101	;'e'
  6236  00FE0A  64                 	db	100	;'d'
  6237  00FE0B  21                 	db	33
  6238  00FE0C  00                 	db	0
  6239  00FE0D                     STR_75:
  6240  00FE0D  4C                 	db	76	;'L'
  6241  00FE0E  61                 	db	97	;'a'
  6242  00FE0F  73                 	db	115	;'s'
  6243  00FE10  74                 	db	116	;'t'
  6244  00FE11  20                 	db	32
  6245  00FE12  4E                 	db	78	;'N'
  6246  00FE13  6F                 	db	111	;'o'
  6247  00FE14  74                 	db	116	;'t'
  6248  00FE15  65                 	db	101	;'e'
  6249  00FE16  20                 	db	32
  6250  00FE17  4D                 	db	77	;'M'
  6251  00FE18  6F                 	db	111	;'o'
  6252  00FE19  64                 	db	100	;'d'
  6253  00FE1A  65                 	db	101	;'e'
  6254  00FE1B  3A                 	db	58	;':'
  6255  00FE1C  00                 	db	0
  6256  00FE1D                     STR_62:
  6257  00FE1D  52                 	db	82	;'R'
  6258  00FE1E  61                 	db	97	;'a'
  6259  00FE1F  6E                 	db	110	;'n'
  6260  00FE20  64                 	db	100	;'d'
  6261  00FE21  6F                 	db	111	;'o'
  6262  00FE22  6D                 	db	109	;'m'
  6263  00FE23  69                 	db	105	;'i'
  6264  00FE24  7A                 	db	122	;'z'
  6265  00FE25  65                 	db	101	;'e'
  6266  00FE26  20                 	db	32
  6267  00FE27  54                 	db	84	;'T'
  6268  00FE28  79                 	db	121	;'y'
  6269  00FE29  70                 	db	112	;'p'
  6270  00FE2A  65                 	db	101	;'e'
  6271  00FE2B  3A                 	db	58	;':'
  6272  00FE2C  00                 	db	0
  6273  00FE2D                     STR_26:
  6274  00FE2D  53                 	db	83	;'S'
  6275  00FE2E  65                 	db	101	;'e'
  6276  00FE2F  6C                 	db	108	;'l'
  6277  00FE30  65                 	db	101	;'e'
  6278  00FE31  63                 	db	99	;'c'
  6279  00FE32  74                 	db	116	;'t'
  6280  00FE33  20                 	db	32
  6281  00FE34  53                 	db	83	;'S'
  6282  00FE35  65                 	db	101	;'e'
  6283  00FE36  76                 	db	118	;'v'
  6284  00FE37  65                 	db	101	;'e'
  6285  00FE38  6E                 	db	110	;'n'
  6286  00FE39  74                 	db	116	;'t'
  6287  00FE3A  68                 	db	104	;'h'
  6288  00FE3B  3A                 	db	58	;':'
  6289  00FE3C  00                 	db	0
  6290  00FE3D                     STR_40:
  6291  00FE3D  41                 	db	65	;'A'
  6292  00FE3E  52                 	db	82	;'R'
  6293  00FE3F  50                 	db	80	;'P'
  6294  00FE40  45                 	db	69	;'E'
  6295  00FE41  47                 	db	71	;'G'
  6296  00FE42  47                 	db	71	;'G'
  6297  00FE43  49                 	db	73	;'I'
  6298  00FE44  41                 	db	65	;'A'
  6299  00FE45  54                 	db	84	;'T'
  6300  00FE46  4F                 	db	79	;'O'
  6301  00FE47  52                 	db	82	;'R'
  6302  00FE48  20                 	db	32
  6303  00FE49  4F                 	db	79	;'O'
  6304  00FE4A  46                 	db	70	;'F'
  6305  00FE4B  46                 	db	70	;'F'
  6306  00FE4C  00                 	db	0
  6307  00FE4D                     STR_32:
  6308  00FE4D  53                 	db	83	;'S'
  6309  00FE4E  6C                 	db	108	;'l'
  6310  00FE4F  69                 	db	105	;'i'
  6311  00FE50  64                 	db	100	;'d'
  6312  00FE51  65                 	db	101	;'e'
  6313  00FE52  70                 	db	112	;'p'
  6314  00FE53  6F                 	db	111	;'o'
  6315  00FE54  74                 	db	116	;'t'
  6316  00FE55  73                 	db	115	;'s'
  6317  00FE56  20                 	db	32
  6318  00FE57  43                 	db	67	;'C'
  6319  00FE58  43                 	db	67	;'C'
  6320  00FE59  23                 	db	35
  6321  00FE5A  3A                 	db	58	;':'
  6322  00FE5B  00                 	db	0
  6323  00FE5C                     STR_57:
  6324  00FE5C  55                 	db	85	;'U'
  6325  00FE5D  6E                 	db	110	;'n'
  6326  00FE5E  2D                 	db	45
  6327  00FE5F  6C                 	db	108	;'l'
  6328  00FE60  61                 	db	97	;'a'
  6329  00FE61  74                 	db	116	;'t'
  6330  00FE62  63                 	db	99	;'c'
  6331  00FE63  68                 	db	104	;'h'
  6332  00FE64  20                 	db	32
  6333  00FE65  4D                 	db	77	;'M'
  6334  00FE66  6F                 	db	111	;'o'
  6335  00FE67  64                 	db	100	;'d'
  6336  00FE68  65                 	db	101	;'e'
  6337  00FE69  3A                 	db	58	;':'
  6338  00FE6A  00                 	db	0
  6339  00FE6B                     STR_29:
  6340  00FE6B  53                 	db	83	;'S'
  6341  00FE6C  65                 	db	101	;'e'
  6342  00FE6D  74                 	db	116	;'t'
  6343  00FE6E  20                 	db	32
  6344  00FE6F  43                 	db	67	;'C'
  6345  00FE70  43                 	db	67	;'C'
  6346  00FE71  20                 	db	32
  6347  00FE72  4E                 	db	78	;'N'
  6348  00FE73  75                 	db	117	;'u'
  6349  00FE74  6D                 	db	109	;'m'
  6350  00FE75  62                 	db	98	;'b'
  6351  00FE76  65                 	db	101	;'e'
  6352  00FE77  72                 	db	114	;'r'
  6353  00FE78  3A                 	db	58	;':'
  6354  00FE79  00                 	db	0
  6355  00FE7A                     STR_64:
  6356  00FE7A  52                 	db	82	;'R'
  6357  00FE7B  41                 	db	65	;'A'
  6358  00FE7C  4E                 	db	78	;'N'
  6359  00FE7D  44                 	db	68	;'D'
  6360  00FE7E  4F                 	db	79	;'O'
  6361  00FE7F  4D                 	db	77	;'M'
  6362  00FE80  49                 	db	73	;'I'
  6363  00FE81  5A                 	db	90	;'Z'
  6364  00FE82  45                 	db	69	;'E'
  6365  00FE83  20                 	db	32
  6366  00FE84  4F                 	db	79	;'O'
  6367  00FE85  4E                 	db	78	;'N'
  6368  00FE86  43                 	db	67	;'C'
  6369  00FE87  45                 	db	69	;'E'
  6370  00FE88  00                 	db	0
  6371  00FE89                     STR_53:
  6372  00FE89  41                 	db	65	;'A'
  6373  00FE8A  75                 	db	117	;'u'
  6374  00FE8B  74                 	db	116	;'t'
  6375  00FE8C  6F                 	db	111	;'o'
  6376  00FE8D  20                 	db	32
  6377  00FE8E  4C                 	db	76	;'L'
  6378  00FE8F  61                 	db	97	;'a'
  6379  00FE90  74                 	db	116	;'t'
  6380  00FE91  63                 	db	99	;'c'
  6381  00FE92  68                 	db	104	;'h'
  6382  00FE93  20                 	db	32
  6383  00FE94  4F                 	db	79	;'O'
  6384  00FE95  46                 	db	70	;'F'
  6385  00FE96  46                 	db	70	;'F'
  6386  00FE97  00                 	db	0
  6387  00FE98                     STR_42:
  6388  00FE98  41                 	db	65	;'A'
  6389  00FE99  52                 	db	82	;'R'
  6390  00FE9A  50                 	db	80	;'P'
  6391  00FE9B  45                 	db	69	;'E'
  6392  00FE9C  47                 	db	71	;'G'
  6393  00FE9D  47                 	db	71	;'G'
  6394  00FE9E  49                 	db	73	;'I'
  6395  00FE9F  41                 	db	65	;'A'
  6396  00FEA0  54                 	db	84	;'T'
  6397  00FEA1  4F                 	db	79	;'O'
  6398  00FEA2  52                 	db	82	;'R'
  6399  00FEA3  20                 	db	32
  6400  00FEA4  4F                 	db	79	;'O'
  6401  00FEA5  4E                 	db	78	;'N'
  6402  00FEA6  00                 	db	0
  6403  00FEA7                     STR_63:
  6404  00FEA7  52                 	db	82	;'R'
  6405  00FEA8  41                 	db	65	;'A'
  6406  00FEA9  4E                 	db	78	;'N'
  6407  00FEAA  44                 	db	68	;'D'
  6408  00FEAB  4F                 	db	79	;'O'
  6409  00FEAC  4D                 	db	77	;'M'
  6410  00FEAD  49                 	db	73	;'I'
  6411  00FEAE  5A                 	db	90	;'Z'
  6412  00FEAF  45                 	db	69	;'E'
  6413  00FEB0  20                 	db	32
  6414  00FEB1  41                 	db	65	;'A'
  6415  00FEB2  55                 	db	85	;'U'
  6416  00FEB3  54                 	db	84	;'T'
  6417  00FEB4  4F                 	db	79	;'O'
  6418  00FEB5  00                 	db	0
  6419  00FEB6                     STR_45:
  6420  00FEB6  54                 	db	84	;'T'
  6421  00FEB7  65                 	db	101	;'e'
  6422  00FEB8  6D                 	db	109	;'m'
  6423  00FEB9  70                 	db	112	;'p'
  6424  00FEBA  6F                 	db	111	;'o'
  6425  00FEBB  20                 	db	32
  6426  00FEBC  28                 	db	40
  6427  00FEBD  42                 	db	66	;'B'
  6428  00FEBE  50                 	db	80	;'P'
  6429  00FEBF  4D                 	db	77	;'M'
  6430  00FEC0  29                 	db	41
  6431  00FEC1  3A                 	db	58	;':'
  6432  00FEC2  20                 	db	32
  6433  00FEC3  00                 	db	0
  6434  00FEC4                     STR_31:
  6435  00FEC4  53                 	db	83	;'S'
  6436  00FEC5  65                 	db	101	;'e'
  6437  00FEC6  74                 	db	116	;'t'
  6438  00FEC7  20                 	db	32
  6439  00FEC8  50                 	db	80	;'P'
  6440  00FEC9  6F                 	db	111	;'o'
  6441  00FECA  74                 	db	116	;'t'
  6442  00FECB  73                 	db	115	;'s'
  6443  00FECC  20                 	db	32
  6444  00FECD  43                 	db	67	;'C'
  6445  00FECE  43                 	db	67	;'C'
  6446  00FECF  23                 	db	35
  6447  00FED0  3A                 	db	58	;':'
  6448  00FED1  00                 	db	0
  6449  00FED2                     STR_25:
  6450  00FED2  53                 	db	83	;'S'
  6451  00FED3  65                 	db	101	;'e'
  6452  00FED4  6C                 	db	108	;'l'
  6453  00FED5  65                 	db	101	;'e'
  6454  00FED6  63                 	db	99	;'c'
  6455  00FED7  74                 	db	116	;'t'
  6456  00FED8  20                 	db	32
  6457  00FED9  54                 	db	84	;'T'
  6458  00FEDA  72                 	db	114	;'r'
  6459  00FEDB  69                 	db	105	;'i'
  6460  00FEDC  61                 	db	97	;'a'
  6461  00FEDD  64                 	db	100	;'d'
  6462  00FEDE  3A                 	db	58	;':'
  6463  00FEDF  00                 	db	0
  6464  00FEE0                     STR_27:
  6465  00FEE0  44                 	db	68	;'D'
  6466  00FEE1  72                 	db	114	;'r'
  6467  00FEE2  75                 	db	117	;'u'
  6468  00FEE3  6D                 	db	109	;'m'
  6469  00FEE4  20                 	db	32
  6470  00FEE5  43                 	db	67	;'C'
  6471  00FEE6  43                 	db	67	;'C'
  6472  00FEE7  20                 	db	32
  6473  00FEE8  4D                 	db	77	;'M'
  6474  00FEE9  6F                 	db	111	;'o'
  6475  00FEEA  64                 	db	100	;'d'
  6476  00FEEB  65                 	db	101	;'e'
  6477  00FEEC  3A                 	db	58	;':'
  6478  00FEED  00                 	db	0
  6479  00FEEE                     STR_46:
  6480  00FEEE  4F                 	db	79	;'O'
  6481  00FEEF  63                 	db	99	;'c'
  6482  00FEF0  74                 	db	116	;'t'
  6483  00FEF1  61                 	db	97	;'a'
  6484  00FEF2  76                 	db	118	;'v'
  6485  00FEF3  65                 	db	101	;'e'
  6486  00FEF4  20                 	db	32
  6487  00FEF5  52                 	db	82	;'R'
  6488  00FEF6  61                 	db	97	;'a'
  6489  00FEF7  6E                 	db	110	;'n'
  6490  00FEF8  67                 	db	103	;'g'
  6491  00FEF9  65                 	db	101	;'e'
  6492  00FEFA  3A                 	db	58	;':'
  6493  00FEFB  00                 	db	0
  6494  00FEFC                     STR_60:
  6495  00FEFC  4F                 	db	79	;'O'
  6496  00FEFD  4E                 	db	78	;'N'
  6497  00FEFE  45                 	db	69	;'E'
  6498  00FEFF  20                 	db	32
  6499  00FF00  41                 	db	65	;'A'
  6500  00FF01  54                 	db	84	;'T'
  6501  00FF02  20                 	db	32
  6502  00FF03  41                 	db	65	;'A'
  6503  00FF04  20                 	db	32
  6504  00FF05  54                 	db	84	;'T'
  6505  00FF06  49                 	db	73	;'I'
  6506  00FF07  4D                 	db	77	;'M'
  6507  00FF08  45                 	db	69	;'E'
  6508  00FF09  00                 	db	0
  6509  00FF0A                     STR_55:
  6510  00FF0A  41                 	db	65	;'A'
  6511  00FF0B  75                 	db	117	;'u'
  6512  00FF0C  74                 	db	116	;'t'
  6513  00FF0D  6F                 	db	111	;'o'
  6514  00FF0E  20                 	db	32
  6515  00FF0F  4C                 	db	76	;'L'
  6516  00FF10  61                 	db	97	;'a'
  6517  00FF11  74                 	db	116	;'t'
  6518  00FF12  63                 	db	99	;'c'
  6519  00FF13  68                 	db	104	;'h'
  6520  00FF14  20                 	db	32
  6521  00FF15  4F                 	db	79	;'O'
  6522  00FF16  4E                 	db	78	;'N'
  6523  00FF17  00                 	db	0
  6524  00FF18                     STR_23:
  6525  00FF18  45                 	db	69	;'E'
  6526  00FF19  78                 	db	120	;'x'
  6527  00FF1A  69                 	db	105	;'i'
  6528  00FF1B  74                 	db	116	;'t'
  6529  00FF1C  20                 	db	32
  6530  00FF1D  45                 	db	69	;'E'
  6531  00FF1E  45                 	db	69	;'E'
  6532  00FF1F  50                 	db	80	;'P'
  6533  00FF20  52                 	db	82	;'R'
  6534  00FF21  4F                 	db	79	;'O'
  6535  00FF22  4D                 	db	77	;'M'
  6536  00FF23  21                 	db	33
  6537  00FF24  00                 	db	0
  6538  00FF25                     STR_38:
  6539  00FF25  52                 	db	82	;'R'
  6540  00FF26  65                 	db	101	;'e'
  6541  00FF27  62                 	db	98	;'b'
  6542  00FF28  6F                 	db	111	;'o'
  6543  00FF29  6F                 	db	111	;'o'
  6544  00FF2A  74                 	db	116	;'t'
  6545  00FF2B  69                 	db	105	;'i'
  6546  00FF2C  6E                 	db	110	;'n'
  6547  00FF2D  67                 	db	103	;'g'
  6548  00FF2E  2E                 	db	46
  6549  00FF2F  2E                 	db	46
  6550  00FF30  2E                 	db	46
  6551  00FF31  00                 	db	0
  6552  00FF32                     STR_48:
  6553  00FF32  4E                 	db	78	;'N'
  6554  00FF33  6F                 	db	111	;'o'
  6555  00FF34  74                 	db	116	;'t'
  6556  00FF35  65                 	db	101	;'e'
  6557  00FF36  20                 	db	32
  6558  00FF37  4C                 	db	76	;'L'
  6559  00FF38  65                 	db	101	;'e'
  6560  00FF39  6E                 	db	110	;'n'
  6561  00FF3A  67                 	db	103	;'g'
  6562  00FF3B  74                 	db	116	;'t'
  6563  00FF3C  68                 	db	104	;'h'
  6564  00FF3D  3A                 	db	58	;':'
  6565  00FF3E  00                 	db	0
  6566  00FF3F                     STR_65:
  6567  00FF3F  53                 	db	83	;'S'
  6568  00FF40  6B                 	db	107	;'k'
  6569  00FF41  69                 	db	105	;'i'
  6570  00FF42  70                 	db	112	;'p'
  6571  00FF43  20                 	db	32
  6572  00FF44  46                 	db	70	;'F'
  6573  00FF45  2F                 	db	47
  6574  00FF46  4C                 	db	76	;'L'
  6575  00FF47  20                 	db	32
  6576  00FF48  4F                 	db	79	;'O'
  6577  00FF49  46                 	db	70	;'F'
  6578  00FF4A  46                 	db	70	;'F'
  6579  00FF4B  00                 	db	0
  6580  00FF4C                     STR_34:
  6581  00FF4C  50                 	db	80	;'P'
  6582  00FF4D  72                 	db	114	;'r'
  6583  00FF4E  6F                 	db	111	;'o'
  6584  00FF4F  67                 	db	103	;'g'
  6585  00FF50  72                 	db	114	;'r'
  6586  00FF51  61                 	db	97	;'a'
  6587  00FF52  6D                 	db	109	;'m'
  6588  00FF53  20                 	db	32
  6589  00FF54  23                 	db	35
  6590  00FF55  3A                 	db	58	;':'
  6591  00FF56  20                 	db	32
  6592  00FF57  00                 	db	0
  6593  00FF58                     STR_24:
  6594  00FF58  45                 	db	69	;'E'
  6595  00FF59  6E                 	db	110	;'n'
  6596  00FF5A  74                 	db	116	;'t'
  6597  00FF5B  65                 	db	101	;'e'
  6598  00FF5C  72                 	db	114	;'r'
  6599  00FF5D  20                 	db	32
  6600  00FF5E  4D                 	db	77	;'M'
  6601  00FF5F  6F                 	db	111	;'o'
  6602  00FF60  64                 	db	100	;'d'
  6603  00FF61  65                 	db	101	;'e'
  6604  00FF62  3A                 	db	58	;':'
  6605  00FF63  00                 	db	0
  6606  00FF64                     STR_58:
  6607  00FF64  55                 	db	85	;'U'
  6608  00FF65  4E                 	db	78	;'N'
  6609  00FF66  4C                 	db	76	;'L'
  6610  00FF67  41                 	db	65	;'A'
  6611  00FF68  54                 	db	84	;'T'
  6612  00FF69  43                 	db	67	;'C'
  6613  00FF6A  48                 	db	72	;'H'
  6614  00FF6B  20                 	db	32
  6615  00FF6C  41                 	db	65	;'A'
  6616  00FF6D  4C                 	db	76	;'L'
  6617  00FF6E  4C                 	db	76	;'L'
  6618  00FF6F  00                 	db	0
  6619  00FF70                     STR_66:
  6620  00FF70  53                 	db	83	;'S'
  6621  00FF71  6B                 	db	107	;'k'
  6622  00FF72  69                 	db	105	;'i'
  6623  00FF73  70                 	db	112	;'p'
  6624  00FF74  20                 	db	32
  6625  00FF75  46                 	db	70	;'F'
  6626  00FF76  2F                 	db	47
  6627  00FF77  4C                 	db	76	;'L'
  6628  00FF78  20                 	db	32
  6629  00FF79  4F                 	db	79	;'O'
  6630  00FF7A  4E                 	db	78	;'N'
  6631  00FF7B  00                 	db	0
  6632  00FF7C                     STR_68:
  6633  00FF7C  46                 	db	70	;'F'
  6634  00FF7D  49                 	db	73	;'I'
  6635  00FF7E  4E                 	db	78	;'N'
  6636  00FF7F  49                 	db	73	;'I'
  6637  00FF80  53                 	db	83	;'S'
  6638  00FF81  48                 	db	72	;'H'
  6639  00FF82  20                 	db	32
  6640  00FF83  4C                 	db	76	;'L'
  6641  00FF84  41                 	db	65	;'A'
  6642  00FF85  53                 	db	83	;'S'
  6643  00FF86  54                 	db	84	;'T'
  6644  00FF87  00                 	db	0
  6645  00FF88                     STR_14:
  6646  00FF88  20                 	db	32
  6647  00FF89  50                 	db	80	;'P'
  6648  00FF8A  49                 	db	73	;'I'
  6649  00FF8B  54                 	db	84	;'T'
  6650  00FF8C  43                 	db	67	;'C'
  6651  00FF8D  48                 	db	72	;'H'
  6652  00FF8E  42                 	db	66	;'B'
  6653  00FF8F  45                 	db	69	;'E'
  6654  00FF90  4E                 	db	78	;'N'
  6655  00FF91  44                 	db	68	;'D'
  6656  00FF92  00                 	db	0
  6657  00FF93                     STR_15:
  6658  00FF93  20                 	db	32
  6659  00FF94  4D                 	db	77	;'M'
  6660  00FF95  4F                 	db	79	;'O'
  6661  00FF96  44                 	db	68	;'D'
  6662  00FF97  2E                 	db	46
  6663  00FF98  57                 	db	87	;'W'
  6664  00FF99  48                 	db	72	;'H'
  6665  00FF9A  45                 	db	69	;'E'
  6666  00FF9B  45                 	db	69	;'E'
  6667  00FF9C  4C                 	db	76	;'L'
  6668  00FF9D  00                 	db	0
  6669  00FF9E                     STR_13:
  6670  00FF9E  20                 	db	32
  6671  00FF9F  20                 	db	32
  6672  00FFA0  56                 	db	86	;'V'
  6673  00FFA1  45                 	db	69	;'E'
  6674  00FFA2  4C                 	db	76	;'L'
  6675  00FFA3  4F                 	db	79	;'O'
  6676  00FFA4  43                 	db	67	;'C'
  6677  00FFA5  49                 	db	73	;'I'
  6678  00FFA6  54                 	db	84	;'T'
  6679  00FFA7  59                 	db	89	;'Y'
  6680  00FFA8  00                 	db	0
  6681  00FFA9                     STR_67:
  6682  00FFA9  49                 	db	73	;'I'
  6683  00FFAA  4D                 	db	77	;'M'
  6684  00FFAB  4D                 	db	77	;'M'
  6685  00FFAC  45                 	db	69	;'E'
  6686  00FFAD  44                 	db	68	;'D'
  6687  00FFAE  49                 	db	73	;'I'
  6688  00FFAF  41                 	db	65	;'A'
  6689  00FFB0  54                 	db	84	;'T'
  6690  00FFB1  45                 	db	69	;'E'
  6691  00FFB2  00                 	db	0
  6692  00FFB3                     STR_36:
  6693  00FFB3  4C                 	db	76	;'L'
  6694  00FFB4  6F                 	db	111	;'o'
  6695  00FFB5  61                 	db	97	;'a'
  6696  00FFB6  64                 	db	100	;'d'
  6697  00FFB7  20                 	db	32
  6698  00FFB8  23                 	db	35
  6699  00FFB9  3A                 	db	58	;':'
  6700  00FFBA  00                 	db	0
  6701  00FFBB                     STR_35:
  6702  00FFBB  53                 	db	83	;'S'
  6703  00FFBC  61                 	db	97	;'a'
  6704  00FFBD  76                 	db	118	;'v'
  6705  00FFBE  65                 	db	101	;'e'
  6706  00FFBF  20                 	db	32
  6707  00FFC0  23                 	db	35
  6708  00FFC1  3A                 	db	58	;':'
  6709  00FFC2  00                 	db	0
  6710  00FFC3                     STR_20:
  6711  00FFC3  53                 	db	83	;'S'
  6712  00FFC4  65                 	db	101	;'e'
  6713  00FFC5  74                 	db	116	;'t'
  6714  00FFC6  21                 	db	33
  6715  00FFC7  00                 	db	0
  6716  00FFC8                     STR_61:
  6717  00FFC8  20                 	db	32
  6718  00FFC9  4F                 	db	79	;'O'
  6719  00FFCA  6E                 	db	110	;'n'
  6720  00FFCB  45                 	db	69	;'E'
  6721  00FFCC  00                 	db	0
  6722  00FFCD                     STR_41:
  6723  00FFCD  41                 	db	65	;'A'
  6724  00FFCE  6F                 	db	111	;'o'
  6725  00FFCF  46                 	db	70	;'F'
  6726  00FFD0  46                 	db	70	;'F'
  6727  00FFD1  00                 	db	0
  6728  00FFD2                     STR_43:
  6729  00FFD2  20                 	db	32
  6730  00FFD3  41                 	db	65	;'A'
  6731  00FFD4  72                 	db	114	;'r'
  6732  00FFD5  50                 	db	80	;'P'
  6733  00FFD6  00                 	db	0
  6734  00FFD7                     STR_8:
  6735  00FFD7  74                 	db	116	;'t'
  6736  00FFD8  45                 	db	69	;'E'
  6737  00FFD9  53                 	db	83	;'S'
  6738  00FFDA  74                 	db	116	;'t'
  6739  00FFDB  00                 	db	0
  6740  00FFDC                     STR_5:
  6741  00FFDC  20                 	db	32
  6742  00FFDD  6F                 	db	111	;'o'
  6743  00FFDE  46                 	db	70	;'F'
  6744  00FFDF  46                 	db	70	;'F'
  6745  00FFE0  00                 	db	0
  6746  00FFE1                     STR_2:
  6747  00FFE1  20                 	db	32
  6748  00FFE2  64                 	db	100	;'d'
  6749  00FFE3  45                 	db	69	;'E'
  6750  00FFE4  4C                 	db	76	;'L'
  6751  00FFE5  00                 	db	0
  6752  00FFE6                     STR_1:
  6753  00FFE6  48                 	db	72	;'H'
  6754  00FFE7  6F                 	db	111	;'o'
  6755  00FFE8  4C                 	db	76	;'L'
  6756  00FFE9  64                 	db	100	;'d'
  6757  00FFEA  00                 	db	0
  6758  00FFEB                     STR_6:
  6759  00FFEB  72                 	db	114	;'r'
  6760  00FFEC  41                 	db	65	;'A'
  6761  00FFED  6E                 	db	110	;'n'
  6762  00FFEE  64                 	db	100	;'d'
  6763  00FFEF  00                 	db	0
  6764  00FFF0                     STR_4:
  6765  00FFF0  41                 	db	65	;'A'
  6766  00FFF1  75                 	db	117	;'u'
  6767  00FFF2  74                 	db	116	;'t'
  6768  00FFF3  6F                 	db	111	;'o'
  6769  00FFF4  00                 	db	0
  6770  00FFF5                     STR_7:
  6771  00FFF5  72                 	db	114	;'r'
  6772  00FFF6  53                 	db	83	;'S'
  6773  00FFF7  45                 	db	69	;'E'
  6774  00FFF8  74                 	db	116	;'t'
  6775  00FFF9  00                 	db	0
  6776  00FFFA                     STR_3:
  6777  00FFFA  4C                 	db	76	;'L'
  6778  00FFFB  61                 	db	97	;'a'
  6779  00FFFC  53                 	db	83	;'S'
  6780  00FFFD  74                 	db	116	;'t'
  6781  00FFFE  00                 	db	0
  6782  0000                     
  6783                           ; #config settings
  6784  00FFFF  00                 	db	0	; dummy byte at the end
  6785  0000                     
  6786                           	psect	cinit
  6787  006AA0                     __pcinit:
  6788                           	opt stack 0
  6789  006AA0                     start_initialization:
  6790                           	opt stack 0
  6791  006AA0                     __initialization:
  6792                           	opt stack 0
  6793                           
  6794                           ; Initialize objects allocated to BANK3 (105 bytes)
  6795                           ; load TBLPTR registers with __pidataBANK3
  6796  006AA0  0E88               	movlw	low __pidataBANK3
  6797  006AA2  6EF6               	movwf	tblptrl,c
  6798  006AA4  0E8C               	movlw	high __pidataBANK3
  6799  006AA6  6EF7               	movwf	tblptrh,c
  6800  006AA8  0E00               	movlw	low (__pidataBANK3 shr (0+16))
  6801  006AAA  6EF8               	movwf	tblptru,c
  6802  006AAC  EE03  F000         	lfsr	0,__pdataBANK3
  6803  006AB0  EE20 F069          	lfsr	2,105
  6804  006AB4                     copy_data0:
  6805  006AB4  0009               	tblrd		*+
  6806  006AB6  CFF5 FFEE          	movff	tablat,postinc0
  6807  006ABA  50DD               	movf	postdec2,w,c
  6808  006ABC  50D9               	movf	fsr2l,w,c
  6809  006ABE  E1FA               	bnz	copy_data0
  6810                           
  6811                           ; Initialize objects allocated to BANK2 (93 bytes)
  6812                           ; load TBLPTR registers with __pidataBANK2
  6813  006AC0  0E44               	movlw	low __pidataBANK2
  6814  006AC2  6EF6               	movwf	tblptrl,c
  6815  006AC4  0E8F               	movlw	high __pidataBANK2
  6816  006AC6  6EF7               	movwf	tblptrh,c
  6817  006AC8  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  6818  006ACA  6EF8               	movwf	tblptru,c
  6819  006ACC  EE02  F088         	lfsr	0,__pdataBANK2
  6820  006AD0  EE20 F05D          	lfsr	2,93
  6821  006AD4                     copy_data1:
  6822  006AD4  0009               	tblrd		*+
  6823  006AD6  CFF5 FFEE          	movff	tablat,postinc0
  6824  006ADA  50DD               	movf	postdec2,w,c
  6825  006ADC  50D9               	movf	fsr2l,w,c
  6826  006ADE  E1FA               	bnz	copy_data1
  6827                           
  6828                           ; Initialize objects allocated to BANK1 (25 bytes)
  6829                           ; load TBLPTR registers with __pidataBANK1
  6830  006AE0  0E06               	movlw	low __pidataBANK1
  6831  006AE2  6EF6               	movwf	tblptrl,c
  6832  006AE4  0E98               	movlw	high __pidataBANK1
  6833  006AE6  6EF7               	movwf	tblptrh,c
  6834  006AE8  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  6835  006AEA  6EF8               	movwf	tblptru,c
  6836  006AEC  EE01  F0E7         	lfsr	0,__pdataBANK1
  6837  006AF0  EE20 F019          	lfsr	2,25
  6838  006AF4                     copy_data2:
  6839  006AF4  0009               	tblrd		*+
  6840  006AF6  CFF5 FFEE          	movff	tablat,postinc0
  6841  006AFA  50DD               	movf	postdec2,w,c
  6842  006AFC  50D9               	movf	fsr2l,w,c
  6843  006AFE  E1FA               	bnz	copy_data2
  6844                           
  6845                           ; Initialize objects allocated to BANK0 (11 bytes)
  6846                           ; load TBLPTR registers with __pidataBANK0
  6847  006B00  0E9E               	movlw	low __pidataBANK0
  6848  006B02  6EF6               	movwf	tblptrl,c
  6849  006B04  0E98               	movlw	high __pidataBANK0
  6850  006B06  6EF7               	movwf	tblptrh,c
  6851  006B08  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  6852  006B0A  6EF8               	movwf	tblptru,c
  6853  006B0C  EE00  F0F5         	lfsr	0,__pdataBANK0
  6854  006B10  EE20 F00B          	lfsr	2,11
  6855  006B14                     copy_data3:
  6856  006B14  0009               	tblrd		*+
  6857  006B16  CFF5 FFEE          	movff	tablat,postinc0
  6858  006B1A  50DD               	movf	postdec2,w,c
  6859  006B1C  50D9               	movf	fsr2l,w,c
  6860  006B1E  E1FA               	bnz	copy_data3
  6861                           
  6862                           ; Initialize objects allocated to COMRAM (8 bytes)
  6863                           ; load TBLPTR registers with __pidataCOMRAM
  6864  006B20  0EA9               	movlw	low __pidataCOMRAM
  6865  006B22  6EF6               	movwf	tblptrl,c
  6866  006B24  0E98               	movlw	high __pidataCOMRAM
  6867  006B26  6EF7               	movwf	tblptrh,c
  6868  006B28  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  6869  006B2A  6EF8               	movwf	tblptru,c
  6870  006B2C  EE00  F04B         	lfsr	0,__pdataCOMRAM
  6871  006B30  EE20 F008          	lfsr	2,8
  6872  006B34                     copy_data4:
  6873  006B34  0009               	tblrd		*+
  6874  006B36  CFF5 FFEE          	movff	tablat,postinc0
  6875  006B3A  50DD               	movf	postdec2,w,c
  6876  006B3C  50D9               	movf	fsr2l,w,c
  6877  006B3E  E1FA               	bnz	copy_data4
  6878                           
  6879                           ; Clear objects allocated to BANK3 (32 bytes)
  6880  006B40  EE03  F069         	lfsr	0,__pbssBANK3
  6881  006B44  0E20               	movlw	32
  6882  006B46                     clear_0:
  6883  006B46  6AEE               	clrf	postinc0,c
  6884  006B48  06E8               	decf	wreg,f,c
  6885  006B4A  E1FD               	bnz	clear_0
  6886                           
  6887                           ; Clear objects allocated to BANK2 (136 bytes)
  6888  006B4C  EE02  F000         	lfsr	0,__pbssBANK2
  6889  006B50  0E88               	movlw	136
  6890  006B52                     clear_1:
  6891  006B52  6AEE               	clrf	postinc0,c
  6892  006B54  06E8               	decf	wreg,f,c
  6893  006B56  E1FD               	bnz	clear_1
  6894                           
  6895                           ; Clear objects allocated to BANK1 (151 bytes)
  6896  006B58  EE01  F000         	lfsr	0,__pbssBANK1
  6897  006B5C  0E97               	movlw	151
  6898  006B5E                     clear_2:
  6899  006B5E  6AEE               	clrf	postinc0,c
  6900  006B60  06E8               	decf	wreg,f,c
  6901  006B62  E1FD               	bnz	clear_2
  6902                           
  6903                           ; Clear objects allocated to BANK0 (41 bytes)
  6904  006B64  EE00  F0CC         	lfsr	0,__pbssBANK0
  6905  006B68  0E29               	movlw	41
  6906  006B6A                     clear_3:
  6907  006B6A  6AEE               	clrf	postinc0,c
  6908  006B6C  06E8               	decf	wreg,f,c
  6909  006B6E  E1FD               	bnz	clear_3
  6910                           
  6911                           ; Clear objects allocated to BITCOMRAM (6 bytes)
  6912  006B70  6A06               	clrf	((__pbitbssCOMRAM/(0+8)+5))& (0+255),c
  6913  006B72  6A05               	clrf	((__pbitbssCOMRAM/(0+8)+4))& (0+255),c
  6914  006B74  6A04               	clrf	((__pbitbssCOMRAM/(0+8)+3))& (0+255),c
  6915  006B76  6A03               	clrf	((__pbitbssCOMRAM/(0+8)+2))& (0+255),c
  6916  006B78  6A02               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
  6917  006B7A  6A01               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  6918                           
  6919                           ; Clear objects allocated to COMRAM (21 bytes)
  6920  006B7C  EE00  F02A         	lfsr	0,__pbssCOMRAM
  6921  006B80  0E15               	movlw	21
  6922  006B82                     clear_4:
  6923  006B82  6AEE               	clrf	postinc0,c
  6924  006B84  06E8               	decf	wreg,f,c
  6925  006B86  E1FD               	bnz	clear_4
  6926  006B88                     end_of_initialization:
  6927                           	opt stack 0
  6928  006B88                     __end_of__initialization:
  6929                           	opt stack 0
  6930  006B88  0E00               	movlw	low (__Lmediumconst shr (0+16))
  6931  006B8A  6EF8               	movwf	tblptru,c
  6932  006B8C  0100               	movlb	0
  6933  006B8E  EFD6  F034         	goto	_main	;jump to C main() function
  6934                           tblptru	equ	0xFF8
  6935                           tblptrh	equ	0xFF7
  6936                           tblptrl	equ	0xFF6
  6937                           tablat	equ	0xFF5
  6938                           postinc0	equ	0xFEE
  6939                           wreg	equ	0xFE8
  6940                           postdec2	equ	0xFDD
  6941                           fsr2l	equ	0xFD9
  6942                           
  6943                           	psect	bitbssCOMRAM
  6944  000008                     __pbitbssCOMRAM:
  6945                           	opt stack 0
  6946  000008                     readPotentiometers@FIRST_READING:
  6947                           	opt stack 0
  6948  000008                     	ds	1
  6949  000009                     int2string@isNegative:
  6950                           	opt stack 0
  6951  000009                     	ds	1
  6952  00000A                     doTheUnLatch@once:
  6953                           	opt stack 0
  6954  00000A                     	ds	1
  6955  00000B                     keyboardTranspose@keyPress:
  6956                           	opt stack 0
  6957  00000B                     	ds	1
  6958  00000C                     _CONTROL_MODE:
  6959                           	opt stack 0
  6960  00000C                     	ds	1
  6961  00000D                     _DRUM_MODE:
  6962                           	opt stack 0
  6963  00000D                     	ds	1
  6964  00000E                     _DISPLAY_STEP_NUMBER:
  6965                           	opt stack 0
  6966  00000E                     	ds	1
  6967  00000F                     _flag2:
  6968                           	opt stack 0
  6969  00000F                     	ds	1
  6970  000010                     _flag1:
  6971                           	opt stack 0
  6972  000010                     	ds	1
  6973  000011                     _note_off_was_sent:
  6974                           	opt stack 0
  6975  000011                     	ds	1
  6976  000012                     _octave_overflow:
  6977                           	opt stack 0
  6978  000012                     	ds	1
  6979  000013                     _overflow:
  6980                           	opt stack 0
  6981  000013                     	ds	1
  6982  000014                     _suppress_note_off:
  6983                           	opt stack 0
  6984  000014                     	ds	1
  6985  000015                     _suppress_note_on:
  6986                           	opt stack 0
  6987  000015                     	ds	1
  6988  000016                     _finishLastNote:
  6989                           	opt stack 0
  6990  000016                     	ds	1
  6991  000017                     _LAST_NOTE_MODE_RESET:
  6992                           	opt stack 0
  6993  000017                     	ds	1
  6994  000018                     _LAST_NOTE_MODE_TRANSPOSE:
  6995                           	opt stack 0
  6996  000018                     	ds	1
  6997  000019                     _LAST_NOTE_MODE_KEY_RELEASE:
  6998                           	opt stack 0
  6999  000019                     	ds	1
  7000  00001A                     _LAST_NOTE_MODE_KEY_PRESS:
  7001                           	opt stack 0
  7002  00001A                     	ds	1
  7003  00001B                     _lastNoteMode:
  7004                           	opt stack 0
  7005  00001B                     	ds	1
  7006  00001C                     _skipFirstLast:
  7007                           	opt stack 0
  7008  00001C                     	ds	1
  7009  00001D                     _AUTO_RANDOMIZE:
  7010                           	opt stack 0
  7011  00001D                     	ds	1
  7012  00001E                     _latch_was_pressed:
  7013                           	opt stack 0
  7014  00001E                     	ds	1
  7015  00001F                     _AUTO_LATCH:
  7016                           	opt stack 0
  7017  00001F                     	ds	1
  7018  000020                     _UN_LATCH_MODE:
  7019                           	opt stack 0
  7020  000020                     	ds	1
  7021  000021                     _LATCH:
  7022                           	opt stack 0
  7023  000021                     	ds	1
  7024  000022                     _RESET_ON_KEY_RELEASE:
  7025                           	opt stack 0
  7026  000022                     	ds	1
  7027  000023                     _RESET_ON_KEY_PRESS:
  7028                           	opt stack 0
  7029  000023                     	ds	1
  7030  000024                     _ARPEGGIO_ON:
  7031                           	opt stack 0
  7032  000024                     	ds	1
  7033  000025                     _SORT_DIRECTION:
  7034                           	opt stack 0
  7035  000025                     	ds	1
  7036  000026                     _TRANSPOSE_MODE:
  7037                           	opt stack 0
  7038  000026                     	ds	1
  7039  000027                     _print_row_2_once:
  7040                           	opt stack 0
  7041  000027                     	ds	1
  7042  000028                     _lcd_print_once:
  7043                           	opt stack 0
  7044  000028                     	ds	1
  7045  000029                     _which_functions_are_unblocked:
  7046                           	opt stack 0
  7047  000029                     	ds	1
  7048  00002A                     _encoder_click:
  7049                           	opt stack 0
  7050  00002A                     	ds	1
  7051  00002B                     _encoderPolarity:
  7052                           	opt stack 0
  7053  00002B                     	ds	1
  7054  00002C                     _encoderB:
  7055                           	opt stack 0
  7056  00002C                     	ds	1
  7057  00002D                     _encoderA:
  7058                           	opt stack 0
  7059  00002D                     	ds	1
  7060  00002E                     _POT_MODE:
  7061                           	opt stack 0
  7062  00002E                     	ds	1
  7063  00002F                     _ON_OFF:
  7064                           	opt stack 0
  7065  00002F                     	ds	1
  7066  000030                     _light_decimal_points:
  7067                           	opt stack 0
  7068  000030                     	ds	1
  7069  000031                     _CONTROL_CHANGE_IS_BEING_SENT:
  7070                           	opt stack 0
  7071  000031                     	ds	1
  7072  000032                     _ARPEGGIO_IS_PLAYING:
  7073                           	opt stack 0
  7074  000032                     	ds	1
  7075                           tblptru	equ	0xFF8
  7076                           tblptrh	equ	0xFF7
  7077                           tblptrl	equ	0xFF6
  7078                           tablat	equ	0xFF5
  7079                           postinc0	equ	0xFEE
  7080                           wreg	equ	0xFE8
  7081                           postdec2	equ	0xFDD
  7082                           fsr2l	equ	0xFD9
  7083                           
  7084                           	psect	bssCOMRAM
  7085  00002A                     __pbssCOMRAM:
  7086                           	opt stack 0
  7087  00002A                     _arpeggioPtr:
  7088                           	opt stack 0
  7089  00002A                     	ds	2
  7090  00002C                     key_press_release_note_off@temp:
  7091                           	opt stack 0
  7092  00002C                     	ds	1
  7093  00002D                     _toggle_state:
  7094                           	opt stack 0
  7095  00002D                     	ds	1
  7096  00002E                     _TIMER_OVERFLOWS:
  7097                           	opt stack 0
  7098  00002E                     	ds	1
  7099  00002F                     _NUM_NOTES_PRESSED:
  7100                           	opt stack 0
  7101  00002F                     	ds	1
  7102  000030                     _parallel:
  7103                           	opt stack 0
  7104  000030                     	ds	1
  7105  000031                     _stored_octave:
  7106                           	opt stack 0
  7107  000031                     	ds	1
  7108  000032                     _which_octave:
  7109                           	opt stack 0
  7110  000032                     	ds	1
  7111  000033                     _which_note:
  7112                           	opt stack 0
  7113  000033                     	ds	1
  7114  000034                     _startingDirection:
  7115                           	opt stack 0
  7116  000034                     	ds	1
  7117  000035                     _ARPEGGIO_TYPE:
  7118                           	opt stack 0
  7119  000035                     	ds	1
  7120  000036                     _encoder_direction:
  7121                           	opt stack 0
  7122  000036                     	ds	1
  7123  000037                     _drum:
  7124                           	opt stack 0
  7125  000037                     	ds	1
  7126  000038                     _drum_button_state_last:
  7127                           	opt stack 0
  7128  000038                     	ds	1
  7129  000039                     _drum_button_state_now:
  7130                           	opt stack 0
  7131  000039                     	ds	1
  7132  00003A                     _DIGIT_MODE:
  7133                           	opt stack 0
  7134  00003A                     	ds	1
  7135  00003B                     _semitone:
  7136                           	opt stack 0
  7137  00003B                     	ds	1
  7138  00003C                     _noteNumber:
  7139                           	opt stack 0
  7140  00003C                     	ds	1
  7141  00003D                     _statusByte:
  7142                           	opt stack 0
  7143  00003D                     	ds	1
  7144  00003E                     _channel:
  7145                           	opt stack 0
  7146  00003E                     	ds	1
  7147                           tblptru	equ	0xFF8
  7148                           tblptrh	equ	0xFF7
  7149                           tblptrl	equ	0xFF6
  7150                           tablat	equ	0xFF5
  7151                           postinc0	equ	0xFEE
  7152                           wreg	equ	0xFE8
  7153                           postdec2	equ	0xFDD
  7154                           fsr2l	equ	0xFD9
  7155                           
  7156                           	psect	dataCOMRAM
  7157  00004B                     __pdataCOMRAM:
  7158                           	opt stack 0
  7159  00004B                     _number_to_display:
  7160                           	opt stack 0
  7161  00004B                     	ds	2
  7162  00004D                     _NOTE_LENGTH_PULSES:
  7163                           	opt stack 0
  7164  00004D                     	ds	1
  7165  00004E                     _OCTAVES:
  7166                           	opt stack 0
  7167  00004E                     	ds	1
  7168  00004F                     _which_screen:
  7169                           	opt stack 0
  7170  00004F                     	ds	1
  7171  000050                     _octave:
  7172                           	opt stack 0
  7173  000050                     	ds	1
  7174  000051                     _velocity:
  7175                           	opt stack 0
  7176  000051                     	ds	1
  7177  000052                     _drumchannel:
  7178                           	opt stack 0
  7179  000052                     	ds	1
  7180                           tblptru	equ	0xFF8
  7181                           tblptrh	equ	0xFF7
  7182                           tblptrl	equ	0xFF6
  7183                           tablat	equ	0xFF5
  7184                           postinc0	equ	0xFEE
  7185                           wreg	equ	0xFE8
  7186                           postdec2	equ	0xFDD
  7187                           fsr2l	equ	0xFD9
  7188                           
  7189                           	psect	bssBANK0
  7190  0000CC                     __pbssBANK0:
  7191                           	opt stack 0
  7192  0000CC                     displayDigits@digit:
  7193                           	opt stack 0
  7194  0000CC                     	ds	4
  7195  0000D0                     _keyboard:
  7196                           	opt stack 0
  7197  0000D0                     	ds	4
  7198  0000D4                     _button_state_last:
  7199                           	opt stack 0
  7200  0000D4                     	ds	4
  7201  0000D8                     _button_state_now:
  7202                           	opt stack 0
  7203  0000D8                     	ds	4
  7204  0000DC                     _arpeggiatorLastNoteModeMenu:
  7205                           	opt stack 0
  7206  0000DC                     	ds	3
  7207  0000DF                     _arpeggiatorMenu:
  7208                           	opt stack 0
  7209  0000DF                     	ds	3
  7210  0000E2                     _savesMenu:
  7211                           	opt stack 0
  7212  0000E2                     	ds	3
  7213  0000E5                     _keyboardMenu:
  7214                           	opt stack 0
  7215  0000E5                     	ds	3
  7216  0000E8                     displayString@letter_counter:
  7217                           	opt stack 0
  7218  0000E8                     	ds	1
  7219  0000E9                     displayDigits@digit_counter:
  7220                           	opt stack 0
  7221  0000E9                     	ds	1
  7222  0000EA                     keyboardTranspose@semitone_temp:
  7223                           	opt stack 0
  7224  0000EA                     	ds	1
  7225  0000EB                     _ARRAY_INDEX:
  7226                           	opt stack 0
  7227  0000EB                     	ds	1
  7228  0000EC                     _last_note:
  7229                           	opt stack 0
  7230  0000EC                     	ds	1
  7231  0000ED                     _state:
  7232                           	opt stack 0
  7233  0000ED                     	ds	1
  7234  0000EE                     _DISPLAY_MODE:
  7235                           	opt stack 0
  7236  0000EE                     	ds	1
  7237  0000EF                     _which_seventh:
  7238                           	opt stack 0
  7239  0000EF                     	ds	1
  7240  0000F0                     _which_triad:
  7241                           	opt stack 0
  7242  0000F0                     	ds	1
  7243  0000F1                     _which_mode:
  7244                           	opt stack 0
  7245  0000F1                     	ds	1
  7246  0000F2                     _KEYBOARD_MODE:
  7247                           	opt stack 0
  7248  0000F2                     	ds	1
  7249  0000F3                     _patch_number:
  7250                           	opt stack 0
  7251  0000F3                     	ds	1
  7252  0000F4                     _GLOBAL_CC_NUMBER:
  7253                           	opt stack 0
  7254  0000F4                     	ds	1
  7255                           tblptru	equ	0xFF8
  7256                           tblptrh	equ	0xFF7
  7257                           tblptrl	equ	0xFF6
  7258                           tablat	equ	0xFF5
  7259                           postinc0	equ	0xFEE
  7260                           wreg	equ	0xFE8
  7261                           postdec2	equ	0xFDD
  7262                           fsr2l	equ	0xFD9
  7263                           
  7264                           	psect	dataBANK0
  7265  0000F5                     __pdataBANK0:
  7266                           	opt stack 0
  7267  0000F5                     _DRUM_CC:
  7268                           	opt stack 0
  7269  0000F5                     	ds	8
  7270  0000FD                     _iterator_focus:
  7271                           	opt stack 0
  7272  0000FD                     	ds	1
  7273  0000FE                     _ema_integer:
  7274                           	opt stack 0
  7275  0000FE                     	ds	1
  7276  0000FF                     _BPM:
  7277                           	opt stack 0
  7278  0000FF                     	ds	1
  7279                           tblptru	equ	0xFF8
  7280                           tblptrh	equ	0xFF7
  7281                           tblptrl	equ	0xFF6
  7282                           tablat	equ	0xFF5
  7283                           postinc0	equ	0xFEE
  7284                           wreg	equ	0xFE8
  7285                           postdec2	equ	0xFDD
  7286                           fsr2l	equ	0xFD9
  7287                           
  7288                           	psect	bssBANK1
  7289  000100                     __pbssBANK1:
  7290                           	opt stack 0
  7291  000100                     displayString@letter:
  7292                           	opt stack 0
  7293  000100                     	ds	4
  7294  000104                     _ema_alpha:
  7295                           	opt stack 0
  7296  000104                     	ds	4
  7297  000108                     _arpeggiatorLastNoteModeResetMenu:
  7298                           	opt stack 0
  7299  000108                     	ds	3
  7300  00010B                     _arpeggiatorLastNoteModeTransposeMenu:
  7301                           	opt stack 0
  7302  00010B                     	ds	3
  7303  00010E                     _arpeggiatorLastNoteModeKeyReleaseMenu:
  7304                           	opt stack 0
  7305  00010E                     	ds	3
  7306  000111                     _arpeggiatorLastNoteModeKeyPressMenu:
  7307                           	opt stack 0
  7308  000111                     	ds	3
  7309  000114                     _arpeggiatorSkipFirstLastMenu:
  7310                           	opt stack 0
  7311  000114                     	ds	3
  7312  000117                     _arpeggiatorRandomizeTypeMenu:
  7313                           	opt stack 0
  7314  000117                     	ds	3
  7315  00011A                     _arpeggiatorRandomizeSkipMenu:
  7316                           	opt stack 0
  7317  00011A                     	ds	3
  7318  00011D                     _arpeggiatorUnLatchModeMenu:
  7319                           	opt stack 0
  7320  00011D                     	ds	3
  7321  000120                     _arpeggiatorAutoLatchOnOffMenu:
  7322                           	opt stack 0
  7323  000120                     	ds	3
  7324  000123                     _arpeggiatorLatchOnOffMenu:
  7325                           	opt stack 0
  7326  000123                     	ds	3
  7327  000126                     _arpeggiatorLatchMenu:
  7328                           	opt stack 0
  7329  000126                     	ds	3
  7330  000129                     _arpeggiatorNoteLengthMenu:
  7331                           	opt stack 0
  7332  000129                     	ds	3
  7333  00012C                     _arpeggiatorTypeMenu:
  7334                           	opt stack 0
  7335  00012C                     	ds	3
  7336  00012F                     _arpeggiatorOctavesMenu:
  7337                           	opt stack 0
  7338  00012F                     	ds	3
  7339  000132                     _arpeggiatorTempoMenu:
  7340                           	opt stack 0
  7341  000132                     	ds	3
  7342  000135                     _arpeggiatorOnOffMenu:
  7343                           	opt stack 0
  7344  000135                     	ds	3
  7345  000138                     _encoderPolarityMenu:
  7346                           	opt stack 0
  7347  000138                     	ds	3
  7348  00013B                     _eepromMenu:
  7349                           	opt stack 0
  7350  00013B                     	ds	3
  7351  00013E                     _drumChannelMenu:
  7352                           	opt stack 0
  7353  00013E                     	ds	3
  7354  000141                     _mainChannelMenu:
  7355                           	opt stack 0
  7356  000141                     	ds	3
  7357  000144                     _programChangeMenu:
  7358                           	opt stack 0
  7359  000144                     	ds	3
  7360  000147                     _midiChannelMenu:
  7361                           	opt stack 0
  7362  000147                     	ds	3
  7363  00014A                     _joystickCCMenu:
  7364                           	opt stack 0
  7365  00014A                     	ds	3
  7366  00014D                     _slidepotsCCMenu:
  7367                           	opt stack 0
  7368  00014D                     	ds	3
  7369  000150                     _potsCCMenu:
  7370                           	opt stack 0
  7371  000150                     	ds	3
  7372  000153                     _potsAlphaMenu:
  7373                           	opt stack 0
  7374  000153                     	ds	3
  7375  000156                     _potsResoMenu:
  7376                           	opt stack 0
  7377  000156                     	ds	3
  7378  000159                     _potsMenu:
  7379                           	opt stack 0
  7380  000159                     	ds	3
  7381  00015C                     _drumCCMenu:
  7382                           	opt stack 0
  7383  00015C                     	ds	3
  7384  00015F                     _drumNNMenu:
  7385                           	opt stack 0
  7386  00015F                     	ds	3
  7387  000162                     _drumCCTypeMenu:
  7388                           	opt stack 0
  7389  000162                     	ds	3
  7390  000165                     _drumMenu:
  7391                           	opt stack 0
  7392  000165                     	ds	3
  7393  000168                     _transposeMenu:
  7394                           	opt stack 0
  7395  000168                     	ds	3
  7396  00016B                     _seventhMenu:
  7397                           	opt stack 0
  7398  00016B                     	ds	3
  7399  00016E                     _triadMenu:
  7400                           	opt stack 0
  7401  00016E                     	ds	3
  7402  000171                     _modeMenu:
  7403                           	opt stack 0
  7404  000171                     	ds	3
  7405  000174                     _mainMenu:
  7406                           	opt stack 0
  7407  000174                     	ds	3
  7408  000177                     displayDigits@number_to_display_temp:
  7409                           	opt stack 0
  7410  000177                     	ds	2
  7411  000179                     displayDigits@number_to_display_last:
  7412                           	opt stack 0
  7413  000179                     	ds	2
  7414  00017B                     _TIMER_PRELOAD:
  7415                           	opt stack 0
  7416  00017B                     	ds	2
  7417  00017D                     _last_octave:
  7418                           	opt stack 0
  7419  00017D                     	ds	1
  7420  00017E                     _encoder_state_last:
  7421                           	opt stack 0
  7422  00017E                     	ds	1
  7423  00017F                     _encoder_state_now:
  7424                           	opt stack 0
  7425  00017F                     	ds	1
  7426  000180                     _GLOBAL_CC_VALUE:
  7427                           	opt stack 0
  7428  000180                     	ds	1
  7429  000181                     _GLOBAL_STATUS_BYTE:
  7430                           	opt stack 0
  7431  000181                     	ds	1
  7432  000182                     _ARPEGGIO:
  7433                           	opt stack 0
  7434  000182                     	ds	16
  7435  000192                     _string2display:
  7436                           	opt stack 0
  7437  000192                     	ds	5
  7438                           tblptru	equ	0xFF8
  7439                           tblptrh	equ	0xFF7
  7440                           tblptrl	equ	0xFF6
  7441                           tablat	equ	0xFF5
  7442                           postinc0	equ	0xFEE
  7443                           wreg	equ	0xFE8
  7444                           postdec2	equ	0xFDD
  7445                           fsr2l	equ	0xFD9
  7446                           
  7447                           	psect	dataBANK1
  7448  0001E7                     __pdataBANK1:
  7449                           	opt stack 0
  7450  0001E7                     _DRUM_NOTE:
  7451                           	opt stack 0
  7452  0001E7                     	ds	8
  7453  0001EF                     _randx:
  7454                           	opt stack 0
  7455  0001EF                     	ds	4
  7456  0001F3                     _HYST_VAL:
  7457                           	opt stack 0
  7458  0001F3                     	ds	2
  7459  0001F5                     _PRESCALER:
  7460                           	opt stack 0
  7461  0001F5                     	ds	1
  7462  0001F6                     _PPQN:
  7463                           	opt stack 0
  7464  0001F6                     	ds	1
  7465  0001F7                     _command:
  7466                           	opt stack 0
  7467  0001F7                     	ds	1
  7468  0001F8                     _string_to_display:
  7469                           	opt stack 0
  7470  0001F8                     	ds	5
  7471  0001FD                     _major_triad:
  7472                           	opt stack 0
  7473  0001FD                     	ds	3
  7474                           tblptru	equ	0xFF8
  7475                           tblptrh	equ	0xFF7
  7476                           tblptrl	equ	0xFF6
  7477                           tablat	equ	0xFF5
  7478                           postinc0	equ	0xFEE
  7479                           wreg	equ	0xFE8
  7480                           postdec2	equ	0xFDD
  7481                           fsr2l	equ	0xFD9
  7482                           
  7483                           	psect	bssBANK2
  7484  000200                     __pbssBANK2:
  7485                           	opt stack 0
  7486  000200                     _potentiometer_filtered_last:
  7487                           	opt stack 0
  7488  000200                     	ds	32
  7489  000220                     _potentiometer_filtered_now:
  7490                           	opt stack 0
  7491  000220                     	ds	32
  7492  000240                     _ema_sum:
  7493                           	opt stack 0
  7494  000240                     	ds	32
  7495  000260                     readPotentiometers@count:
  7496                           	opt stack 0
  7497  000260                     	ds	4
  7498  000264                     _count_ISR:
  7499                           	opt stack 0
  7500  000264                     	ds	4
  7501  000268                     _ARPEGGIO_RANDOM:
  7502                           	opt stack 0
  7503  000268                     	ds	16
  7504  000278                     _ARPEGGIO_SORTED:
  7505                           	opt stack 0
  7506  000278                     	ds	16
  7507                           tblptru	equ	0xFF8
  7508                           tblptrh	equ	0xFF7
  7509                           tblptrl	equ	0xFF6
  7510                           tablat	equ	0xFF5
  7511                           postinc0	equ	0xFEE
  7512                           wreg	equ	0xFE8
  7513                           postdec2	equ	0xFDD
  7514                           fsr2l	equ	0xFD9
  7515                           
  7516                           	psect	dataBANK2
  7517  000288                     __pdataBANK2:
  7518                           	opt stack 0
  7519  000288                     _inputPotsArray:
  7520                           	opt stack 0
  7521  000288                     	ds	48
  7522  0002B8                     _NOTE_LENGTH_PULSES_ARRAY:
  7523                           	opt stack 0
  7524  0002B8                     	ds	12
  7525  0002C4                     _number_of_interrupts:
  7526                           	opt stack 0
  7527  0002C4                     	ds	4
  7528  0002C8                     _diminished_7th:
  7529                           	opt stack 0
  7530  0002C8                     	ds	4
  7531  0002CC                     _half_diminished_7th:
  7532                           	opt stack 0
  7533  0002CC                     	ds	4
  7534  0002D0                     _minor_7th:
  7535                           	opt stack 0
  7536  0002D0                     	ds	4
  7537  0002D4                     _major_7th:
  7538                           	opt stack 0
  7539  0002D4                     	ds	4
  7540  0002D8                     _dominant_7th:
  7541                           	opt stack 0
  7542  0002D8                     	ds	4
  7543  0002DC                     _diminished_triad:
  7544                           	opt stack 0
  7545  0002DC                     	ds	3
  7546  0002DF                     _augmented_triad:
  7547                           	opt stack 0
  7548  0002DF                     	ds	3
  7549  0002E2                     _minor_triad:
  7550                           	opt stack 0
  7551  0002E2                     	ds	3
  7552                           tblptru	equ	0xFF8
  7553                           tblptrh	equ	0xFF7
  7554                           tblptrl	equ	0xFF6
  7555                           tablat	equ	0xFF5
  7556                           postinc0	equ	0xFEE
  7557                           wreg	equ	0xFE8
  7558                           postdec2	equ	0xFDD
  7559                           fsr2l	equ	0xFD9
  7560                           
  7561                           	psect	bssBANK3
  7562  000369                     __pbssBANK3:
  7563                           	opt stack 0
  7564  000369                     _potentiometer_raw:
  7565                           	opt stack 0
  7566  000369                     	ds	32
  7567                           tblptru	equ	0xFF8
  7568                           tblptrh	equ	0xFF7
  7569                           tblptrl	equ	0xFF6
  7570                           tablat	equ	0xFF5
  7571                           postinc0	equ	0xFEE
  7572                           wreg	equ	0xFE8
  7573                           postdec2	equ	0xFDD
  7574                           fsr2l	equ	0xFD9
  7575                           
  7576                           	psect	dataBANK3
  7577  000300                     __pdataBANK3:
  7578                           	opt stack 0
  7579  000300                     _menuArray:
  7580                           	opt stack 0
  7581  000300                     	ds	105
  7582                           tblptru	equ	0xFF8
  7583                           tblptrh	equ	0xFF7
  7584                           tblptrl	equ	0xFF6
  7585                           tablat	equ	0xFF5
  7586                           postinc0	equ	0xFEE
  7587                           wreg	equ	0xFE8
  7588                           postdec2	equ	0xFDD
  7589                           fsr2l	equ	0xFD9
  7590                           
  7591                           	psect	cstackBANK2
  7592  0002E5                     __pcstackBANK2:
  7593                           	opt stack 0
  7594  0002E5                     selectSlotOnBoot@slot:
  7595                           	opt stack 0
  7596                           
  7597                           ; 1 bytes @ 0x0
  7598  0002E5                     	ds	1
  7599  0002E6                     ??_main:
  7600                           
  7601                           ; 1 bytes @ 0x1
  7602  0002E6                     	ds	1
  7603                           tblptru	equ	0xFF8
  7604                           tblptrh	equ	0xFF7
  7605                           tblptrl	equ	0xFF6
  7606                           tablat	equ	0xFF5
  7607                           postinc0	equ	0xFEE
  7608                           wreg	equ	0xFE8
  7609                           postdec2	equ	0xFDD
  7610                           fsr2l	equ	0xFD9
  7611                           
  7612                           	psect	cstackBANK1
  7613  000197                     __pcstackBANK1:
  7614                           	opt stack 0
  7615  000197                     _readPotentiometers$5899:
  7616                           	opt stack 0
  7617  000197                     loadFromEEPROM@to_load:
  7618                           	opt stack 0
  7619                           
  7620                           ; 75 bytes @ 0x0
  7621  000197                     	ds	4
  7622  00019B                     readPotentiometers@i_3429:
  7623                           	opt stack 0
  7624                           
  7625                           ; 1 bytes @ 0x4
  7626  00019B                     	ds	1
  7627  00019C                     readPotentiometers@i:
  7628                           	opt stack 0
  7629                           
  7630                           ; 1 bytes @ 0x5
  7631  00019C                     	ds	1
  7632  00019D                     readPotentiometers@i_3430:
  7633                           	opt stack 0
  7634                           
  7635                           ; 1 bytes @ 0x6
  7636  00019D                     	ds	1
  7637  00019E                     ??_analogInputs:
  7638                           
  7639                           ; 1 bytes @ 0x7
  7640  00019E                     	ds	68
  7641  0001E2                     loadFromEEPROM@baseAddress:
  7642                           	opt stack 0
  7643                           
  7644                           ; 2 bytes @ 0x4B
  7645  0001E2                     	ds	2
  7646  0001E4                     loadFromEEPROM@slotNumber:
  7647                           	opt stack 0
  7648                           
  7649                           ; 1 bytes @ 0x4D
  7650  0001E4                     	ds	1
  7651  0001E5                     loadFromEEPROM@byte_count:
  7652                           	opt stack 0
  7653                           
  7654                           ; 2 bytes @ 0x4E
  7655  0001E5                     	ds	2
  7656                           tblptru	equ	0xFF8
  7657                           tblptrh	equ	0xFF7
  7658                           tblptrl	equ	0xFF6
  7659                           tablat	equ	0xFF5
  7660                           postinc0	equ	0xFEE
  7661                           wreg	equ	0xFE8
  7662                           postdec2	equ	0xFDD
  7663                           fsr2l	equ	0xFD9
  7664                           
  7665                           	psect	cstackBANK0
  7666  000060                     __pcstackBANK0:
  7667                           	opt stack 0
  7668  000060                     ??_rotateArrayLeft:
  7669  000060                     ??_processEncoderBuxton:
  7670  000060                     ??_buttonInputsSerial:
  7671  000060                     ?_ADC_Read:
  7672                           	opt stack 0
  7673  000060                     ?___wmul:
  7674                           	opt stack 0
  7675  000060                     ?___aldiv:
  7676                           	opt stack 0
  7677  000060                     ?___xxtofl:
  7678                           	opt stack 0
  7679  000060                     Lcd_SetBit@data_bit:
  7680                           	opt stack 0
  7681  000060                     noteOffDrum@pitch:
  7682                           	opt stack 0
  7683  000060                     noteOnDrum@pitch:
  7684                           	opt stack 0
  7685  000060                     controlChange@controllerNumber:
  7686                           	opt stack 0
  7687  000060                     pitchBend@lowByte:
  7688                           	opt stack 0
  7689  000060                     programChange@data1:
  7690                           	opt stack 0
  7691  000060                     setControllerResolution@i:
  7692                           	opt stack 0
  7693  000060                     wait_one_pulse@mode:
  7694                           	opt stack 0
  7695  000060                     copy_array@i:
  7696                           	opt stack 0
  7697  000060                     printThisNumber@n:
  7698                           	opt stack 0
  7699  000060                     int2string@number:
  7700                           	opt stack 0
  7701  000060                     Read_b_eep@badd:
  7702                           	opt stack 0
  7703  000060                     Write_b_eep@badd:
  7704                           	opt stack 0
  7705  000060                     ___wmul@multiplier:
  7706                           	opt stack 0
  7707  000060                     srand@x:
  7708                           	opt stack 0
  7709  000060                     strcpy@to:
  7710                           	opt stack 0
  7711  000060                     ___aldiv@dividend:
  7712                           	opt stack 0
  7713  000060                     ___xxtofl@val:
  7714                           	opt stack 0
  7715                           
  7716                           ; 4 bytes @ 0x0
  7717  000060                     	ds	1
  7718  000061                     ??_Lcd_Cmd:
  7719  000061                     ??_playTriad:
  7720  000061                     ??_playSeventh:
  7721  000061                     Lcd_Print_Char@Lower_Nibble:
  7722                           	opt stack 0
  7723  000061                     noteOffDrum@velocity:
  7724                           	opt stack 0
  7725  000061                     noteOnDrum@velocity:
  7726                           	opt stack 0
  7727  000061                     controlChange@value:
  7728                           	opt stack 0
  7729  000061                     pitchBend@highByte:
  7730                           	opt stack 0
  7731  000061                     programChange@data2:
  7732                           	opt stack 0
  7733  000061                     playDiatonicTriadMajor@index:
  7734                           	opt stack 0
  7735  000061                     playDiatonicSeventhMajor@index:
  7736                           	opt stack 0
  7737  000061                     playDiatonicTriadMinor@index:
  7738                           	opt stack 0
  7739  000061                     playDiatonicSeventhMinor@index:
  7740                           	opt stack 0
  7741  000061                     findArrayIndex@pitch_of_key_release:
  7742                           	opt stack 0
  7743                           
  7744                           ; 1 bytes @ 0x1
  7745  000061                     	ds	1
  7746  000062                     ??_playDiatonicTriadMajor:
  7747  000062                     ??_playDiatonicTriadMinor:
  7748  000062                     ??_playDiatonicSeventhMajor:
  7749  000062                     ??_playDiatonicSeventhMinor:
  7750  000062                     ??_ADC_Read:
  7751  000062                     ??_int2string:
  7752  000062                     Lcd_Cmd@a:
  7753                           	opt stack 0
  7754  000062                     Lcd_Print_Char@Upper_Nibble:
  7755                           	opt stack 0
  7756  000062                     noteOffDrum@channel:
  7757                           	opt stack 0
  7758  000062                     noteOnDrum@channel:
  7759                           	opt stack 0
  7760  000062                     controlChange@channel:
  7761                           	opt stack 0
  7762  000062                     pitchBend@channel:
  7763                           	opt stack 0
  7764  000062                     programChange@channel:
  7765                           	opt stack 0
  7766  000062                     findArrayIndex@i:
  7767                           	opt stack 0
  7768  000062                     Write_b_eep@bdat:
  7769                           	opt stack 0
  7770  000062                     ___wmul@multiplicand:
  7771                           	opt stack 0
  7772  000062                     strcpy@from:
  7773                           	opt stack 0
  7774                           
  7775                           ; 2 bytes @ 0x2
  7776  000062                     	ds	1
  7777  000063                     ??_processPotentiometers:
  7778  000063                     ??_Lcd_Start:
  7779  000063                     Lcd_Set_Cursor@b:
  7780                           	opt stack 0
  7781  000063                     Lcd_Print_Char@data:
  7782                           	opt stack 0
  7783  000063                     Write_b_eep@GIE_BIT_VAL:
  7784                           	opt stack 0
  7785                           
  7786                           ; 1 bytes @ 0x3
  7787  000063                     	ds	1
  7788  000064                     ??___xxtofl:
  7789  000064                     Lcd_Set_Cursor@a:
  7790                           	opt stack 0
  7791  000064                     ADC_Read@adc_channel:
  7792                           	opt stack 0
  7793  000064                     buttonInputsSerial@i:
  7794                           	opt stack 0
  7795  000064                     Lcd_Start@i:
  7796                           	opt stack 0
  7797  000064                     Lcd_Print_Char@i:
  7798                           	opt stack 0
  7799  000064                     int2string@number_to_display_temp:
  7800                           	opt stack 0
  7801  000064                     ___wmul@product:
  7802                           	opt stack 0
  7803  000064                     strcpy@cp:
  7804                           	opt stack 0
  7805  000064                     ___aldiv@divisor:
  7806                           	opt stack 0
  7807  000064                     saveToEEPROM@to_save:
  7808                           	opt stack 0
  7809                           
  7810                           ; 75 bytes @ 0x4
  7811  000064                     	ds	1
  7812  000065                     Lcd_Set_Cursor@z:
  7813                           	opt stack 0
  7814  000065                     buttonInputsSerial@i_4472:
  7815                           	opt stack 0
  7816  000065                     playTriad@triad_p:
  7817                           	opt stack 0
  7818  000065                     playSeventh@seventh_p:
  7819                           	opt stack 0
  7820                           
  7821                           ; 2 bytes @ 0x5
  7822  000065                     	ds	1
  7823  000066                     ??_displayTest:
  7824  000066                     ??_initializeMenuArray:
  7825  000066                     Lcd_Set_Cursor@y:
  7826                           	opt stack 0
  7827  000066                     playDiatonicTriadMajor@i:
  7828                           	opt stack 0
  7829  000066                     playDiatonicSeventhMajor@i:
  7830                           	opt stack 0
  7831  000066                     playDiatonicTriadMinor@pitch:
  7832                           	opt stack 0
  7833  000066                     playDiatonicSeventhMinor@pitch:
  7834                           	opt stack 0
  7835  000066                     processPotentiometers@lowByte:
  7836                           	opt stack 0
  7837  000066                     Lcd_Print_Char@i_59:
  7838                           	opt stack 0
  7839                           
  7840                           ; 2 bytes @ 0x6
  7841  000066                     	ds	1
  7842  000067                     Lcd_Set_Cursor@temp:
  7843                           	opt stack 0
  7844  000067                     playTriad@i:
  7845                           	opt stack 0
  7846  000067                     playSeventh@i:
  7847                           	opt stack 0
  7848  000067                     playDiatonicTriadMajor@i_1710:
  7849                           	opt stack 0
  7850  000067                     playDiatonicSeventhMajor@i_1715:
  7851                           	opt stack 0
  7852  000067                     playDiatonicTriadMinor@i:
  7853                           	opt stack 0
  7854  000067                     playDiatonicSeventhMinor@i:
  7855                           	opt stack 0
  7856  000067                     initializeMenuArray@NumberOfElements:
  7857                           	opt stack 0
  7858  000067                     processPotentiometers@highByte:
  7859                           	opt stack 0
  7860  000067                     rotateArrayLeft@array_index:
  7861                           	opt stack 0
  7862                           
  7863                           ; 1 bytes @ 0x7
  7864  000067                     	ds	1
  7865  000068                     playTriad@i_1688:
  7866                           	opt stack 0
  7867  000068                     playSeventh@i_1693:
  7868                           	opt stack 0
  7869  000068                     playDiatonicTriadMajor@pitch:
  7870                           	opt stack 0
  7871  000068                     playDiatonicSeventhMajor@pitch:
  7872                           	opt stack 0
  7873  000068                     playDiatonicTriadMinor@i_1720:
  7874                           	opt stack 0
  7875  000068                     playDiatonicSeventhMinor@i_1725:
  7876                           	opt stack 0
  7877  000068                     initializeMenuArray@i:
  7878                           	opt stack 0
  7879  000068                     processPotentiometers@i:
  7880                           	opt stack 0
  7881  000068                     rotateArrayLeft@i:
  7882                           	opt stack 0
  7883  000068                     ___aldiv@counter:
  7884                           	opt stack 0
  7885  000068                     ___xxtofl@sign:
  7886                           	opt stack 0
  7887  000068                     Lcd_Print_String@a:
  7888                           	opt stack 0
  7889                           
  7890                           ; 2 bytes @ 0x8
  7891  000068                     	ds	1
  7892  000069                     ??_add_notes_to_arpeggio:
  7893  000069                     playTriad@pitch:
  7894                           	opt stack 0
  7895  000069                     playSeventh@pitch:
  7896                           	opt stack 0
  7897  000069                     delete_notes_from_arpeggio@pitch:
  7898                           	opt stack 0
  7899  000069                     ___aldiv@sign:
  7900                           	opt stack 0
  7901  000069                     ___xxtofl@exp:
  7902                           	opt stack 0
  7903                           
  7904                           ; 1 bytes @ 0x9
  7905  000069                     	ds	1
  7906  00006A                     ??_Lcd_Print_String:
  7907  00006A                     delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT:
  7908                           	opt stack 0
  7909  00006A                     ___aldiv@quotient:
  7910                           	opt stack 0
  7911  00006A                     ___xxtofl@arg:
  7912                           	opt stack 0
  7913                           
  7914                           ; 4 bytes @ 0xA
  7915  00006A                     	ds	2
  7916  00006C                     Lcd_Print_String@i:
  7917                           	opt stack 0
  7918                           
  7919                           ; 2 bytes @ 0xC
  7920  00006C                     	ds	2
  7921  00006E                     ??_exitFunction:
  7922  00006E                     ??_exitSave:
  7923  00006E                     ??_exitLoad:
  7924  00006E                     ??_eepromExit:
  7925  00006E                     ??_Function_G_3:
  7926  00006E                     ?___flmul:
  7927                           	opt stack 0
  7928  00006E                     ?_map:
  7929                           	opt stack 0
  7930  00006E                     map@x:
  7931                           	opt stack 0
  7932  00006E                     ___flmul@b:
  7933                           	opt stack 0
  7934                           
  7935                           ; 4 bytes @ 0xE
  7936  00006E                     	ds	1
  7937  00006F                     setControllerNumbers@array_index:
  7938                           	opt stack 0
  7939                           
  7940                           ; 1 bytes @ 0xF
  7941  00006F                     	ds	1
  7942  000070                     add_notes_to_arpeggio@pitch:
  7943                           	opt stack 0
  7944                           
  7945                           ; 1 bytes @ 0x10
  7946  000070                     	ds	1
  7947  000071                     ??_playThisNote:
  7948  000071                     playThisNotePentatonic@index:
  7949                           	opt stack 0
  7950  000071                     playThisNote8@index:
  7951                           	opt stack 0
  7952                           
  7953                           ; 1 bytes @ 0x11
  7954  000071                     	ds	1
  7955  000072                     ??_playThisNotePentatonic:
  7956  000072                     ??_playThisNote8:
  7957  000072                     map@in_min:
  7958                           	opt stack 0
  7959  000072                     ___flmul@a:
  7960                           	opt stack 0
  7961                           
  7962                           ; 4 bytes @ 0x12
  7963  000072                     	ds	3
  7964  000075                     playThisNote@pitch:
  7965                           	opt stack 0
  7966                           
  7967                           ; 1 bytes @ 0x15
  7968  000075                     	ds	1
  7969  000076                     ??___flmul:
  7970  000076                     playThisNotePentatonic@temp_pitch:
  7971                           	opt stack 0
  7972  000076                     keyboard_all_note_efficient@pitch:
  7973                           	opt stack 0
  7974  000076                     playThisNote8@pitch:
  7975                           	opt stack 0
  7976  000076                     map@in_max:
  7977                           	opt stack 0
  7978                           
  7979                           ; 4 bytes @ 0x16
  7980  000076                     	ds	1
  7981  000077                     keyboard_sharps_only_efficient@pitch:
  7982                           	opt stack 0
  7983  000077                     playThisNote8@temp_pitch:
  7984                           	opt stack 0
  7985                           
  7986                           ; 1 bytes @ 0x17
  7987  000077                     	ds	1
  7988  000078                     keyboard_sharps_only_efficient@index:
  7989                           	opt stack 0
  7990  000078                     playThisNote8@mode_p:
  7991                           	opt stack 0
  7992                           
  7993                           ; 2 bytes @ 0x18
  7994  000078                     	ds	2
  7995  00007A                     ??_doTheUnLatch:
  7996  00007A                     keyboard_eight_note_efficient@pitch:
  7997                           	opt stack 0
  7998  00007A                     ___flmul@sign:
  7999                           	opt stack 0
  8000  00007A                     map@out_min:
  8001                           	opt stack 0
  8002                           
  8003                           ; 4 bytes @ 0x1A
  8004  00007A                     	ds	1
  8005  00007B                     keyboard_eight_note_efficient@index:
  8006                           	opt stack 0
  8007  00007B                     ___flmul@aexp:
  8008                           	opt stack 0
  8009                           
  8010                           ; 1 bytes @ 0x1B
  8011  00007B                     	ds	1
  8012  00007C                     ___flmul@grs:
  8013                           	opt stack 0
  8014                           
  8015                           ; 4 bytes @ 0x1C
  8016  00007C                     	ds	2
  8017  00007E                     ??_processOctave:
  8018  00007E                     map@out_max:
  8019                           	opt stack 0
  8020                           
  8021                           ; 4 bytes @ 0x1E
  8022  00007E                     	ds	2
  8023  000080                     ___flmul@bexp:
  8024                           	opt stack 0
  8025                           
  8026                           ; 1 bytes @ 0x20
  8027  000080                     	ds	1
  8028  000081                     ___flmul@prod:
  8029                           	opt stack 0
  8030                           
  8031                           ; 4 bytes @ 0x21
  8032  000081                     	ds	1
  8033  000082                     ??_map:
  8034                           
  8035                           ; 1 bytes @ 0x22
  8036  000082                     	ds	3
  8037  000085                     ___flmul@temp:
  8038                           	opt stack 0
  8039                           
  8040                           ; 2 bytes @ 0x25
  8041  000085                     	ds	2
  8042  000087                     ?___fldiv:
  8043                           	opt stack 0
  8044  000087                     ___fldiv@b:
  8045                           	opt stack 0
  8046                           
  8047                           ; 4 bytes @ 0x27
  8048  000087                     	ds	4
  8049  00008B                     ___fldiv@a:
  8050                           	opt stack 0
  8051                           
  8052                           ; 4 bytes @ 0x2B
  8053  00008B                     	ds	4
  8054  00008F                     ??___fldiv:
  8055                           
  8056                           ; 1 bytes @ 0x2F
  8057  00008F                     	ds	4
  8058  000093                     ___fldiv@sign:
  8059                           	opt stack 0
  8060                           
  8061                           ; 1 bytes @ 0x33
  8062  000093                     	ds	1
  8063  000094                     ___fldiv@rem:
  8064                           	opt stack 0
  8065                           
  8066                           ; 4 bytes @ 0x34
  8067  000094                     	ds	4
  8068  000098                     ___fldiv@new_exp:
  8069                           	opt stack 0
  8070                           
  8071                           ; 2 bytes @ 0x38
  8072  000098                     	ds	2
  8073  00009A                     ___fldiv@grs:
  8074                           	opt stack 0
  8075                           
  8076                           ; 4 bytes @ 0x3A
  8077  00009A                     	ds	4
  8078  00009E                     ___fldiv@bexp:
  8079                           	opt stack 0
  8080                           
  8081                           ; 1 bytes @ 0x3E
  8082  00009E                     	ds	1
  8083  00009F                     ___fldiv@aexp:
  8084                           	opt stack 0
  8085                           
  8086                           ; 1 bytes @ 0x3F
  8087  00009F                     	ds	1
  8088  0000A0                     ?___flneg:
  8089                           	opt stack 0
  8090  0000A0                     ___flneg@f1:
  8091                           	opt stack 0
  8092                           
  8093                           ; 4 bytes @ 0x40
  8094  0000A0                     	ds	4
  8095  0000A4                     ?___fladd:
  8096                           	opt stack 0
  8097  0000A4                     ___fladd@b:
  8098                           	opt stack 0
  8099                           
  8100                           ; 4 bytes @ 0x44
  8101  0000A4                     	ds	4
  8102  0000A8                     ___fladd@a:
  8103                           	opt stack 0
  8104                           
  8105                           ; 4 bytes @ 0x48
  8106  0000A8                     	ds	4
  8107  0000AC                     ??___fladd:
  8108                           
  8109                           ; 1 bytes @ 0x4C
  8110  0000AC                     	ds	3
  8111  0000AF                     saveToEEPROM@baseAddress:
  8112                           	opt stack 0
  8113                           
  8114                           ; 2 bytes @ 0x4F
  8115  0000AF                     	ds	2
  8116  0000B1                     saveToEEPROM@slotNumber:
  8117                           	opt stack 0
  8118                           
  8119                           ; 1 bytes @ 0x51
  8120  0000B1                     	ds	1
  8121  0000B2                     saveToEEPROM@byte_count:
  8122                           	opt stack 0
  8123                           
  8124                           ; 2 bytes @ 0x52
  8125  0000B2                     	ds	2
  8126  0000B4                     initializeSaveSlotsOnce@initializeSlotsOnce:
  8127                           	opt stack 0
  8128  0000B4                     ___fladd@signs:
  8129                           	opt stack 0
  8130                           
  8131                           ; 1 bytes @ 0x54
  8132  0000B4                     	ds	1
  8133  0000B5                     ___fladd@aexp:
  8134                           	opt stack 0
  8135                           
  8136                           ; 1 bytes @ 0x55
  8137  0000B5                     	ds	1
  8138  0000B6                     ___fladd@bexp:
  8139                           	opt stack 0
  8140                           
  8141                           ; 1 bytes @ 0x56
  8142  0000B6                     	ds	1
  8143  0000B7                     ___fladd@grs:
  8144                           	opt stack 0
  8145                           
  8146                           ; 1 bytes @ 0x57
  8147  0000B7                     	ds	1
  8148  0000B8                     ?___fltol:
  8149                           	opt stack 0
  8150  0000B8                     ___fltol@f1:
  8151                           	opt stack 0
  8152                           
  8153                           ; 4 bytes @ 0x58
  8154  0000B8                     	ds	4
  8155  0000BC                     ??___fltol:
  8156                           
  8157                           ; 1 bytes @ 0x5C
  8158  0000BC                     	ds	4
  8159  0000C0                     ___fltol@sign1:
  8160                           	opt stack 0
  8161                           
  8162                           ; 1 bytes @ 0x60
  8163  0000C0                     	ds	1
  8164  0000C1                     ___fltol@exp1:
  8165                           	opt stack 0
  8166                           
  8167                           ; 1 bytes @ 0x61
  8168  0000C1                     	ds	1
  8169  0000C2                     ??_readPotentiometers:
  8170  0000C2                     ?_calculate_pulse_length:
  8171                           	opt stack 0
  8172                           
  8173                           ; 2 bytes @ 0x62
  8174  0000C2                     	ds	2
  8175  0000C4                     calculate_pulse_length@s_tick:
  8176                           	opt stack 0
  8177                           
  8178                           ; 4 bytes @ 0x64
  8179  0000C4                     	ds	3
  8180  0000C7                     ??_Function_C_2:
  8181  0000C7                     ??_Function_C_3:
  8182  0000C7                     Function_D_3@array_index:
  8183                           	opt stack 0
  8184  0000C7                     Function_D_4@array_index:
  8185                           	opt stack 0
  8186  0000C7                     Function_D_5@array_index:
  8187                           	opt stack 0
  8188  0000C7                     Function_H_1@temp:
  8189                           	opt stack 0
  8190  0000C7                     Function_H_6_1@temp:
  8191                           	opt stack 0
  8192                           
  8193                           ; 1 bytes @ 0x67
  8194  0000C7                     	ds	1
  8195  0000C8                     Function_C_2@array_index:
  8196                           	opt stack 0
  8197  0000C8                     Function_C_3@array_index:
  8198                           	opt stack 0
  8199  0000C8                     Function_H_5@i:
  8200                           	opt stack 0
  8201  0000C8                     _calculate_pulse_length$5900:
  8202                           	opt stack 0
  8203                           
  8204                           ; 4 bytes @ 0x68
  8205  0000C8                     	ds	1
  8206  0000C9                     
  8207                           ; 1 bytes @ 0x69
  8208  0000C9                     	ds	3
  8209  0000CC                     tblptru	equ	0xFF8
  8210                           tblptrh	equ	0xFF7
  8211                           tblptrl	equ	0xFF6
  8212                           tablat	equ	0xFF5
  8213                           postinc0	equ	0xFEE
  8214                           wreg	equ	0xFE8
  8215                           postdec2	equ	0xFDD
  8216                           fsr2l	equ	0xFD9
  8217                           
  8218                           ; 1 bytes @ 0x6C
  8219                           
  8220                           	psect	cstackCOMRAM
  8221  000007                     __pcstackCOMRAM:
  8222                           	opt stack 0
  8223  000007                     ??_displayDigits:
  8224  000007                     ??_encoderInputsBuxton:
  8225  000007                     
  8226                           ; 1 bytes @ 0x0
  8227  000007                     	ds	1
  8228  000008                     displayString@i:
  8229                           	opt stack 0
  8230                           
  8231                           ; 1 bytes @ 0x1
  8232  000008                     	ds	1
  8233  000009                     sort_pitches@a:
  8234                           	opt stack 0
  8235                           
  8236                           ; 1 bytes @ 0x2
  8237  000009                     	ds	1
  8238  00000A                     encoderInputsBuxton@tempA:
  8239                           	opt stack 0
  8240  00000A                     displayDigits@lowByte:
  8241                           	opt stack 0
  8242  00000A                     sort_pitches@j:
  8243                           	opt stack 0
  8244                           
  8245                           ; 1 bytes @ 0x3
  8246  00000A                     	ds	1
  8247  00000B                     encoderInputsBuxton@tempB:
  8248                           	opt stack 0
  8249  00000B                     displayDigits@highByte:
  8250                           	opt stack 0
  8251  00000B                     sort_pitches@i:
  8252                           	opt stack 0
  8253                           
  8254                           ; 1 bytes @ 0x4
  8255  00000B                     	ds	1
  8256  00000C                     ??_playArpeggio:
  8257  00000C                     encoderInputsBuxton@pinstate:
  8258                           	opt stack 0
  8259                           
  8260                           ; 1 bytes @ 0x5
  8261  00000C                     	ds	6
  8262  000012                     ??_ISR:
  8263                           
  8264                           ; 1 bytes @ 0xB
  8265  000012                     	ds	24
  8266                           tblptru	equ	0xFF8
  8267                           tblptrh	equ	0xFF7
  8268                           tblptrl	equ	0xFF6
  8269                           tablat	equ	0xFF5
  8270                           postinc0	equ	0xFEE
  8271                           wreg	equ	0xFE8
  8272                           postdec2	equ	0xFDD
  8273                           fsr2l	equ	0xFD9
  8274                           
  8275 ;;
  8276 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  8277 ;;
  8278 ;; *************** function _main *****************
  8279 ;; Defined at:
  8280 ;;		line 498 in file "main.c"
  8281 ;; Parameters:    Size  Location     Type
  8282 ;;		None
  8283 ;; Auto vars:     Size  Location     Type
  8284 ;;		None
  8285 ;; Return value:  Size  Location     Type
  8286 ;;                  2  5005[None  ] int 
  8287 ;; Registers used:
  8288 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8289 ;; Tracked objects:
  8290 ;;		On entry : 0/0
  8291 ;;		On exit  : 0/0
  8292 ;;		Unchanged: 0/0
  8293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8296 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
  8297 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
  8298 ;;Total ram usage:        1 bytes
  8299 ;; Hardware stack levels required when called:   20
  8300 ;; This function calls:
  8301 ;;		_ADC_Initialize
  8302 ;;		_Lcd_Start
  8303 ;;		_Read_b_eep
  8304 ;;		_analogInputs
  8305 ;;		_calculate_alpha
  8306 ;;		_calculate_pulse_length
  8307 ;;		_digitalInputs
  8308 ;;		_displayTest
  8309 ;;		_initializeMenuArray
  8310 ;;		_initializeSaveSlotsOnce
  8311 ;;		_menu_lcd
  8312 ;;		_panic_button
  8313 ;;		_processEncoderBuxton
  8314 ;;		_selectSlotOnBoot
  8315 ;;		_setup
  8316 ;;		_srand
  8317 ;; This function is called by:
  8318 ;;		Startup code after reset
  8319 ;; This function uses a non-reentrant model
  8320 ;;
  8321                           
  8322                           	psect	text0
  8323  0069AC                     __ptext0:
  8324                           	opt stack 0
  8325  0069AC                     _main:
  8326                           	opt stack 11
  8327                           
  8328                           ;main.c: 501: setup();
  8329                           
  8330                           ;incstack = 0
  8331  0069AC  EC84  F044         	call	_setup	;wreg free
  8332                           
  8333                           ;main.c: 502: ADC_Initialize();
  8334  0069B0  EC3D  F04C         	call	_ADC_Initialize	;wreg free
  8335                           
  8336                           ;main.c: 503: initializeMenuArray();
  8337  0069B4  EC58  F026         	call	_initializeMenuArray	;wreg free
  8338                           
  8339                           ;main.c: 504: Lcd_Start();
  8340  0069B8  EC0D  F041         	call	_Lcd_Start	;wreg free
  8341                           
  8342                           ;main.c: 507: state = 0x0;
  8343  0069BC  0E00               	movlw	0
  8344  0069BE  0100               	movlb	0	; () banked
  8345  0069C0  6FED               	movwf	_state& (0+255),b
  8346                           
  8347                           ; BSR set to: 0
  8348                           ;main.c: 508: POT_MODE = 0;
  8349  0069C2  9C05               	bcf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
  8350                           
  8351                           ; BSR set to: 0
  8352                           ;main.c: 509: which_screen = MAIN_MENU;
  8353  0069C4  0E02               	movlw	2
  8354  0069C6  6E4F               	movwf	_which_screen,c
  8355                           
  8356                           ; BSR set to: 0
  8357                           ;main.c: 510: menu_lcd();
  8358  0069C8  ECB2  F036         	call	_menu_lcd	;wreg free
  8359                           
  8360                           ;main.c: 511: panic_button();
  8361  0069CC  ECB6  F04B         	call	_panic_button	;wreg free
  8362                           
  8363                           ;main.c: 513: srand(2048);
  8364  0069D0  0E08               	movlw	8
  8365  0069D2  0100               	movlb	0	; () banked
  8366  0069D4  6F61               	movwf	(srand@x+1)& (0+255),b
  8367  0069D6  0E00               	movlw	0
  8368  0069D8  6F60               	movwf	srand@x& (0+255),b
  8369  0069DA  EC47  F04C         	call	_srand	;wreg free
  8370                           
  8371                           ;main.c: 516: encoderPolarity = Read_b_eep(0x02);
  8372  0069DE  0E00               	movlw	0
  8373  0069E0  0100               	movlb	0	; () banked
  8374  0069E2  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  8375  0069E4  0E02               	movlw	2
  8376  0069E6  6F60               	movwf	Read_b_eep@badd& (0+255),b
  8377  0069E8  ECF6  F04B         	call	_Read_b_eep	;wreg free
  8378  0069EC  0102               	movlb	2	; () banked
  8379  0069EE  6FE6               	movwf	??_main& (0+255),b
  8380  0069F0  31E6               	rrcf	??_main& (0+255),w,b
  8381  0069F2  A0D8               	btfss	status,0,c
  8382  0069F4  D002               	goto	u66890
  8383  0069F6  8605               	bsf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
  8384  0069F8  D001               	goto	u66905
  8385  0069FA                     u66890:
  8386  0069FA  9605               	bcf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
  8387  0069FC                     u66905:
  8388                           
  8389                           ;main.c: 518: ema_integer = Read_b_eep(0x03);
  8390  0069FC  0E00               	movlw	0
  8391  0069FE  0100               	movlb	0	; () banked
  8392  006A00  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  8393  006A02  0E03               	movlw	3
  8394  006A04  6F60               	movwf	Read_b_eep@badd& (0+255),b
  8395  006A06  ECF6  F04B         	call	_Read_b_eep	;wreg free
  8396  006A0A  0100               	movlb	0	; () banked
  8397  006A0C  6FFE               	movwf	_ema_integer& (0+255),b
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;main.c: 520: calculate_alpha();
  8401  006A0E  ECF7  F048         	call	_calculate_alpha	;wreg free
  8402                           
  8403                           ;main.c: 527: ARPEGGIO_ON = 0;
  8404  006A12  9804               	bcf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
  8405                           
  8406                           ;main.c: 530: TIMER_PRELOAD = calculate_pulse_length();
  8407  006A14  ECA4  F02E         	call	_calculate_pulse_length	;wreg free
  8408  006A18  C0C2  F17B         	movff	?_calculate_pulse_length,_TIMER_PRELOAD
  8409  006A1C  C0C3  F17C         	movff	?_calculate_pulse_length+1,_TIMER_PRELOAD+1
  8410                           
  8411                           ;main.c: 533: LATCH = 0;
  8412  006A20  9204               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
  8413                           
  8414                           ;main.c: 534: UN_LATCH_MODE = 0;
  8415  006A22  9004               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
  8416                           
  8417                           ;main.c: 536: AUTO_LATCH = 0;
  8418  006A24  9E03               	bcf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
  8419                           
  8420                           ;main.c: 539: AUTO_RANDOMIZE = 0;
  8421  006A26  9A03               	bcf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
  8422                           
  8423                           ;main.c: 543: RESET_ON_KEY_PRESS = 1;
  8424  006A28  8604               	bsf	_RESET_ON_KEY_PRESS/(0+8),_RESET_ON_KEY_PRESS& (0+7),c
  8425                           
  8426                           ;main.c: 544: RESET_ON_KEY_RELEASE = 1;
  8427  006A2A  8404               	bsf	_RESET_ON_KEY_RELEASE/(0+8),_RESET_ON_KEY_RELEASE& (0+7),c
  8428                           
  8429                           ;main.c: 547: LAST_NOTE_MODE_KEY_PRESS = 0;
  8430  006A2C  9403               	bcf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
  8431                           
  8432                           ;main.c: 548: LAST_NOTE_MODE_KEY_RELEASE = 0;
  8433  006A2E  9203               	bcf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
  8434                           
  8435                           ;main.c: 549: LAST_NOTE_MODE_TRANSPOSE = 1;
  8436  006A30  8003               	bsf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
  8437                           
  8438                           ;main.c: 550: LAST_NOTE_MODE_RESET = 1;
  8439  006A32  8E02               	bsf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  8440                           
  8441                           ;main.c: 553: skipFirstLast = 0;
  8442  006A34  9803               	bcf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
  8443                           
  8444                           ;main.c: 556: DISPLAY_STEP_NUMBER = 0;
  8445  006A36  9C01               	bcf	_DISPLAY_STEP_NUMBER/(0+8),_DISPLAY_STEP_NUMBER& (0+7),c
  8446                           
  8447                           ;main.c: 559: TMR0IE = 1;
  8448  006A38  8AF2               	bsf	intcon,5,c	;volatile
  8449                           
  8450                           ;main.c: 560: TMR0ON = 1;
  8451  006A3A  8ED5               	bsf	4053,7,c	;volatile
  8452                           
  8453                           ;main.c: 562: TMR2IE = 1;
  8454  006A3C  829D               	bsf	3997,1,c	;volatile
  8455                           
  8456                           ;main.c: 563: TMR2ON = 1;
  8457  006A3E  84CA               	bsf	4042,2,c	;volatile
  8458                           
  8459                           ;main.c: 565: TMR1IE = 1;
  8460  006A40  809D               	bsf	3997,0,c	;volatile
  8461                           
  8462                           ;main.c: 566: TMR1ON = 1;
  8463  006A42  80CD               	bsf	4045,0,c	;volatile
  8464                           
  8465                           ;main.c: 569: initializeSaveSlotsOnce();
  8466  006A44  EC1C  F049         	call	_initializeSaveSlotsOnce	;wreg free
  8467                           
  8468                           ;main.c: 570: selectSlotOnBoot();
  8469  006A48  ECC7  F04B         	call	_selectSlotOnBoot	;wreg free
  8470                           
  8471                           ;main.c: 573: if((ARPEGGIO_TYPE == UP) || (ARPEGGIO_TYPE == UP_DOWN) || (ARPEGGIO_TYPE =
      +                          = RANDOM) || (ARPEGGIO_TYPE == RANDOM_NON_REPEATING) || (ARPEGGIO_TYPE == AS_PRESSED)){
  8472  006A4C  5035               	movf	_ARPEGGIO_TYPE,w,c
  8473  006A4E  B4D8               	btfsc	status,2,c
  8474  006A50  D010               	goto	u66950
  8475  006A52  0E02               	movlw	2
  8476  006A54  1835               	xorwf	_ARPEGGIO_TYPE,w,c
  8477  006A56  B4D8               	btfsc	status,2,c
  8478  006A58  D00C               	goto	u66950
  8479  006A5A  0E05               	movlw	5
  8480  006A5C  1835               	xorwf	_ARPEGGIO_TYPE,w,c
  8481  006A5E  B4D8               	btfsc	status,2,c
  8482  006A60  D008               	goto	u66950
  8483  006A62  0E04               	movlw	4
  8484  006A64  1835               	xorwf	_ARPEGGIO_TYPE,w,c
  8485  006A66  B4D8               	btfsc	status,2,c
  8486  006A68  D004               	goto	u66950
  8487  006A6A  0E06               	movlw	6
  8488  006A6C  1835               	xorwf	_ARPEGGIO_TYPE,w,c
  8489  006A6E  A4D8               	btfss	status,2,c
  8490  006A70  D002               	goto	l5006
  8491  006A72                     u66950:
  8492                           
  8493                           ;main.c: 574: startingDirection = UP;
  8494  006A72  0E00               	movlw	0
  8495  006A74  6E34               	movwf	_startingDirection,c
  8496  006A76                     l5006:
  8497                           
  8498                           ;main.c: 575: }
  8499                           ;main.c: 577: if((ARPEGGIO_TYPE == DOWN) || (ARPEGGIO_TYPE == DOWN_UP)){
  8500  006A76  0435               	decf	_ARPEGGIO_TYPE,w,c
  8501  006A78  B4D8               	btfsc	status,2,c
  8502  006A7A  D004               	goto	u66970
  8503  006A7C  0E03               	movlw	3
  8504  006A7E  1835               	xorwf	_ARPEGGIO_TYPE,w,c
  8505  006A80  A4D8               	btfss	status,2,c
  8506  006A82  D002               	goto	l5009
  8507  006A84                     u66970:
  8508                           
  8509                           ;main.c: 578: startingDirection = DOWN;
  8510  006A84  0E01               	movlw	1
  8511  006A86  6E34               	movwf	_startingDirection,c
  8512  006A88                     l5009:
  8513                           
  8514                           ;main.c: 579: }
  8515                           ;main.c: 581: displayTest();
  8516  006A88  EC5D  F042         	call	_displayTest	;wreg free
  8517                           
  8518                           ;main.c: 588: which_functions_are_unblocked = 1;
  8519  006A8C  8205               	bsf	_which_functions_are_unblocked/(0+8),_which_functions_are_unblocked& (0+7),c
  8520  006A8E                     
  8521                           ;main.c: 594: digitalInputs();
  8522  006A8E  EC82  F048         	call	_digitalInputs	;wreg free
  8523                           
  8524                           ;main.c: 595: analogInputs();
  8525  006A92  EC65  F049         	call	_analogInputs	;wreg free
  8526                           
  8527                           ;main.c: 596: processEncoderBuxton();
  8528  006A96  EC0A  F000         	call	_processEncoderBuxton	;wreg free
  8529                           
  8530                           ;main.c: 607: menu_lcd();
  8531  006A9A  ECB2  F036         	call	_menu_lcd	;wreg free
  8532  006A9E  D7F7               	goto	l5012
  8533  006AA0                     __end_of_main:
  8534                           	opt stack 0
  8535                           tblptru	equ	0xFF8
  8536                           tblptrh	equ	0xFF7
  8537                           tblptrl	equ	0xFF6
  8538                           tablat	equ	0xFF5
  8539                           intcon	equ	0xFF2
  8540                           postinc0	equ	0xFEE
  8541                           wreg	equ	0xFE8
  8542                           postdec2	equ	0xFDD
  8543                           fsr2l	equ	0xFD9
  8544                           status	equ	0xFD8
  8545                           
  8546 ;; *************** function _srand *****************
  8547 ;; Defined at:
  8548 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  8549 ;; Parameters:    Size  Location     Type
  8550 ;;  x               2    0[BANK0 ] unsigned int 
  8551 ;; Auto vars:     Size  Location     Type
  8552 ;;		None
  8553 ;; Return value:  Size  Location     Type
  8554 ;;                  1    wreg      void 
  8555 ;; Registers used:
  8556 ;;		status,2
  8557 ;; Tracked objects:
  8558 ;;		On entry : 0/0
  8559 ;;		On exit  : 0/0
  8560 ;;		Unchanged: 0/0
  8561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8562 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8565 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8566 ;;Total ram usage:        2 bytes
  8567 ;; Hardware stack levels used:    1
  8568 ;; Hardware stack levels required when called:    5
  8569 ;; This function calls:
  8570 ;;		Nothing
  8571 ;; This function is called by:
  8572 ;;		_main
  8573 ;; This function uses a non-reentrant model
  8574 ;;
  8575                           
  8576                           	psect	text1
  8577  00988E                     __ptext1:
  8578                           	opt stack 0
  8579  00988E                     _srand:
  8580                           	opt stack 25
  8581                           
  8582                           ;incstack = 0
  8583  00988E  C060  F1EF         	movff	srand@x,_randx
  8584  009892  C061  F1F0         	movff	srand@x+1,_randx+1
  8585  009896  0101               	movlb	1	; () banked
  8586  009898  6BF1               	clrf	(_randx+2)& (0+255),b
  8587  00989A  6BF2               	clrf	(_randx+3)& (0+255),b
  8588                           
  8589                           ; BSR set to: 1
  8590  00989C  0012               	return		;funcret
  8591  00989E                     __end_of_srand:
  8592                           	opt stack 0
  8593                           tblptru	equ	0xFF8
  8594                           tblptrh	equ	0xFF7
  8595                           tblptrl	equ	0xFF6
  8596                           tablat	equ	0xFF5
  8597                           intcon	equ	0xFF2
  8598                           postinc0	equ	0xFEE
  8599                           wreg	equ	0xFE8
  8600                           postdec2	equ	0xFDD
  8601                           fsr2l	equ	0xFD9
  8602                           status	equ	0xFD8
  8603                           
  8604 ;; *************** function _setup *****************
  8605 ;; Defined at:
  8606 ;;		line 185 in file "main.c"
  8607 ;; Parameters:    Size  Location     Type
  8608 ;;		None
  8609 ;; Auto vars:     Size  Location     Type
  8610 ;;		None
  8611 ;; Return value:  Size  Location     Type
  8612 ;;                  1    wreg      void 
  8613 ;; Registers used:
  8614 ;;		wreg, status,2, status,0
  8615 ;; Tracked objects:
  8616 ;;		On entry : 0/0
  8617 ;;		On exit  : 0/0
  8618 ;;		Unchanged: 0/0
  8619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8624 ;;Total ram usage:        0 bytes
  8625 ;; Hardware stack levels used:    1
  8626 ;; Hardware stack levels required when called:    5
  8627 ;; This function calls:
  8628 ;;		Nothing
  8629 ;; This function is called by:
  8630 ;;		_main
  8631 ;; This function uses a non-reentrant model
  8632 ;;
  8633                           
  8634                           	psect	text2
  8635  008908                     __ptext2:
  8636                           	opt stack 0
  8637  008908                     _setup:
  8638                           	opt stack 25
  8639                           
  8640                           ;main.c: 188: TRISA = 0b000001;
  8641                           
  8642                           ; BSR set to: 1
  8643                           ;incstack = 0
  8644  008908  0E01               	movlw	1
  8645  00890A  6E92               	movwf	3986,c	;volatile
  8646                           
  8647                           ;main.c: 192: TRISB = 0b00110001;
  8648  00890C  0E31               	movlw	49
  8649  00890E  6E93               	movwf	3987,c	;volatile
  8650                           
  8651                           ;main.c: 200: TRISC = 0b10010000;
  8652  008910  0E90               	movlw	144
  8653  008912  6E94               	movwf	3988,c	;volatile
  8654                           
  8655                           ;main.c: 206: TRISD = 0b00000000;
  8656  008914  0E00               	movlw	0
  8657  008916  6E95               	movwf	3989,c	;volatile
  8658                           
  8659                           ;main.c: 209: TRISE = 0b000;
  8660  008918  0E00               	movlw	0
  8661  00891A  6E96               	movwf	3990,c	;volatile
  8662                           
  8663                           ;main.c: 214: PORTA = 0x00;
  8664  00891C  0E00               	movlw	0
  8665  00891E  6E80               	movwf	3968,c	;volatile
  8666                           
  8667                           ;main.c: 215: PORTB = 0x00;
  8668  008920  0E00               	movlw	0
  8669  008922  6E81               	movwf	3969,c	;volatile
  8670                           
  8671                           ;main.c: 216: PORTC = 0x00;
  8672  008924  0E00               	movlw	0
  8673  008926  6E82               	movwf	3970,c	;volatile
  8674                           
  8675                           ;main.c: 217: PORTD = 0x00;
  8676  008928  0E00               	movlw	0
  8677  00892A  6E83               	movwf	3971,c	;volatile
  8678                           
  8679                           ;main.c: 218: PORTE = 0x00;
  8680  00892C  0E00               	movlw	0
  8681  00892E  6E84               	movwf	3972,c	;volatile
  8682                           
  8683                           ;main.c: 221: IPEN = 0;
  8684  008930  9ED0               	bcf	4048,7,c	;volatile
  8685                           
  8686                           ;main.c: 224: RBIF = 0;
  8687  008932  90F2               	bcf	intcon,0,c	;volatile
  8688                           
  8689                           ;main.c: 225: RBIE = 1;
  8690  008934  86F2               	bsf	intcon,3,c	;volatile
  8691                           
  8692                           ;main.c: 227: INTEDG0 = 0;
  8693  008936  9CF1               	bcf	intcon2,6,c	;volatile
  8694                           
  8695                           ;main.c: 228: INT0IF = 0;
  8696  008938  92F2               	bcf	intcon,1,c	;volatile
  8697                           
  8698                           ;main.c: 229: INT0IE = 1;
  8699  00893A  88F2               	bsf	intcon,4,c	;volatile
  8700                           
  8701                           ;main.c: 232: T08BIT = 0;
  8702  00893C  9CD5               	bcf	4053,6,c	;volatile
  8703                           
  8704                           ;main.c: 233: T0CS = 0;
  8705  00893E  9AD5               	bcf	4053,5,c	;volatile
  8706                           
  8707                           ;main.c: 234: T0CON &= 0b11111000;
  8708  008940  0EF8               	movlw	248
  8709  008942  16D5               	andwf	4053,f,c	;volatile
  8710                           
  8711                           ;main.c: 235: T0CON |= 0b00000001;
  8712  008944  80D5               	bsf	4053,0,c	;volatile
  8713                           
  8714                           ;main.c: 236: PSA = 0;
  8715  008946  96D5               	bcf	4053,3,c	;volatile
  8716                           
  8717                           ;main.c: 237: TMR0ON = 0;
  8718  008948  9ED5               	bcf	4053,7,c	;volatile
  8719                           
  8720                           ;main.c: 238: TMR0IE = 1;
  8721  00894A  8AF2               	bsf	intcon,5,c	;volatile
  8722                           
  8723                           ;main.c: 241: T2CON = 0b01000001;
  8724  00894C  0E41               	movlw	65
  8725  00894E  6ECA               	movwf	4042,c	;volatile
  8726                           
  8727                           ;main.c: 242: TMR2 = 0x83;
  8728  008950  0E83               	movlw	131
  8729  008952  6ECC               	movwf	4044,c	;volatile
  8730                           
  8731                           ;main.c: 243: TMR2ON = 0;
  8732  008954  94CA               	bcf	4042,2,c	;volatile
  8733                           
  8734                           ;main.c: 244: TMR2IE = 0;
  8735  008956  929D               	bcf	3997,1,c	;volatile
  8736                           
  8737                           ;main.c: 247: T1CON = 0b10000000;
  8738  008958  0E80               	movlw	128
  8739  00895A  6ECD               	movwf	4045,c	;volatile
  8740                           
  8741                           ;main.c: 248: TMR1 = 0xEC78;
  8742  00895C  0EEC               	movlw	236
  8743  00895E  6ECF               	movwf	4047,c	;volatile
  8744  008960  0E78               	movlw	120
  8745  008962  6ECE               	movwf	4046,c	;volatile
  8746                           
  8747                           ;main.c: 249: TMR1ON = 0;
  8748  008964  90CD               	bcf	4045,0,c	;volatile
  8749                           
  8750                           ;main.c: 250: TMR1IE = 1;
  8751  008966  809D               	bsf	3997,0,c	;volatile
  8752                           
  8753                           ;main.c: 254: TXEN = 1;
  8754  008968  8AAC               	bsf	4012,5,c	;volatile
  8755                           
  8756                           ;main.c: 255: SYNC = 0;
  8757  00896A  98AC               	bcf	4012,4,c	;volatile
  8758                           
  8759                           ;main.c: 258: SPEN = 1;
  8760  00896C  8EAB               	bsf	4011,7,c	;volatile
  8761                           
  8762                           ;main.c: 259: CREN = 1;
  8763  00896E  88AB               	bsf	4011,4,c	;volatile
  8764                           
  8765                           ;main.c: 262: BRGH = 0;
  8766  008970  94AC               	bcf	4012,2,c	;volatile
  8767                           
  8768                           ;main.c: 263: SPBRG = 9;
  8769  008972  0E09               	movlw	9
  8770  008974  6EAF               	movwf	4015,c	;volatile
  8771                           
  8772                           ;main.c: 265: PEIE = 1;
  8773  008976  8CF2               	bsf	intcon,6,c	;volatile
  8774                           
  8775                           ;main.c: 266: GIE = 1;
  8776  008978  8EF2               	bsf	intcon,7,c	;volatile
  8777  00897A  0012               	return		;funcret
  8778  00897C                     __end_of_setup:
  8779                           	opt stack 0
  8780                           tblptru	equ	0xFF8
  8781                           tblptrh	equ	0xFF7
  8782                           tblptrl	equ	0xFF6
  8783                           tablat	equ	0xFF5
  8784                           intcon	equ	0xFF2
  8785                           intcon2	equ	0xFF1
  8786                           postinc0	equ	0xFEE
  8787                           wreg	equ	0xFE8
  8788                           postdec2	equ	0xFDD
  8789                           fsr2l	equ	0xFD9
  8790                           status	equ	0xFD8
  8791                           
  8792 ;; *************** function _selectSlotOnBoot *****************
  8793 ;; Defined at:
  8794 ;;		line 41 in file "eeprom.c"
  8795 ;; Parameters:    Size  Location     Type
  8796 ;;		None
  8797 ;; Auto vars:     Size  Location     Type
  8798 ;;  slot            1    0[BANK2 ] unsigned char 
  8799 ;; Return value:  Size  Location     Type
  8800 ;;                  1    wreg      void 
  8801 ;; Registers used:
  8802 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8803 ;; Tracked objects:
  8804 ;;		On entry : 0/0
  8805 ;;		On exit  : 0/0
  8806 ;;		Unchanged: 0/0
  8807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8809 ;;      Locals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
  8810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8811 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
  8812 ;;Total ram usage:        1 bytes
  8813 ;; Hardware stack levels used:    1
  8814 ;; Hardware stack levels required when called:    8
  8815 ;; This function calls:
  8816 ;;		_Read_b_eep
  8817 ;;		_loadFromEEPROM
  8818 ;; This function is called by:
  8819 ;;		_main
  8820 ;; This function uses a non-reentrant model
  8821 ;;
  8822                           
  8823                           	psect	text3
  8824  00978E                     __ptext3:
  8825                           	opt stack 0
  8826  00978E                     _selectSlotOnBoot:
  8827                           	opt stack 22
  8828                           
  8829                           ;eeprom.c: 43: unsigned char slot = Read_b_eep(0);
  8830                           
  8831                           ;incstack = 0
  8832  00978E  0E00               	movlw	0
  8833  009790  0100               	movlb	0	; () banked
  8834  009792  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  8835  009794  0E00               	movlw	0
  8836  009796  6F60               	movwf	Read_b_eep@badd& (0+255),b
  8837  009798  ECF6  F04B         	call	_Read_b_eep	;wreg free
  8838  00979C  0102               	movlb	2	; () banked
  8839  00979E  6FE5               	movwf	selectSlotOnBoot@slot& (0+255),b
  8840                           
  8841                           ; BSR set to: 2
  8842                           ;eeprom.c: 45: if (slot == DEFAULT){
  8843  0097A0  51E5               	movf	selectSlotOnBoot@slot& (0+255),w,b
  8844  0097A2  B4D8               	btfsc	status,2,c
  8845  0097A4  0012               	return	
  8846                           
  8847                           ; BSR set to: 2
  8848                           ;eeprom.c: 49: else {
  8849                           ;eeprom.c: 50: loadFromEEPROM(slot);
  8850                           
  8851                           ; BSR set to: 2
  8852                           
  8853                           ; BSR set to: 2
  8854                           ;eeprom.c: 47: }
  8855                           
  8856                           ; BSR set to: 2
  8857                           ;eeprom.c: 46: return;
  8858  0097A6  51E5               	movf	selectSlotOnBoot@slot& (0+255),w,b
  8859  0097A8  EC3C  F025         	call	_loadFromEEPROM
  8860  0097AC  0012               	return	
  8861  0097AE                     __end_of_selectSlotOnBoot:
  8862                           	opt stack 0
  8863                           tblptru	equ	0xFF8
  8864                           tblptrh	equ	0xFF7
  8865                           tblptrl	equ	0xFF6
  8866                           tablat	equ	0xFF5
  8867                           intcon	equ	0xFF2
  8868                           intcon2	equ	0xFF1
  8869                           postinc0	equ	0xFEE
  8870                           wreg	equ	0xFE8
  8871                           postdec2	equ	0xFDD
  8872                           fsr2l	equ	0xFD9
  8873                           status	equ	0xFD8
  8874                           
  8875 ;; *************** function _panic_button *****************
  8876 ;; Defined at:
  8877 ;;		line 483 in file "main.c"
  8878 ;; Parameters:    Size  Location     Type
  8879 ;;		None
  8880 ;; Auto vars:     Size  Location     Type
  8881 ;;		None
  8882 ;; Return value:  Size  Location     Type
  8883 ;;                  1    wreg      void 
  8884 ;; Registers used:
  8885 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
  8886 ;; Tracked objects:
  8887 ;;		On entry : 0/0
  8888 ;;		On exit  : 0/0
  8889 ;;		Unchanged: 0/0
  8890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8895 ;;Total ram usage:        0 bytes
  8896 ;; Hardware stack levels used:    1
  8897 ;; Hardware stack levels required when called:    9
  8898 ;; This function calls:
  8899 ;;		_controlChange
  8900 ;; This function is called by:
  8901 ;;		_main
  8902 ;; This function uses a non-reentrant model
  8903 ;;
  8904                           
  8905                           	psect	text4
  8906  00976C                     __ptext4:
  8907                           	opt stack 0
  8908  00976C                     _panic_button:
  8909                           	opt stack 21
  8910                           
  8911                           ;main.c: 484: controlChange (channel, all_notes_off, 0x00);
  8912                           
  8913                           ;incstack = 0
  8914  00976C  0E7B               	movlw	123
  8915  00976E  0100               	movlb	0	; () banked
  8916  009770  6F60               	movwf	controlChange@controllerNumber& (0+255),b
  8917  009772  0E00               	movlw	0
  8918  009774  6F61               	movwf	controlChange@value& (0+255),b
  8919  009776  503E               	movf	_channel,w,c
  8920  009778  EC2C  F048         	call	_controlChange
  8921                           
  8922                           ;main.c: 485: controlChange (drumchannel, all_notes_off, 0x00);
  8923  00977C  0E7B               	movlw	123
  8924  00977E  0100               	movlb	0	; () banked
  8925  009780  6F60               	movwf	controlChange@controllerNumber& (0+255),b
  8926  009782  0E00               	movlw	0
  8927  009784  6F61               	movwf	controlChange@value& (0+255),b
  8928  009786  5052               	movf	_drumchannel,w,c
  8929  009788  EC2C  F048         	call	_controlChange
  8930  00978C  0012               	return		;funcret
  8931  00978E                     __end_of_panic_button:
  8932                           	opt stack 0
  8933                           tblptru	equ	0xFF8
  8934                           tblptrh	equ	0xFF7
  8935                           tblptrl	equ	0xFF6
  8936                           tablat	equ	0xFF5
  8937                           intcon	equ	0xFF2
  8938                           intcon2	equ	0xFF1
  8939                           postinc0	equ	0xFEE
  8940                           wreg	equ	0xFE8
  8941                           postdec2	equ	0xFDD
  8942                           fsr2l	equ	0xFD9
  8943                           status	equ	0xFD8
  8944                           
  8945 ;; *************** function _menu_lcd *****************
  8946 ;; Defined at:
  8947 ;;		line 325 in file "menu.c"
  8948 ;; Parameters:    Size  Location     Type
  8949 ;;		None
  8950 ;; Auto vars:     Size  Location     Type
  8951 ;;		None
  8952 ;; Return value:  Size  Location     Type
  8953 ;;                  1    wreg      void 
  8954 ;; Registers used:
  8955 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8956 ;; Tracked objects:
  8957 ;;		On entry : 0/0
  8958 ;;		On exit  : 0/0
  8959 ;;		Unchanged: 0/0
  8960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8965 ;;Total ram usage:        0 bytes
  8966 ;; Hardware stack levels used:    1
  8967 ;; Hardware stack levels required when called:   19
  8968 ;; This function calls:
  8969 ;;		_Function_A
  8970 ;;		_Function_B
  8971 ;;		_Function_C
  8972 ;;		_Function_D
  8973 ;;		_Function_E
  8974 ;;		_Function_F
  8975 ;;		_Function_G
  8976 ;;		_Function_H
  8977 ;;		_Lcd_Clear
  8978 ;;		_Lcd_Print_String
  8979 ;;		_Lcd_Set_Cursor
  8980 ;;		___lbmod
  8981 ;;		___wmul
  8982 ;;		_exitFunction
  8983 ;; This function is called by:
  8984 ;;		_main
  8985 ;; This function uses a non-reentrant model
  8986 ;;
  8987                           
  8988                           	psect	text5
  8989  006D64                     __ptext5:
  8990                           	opt stack 0
  8991  006D64                     _menu_lcd:
  8992                           	opt stack 11
  8993                           
  8994                           ;menu.c: 327: which_screen = MAIN_MENU;
  8995                           
  8996                           ;incstack = 0
  8997  006D64  0E02               	movlw	2
  8998  006D66  6E4F               	movwf	_which_screen,c
  8999                           
  9000                           ;menu.c: 330: if (lcd_print_once == 0) {
  9001  006D68  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9002  006D6A  D026               	goto	l3522
  9003                           
  9004                           ;menu.c: 332: Lcd_Clear();
  9005  006D6C  EC28  F04C         	call	_Lcd_Clear	;wreg free
  9006                           
  9007                           ;menu.c: 333: Lcd_Set_Cursor(1,1);
  9008  006D70  0E01               	movlw	1
  9009  006D72  0100               	movlb	0	; () banked
  9010  006D74  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9011  006D76  0E01               	movlw	1
  9012  006D78  EC42  F047         	call	_Lcd_Set_Cursor
  9013                           
  9014                           ;menu.c: 339: Lcd_Print_String(LCD_STRINGS[(mainMenu.selector % mainMenu.number) + mainM
      +                          enu.address]);
  9015  006D7C  0101               	movlb	1	; () banked
  9016  006D7E  5174               	movf	_mainMenu& (0+255),w,b
  9017  006D80  6EE6               	movwf	postinc1,c
  9018  006D82  5176               	movf	(_mainMenu+2)& (0+255),w,b
  9019  006D84  6EE6               	movwf	postinc1,c
  9020  006D86  ECC6  F040         	call	___lbmod	;wreg free
  9021  006D8A  503F               	movf	btemp,w,c
  9022  006D8C  0101               	movlb	1	; () banked
  9023  006D8E  2575               	addwf	(_mainMenu+1)& (0+255),w,b
  9024  006D90  0100               	movlb	0	; () banked
  9025  006D92  6F60               	movwf	___wmul@multiplier& (0+255),b
  9026  006D94  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9027  006D96  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9028  006D98  0E00               	movlw	0
  9029  006D9A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9030  006D9C  0E11               	movlw	17
  9031  006D9E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9032  006DA0  EC8F  F04B         	call	___wmul	;wreg free
  9033  006DA4  0E9E               	movlw	low _LCD_STRINGS
  9034  006DA6  0100               	movlb	0	; () banked
  9035  006DA8  2560               	addwf	?___wmul& (0+255),w,b
  9036  006DAA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9037  006DAC  0EF3               	movlw	high _LCD_STRINGS
  9038  006DAE  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9039  006DB0  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9040  006DB2  ECD9  F041         	call	_Lcd_Print_String	;wreg free
  9041                           
  9042                           ;menu.c: 341: lcd_print_once = 1;
  9043  006DB6  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9044  006DB8                     l3522:
  9045                           
  9046                           ;menu.c: 342: }
  9047                           ;menu.c: 344: if(encoder_click == 1) {
  9048  006DB8  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9049  006DBA  0012               	return	
  9050                           
  9051                           ;menu.c: 346: encoder_click = 0;
  9052  006DBC  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9053                           
  9054                           ;menu.c: 348: switch (mainMenu.selector) {
  9055  006DBE  D026               	goto	l3524
  9056  006DC0                     
  9057                           ;menu.c: 350: Function_A();
  9058  006DC0  EC3C  F039         	call	_Function_A	;wreg free
  9059                           
  9060                           ;menu.c: 351: exitFunction();
  9061  006DC4  EC2F  F04A         	call	_exitFunction	;wreg free
  9062                           
  9063                           ;menu.c: 352: break;
  9064  006DC8  0012               	return	
  9065  006DCA                     
  9066                           ;menu.c: 354: Function_H();
  9067  006DCA  ECCF  F03A         	call	_Function_H	;wreg free
  9068                           
  9069                           ;menu.c: 355: exitFunction();
  9070  006DCE  EC2F  F04A         	call	_exitFunction	;wreg free
  9071                           
  9072                           ;menu.c: 356: break;
  9073  006DD2  0012               	return	
  9074  006DD4                     
  9075                           ;menu.c: 358: Function_B();
  9076  006DD4  EC95  F043         	call	_Function_B	;wreg free
  9077                           
  9078                           ;menu.c: 359: exitFunction();
  9079  006DD8  EC2F  F04A         	call	_exitFunction	;wreg free
  9080                           
  9081                           ;menu.c: 360: break;
  9082  006DDC  0012               	return	
  9083  006DDE                     
  9084                           ;menu.c: 362: Function_C();
  9085  006DDE  ECA6  F03F         	call	_Function_C	;wreg free
  9086                           
  9087                           ;menu.c: 363: exitFunction();
  9088  006DE2  EC2F  F04A         	call	_exitFunction	;wreg free
  9089                           
  9090                           ;menu.c: 364: break;
  9091  006DE6  0012               	return	
  9092  006DE8                     
  9093                           ;menu.c: 366: Function_D();
  9094  006DE8  EC37  F040         	call	_Function_D	;wreg free
  9095                           
  9096                           ;menu.c: 367: exitFunction();
  9097  006DEC  EC2F  F04A         	call	_exitFunction	;wreg free
  9098                           
  9099                           ;menu.c: 368: break;
  9100  006DF0  0012               	return	
  9101  006DF2                     
  9102                           ;menu.c: 370: Function_E();
  9103  006DF2  ECD8  F045         	call	_Function_E	;wreg free
  9104                           
  9105                           ;menu.c: 371: exitFunction();
  9106  006DF6  EC2F  F04A         	call	_exitFunction	;wreg free
  9107                           
  9108                           ;menu.c: 372: break;
  9109  006DFA  0012               	return	
  9110  006DFC                     
  9111                           ;menu.c: 374: Function_F();
  9112  006DFC  ECAC  F046         	call	_Function_F	;wreg free
  9113                           
  9114                           ;menu.c: 375: exitFunction();
  9115  006E00  EC2F  F04A         	call	_exitFunction	;wreg free
  9116                           
  9117                           ;menu.c: 376: break;
  9118  006E04  0012               	return	
  9119  006E06                     
  9120                           ;menu.c: 378: Function_G();
  9121  006E06  ECEF  F03F         	call	_Function_G	;wreg free
  9122                           
  9123                           ;menu.c: 384: }
  9124                           
  9125                           ;menu.c: 383: break;
  9126                           
  9127                           ;menu.c: 382: default:
  9128                           
  9129                           ;menu.c: 380: break;
  9130  006E0A  0012               	return	
  9131  006E0C                     l3524:
  9132  006E0C  0101               	movlb	1	; () banked
  9133  006E0E  5176               	movf	(_mainMenu+2)& (0+255),w,b
  9134                           
  9135                           ; Switch size 1, requested type "space"
  9136                           ; Number of cases is 8, Range of values is 0 to 7
  9137                           ; switch strategies available:
  9138                           ; Name         Instructions Cycles
  9139                           ; simple_byte           25    13 (average)
  9140                           ;	Chosen strategy is simple_byte
  9141  006E10  0A00               	xorlw	0	; case 0
  9142  006E12  B4D8               	btfsc	status,2,c
  9143  006E14  D7D5               	goto	l3525
  9144  006E16  0A01               	xorlw	1	; case 1
  9145  006E18  B4D8               	btfsc	status,2,c
  9146  006E1A  D7D7               	goto	l3527
  9147  006E1C  0A03               	xorlw	3	; case 2
  9148  006E1E  B4D8               	btfsc	status,2,c
  9149  006E20  D7D9               	goto	l3528
  9150  006E22  0A01               	xorlw	1	; case 3
  9151  006E24  B4D8               	btfsc	status,2,c
  9152  006E26  D7DB               	goto	l3529
  9153  006E28  0A07               	xorlw	7	; case 4
  9154  006E2A  B4D8               	btfsc	status,2,c
  9155  006E2C  D7DD               	goto	l3530
  9156  006E2E  0A01               	xorlw	1	; case 5
  9157  006E30  B4D8               	btfsc	status,2,c
  9158  006E32  D7DF               	goto	l3531
  9159  006E34  0A03               	xorlw	3	; case 6
  9160  006E36  B4D8               	btfsc	status,2,c
  9161  006E38  D7E1               	goto	l3532
  9162  006E3A  0A01               	xorlw	1	; case 7
  9163  006E3C  A4D8               	btfss	status,2,c
  9164                           
  9165                           ; BSR set to: 1
  9166  006E3E  0012               	return	
  9167  006E40  D7E2               	goto	l3533
  9168  006E42                     __end_of_menu_lcd:
  9169                           	opt stack 0
  9170                           tblptru	equ	0xFF8
  9171                           tblptrh	equ	0xFF7
  9172                           tblptrl	equ	0xFF6
  9173                           tablat	equ	0xFF5
  9174                           intcon	equ	0xFF2
  9175                           intcon2	equ	0xFF1
  9176                           postinc0	equ	0xFEE
  9177                           wreg	equ	0xFE8
  9178                           postinc1	equ	0xFE6
  9179                           postdec2	equ	0xFDD
  9180                           fsr2l	equ	0xFD9
  9181                           status	equ	0xFD8
  9182                           
  9183 ;; *************** function _Lcd_Clear *****************
  9184 ;; Defined at:
  9185 ;;		line 53 in file "lcd.c"
  9186 ;; Parameters:    Size  Location     Type
  9187 ;;		None
  9188 ;; Auto vars:     Size  Location     Type
  9189 ;;		None
  9190 ;; Return value:  Size  Location     Type
  9191 ;;                  1    wreg      void 
  9192 ;; Registers used:
  9193 ;;		wreg, status,2, status,0, cstack
  9194 ;; Tracked objects:
  9195 ;;		On entry : 0/0
  9196 ;;		On exit  : 0/0
  9197 ;;		Unchanged: 0/0
  9198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9203 ;;Total ram usage:        0 bytes
  9204 ;; Hardware stack levels used:    1
  9205 ;; Hardware stack levels required when called:    7
  9206 ;; This function calls:
  9207 ;;		_Lcd_Cmd
  9208 ;; This function is called by:
  9209 ;;		_menu_lcd
  9210 ;; This function uses a non-reentrant model
  9211 ;;
  9212                           
  9213                           	psect	text6
  9214  009850                     __ptext6:
  9215                           	opt stack 0
  9216  009850                     _Lcd_Clear:
  9217                           	opt stack 22
  9218                           
  9219                           ;lcd.c: 56: TMR2ON = 0;
  9220                           
  9221                           ;incstack = 0
  9222  009850  94CA               	bcf	4042,2,c	;volatile
  9223                           
  9224                           ;lcd.c: 57: PORTC &= 0xF0;
  9225  009852  0EF0               	movlw	240
  9226  009854  1682               	andwf	3970,f,c	;volatile
  9227                           
  9228                           ;lcd.c: 59: Lcd_Cmd(0);
  9229  009856  0E00               	movlw	0
  9230  009858  ECA3  F04B         	call	_Lcd_Cmd
  9231                           
  9232                           ;lcd.c: 60: Lcd_Cmd(1);
  9233  00985C  0E01               	movlw	1
  9234  00985E  ECA3  F04B         	call	_Lcd_Cmd
  9235                           
  9236                           ;lcd.c: 63: TMR2ON = 1;
  9237  009862  84CA               	bsf	4042,2,c	;volatile
  9238  009864  0012               	return		;funcret
  9239  009866                     __end_of_Lcd_Clear:
  9240                           	opt stack 0
  9241                           tblptru	equ	0xFF8
  9242                           tblptrh	equ	0xFF7
  9243                           tblptrl	equ	0xFF6
  9244                           tablat	equ	0xFF5
  9245                           intcon	equ	0xFF2
  9246                           intcon2	equ	0xFF1
  9247                           postinc0	equ	0xFEE
  9248                           wreg	equ	0xFE8
  9249                           postinc1	equ	0xFE6
  9250                           postdec2	equ	0xFDD
  9251                           fsr2l	equ	0xFD9
  9252                           status	equ	0xFD8
  9253                           
  9254 ;; *************** function _Function_H *****************
  9255 ;; Defined at:
  9256 ;;		line 1200 in file "menu.c"
  9257 ;; Parameters:    Size  Location     Type
  9258 ;;		None
  9259 ;; Auto vars:     Size  Location     Type
  9260 ;;		None
  9261 ;; Return value:  Size  Location     Type
  9262 ;;                  1    wreg      void 
  9263 ;; Registers used:
  9264 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9265 ;; Tracked objects:
  9266 ;;		On entry : 0/0
  9267 ;;		On exit  : 0/0
  9268 ;;		Unchanged: 0/0
  9269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9274 ;;Total ram usage:        0 bytes
  9275 ;; Hardware stack levels used:    1
  9276 ;; Hardware stack levels required when called:   18
  9277 ;; This function calls:
  9278 ;;		_Function_H_1
  9279 ;;		_Function_H_2
  9280 ;;		_Function_H_3
  9281 ;;		_Function_H_4
  9282 ;;		_Function_H_5
  9283 ;;		_Function_H_6
  9284 ;;		_Function_H_7
  9285 ;;		_Function_H_8
  9286 ;;		_Function_H_9
  9287 ;;		_Lcd_Print_String
  9288 ;;		___lbmod
  9289 ;;		___wmul
  9290 ;;		_clear_row2
  9291 ;;		_un_block_code
  9292 ;; This function is called by:
  9293 ;;		_menu_lcd
  9294 ;; This function uses a non-reentrant model
  9295 ;;
  9296                           
  9297                           	psect	text7
  9298  00759E                     __ptext7:
  9299                           	opt stack 0
  9300  00759E                     _Function_H:
  9301                           	opt stack 11
  9302                           
  9303                           ;menu.c: 1202: which_screen = ARPEGGIATOR_MENU;
  9304                           
  9305                           ;incstack = 0
  9306  00759E  0E19               	movlw	25
  9307  0075A0  6E4F               	movwf	_which_screen,c
  9308                           
  9309                           ;menu.c: 1203: encoder_click = 0;
  9310  0075A2  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9311                           
  9312                           ;menu.c: 1204: lcd_print_once = 0;
  9313  0075A4  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9314                           
  9315                           ;menu.c: 1206: while(encoder_click == 0) {
  9316  0075A6  D023               	goto	l3763
  9317  0075A8                     
  9318                           ;menu.c: 1210: un_block_code();
  9319  0075A8  EC10  F04C         	call	_un_block_code	;wreg free
  9320                           
  9321                           ;menu.c: 1212: if (lcd_print_once == 0) {
  9322  0075AC  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9323  0075AE  D01E               	goto	l3765
  9324                           
  9325                           ;menu.c: 1213: clear_row2();
  9326  0075B0  EC67  F04B         	call	_clear_row2	;wreg free
  9327                           
  9328                           ;menu.c: 1214: Lcd_Print_String(LCD_STRINGS[(arpeggiatorMenu.selector % arpeggiatorMenu.
      +                          number) + arpeggiatorMenu.address]);
  9329  0075B4  0100               	movlb	0	; () banked
  9330  0075B6  51DF               	movf	_arpeggiatorMenu& (0+255),w,b
  9331  0075B8  6EE6               	movwf	postinc1,c
  9332  0075BA  51E1               	movf	(_arpeggiatorMenu+2)& (0+255),w,b
  9333  0075BC  6EE6               	movwf	postinc1,c
  9334  0075BE  ECC6  F040         	call	___lbmod	;wreg free
  9335  0075C2  503F               	movf	btemp,w,c
  9336  0075C4  0100               	movlb	0	; () banked
  9337  0075C6  25E0               	addwf	(_arpeggiatorMenu+1)& (0+255),w,b
  9338  0075C8  6F60               	movwf	___wmul@multiplier& (0+255),b
  9339  0075CA  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9340  0075CC  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9341  0075CE  0E00               	movlw	0
  9342  0075D0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9343  0075D2  0E11               	movlw	17
  9344  0075D4  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9345  0075D6  EC8F  F04B         	call	___wmul	;wreg free
  9346  0075DA  0E9E               	movlw	low _LCD_STRINGS
  9347  0075DC  0100               	movlb	0	; () banked
  9348  0075DE  2560               	addwf	?___wmul& (0+255),w,b
  9349  0075E0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9350  0075E2  0EF3               	movlw	high _LCD_STRINGS
  9351  0075E4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9352  0075E6  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9353  0075E8  ECD9  F041         	call	_Lcd_Print_String	;wreg free
  9354  0075EC                     l3765:
  9355                           
  9356                           ;menu.c: 1215: }
  9357                           ;menu.c: 1216: lcd_print_once = 1;
  9358  0075EC  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9359  0075EE                     l3763:
  9360  0075EE  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9361  0075F0  D7DB               	goto	l3764
  9362                           
  9363                           ;menu.c: 1217: }
  9364                           ;menu.c: 1219: if(arpeggiatorMenu.selector == 0) {Function_H_1();}
  9365  0075F2  0100               	movlb	0	; () banked
  9366  0075F4  51E1               	movf	(_arpeggiatorMenu+2)& (0+255),w,b
  9367  0075F6  B4D8               	btfsc	status,2,c
  9368                           
  9369                           ; BSR set to: 0
  9370  0075F8  EC90  F037         	call	_Function_H_1	;wreg free
  9371                           
  9372                           ;menu.c: 1220: if(arpeggiatorMenu.selector == 1) {Function_H_2();}
  9373  0075FC  0100               	movlb	0	; () banked
  9374  0075FE  05E1               	decf	(_arpeggiatorMenu+2)& (0+255),w,b
  9375  007600  B4D8               	btfsc	status,2,c
  9376                           
  9377                           ; BSR set to: 0
  9378  007602  EC79  F046         	call	_Function_H_2	;wreg free
  9379                           
  9380                           ;menu.c: 1221: if(arpeggiatorMenu.selector == 2) {Function_H_3();}
  9381  007606  0E02               	movlw	2
  9382  007608  0100               	movlb	0	; () banked
  9383  00760A  19E1               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9384  00760C  B4D8               	btfsc	status,2,c
  9385                           
  9386                           ; BSR set to: 0
  9387  00760E  ECFF  F047         	call	_Function_H_3	;wreg free
  9388                           
  9389                           ;menu.c: 1222: if(arpeggiatorMenu.selector == 3) {Function_H_4();}
  9390  007612  0E03               	movlw	3
  9391  007614  0100               	movlb	0	; () banked
  9392  007616  19E1               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9393  007618  B4D8               	btfsc	status,2,c
  9394                           
  9395                           ; BSR set to: 0
  9396  00761A  EC2F  F03B         	call	_Function_H_4	;wreg free
  9397                           
  9398                           ;menu.c: 1223: if(arpeggiatorMenu.selector == 4) {Function_H_5();}
  9399  00761E  0E04               	movlw	4
  9400  007620  0100               	movlb	0	; () banked
  9401  007622  19E1               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9402  007624  B4D8               	btfsc	status,2,c
  9403                           
  9404                           ; BSR set to: 0
  9405  007626  EC8B  F03C         	call	_Function_H_5	;wreg free
  9406                           
  9407                           ;menu.c: 1224: if(arpeggiatorMenu.selector == 5) {Function_H_6();}
  9408  00762A  0E05               	movlw	5
  9409  00762C  0100               	movlb	0	; () banked
  9410  00762E  19E1               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9411  007630  B4D8               	btfsc	status,2,c
  9412                           
  9413                           ; BSR set to: 0
  9414  007632  ECA1  F045         	call	_Function_H_6	;wreg free
  9415                           
  9416                           ;menu.c: 1225: if(arpeggiatorMenu.selector == 6) {Function_H_7();}
  9417  007636  0E06               	movlw	6
  9418  007638  0100               	movlb	0	; () banked
  9419  00763A  19E1               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9420  00763C  B4D8               	btfsc	status,2,c
  9421                           
  9422                           ; BSR set to: 0
  9423  00763E  EC88  F03B         	call	_Function_H_7	;wreg free
  9424                           
  9425                           ;menu.c: 1226: if(arpeggiatorMenu.selector == 7) {Function_H_8();}
  9426  007642  0E07               	movlw	7
  9427  007644  0100               	movlb	0	; () banked
  9428  007646  19E1               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9429  007648  B4D8               	btfsc	status,2,c
  9430                           
  9431                           ; BSR set to: 0
  9432  00764A  EC6A  F045         	call	_Function_H_8	;wreg free
  9433                           
  9434                           ;menu.c: 1227: if(arpeggiatorMenu.selector == 8) {Function_H_9();}
  9435  00764E  0E08               	movlw	8
  9436  007650  0100               	movlb	0	; () banked
  9437  007652  19E1               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9438  007654  A4D8               	btfss	status,2,c
  9439  007656  0012               	return	
  9440                           
  9441                           ; BSR set to: 0
  9442  007658  EC5B  F03F         	call	_Function_H_9	;wreg free
  9443  00765C  0012               	return	
  9444  00765E                     __end_of_Function_H:
  9445                           	opt stack 0
  9446                           tblptru	equ	0xFF8
  9447                           tblptrh	equ	0xFF7
  9448                           tblptrl	equ	0xFF6
  9449                           tablat	equ	0xFF5
  9450                           intcon	equ	0xFF2
  9451                           intcon2	equ	0xFF1
  9452                           postinc0	equ	0xFEE
  9453                           wreg	equ	0xFE8
  9454                           postinc1	equ	0xFE6
  9455                           postdec2	equ	0xFDD
  9456                           fsr2l	equ	0xFD9
  9457                           status	equ	0xFD8
  9458                           
  9459 ;; *************** function _Function_H_9 *****************
  9460 ;; Defined at:
  9461 ;;		line 1829 in file "menu.c"
  9462 ;; Parameters:    Size  Location     Type
  9463 ;;		None
  9464 ;; Auto vars:     Size  Location     Type
  9465 ;;		None
  9466 ;; Return value:  Size  Location     Type
  9467 ;;                  1    wreg      void 
  9468 ;; Registers used:
  9469 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9470 ;; Tracked objects:
  9471 ;;		On entry : 0/0
  9472 ;;		On exit  : 0/0
  9473 ;;		Unchanged: 0/0
  9474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9479 ;;Total ram usage:        0 bytes
  9480 ;; Hardware stack levels used:    1
  9481 ;; Hardware stack levels required when called:   17
  9482 ;; This function calls:
  9483 ;;		_Function_H_9_1
  9484 ;;		_Function_H_9_2
  9485 ;;		_Function_H_9_3
  9486 ;;		_Function_H_9_4
  9487 ;;		_Lcd_Print_String
  9488 ;;		___lbmod
  9489 ;;		___wmul
  9490 ;;		_clear_row1
  9491 ;;		_clear_row2
  9492 ;;		_un_block_code
  9493 ;; This function is called by:
  9494 ;;		_Function_H
  9495 ;; This function uses a non-reentrant model
  9496 ;;
  9497                           
  9498                           	psect	text8
  9499  007EB6                     __ptext8:
  9500                           	opt stack 0
  9501  007EB6                     _Function_H_9:
  9502                           	opt stack 11
  9503                           
  9504                           ;menu.c: 1831: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_MENU,
  9505                           ;menu.c: 1832: lcd_print_once = 0;
  9506                           
  9507                           ;incstack = 0
  9508  007EB6  0E26               	movlw	38
  9509  007EB8  6E4F               	movwf	_which_screen,c
  9510  007EBA  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9511                           
  9512                           ;menu.c: 1833: encoder_click = 0;
  9513  007EBC  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9514                           
  9515                           ;menu.c: 1835: while(encoder_click == 0) {
  9516  007EBE  D02C               	goto	l3927
  9517  007EC0                     
  9518                           ;menu.c: 1839: un_block_code();
  9519  007EC0  EC10  F04C         	call	_un_block_code	;wreg free
  9520                           
  9521                           ;menu.c: 1841: if (lcd_print_once == 0) {
  9522  007EC4  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9523  007EC6  D027               	goto	l3929
  9524                           
  9525                           ;menu.c: 1842: clear_row1();
  9526  007EC8  EC7B  F04B         	call	_clear_row1	;wreg free
  9527                           
  9528                           ;menu.c: 1843: Lcd_Print_String("Last Note Mode:");
  9529  007ECC  0E0D               	movlw	low STR_75
  9530  007ECE  0100               	movlb	0	; () banked
  9531  007ED0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9532  007ED2  0EFE               	movlw	high STR_75
  9533  007ED4  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9534  007ED6  ECD9  F041         	call	_Lcd_Print_String	;wreg free
  9535                           
  9536                           ;menu.c: 1844: clear_row2();
  9537  007EDA  EC67  F04B         	call	_clear_row2	;wreg free
  9538                           
  9539                           ;menu.c: 1845: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
  9540  007EDE  0100               	movlb	0	; () banked
  9541  007EE0  51DC               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
  9542  007EE2  6EE6               	movwf	postinc1,c
  9543  007EE4  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9544  007EE6  6EE6               	movwf	postinc1,c
  9545  007EE8  ECC6  F040         	call	___lbmod	;wreg free
  9546  007EEC  503F               	movf	btemp,w,c
  9547  007EEE  0100               	movlb	0	; () banked
  9548  007EF0  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
  9549  007EF2  6F60               	movwf	___wmul@multiplier& (0+255),b
  9550  007EF4  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9551  007EF6  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9552  007EF8  0E00               	movlw	0
  9553  007EFA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9554  007EFC  0E11               	movlw	17
  9555  007EFE  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9556  007F00  EC8F  F04B         	call	___wmul	;wreg free
  9557  007F04  0E9E               	movlw	low _LCD_STRINGS
  9558  007F06  0100               	movlb	0	; () banked
  9559  007F08  2560               	addwf	?___wmul& (0+255),w,b
  9560  007F0A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9561  007F0C  0EF3               	movlw	high _LCD_STRINGS
  9562  007F0E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9563  007F10  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9564  007F12  ECD9  F041         	call	_Lcd_Print_String	;wreg free
  9565  007F16                     l3929:
  9566                           
  9567                           ;menu.c: 1846: }
  9568                           ;menu.c: 1847: lcd_print_once = 1;
  9569  007F16  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9570  007F18                     l3927:
  9571  007F18  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9572  007F1A  D7D2               	goto	l3928
  9573                           
  9574                           ;menu.c: 1848: }
  9575                           ;menu.c: 1851: if(arpeggiatorLastNoteModeMenu.selector == 0) {Function_H_9_1();}
  9576  007F1C  0100               	movlb	0	; () banked
  9577  007F1E  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9578  007F20  B4D8               	btfsc	status,2,c
  9579                           
  9580                           ; BSR set to: 0
  9581  007F22  ECD0  F03D         	call	_Function_H_9_1	;wreg free
  9582                           
  9583                           ;menu.c: 1852: if(arpeggiatorLastNoteModeMenu.selector == 1) {Function_H_9_2();}
  9584  007F26  0100               	movlb	0	; () banked
  9585  007F28  05DE               	decf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9586  007F2A  B4D8               	btfsc	status,2,c
  9587                           
  9588                           ; BSR set to: 0
  9589  007F2C  EC80  F03D         	call	_Function_H_9_2	;wreg free
  9590                           
  9591                           ;menu.c: 1853: if(arpeggiatorLastNoteModeMenu.selector == 2) {Function_H_9_3();}
  9592  007F30  0E02               	movlw	2
  9593  007F32  0100               	movlb	0	; () banked
  9594  007F34  19DE               	xorwf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9595  007F36  B4D8               	btfsc	status,2,c
  9596                           
  9597                           ; BSR set to: 0
  9598  007F38  EC30  F03D         	call	_Function_H_9_3	;wreg free
  9599                           
  9600                           ;menu.c: 1854: if(arpeggiatorLastNoteModeMenu.selector == 3) {Function_H_9_4();}
  9601  007F3C  0E03               	movlw	3
  9602  007F3E  0100               	movlb	0	; () banked
  9603  007F40  19DE               	xorwf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9604  007F42  A4D8               	btfss	status,2,c
  9605  007F44  0012               	return	
  9606                           
  9607                           ; BSR set to: 0
  9608  007F46  ECE0  F03C         	call	_Function_H_9_4	;wreg free
  9609  007F4A  0012               	return	
  9610  007F4C                     __end_of_Function_H_9:
  9611                           	opt stack 0
  9612                           tblptru	equ	0xFF8
  9613                           tblptrh	equ	0xFF7
  9614                           tblptrl	equ	0xFF6
  9615                           tablat	equ	0xFF5
  9616                           intcon	equ	0xFF2
  9617                           intcon2	equ	0xFF1
  9618                           postinc0	equ	0xFEE
  9619                           wreg	equ	0xFE8
  9620                           postinc1	equ	0xFE6
  9621                           postdec2	equ	0xFDD
  9622                           fsr2l	equ	0xFD9
  9623                           status	equ	0xFD8
  9624                           
  9625 ;; *************** function _Function_H_9_4 *****************
  9626 ;; Defined at:
  9627 ;;		line 1800 in file "menu.c"
  9628 ;; Parameters:    Size  Location     Type
  9629 ;;		None
  9630 ;; Auto vars:     Size  Location     Type
  9631 ;;		None
  9632 ;; Return value:  Size  Location     Type
  9633 ;;                  1    wreg      void 
  9634 ;; Registers used:
  9635 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9636 ;; Tracked objects:
  9637 ;;		On entry : 0/0
  9638 ;;		On exit  : 0/0
  9639 ;;		Unchanged: 0/0
  9640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9645 ;;Total ram usage:        0 bytes
  9646 ;; Hardware stack levels used:    1
  9647 ;; Hardware stack levels required when called:   16
  9648 ;; This function calls:
  9649 ;;		_Lcd_Print_String
  9650 ;;		___lbmod
  9651 ;;		___wmul
  9652 ;;		_clear_row1
  9653 ;;		_clear_row2
  9654 ;;		_un_block_code
  9655 ;; This function is called by:
  9656 ;;		_Function_H_9
  9657 ;; This function uses a non-reentrant model
  9658 ;;
  9659                           
  9660                           	psect	text9
  9661  0079C0                     __ptext9:
  9662                           	opt stack 0
  9663  0079C0                     _Function_H_9_4:
  9664                           	opt stack 11
  9665                           
  9666                           ;menu.c: 1802: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_RESET_MENU;
  9667                           
  9668                           ;incstack = 0
  9669  0079C0  0E2A               	movlw	42
  9670  0079C2  6E4F               	movwf	_which_screen,c
  9671                           
  9672                           ;menu.c: 1803: lcd_print_once = 0;
  9673  0079C4  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9674                           
  9675                           ;menu.c: 1804: encoder_click = 0;
  9676  0079C6  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9677                           
  9678                           ;menu.c: 1806: arpeggiatorLastNoteModeResetMenu.selector = LAST_NOTE_MODE_RESET;
  9679  0079C8  0E00               	movlw	0
  9680  0079CA  BE02               	btfsc	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  9681  0079CC  0E01               	movlw	1
  9682  0079CE  0101               	movlb	1	; () banked
  9683  0079D0  6F0A               	movwf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),b
  9684                           
  9685                           ;menu.c: 1808: while(encoder_click == 0) {
  9686  0079D2  D03D               	goto	l3918
  9687  0079D4                     
  9688                           ;menu.c: 1812: un_block_code();
  9689                           
  9690                           ; BSR set to: 1
  9691  0079D4  EC10  F04C         	call	_un_block_code	;wreg free
  9692                           
  9693                           ;menu.c: 1814: if (lcd_print_once == 0) {
  9694  0079D8  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9695  0079DA  D038               	goto	l3922
  9696                           
  9697                           ;menu.c: 1815: clear_row1();
  9698  0079DC  EC7B  F04B         	call	_clear_row1	;wreg free
  9699                           
  9700                           ;menu.c: 1816: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
  9701  0079E0  0100               	movlb	0	; () banked
  9702  0079E2  51DC               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
  9703  0079E4  6EE6               	movwf	postinc1,c
  9704  0079E6  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9705  0079E8  6EE6               	movwf	postinc1,c
  9706  0079EA  ECC6  F040         	call	___lbmod	;wreg free
  9707  0079EE  503F               	movf	btemp,w,c
  9708  0079F0  0100               	movlb	0	; () banked
  9709  0079F2  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
  9710  0079F4  6F60               	movwf	___wmul@multiplier& (0+255),b
  9711  0079F6  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9712  0079F8  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9713  0079FA  0E00               	movlw	0
  9714  0079FC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9715  0079FE  0E11               	movlw	17
  9716  007A00  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9717  007A02  EC8F  F04B         	call	___wmul	;wreg free
  9718  007A06  0E9E               	movlw	low _LCD_STRINGS
  9719  007A08  0100               	movlb	0	; () banked
  9720  007A0A  2560               	addwf	?___wmul& (0+255),w,b
  9721  007A0C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9722  007A0E  0EF3               	movlw	high _LCD_STRINGS
  9723  007A10  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9724  007A12  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9725  007A14  ECD9  F041         	call	_Lcd_Print_String	;wreg free
  9726                           
  9727                           ;menu.c: 1817: if(arpeggiatorLastNoteModeResetMenu.selector == 0) {clear_row2();Lcd_Prin
      +                          t_String("IMMEDIATE");}
  9728  007A18  0101               	movlb	1	; () banked
  9729  007A1A  510A               	movf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),w,b
  9730  007A1C  A4D8               	btfss	status,2,c
  9731  007A1E  D009               	goto	l3921
  9732                           
  9733                           ; BSR set to: 1
  9734  007A20  EC67  F04B         	call	_clear_row2	;wreg free
  9735  007A24  0EA9               	movlw	low STR_67
  9736  007A26  0100               	movlb	0	; () banked
  9737  007A28  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9738  007A2A  0EFF               	movlw	high STR_67
  9739  007A2C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9740  007A2E  ECD9  F041         	call	_Lcd_Print_String	;wreg free
  9741  007A32                     l3921:
  9742                           
  9743                           ;menu.c: 1818: if(arpeggiatorLastNoteModeResetMenu.selector == 1) {clear_row2();Lcd_Prin
      +                          t_String("FINISH LAST");}
  9744  007A32  0101               	movlb	1	; () banked
  9745  007A34  050A               	decf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),w,b
  9746  007A36  A4D8               	btfss	status,2,c
  9747  007A38  D009               	goto	l3922
  9748                           
  9749                           ; BSR set to: 1
  9750  007A3A  EC67  F04B         	call	_clear_row2	;wreg free
  9751  007A3E  0E7C               	movlw	low STR_68
  9752  007A40  0100               	movlb	0	; () banked
  9753  007A42  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9754  007A44  0EFF               	movlw	high STR_68
  9755  007A46  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9756  007A48  ECD9  F041         	call	_Lcd_Print_String	;wreg free
  9757  007A4C                     l3922:
  9758                           
  9759                           ;menu.c: 1819: }
  9760                           ;menu.c: 1820: lcd_print_once = 1;
  9761  007A4C  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9762  007A4E                     l3918:
  9763  007A4E  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9764  007A50  D7C1               	goto	l3919
  9765                           
  9766                           ;menu.c: 1821: }
  9767                           ;menu.c: 1823: LAST_NOTE_MODE_RESET = arpeggiatorLastNoteModeResetMenu.selector;
  9768  007A52  0101               	movlb	1	; () banked
  9769  007A54  A10A               	btfss	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),0,b
  9770  007A56  D002               	goto	u57950
  9771  007A58  8E02               	bsf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  9772  007A5A  0012               	return	
  9773  007A5C                     u57950:
  9774  007A5C  9E02               	bcf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  9775  007A5E  0012               	return		;funcret
  9776  007A60                     __end_of_Function_H_9_4:
  9777                           	opt stack 0
  9778                           tblptru	equ	0xFF8
  9779                           tblptrh	equ	0xFF7
  9780                           tblptrl	equ	0xFF6
  9781                           tablat	equ	0xFF5
  9782                           intcon	equ	0xFF2
  9783                           intcon2	equ	0xFF1
  9784                           postinc0	equ	0xFEE
  9785                           wreg	equ	0xFE8
  9786                           postinc1	equ	0xFE6
  9787                           postdec2	equ	0xFDD
  9788                           fsr2l	equ	0xFD9
  9789                           status	equ	0xFD8
  9790                           
  9791 ;; *************** function _Function_H_9_3 *****************
  9792 ;; Defined at:
  9793 ;;		line 1772 in file "menu.c"
  9794 ;; Parameters:    Size  Location     Type
  9795 ;;		None
  9796 ;; Auto vars:     Size  Location     Type
  9797 ;;		None
  9798 ;; Return value:  Size  Location     Type
  9799 ;;                  1    wreg      void 
  9800 ;; Registers used:
  9801 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9802 ;; Tracked objects:
  9803 ;;		On entry : 0/0
  9804 ;;		On exit  : 0/0
  9805 ;;		Unchanged: 0/0
  9806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9811 ;;Total ram usage:        0 bytes
  9812 ;; Hardware stack levels used:    1
  9813 ;; Hardware stack levels required when called:   16
  9814 ;; This function calls:
  9815 ;;		_Lcd_Print_String
  9816 ;;		___lbmod
  9817 ;;		___wmul
  9818 ;;		_clear_row1
  9819 ;;		_clear_row2
  9820 ;;		_un_block_code
  9821 ;; This function is called by:
  9822 ;;		_Function_H_9
  9823 ;; This function uses a non-reentrant model
  9824 ;;
  9825                           
  9826                           	psect	text10
  9827  007A60                     __ptext10:
  9828                           	opt stack 0
  9829  007A60                     _Function_H_9_3:
  9830                           	opt stack 11
  9831                           
  9832                           ;menu.c: 1774: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU;
  9833                           
  9834                           ;incstack = 0
  9835  007A60  0E29               	movlw	41
  9836  007A62  6E4F               	movwf	_which_screen,c
  9837                           
  9838                           ;menu.c: 1775: lcd_print_once = 0;
  9839  007A64  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9840                           
  9841                           ;menu.c: 1776: encoder_click = 0;
  9842  007A66  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9843                           
  9844                           ;menu.c: 1778: arpeggiatorLastNoteModeTransposeMenu.selector = LAST_NOTE_MODE_TRANSPOSE;
  9845  007A68  0E00               	movlw	0
  9846  007A6A  B003               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
  9847  007A6C  0E01               	movlw	1
  9848  007A6E  0101               	movlb	1	; () banked
  9849  007A70  6F0D               	movwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),b
  9850                           
  9851                           ;menu.c: 1780: while(encoder_click == 0) {
  9852  007A72  D03D               	goto	l3909
  9853  007A74                     
  9854                           ;menu.c: 1784: un_block_code();
  9855                           
  9856                           ; BSR set to: 1
  9857  007A74  EC10  F04C         	call	_un_block_code	;wreg free
  9858                           
  9859                           ;menu.c: 1786: if (lcd_print_once == 0) {
  9860  007A78  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9861  007A7A  D038               	goto	l3913
  9862                           
  9863                           ;menu.c: 1787: clear_row1();
  9864  007A7C  EC7B  F04B         	call	_clear_row1	;wreg free
  9865                           
  9866                           ;menu.c: 1788: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
  9867  007A80  0100               	movlb	0	; () banked
  9868  007A82  51DC               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
  9869  007A84  6EE6               	movwf	postinc1,c
  9870  007A86  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9871  007A88  6EE6               	movwf	postinc1,c
  9872  007A8A  ECC6  F040         	call	___lbmod	;wreg free
  9873  007A8E  503F               	movf	btemp,w,c
  9874  007A90  0100               	movlb	0	; () banked
  9875  007A92  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
  9876  007A94  6F60               	movwf	___wmul@multiplier& (0+255),b
  9877  007A96  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9878  007A98  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9879  007A9A  0E00               	movlw	0
  9880  007A9C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9881  007A9E  0E11               	movlw	17
  9882  007AA0  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9883  007AA2  EC8F  F04B         	call	___wmul	;wreg free
  9884  007AA6  0E9E               	movlw	low _LCD_STRINGS
  9885  007AA8  0100               	movlb	0	; () banked
  9886  007AAA  2560               	addwf	?___wmul& (0+255),w,b
  9887  007AAC  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9888  007AAE  0EF3               	movlw	high _LCD_STRINGS
  9889  007AB0  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9890  007AB2  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9891  007AB4  ECD9  F041         	call	_Lcd_Print_String	;wreg free
  9892                           
  9893                           ;menu.c: 1789: if(arpeggiatorLastNoteModeTransposeMenu.selector == 0) {clear_row2();Lcd_
      +                          Print_String("IMMEDIATE");}
  9894  007AB8  0101               	movlb	1	; () banked
  9895  007ABA  510D               	movf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),w,b
  9896  007ABC  A4D8               	btfss	status,2,c
  9897  007ABE  D009               	goto	l3912
  9898                           
  9899                           ; BSR set to: 1
  9900  007AC0  EC67  F04B         	call	_clear_row2	;wreg free
  9901  007AC4  0EA9               	movlw	low STR_67
  9902  007AC6  0100               	movlb	0	; () banked
  9903  007AC8  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9904  007ACA  0EFF               	movlw	high STR_67
  9905  007ACC  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9906  007ACE  ECD9  F041         	call	_Lcd_Print_String	;wreg free
  9907  007AD2                     l3912:
  9908                           
  9909                           ;menu.c: 1790: if(arpeggiatorLastNoteModeTransposeMenu.selector == 1) {clear_row2();Lcd_
      +                          Print_String("FINISH LAST");}
  9910  007AD2  0101               	movlb	1	; () banked
  9911  007AD4  050D               	decf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),w,b
  9912  007AD6  A4D8               	btfss	status,2,c
  9913  007AD8  D009               	goto	l3913
  9914                           
  9915                           ; BSR set to: 1
  9916  007ADA  EC67  F04B         	call	_clear_row2	;wreg free
  9917  007ADE  0E7C               	movlw	low STR_68
  9918  007AE0  0100               	movlb	0	; () banked
  9919  007AE2  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9920  007AE4  0EFF               	movlw	high STR_68
  9921  007AE6  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9922  007AE8  ECD9  F041         	call	_Lcd_Print_String	;wreg free
  9923  007AEC                     l3913:
  9924                           
  9925                           ;menu.c: 1791: }
  9926                           ;menu.c: 1792: lcd_print_once = 1;
  9927  007AEC  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9928  007AEE                     l3909:
  9929  007AEE  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9930  007AF0  D7C1               	goto	l3910
  9931                           
  9932                           ;menu.c: 1793: }
  9933                           ;menu.c: 1795: LAST_NOTE_MODE_TRANSPOSE = arpeggiatorLastNoteModeTransposeMenu.selector;
  9934  007AF2  0101               	movlb	1	; () banked
  9935  007AF4  A10D               	btfss	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),0,b
  9936  007AF6  D002               	goto	u57890
  9937  007AF8  8003               	bsf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
  9938  007AFA  0012               	return	
  9939  007AFC                     u57890:
  9940  007AFC  9003               	bcf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
  9941  007AFE  0012               	return		;funcret
  9942  007B00                     __end_of_Function_H_9_3:
  9943                           	opt stack 0
  9944                           tblptru	equ	0xFF8
  9945                           tblptrh	equ	0xFF7
  9946                           tblptrl	equ	0xFF6
  9947                           tablat	equ	0xFF5
  9948                           intcon	equ	0xFF2
  9949                           intcon2	equ	0xFF1
  9950                           postinc0	equ	0xFEE
  9951                           wreg	equ	0xFE8
  9952                           postinc1	equ	0xFE6
  9953                           postdec2	equ	0xFDD
  9954                           fsr2l	equ	0xFD9
  9955                           status	equ	0xFD8
  9956                           
  9957 ;; *************** function _Function_H_9_2 *****************
  9958 ;; Defined at:
  9959 ;;		line 1745 in file "menu.c"
  9960 ;; Parameters:    Size  Location     Type
  9961 ;;		None
  9962 ;; Auto vars:     Size  Location     Type
  9963 ;;		None
  9964 ;; Return value:  Size  Location     Type
  9965 ;;                  1    wreg      void 
  9966 ;; Registers used:
  9967 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9968 ;; Tracked objects:
  9969 ;;		On entry : 0/0
  9970 ;;		On exit  : 0/0
  9971 ;;		Unchanged: 0/0
  9972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9977 ;;Total ram usage:        0 bytes
  9978 ;; Hardware stack levels used:    1
  9979 ;; Hardware stack levels required when called:   16
  9980 ;; This function calls:
  9981 ;;		_Lcd_Print_String
  9982 ;;		___lbmod
  9983 ;;		___wmul
  9984 ;;		_clear_row1
  9985 ;;		_clear_row2
  9986 ;;		_un_block_code
  9987 ;; This function is called by:
  9988 ;;		_Function_H_9
  9989 ;; This function uses a non-reentrant model
  9990 ;;
  9991                           
  9992                           	psect	text11
  9993  007B00                     __ptext11:
  9994                           	opt stack 0
  9995  007B00                     _Function_H_9_2:
  9996                           	opt stack 11
  9997                           
  9998                           ;menu.c: 1747: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_KEY_RELEASE_MENU;
  9999                           
 10000                           ;incstack = 0
 10001  007B00  0E28               	movlw	40
 10002  007B02  6E4F               	movwf	_which_screen,c
 10003                           
 10004                           ;menu.c: 1748: lcd_print_once = 0;
 10005  007B04  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10006                           
 10007                           ;menu.c: 1749: encoder_click = 0;
 10008  007B06  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10009                           
 10010                           ;menu.c: 1751: arpeggiatorLastNoteModeKeyReleaseMenu.selector = LAST_NOTE_MODE_KEY_RELEA
      +                          SE;
 10011  007B08  0E00               	movlw	0
 10012  007B0A  B203               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 10013  007B0C  0E01               	movlw	1
 10014  007B0E  0101               	movlb	1	; () banked
 10015  007B10  6F10               	movwf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),b
 10016                           
 10017                           ;menu.c: 1753: while(encoder_click == 0) {
 10018  007B12  D03D               	goto	l3900
 10019  007B14                     
 10020                           ;menu.c: 1757: un_block_code();
 10021                           
 10022                           ; BSR set to: 1
 10023  007B14  EC10  F04C         	call	_un_block_code	;wreg free
 10024                           
 10025                           ;menu.c: 1759: if (lcd_print_once == 0) {
 10026  007B18  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10027  007B1A  D038               	goto	l3904
 10028                           
 10029                           ;menu.c: 1760: clear_row1();
 10030  007B1C  EC7B  F04B         	call	_clear_row1	;wreg free
 10031                           
 10032                           ;menu.c: 1761: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
 10033  007B20  0100               	movlb	0	; () banked
 10034  007B22  51DC               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
 10035  007B24  6EE6               	movwf	postinc1,c
 10036  007B26  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 10037  007B28  6EE6               	movwf	postinc1,c
 10038  007B2A  ECC6  F040         	call	___lbmod	;wreg free
 10039  007B2E  503F               	movf	btemp,w,c
 10040  007B30  0100               	movlb	0	; () banked
 10041  007B32  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
 10042  007B34  6F60               	movwf	___wmul@multiplier& (0+255),b
 10043  007B36  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 10044  007B38  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10045  007B3A  0E00               	movlw	0
 10046  007B3C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10047  007B3E  0E11               	movlw	17
 10048  007B40  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10049  007B42  EC8F  F04B         	call	___wmul	;wreg free
 10050  007B46  0E9E               	movlw	low _LCD_STRINGS
 10051  007B48  0100               	movlb	0	; () banked
 10052  007B4A  2560               	addwf	?___wmul& (0+255),w,b
 10053  007B4C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10054  007B4E  0EF3               	movlw	high _LCD_STRINGS
 10055  007B50  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10056  007B52  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10057  007B54  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 10058                           
 10059                           ;menu.c: 1762: if(arpeggiatorLastNoteModeKeyReleaseMenu.selector == 0) {clear_row2();Lcd
      +                          _Print_String("IMMEDIATE");}
 10060  007B58  0101               	movlb	1	; () banked
 10061  007B5A  5110               	movf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),w,b
 10062  007B5C  A4D8               	btfss	status,2,c
 10063  007B5E  D009               	goto	l3903
 10064                           
 10065                           ; BSR set to: 1
 10066  007B60  EC67  F04B         	call	_clear_row2	;wreg free
 10067  007B64  0EA9               	movlw	low STR_67
 10068  007B66  0100               	movlb	0	; () banked
 10069  007B68  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10070  007B6A  0EFF               	movlw	high STR_67
 10071  007B6C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10072  007B6E  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 10073  007B72                     l3903:
 10074                           
 10075                           ;menu.c: 1763: if(arpeggiatorLastNoteModeKeyReleaseMenu.selector == 1) {clear_row2();Lcd
      +                          _Print_String("FINISH LAST");}
 10076  007B72  0101               	movlb	1	; () banked
 10077  007B74  0510               	decf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),w,b
 10078  007B76  A4D8               	btfss	status,2,c
 10079  007B78  D009               	goto	l3904
 10080                           
 10081                           ; BSR set to: 1
 10082  007B7A  EC67  F04B         	call	_clear_row2	;wreg free
 10083  007B7E  0E7C               	movlw	low STR_68
 10084  007B80  0100               	movlb	0	; () banked
 10085  007B82  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10086  007B84  0EFF               	movlw	high STR_68
 10087  007B86  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10088  007B88  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 10089  007B8C                     l3904:
 10090                           
 10091                           ;menu.c: 1764: }
 10092                           ;menu.c: 1765: lcd_print_once = 1;
 10093  007B8C  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10094  007B8E                     l3900:
 10095  007B8E  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10096  007B90  D7C1               	goto	l3901
 10097                           
 10098                           ;menu.c: 1766: }
 10099                           ;menu.c: 1768: LAST_NOTE_MODE_KEY_RELEASE = arpeggiatorLastNoteModeKeyReleaseMenu.select
      +                          or;
 10100  007B92  0101               	movlb	1	; () banked
 10101  007B94  A110               	btfss	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),0,b
 10102  007B96  D002               	goto	u57830
 10103  007B98  8203               	bsf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 10104  007B9A  0012               	return	
 10105  007B9C                     u57830:
 10106  007B9C  9203               	bcf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 10107  007B9E  0012               	return		;funcret
 10108  007BA0                     __end_of_Function_H_9_2:
 10109                           	opt stack 0
 10110                           tblptru	equ	0xFF8
 10111                           tblptrh	equ	0xFF7
 10112                           tblptrl	equ	0xFF6
 10113                           tablat	equ	0xFF5
 10114                           intcon	equ	0xFF2
 10115                           intcon2	equ	0xFF1
 10116                           postinc0	equ	0xFEE
 10117                           wreg	equ	0xFE8
 10118                           postinc1	equ	0xFE6
 10119                           postdec2	equ	0xFDD
 10120                           fsr2l	equ	0xFD9
 10121                           status	equ	0xFD8
 10122                           
 10123 ;; *************** function _Function_H_9_1 *****************
 10124 ;; Defined at:
 10125 ;;		line 1718 in file "menu.c"
 10126 ;; Parameters:    Size  Location     Type
 10127 ;;		None
 10128 ;; Auto vars:     Size  Location     Type
 10129 ;;		None
 10130 ;; Return value:  Size  Location     Type
 10131 ;;                  1    wreg      void 
 10132 ;; Registers used:
 10133 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10134 ;; Tracked objects:
 10135 ;;		On entry : 0/0
 10136 ;;		On exit  : 0/0
 10137 ;;		Unchanged: 0/0
 10138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10143 ;;Total ram usage:        0 bytes
 10144 ;; Hardware stack levels used:    1
 10145 ;; Hardware stack levels required when called:   16
 10146 ;; This function calls:
 10147 ;;		_Lcd_Print_String
 10148 ;;		___lbmod
 10149 ;;		___wmul
 10150 ;;		_clear_row1
 10151 ;;		_clear_row2
 10152 ;;		_un_block_code
 10153 ;; This function is called by:
 10154 ;;		_Function_H_9
 10155 ;; This function uses a non-reentrant model
 10156 ;;
 10157                           
 10158                           	psect	text12
 10159  007BA0                     __ptext12:
 10160                           	opt stack 0
 10161  007BA0                     _Function_H_9_1:
 10162                           	opt stack 11
 10163                           
 10164                           ;menu.c: 1720: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_KEY_PRESS_MENU;
 10165                           
 10166                           ;incstack = 0
 10167  007BA0  0E27               	movlw	39
 10168  007BA2  6E4F               	movwf	_which_screen,c
 10169                           
 10170                           ;menu.c: 1721: lcd_print_once = 0;
 10171  007BA4  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10172                           
 10173                           ;menu.c: 1722: encoder_click = 0;
 10174  007BA6  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10175                           
 10176                           ;menu.c: 1724: arpeggiatorLastNoteModeKeyPressMenu.selector = LAST_NOTE_MODE_KEY_PRESS;
 10177  007BA8  0E00               	movlw	0
 10178  007BAA  B403               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 10179  007BAC  0E01               	movlw	1
 10180  007BAE  0101               	movlb	1	; () banked
 10181  007BB0  6F13               	movwf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),b
 10182                           
 10183                           ;menu.c: 1726: while(encoder_click == 0) {
 10184  007BB2  D03D               	goto	l3891
 10185  007BB4                     
 10186                           ;menu.c: 1730: un_block_code();
 10187                           
 10188                           ; BSR set to: 1
 10189  007BB4  EC10  F04C         	call	_un_block_code	;wreg free
 10190                           
 10191                           ;menu.c: 1732: if (lcd_print_once == 0) {
 10192  007BB8  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10193  007BBA  D038               	goto	l3895
 10194                           
 10195                           ;menu.c: 1733: clear_row1();
 10196  007BBC  EC7B  F04B         	call	_clear_row1	;wreg free
 10197                           
 10198                           ;menu.c: 1734: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
 10199  007BC0  0100               	movlb	0	; () banked
 10200  007BC2  51DC               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
 10201  007BC4  6EE6               	movwf	postinc1,c
 10202  007BC6  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 10203  007BC8  6EE6               	movwf	postinc1,c
 10204  007BCA  ECC6  F040         	call	___lbmod	;wreg free
 10205  007BCE  503F               	movf	btemp,w,c
 10206  007BD0  0100               	movlb	0	; () banked
 10207  007BD2  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
 10208  007BD4  6F60               	movwf	___wmul@multiplier& (0+255),b
 10209  007BD6  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 10210  007BD8  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10211  007BDA  0E00               	movlw	0
 10212  007BDC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10213  007BDE  0E11               	movlw	17
 10214  007BE0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10215  007BE2  EC8F  F04B         	call	___wmul	;wreg free
 10216  007BE6  0E9E               	movlw	low _LCD_STRINGS
 10217  007BE8  0100               	movlb	0	; () banked
 10218  007BEA  2560               	addwf	?___wmul& (0+255),w,b
 10219  007BEC  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10220  007BEE  0EF3               	movlw	high _LCD_STRINGS
 10221  007BF0  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10222  007BF2  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10223  007BF4  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 10224                           
 10225                           ;menu.c: 1735: if(arpeggiatorLastNoteModeKeyPressMenu.selector == 0) {clear_row2();Lcd_P
      +                          rint_String("IMMEDIATE");}
 10226  007BF8  0101               	movlb	1	; () banked
 10227  007BFA  5113               	movf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),w,b
 10228  007BFC  A4D8               	btfss	status,2,c
 10229  007BFE  D009               	goto	l3894
 10230                           
 10231                           ; BSR set to: 1
 10232  007C00  EC67  F04B         	call	_clear_row2	;wreg free
 10233  007C04  0EA9               	movlw	low STR_67
 10234  007C06  0100               	movlb	0	; () banked
 10235  007C08  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10236  007C0A  0EFF               	movlw	high STR_67
 10237  007C0C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10238  007C0E  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 10239  007C12                     l3894:
 10240                           
 10241                           ;menu.c: 1736: if(arpeggiatorLastNoteModeKeyPressMenu.selector == 1) {clear_row2();Lcd_P
      +                          rint_String("FINISH LAST");}
 10242  007C12  0101               	movlb	1	; () banked
 10243  007C14  0513               	decf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),w,b
 10244  007C16  A4D8               	btfss	status,2,c
 10245  007C18  D009               	goto	l3895
 10246                           
 10247                           ; BSR set to: 1
 10248  007C1A  EC67  F04B         	call	_clear_row2	;wreg free
 10249  007C1E  0E7C               	movlw	low STR_68
 10250  007C20  0100               	movlb	0	; () banked
 10251  007C22  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10252  007C24  0EFF               	movlw	high STR_68
 10253  007C26  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10254  007C28  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 10255  007C2C                     l3895:
 10256                           
 10257                           ;menu.c: 1737: }
 10258                           ;menu.c: 1738: lcd_print_once = 1;
 10259  007C2C  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10260  007C2E                     l3891:
 10261  007C2E  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10262  007C30  D7C1               	goto	l3892
 10263                           
 10264                           ;menu.c: 1739: }
 10265                           ;menu.c: 1741: LAST_NOTE_MODE_KEY_PRESS = arpeggiatorLastNoteModeKeyPressMenu.selector;
 10266  007C32  0101               	movlb	1	; () banked
 10267  007C34  A113               	btfss	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),0,b
 10268  007C36  D002               	goto	u57770
 10269  007C38  8403               	bsf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 10270  007C3A  0012               	return	
 10271  007C3C                     u57770:
 10272  007C3C  9403               	bcf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 10273  007C3E  0012               	return		;funcret
 10274  007C40                     __end_of_Function_H_9_1:
 10275                           	opt stack 0
 10276                           tblptru	equ	0xFF8
 10277                           tblptrh	equ	0xFF7
 10278                           tblptrl	equ	0xFF6
 10279                           tablat	equ	0xFF5
 10280                           intcon	equ	0xFF2
 10281                           intcon2	equ	0xFF1
 10282                           postinc0	equ	0xFEE
 10283                           wreg	equ	0xFE8
 10284                           postinc1	equ	0xFE6
 10285                           postdec2	equ	0xFDD
 10286                           fsr2l	equ	0xFD9
 10287                           status	equ	0xFD8
 10288                           
 10289 ;; *************** function _Function_H_8 *****************
 10290 ;; Defined at:
 10291 ;;		line 1692 in file "menu.c"
 10292 ;; Parameters:    Size  Location     Type
 10293 ;;		None
 10294 ;; Auto vars:     Size  Location     Type
 10295 ;;		None
 10296 ;; Return value:  Size  Location     Type
 10297 ;;                  1    wreg      void 
 10298 ;; Registers used:
 10299 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10300 ;; Tracked objects:
 10301 ;;		On entry : 0/0
 10302 ;;		On exit  : 0/0
 10303 ;;		Unchanged: 0/0
 10304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10309 ;;Total ram usage:        0 bytes
 10310 ;; Hardware stack levels used:    1
 10311 ;; Hardware stack levels required when called:   17
 10312 ;; This function calls:
 10313 ;;		_Function_H_8_1
 10314 ;;		_Function_H_8_2
 10315 ;;		_Lcd_Print_String
 10316 ;;		___lbmod
 10317 ;;		___wmul
 10318 ;;		_clear_row2
 10319 ;;		_un_block_code
 10320 ;; This function is called by:
 10321 ;;		_Function_H
 10322 ;; This function uses a non-reentrant model
 10323 ;;
 10324                           
 10325                           	psect	text13
 10326  008AD4                     __ptext13:
 10327                           	opt stack 0
 10328  008AD4                     _Function_H_8:
 10329                           	opt stack 11
 10330                           
 10331                           ;menu.c: 1694: which_screen = ARPEGGIATOR_RANDOMIZE_SKIP_MENU;
 10332                           
 10333                           ;incstack = 0
 10334  008AD4  0E23               	movlw	35
 10335  008AD6  6E4F               	movwf	_which_screen,c
 10336                           
 10337                           ;menu.c: 1695: lcd_print_once = 0;
 10338  008AD8  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10339                           
 10340                           ;menu.c: 1696: encoder_click = 0;
 10341  008ADA  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10342                           
 10343                           ;menu.c: 1698: while(encoder_click == 0) {
 10344  008ADC  D024               	goto	l3882
 10345  008ADE                     
 10346                           ;menu.c: 1702: un_block_code();
 10347  008ADE  EC10  F04C         	call	_un_block_code	;wreg free
 10348                           
 10349                           ;menu.c: 1704: if (lcd_print_once == 0) {
 10350  008AE2  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10351  008AE4  D01F               	goto	l3884
 10352                           
 10353                           ;menu.c: 1705: clear_row2();
 10354  008AE6  EC67  F04B         	call	_clear_row2	;wreg free
 10355                           
 10356                           ;menu.c: 1706: Lcd_Print_String(LCD_STRINGS[(arpeggiatorRandomizeSkipMenu.selector % arp
      +                          eggiatorRandomizeSkipMenu.number) + arpeggiatorRandomizeSkipMenu.address]);
 10357  008AEA  0101               	movlb	1	; () banked
 10358  008AEC  511A               	movf	_arpeggiatorRandomizeSkipMenu& (0+255),w,b
 10359  008AEE  6EE6               	movwf	postinc1,c
 10360  008AF0  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 10361  008AF2  6EE6               	movwf	postinc1,c
 10362  008AF4  ECC6  F040         	call	___lbmod	;wreg free
 10363  008AF8  503F               	movf	btemp,w,c
 10364  008AFA  0101               	movlb	1	; () banked
 10365  008AFC  251B               	addwf	(_arpeggiatorRandomizeSkipMenu+1)& (0+255),w,b
 10366  008AFE  0100               	movlb	0	; () banked
 10367  008B00  6F60               	movwf	___wmul@multiplier& (0+255),b
 10368  008B02  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 10369  008B04  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10370  008B06  0E00               	movlw	0
 10371  008B08  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10372  008B0A  0E11               	movlw	17
 10373  008B0C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10374  008B0E  EC8F  F04B         	call	___wmul	;wreg free
 10375  008B12  0E9E               	movlw	low _LCD_STRINGS
 10376  008B14  0100               	movlb	0	; () banked
 10377  008B16  2560               	addwf	?___wmul& (0+255),w,b
 10378  008B18  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10379  008B1A  0EF3               	movlw	high _LCD_STRINGS
 10380  008B1C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10381  008B1E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10382  008B20  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 10383  008B24                     l3884:
 10384                           
 10385                           ;menu.c: 1707: }
 10386                           ;menu.c: 1708: lcd_print_once = 1;
 10387  008B24  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10388  008B26                     l3882:
 10389  008B26  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10390  008B28  D7DA               	goto	l3883
 10391                           
 10392                           ;menu.c: 1709: }
 10393                           ;menu.c: 1712: if(arpeggiatorRandomizeSkipMenu.selector == 0) {Function_H_8_1();}
 10394  008B2A  0101               	movlb	1	; () banked
 10395  008B2C  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 10396  008B2E  B4D8               	btfsc	status,2,c
 10397                           
 10398                           ; BSR set to: 1
 10399  008B30  EC0E  F044         	call	_Function_H_8_1	;wreg free
 10400                           
 10401                           ;menu.c: 1713: if(arpeggiatorRandomizeSkipMenu.selector == 1) {Function_H_8_2();}
 10402  008B34  0101               	movlb	1	; () banked
 10403  008B36  051C               	decf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 10404  008B38  A4D8               	btfss	status,2,c
 10405  008B3A  0012               	return	
 10406                           
 10407                           ; BSR set to: 1
 10408  008B3C  ECDF  F046         	call	_Function_H_8_2	;wreg free
 10409  008B40  0012               	return	
 10410  008B42                     __end_of_Function_H_8:
 10411                           	opt stack 0
 10412                           tblptru	equ	0xFF8
 10413                           tblptrh	equ	0xFF7
 10414                           tblptrl	equ	0xFF6
 10415                           tablat	equ	0xFF5
 10416                           intcon	equ	0xFF2
 10417                           intcon2	equ	0xFF1
 10418                           postinc0	equ	0xFEE
 10419                           wreg	equ	0xFE8
 10420                           postinc1	equ	0xFE6
 10421                           postdec2	equ	0xFDD
 10422                           fsr2l	equ	0xFD9
 10423                           status	equ	0xFD8
 10424                           
 10425 ;; *************** function _Function_H_8_2 *****************
 10426 ;; Defined at:
 10427 ;;		line 1666 in file "menu.c"
 10428 ;; Parameters:    Size  Location     Type
 10429 ;;		None
 10430 ;; Auto vars:     Size  Location     Type
 10431 ;;		None
 10432 ;; Return value:  Size  Location     Type
 10433 ;;                  1    wreg      void 
 10434 ;; Registers used:
 10435 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10436 ;; Tracked objects:
 10437 ;;		On entry : 0/0
 10438 ;;		On exit  : 0/0
 10439 ;;		Unchanged: 0/0
 10440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10445 ;;Total ram usage:        0 bytes
 10446 ;; Hardware stack levels used:    1
 10447 ;; Hardware stack levels required when called:   16
 10448 ;; This function calls:
 10449 ;;		_Lcd_Print_String
 10450 ;;		_clear_row2
 10451 ;;		_un_block_code
 10452 ;; This function is called by:
 10453 ;;		_Function_H_8
 10454 ;; This function uses a non-reentrant model
 10455 ;;
 10456                           
 10457                           	psect	text14
 10458  008DBE                     __ptext14:
 10459                           	opt stack 0
 10460  008DBE                     _Function_H_8_2:
 10461                           	opt stack 11
 10462                           
 10463                           ;menu.c: 1668: which_screen = ARPEGGIATOR_SKIP_FIRST_LAST_MENU;
 10464                           
 10465                           ;incstack = 0
 10466  008DBE  0E25               	movlw	37
 10467  008DC0  6E4F               	movwf	_which_screen,c
 10468                           
 10469                           ;menu.c: 1669: lcd_print_once = 0;
 10470  008DC2  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10471                           
 10472                           ;menu.c: 1670: encoder_click = 0;
 10473  008DC4  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10474                           
 10475                           ;menu.c: 1672: arpeggiatorSkipFirstLastMenu.selector = skipFirstLast;
 10476  008DC6  0E00               	movlw	0
 10477  008DC8  B803               	btfsc	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 10478  008DCA  0E01               	movlw	1
 10479  008DCC  0101               	movlb	1	; () banked
 10480  008DCE  6F16               	movwf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),b
 10481                           
 10482                           ;menu.c: 1674: while(encoder_click == 0) {
 10483  008DD0  D01F               	goto	l3873
 10484  008DD2                     
 10485                           ;menu.c: 1678: un_block_code();
 10486                           
 10487                           ; BSR set to: 1
 10488  008DD2  EC10  F04C         	call	_un_block_code	;wreg free
 10489                           
 10490                           ;menu.c: 1680: if (lcd_print_once == 0) {
 10491  008DD6  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10492  008DD8  D01A               	goto	l3877
 10493                           
 10494                           ;menu.c: 1681: if(arpeggiatorSkipFirstLastMenu.selector == 0) {clear_row2();Lcd_Print_St
      +                          ring("Skip F/L OFF");}
 10495  008DDA  0101               	movlb	1	; () banked
 10496  008DDC  5116               	movf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),w,b
 10497  008DDE  A4D8               	btfss	status,2,c
 10498  008DE0  D009               	goto	l3876
 10499                           
 10500                           ; BSR set to: 1
 10501  008DE2  EC67  F04B         	call	_clear_row2	;wreg free
 10502  008DE6  0E3F               	movlw	low STR_65
 10503  008DE8  0100               	movlb	0	; () banked
 10504  008DEA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10505  008DEC  0EFF               	movlw	high STR_65
 10506  008DEE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10507  008DF0  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 10508  008DF4                     l3876:
 10509                           
 10510                           ;menu.c: 1682: if(arpeggiatorSkipFirstLastMenu.selector == 1) {clear_row2();Lcd_Print_St
      +                          ring("Skip F/L ON");}
 10511  008DF4  0101               	movlb	1	; () banked
 10512  008DF6  0516               	decf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),w,b
 10513  008DF8  A4D8               	btfss	status,2,c
 10514  008DFA  D009               	goto	l3877
 10515                           
 10516                           ; BSR set to: 1
 10517  008DFC  EC67  F04B         	call	_clear_row2	;wreg free
 10518  008E00  0E70               	movlw	low STR_66
 10519  008E02  0100               	movlb	0	; () banked
 10520  008E04  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10521  008E06  0EFF               	movlw	high STR_66
 10522  008E08  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10523  008E0A  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 10524  008E0E                     l3877:
 10525                           
 10526                           ;menu.c: 1683: }
 10527                           ;menu.c: 1684: lcd_print_once = 1;
 10528  008E0E  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10529  008E10                     l3873:
 10530  008E10  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10531  008E12  D7DF               	goto	l3874
 10532                           
 10533                           ;menu.c: 1685: }
 10534                           ;menu.c: 1687: skipFirstLast = arpeggiatorSkipFirstLastMenu.selector;
 10535  008E14  0101               	movlb	1	; () banked
 10536  008E16  A116               	btfss	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),0,b
 10537  008E18  D002               	goto	u57710
 10538  008E1A  8803               	bsf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 10539  008E1C  0012               	return	
 10540  008E1E                     u57710:
 10541  008E1E  9803               	bcf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 10542  008E20  0012               	return		;funcret
 10543  008E22                     __end_of_Function_H_8_2:
 10544                           	opt stack 0
 10545                           tblptru	equ	0xFF8
 10546                           tblptrh	equ	0xFF7
 10547                           tblptrl	equ	0xFF6
 10548                           tablat	equ	0xFF5
 10549                           intcon	equ	0xFF2
 10550                           intcon2	equ	0xFF1
 10551                           postinc0	equ	0xFEE
 10552                           wreg	equ	0xFE8
 10553                           postinc1	equ	0xFE6
 10554                           postdec2	equ	0xFDD
 10555                           fsr2l	equ	0xFD9
 10556                           status	equ	0xFD8
 10557                           
 10558 ;; *************** function _Function_H_8_1 *****************
 10559 ;; Defined at:
 10560 ;;		line 1636 in file "menu.c"
 10561 ;; Parameters:    Size  Location     Type
 10562 ;;		None
 10563 ;; Auto vars:     Size  Location     Type
 10564 ;;		None
 10565 ;; Return value:  Size  Location     Type
 10566 ;;                  1    wreg      void 
 10567 ;; Registers used:
 10568 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10569 ;; Tracked objects:
 10570 ;;		On entry : 0/0
 10571 ;;		On exit  : 0/0
 10572 ;;		Unchanged: 0/0
 10573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10578 ;;Total ram usage:        0 bytes
 10579 ;; Hardware stack levels used:    1
 10580 ;; Hardware stack levels required when called:   16
 10581 ;; This function calls:
 10582 ;;		_Lcd_Print_String
 10583 ;;		_clear_row1
 10584 ;;		_clear_row2
 10585 ;;		_un_block_code
 10586 ;; This function is called by:
 10587 ;;		_Function_H_8
 10588 ;; This function uses a non-reentrant model
 10589 ;;
 10590                           
 10591                           	psect	text15
 10592  00881C                     __ptext15:
 10593                           	opt stack 0
 10594  00881C                     _Function_H_8_1:
 10595                           	opt stack 11
 10596                           
 10597                           ;menu.c: 1638: which_screen = ARPEGGIATOR_RANDOMIZE_TYPE_MENU;
 10598                           
 10599                           ;incstack = 0
 10600  00881C  0E24               	movlw	36
 10601  00881E  6E4F               	movwf	_which_screen,c
 10602                           
 10603                           ;menu.c: 1639: lcd_print_once = 0;
 10604  008820  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10605                           
 10606                           ;menu.c: 1640: encoder_click = 0;
 10607  008822  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10608                           
 10609                           ;menu.c: 1642: arpeggiatorRandomizeTypeMenu.selector = AUTO_RANDOMIZE;
 10610  008824  0E00               	movlw	0
 10611  008826  BA03               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 10612  008828  0E01               	movlw	1
 10613  00882A  0101               	movlb	1	; () banked
 10614  00882C  6F19               	movwf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),b
 10615                           
 10616                           ;menu.c: 1644: while(encoder_click == 0) {
 10617  00882E  D028               	goto	l3864
 10618  008830                     
 10619                           ;menu.c: 1648: un_block_code();
 10620                           
 10621                           ; BSR set to: 1
 10622  008830  EC10  F04C         	call	_un_block_code	;wreg free
 10623                           
 10624                           ;menu.c: 1650: if (lcd_print_once == 0) {
 10625  008834  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10626  008836  D023               	goto	l3868
 10627                           
 10628                           ;menu.c: 1651: clear_row1();
 10629  008838  EC7B  F04B         	call	_clear_row1	;wreg free
 10630                           
 10631                           ;menu.c: 1652: Lcd_Print_String("Randomize Type:");
 10632  00883C  0E1D               	movlw	low STR_62
 10633  00883E  0100               	movlb	0	; () banked
 10634  008840  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10635  008842  0EFE               	movlw	high STR_62
 10636  008844  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10637  008846  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 10638                           
 10639                           ;menu.c: 1655: if(arpeggiatorRandomizeTypeMenu.selector == 0) {clear_row2();Lcd_Print_St
      +                          ring("RANDOMIZE AUTO");}
 10640  00884A  0101               	movlb	1	; () banked
 10641  00884C  5119               	movf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),w,b
 10642  00884E  A4D8               	btfss	status,2,c
 10643  008850  D009               	goto	l3867
 10644                           
 10645                           ; BSR set to: 1
 10646  008852  EC67  F04B         	call	_clear_row2	;wreg free
 10647  008856  0EA7               	movlw	low STR_63
 10648  008858  0100               	movlb	0	; () banked
 10649  00885A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10650  00885C  0EFE               	movlw	high STR_63
 10651  00885E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10652  008860  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 10653  008864                     l3867:
 10654                           
 10655                           ;menu.c: 1656: if(arpeggiatorRandomizeTypeMenu.selector == 1) {clear_row2();Lcd_Print_St
      +                          ring("RANDOMIZE ONCE");}
 10656  008864  0101               	movlb	1	; () banked
 10657  008866  0519               	decf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),w,b
 10658  008868  A4D8               	btfss	status,2,c
 10659  00886A  D009               	goto	l3868
 10660                           
 10661                           ; BSR set to: 1
 10662  00886C  EC67  F04B         	call	_clear_row2	;wreg free
 10663  008870  0E7A               	movlw	low STR_64
 10664  008872  0100               	movlb	0	; () banked
 10665  008874  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10666  008876  0EFE               	movlw	high STR_64
 10667  008878  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10668  00887A  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 10669  00887E                     l3868:
 10670                           
 10671                           ;menu.c: 1657: }
 10672                           ;menu.c: 1658: lcd_print_once = 1;
 10673  00887E  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10674  008880                     l3864:
 10675  008880  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10676  008882  D7D6               	goto	l3865
 10677                           
 10678                           ;menu.c: 1659: }
 10679                           ;menu.c: 1661: AUTO_RANDOMIZE = arpeggiatorRandomizeTypeMenu.selector;
 10680  008884  0101               	movlb	1	; () banked
 10681  008886  A119               	btfss	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),0,b
 10682  008888  D002               	goto	u57650
 10683  00888A  8A03               	bsf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 10684  00888C  0012               	return	
 10685  00888E                     u57650:
 10686  00888E  9A03               	bcf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 10687  008890  0012               	return		;funcret
 10688  008892                     __end_of_Function_H_8_1:
 10689                           	opt stack 0
 10690                           tblptru	equ	0xFF8
 10691                           tblptrh	equ	0xFF7
 10692                           tblptrl	equ	0xFF6
 10693                           tablat	equ	0xFF5
 10694                           intcon	equ	0xFF2
 10695                           intcon2	equ	0xFF1
 10696                           postinc0	equ	0xFEE
 10697                           wreg	equ	0xFE8
 10698                           postinc1	equ	0xFE6
 10699                           postdec2	equ	0xFDD
 10700                           fsr2l	equ	0xFD9
 10701                           status	equ	0xFD8
 10702                           
 10703 ;; *************** function _Function_H_7 *****************
 10704 ;; Defined at:
 10705 ;;		line 1599 in file "menu.c"
 10706 ;; Parameters:    Size  Location     Type
 10707 ;;		None
 10708 ;; Auto vars:     Size  Location     Type
 10709 ;;		None
 10710 ;; Return value:  Size  Location     Type
 10711 ;;                  1    wreg      void 
 10712 ;; Registers used:
 10713 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10714 ;; Tracked objects:
 10715 ;;		On entry : 0/0
 10716 ;;		On exit  : 0/0
 10717 ;;		Unchanged: 0/0
 10718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10723 ;;Total ram usage:        0 bytes
 10724 ;; Hardware stack levels used:    1
 10725 ;; Hardware stack levels required when called:   16
 10726 ;; This function calls:
 10727 ;;		_Lcd_Print_String
 10728 ;;		_clear_row1
 10729 ;;		_clear_row2
 10730 ;;		_strcpy
 10731 ;;		_un_block_code
 10732 ;; This function is called by:
 10733 ;;		_Function_H
 10734 ;; This function uses a non-reentrant model
 10735 ;;
 10736                           
 10737                           	psect	text16
 10738  007710                     __ptext16:
 10739                           	opt stack 0
 10740  007710                     _Function_H_7:
 10741                           	opt stack 12
 10742                           
 10743                           ;menu.c: 1601: which_screen = ARPEGGIATOR_UN_LATCH_MODE_MENU;
 10744                           
 10745                           ;incstack = 0
 10746  007710  0E22               	movlw	34
 10747  007712  6E4F               	movwf	_which_screen,c
 10748                           
 10749                           ;menu.c: 1602: lcd_print_once = 0;
 10750  007714  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10751                           
 10752                           ;menu.c: 1603: encoder_click = 0;
 10753  007716  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10754                           
 10755                           ;menu.c: 1605: arpeggiatorUnLatchModeMenu.selector = UN_LATCH_MODE;
 10756  007718  0E00               	movlw	0
 10757  00771A  B004               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 10758  00771C  0E01               	movlw	1
 10759  00771E  0101               	movlb	1	; () banked
 10760  007720  6F1F               	movwf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),b
 10761                           
 10762                           ;menu.c: 1607: while(encoder_click == 0) {
 10763  007722  D044               	goto	l3855
 10764  007724                     
 10765                           ;menu.c: 1611: un_block_code();
 10766                           
 10767                           ; BSR set to: 1
 10768  007724  EC10  F04C         	call	_un_block_code	;wreg free
 10769                           
 10770                           ;menu.c: 1613: if (lcd_print_once == 0) {
 10771  007728  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10772  00772A  D03F               	goto	l3859
 10773                           
 10774                           ;menu.c: 1614: clear_row1();
 10775  00772C  EC7B  F04B         	call	_clear_row1	;wreg free
 10776                           
 10777                           ;menu.c: 1615: Lcd_Print_String("Un-latch Mode:");
 10778  007730  0E5C               	movlw	low STR_57
 10779  007732  0100               	movlb	0	; () banked
 10780  007734  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10781  007736  0EFE               	movlw	high STR_57
 10782  007738  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10783  00773A  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 10784                           
 10785                           ;menu.c: 1616: clear_row2();
 10786  00773E  EC67  F04B         	call	_clear_row2	;wreg free
 10787                           
 10788                           ;menu.c: 1618: if(arpeggiatorUnLatchModeMenu.selector == 0) {
 10789  007742  0101               	movlb	1	; () banked
 10790  007744  511F               	movf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),w,b
 10791  007746  A4D8               	btfss	status,2,c
 10792  007748  D016               	goto	l3858
 10793                           
 10794                           ; BSR set to: 1
 10795                           ;menu.c: 1619: clear_row2();Lcd_Print_String("UNLATCH ALL");
 10796  00774A  EC67  F04B         	call	_clear_row2	;wreg free
 10797  00774E  0E64               	movlw	low STR_58
 10798  007750  0100               	movlb	0	; () banked
 10799  007752  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10800  007754  0EFF               	movlw	high STR_58
 10801  007756  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10802  007758  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 10803                           
 10804                           ;menu.c: 1620: DISPLAY_MODE = 1;
 10805  00775C  0E01               	movlw	1
 10806  00775E  0100               	movlb	0	; () banked
 10807  007760  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 10808                           
 10809                           ; BSR set to: 0
 10810                           ;menu.c: 1621: strcpy(string_to_display, " ALL");
 10811  007762  0EF8               	movlw	low _string_to_display
 10812  007764  6F60               	movwf	strcpy@to& (0+255),b
 10813  007766  0E01               	movlw	high _string_to_display
 10814  007768  6F61               	movwf	(strcpy@to+1)& (0+255),b
 10815  00776A  0E6B               	movlw	low (STR_58+7)
 10816  00776C  6F62               	movwf	strcpy@from& (0+255),b
 10817  00776E  0EFF               	movlw	high (STR_58+7)
 10818  007770  6F63               	movwf	(strcpy@from+1)& (0+255),b
 10819  007772  ECF3  F04A         	call	_strcpy	;wreg free
 10820  007776                     l3858:
 10821                           
 10822                           ;menu.c: 1622: }
 10823                           ;menu.c: 1623: if(arpeggiatorUnLatchModeMenu.selector == 1) {
 10824  007776  0101               	movlb	1	; () banked
 10825  007778  051F               	decf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),w,b
 10826  00777A  A4D8               	btfss	status,2,c
 10827  00777C  D016               	goto	l3859
 10828                           
 10829                           ; BSR set to: 1
 10830                           ;menu.c: 1624: clear_row2();Lcd_Print_String("ONE AT A TIME");
 10831  00777E  EC67  F04B         	call	_clear_row2	;wreg free
 10832  007782  0EFC               	movlw	low STR_60
 10833  007784  0100               	movlb	0	; () banked
 10834  007786  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10835  007788  0EFE               	movlw	high STR_60
 10836  00778A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10837  00778C  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 10838                           
 10839                           ;menu.c: 1625: DISPLAY_MODE = 1;
 10840  007790  0E01               	movlw	1
 10841  007792  0100               	movlb	0	; () banked
 10842  007794  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 10843                           
 10844                           ; BSR set to: 0
 10845                           ;menu.c: 1626: strcpy(string_to_display, " OnE");
 10846  007796  0EF8               	movlw	low _string_to_display
 10847  007798  6F60               	movwf	strcpy@to& (0+255),b
 10848  00779A  0E01               	movlw	high _string_to_display
 10849  00779C  6F61               	movwf	(strcpy@to+1)& (0+255),b
 10850  00779E  0EC8               	movlw	low STR_61
 10851  0077A0  6F62               	movwf	strcpy@from& (0+255),b
 10852  0077A2  0EFF               	movlw	high STR_61
 10853  0077A4  6F63               	movwf	(strcpy@from+1)& (0+255),b
 10854  0077A6  ECF3  F04A         	call	_strcpy	;wreg free
 10855  0077AA                     l3859:
 10856                           
 10857                           ;menu.c: 1627: }
 10858                           ;menu.c: 1628: }
 10859                           ;menu.c: 1629: lcd_print_once = 1;
 10860  0077AA  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10861  0077AC                     l3855:
 10862  0077AC  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10863  0077AE  D7BA               	goto	l3856
 10864                           
 10865                           ;menu.c: 1630: }
 10866                           ;menu.c: 1632: UN_LATCH_MODE = arpeggiatorUnLatchModeMenu.selector;
 10867  0077B0  0101               	movlb	1	; () banked
 10868  0077B2  A11F               	btfss	(_arpeggiatorUnLatchModeMenu+2)& (0+255),0,b
 10869  0077B4  D002               	goto	u58920
 10870  0077B6  8004               	bsf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 10871  0077B8  0012               	return	
 10872  0077BA                     u58920:
 10873  0077BA  9004               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 10874  0077BC  0012               	return		;funcret
 10875  0077BE                     __end_of_Function_H_7:
 10876                           	opt stack 0
 10877                           tblptru	equ	0xFF8
 10878                           tblptrh	equ	0xFF7
 10879                           tblptrl	equ	0xFF6
 10880                           tablat	equ	0xFF5
 10881                           intcon	equ	0xFF2
 10882                           intcon2	equ	0xFF1
 10883                           postinc0	equ	0xFEE
 10884                           wreg	equ	0xFE8
 10885                           postinc1	equ	0xFE6
 10886                           postdec2	equ	0xFDD
 10887                           fsr2l	equ	0xFD9
 10888                           status	equ	0xFD8
 10889                           
 10890 ;; *************** function _Function_H_6 *****************
 10891 ;; Defined at:
 10892 ;;		line 1574 in file "menu.c"
 10893 ;; Parameters:    Size  Location     Type
 10894 ;;		None
 10895 ;; Auto vars:     Size  Location     Type
 10896 ;;		None
 10897 ;; Return value:  Size  Location     Type
 10898 ;;                  1    wreg      void 
 10899 ;; Registers used:
 10900 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10901 ;; Tracked objects:
 10902 ;;		On entry : 0/0
 10903 ;;		On exit  : 0/0
 10904 ;;		Unchanged: 0/0
 10905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10910 ;;Total ram usage:        0 bytes
 10911 ;; Hardware stack levels used:    1
 10912 ;; Hardware stack levels required when called:   17
 10913 ;; This function calls:
 10914 ;;		_Function_H_6_1
 10915 ;;		_Function_H_6_2
 10916 ;;		_Lcd_Print_String
 10917 ;;		___lbmod
 10918 ;;		___wmul
 10919 ;;		_clear_row2
 10920 ;;		_un_block_code
 10921 ;; This function is called by:
 10922 ;;		_Function_H
 10923 ;; This function uses a non-reentrant model
 10924 ;;
 10925                           
 10926                           	psect	text17
 10927  008B42                     __ptext17:
 10928                           	opt stack 0
 10929  008B42                     _Function_H_6:
 10930                           	opt stack 11
 10931                           
 10932                           ;menu.c: 1576: which_screen = ARPEGGIATOR_LATCH_MENU;
 10933                           
 10934                           ;incstack = 0
 10935  008B42  0E1F               	movlw	31
 10936  008B44  6E4F               	movwf	_which_screen,c
 10937                           
 10938                           ;menu.c: 1577: lcd_print_once = 0;
 10939  008B46  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10940                           
 10941                           ;menu.c: 1578: encoder_click = 0;
 10942  008B48  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10943                           
 10944                           ;menu.c: 1580: while(encoder_click == 0) {
 10945  008B4A  D024               	goto	l3846
 10946  008B4C                     
 10947                           ;menu.c: 1584: un_block_code();
 10948  008B4C  EC10  F04C         	call	_un_block_code	;wreg free
 10949                           
 10950                           ;menu.c: 1586: if (lcd_print_once == 0) {
 10951  008B50  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10952  008B52  D01F               	goto	l3848
 10953                           
 10954                           ;menu.c: 1587: clear_row2();
 10955  008B54  EC67  F04B         	call	_clear_row2	;wreg free
 10956                           
 10957                           ;menu.c: 1588: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLatchMenu.selector % arpeggiator
      +                          LatchMenu.number) + arpeggiatorLatchMenu.address]);
 10958  008B58  0101               	movlb	1	; () banked
 10959  008B5A  5126               	movf	_arpeggiatorLatchMenu& (0+255),w,b
 10960  008B5C  6EE6               	movwf	postinc1,c
 10961  008B5E  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 10962  008B60  6EE6               	movwf	postinc1,c
 10963  008B62  ECC6  F040         	call	___lbmod	;wreg free
 10964  008B66  503F               	movf	btemp,w,c
 10965  008B68  0101               	movlb	1	; () banked
 10966  008B6A  2527               	addwf	(_arpeggiatorLatchMenu+1)& (0+255),w,b
 10967  008B6C  0100               	movlb	0	; () banked
 10968  008B6E  6F60               	movwf	___wmul@multiplier& (0+255),b
 10969  008B70  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 10970  008B72  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10971  008B74  0E00               	movlw	0
 10972  008B76  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10973  008B78  0E11               	movlw	17
 10974  008B7A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10975  008B7C  EC8F  F04B         	call	___wmul	;wreg free
 10976  008B80  0E9E               	movlw	low _LCD_STRINGS
 10977  008B82  0100               	movlb	0	; () banked
 10978  008B84  2560               	addwf	?___wmul& (0+255),w,b
 10979  008B86  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10980  008B88  0EF3               	movlw	high _LCD_STRINGS
 10981  008B8A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10982  008B8C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10983  008B8E  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 10984  008B92                     l3848:
 10985                           
 10986                           ;menu.c: 1589: }
 10987                           ;menu.c: 1590: lcd_print_once = 1;
 10988  008B92  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10989  008B94                     l3846:
 10990  008B94  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10991  008B96  D7DA               	goto	l3847
 10992                           
 10993                           ;menu.c: 1591: }
 10994                           ;menu.c: 1594: if(arpeggiatorLatchMenu.selector == 0) {Function_H_6_1();}
 10995  008B98  0101               	movlb	1	; () banked
 10996  008B9A  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 10997  008B9C  B4D8               	btfsc	status,2,c
 10998                           
 10999                           ; BSR set to: 1
 11000  008B9E  ECC0  F03E         	call	_Function_H_6_1	;wreg free
 11001                           
 11002                           ;menu.c: 1595: if(arpeggiatorLatchMenu.selector == 1) {Function_H_6_2();}
 11003  008BA2  0101               	movlb	1	; () banked
 11004  008BA4  0528               	decf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 11005  008BA6  A4D8               	btfss	status,2,c
 11006  008BA8  0012               	return	
 11007                           
 11008                           ; BSR set to: 1
 11009  008BAA  EC36  F03C         	call	_Function_H_6_2	;wreg free
 11010  008BAE  0012               	return	
 11011  008BB0                     __end_of_Function_H_6:
 11012                           	opt stack 0
 11013                           tblptru	equ	0xFF8
 11014                           tblptrh	equ	0xFF7
 11015                           tblptrl	equ	0xFF6
 11016                           tablat	equ	0xFF5
 11017                           intcon	equ	0xFF2
 11018                           intcon2	equ	0xFF1
 11019                           postinc0	equ	0xFEE
 11020                           wreg	equ	0xFE8
 11021                           postinc1	equ	0xFE6
 11022                           postdec2	equ	0xFDD
 11023                           fsr2l	equ	0xFD9
 11024                           status	equ	0xFD8
 11025                           
 11026 ;; *************** function _Function_H_6_2 *****************
 11027 ;; Defined at:
 11028 ;;		line 1539 in file "menu.c"
 11029 ;; Parameters:    Size  Location     Type
 11030 ;;		None
 11031 ;; Auto vars:     Size  Location     Type
 11032 ;;		None
 11033 ;; Return value:  Size  Location     Type
 11034 ;;                  1    wreg      void 
 11035 ;; Registers used:
 11036 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11037 ;; Tracked objects:
 11038 ;;		On entry : 0/0
 11039 ;;		On exit  : 0/0
 11040 ;;		Unchanged: 0/0
 11041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11046 ;;Total ram usage:        0 bytes
 11047 ;; Hardware stack levels used:    1
 11048 ;; Hardware stack levels required when called:   16
 11049 ;; This function calls:
 11050 ;;		_Lcd_Print_String
 11051 ;;		_clear_row1
 11052 ;;		_clear_row2
 11053 ;;		_strcpy
 11054 ;;		_un_block_code
 11055 ;; This function is called by:
 11056 ;;		_Function_H_6
 11057 ;; This function uses a non-reentrant model
 11058 ;;
 11059                           
 11060                           	psect	text18
 11061  00786C                     __ptext18:
 11062                           	opt stack 0
 11063  00786C                     _Function_H_6_2:
 11064                           	opt stack 11
 11065                           
 11066                           ;menu.c: 1541: which_screen = ARPEGGIATOR_AUTO_LATCH_ON_OFF_MENU;
 11067                           
 11068                           ;incstack = 0
 11069  00786C  0E21               	movlw	33
 11070  00786E  6E4F               	movwf	_which_screen,c
 11071                           
 11072                           ;menu.c: 1542: lcd_print_once = 0;
 11073  007870  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11074                           
 11075                           ;menu.c: 1543: encoder_click = 0;
 11076  007872  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11077                           
 11078                           ;menu.c: 1545: arpeggiatorAutoLatchOnOffMenu.selector = AUTO_LATCH;
 11079  007874  0E00               	movlw	0
 11080  007876  BE03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 11081  007878  0E01               	movlw	1
 11082  00787A  0101               	movlb	1	; () banked
 11083  00787C  6F22               	movwf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),b
 11084                           
 11085                           ;menu.c: 1547: while(encoder_click == 0) {
 11086  00787E  D042               	goto	l3837
 11087  007880                     
 11088                           ;menu.c: 1551: un_block_code();
 11089                           
 11090                           ; BSR set to: 1
 11091  007880  EC10  F04C         	call	_un_block_code	;wreg free
 11092                           
 11093                           ;menu.c: 1553: if (lcd_print_once == 0) {
 11094  007884  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11095  007886  D03D               	goto	l3841
 11096                           
 11097                           ;menu.c: 1554: clear_row1();Lcd_Print_String("AutoLatch ON/OFF");
 11098  007888  EC7B  F04B         	call	_clear_row1	;wreg free
 11099  00788C  0EDB               	movlw	low STR_52
 11100  00788E  0100               	movlb	0	; () banked
 11101  007890  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11102  007892  0EFD               	movlw	high STR_52
 11103  007894  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11104  007896  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 11105                           
 11106                           ;menu.c: 1555: if(arpeggiatorAutoLatchOnOffMenu.selector == 0) {
 11107  00789A  0101               	movlb	1	; () banked
 11108  00789C  5122               	movf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),w,b
 11109  00789E  A4D8               	btfss	status,2,c
 11110  0078A0  D016               	goto	l3840
 11111                           
 11112                           ; BSR set to: 1
 11113                           ;menu.c: 1556: clear_row2();Lcd_Print_String("Auto Latch OFF");
 11114  0078A2  EC67  F04B         	call	_clear_row2	;wreg free
 11115  0078A6  0E89               	movlw	low STR_53
 11116  0078A8  0100               	movlb	0	; () banked
 11117  0078AA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11118  0078AC  0EFE               	movlw	high STR_53
 11119  0078AE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11120  0078B0  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 11121                           
 11122                           ;menu.c: 1557: DISPLAY_MODE = 1;
 11123  0078B4  0E01               	movlw	1
 11124  0078B6  0100               	movlb	0	; () banked
 11125  0078B8  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 11126                           
 11127                           ; BSR set to: 0
 11128                           ;menu.c: 1558: strcpy(string_to_display, " oFF");
 11129  0078BA  0EF8               	movlw	low _string_to_display
 11130  0078BC  6F60               	movwf	strcpy@to& (0+255),b
 11131  0078BE  0E01               	movlw	high _string_to_display
 11132  0078C0  6F61               	movwf	(strcpy@to+1)& (0+255),b
 11133  0078C2  0EDC               	movlw	low STR_5
 11134  0078C4  6F62               	movwf	strcpy@from& (0+255),b
 11135  0078C6  0EFF               	movlw	high STR_5
 11136  0078C8  6F63               	movwf	(strcpy@from+1)& (0+255),b
 11137  0078CA  ECF3  F04A         	call	_strcpy	;wreg free
 11138  0078CE                     l3840:
 11139                           
 11140                           ;menu.c: 1559: }
 11141                           ;menu.c: 1560: if(arpeggiatorAutoLatchOnOffMenu.selector == 1) {
 11142  0078CE  0101               	movlb	1	; () banked
 11143  0078D0  0522               	decf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),w,b
 11144  0078D2  A4D8               	btfss	status,2,c
 11145  0078D4  D016               	goto	l3841
 11146                           
 11147                           ; BSR set to: 1
 11148                           ;menu.c: 1561: clear_row2();Lcd_Print_String("Auto Latch ON");
 11149  0078D6  EC67  F04B         	call	_clear_row2	;wreg free
 11150  0078DA  0E0A               	movlw	low STR_55
 11151  0078DC  0100               	movlb	0	; () banked
 11152  0078DE  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11153  0078E0  0EFF               	movlw	high STR_55
 11154  0078E2  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11155  0078E4  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 11156                           
 11157                           ;menu.c: 1562: DISPLAY_MODE = 1;
 11158  0078E8  0E01               	movlw	1
 11159  0078EA  0100               	movlb	0	; () banked
 11160  0078EC  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 11161                           
 11162                           ; BSR set to: 0
 11163                           ;menu.c: 1563: strcpy(string_to_display, "Auto");
 11164  0078EE  0EF8               	movlw	low _string_to_display
 11165  0078F0  6F60               	movwf	strcpy@to& (0+255),b
 11166  0078F2  0E01               	movlw	high _string_to_display
 11167  0078F4  6F61               	movwf	(strcpy@to+1)& (0+255),b
 11168  0078F6  0EF0               	movlw	low STR_4
 11169  0078F8  6F62               	movwf	strcpy@from& (0+255),b
 11170  0078FA  0EFF               	movlw	high STR_4
 11171  0078FC  6F63               	movwf	(strcpy@from+1)& (0+255),b
 11172  0078FE  ECF3  F04A         	call	_strcpy	;wreg free
 11173  007902                     l3841:
 11174                           
 11175                           ;menu.c: 1564: }
 11176                           ;menu.c: 1565: }
 11177                           ;menu.c: 1566: lcd_print_once = 1;
 11178  007902  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11179  007904                     l3837:
 11180  007904  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11181  007906  D7BC               	goto	l3838
 11182                           
 11183                           ;menu.c: 1567: }
 11184                           ;menu.c: 1569: AUTO_LATCH = arpeggiatorAutoLatchOnOffMenu.selector;
 11185  007908  0101               	movlb	1	; () banked
 11186  00790A  A122               	btfss	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),0,b
 11187  00790C  D002               	goto	u57590
 11188  00790E  8E03               	bsf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 11189  007910  0012               	return	
 11190  007912                     u57590:
 11191  007912  9E03               	bcf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 11192  007914  0012               	return		;funcret
 11193  007916                     __end_of_Function_H_6_2:
 11194                           	opt stack 0
 11195                           tblptru	equ	0xFF8
 11196                           tblptrh	equ	0xFF7
 11197                           tblptrl	equ	0xFF6
 11198                           tablat	equ	0xFF5
 11199                           intcon	equ	0xFF2
 11200                           intcon2	equ	0xFF1
 11201                           postinc0	equ	0xFEE
 11202                           wreg	equ	0xFE8
 11203                           postinc1	equ	0xFE6
 11204                           postdec2	equ	0xFDD
 11205                           fsr2l	equ	0xFD9
 11206                           status	equ	0xFD8
 11207                           
 11208 ;; *************** function _Function_H_6_1 *****************
 11209 ;; Defined at:
 11210 ;;		line 1443 in file "menu.c"
 11211 ;; Parameters:    Size  Location     Type
 11212 ;;		None
 11213 ;; Auto vars:     Size  Location     Type
 11214 ;;  temp            1  103[BANK0 ] unsigned char 
 11215 ;; Return value:  Size  Location     Type
 11216 ;;                  1    wreg      void 
 11217 ;; Registers used:
 11218 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11219 ;; Tracked objects:
 11220 ;;		On entry : 0/0
 11221 ;;		On exit  : 0/0
 11222 ;;		Unchanged: 0/0
 11223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11225 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11227 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11228 ;;Total ram usage:        1 bytes
 11229 ;; Hardware stack levels used:    1
 11230 ;; Hardware stack levels required when called:   16
 11231 ;; This function calls:
 11232 ;;		_Lcd_Print_String
 11233 ;;		_clear_row1
 11234 ;;		_clear_row2
 11235 ;;		_doTheLatch
 11236 ;;		_doTheUnLatch
 11237 ;;		_un_block_code
 11238 ;; This function is called by:
 11239 ;;		_Function_H_6
 11240 ;; This function uses a non-reentrant model
 11241 ;;
 11242                           
 11243                           	psect	text19
 11244  007D80                     __ptext19:
 11245                           	opt stack 0
 11246  007D80                     _Function_H_6_1:
 11247                           	opt stack 11
 11248                           
 11249                           ;menu.c: 1445: which_screen = ARPEGGIATOR_LATCH_ON_OFF_MENU;
 11250                           
 11251                           ;incstack = 0
 11252  007D80  0E20               	movlw	32
 11253  007D82  6E4F               	movwf	_which_screen,c
 11254                           
 11255                           ;menu.c: 1446: lcd_print_once = 0;
 11256  007D84  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11257                           
 11258                           ;menu.c: 1447: encoder_click = 0;
 11259  007D86  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11260                           
 11261                           ;menu.c: 1449: arpeggiatorLatchOnOffMenu.selector = LATCH;
 11262  007D88  0E00               	movlw	0
 11263  007D8A  B204               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 11264  007D8C  0E01               	movlw	1
 11265  007D8E  0101               	movlb	1	; () banked
 11266  007D90  6F25               	movwf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),b
 11267                           
 11268                           ;menu.c: 1451: while(encoder_click == 0) {
 11269  007D92  D028               	goto	l3826
 11270  007D94                     
 11271                           ;menu.c: 1455: un_block_code();
 11272                           
 11273                           ; BSR set to: 1
 11274  007D94  EC10  F04C         	call	_un_block_code	;wreg free
 11275                           
 11276                           ;menu.c: 1457: if (lcd_print_once == 0) {
 11277  007D98  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11278  007D9A  D023               	goto	l3830
 11279                           
 11280                           ;menu.c: 1458: clear_row1();Lcd_Print_String("Latch ON/OFF");
 11281  007D9C  EC7B  F04B         	call	_clear_row1	;wreg free
 11282  007DA0  0EDF               	movlw	low (STR_52+4)
 11283  007DA2  0100               	movlb	0	; () banked
 11284  007DA4  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11285  007DA6  0EFD               	movlw	high (STR_52+4)
 11286  007DA8  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11287  007DAA  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 11288                           
 11289                           ;menu.c: 1459: if(arpeggiatorLatchOnOffMenu.selector == 0) {
 11290  007DAE  0101               	movlb	1	; () banked
 11291  007DB0  5125               	movf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),w,b
 11292  007DB2  A4D8               	btfss	status,2,c
 11293  007DB4  D009               	goto	l3829
 11294                           
 11295                           ; BSR set to: 1
 11296                           ;menu.c: 1460: clear_row2();
 11297  007DB6  EC67  F04B         	call	_clear_row2	;wreg free
 11298                           
 11299                           ;menu.c: 1461: Lcd_Print_String("Latch OFF");
 11300  007DBA  0E8E               	movlw	low (STR_53+5)
 11301  007DBC  0100               	movlb	0	; () banked
 11302  007DBE  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11303  007DC0  0EFE               	movlw	high (STR_53+5)
 11304  007DC2  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11305  007DC4  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 11306  007DC8                     l3829:
 11307                           
 11308                           ;menu.c: 1462: }
 11309                           ;menu.c: 1463: if(arpeggiatorLatchOnOffMenu.selector == 1) {
 11310  007DC8  0101               	movlb	1	; () banked
 11311  007DCA  0525               	decf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),w,b
 11312  007DCC  A4D8               	btfss	status,2,c
 11313  007DCE  D009               	goto	l3830
 11314                           
 11315                           ; BSR set to: 1
 11316                           ;menu.c: 1464: clear_row2();
 11317  007DD0  EC67  F04B         	call	_clear_row2	;wreg free
 11318                           
 11319                           ;menu.c: 1465: Lcd_Print_String("Latch ON");
 11320  007DD4  0E0F               	movlw	low (STR_55+5)
 11321  007DD6  0100               	movlb	0	; () banked
 11322  007DD8  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11323  007DDA  0EFF               	movlw	high (STR_55+5)
 11324  007DDC  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11325  007DDE  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 11326  007DE2                     l3830:
 11327                           
 11328                           ;menu.c: 1466: }
 11329                           ;menu.c: 1467: }
 11330                           ;menu.c: 1468: lcd_print_once = 1;
 11331  007DE2  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11332  007DE4                     l3826:
 11333  007DE4  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11334  007DE6  D7D6               	goto	l3827
 11335                           
 11336                           ;menu.c: 1469: }
 11337                           ;menu.c: 1471: LATCH = arpeggiatorLatchOnOffMenu.selector;
 11338  007DE8  0101               	movlb	1	; () banked
 11339  007DEA  A125               	btfss	(_arpeggiatorLatchOnOffMenu+2)& (0+255),0,b
 11340  007DEC  D002               	goto	u57490
 11341  007DEE  8204               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 11342  007DF0  D001               	goto	u57505
 11343  007DF2                     u57490:
 11344  007DF2  9204               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
 11345  007DF4                     u57505:
 11346                           
 11347                           ;menu.c: 1473: if(LATCH == 1){
 11348  007DF4  B204               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 11349                           
 11350                           ;menu.c: 1480: doTheLatch();
 11351  007DF6  ECD7  F04B         	call	_doTheLatch	;wreg free
 11352                           
 11353                           ;menu.c: 1481: }
 11354                           ;menu.c: 1483: if(LATCH == 0){
 11355  007DFA  B204               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 11356  007DFC  0012               	return	
 11357                           
 11358                           ;menu.c: 1486: unsigned char temp = UN_LATCH_MODE;
 11359  007DFE  0E00               	movlw	0
 11360  007E00  B004               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11361  007E02  0E01               	movlw	1
 11362  007E04  0100               	movlb	0	; () banked
 11363  007E06  6FC7               	movwf	Function_H_6_1@temp& (0+255),b
 11364                           
 11365                           ; BSR set to: 0
 11366                           ;menu.c: 1488: UN_LATCH_MODE = 0;
 11367  007E08  9004               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11368                           
 11369                           ; BSR set to: 0
 11370                           ;menu.c: 1489: doTheUnLatch();
 11371  007E0A  EC53  F028         	call	_doTheUnLatch	;wreg free
 11372                           
 11373                           ;menu.c: 1492: UN_LATCH_MODE = temp;
 11374  007E0E  0100               	movlb	0	; () banked
 11375  007E10  A1C7               	btfss	Function_H_6_1@temp& (0+255),0,b
 11376  007E12  D002               	goto	u57530
 11377  007E14  8004               	bsf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11378  007E16  0012               	return	
 11379  007E18                     u57530:
 11380  007E18  9004               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11381  007E1A  0012               	return	
 11382  007E1C                     __end_of_Function_H_6_1:
 11383                           	opt stack 0
 11384                           tblptru	equ	0xFF8
 11385                           tblptrh	equ	0xFF7
 11386                           tblptrl	equ	0xFF6
 11387                           tablat	equ	0xFF5
 11388                           intcon	equ	0xFF2
 11389                           intcon2	equ	0xFF1
 11390                           postinc0	equ	0xFEE
 11391                           wreg	equ	0xFE8
 11392                           postinc1	equ	0xFE6
 11393                           postdec2	equ	0xFDD
 11394                           fsr2l	equ	0xFD9
 11395                           status	equ	0xFD8
 11396                           
 11397 ;; *************** function _Function_H_5 *****************
 11398 ;; Defined at:
 11399 ;;		line 1406 in file "menu.c"
 11400 ;; Parameters:    Size  Location     Type
 11401 ;;		None
 11402 ;; Auto vars:     Size  Location     Type
 11403 ;;  i               1  104[BANK0 ] unsigned char 
 11404 ;; Return value:  Size  Location     Type
 11405 ;;                  1    wreg      void 
 11406 ;; Registers used:
 11407 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11408 ;; Tracked objects:
 11409 ;;		On entry : 0/0
 11410 ;;		On exit  : 0/0
 11411 ;;		Unchanged: 0/0
 11412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11414 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11415 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11416 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11417 ;;Total ram usage:        2 bytes
 11418 ;; Hardware stack levels used:    1
 11419 ;; Hardware stack levels required when called:   16
 11420 ;; This function calls:
 11421 ;;		_Lcd_Print_String
 11422 ;;		___lbmod
 11423 ;;		___wmul
 11424 ;;		_clear_row1
 11425 ;;		_clear_row2
 11426 ;;		_un_block_code
 11427 ;; This function is called by:
 11428 ;;		_Function_H
 11429 ;; This function uses a non-reentrant model
 11430 ;;
 11431                           
 11432                           	psect	text20
 11433  007916                     __ptext20:
 11434                           	opt stack 0
 11435  007916                     _Function_H_5:
 11436                           	opt stack 12
 11437                           
 11438                           ;menu.c: 1408: which_screen = ARPEGGIATOR_NOTE_LENGTH_MENU,
 11439                           ;menu.c: 1409: lcd_print_once = 0;
 11440                           
 11441                           ;incstack = 0
 11442  007916  0E1E               	movlw	30
 11443  007918  6E4F               	movwf	_which_screen,c
 11444  00791A  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11445                           
 11446                           ;menu.c: 1410: encoder_click = 0;
 11447  00791C  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11448                           
 11449                           ;menu.c: 1413: for(unsigned char i = 0; i < 12; i++) {
 11450  00791E  0E00               	movlw	0
 11451  007920  0100               	movlb	0	; () banked
 11452  007922  6FC8               	movwf	Function_H_5@i& (0+255),b
 11453  007924                     l32410:
 11454                           
 11455                           ; BSR set to: 0
 11456  007924  0E0B               	movlw	11
 11457  007926  65C8               	cpfsgt	Function_H_5@i& (0+255),b
 11458  007928  D001               	goto	l3816
 11459  00792A  D03C               	goto	l3819
 11460  00792C                     l3816:
 11461                           
 11462                           ; BSR set to: 0
 11463                           ;menu.c: 1414: if(NOTE_LENGTH_PULSES_ARRAY[i] == NOTE_LENGTH_PULSES) {
 11464                           
 11465                           ; BSR set to: 0
 11466  00792C  51C8               	movf	Function_H_5@i& (0+255),w,b
 11467  00792E  0D01               	mullw	1
 11468  007930  0EB8               	movlw	low _NOTE_LENGTH_PULSES_ARRAY
 11469  007932  24F3               	addwf	prodl,w,c
 11470  007934  6ED9               	movwf	fsr2l,c
 11471  007936  0E02               	movlw	high _NOTE_LENGTH_PULSES_ARRAY
 11472  007938  20F4               	addwfc	prodh,w,c
 11473  00793A  6EDA               	movwf	fsr2h,c
 11474  00793C  504D               	movf	_NOTE_LENGTH_PULSES,w,c
 11475  00793E  18DE               	xorwf	postinc2,w,c
 11476  007940  B4D8               	btfsc	status,2,c
 11477                           
 11478                           ; BSR set to: 0
 11479                           ;menu.c: 1416: arpeggiatorNoteLengthMenu.selector = i;
 11480  007942  C0C8  F12B         	movff	Function_H_5@i,_arpeggiatorNoteLengthMenu+2
 11481                           
 11482                           ; BSR set to: 0
 11483                           
 11484                           ; BSR set to: 0
 11485  007946  2BC8               	incf	Function_H_5@i& (0+255),f,b
 11486  007948  D7ED               	goto	l32410
 11487  00794A                     
 11488                           ;menu.c: 1426: un_block_code();
 11489                           
 11490                           ; BSR set to: 0
 11491  00794A  EC10  F04C         	call	_un_block_code	;wreg free
 11492                           
 11493                           ;menu.c: 1428: if (lcd_print_once == 0) {
 11494  00794E  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11495  007950  D028               	goto	l3821
 11496                           
 11497                           ;menu.c: 1429: clear_row1();
 11498  007952  EC7B  F04B         	call	_clear_row1	;wreg free
 11499                           
 11500                           ;menu.c: 1430: Lcd_Print_String("Note Length:");
 11501  007956  0E32               	movlw	low STR_48
 11502  007958  0100               	movlb	0	; () banked
 11503  00795A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11504  00795C  0EFF               	movlw	high STR_48
 11505  00795E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11506  007960  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 11507                           
 11508                           ;menu.c: 1431: clear_row2();
 11509  007964  EC67  F04B         	call	_clear_row2	;wreg free
 11510                           
 11511                           ;menu.c: 1432: Lcd_Print_String(LCD_STRINGS[(arpeggiatorNoteLengthMenu.selector % arpegg
      +                          iatorNoteLengthMenu.number) + arpeggiatorNoteLengthMenu.address]);
 11512  007968  0101               	movlb	1	; () banked
 11513  00796A  5129               	movf	_arpeggiatorNoteLengthMenu& (0+255),w,b
 11514  00796C  6EE6               	movwf	postinc1,c
 11515  00796E  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 11516  007970  6EE6               	movwf	postinc1,c
 11517  007972  ECC6  F040         	call	___lbmod	;wreg free
 11518  007976  503F               	movf	btemp,w,c
 11519  007978  0101               	movlb	1	; () banked
 11520  00797A  252A               	addwf	(_arpeggiatorNoteLengthMenu+1)& (0+255),w,b
 11521  00797C  0100               	movlb	0	; () banked
 11522  00797E  6F60               	movwf	___wmul@multiplier& (0+255),b
 11523  007980  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 11524  007982  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 11525  007984  0E00               	movlw	0
 11526  007986  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11527  007988  0E11               	movlw	17
 11528  00798A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 11529  00798C  EC8F  F04B         	call	___wmul	;wreg free
 11530  007990  0E9E               	movlw	low _LCD_STRINGS
 11531  007992  0100               	movlb	0	; () banked
 11532  007994  2560               	addwf	?___wmul& (0+255),w,b
 11533  007996  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11534  007998  0EF3               	movlw	high _LCD_STRINGS
 11535  00799A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 11536  00799C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11537  00799E  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 11538  0079A2                     l3821:
 11539                           
 11540                           ;menu.c: 1433: }
 11541                           ;menu.c: 1434: lcd_print_once = 1;
 11542  0079A2  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11543  0079A4                     l3819:
 11544  0079A4  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11545  0079A6  D7D1               	goto	l3820
 11546                           
 11547                           ;menu.c: 1435: }
 11548                           ;menu.c: 1438: NOTE_LENGTH_PULSES = NOTE_LENGTH_PULSES_ARRAY[arpeggiatorNoteLengthMenu.s
      +                          elector];
 11549  0079A8  0101               	movlb	1	; () banked
 11550  0079AA  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 11551  0079AC  0D01               	mullw	1
 11552  0079AE  0EB8               	movlw	low _NOTE_LENGTH_PULSES_ARRAY
 11553  0079B0  24F3               	addwf	prodl,w,c
 11554  0079B2  6ED9               	movwf	fsr2l,c
 11555  0079B4  0E02               	movlw	high _NOTE_LENGTH_PULSES_ARRAY
 11556  0079B6  20F4               	addwfc	prodh,w,c
 11557  0079B8  6EDA               	movwf	fsr2h,c
 11558  0079BA  50DF               	movf	indf2,w,c
 11559  0079BC  6E4D               	movwf	_NOTE_LENGTH_PULSES,c
 11560                           
 11561                           ; BSR set to: 1
 11562  0079BE  0012               	return		;funcret
 11563  0079C0                     __end_of_Function_H_5:
 11564                           	opt stack 0
 11565                           tblptru	equ	0xFF8
 11566                           tblptrh	equ	0xFF7
 11567                           tblptrl	equ	0xFF6
 11568                           tablat	equ	0xFF5
 11569                           prodh	equ	0xFF4
 11570                           prodl	equ	0xFF3
 11571                           intcon	equ	0xFF2
 11572                           intcon2	equ	0xFF1
 11573                           postinc0	equ	0xFEE
 11574                           wreg	equ	0xFE8
 11575                           postinc1	equ	0xFE6
 11576                           indf2	equ	0xFDF
 11577                           postinc2	equ	0xFDE
 11578                           postdec2	equ	0xFDD
 11579                           fsr2h	equ	0xFDA
 11580                           fsr2l	equ	0xFD9
 11581                           status	equ	0xFD8
 11582                           
 11583 ;; *************** function _Function_H_4 *****************
 11584 ;; Defined at:
 11585 ;;		line 1367 in file "menu.c"
 11586 ;; Parameters:    Size  Location     Type
 11587 ;;		None
 11588 ;; Auto vars:     Size  Location     Type
 11589 ;;		None
 11590 ;; Return value:  Size  Location     Type
 11591 ;;                  1    wreg      void 
 11592 ;; Registers used:
 11593 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11594 ;; Tracked objects:
 11595 ;;		On entry : 0/0
 11596 ;;		On exit  : 0/0
 11597 ;;		Unchanged: 0/0
 11598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11603 ;;Total ram usage:        0 bytes
 11604 ;; Hardware stack levels used:    1
 11605 ;; Hardware stack levels required when called:   16
 11606 ;; This function calls:
 11607 ;;		_Lcd_Print_String
 11608 ;;		___lbmod
 11609 ;;		___wmul
 11610 ;;		_clear_row1
 11611 ;;		_clear_row2
 11612 ;;		_setupArpeggio
 11613 ;;		_un_block_code
 11614 ;; This function is called by:
 11615 ;;		_Function_H
 11616 ;; This function uses a non-reentrant model
 11617 ;;
 11618                           
 11619                           	psect	text21
 11620  00765E                     __ptext21:
 11621                           	opt stack 0
 11622  00765E                     _Function_H_4:
 11623                           	opt stack 12
 11624                           
 11625                           ;menu.c: 1369: which_screen = ARPEGGIATOR_ARPEGGIO_TYPE_MENU,
 11626                           ;menu.c: 1370: lcd_print_once = 0;
 11627                           
 11628                           ; BSR set to: 1
 11629                           ;incstack = 0
 11630  00765E  0E1D               	movlw	29
 11631  007660  6E4F               	movwf	_which_screen,c
 11632  007662  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11633                           
 11634                           ;menu.c: 1371: encoder_click = 0;
 11635  007664  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11636                           
 11637                           ;menu.c: 1373: arpeggiatorTypeMenu.selector = ARPEGGIO_TYPE;
 11638  007666  C035  F12E         	movff	_ARPEGGIO_TYPE,_arpeggiatorTypeMenu+2
 11639                           
 11640                           ;menu.c: 1375: while(encoder_click == 0) {
 11641  00766A  D02D               	goto	l3803
 11642  00766C                     
 11643                           ;menu.c: 1379: un_block_code();
 11644  00766C  EC10  F04C         	call	_un_block_code	;wreg free
 11645                           
 11646                           ;menu.c: 1381: if (lcd_print_once == 0) {
 11647  007670  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11648  007672  D028               	goto	l3805
 11649                           
 11650                           ;menu.c: 1382: clear_row1();
 11651  007674  EC7B  F04B         	call	_clear_row1	;wreg free
 11652                           
 11653                           ;menu.c: 1383: Lcd_Print_String("Select Arpeggio:");
 11654  007678  0EB9               	movlw	low STR_47
 11655  00767A  0100               	movlb	0	; () banked
 11656  00767C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11657  00767E  0EFD               	movlw	high STR_47
 11658  007680  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11659  007682  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 11660                           
 11661                           ;menu.c: 1384: clear_row2();
 11662  007686  EC67  F04B         	call	_clear_row2	;wreg free
 11663                           
 11664                           ;menu.c: 1385: Lcd_Print_String(LCD_STRINGS[(arpeggiatorTypeMenu.selector % arpeggiatorT
      +                          ypeMenu.number) + arpeggiatorTypeMenu.address]);
 11665  00768A  0101               	movlb	1	; () banked
 11666  00768C  512C               	movf	_arpeggiatorTypeMenu& (0+255),w,b
 11667  00768E  6EE6               	movwf	postinc1,c
 11668  007690  512E               	movf	(_arpeggiatorTypeMenu+2)& (0+255),w,b
 11669  007692  6EE6               	movwf	postinc1,c
 11670  007694  ECC6  F040         	call	___lbmod	;wreg free
 11671  007698  503F               	movf	btemp,w,c
 11672  00769A  0101               	movlb	1	; () banked
 11673  00769C  252D               	addwf	(_arpeggiatorTypeMenu+1)& (0+255),w,b
 11674  00769E  0100               	movlb	0	; () banked
 11675  0076A0  6F60               	movwf	___wmul@multiplier& (0+255),b
 11676  0076A2  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 11677  0076A4  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 11678  0076A6  0E00               	movlw	0
 11679  0076A8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11680  0076AA  0E11               	movlw	17
 11681  0076AC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 11682  0076AE  EC8F  F04B         	call	___wmul	;wreg free
 11683  0076B2  0E9E               	movlw	low _LCD_STRINGS
 11684  0076B4  0100               	movlb	0	; () banked
 11685  0076B6  2560               	addwf	?___wmul& (0+255),w,b
 11686  0076B8  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11687  0076BA  0EF3               	movlw	high _LCD_STRINGS
 11688  0076BC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 11689  0076BE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11690  0076C0  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 11691  0076C4                     l3805:
 11692                           
 11693                           ;menu.c: 1386: }
 11694                           ;menu.c: 1387: lcd_print_once = 1;
 11695  0076C4  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11696  0076C6                     l3803:
 11697  0076C6  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11698  0076C8  D7D1               	goto	l3804
 11699                           
 11700                           ;menu.c: 1388: }
 11701                           ;menu.c: 1390: ARPEGGIO_TYPE = arpeggiatorTypeMenu.selector;
 11702  0076CA  C12E  F035         	movff	_arpeggiatorTypeMenu+2,_ARPEGGIO_TYPE
 11703                           
 11704                           ;menu.c: 1393: if((ARPEGGIO_TYPE == AS_PRESSED) || (ARPEGGIO_TYPE == UP) || (ARPEGGIO_TY
      +                          PE == UP_DOWN) || (ARPEGGIO_TYPE == RANDOM) || (ARPEGGIO_TYPE == RANDOM_NON_REPEATING)) 
      +                          {
 11705  0076CE  0E06               	movlw	6
 11706  0076D0  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 11707  0076D2  B4D8               	btfsc	status,2,c
 11708  0076D4  D00F               	goto	u58760
 11709  0076D6  5035               	movf	_ARPEGGIO_TYPE,w,c
 11710  0076D8  B4D8               	btfsc	status,2,c
 11711  0076DA  D00C               	goto	u58760
 11712  0076DC  0E02               	movlw	2
 11713  0076DE  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 11714  0076E0  B4D8               	btfsc	status,2,c
 11715  0076E2  D008               	goto	u58760
 11716  0076E4  0E05               	movlw	5
 11717  0076E6  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 11718  0076E8  B4D8               	btfsc	status,2,c
 11719  0076EA  D004               	goto	u58760
 11720  0076EC  0E04               	movlw	4
 11721  0076EE  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 11722  0076F0  A4D8               	btfss	status,2,c
 11723  0076F2  D002               	goto	l3807
 11724  0076F4                     u58760:
 11725                           
 11726                           ;menu.c: 1394: startingDirection = UP;
 11727  0076F4  0E00               	movlw	0
 11728  0076F6  6E34               	movwf	_startingDirection,c
 11729  0076F8                     l3807:
 11730                           
 11731                           ;menu.c: 1395: }
 11732                           ;menu.c: 1397: if((ARPEGGIO_TYPE == DOWN) || (ARPEGGIO_TYPE == DOWN_UP)) {
 11733  0076F8  0435               	decf	_ARPEGGIO_TYPE,w,c
 11734  0076FA  B4D8               	btfsc	status,2,c
 11735  0076FC  D004               	goto	u58780
 11736  0076FE  0E03               	movlw	3
 11737  007700  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 11738  007702  A4D8               	btfss	status,2,c
 11739  007704  D002               	goto	l3810
 11740  007706                     u58780:
 11741                           
 11742                           ;menu.c: 1398: startingDirection = DOWN;
 11743  007706  0E01               	movlw	1
 11744  007708  6E34               	movwf	_startingDirection,c
 11745  00770A                     l3810:
 11746                           
 11747                           ;menu.c: 1399: }
 11748                           ;menu.c: 1401: setupArpeggio();
 11749  00770A  ECBE  F044         	call	_setupArpeggio	;wreg free
 11750  00770E  0012               	return		;funcret
 11751  007710                     __end_of_Function_H_4:
 11752                           	opt stack 0
 11753                           tblptru	equ	0xFF8
 11754                           tblptrh	equ	0xFF7
 11755                           tblptrl	equ	0xFF6
 11756                           tablat	equ	0xFF5
 11757                           prodh	equ	0xFF4
 11758                           prodl	equ	0xFF3
 11759                           intcon	equ	0xFF2
 11760                           intcon2	equ	0xFF1
 11761                           postinc0	equ	0xFEE
 11762                           wreg	equ	0xFE8
 11763                           postinc1	equ	0xFE6
 11764                           indf2	equ	0xFDF
 11765                           postinc2	equ	0xFDE
 11766                           postdec2	equ	0xFDD
 11767                           fsr2h	equ	0xFDA
 11768                           fsr2l	equ	0xFD9
 11769                           status	equ	0xFD8
 11770                           
 11771 ;; *************** function _Function_H_3 *****************
 11772 ;; Defined at:
 11773 ;;		line 1336 in file "menu.c"
 11774 ;; Parameters:    Size  Location     Type
 11775 ;;		None
 11776 ;; Auto vars:     Size  Location     Type
 11777 ;;		None
 11778 ;; Return value:  Size  Location     Type
 11779 ;;                  1    wreg      void 
 11780 ;; Registers used:
 11781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11782 ;; Tracked objects:
 11783 ;;		On entry : 0/0
 11784 ;;		On exit  : 0/0
 11785 ;;		Unchanged: 0/0
 11786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11791 ;;Total ram usage:        0 bytes
 11792 ;; Hardware stack levels used:    1
 11793 ;; Hardware stack levels required when called:   16
 11794 ;; This function calls:
 11795 ;;		_Lcd_Print_String
 11796 ;;		_Lcd_Set_Cursor
 11797 ;;		_clear_row2
 11798 ;;		_int2string
 11799 ;;		_un_block_code
 11800 ;; This function is called by:
 11801 ;;		_Function_H
 11802 ;; This function uses a non-reentrant model
 11803 ;;
 11804                           
 11805                           	psect	text22
 11806  008FFE                     __ptext22:
 11807                           	opt stack 0
 11808  008FFE                     _Function_H_3:
 11809                           	opt stack 12
 11810                           
 11811                           ;menu.c: 1338: which_screen = ARPEGGIATOR_OCTAVES_MENU;
 11812                           
 11813                           ;incstack = 0
 11814  008FFE  0E1C               	movlw	28
 11815  009000  6E4F               	movwf	_which_screen,c
 11816                           
 11817                           ;menu.c: 1339: lcd_print_once = 0;
 11818  009002  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11819                           
 11820                           ;menu.c: 1340: encoder_click = 0;
 11821  009004  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11822                           
 11823                           ;menu.c: 1342: arpeggiatorOctavesMenu.selector = OCTAVES;
 11824  009006  C04E  F131         	movff	_OCTAVES,_arpeggiatorOctavesMenu+2
 11825                           
 11826                           ;menu.c: 1344: while(encoder_click == 0) {
 11827  00900A  D021               	goto	l3796
 11828  00900C                     
 11829                           ;menu.c: 1348: un_block_code();
 11830  00900C  EC10  F04C         	call	_un_block_code	;wreg free
 11831                           
 11832                           ;menu.c: 1350: if (lcd_print_once == 0) {
 11833  009010  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11834  009012  D009               	goto	l3798
 11835                           
 11836                           ;menu.c: 1351: clear_row2();
 11837  009014  EC67  F04B         	call	_clear_row2	;wreg free
 11838                           
 11839                           ;menu.c: 1352: Lcd_Print_String("Octave Range:");
 11840  009018  0EEE               	movlw	low STR_46
 11841  00901A  0100               	movlb	0	; () banked
 11842  00901C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11843  00901E  0EFE               	movlw	high STR_46
 11844  009020  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11845  009022  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 11846  009026                     l3798:
 11847                           
 11848                           ;menu.c: 1353: }
 11849                           ;menu.c: 1354: lcd_print_once = 1;
 11850  009026  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11851                           
 11852                           ;menu.c: 1357: int2string(arpeggiatorOctavesMenu.selector);
 11853  009028  C131  F060         	movff	_arpeggiatorOctavesMenu+2,int2string@number
 11854  00902C  0100               	movlb	0	; () banked
 11855  00902E  6B61               	clrf	(int2string@number+1)& (0+255),b
 11856  009030  EC6D  F03A         	call	_int2string	;wreg free
 11857                           
 11858                           ;menu.c: 1358: Lcd_Set_Cursor(2,13);
 11859  009034  0E0D               	movlw	13
 11860  009036  0100               	movlb	0	; () banked
 11861  009038  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 11862  00903A  0E02               	movlw	2
 11863  00903C  EC42  F047         	call	_Lcd_Set_Cursor
 11864                           
 11865                           ;menu.c: 1359: Lcd_Print_String(string2display);
 11866  009040  0E92               	movlw	low _string2display
 11867  009042  0100               	movlb	0	; () banked
 11868  009044  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11869  009046  0E01               	movlw	high _string2display
 11870  009048  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11871  00904A  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 11872  00904E                     l3796:
 11873  00904E  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11874  009050  D7DD               	goto	l3797
 11875                           
 11876                           ;menu.c: 1360: }
 11877                           ;menu.c: 1362: OCTAVES = arpeggiatorOctavesMenu.selector;
 11878  009052  C131  F04E         	movff	_arpeggiatorOctavesMenu+2,_OCTAVES
 11879  009056  0012               	return		;funcret
 11880  009058                     __end_of_Function_H_3:
 11881                           	opt stack 0
 11882                           tblptru	equ	0xFF8
 11883                           tblptrh	equ	0xFF7
 11884                           tblptrl	equ	0xFF6
 11885                           tablat	equ	0xFF5
 11886                           prodh	equ	0xFF4
 11887                           prodl	equ	0xFF3
 11888                           intcon	equ	0xFF2
 11889                           intcon2	equ	0xFF1
 11890                           postinc0	equ	0xFEE
 11891                           wreg	equ	0xFE8
 11892                           postinc1	equ	0xFE6
 11893                           indf2	equ	0xFDF
 11894                           postinc2	equ	0xFDE
 11895                           postdec2	equ	0xFDD
 11896                           fsr2h	equ	0xFDA
 11897                           fsr2l	equ	0xFD9
 11898                           status	equ	0xFD8
 11899                           
 11900 ;; *************** function _Function_H_2 *****************
 11901 ;; Defined at:
 11902 ;;		line 1305 in file "menu.c"
 11903 ;; Parameters:    Size  Location     Type
 11904 ;;		None
 11905 ;; Auto vars:     Size  Location     Type
 11906 ;;		None
 11907 ;; Return value:  Size  Location     Type
 11908 ;;                  1    wreg      void 
 11909 ;; Registers used:
 11910 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11911 ;; Tracked objects:
 11912 ;;		On entry : 0/0
 11913 ;;		On exit  : 0/0
 11914 ;;		Unchanged: 0/0
 11915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11920 ;;Total ram usage:        0 bytes
 11921 ;; Hardware stack levels used:    1
 11922 ;; Hardware stack levels required when called:   16
 11923 ;; This function calls:
 11924 ;;		_Lcd_Print_String
 11925 ;;		_Lcd_Set_Cursor
 11926 ;;		_calculate_pulse_length
 11927 ;;		_clear_row2
 11928 ;;		_int2string
 11929 ;;		_un_block_code
 11930 ;; This function is called by:
 11931 ;;		_Function_H
 11932 ;; This function uses a non-reentrant model
 11933 ;;
 11934                           
 11935                           	psect	text23
 11936  008CF2                     __ptext23:
 11937                           	opt stack 0
 11938  008CF2                     _Function_H_2:
 11939                           	opt stack 12
 11940                           
 11941                           ;menu.c: 1307: which_screen = ARPEGGIATOR_TEMPO_MENU;
 11942                           
 11943                           ;incstack = 0
 11944  008CF2  0E1B               	movlw	27
 11945  008CF4  6E4F               	movwf	_which_screen,c
 11946                           
 11947                           ;menu.c: 1308: lcd_print_once = 0;
 11948  008CF6  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11949                           
 11950                           ;menu.c: 1309: encoder_click = 0;
 11951  008CF8  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11952                           
 11953                           ;menu.c: 1311: arpeggiatorTempoMenu.selector = BPM;
 11954  008CFA  C0FF  F134         	movff	_BPM,_arpeggiatorTempoMenu+2
 11955                           
 11956                           ;menu.c: 1313: while(encoder_click == 0) {
 11957  008CFE  D021               	goto	l3789
 11958  008D00                     
 11959                           ;menu.c: 1317: un_block_code();
 11960  008D00  EC10  F04C         	call	_un_block_code	;wreg free
 11961                           
 11962                           ;menu.c: 1319: if (lcd_print_once == 0) {
 11963  008D04  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11964  008D06  D009               	goto	l3791
 11965                           
 11966                           ;menu.c: 1320: clear_row2();
 11967  008D08  EC67  F04B         	call	_clear_row2	;wreg free
 11968                           
 11969                           ;menu.c: 1321: Lcd_Print_String("Tempo (BPM): ");
 11970  008D0C  0EB6               	movlw	low STR_45
 11971  008D0E  0100               	movlb	0	; () banked
 11972  008D10  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11973  008D12  0EFE               	movlw	high STR_45
 11974  008D14  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11975  008D16  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 11976  008D1A                     l3791:
 11977                           
 11978                           ;menu.c: 1322: }
 11979                           ;menu.c: 1323: lcd_print_once = 1;
 11980  008D1A  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11981                           
 11982                           ;menu.c: 1326: int2string(arpeggiatorTempoMenu.selector);
 11983  008D1C  C134  F060         	movff	_arpeggiatorTempoMenu+2,int2string@number
 11984  008D20  0100               	movlb	0	; () banked
 11985  008D22  6B61               	clrf	(int2string@number+1)& (0+255),b
 11986  008D24  EC6D  F03A         	call	_int2string	;wreg free
 11987                           
 11988                           ;menu.c: 1327: Lcd_Set_Cursor(2,13);
 11989  008D28  0E0D               	movlw	13
 11990  008D2A  0100               	movlb	0	; () banked
 11991  008D2C  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 11992  008D2E  0E02               	movlw	2
 11993  008D30  EC42  F047         	call	_Lcd_Set_Cursor
 11994                           
 11995                           ;menu.c: 1328: Lcd_Print_String(string2display);
 11996  008D34  0E92               	movlw	low _string2display
 11997  008D36  0100               	movlb	0	; () banked
 11998  008D38  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11999  008D3A  0E01               	movlw	high _string2display
 12000  008D3C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12001  008D3E  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 12002  008D42                     l3789:
 12003  008D42  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12004  008D44  D7DD               	goto	l3790
 12005                           
 12006                           ;menu.c: 1329: }
 12007                           ;menu.c: 1331: BPM = arpeggiatorTempoMenu.selector;
 12008  008D46  C134  F0FF         	movff	_arpeggiatorTempoMenu+2,_BPM
 12009                           
 12010                           ;menu.c: 1332: TIMER_PRELOAD = calculate_pulse_length();
 12011  008D4A  ECA4  F02E         	call	_calculate_pulse_length	;wreg free
 12012  008D4E  C0C2  F17B         	movff	?_calculate_pulse_length,_TIMER_PRELOAD
 12013  008D52  C0C3  F17C         	movff	?_calculate_pulse_length+1,_TIMER_PRELOAD+1
 12014  008D56  0012               	return		;funcret
 12015  008D58                     __end_of_Function_H_2:
 12016                           	opt stack 0
 12017                           tblptru	equ	0xFF8
 12018                           tblptrh	equ	0xFF7
 12019                           tblptrl	equ	0xFF6
 12020                           tablat	equ	0xFF5
 12021                           prodh	equ	0xFF4
 12022                           prodl	equ	0xFF3
 12023                           intcon	equ	0xFF2
 12024                           intcon2	equ	0xFF1
 12025                           postinc0	equ	0xFEE
 12026                           wreg	equ	0xFE8
 12027                           postinc1	equ	0xFE6
 12028                           indf2	equ	0xFDF
 12029                           postinc2	equ	0xFDE
 12030                           postdec2	equ	0xFDD
 12031                           fsr2h	equ	0xFDA
 12032                           fsr2l	equ	0xFD9
 12033                           status	equ	0xFD8
 12034                           
 12035 ;; *************** function _Function_H_1 *****************
 12036 ;; Defined at:
 12037 ;;		line 1248 in file "menu.c"
 12038 ;; Parameters:    Size  Location     Type
 12039 ;;		None
 12040 ;; Auto vars:     Size  Location     Type
 12041 ;;  temp            1  103[BANK0 ] unsigned char 
 12042 ;; Return value:  Size  Location     Type
 12043 ;;                  1    wreg      void 
 12044 ;; Registers used:
 12045 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12046 ;; Tracked objects:
 12047 ;;		On entry : 0/0
 12048 ;;		On exit  : 0/0
 12049 ;;		Unchanged: 0/0
 12050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12052 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12054 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12055 ;;Total ram usage:        1 bytes
 12056 ;; Hardware stack levels used:    1
 12057 ;; Hardware stack levels required when called:   16
 12058 ;; This function calls:
 12059 ;;		_Lcd_Print_String
 12060 ;;		_clear_row2
 12061 ;;		_doTheUnLatch
 12062 ;;		_strcpy
 12063 ;;		_un_block_code
 12064 ;; This function is called by:
 12065 ;;		_Function_H
 12066 ;; This function uses a non-reentrant model
 12067 ;;
 12068                           
 12069                           	psect	text24
 12070  006F20                     __ptext24:
 12071                           	opt stack 0
 12072  006F20                     _Function_H_1:
 12073                           	opt stack 12
 12074                           
 12075                           ;menu.c: 1250: which_screen = ARPEGGIATOR_ON_OFF_MENU;
 12076                           
 12077                           ;incstack = 0
 12078  006F20  0E1A               	movlw	26
 12079  006F22  6E4F               	movwf	_which_screen,c
 12080                           
 12081                           ;menu.c: 1251: lcd_print_once = 0;
 12082  006F24  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12083                           
 12084                           ;menu.c: 1252: encoder_click = 0;
 12085  006F26  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12086                           
 12087                           ;menu.c: 1254: arpeggiatorOnOffMenu.selector = ARPEGGIO_ON;
 12088  006F28  0E00               	movlw	0
 12089  006F2A  B804               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 12090  006F2C  0E01               	movlw	1
 12091  006F2E  0101               	movlb	1	; () banked
 12092  006F30  6F37               	movwf	(_arpeggiatorOnOffMenu+2)& (0+255),b
 12093                           
 12094                           ;menu.c: 1256: while(encoder_click == 0) {
 12095  006F32  D039               	goto	l3779
 12096  006F34                     
 12097                           ;menu.c: 1260: un_block_code();
 12098                           
 12099                           ; BSR set to: 1
 12100  006F34  EC10  F04C         	call	_un_block_code	;wreg free
 12101                           
 12102                           ;menu.c: 1262: if (lcd_print_once == 0) {
 12103  006F38  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12104  006F3A  D034               	goto	l3783
 12105                           
 12106                           ;menu.c: 1267: if(arpeggiatorOnOffMenu.selector == 0) {
 12107  006F3C  0101               	movlb	1	; () banked
 12108  006F3E  5137               	movf	(_arpeggiatorOnOffMenu+2)& (0+255),w,b
 12109  006F40  A4D8               	btfss	status,2,c
 12110  006F42  D016               	goto	l3782
 12111                           
 12112                           ; BSR set to: 1
 12113                           ;menu.c: 1268: clear_row2();
 12114  006F44  EC67  F04B         	call	_clear_row2	;wreg free
 12115                           
 12116                           ;menu.c: 1269: Lcd_Print_String("ARPEGGIATOR OFF");
 12117  006F48  0E3D               	movlw	low STR_40
 12118  006F4A  0100               	movlb	0	; () banked
 12119  006F4C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12120  006F4E  0EFE               	movlw	high STR_40
 12121  006F50  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12122  006F52  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 12123                           
 12124                           ;menu.c: 1270: DISPLAY_MODE = 1;
 12125  006F56  0E01               	movlw	1
 12126  006F58  0100               	movlb	0	; () banked
 12127  006F5A  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 12128                           
 12129                           ; BSR set to: 0
 12130                           ;menu.c: 1271: strcpy(string_to_display, "AoFF");
 12131  006F5C  0EF8               	movlw	low _string_to_display
 12132  006F5E  6F60               	movwf	strcpy@to& (0+255),b
 12133  006F60  0E01               	movlw	high _string_to_display
 12134  006F62  6F61               	movwf	(strcpy@to+1)& (0+255),b
 12135  006F64  0ECD               	movlw	low STR_41
 12136  006F66  6F62               	movwf	strcpy@from& (0+255),b
 12137  006F68  0EFF               	movlw	high STR_41
 12138  006F6A  6F63               	movwf	(strcpy@from+1)& (0+255),b
 12139  006F6C  ECF3  F04A         	call	_strcpy	;wreg free
 12140  006F70                     l3782:
 12141                           
 12142                           ;menu.c: 1273: }
 12143                           ;menu.c: 1274: if(arpeggiatorOnOffMenu.selector == 1) {
 12144  006F70  0101               	movlb	1	; () banked
 12145  006F72  0537               	decf	(_arpeggiatorOnOffMenu+2)& (0+255),w,b
 12146  006F74  A4D8               	btfss	status,2,c
 12147  006F76  D016               	goto	l3783
 12148                           
 12149                           ; BSR set to: 1
 12150                           ;menu.c: 1275: clear_row2();
 12151  006F78  EC67  F04B         	call	_clear_row2	;wreg free
 12152                           
 12153                           ;menu.c: 1276: Lcd_Print_String("ARPEGGIATOR ON");
 12154  006F7C  0E98               	movlw	low STR_42
 12155  006F7E  0100               	movlb	0	; () banked
 12156  006F80  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12157  006F82  0EFE               	movlw	high STR_42
 12158  006F84  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12159  006F86  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 12160                           
 12161                           ;menu.c: 1277: DISPLAY_MODE = 1;
 12162  006F8A  0E01               	movlw	1
 12163  006F8C  0100               	movlb	0	; () banked
 12164  006F8E  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 12165                           
 12166                           ; BSR set to: 0
 12167                           ;menu.c: 1278: strcpy(string_to_display, " ArP");
 12168  006F90  0EF8               	movlw	low _string_to_display
 12169  006F92  6F60               	movwf	strcpy@to& (0+255),b
 12170  006F94  0E01               	movlw	high _string_to_display
 12171  006F96  6F61               	movwf	(strcpy@to+1)& (0+255),b
 12172  006F98  0ED2               	movlw	low STR_43
 12173  006F9A  6F62               	movwf	strcpy@from& (0+255),b
 12174  006F9C  0EFF               	movlw	high STR_43
 12175  006F9E  6F63               	movwf	(strcpy@from+1)& (0+255),b
 12176  006FA0  ECF3  F04A         	call	_strcpy	;wreg free
 12177  006FA4                     l3783:
 12178                           
 12179                           ;menu.c: 1279: }
 12180                           ;menu.c: 1280: }
 12181                           ;menu.c: 1281: lcd_print_once = 1;
 12182  006FA4  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12183  006FA6                     l3779:
 12184  006FA6  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12185  006FA8  D7C5               	goto	l3780
 12186                           
 12187                           ;menu.c: 1282: }
 12188                           ;menu.c: 1285: if(arpeggiatorOnOffMenu.selector == 0){
 12189  006FAA  0101               	movlb	1	; () banked
 12190  006FAC  5137               	movf	(_arpeggiatorOnOffMenu+2)& (0+255),w,b
 12191  006FAE  A4D8               	btfss	status,2,c
 12192  006FB0  D01B               	goto	l3785
 12193                           
 12194                           ; BSR set to: 1
 12195                           ;menu.c: 1288: unsigned char temp = UN_LATCH_MODE;
 12196  006FB2  0E00               	movlw	0
 12197  006FB4  B004               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 12198  006FB6  0E01               	movlw	1
 12199  006FB8  0100               	movlb	0	; () banked
 12200  006FBA  6FC7               	movwf	Function_H_1@temp& (0+255),b
 12201                           
 12202                           ; BSR set to: 0
 12203                           ;menu.c: 1290: UN_LATCH_MODE = 0;
 12204  006FBC  9004               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 12205                           
 12206                           ; BSR set to: 0
 12207                           ;menu.c: 1291: doTheUnLatch();
 12208  006FBE  EC53  F028         	call	_doTheUnLatch	;wreg free
 12209                           
 12210                           ;menu.c: 1294: UN_LATCH_MODE = temp;
 12211  006FC2  0100               	movlb	0	; () banked
 12212  006FC4  A1C7               	btfss	Function_H_1@temp& (0+255),0,b
 12213  006FC6  D002               	goto	u58620
 12214  006FC8  8004               	bsf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 12215  006FCA  D001               	goto	u58635
 12216  006FCC                     u58620:
 12217  006FCC  9004               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 12218  006FCE                     u58635:
 12219                           
 12220                           ;menu.c: 1297: DISPLAY_MODE = 1;
 12221  006FCE  0E01               	movlw	1
 12222  006FD0  0100               	movlb	0	; () banked
 12223  006FD2  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 12224                           
 12225                           ; BSR set to: 0
 12226                           ;menu.c: 1298: strcpy(string_to_display, "AoFF");
 12227  006FD4  0EF8               	movlw	low _string_to_display
 12228  006FD6  6F60               	movwf	strcpy@to& (0+255),b
 12229  006FD8  0E01               	movlw	high _string_to_display
 12230  006FDA  6F61               	movwf	(strcpy@to+1)& (0+255),b
 12231  006FDC  0ECD               	movlw	low STR_41
 12232  006FDE  6F62               	movwf	strcpy@from& (0+255),b
 12233  006FE0  0EFF               	movlw	high STR_41
 12234  006FE2  6F63               	movwf	(strcpy@from+1)& (0+255),b
 12235  006FE4  ECF3  F04A         	call	_strcpy	;wreg free
 12236  006FE8                     l3785:
 12237                           
 12238                           ;menu.c: 1299: }
 12239                           ;menu.c: 1301: ARPEGGIO_ON = arpeggiatorOnOffMenu.selector;
 12240  006FE8  0101               	movlb	1	; () banked
 12241  006FEA  A137               	btfss	(_arpeggiatorOnOffMenu+2)& (0+255),0,b
 12242  006FEC  D002               	goto	u58640
 12243  006FEE  8804               	bsf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 12244  006FF0  0012               	return	
 12245  006FF2                     u58640:
 12246  006FF2  9804               	bcf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 12247  006FF4  0012               	return		;funcret
 12248  006FF6                     __end_of_Function_H_1:
 12249                           	opt stack 0
 12250                           tblptru	equ	0xFF8
 12251                           tblptrh	equ	0xFF7
 12252                           tblptrl	equ	0xFF6
 12253                           tablat	equ	0xFF5
 12254                           prodh	equ	0xFF4
 12255                           prodl	equ	0xFF3
 12256                           intcon	equ	0xFF2
 12257                           intcon2	equ	0xFF1
 12258                           postinc0	equ	0xFEE
 12259                           wreg	equ	0xFE8
 12260                           postinc1	equ	0xFE6
 12261                           indf2	equ	0xFDF
 12262                           postinc2	equ	0xFDE
 12263                           postdec2	equ	0xFDD
 12264                           fsr2h	equ	0xFDA
 12265                           fsr2l	equ	0xFD9
 12266                           status	equ	0xFD8
 12267                           
 12268 ;; *************** function _Function_G *****************
 12269 ;; Defined at:
 12270 ;;		line 1172 in file "menu.c"
 12271 ;; Parameters:    Size  Location     Type
 12272 ;;		None
 12273 ;; Auto vars:     Size  Location     Type
 12274 ;;		None
 12275 ;; Return value:  Size  Location     Type
 12276 ;;                  1    wreg      void 
 12277 ;; Registers used:
 12278 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12279 ;; Tracked objects:
 12280 ;;		On entry : 0/0
 12281 ;;		On exit  : 0/0
 12282 ;;		Unchanged: 0/0
 12283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12288 ;;Total ram usage:        0 bytes
 12289 ;; Hardware stack levels used:    1
 12290 ;; Hardware stack levels required when called:   17
 12291 ;; This function calls:
 12292 ;;		_Function_G_1
 12293 ;;		_Function_G_2
 12294 ;;		_Function_G_3
 12295 ;;		_Function_G_4
 12296 ;;		_Lcd_Print_String
 12297 ;;		___lbmod
 12298 ;;		___wmul
 12299 ;;		_clear_row2
 12300 ;;		_eepromExit
 12301 ;;		_un_block_code
 12302 ;; This function is called by:
 12303 ;;		_menu_lcd
 12304 ;; This function uses a non-reentrant model
 12305 ;;
 12306                           
 12307                           	psect	text25
 12308  007FDE                     __ptext25:
 12309                           	opt stack 0
 12310  007FDE                     _Function_G:
 12311                           	opt stack 12
 12312                           
 12313                           ;menu.c: 1174: which_screen = EEPROM_MENU;
 12314                           
 12315                           ;incstack = 0
 12316  007FDE  0E16               	movlw	22
 12317  007FE0  6E4F               	movwf	_which_screen,c
 12318                           
 12319                           ;menu.c: 1175: lcd_print_once = 0;
 12320  007FE2  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12321                           
 12322                           ;menu.c: 1177: while(encoder_click == 0) {
 12323  007FE4  D024               	goto	l3751
 12324  007FE6                     
 12325                           ;menu.c: 1181: un_block_code();
 12326  007FE6  EC10  F04C         	call	_un_block_code	;wreg free
 12327                           
 12328                           ;menu.c: 1183: if (lcd_print_once == 0) {
 12329  007FEA  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12330  007FEC  D01F               	goto	l3753
 12331                           
 12332                           ;menu.c: 1184: clear_row2();
 12333  007FEE  EC67  F04B         	call	_clear_row2	;wreg free
 12334                           
 12335                           ;menu.c: 1185: Lcd_Print_String(LCD_STRINGS[(eepromMenu.selector % eepromMenu.number) + 
      +                          eepromMenu.address]);
 12336  007FF2  0101               	movlb	1	; () banked
 12337  007FF4  513B               	movf	_eepromMenu& (0+255),w,b
 12338  007FF6  6EE6               	movwf	postinc1,c
 12339  007FF8  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 12340  007FFA  6EE6               	movwf	postinc1,c
 12341  007FFC  ECC6  F040         	call	___lbmod	;wreg free
 12342  008000  503F               	movf	btemp,w,c
 12343  008002  0101               	movlb	1	; () banked
 12344  008004  253C               	addwf	(_eepromMenu+1)& (0+255),w,b
 12345  008006  0100               	movlb	0	; () banked
 12346  008008  6F60               	movwf	___wmul@multiplier& (0+255),b
 12347  00800A  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 12348  00800C  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 12349  00800E  0E00               	movlw	0
 12350  008010  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12351  008012  0E11               	movlw	17
 12352  008014  6F62               	movwf	___wmul@multiplicand& (0+255),b
 12353  008016  EC8F  F04B         	call	___wmul	;wreg free
 12354  00801A  0E9E               	movlw	low _LCD_STRINGS
 12355  00801C  0100               	movlb	0	; () banked
 12356  00801E  2560               	addwf	?___wmul& (0+255),w,b
 12357  008020  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12358  008022  0EF3               	movlw	high _LCD_STRINGS
 12359  008024  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 12360  008026  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12361  008028  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 12362  00802C                     l3753:
 12363                           
 12364                           ;menu.c: 1186: }
 12365                           ;menu.c: 1187: lcd_print_once = 1;
 12366  00802C  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12367  00802E                     l3751:
 12368  00802E  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12369  008030  D7DA               	goto	l3752
 12370                           
 12371                           ;menu.c: 1188: }
 12372                           ;menu.c: 1190: if(eepromMenu.selector == 0) {Function_G_1();}
 12373  008032  0101               	movlb	1	; () banked
 12374  008034  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 12375  008036  B4D8               	btfsc	status,2,c
 12376                           
 12377                           ; BSR set to: 1
 12378  008038  EC70  F03E         	call	_Function_G_1	;wreg free
 12379                           
 12380                           ;menu.c: 1191: if(eepromMenu.selector == 1) {Function_G_2();}
 12381  00803C  0101               	movlb	1	; () banked
 12382  00803E  053D               	decf	(_eepromMenu+2)& (0+255),w,b
 12383  008040  B4D8               	btfsc	status,2,c
 12384                           
 12385                           ; BSR set to: 1
 12386  008042  EC20  F03E         	call	_Function_G_2	;wreg free
 12387                           
 12388                           ;menu.c: 1192: if(eepromMenu.selector == 2) {Function_G_3();}
 12389  008046  0E02               	movlw	2
 12390  008048  0101               	movlb	1	; () banked
 12391  00804A  193D               	xorwf	(_eepromMenu+2)& (0+255),w,b
 12392  00804C  B4D8               	btfsc	status,2,c
 12393                           
 12394                           ; BSR set to: 1
 12395  00804E  ECD1  F047         	call	_Function_G_3	;wreg free
 12396                           
 12397                           ;menu.c: 1193: if(eepromMenu.selector == 3) {Function_G_4();}
 12398  008052  0E03               	movlw	3
 12399  008054  0101               	movlb	1	; () banked
 12400  008056  193D               	xorwf	(_eepromMenu+2)& (0+255),w,b
 12401  008058  B4D8               	btfsc	status,2,c
 12402                           
 12403                           ; BSR set to: 1
 12404  00805A  EC0E  F03F         	call	_Function_G_4	;wreg free
 12405                           
 12406                           ;menu.c: 1194: if(eepromMenu.selector == 4) {eepromExit();}
 12407  00805E  0E04               	movlw	4
 12408  008060  0101               	movlb	1	; () banked
 12409  008062  193D               	xorwf	(_eepromMenu+2)& (0+255),w,b
 12410  008064  A4D8               	btfss	status,2,c
 12411  008066  0012               	return	
 12412                           
 12413                           ; BSR set to: 1
 12414  008068  EC86  F04A         	call	_eepromExit	;wreg free
 12415  00806C  0012               	return	
 12416  00806E                     __end_of_Function_G:
 12417                           	opt stack 0
 12418                           tblptru	equ	0xFF8
 12419                           tblptrh	equ	0xFF7
 12420                           tblptrl	equ	0xFF6
 12421                           tablat	equ	0xFF5
 12422                           prodh	equ	0xFF4
 12423                           prodl	equ	0xFF3
 12424                           intcon	equ	0xFF2
 12425                           intcon2	equ	0xFF1
 12426                           postinc0	equ	0xFEE
 12427                           wreg	equ	0xFE8
 12428                           postinc1	equ	0xFE6
 12429                           indf2	equ	0xFDF
 12430                           postinc2	equ	0xFDE
 12431                           postdec2	equ	0xFDD
 12432                           fsr2h	equ	0xFDA
 12433                           fsr2l	equ	0xFD9
 12434                           status	equ	0xFD8
 12435                           
 12436 ;; *************** function _Function_G_4 *****************
 12437 ;; Defined at:
 12438 ;;		line 1139 in file "menu.c"
 12439 ;; Parameters:    Size  Location     Type
 12440 ;;		None
 12441 ;; Auto vars:     Size  Location     Type
 12442 ;;		None
 12443 ;; Return value:  Size  Location     Type
 12444 ;;                  1    wreg      void 
 12445 ;; Registers used:
 12446 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12447 ;; Tracked objects:
 12448 ;;		On entry : 0/0
 12449 ;;		On exit  : 0/0
 12450 ;;		Unchanged: 0/0
 12451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12456 ;;Total ram usage:        0 bytes
 12457 ;; Hardware stack levels used:    1
 12458 ;; Hardware stack levels required when called:   16
 12459 ;; This function calls:
 12460 ;;		_Busy_eep
 12461 ;;		_Lcd_Print_String
 12462 ;;		_Write_b_eep
 12463 ;;		___lbmod
 12464 ;;		___wmul
 12465 ;;		_clear_row1
 12466 ;;		_clear_row2
 12467 ;;		_exitFunction
 12468 ;;		_un_block_code
 12469 ;; This function is called by:
 12470 ;;		_Function_G
 12471 ;; This function uses a non-reentrant model
 12472 ;;
 12473                           
 12474                           	psect	text26
 12475  007E1C                     __ptext26:
 12476                           	opt stack 0
 12477  007E1C                     _Function_G_4:
 12478                           	opt stack 12
 12479                           
 12480                           ;menu.c: 1143: which_screen = ENCODER_POLARITY_MENU;
 12481                           
 12482                           ;incstack = 0
 12483  007E1C  0E18               	movlw	24
 12484  007E1E  6E4F               	movwf	_which_screen,c
 12485                           
 12486                           ;menu.c: 1144: lcd_print_once = 0;
 12487  007E20  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12488                           
 12489                           ;menu.c: 1145: encoder_click = 0;
 12490  007E22  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12491                           
 12492                           ;menu.c: 1147: encoderPolarityMenu.selector = encoderPolarity;
 12493  007E24  0E00               	movlw	0
 12494  007E26  B605               	btfsc	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 12495  007E28  0E01               	movlw	1
 12496  007E2A  0101               	movlb	1	; () banked
 12497  007E2C  6F3A               	movwf	(_encoderPolarityMenu+2)& (0+255),b
 12498                           
 12499                           ;menu.c: 1149: while(encoder_click == 0) {
 12500  007E2E  D02D               	goto	l3744
 12501  007E30                     
 12502                           ;menu.c: 1153: un_block_code();
 12503                           
 12504                           ; BSR set to: 1
 12505  007E30  EC10  F04C         	call	_un_block_code	;wreg free
 12506                           
 12507                           ;menu.c: 1155: if (lcd_print_once == 0) {
 12508  007E34  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12509  007E36  D028               	goto	l3746
 12510                           
 12511                           ;menu.c: 1156: clear_row1();
 12512  007E38  EC7B  F04B         	call	_clear_row1	;wreg free
 12513                           
 12514                           ;menu.c: 1157: Lcd_Print_String("Encoder Polarity");
 12515  007E3C  0EEC               	movlw	low STR_39
 12516  007E3E  0100               	movlb	0	; () banked
 12517  007E40  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12518  007E42  0EFD               	movlw	high STR_39
 12519  007E44  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12520  007E46  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 12521                           
 12522                           ;menu.c: 1158: clear_row2();
 12523  007E4A  EC67  F04B         	call	_clear_row2	;wreg free
 12524                           
 12525                           ;menu.c: 1159: Lcd_Print_String(LCD_STRINGS[(encoderPolarityMenu.selector % encoderPolar
      +                          ityMenu.number) + encoderPolarityMenu.address]);
 12526  007E4E  0101               	movlb	1	; () banked
 12527  007E50  5138               	movf	_encoderPolarityMenu& (0+255),w,b
 12528  007E52  6EE6               	movwf	postinc1,c
 12529  007E54  513A               	movf	(_encoderPolarityMenu+2)& (0+255),w,b
 12530  007E56  6EE6               	movwf	postinc1,c
 12531  007E58  ECC6  F040         	call	___lbmod	;wreg free
 12532  007E5C  503F               	movf	btemp,w,c
 12533  007E5E  0101               	movlb	1	; () banked
 12534  007E60  2539               	addwf	(_encoderPolarityMenu+1)& (0+255),w,b
 12535  007E62  0100               	movlb	0	; () banked
 12536  007E64  6F60               	movwf	___wmul@multiplier& (0+255),b
 12537  007E66  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 12538  007E68  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 12539  007E6A  0E00               	movlw	0
 12540  007E6C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12541  007E6E  0E11               	movlw	17
 12542  007E70  6F62               	movwf	___wmul@multiplicand& (0+255),b
 12543  007E72  EC8F  F04B         	call	___wmul	;wreg free
 12544  007E76  0E9E               	movlw	low _LCD_STRINGS
 12545  007E78  0100               	movlb	0	; () banked
 12546  007E7A  2560               	addwf	?___wmul& (0+255),w,b
 12547  007E7C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12548  007E7E  0EF3               	movlw	high _LCD_STRINGS
 12549  007E80  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 12550  007E82  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12551  007E84  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 12552  007E88                     l3746:
 12553                           
 12554                           ;menu.c: 1160: }
 12555                           ;menu.c: 1161: lcd_print_once = 1;
 12556  007E88  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12557  007E8A                     l3744:
 12558  007E8A  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12559  007E8C  D7D1               	goto	l3745
 12560                           
 12561                           ;menu.c: 1162: }
 12562                           ;menu.c: 1165: encoderPolarity = encoderPolarityMenu.selector;
 12563  007E8E  0101               	movlb	1	; () banked
 12564  007E90  A13A               	btfss	(_encoderPolarityMenu+2)& (0+255),0,b
 12565  007E92  D002               	goto	u58550
 12566  007E94  8605               	bsf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 12567  007E96  D001               	goto	u58565
 12568  007E98                     u58550:
 12569  007E98  9605               	bcf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 12570  007E9A                     u58565:
 12571                           
 12572                           ;menu.c: 1166: (Busy_eep(), Write_b_eep(0x02,encoderPolarityMenu.selector));
 12573  007E9A  EC5F  F04C         	call	_Busy_eep	;wreg free
 12574  007E9E  0E00               	movlw	0
 12575  007EA0  0100               	movlb	0	; () banked
 12576  007EA2  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 12577  007EA4  0E02               	movlw	2
 12578  007EA6  6F60               	movwf	Write_b_eep@badd& (0+255),b
 12579  007EA8  C13A  F062         	movff	_encoderPolarityMenu+2,Write_b_eep@bdat
 12580  007EAC  ECD1  F049         	call	_Write_b_eep	;wreg free
 12581                           
 12582                           ;menu.c: 1167: exitFunction();
 12583  007EB0  EC2F  F04A         	call	_exitFunction	;wreg free
 12584  007EB4  0012               	return		;funcret
 12585  007EB6                     __end_of_Function_G_4:
 12586                           	opt stack 0
 12587                           tblptru	equ	0xFF8
 12588                           tblptrh	equ	0xFF7
 12589                           tblptrl	equ	0xFF6
 12590                           tablat	equ	0xFF5
 12591                           prodh	equ	0xFF4
 12592                           prodl	equ	0xFF3
 12593                           intcon	equ	0xFF2
 12594                           intcon2	equ	0xFF1
 12595                           postinc0	equ	0xFEE
 12596                           wreg	equ	0xFE8
 12597                           postinc1	equ	0xFE6
 12598                           indf2	equ	0xFDF
 12599                           postinc2	equ	0xFDE
 12600                           postdec2	equ	0xFDD
 12601                           fsr2h	equ	0xFDA
 12602                           fsr2l	equ	0xFD9
 12603                           status	equ	0xFD8
 12604                           
 12605 ;; *************** function _exitFunction *****************
 12606 ;; Defined at:
 12607 ;;		line 242 in file "menu.c"
 12608 ;; Parameters:    Size  Location     Type
 12609 ;;		None
 12610 ;; Auto vars:     Size  Location     Type
 12611 ;;		None
 12612 ;; Return value:  Size  Location     Type
 12613 ;;                  1    wreg      void 
 12614 ;; Registers used:
 12615 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12616 ;; Tracked objects:
 12617 ;;		On entry : 0/0
 12618 ;;		On exit  : 0/0
 12619 ;;		Unchanged: 0/0
 12620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12623 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12624 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12625 ;;Total ram usage:        2 bytes
 12626 ;; Hardware stack levels used:    1
 12627 ;; Hardware stack levels required when called:    9
 12628 ;; This function calls:
 12629 ;;		_Lcd_Print_String
 12630 ;;		_clear_row1
 12631 ;; This function is called by:
 12632 ;;		_menu_lcd
 12633 ;;		_Function_G_4
 12634 ;; This function uses a non-reentrant model
 12635 ;;
 12636                           
 12637                           	psect	text27
 12638  00945E                     __ptext27:
 12639                           	opt stack 0
 12640  00945E                     _exitFunction:
 12641                           	opt stack 20
 12642                           
 12643                           ;menu.c: 245: while(encoder_click == 0);
 12644                           
 12645                           ;incstack = 0
 12646  00945E  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12647  009460  D7FE               	goto	_exitFunction
 12648                           
 12649                           ;menu.c: 251: clear_row1();
 12650  009462  EC7B  F04B         	call	_clear_row1	;wreg free
 12651                           
 12652                           ;menu.c: 252: Lcd_Print_String("Set!");
 12653  009466  0EC3               	movlw	low STR_20
 12654  009468  0100               	movlb	0	; () banked
 12655  00946A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12656  00946C  0EFF               	movlw	high STR_20
 12657  00946E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12658  009470  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 12659                           
 12660                           ;menu.c: 255: _delay((unsigned long)((500)*(20000000/4000.0)));
 12661  009474  0E0D               	movlw	13
 12662  009476  0100               	movlb	0	; () banked
 12663  009478  6F6F               	movwf	(??_exitFunction+1)& (0+255),b
 12664  00947A  0EAF               	movlw	175
 12665  00947C  6F6E               	movwf	??_exitFunction& (0+255),b
 12666  00947E  0EB6               	movlw	182
 12667  009480                     u66987:
 12668  009480  2EE8               	decfsz	wreg,f,c
 12669  009482  D7FE               	bra	u66987
 12670  009484  2F6E               	decfsz	??_exitFunction& (0+255),f,b
 12671  009486  D7FC               	bra	u66987
 12672  009488  2F6F               	decfsz	(??_exitFunction+1)& (0+255),f,b
 12673  00948A  D7FA               	bra	u66987
 12674  00948C  F000               	nop	
 12675                           
 12676                           ;menu.c: 256: which_screen = MAIN_MENU;
 12677  00948E  0E02               	movlw	2
 12678  009490  6E4F               	movwf	_which_screen,c
 12679                           
 12680                           ;menu.c: 257: lcd_print_once = 0;
 12681  009492  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12682                           
 12683                           ;menu.c: 258: encoder_click = 0;
 12684  009494  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12685  009496  0012               	return		;funcret
 12686  009498                     __end_of_exitFunction:
 12687                           	opt stack 0
 12688                           tblptru	equ	0xFF8
 12689                           tblptrh	equ	0xFF7
 12690                           tblptrl	equ	0xFF6
 12691                           tablat	equ	0xFF5
 12692                           prodh	equ	0xFF4
 12693                           prodl	equ	0xFF3
 12694                           intcon	equ	0xFF2
 12695                           intcon2	equ	0xFF1
 12696                           postinc0	equ	0xFEE
 12697                           wreg	equ	0xFE8
 12698                           postinc1	equ	0xFE6
 12699                           indf2	equ	0xFDF
 12700                           postinc2	equ	0xFDE
 12701                           postdec2	equ	0xFDD
 12702                           fsr2h	equ	0xFDA
 12703                           fsr2l	equ	0xFD9
 12704                           status	equ	0xFD8
 12705                           
 12706 ;; *************** function _Function_G_3 *****************
 12707 ;; Defined at:
 12708 ;;		line 1123 in file "menu.c"
 12709 ;; Parameters:    Size  Location     Type
 12710 ;;		None
 12711 ;; Auto vars:     Size  Location     Type
 12712 ;;		None
 12713 ;; Return value:  Size  Location     Type
 12714 ;;                  1    wreg      void 
 12715 ;; Registers used:
 12716 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12717 ;; Tracked objects:
 12718 ;;		On entry : 0/0
 12719 ;;		On exit  : 0/0
 12720 ;;		Unchanged: 0/0
 12721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12724 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12725 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12726 ;;Total ram usage:        2 bytes
 12727 ;; Hardware stack levels used:    1
 12728 ;; Hardware stack levels required when called:    9
 12729 ;; This function calls:
 12730 ;;		_Busy_eep
 12731 ;;		_Lcd_Print_String
 12732 ;;		_Write_b_eep
 12733 ;;		_clear_row1
 12734 ;;		_clear_row2
 12735 ;; This function is called by:
 12736 ;;		_Function_G
 12737 ;; This function uses a non-reentrant model
 12738 ;;
 12739                           
 12740                           	psect	text28
 12741  008FA2                     __ptext28:
 12742                           	opt stack 0
 12743  008FA2                     _Function_G_3:
 12744                           	opt stack 19
 12745                           
 12746                           ;menu.c: 1126: while(encoder_click == 0);
 12747                           
 12748                           ;incstack = 0
 12749  008FA2  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12750  008FA4  D7FE               	goto	_Function_G_3
 12751                           
 12752                           ;menu.c: 1128: (Busy_eep(), Write_b_eep(0,0x00));
 12753  008FA6  EC5F  F04C         	call	_Busy_eep	;wreg free
 12754  008FAA  0E00               	movlw	0
 12755  008FAC  0100               	movlb	0	; () banked
 12756  008FAE  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 12757  008FB0  0E00               	movlw	0
 12758  008FB2  6F60               	movwf	Write_b_eep@badd& (0+255),b
 12759  008FB4  0E00               	movlw	0
 12760  008FB6  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 12761  008FB8  ECD1  F049         	call	_Write_b_eep	;wreg free
 12762                           
 12763                           ;menu.c: 1130: clear_row1();
 12764  008FBC  EC7B  F04B         	call	_clear_row1	;wreg free
 12765                           
 12766                           ;menu.c: 1131: Lcd_Print_String("Restore Setting!");
 12767  008FC0  0E86               	movlw	low STR_37
 12768  008FC2  0100               	movlb	0	; () banked
 12769  008FC4  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12770  008FC6  0EFD               	movlw	high STR_37
 12771  008FC8  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12772  008FCA  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 12773                           
 12774                           ;menu.c: 1132: clear_row2();
 12775  008FCE  EC67  F04B         	call	_clear_row2	;wreg free
 12776                           
 12777                           ;menu.c: 1133: Lcd_Print_String("Rebooting...");
 12778  008FD2  0E25               	movlw	low STR_38
 12779  008FD4  0100               	movlb	0	; () banked
 12780  008FD6  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12781  008FD8  0EFF               	movlw	high STR_38
 12782  008FDA  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12783  008FDC  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 12784                           
 12785                           ;menu.c: 1134: _delay((unsigned long)((2500)*(20000000/4000.0)));
 12786  008FE0  0E40               	movlw	64
 12787  008FE2  0100               	movlb	0	; () banked
 12788  008FE4  6F6F               	movwf	(??_Function_G_3+1)& (0+255),b
 12789  008FE6  0E6A               	movlw	106
 12790  008FE8  6F6E               	movwf	??_Function_G_3& (0+255),b
 12791  008FEA  0E97               	movlw	151
 12792  008FEC                     u66997:
 12793  008FEC  2EE8               	decfsz	wreg,f,c
 12794  008FEE  D7FE               	bra	u66997
 12795  008FF0  2F6E               	decfsz	??_Function_G_3& (0+255),f,b
 12796  008FF2  D7FC               	bra	u66997
 12797  008FF4  2F6F               	decfsz	(??_Function_G_3+1)& (0+255),f,b
 12798  008FF6  D7FA               	bra	u66997
 12799  008FF8  D000               	nop2	
 12800  008FFA  00FF               	reset		;# 
 12801  008FFC  0012               	return		;funcret
 12802  008FFE                     __end_of_Function_G_3:
 12803                           	opt stack 0
 12804                           tblptru	equ	0xFF8
 12805                           tblptrh	equ	0xFF7
 12806                           tblptrl	equ	0xFF6
 12807                           tablat	equ	0xFF5
 12808                           prodh	equ	0xFF4
 12809                           prodl	equ	0xFF3
 12810                           intcon	equ	0xFF2
 12811                           intcon2	equ	0xFF1
 12812                           postinc0	equ	0xFEE
 12813                           wreg	equ	0xFE8
 12814                           postinc1	equ	0xFE6
 12815                           indf2	equ	0xFDF
 12816                           postinc2	equ	0xFDE
 12817                           postdec2	equ	0xFDD
 12818                           fsr2h	equ	0xFDA
 12819                           fsr2l	equ	0xFD9
 12820                           status	equ	0xFD8
 12821                           
 12822 ;; *************** function _Function_G_2 *****************
 12823 ;; Defined at:
 12824 ;;		line 1090 in file "menu.c"
 12825 ;; Parameters:    Size  Location     Type
 12826 ;;		None
 12827 ;; Auto vars:     Size  Location     Type
 12828 ;;		None
 12829 ;; Return value:  Size  Location     Type
 12830 ;;                  1    wreg      void 
 12831 ;; Registers used:
 12832 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12833 ;; Tracked objects:
 12834 ;;		On entry : 0/0
 12835 ;;		On exit  : 0/0
 12836 ;;		Unchanged: 0/0
 12837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12842 ;;Total ram usage:        0 bytes
 12843 ;; Hardware stack levels used:    1
 12844 ;; Hardware stack levels required when called:   16
 12845 ;; This function calls:
 12846 ;;		_Busy_eep
 12847 ;;		_Lcd_Print_String
 12848 ;;		_Write_b_eep
 12849 ;;		___lbmod
 12850 ;;		___wmul
 12851 ;;		_clear_row1
 12852 ;;		_clear_row2
 12853 ;;		_eepromExit
 12854 ;;		_exitLoad
 12855 ;;		_loadFromEEPROM
 12856 ;;		_un_block_code
 12857 ;; This function is called by:
 12858 ;;		_Function_G
 12859 ;; This function uses a non-reentrant model
 12860 ;;
 12861                           
 12862                           	psect	text29
 12863  007C40                     __ptext29:
 12864                           	opt stack 0
 12865  007C40                     _Function_G_2:
 12866                           	opt stack 12
 12867                           
 12868                           ;menu.c: 1092: which_screen = SAVES_MENU;
 12869                           
 12870                           ;incstack = 0
 12871  007C40  0E17               	movlw	23
 12872  007C42  6E4F               	movwf	_which_screen,c
 12873                           
 12874                           ;menu.c: 1093: encoder_click = 0;
 12875  007C44  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12876                           
 12877                           ;menu.c: 1094: lcd_print_once = 0;
 12878  007C46  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12879                           
 12880                           ;menu.c: 1096: while(encoder_click == 0) {
 12881  007C48  D02C               	goto	l3729
 12882  007C4A                     
 12883                           ;menu.c: 1100: un_block_code();
 12884  007C4A  EC10  F04C         	call	_un_block_code	;wreg free
 12885                           
 12886                           ;menu.c: 1102: if (lcd_print_once == 0) {
 12887  007C4E  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12888  007C50  D027               	goto	l3731
 12889                           
 12890                           ;menu.c: 1103: clear_row1();
 12891  007C52  EC7B  F04B         	call	_clear_row1	;wreg free
 12892                           
 12893                           ;menu.c: 1104: Lcd_Print_String("Load #:");
 12894  007C56  0EB3               	movlw	low STR_36
 12895  007C58  0100               	movlb	0	; () banked
 12896  007C5A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12897  007C5C  0EFF               	movlw	high STR_36
 12898  007C5E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12899  007C60  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 12900                           
 12901                           ;menu.c: 1105: clear_row2();
 12902  007C64  EC67  F04B         	call	_clear_row2	;wreg free
 12903                           
 12904                           ;menu.c: 1106: Lcd_Print_String(LCD_STRINGS[(savesMenu.selector % savesMenu.number) + sa
      +                          vesMenu.address]);
 12905  007C68  0100               	movlb	0	; () banked
 12906  007C6A  51E2               	movf	_savesMenu& (0+255),w,b
 12907  007C6C  6EE6               	movwf	postinc1,c
 12908  007C6E  51E4               	movf	(_savesMenu+2)& (0+255),w,b
 12909  007C70  6EE6               	movwf	postinc1,c
 12910  007C72  ECC6  F040         	call	___lbmod	;wreg free
 12911  007C76  503F               	movf	btemp,w,c
 12912  007C78  0100               	movlb	0	; () banked
 12913  007C7A  25E3               	addwf	(_savesMenu+1)& (0+255),w,b
 12914  007C7C  6F60               	movwf	___wmul@multiplier& (0+255),b
 12915  007C7E  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 12916  007C80  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 12917  007C82  0E00               	movlw	0
 12918  007C84  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12919  007C86  0E11               	movlw	17
 12920  007C88  6F62               	movwf	___wmul@multiplicand& (0+255),b
 12921  007C8A  EC8F  F04B         	call	___wmul	;wreg free
 12922  007C8E  0E9E               	movlw	low _LCD_STRINGS
 12923  007C90  0100               	movlb	0	; () banked
 12924  007C92  2560               	addwf	?___wmul& (0+255),w,b
 12925  007C94  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12926  007C96  0EF3               	movlw	high _LCD_STRINGS
 12927  007C98  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 12928  007C9A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12929  007C9C  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 12930  007CA0                     l3731:
 12931                           
 12932                           ;menu.c: 1107: }
 12933                           ;menu.c: 1108: lcd_print_once = 1;
 12934  007CA0  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12935  007CA2                     l3729:
 12936  007CA2  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12937  007CA4  D7D2               	goto	l3730
 12938                           
 12939                           ;menu.c: 1109: }
 12940                           ;menu.c: 1111: if(savesMenu.selector == 4){eepromExit();}
 12941  007CA6  0E04               	movlw	4
 12942  007CA8  0100               	movlb	0	; () banked
 12943  007CAA  19E4               	xorwf	(_savesMenu+2)& (0+255),w,b
 12944  007CAC  A4D8               	btfss	status,2,c
 12945  007CAE  D003               	goto	l3733
 12946                           
 12947                           ; BSR set to: 0
 12948  007CB0  EC86  F04A         	call	_eepromExit	;wreg free
 12949  007CB4  D011               	goto	l3734
 12950  007CB6                     l3733:
 12951                           
 12952                           ;menu.c: 1112: else {
 12953                           ;menu.c: 1114: (Busy_eep(), Write_b_eep(0,(savesMenu.selector + 1)));
 12954  007CB6  EC5F  F04C         	call	_Busy_eep	;wreg free
 12955  007CBA  0E00               	movlw	0
 12956  007CBC  0100               	movlb	0	; () banked
 12957  007CBE  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 12958  007CC0  0E00               	movlw	0
 12959  007CC2  6F60               	movwf	Write_b_eep@badd& (0+255),b
 12960  007CC4  29E4               	incf	(_savesMenu+2)& (0+255),w,b
 12961  007CC6  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 12962  007CC8  ECD1  F049         	call	_Write_b_eep	;wreg free
 12963                           
 12964                           ;menu.c: 1115: loadFromEEPROM(savesMenu.selector + 1);
 12965  007CCC  0100               	movlb	0	; () banked
 12966  007CCE  29E4               	incf	(_savesMenu+2)& (0+255),w,b
 12967  007CD0  EC3C  F025         	call	_loadFromEEPROM
 12968                           
 12969                           ;menu.c: 1116: exitLoad();
 12970  007CD4  EC4C  F04A         	call	_exitLoad	;wreg free
 12971  007CD8                     l3734:
 12972                           
 12973                           ;menu.c: 1117: }
 12974                           ;menu.c: 1119: savesMenu.selector = 0;
 12975  007CD8  0E00               	movlw	0
 12976  007CDA  0100               	movlb	0	; () banked
 12977  007CDC  6FE4               	movwf	(_savesMenu+2)& (0+255),b
 12978                           
 12979                           ; BSR set to: 0
 12980  007CDE  0012               	return		;funcret
 12981  007CE0                     __end_of_Function_G_2:
 12982                           	opt stack 0
 12983                           tblptru	equ	0xFF8
 12984                           tblptrh	equ	0xFF7
 12985                           tblptrl	equ	0xFF6
 12986                           tablat	equ	0xFF5
 12987                           prodh	equ	0xFF4
 12988                           prodl	equ	0xFF3
 12989                           intcon	equ	0xFF2
 12990                           intcon2	equ	0xFF1
 12991                           postinc0	equ	0xFEE
 12992                           wreg	equ	0xFE8
 12993                           postinc1	equ	0xFE6
 12994                           indf2	equ	0xFDF
 12995                           postinc2	equ	0xFDE
 12996                           postdec2	equ	0xFDD
 12997                           fsr2h	equ	0xFDA
 12998                           fsr2l	equ	0xFD9
 12999                           status	equ	0xFD8
 13000                           
 13001 ;; *************** function _loadFromEEPROM *****************
 13002 ;; Defined at:
 13003 ;;		line 54 in file "eeprom.c"
 13004 ;; Parameters:    Size  Location     Type
 13005 ;;  slotNumber      1    wreg     unsigned char 
 13006 ;; Auto vars:     Size  Location     Type
 13007 ;;  slotNumber      1   77[BANK1 ] unsigned char 
 13008 ;;  byte_count      2   78[BANK1 ] unsigned int 
 13009 ;;  to_load        75    0[BANK1 ] unsigned char [75]
 13010 ;;  baseAddress     2   75[BANK1 ] unsigned int 
 13011 ;; Return value:  Size  Location     Type
 13012 ;;                  1    wreg      void 
 13013 ;; Registers used:
 13014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13015 ;; Tracked objects:
 13016 ;;		On entry : 0/0
 13017 ;;		On exit  : 0/0
 13018 ;;		Unchanged: 0/0
 13019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13021 ;;      Locals:         0       0      80       0       0       0       0       0       0       0       0       0       
      +0       0
 13022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13023 ;;      Totals:         0       0      80       0       0       0       0       0       0       0       0       0       
      +0       0
 13024 ;;Total ram usage:       80 bytes
 13025 ;; Hardware stack levels used:    1
 13026 ;; Hardware stack levels required when called:    7
 13027 ;; This function calls:
 13028 ;;		_Read_b_eep
 13029 ;;		_calculate_pulse_length
 13030 ;; This function is called by:
 13031 ;;		_Function_G_2
 13032 ;;		_selectSlotOnBoot
 13033 ;; This function uses a non-reentrant model
 13034 ;;
 13035                           
 13036                           	psect	text30
 13037  004A78                     __ptext30:
 13038                           	opt stack 0
 13039  004A78                     _loadFromEEPROM:
 13040                           	opt stack 22
 13041                           
 13042                           ; BSR set to: 0
 13043                           ;incstack = 0
 13044                           ;loadFromEEPROM@slotNumber stored from wreg
 13045  004A78  0101               	movlb	1	; () banked
 13046  004A7A  6FE4               	movwf	loadFromEEPROM@slotNumber& (0+255),b
 13047                           
 13048                           ;eeprom.c: 56: unsigned int baseAddress = 0;
 13049  004A7C  0E00               	movlw	0
 13050  004A7E  0101               	movlb	1	; () banked
 13051  004A80  6FE3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13052  004A82  0E00               	movlw	0
 13053  004A84  6FE2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13054                           
 13055                           ; BSR set to: 1
 13056                           ;eeprom.c: 59: if (slotNumber == SLOT1) {baseAddress = 128;}
 13057  004A86  05E4               	decf	loadFromEEPROM@slotNumber& (0+255),w,b
 13058  004A88  A4D8               	btfss	status,2,c
 13059  004A8A  D004               	goto	l4436
 13060                           
 13061                           ; BSR set to: 1
 13062  004A8C  0E00               	movlw	0
 13063  004A8E  6FE3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13064  004A90  0E80               	movlw	128
 13065  004A92  6FE2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13066  004A94                     l4436:
 13067                           
 13068                           ; BSR set to: 1
 13069                           ;eeprom.c: 60: if (slotNumber == SLOT2) {baseAddress = 256;}
 13070                           
 13071                           ; BSR set to: 1
 13072  004A94  0E02               	movlw	2
 13073  004A96  19E4               	xorwf	loadFromEEPROM@slotNumber& (0+255),w,b
 13074  004A98  A4D8               	btfss	status,2,c
 13075  004A9A  D004               	goto	l4437
 13076                           
 13077                           ; BSR set to: 1
 13078  004A9C  0E01               	movlw	1
 13079  004A9E  6FE3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13080  004AA0  0E00               	movlw	0
 13081  004AA2  6FE2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13082  004AA4                     l4437:
 13083                           
 13084                           ; BSR set to: 1
 13085                           ;eeprom.c: 61: if (slotNumber == SLOT3) {baseAddress = 384;}
 13086                           
 13087                           ; BSR set to: 1
 13088  004AA4  0E03               	movlw	3
 13089  004AA6  19E4               	xorwf	loadFromEEPROM@slotNumber& (0+255),w,b
 13090  004AA8  A4D8               	btfss	status,2,c
 13091  004AAA  D004               	goto	l4438
 13092                           
 13093                           ; BSR set to: 1
 13094  004AAC  0E01               	movlw	1
 13095  004AAE  6FE3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13096  004AB0  0E80               	movlw	128
 13097  004AB2  6FE2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13098  004AB4                     l4438:
 13099                           
 13100                           ; BSR set to: 1
 13101                           ;eeprom.c: 62: if (slotNumber == SLOT4) {baseAddress = 512;}
 13102                           
 13103                           ; BSR set to: 1
 13104  004AB4  0E04               	movlw	4
 13105  004AB6  19E4               	xorwf	loadFromEEPROM@slotNumber& (0+255),w,b
 13106  004AB8  A4D8               	btfss	status,2,c
 13107  004ABA  D004               	goto	l4439
 13108                           
 13109                           ; BSR set to: 1
 13110  004ABC  0E02               	movlw	2
 13111  004ABE  6FE3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13112  004AC0  0E00               	movlw	0
 13113  004AC2  6FE2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13114  004AC4                     l4439:
 13115                           
 13116                           ; BSR set to: 1
 13117                           ;eeprom.c: 65: unsigned char to_load[75];
 13118                           ;eeprom.c: 68: for (unsigned int byte_count = 0; byte_count < 75; byte_count++){
 13119  004AC4  0E00               	movlw	0
 13120  004AC6  6FE6               	movwf	(loadFromEEPROM@byte_count+1)& (0+255),b
 13121  004AC8  0E00               	movlw	0
 13122  004ACA  6FE5               	movwf	loadFromEEPROM@byte_count& (0+255),b
 13123                           
 13124                           ; BSR set to: 1
 13125  004ACC  51E6               	movf	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13126  004ACE  E11C               	bnz	l4441
 13127  004AD0  D017               	goto	L1
 13128  004AD2                     
 13129                           ; BSR set to: 1
 13130                           ;eeprom.c: 69: to_load[byte_count] = Read_b_eep(byte_count + baseAddress);
 13131                           
 13132                           ; BSR set to: 1
 13133  004AD2  0E97               	movlw	low loadFromEEPROM@to_load
 13134  004AD4  25E5               	addwf	loadFromEEPROM@byte_count& (0+255),w,b
 13135  004AD6  6ED9               	movwf	fsr2l,c
 13136  004AD8  0E01               	movlw	high loadFromEEPROM@to_load
 13137  004ADA  21E6               	addwfc	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13138  004ADC  6EDA               	movwf	fsr2h,c
 13139  004ADE  51E2               	movf	loadFromEEPROM@baseAddress& (0+255),w,b
 13140  004AE0  25E5               	addwf	loadFromEEPROM@byte_count& (0+255),w,b
 13141  004AE2  0100               	movlb	0	; () banked
 13142  004AE4  6F60               	movwf	Read_b_eep@badd& (0+255),b
 13143  004AE6  0101               	movlb	1	; () banked
 13144  004AE8  51E3               	movf	(loadFromEEPROM@baseAddress+1)& (0+255),w,b
 13145  004AEA  21E6               	addwfc	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13146  004AEC  0100               	movlb	0	; () banked
 13147  004AEE  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
 13148  004AF0  ECF6  F04B         	call	_Read_b_eep	;wreg free
 13149  004AF4  6EDF               	movwf	indf2,c
 13150  004AF6  0101               	movlb	1	; () banked
 13151  004AF8  4BE5               	infsnz	loadFromEEPROM@byte_count& (0+255),f,b
 13152  004AFA  2BE6               	incf	(loadFromEEPROM@byte_count+1)& (0+255),f,b
 13153                           
 13154                           ; BSR set to: 1
 13155  004AFC  51E6               	movf	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13156  004AFE  E104               	bnz	u57160
 13157  004B00                     L1:
 13158  004B00  0E4B               	movlw	75
 13159  004B02  5DE5               	subwf	loadFromEEPROM@byte_count& (0+255),w,b
 13160  004B04  A0D8               	btfss	status,0,c
 13161  004B06  D7E5               	goto	l4440
 13162  004B08                     u57160:
 13163  004B08                     l4441:
 13164                           
 13165                           ; BSR set to: 1
 13166                           ;eeprom.c: 70: }
 13167                           ;eeprom.c: 75: KEYBOARD_MODE = to_load[0];
 13168  004B08  C197  F0F2         	movff	loadFromEEPROM@to_load,_KEYBOARD_MODE
 13169                           
 13170                           ;eeprom.c: 76: which_mode = to_load[1];
 13171  004B0C  C198  F0F1         	movff	loadFromEEPROM@to_load+1,_which_mode
 13172                           
 13173                           ;eeprom.c: 77: which_triad = to_load[2];
 13174  004B10  C199  F0F0         	movff	loadFromEEPROM@to_load+2,_which_triad
 13175                           
 13176                           ;eeprom.c: 78: which_seventh = to_load[3];
 13177  004B14  C19A  F0EF         	movff	loadFromEEPROM@to_load+3,_which_seventh
 13178                           
 13179                           ;eeprom.c: 81: TRANSPOSE_MODE = to_load[4];
 13180  004B18  A19B               	btfss	(loadFromEEPROM@to_load+4)& (0+255),0,b
 13181  004B1A  D002               	goto	u57170
 13182  004B1C  8C04               	bsf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 13183  004B1E  D001               	goto	u57185
 13184  004B20                     u57170:
 13185  004B20  9C04               	bcf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 13186  004B22                     u57185:
 13187                           
 13188                           ;eeprom.c: 84: DRUM_MODE = to_load[5];
 13189  004B22  0101               	movlb	1	; () banked
 13190  004B24  A19C               	btfss	(loadFromEEPROM@to_load+5)& (0+255),0,b
 13191  004B26  D002               	goto	u57190
 13192  004B28  8A01               	bsf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 13193  004B2A  D001               	goto	u57205
 13194  004B2C                     u57190:
 13195  004B2C  9A01               	bcf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 13196  004B2E                     u57205:
 13197                           
 13198                           ;eeprom.c: 85: CONTROL_MODE = to_load[6];
 13199  004B2E  0101               	movlb	1	; () banked
 13200  004B30  A19D               	btfss	(loadFromEEPROM@to_load+6)& (0+255),0,b
 13201  004B32  D002               	goto	u57210
 13202  004B34  8801               	bsf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 13203  004B36  D001               	goto	u57225
 13204  004B38                     u57210:
 13205  004B38  9801               	bcf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 13206  004B3A                     u57225:
 13207                           
 13208                           ;eeprom.c: 88: DRUM_NOTE[0] = to_load[7];
 13209  004B3A  C19E  F1E7         	movff	loadFromEEPROM@to_load+7,_DRUM_NOTE
 13210                           
 13211                           ;eeprom.c: 89: DRUM_NOTE[1] = to_load[8];
 13212  004B3E  C19F  F1E8         	movff	loadFromEEPROM@to_load+8,_DRUM_NOTE+1
 13213                           
 13214                           ;eeprom.c: 90: DRUM_NOTE[2] = to_load[9];
 13215  004B42  C1A0  F1E9         	movff	loadFromEEPROM@to_load+9,_DRUM_NOTE+2
 13216                           
 13217                           ;eeprom.c: 91: DRUM_NOTE[3] = to_load[10];
 13218  004B46  C1A1  F1EA         	movff	loadFromEEPROM@to_load+10,_DRUM_NOTE+3
 13219                           
 13220                           ;eeprom.c: 92: DRUM_NOTE[4] = to_load[11];
 13221  004B4A  C1A2  F1EB         	movff	loadFromEEPROM@to_load+11,_DRUM_NOTE+4
 13222                           
 13223                           ;eeprom.c: 93: DRUM_NOTE[5] = to_load[12];
 13224  004B4E  C1A3  F1EC         	movff	loadFromEEPROM@to_load+12,_DRUM_NOTE+5
 13225                           
 13226                           ;eeprom.c: 94: DRUM_NOTE[6] = to_load[13];
 13227  004B52  C1A4  F1ED         	movff	loadFromEEPROM@to_load+13,_DRUM_NOTE+6
 13228                           
 13229                           ;eeprom.c: 95: DRUM_NOTE[7] = to_load[14];
 13230  004B56  C1A5  F1EE         	movff	loadFromEEPROM@to_load+14,_DRUM_NOTE+7
 13231                           
 13232                           ;eeprom.c: 98: DRUM_CC[0] = to_load[15];
 13233  004B5A  C1A6  F0F5         	movff	loadFromEEPROM@to_load+15,_DRUM_CC
 13234                           
 13235                           ;eeprom.c: 99: DRUM_CC[1] = to_load[16];
 13236  004B5E  C1A7  F0F6         	movff	loadFromEEPROM@to_load+16,_DRUM_CC+1
 13237                           
 13238                           ;eeprom.c: 100: DRUM_CC[2] = to_load[17];
 13239  004B62  C1A8  F0F7         	movff	loadFromEEPROM@to_load+17,_DRUM_CC+2
 13240                           
 13241                           ;eeprom.c: 101: DRUM_CC[3] = to_load[18];
 13242  004B66  C1A9  F0F8         	movff	loadFromEEPROM@to_load+18,_DRUM_CC+3
 13243                           
 13244                           ;eeprom.c: 102: DRUM_CC[4] = to_load[19];
 13245  004B6A  C1AA  F0F9         	movff	loadFromEEPROM@to_load+19,_DRUM_CC+4
 13246                           
 13247                           ;eeprom.c: 103: DRUM_CC[5] = to_load[20];
 13248  004B6E  C1AB  F0FA         	movff	loadFromEEPROM@to_load+20,_DRUM_CC+5
 13249                           
 13250                           ;eeprom.c: 104: DRUM_CC[6] = to_load[21];
 13251  004B72  C1AC  F0FB         	movff	loadFromEEPROM@to_load+21,_DRUM_CC+6
 13252                           
 13253                           ;eeprom.c: 105: DRUM_CC[7] = to_load[22];
 13254  004B76  C1AD  F0FC         	movff	loadFromEEPROM@to_load+22,_DRUM_CC+7
 13255                           
 13256                           ;eeprom.c: 108: POT_MODE = to_load[23];
 13257  004B7A  0101               	movlb	1	; () banked
 13258  004B7C  A1AE               	btfss	(loadFromEEPROM@to_load+23)& (0+255),0,b
 13259  004B7E  D002               	goto	u57230
 13260  004B80  8C05               	bsf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 13261  004B82  D001               	goto	u57245
 13262  004B84                     u57230:
 13263  004B84  9C05               	bcf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 13264  004B86                     u57245:
 13265                           
 13266                           ;eeprom.c: 111: inputPotsArray[0].controller_number = to_load[24];
 13267  004B86  C1AF  F289         	movff	loadFromEEPROM@to_load+24,_inputPotsArray+1
 13268                           
 13269                           ;eeprom.c: 112: inputPotsArray[0].controller_number_two_byte = to_load[25];
 13270  004B8A  C1B0  F28A         	movff	loadFromEEPROM@to_load+25,_inputPotsArray+2
 13271                           
 13272                           ;eeprom.c: 114: inputPotsArray[1].controller_number = to_load[26];
 13273  004B8E  C1B1  F28C         	movff	loadFromEEPROM@to_load+26,_inputPotsArray+4
 13274                           
 13275                           ;eeprom.c: 115: inputPotsArray[1].controller_number_two_byte = to_load[27];
 13276  004B92  C1B2  F28D         	movff	loadFromEEPROM@to_load+27,_inputPotsArray+5
 13277                           
 13278                           ;eeprom.c: 117: inputPotsArray[2].controller_number = to_load[28];
 13279  004B96  C1B3  F28F         	movff	loadFromEEPROM@to_load+28,_inputPotsArray+7
 13280                           
 13281                           ;eeprom.c: 118: inputPotsArray[2].controller_number_two_byte = to_load[29];
 13282  004B9A  C1B4  F290         	movff	loadFromEEPROM@to_load+29,_inputPotsArray+8
 13283                           
 13284                           ;eeprom.c: 120: inputPotsArray[3].controller_number = to_load[30];
 13285  004B9E  C1B5  F292         	movff	loadFromEEPROM@to_load+30,_inputPotsArray+10
 13286                           
 13287                           ;eeprom.c: 121: inputPotsArray[3].controller_number_two_byte = to_load[31];
 13288  004BA2  C1B6  F293         	movff	loadFromEEPROM@to_load+31,_inputPotsArray+11
 13289                           
 13290                           ;eeprom.c: 123: inputPotsArray[4].controller_number = to_load[32];
 13291  004BA6  C1B7  F295         	movff	loadFromEEPROM@to_load+32,_inputPotsArray+13
 13292                           
 13293                           ;eeprom.c: 124: inputPotsArray[4].controller_number_two_byte = to_load[33];
 13294  004BAA  C1B8  F296         	movff	loadFromEEPROM@to_load+33,_inputPotsArray+14
 13295                           
 13296                           ;eeprom.c: 126: inputPotsArray[5].controller_number = to_load[34];
 13297  004BAE  C1B9  F298         	movff	loadFromEEPROM@to_load+34,_inputPotsArray+16
 13298                           
 13299                           ;eeprom.c: 127: inputPotsArray[5].controller_number_two_byte = to_load[35];
 13300  004BB2  C1BA  F299         	movff	loadFromEEPROM@to_load+35,_inputPotsArray+17
 13301                           
 13302                           ;eeprom.c: 129: inputPotsArray[6].controller_number = to_load[36];
 13303  004BB6  C1BB  F29B         	movff	loadFromEEPROM@to_load+36,_inputPotsArray+19
 13304                           
 13305                           ;eeprom.c: 130: inputPotsArray[6].controller_number_two_byte = to_load[37];
 13306  004BBA  C1BC  F29C         	movff	loadFromEEPROM@to_load+37,_inputPotsArray+20
 13307                           
 13308                           ;eeprom.c: 134: inputPotsArray[7].controller_number = to_load[38];
 13309  004BBE  C1BD  F29E         	movff	loadFromEEPROM@to_load+38,_inputPotsArray+22
 13310                           
 13311                           ;eeprom.c: 135: inputPotsArray[7].controller_number_two_byte = to_load[39];
 13312  004BC2  C1BE  F29F         	movff	loadFromEEPROM@to_load+39,_inputPotsArray+23
 13313                           
 13314                           ;eeprom.c: 137: inputPotsArray[8].controller_number = to_load[40];
 13315  004BC6  C1BF  F2A1         	movff	loadFromEEPROM@to_load+40,_inputPotsArray+25
 13316                           
 13317                           ;eeprom.c: 138: inputPotsArray[8].controller_number_two_byte = to_load[41];
 13318  004BCA  C1C0  F2A2         	movff	loadFromEEPROM@to_load+41,_inputPotsArray+26
 13319                           
 13320                           ;eeprom.c: 140: inputPotsArray[9].controller_number = to_load[42];
 13321  004BCE  C1C1  F2A4         	movff	loadFromEEPROM@to_load+42,_inputPotsArray+28
 13322                           
 13323                           ;eeprom.c: 141: inputPotsArray[9].controller_number_two_byte = to_load[43];
 13324  004BD2  C1C2  F2A5         	movff	loadFromEEPROM@to_load+43,_inputPotsArray+29
 13325                           
 13326                           ;eeprom.c: 143: inputPotsArray[10].controller_number = to_load[44];
 13327  004BD6  C1C3  F2A7         	movff	loadFromEEPROM@to_load+44,_inputPotsArray+31
 13328                           
 13329                           ;eeprom.c: 144: inputPotsArray[10].controller_number_two_byte = to_load[45];
 13330  004BDA  C1C4  F2A8         	movff	loadFromEEPROM@to_load+45,_inputPotsArray+32
 13331                           
 13332                           ;eeprom.c: 146: inputPotsArray[11].controller_number = to_load[46];
 13333  004BDE  C1C5  F2AA         	movff	loadFromEEPROM@to_load+46,_inputPotsArray+34
 13334                           
 13335                           ;eeprom.c: 147: inputPotsArray[11].controller_number_two_byte = to_load[47];
 13336  004BE2  C1C6  F2AB         	movff	loadFromEEPROM@to_load+47,_inputPotsArray+35
 13337                           
 13338                           ;eeprom.c: 149: inputPotsArray[12].controller_number = to_load[48];
 13339  004BE6  C1C7  F2AD         	movff	loadFromEEPROM@to_load+48,_inputPotsArray+37
 13340                           
 13341                           ;eeprom.c: 150: inputPotsArray[12].controller_number_two_byte = to_load[49];
 13342  004BEA  C1C8  F2AE         	movff	loadFromEEPROM@to_load+49,_inputPotsArray+38
 13343                           
 13344                           ;eeprom.c: 152: inputPotsArray[13].controller_number = to_load[50];
 13345  004BEE  C1C9  F2B0         	movff	loadFromEEPROM@to_load+50,_inputPotsArray+40
 13346                           
 13347                           ;eeprom.c: 153: inputPotsArray[13].controller_number_two_byte = to_load[51];
 13348  004BF2  C1CA  F2B1         	movff	loadFromEEPROM@to_load+51,_inputPotsArray+41
 13349                           
 13350                           ;eeprom.c: 155: inputPotsArray[14].controller_number = to_load[52];
 13351  004BF6  C1CB  F2B3         	movff	loadFromEEPROM@to_load+52,_inputPotsArray+43
 13352                           
 13353                           ;eeprom.c: 156: inputPotsArray[14].controller_number_two_byte = to_load[53];
 13354  004BFA  C1CC  F2B4         	movff	loadFromEEPROM@to_load+53,_inputPotsArray+44
 13355                           
 13356                           ;eeprom.c: 158: inputPotsArray[15].controller_number = to_load[54];
 13357  004BFE  C1CD  F2B6         	movff	loadFromEEPROM@to_load+54,_inputPotsArray+46
 13358                           
 13359                           ;eeprom.c: 159: inputPotsArray[15].controller_number_two_byte = to_load[55];
 13360  004C02  C1CE  F2B7         	movff	loadFromEEPROM@to_load+55,_inputPotsArray+47
 13361                           
 13362                           ;eeprom.c: 163: channel = to_load[56];
 13363  004C06  C1CF  F03E         	movff	loadFromEEPROM@to_load+56,_channel
 13364                           
 13365                           ;eeprom.c: 164: drumchannel = to_load[57];
 13366  004C0A  C1D0  F052         	movff	loadFromEEPROM@to_load+57,_drumchannel
 13367                           
 13368                           ;eeprom.c: 167: octave = to_load[58];
 13369  004C0E  C1D1  F050         	movff	loadFromEEPROM@to_load+58,_octave
 13370                           
 13371                           ;eeprom.c: 168: semitone = to_load[59];
 13372  004C12  C1D2  F03B         	movff	loadFromEEPROM@to_load+59,_semitone
 13373                           
 13374                           ;eeprom.c: 171: patch_number = to_load[60];
 13375  004C16  C1D3  F0F3         	movff	loadFromEEPROM@to_load+60,_patch_number
 13376                           
 13377                           ;eeprom.c: 174: ARPEGGIO_ON = to_load[61];
 13378  004C1A  0101               	movlb	1	; () banked
 13379  004C1C  A1D4               	btfss	(loadFromEEPROM@to_load+61)& (0+255),0,b
 13380  004C1E  D002               	goto	u57250
 13381  004C20  8804               	bsf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 13382  004C22  D001               	goto	u57265
 13383  004C24                     u57250:
 13384  004C24  9804               	bcf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 13385  004C26                     u57265:
 13386                           
 13387                           ;eeprom.c: 175: BPM = to_load[62];
 13388  004C26  C1D5  F0FF         	movff	loadFromEEPROM@to_load+62,_BPM
 13389                           
 13390                           ;eeprom.c: 177: TIMER_PRELOAD = calculate_pulse_length();
 13391  004C2A  ECA4  F02E         	call	_calculate_pulse_length	;wreg free
 13392  004C2E  C0C2  F17B         	movff	?_calculate_pulse_length,_TIMER_PRELOAD
 13393  004C32  C0C3  F17C         	movff	?_calculate_pulse_length+1,_TIMER_PRELOAD+1
 13394                           
 13395                           ;eeprom.c: 179: OCTAVES = to_load[63];
 13396  004C36  C1D6  F04E         	movff	loadFromEEPROM@to_load+63,_OCTAVES
 13397                           
 13398                           ;eeprom.c: 180: ARPEGGIO_TYPE = to_load[64];
 13399  004C3A  C1D7  F035         	movff	loadFromEEPROM@to_load+64,_ARPEGGIO_TYPE
 13400                           
 13401                           ;eeprom.c: 181: NOTE_LENGTH_PULSES = to_load[65];
 13402  004C3E  C1D8  F04D         	movff	loadFromEEPROM@to_load+65,_NOTE_LENGTH_PULSES
 13403                           
 13404                           ;eeprom.c: 182: LATCH = to_load[66];
 13405  004C42  0101               	movlb	1	; () banked
 13406  004C44  A1D9               	btfss	(loadFromEEPROM@to_load+66)& (0+255),0,b
 13407  004C46  D002               	goto	u57270
 13408  004C48  8204               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 13409  004C4A  D001               	goto	u57285
 13410  004C4C                     u57270:
 13411  004C4C  9204               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
 13412  004C4E                     u57285:
 13413                           
 13414                           ;eeprom.c: 183: AUTO_LATCH = to_load[67];
 13415  004C4E  0101               	movlb	1	; () banked
 13416  004C50  A1DA               	btfss	(loadFromEEPROM@to_load+67)& (0+255),0,b
 13417  004C52  D002               	goto	u57290
 13418  004C54  8E03               	bsf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 13419  004C56  D001               	goto	u57305
 13420  004C58                     u57290:
 13421  004C58  9E03               	bcf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 13422  004C5A                     u57305:
 13423                           
 13424                           ;eeprom.c: 184: UN_LATCH_MODE = to_load[68];
 13425  004C5A  0101               	movlb	1	; () banked
 13426  004C5C  A1DB               	btfss	(loadFromEEPROM@to_load+68)& (0+255),0,b
 13427  004C5E  D002               	goto	u57310
 13428  004C60  8004               	bsf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 13429  004C62  D001               	goto	u57325
 13430  004C64                     u57310:
 13431  004C64  9004               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 13432  004C66                     u57325:
 13433                           
 13434                           ;eeprom.c: 185: AUTO_RANDOMIZE = to_load[69];
 13435  004C66  0101               	movlb	1	; () banked
 13436  004C68  A1DC               	btfss	(loadFromEEPROM@to_load+69)& (0+255),0,b
 13437  004C6A  D002               	goto	u57330
 13438  004C6C  8A03               	bsf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 13439  004C6E  D001               	goto	u57345
 13440  004C70                     u57330:
 13441  004C70  9A03               	bcf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 13442  004C72                     u57345:
 13443                           
 13444                           ;eeprom.c: 186: skipFirstLast = to_load[70];
 13445  004C72  0101               	movlb	1	; () banked
 13446  004C74  A1DD               	btfss	(loadFromEEPROM@to_load+70)& (0+255),0,b
 13447  004C76  D002               	goto	u57350
 13448  004C78  8803               	bsf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 13449  004C7A  D001               	goto	u57365
 13450  004C7C                     u57350:
 13451  004C7C  9803               	bcf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 13452  004C7E                     u57365:
 13453                           
 13454                           ;eeprom.c: 187: LAST_NOTE_MODE_KEY_PRESS = to_load[71];
 13455  004C7E  0101               	movlb	1	; () banked
 13456  004C80  A1DE               	btfss	(loadFromEEPROM@to_load+71)& (0+255),0,b
 13457  004C82  D002               	goto	u57370
 13458  004C84  8403               	bsf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 13459  004C86  D001               	goto	u57385
 13460  004C88                     u57370:
 13461  004C88  9403               	bcf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 13462  004C8A                     u57385:
 13463                           
 13464                           ;eeprom.c: 188: LAST_NOTE_MODE_KEY_RELEASE = to_load[72];
 13465  004C8A  0101               	movlb	1	; () banked
 13466  004C8C  A1DF               	btfss	(loadFromEEPROM@to_load+72)& (0+255),0,b
 13467  004C8E  D002               	goto	u57390
 13468  004C90  8203               	bsf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 13469  004C92  D001               	goto	u57405
 13470  004C94                     u57390:
 13471  004C94  9203               	bcf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 13472  004C96                     u57405:
 13473                           
 13474                           ;eeprom.c: 189: LAST_NOTE_MODE_TRANSPOSE = to_load[73];
 13475  004C96  0101               	movlb	1	; () banked
 13476  004C98  A1E0               	btfss	(loadFromEEPROM@to_load+73)& (0+255),0,b
 13477  004C9A  D002               	goto	u57410
 13478  004C9C  8003               	bsf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 13479  004C9E  D001               	goto	u57425
 13480  004CA0                     u57410:
 13481  004CA0  9003               	bcf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 13482  004CA2                     u57425:
 13483                           
 13484                           ;eeprom.c: 190: LAST_NOTE_MODE_RESET = to_load[74];
 13485  004CA2  0101               	movlb	1	; () banked
 13486  004CA4  A1E1               	btfss	(loadFromEEPROM@to_load+74)& (0+255),0,b
 13487  004CA6  D002               	goto	u57430
 13488  004CA8  8E02               	bsf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 13489  004CAA  0012               	return	
 13490  004CAC                     u57430:
 13491  004CAC  9E02               	bcf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 13492  004CAE  0012               	return		;funcret
 13493  004CB0                     __end_of_loadFromEEPROM:
 13494                           	opt stack 0
 13495                           tblptru	equ	0xFF8
 13496                           tblptrh	equ	0xFF7
 13497                           tblptrl	equ	0xFF6
 13498                           tablat	equ	0xFF5
 13499                           prodh	equ	0xFF4
 13500                           prodl	equ	0xFF3
 13501                           intcon	equ	0xFF2
 13502                           intcon2	equ	0xFF1
 13503                           postinc0	equ	0xFEE
 13504                           wreg	equ	0xFE8
 13505                           postinc1	equ	0xFE6
 13506                           indf2	equ	0xFDF
 13507                           postinc2	equ	0xFDE
 13508                           postdec2	equ	0xFDD
 13509                           fsr2h	equ	0xFDA
 13510                           fsr2l	equ	0xFD9
 13511                           status	equ	0xFD8
 13512                           
 13513 ;; *************** function _calculate_pulse_length *****************
 13514 ;; Defined at:
 13515 ;;		line 150 in file "arpeggio.c"
 13516 ;; Parameters:    Size  Location     Type
 13517 ;;		None
 13518 ;; Auto vars:     Size  Location     Type
 13519 ;;  s_tick          4  100[BANK0 ] void 
 13520 ;; Return value:  Size  Location     Type
 13521 ;;                  2   98[BANK0 ] unsigned short 
 13522 ;; Registers used:
 13523 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13524 ;; Tracked objects:
 13525 ;;		On entry : 0/0
 13526 ;;		On exit  : 0/0
 13527 ;;		Unchanged: 0/0
 13528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13529 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13530 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13532 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13533 ;;Total ram usage:       10 bytes
 13534 ;; Hardware stack levels used:    1
 13535 ;; Hardware stack levels required when called:    6
 13536 ;; This function calls:
 13537 ;;		___fladd
 13538 ;;		___fldiv
 13539 ;;		___flmul
 13540 ;;		___flneg
 13541 ;;		___fltol
 13542 ;;		___xxtofl
 13543 ;; This function is called by:
 13544 ;;		_Function_H_2
 13545 ;;		_loadFromEEPROM
 13546 ;;		_main
 13547 ;; This function uses a non-reentrant model
 13548 ;;
 13549                           
 13550                           	psect	text31
 13551  005D48                     __ptext31:
 13552                           	opt stack 0
 13553  005D48                     _calculate_pulse_length:
 13554                           	opt stack 22
 13555                           
 13556                           ;arpeggio.c: 157: double s_tick = 1.0 / ((BPM * PPQN) / 60.0);
 13557                           
 13558                           ;incstack = 0
 13559  005D48  0E00               	movlw	0
 13560  005D4A  0100               	movlb	0	; () banked
 13561  005D4C  6F8B               	movwf	___fldiv@a& (0+255),b
 13562  005D4E  0E00               	movlw	0
 13563  005D50  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 13564  005D52  0E70               	movlw	112
 13565  005D54  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 13566  005D56  0E42               	movlw	66
 13567  005D58  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 13568  005D5A  51FF               	movf	_BPM& (0+255),w,b
 13569  005D5C  0101               	movlb	1	; () banked
 13570  005D5E  03F6               	mulwf	_PPQN& (0+255),b
 13571  005D60  CFF3 F060          	movff	prodl,___xxtofl@val
 13572  005D64  CFF4 F061          	movff	prodh,___xxtofl@val+1
 13573  005D68  0100               	movlb	0	; () banked
 13574  005D6A  0E00               	movlw	0
 13575  005D6C  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 13576  005D6E  0EFF               	movlw	-1
 13577  005D70  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 13578  005D72  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 13579  005D74  0E01               	movlw	1
 13580  005D76  EC57  F02F         	call	___xxtofl
 13581  005D7A  C060  F087         	movff	?___xxtofl,___fldiv@b
 13582  005D7E  C061  F088         	movff	?___xxtofl+1,___fldiv@b+1
 13583  005D82  C062  F089         	movff	?___xxtofl+2,___fldiv@b+2
 13584  005D86  C063  F08A         	movff	?___xxtofl+3,___fldiv@b+3
 13585  005D8A  EC82  F01D         	call	___fldiv	;wreg free
 13586  005D8E  C087  F0C8         	movff	?___fldiv,_calculate_pulse_length$5900
 13587  005D92  C088  F0C9         	movff	?___fldiv+1,_calculate_pulse_length$5900+1
 13588  005D96  C089  F0CA         	movff	?___fldiv+2,_calculate_pulse_length$5900+2
 13589  005D9A  C08A  F0CB         	movff	?___fldiv+3,_calculate_pulse_length$5900+3
 13590                           
 13591                           ;arpeggio.c: 157: double s_tick = 1.0 / ((BPM * PPQN) / 60.0);
 13592  005D9E  0E00               	movlw	0
 13593  005DA0  0100               	movlb	0	; () banked
 13594  005DA2  6F87               	movwf	___fldiv@b& (0+255),b
 13595  005DA4  0E00               	movlw	0
 13596  005DA6  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 13597  005DA8  0E80               	movlw	128
 13598  005DAA  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 13599  005DAC  0E3F               	movlw	63
 13600  005DAE  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 13601  005DB0  C0C8  F08B         	movff	_calculate_pulse_length$5900,___fldiv@a
 13602  005DB4  C0C9  F08C         	movff	_calculate_pulse_length$5900+1,___fldiv@a+1
 13603  005DB8  C0CA  F08D         	movff	_calculate_pulse_length$5900+2,___fldiv@a+2
 13604  005DBC  C0CB  F08E         	movff	_calculate_pulse_length$5900+3,___fldiv@a+3
 13605  005DC0  EC82  F01D         	call	___fldiv	;wreg free
 13606  005DC4  C087  F0C4         	movff	?___fldiv,calculate_pulse_length@s_tick
 13607  005DC8  C088  F0C5         	movff	?___fldiv+1,calculate_pulse_length@s_tick+1
 13608  005DCC  C089  F0C6         	movff	?___fldiv+2,calculate_pulse_length@s_tick+2
 13609  005DD0  C08A  F0C7         	movff	?___fldiv+3,calculate_pulse_length@s_tick+3
 13610                           
 13611                           ;arpeggio.c: 158: return (unsigned short) ((65535.0 - (s_tick * 20000000.0) / ( 4.0 * PR
      +                          ESCALER)) + 0.5);
 13612  005DD4  0E80               	movlw	128
 13613  005DD6  0100               	movlb	0	; () banked
 13614  005DD8  6FA8               	movwf	___fladd@a& (0+255),b
 13615  005DDA  0EFF               	movlw	255
 13616  005DDC  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 13617  005DDE  0E7F               	movlw	127
 13618  005DE0  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 13619  005DE2  0E47               	movlw	71
 13620  005DE4  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 13621  005DE6  0E00               	movlw	0
 13622  005DE8  6F72               	movwf	___flmul@a& (0+255),b
 13623  005DEA  0E00               	movlw	0
 13624  005DEC  6F73               	movwf	(___flmul@a+1)& (0+255),b
 13625  005DEE  0E80               	movlw	128
 13626  005DF0  6F74               	movwf	(___flmul@a+2)& (0+255),b
 13627  005DF2  0E40               	movlw	64
 13628  005DF4  6F75               	movwf	(___flmul@a+3)& (0+255),b
 13629  005DF6  0101               	movlb	1	; () banked
 13630  005DF8  51F5               	movf	_PRESCALER& (0+255),w,b
 13631  005DFA  0100               	movlb	0	; () banked
 13632  005DFC  6F60               	movwf	___xxtofl@val& (0+255),b
 13633  005DFE  6B61               	clrf	(___xxtofl@val+1)& (0+255),b
 13634  005E00  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 13635  005E02  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 13636  005E04  0E00               	movlw	0
 13637  005E06  EC57  F02F         	call	___xxtofl
 13638  005E0A  C060  F06E         	movff	?___xxtofl,___flmul@b
 13639  005E0E  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 13640  005E12  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 13641  005E16  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 13642  005E1A  EC57  F017         	call	___flmul	;wreg free
 13643  005E1E  C06E  F08B         	movff	?___flmul,___fldiv@a
 13644  005E22  C06F  F08C         	movff	?___flmul+1,___fldiv@a+1
 13645  005E26  C070  F08D         	movff	?___flmul+2,___fldiv@a+2
 13646  005E2A  C071  F08E         	movff	?___flmul+3,___fldiv@a+3
 13647  005E2E  0E80               	movlw	128
 13648  005E30  0100               	movlb	0	; () banked
 13649  005E32  6F72               	movwf	___flmul@a& (0+255),b
 13650  005E34  0E96               	movlw	150
 13651  005E36  6F73               	movwf	(___flmul@a+1)& (0+255),b
 13652  005E38  0E98               	movlw	152
 13653  005E3A  6F74               	movwf	(___flmul@a+2)& (0+255),b
 13654  005E3C  0E4B               	movlw	75
 13655  005E3E  6F75               	movwf	(___flmul@a+3)& (0+255),b
 13656  005E40  C0C4  F06E         	movff	calculate_pulse_length@s_tick,___flmul@b
 13657  005E44  C0C5  F06F         	movff	calculate_pulse_length@s_tick+1,___flmul@b+1
 13658  005E48  C0C6  F070         	movff	calculate_pulse_length@s_tick+2,___flmul@b+2
 13659  005E4C  C0C7  F071         	movff	calculate_pulse_length@s_tick+3,___flmul@b+3
 13660  005E50  EC57  F017         	call	___flmul	;wreg free
 13661  005E54  C06E  F087         	movff	?___flmul,___fldiv@b
 13662  005E58  C06F  F088         	movff	?___flmul+1,___fldiv@b+1
 13663  005E5C  C070  F089         	movff	?___flmul+2,___fldiv@b+2
 13664  005E60  C071  F08A         	movff	?___flmul+3,___fldiv@b+3
 13665  005E64  EC82  F01D         	call	___fldiv	;wreg free
 13666  005E68  C087  F0A0         	movff	?___fldiv,___flneg@f1
 13667  005E6C  C088  F0A1         	movff	?___fldiv+1,___flneg@f1+1
 13668  005E70  C089  F0A2         	movff	?___fldiv+2,___flneg@f1+2
 13669  005E74  C08A  F0A3         	movff	?___fldiv+3,___flneg@f1+3
 13670  005E78  EC0C  F04B         	call	___flneg	;wreg free
 13671  005E7C  C0A0  F0A4         	movff	?___flneg,___fladd@b
 13672  005E80  C0A1  F0A5         	movff	?___flneg+1,___fladd@b+1
 13673  005E84  C0A2  F0A6         	movff	?___flneg+2,___fladd@b+2
 13674  005E88  C0A3  F0A7         	movff	?___flneg+3,___fladd@b+3
 13675  005E8C  EC00  F019         	call	___fladd	;wreg free
 13676  005E90  C0A4  F0B8         	movff	?___fladd,___fltol@f1
 13677  005E94  C0A5  F0B9         	movff	?___fladd+1,___fltol@f1+1
 13678  005E98  C0A6  F0BA         	movff	?___fladd+2,___fltol@f1+2
 13679  005E9C  C0A7  F0BB         	movff	?___fladd+3,___fltol@f1+3
 13680  005EA0  EC21  F037         	call	___fltol	;wreg free
 13681  005EA4  C0B8  F0C2         	movff	?___fltol,?_calculate_pulse_length
 13682  005EA8  C0B9  F0C3         	movff	?___fltol+1,?_calculate_pulse_length+1
 13683  005EAC  0012               	return	
 13684  005EAE                     __end_of_calculate_pulse_length:
 13685                           	opt stack 0
 13686                           tblptru	equ	0xFF8
 13687                           tblptrh	equ	0xFF7
 13688                           tblptrl	equ	0xFF6
 13689                           tablat	equ	0xFF5
 13690                           prodh	equ	0xFF4
 13691                           prodl	equ	0xFF3
 13692                           intcon	equ	0xFF2
 13693                           intcon2	equ	0xFF1
 13694                           postinc0	equ	0xFEE
 13695                           wreg	equ	0xFE8
 13696                           postinc1	equ	0xFE6
 13697                           indf2	equ	0xFDF
 13698                           postinc2	equ	0xFDE
 13699                           postdec2	equ	0xFDD
 13700                           fsr2h	equ	0xFDA
 13701                           fsr2l	equ	0xFD9
 13702                           status	equ	0xFD8
 13703                           
 13704 ;; *************** function _exitLoad *****************
 13705 ;; Defined at:
 13706 ;;		line 285 in file "menu.c"
 13707 ;; Parameters:    Size  Location     Type
 13708 ;;		None
 13709 ;; Auto vars:     Size  Location     Type
 13710 ;;		None
 13711 ;; Return value:  Size  Location     Type
 13712 ;;                  1    wreg      void 
 13713 ;; Registers used:
 13714 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13715 ;; Tracked objects:
 13716 ;;		On entry : 0/0
 13717 ;;		On exit  : 0/0
 13718 ;;		Unchanged: 0/0
 13719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13722 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13723 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13724 ;;Total ram usage:        2 bytes
 13725 ;; Hardware stack levels used:    1
 13726 ;; Hardware stack levels required when called:    9
 13727 ;; This function calls:
 13728 ;;		_Lcd_Print_String
 13729 ;;		_clear_row1
 13730 ;; This function is called by:
 13731 ;;		_Function_G_2
 13732 ;; This function uses a non-reentrant model
 13733 ;;
 13734                           
 13735                           	psect	text32
 13736  009498                     __ptext32:
 13737                           	opt stack 0
 13738  009498                     _exitLoad:
 13739                           	opt stack 18
 13740                           
 13741                           ;menu.c: 287: while(encoder_click == 0);
 13742                           
 13743                           ;incstack = 0
 13744  009498  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 13745  00949A  D7FE               	goto	_exitLoad
 13746                           
 13747                           ;menu.c: 293: clear_row1();
 13748  00949C  EC7B  F04B         	call	_clear_row1	;wreg free
 13749                           
 13750                           ;menu.c: 294: Lcd_Print_String("Settings Loaded!");
 13751  0094A0  0E75               	movlw	low STR_22
 13752  0094A2  0100               	movlb	0	; () banked
 13753  0094A4  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 13754  0094A6  0EFD               	movlw	high STR_22
 13755  0094A8  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 13756  0094AA  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 13757                           
 13758                           ;menu.c: 295: _delay((unsigned long)((500)*(20000000/4000.0)));
 13759  0094AE  0E0D               	movlw	13
 13760  0094B0  0100               	movlb	0	; () banked
 13761  0094B2  6F6F               	movwf	(??_exitLoad+1)& (0+255),b
 13762  0094B4  0EAF               	movlw	175
 13763  0094B6  6F6E               	movwf	??_exitLoad& (0+255),b
 13764  0094B8  0EB6               	movlw	182
 13765  0094BA                     u67007:
 13766  0094BA  2EE8               	decfsz	wreg,f,c
 13767  0094BC  D7FE               	bra	u67007
 13768  0094BE  2F6E               	decfsz	??_exitLoad& (0+255),f,b
 13769  0094C0  D7FC               	bra	u67007
 13770  0094C2  2F6F               	decfsz	(??_exitLoad+1)& (0+255),f,b
 13771  0094C4  D7FA               	bra	u67007
 13772  0094C6  F000               	nop	
 13773                           
 13774                           ;menu.c: 296: which_screen = MAIN_MENU;
 13775  0094C8  0E02               	movlw	2
 13776  0094CA  6E4F               	movwf	_which_screen,c
 13777                           
 13778                           ;menu.c: 297: lcd_print_once = 0;
 13779  0094CC  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13780                           
 13781                           ;menu.c: 298: encoder_click = 0;
 13782  0094CE  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 13783  0094D0  0012               	return		;funcret
 13784  0094D2                     __end_of_exitLoad:
 13785                           	opt stack 0
 13786                           tblptru	equ	0xFF8
 13787                           tblptrh	equ	0xFF7
 13788                           tblptrl	equ	0xFF6
 13789                           tablat	equ	0xFF5
 13790                           prodh	equ	0xFF4
 13791                           prodl	equ	0xFF3
 13792                           intcon	equ	0xFF2
 13793                           intcon2	equ	0xFF1
 13794                           postinc0	equ	0xFEE
 13795                           wreg	equ	0xFE8
 13796                           postinc1	equ	0xFE6
 13797                           indf2	equ	0xFDF
 13798                           postinc2	equ	0xFDE
 13799                           postdec2	equ	0xFDD
 13800                           fsr2h	equ	0xFDA
 13801                           fsr2l	equ	0xFD9
 13802                           status	equ	0xFD8
 13803                           
 13804 ;; *************** function _Function_G_1 *****************
 13805 ;; Defined at:
 13806 ;;		line 1057 in file "menu.c"
 13807 ;; Parameters:    Size  Location     Type
 13808 ;;		None
 13809 ;; Auto vars:     Size  Location     Type
 13810 ;;		None
 13811 ;; Return value:  Size  Location     Type
 13812 ;;                  1    wreg      void 
 13813 ;; Registers used:
 13814 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13815 ;; Tracked objects:
 13816 ;;		On entry : 0/0
 13817 ;;		On exit  : 0/0
 13818 ;;		Unchanged: 0/0
 13819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13824 ;;Total ram usage:        0 bytes
 13825 ;; Hardware stack levels used:    1
 13826 ;; Hardware stack levels required when called:   16
 13827 ;; This function calls:
 13828 ;;		_Busy_eep
 13829 ;;		_Lcd_Print_String
 13830 ;;		_Write_b_eep
 13831 ;;		___lbmod
 13832 ;;		___wmul
 13833 ;;		_clear_row1
 13834 ;;		_clear_row2
 13835 ;;		_eepromExit
 13836 ;;		_exitSave
 13837 ;;		_saveToEEPROM
 13838 ;;		_un_block_code
 13839 ;; This function is called by:
 13840 ;;		_Function_G
 13841 ;; This function uses a non-reentrant model
 13842 ;;
 13843                           
 13844                           	psect	text33
 13845  007CE0                     __ptext33:
 13846                           	opt stack 0
 13847  007CE0                     _Function_G_1:
 13848                           	opt stack 12
 13849                           
 13850                           ;menu.c: 1059: which_screen = SAVES_MENU;
 13851                           
 13852                           ;incstack = 0
 13853  007CE0  0E17               	movlw	23
 13854  007CE2  6E4F               	movwf	_which_screen,c
 13855                           
 13856                           ;menu.c: 1060: encoder_click = 0;
 13857  007CE4  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 13858                           
 13859                           ;menu.c: 1061: lcd_print_once = 0;
 13860  007CE6  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13861                           
 13862                           ;menu.c: 1063: while(encoder_click == 0) {
 13863  007CE8  D02C               	goto	l3720
 13864  007CEA                     
 13865                           ;menu.c: 1067: un_block_code();
 13866  007CEA  EC10  F04C         	call	_un_block_code	;wreg free
 13867                           
 13868                           ;menu.c: 1069: if (lcd_print_once == 0) {
 13869  007CEE  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13870  007CF0  D027               	goto	l3722
 13871                           
 13872                           ;menu.c: 1070: clear_row1();
 13873  007CF2  EC7B  F04B         	call	_clear_row1	;wreg free
 13874                           
 13875                           ;menu.c: 1071: Lcd_Print_String("Save #:");
 13876  007CF6  0EBB               	movlw	low STR_35
 13877  007CF8  0100               	movlb	0	; () banked
 13878  007CFA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 13879  007CFC  0EFF               	movlw	high STR_35
 13880  007CFE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 13881  007D00  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 13882                           
 13883                           ;menu.c: 1072: clear_row2();
 13884  007D04  EC67  F04B         	call	_clear_row2	;wreg free
 13885                           
 13886                           ;menu.c: 1073: Lcd_Print_String(LCD_STRINGS[(savesMenu.selector % savesMenu.number) + sa
      +                          vesMenu.address]);
 13887  007D08  0100               	movlb	0	; () banked
 13888  007D0A  51E2               	movf	_savesMenu& (0+255),w,b
 13889  007D0C  6EE6               	movwf	postinc1,c
 13890  007D0E  51E4               	movf	(_savesMenu+2)& (0+255),w,b
 13891  007D10  6EE6               	movwf	postinc1,c
 13892  007D12  ECC6  F040         	call	___lbmod	;wreg free
 13893  007D16  503F               	movf	btemp,w,c
 13894  007D18  0100               	movlb	0	; () banked
 13895  007D1A  25E3               	addwf	(_savesMenu+1)& (0+255),w,b
 13896  007D1C  6F60               	movwf	___wmul@multiplier& (0+255),b
 13897  007D1E  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 13898  007D20  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 13899  007D22  0E00               	movlw	0
 13900  007D24  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13901  007D26  0E11               	movlw	17
 13902  007D28  6F62               	movwf	___wmul@multiplicand& (0+255),b
 13903  007D2A  EC8F  F04B         	call	___wmul	;wreg free
 13904  007D2E  0E9E               	movlw	low _LCD_STRINGS
 13905  007D30  0100               	movlb	0	; () banked
 13906  007D32  2560               	addwf	?___wmul& (0+255),w,b
 13907  007D34  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 13908  007D36  0EF3               	movlw	high _LCD_STRINGS
 13909  007D38  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 13910  007D3A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 13911  007D3C  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 13912  007D40                     l3722:
 13913                           
 13914                           ;menu.c: 1074: }
 13915                           ;menu.c: 1075: lcd_print_once = 1;
 13916  007D40  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13917  007D42                     l3720:
 13918  007D42  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 13919  007D44  D7D2               	goto	l3721
 13920                           
 13921                           ;menu.c: 1076: }
 13922                           ;menu.c: 1078: if(savesMenu.selector == 4){eepromExit();}
 13923  007D46  0E04               	movlw	4
 13924  007D48  0100               	movlb	0	; () banked
 13925  007D4A  19E4               	xorwf	(_savesMenu+2)& (0+255),w,b
 13926  007D4C  A4D8               	btfss	status,2,c
 13927  007D4E  D003               	goto	l3724
 13928                           
 13929                           ; BSR set to: 0
 13930  007D50  EC86  F04A         	call	_eepromExit	;wreg free
 13931  007D54  D011               	goto	l3725
 13932  007D56                     l3724:
 13933                           
 13934                           ;menu.c: 1079: else {
 13935                           ;menu.c: 1081: (Busy_eep(), Write_b_eep(0,(savesMenu.selector + 1)));
 13936  007D56  EC5F  F04C         	call	_Busy_eep	;wreg free
 13937  007D5A  0E00               	movlw	0
 13938  007D5C  0100               	movlb	0	; () banked
 13939  007D5E  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 13940  007D60  0E00               	movlw	0
 13941  007D62  6F60               	movwf	Write_b_eep@badd& (0+255),b
 13942  007D64  29E4               	incf	(_savesMenu+2)& (0+255),w,b
 13943  007D66  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 13944  007D68  ECD1  F049         	call	_Write_b_eep	;wreg free
 13945                           
 13946                           ;menu.c: 1082: saveToEEPROM(savesMenu.selector + 1);
 13947  007D6C  0100               	movlb	0	; () banked
 13948  007D6E  29E4               	incf	(_savesMenu+2)& (0+255),w,b
 13949  007D70  EC59  F027         	call	_saveToEEPROM
 13950                           
 13951                           ;menu.c: 1083: exitSave();
 13952  007D74  EC69  F04A         	call	_exitSave	;wreg free
 13953  007D78                     l3725:
 13954                           
 13955                           ;menu.c: 1084: }
 13956                           ;menu.c: 1086: savesMenu.selector = 0;
 13957  007D78  0E00               	movlw	0
 13958  007D7A  0100               	movlb	0	; () banked
 13959  007D7C  6FE4               	movwf	(_savesMenu+2)& (0+255),b
 13960                           
 13961                           ; BSR set to: 0
 13962  007D7E  0012               	return		;funcret
 13963  007D80                     __end_of_Function_G_1:
 13964                           	opt stack 0
 13965                           tblptru	equ	0xFF8
 13966                           tblptrh	equ	0xFF7
 13967                           tblptrl	equ	0xFF6
 13968                           tablat	equ	0xFF5
 13969                           prodh	equ	0xFF4
 13970                           prodl	equ	0xFF3
 13971                           intcon	equ	0xFF2
 13972                           intcon2	equ	0xFF1
 13973                           postinc0	equ	0xFEE
 13974                           wreg	equ	0xFE8
 13975                           postinc1	equ	0xFE6
 13976                           indf2	equ	0xFDF
 13977                           postinc2	equ	0xFDE
 13978                           postdec2	equ	0xFDD
 13979                           fsr2h	equ	0xFDA
 13980                           fsr2l	equ	0xFD9
 13981                           status	equ	0xFD8
 13982                           
 13983 ;; *************** function _exitSave *****************
 13984 ;; Defined at:
 13985 ;;		line 265 in file "menu.c"
 13986 ;; Parameters:    Size  Location     Type
 13987 ;;		None
 13988 ;; Auto vars:     Size  Location     Type
 13989 ;;		None
 13990 ;; Return value:  Size  Location     Type
 13991 ;;                  1    wreg      void 
 13992 ;; Registers used:
 13993 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13994 ;; Tracked objects:
 13995 ;;		On entry : 0/0
 13996 ;;		On exit  : 0/0
 13997 ;;		Unchanged: 0/0
 13998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14001 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14002 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14003 ;;Total ram usage:        2 bytes
 14004 ;; Hardware stack levels used:    1
 14005 ;; Hardware stack levels required when called:    9
 14006 ;; This function calls:
 14007 ;;		_Lcd_Print_String
 14008 ;;		_clear_row1
 14009 ;; This function is called by:
 14010 ;;		_Function_G_1
 14011 ;; This function uses a non-reentrant model
 14012 ;;
 14013                           
 14014                           	psect	text34
 14015  0094D2                     __ptext34:
 14016                           	opt stack 0
 14017  0094D2                     _exitSave:
 14018                           	opt stack 18
 14019                           
 14020                           ;menu.c: 267: while(encoder_click == 0);
 14021                           
 14022                           ; BSR set to: 0
 14023                           ;incstack = 0
 14024  0094D2  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14025  0094D4  D7FE               	goto	_exitSave
 14026                           
 14027                           ;menu.c: 273: clear_row1();
 14028  0094D6  EC7B  F04B         	call	_clear_row1	;wreg free
 14029                           
 14030                           ;menu.c: 274: Lcd_Print_String("Settings Saved!");
 14031  0094DA  0EFD               	movlw	low STR_21
 14032  0094DC  0100               	movlb	0	; () banked
 14033  0094DE  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14034  0094E0  0EFD               	movlw	high STR_21
 14035  0094E2  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14036  0094E4  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 14037                           
 14038                           ;menu.c: 275: _delay((unsigned long)((500)*(20000000/4000.0)));
 14039  0094E8  0E0D               	movlw	13
 14040  0094EA  0100               	movlb	0	; () banked
 14041  0094EC  6F6F               	movwf	(??_exitSave+1)& (0+255),b
 14042  0094EE  0EAF               	movlw	175
 14043  0094F0  6F6E               	movwf	??_exitSave& (0+255),b
 14044  0094F2  0EB6               	movlw	182
 14045  0094F4                     u67017:
 14046  0094F4  2EE8               	decfsz	wreg,f,c
 14047  0094F6  D7FE               	bra	u67017
 14048  0094F8  2F6E               	decfsz	??_exitSave& (0+255),f,b
 14049  0094FA  D7FC               	bra	u67017
 14050  0094FC  2F6F               	decfsz	(??_exitSave+1)& (0+255),f,b
 14051  0094FE  D7FA               	bra	u67017
 14052  009500  F000               	nop	
 14053                           
 14054                           ;menu.c: 276: which_screen = MAIN_MENU;
 14055  009502  0E02               	movlw	2
 14056  009504  6E4F               	movwf	_which_screen,c
 14057                           
 14058                           ;menu.c: 277: lcd_print_once = 0;
 14059  009506  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14060                           
 14061                           ;menu.c: 278: encoder_click = 0;
 14062  009508  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14063  00950A  0012               	return		;funcret
 14064  00950C                     __end_of_exitSave:
 14065                           	opt stack 0
 14066                           tblptru	equ	0xFF8
 14067                           tblptrh	equ	0xFF7
 14068                           tblptrl	equ	0xFF6
 14069                           tablat	equ	0xFF5
 14070                           prodh	equ	0xFF4
 14071                           prodl	equ	0xFF3
 14072                           intcon	equ	0xFF2
 14073                           intcon2	equ	0xFF1
 14074                           postinc0	equ	0xFEE
 14075                           wreg	equ	0xFE8
 14076                           postinc1	equ	0xFE6
 14077                           indf2	equ	0xFDF
 14078                           postinc2	equ	0xFDE
 14079                           postdec2	equ	0xFDD
 14080                           fsr2h	equ	0xFDA
 14081                           fsr2l	equ	0xFD9
 14082                           status	equ	0xFD8
 14083                           
 14084 ;; *************** function _eepromExit *****************
 14085 ;; Defined at:
 14086 ;;		line 305 in file "menu.c"
 14087 ;; Parameters:    Size  Location     Type
 14088 ;;		None
 14089 ;; Auto vars:     Size  Location     Type
 14090 ;;		None
 14091 ;; Return value:  Size  Location     Type
 14092 ;;                  1    wreg      void 
 14093 ;; Registers used:
 14094 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14095 ;; Tracked objects:
 14096 ;;		On entry : 0/0
 14097 ;;		On exit  : 0/0
 14098 ;;		Unchanged: 0/0
 14099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14102 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14103 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14104 ;;Total ram usage:        2 bytes
 14105 ;; Hardware stack levels used:    1
 14106 ;; Hardware stack levels required when called:    9
 14107 ;; This function calls:
 14108 ;;		_Lcd_Print_String
 14109 ;;		_clear_row1
 14110 ;; This function is called by:
 14111 ;;		_Function_G_1
 14112 ;;		_Function_G_2
 14113 ;;		_Function_G
 14114 ;; This function uses a non-reentrant model
 14115 ;;
 14116                           
 14117                           	psect	text35
 14118  00950C                     __ptext35:
 14119                           	opt stack 0
 14120  00950C                     _eepromExit:
 14121                           	opt stack 19
 14122                           
 14123                           ;menu.c: 307: while(encoder_click == 0);
 14124                           
 14125                           ;incstack = 0
 14126  00950C  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14127  00950E  D7FE               	goto	_eepromExit
 14128                           
 14129                           ;menu.c: 313: clear_row1();
 14130  009510  EC7B  F04B         	call	_clear_row1	;wreg free
 14131                           
 14132                           ;menu.c: 314: Lcd_Print_String("Exit EEPROM!");
 14133  009514  0E18               	movlw	low STR_23
 14134  009516  0100               	movlb	0	; () banked
 14135  009518  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14136  00951A  0EFF               	movlw	high STR_23
 14137  00951C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14138  00951E  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 14139                           
 14140                           ;menu.c: 315: _delay((unsigned long)((500)*(20000000/4000.0)));
 14141  009522  0E0D               	movlw	13
 14142  009524  0100               	movlb	0	; () banked
 14143  009526  6F6F               	movwf	(??_eepromExit+1)& (0+255),b
 14144  009528  0EAF               	movlw	175
 14145  00952A  6F6E               	movwf	??_eepromExit& (0+255),b
 14146  00952C  0EB6               	movlw	182
 14147  00952E                     u67027:
 14148  00952E  2EE8               	decfsz	wreg,f,c
 14149  009530  D7FE               	bra	u67027
 14150  009532  2F6E               	decfsz	??_eepromExit& (0+255),f,b
 14151  009534  D7FC               	bra	u67027
 14152  009536  2F6F               	decfsz	(??_eepromExit+1)& (0+255),f,b
 14153  009538  D7FA               	bra	u67027
 14154  00953A  F000               	nop	
 14155                           
 14156                           ;menu.c: 316: which_screen = MAIN_MENU;
 14157  00953C  0E02               	movlw	2
 14158  00953E  6E4F               	movwf	_which_screen,c
 14159                           
 14160                           ;menu.c: 317: lcd_print_once = 0;
 14161  009540  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14162                           
 14163                           ;menu.c: 318: encoder_click = 0;
 14164  009542  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14165  009544  0012               	return		;funcret
 14166  009546                     __end_of_eepromExit:
 14167                           	opt stack 0
 14168                           tblptru	equ	0xFF8
 14169                           tblptrh	equ	0xFF7
 14170                           tblptrl	equ	0xFF6
 14171                           tablat	equ	0xFF5
 14172                           prodh	equ	0xFF4
 14173                           prodl	equ	0xFF3
 14174                           intcon	equ	0xFF2
 14175                           intcon2	equ	0xFF1
 14176                           postinc0	equ	0xFEE
 14177                           wreg	equ	0xFE8
 14178                           postinc1	equ	0xFE6
 14179                           indf2	equ	0xFDF
 14180                           postinc2	equ	0xFDE
 14181                           postdec2	equ	0xFDD
 14182                           fsr2h	equ	0xFDA
 14183                           fsr2l	equ	0xFD9
 14184                           status	equ	0xFD8
 14185                           
 14186 ;; *************** function _Function_F *****************
 14187 ;; Defined at:
 14188 ;;		line 1026 in file "menu.c"
 14189 ;; Parameters:    Size  Location     Type
 14190 ;;		None
 14191 ;; Auto vars:     Size  Location     Type
 14192 ;;		None
 14193 ;; Return value:  Size  Location     Type
 14194 ;;                  1    wreg      void 
 14195 ;; Registers used:
 14196 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14197 ;; Tracked objects:
 14198 ;;		On entry : 0/0
 14199 ;;		On exit  : 0/0
 14200 ;;		Unchanged: 0/0
 14201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14206 ;;Total ram usage:        0 bytes
 14207 ;; Hardware stack levels used:    1
 14208 ;; Hardware stack levels required when called:   16
 14209 ;; This function calls:
 14210 ;;		_Lcd_Print_String
 14211 ;;		_Lcd_Set_Cursor
 14212 ;;		_clear_row2
 14213 ;;		_int2string
 14214 ;;		_programChange
 14215 ;;		_un_block_code
 14216 ;; This function is called by:
 14217 ;;		_menu_lcd
 14218 ;; This function uses a non-reentrant model
 14219 ;;
 14220                           
 14221                           	psect	text36
 14222  008D58                     __ptext36:
 14223                           	opt stack 0
 14224  008D58                     _Function_F:
 14225                           	opt stack 13
 14226                           
 14227                           ;menu.c: 1028: which_screen = PROGRAM_CHANGE_MENU;
 14228                           
 14229                           ;incstack = 0
 14230  008D58  0E08               	movlw	8
 14231  008D5A  6E4F               	movwf	_which_screen,c
 14232                           
 14233                           ;menu.c: 1029: lcd_print_once = 0;
 14234  008D5C  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14235                           
 14236                           ;menu.c: 1031: programChangeMenu.selector = patch_number;
 14237  008D5E  C0F3  F146         	movff	_patch_number,_programChangeMenu+2
 14238                           
 14239                           ;menu.c: 1033: while(encoder_click == 0) {
 14240  008D62  D021               	goto	l3713
 14241  008D64                     
 14242                           ;menu.c: 1037: un_block_code();
 14243  008D64  EC10  F04C         	call	_un_block_code	;wreg free
 14244                           
 14245                           ;menu.c: 1039: if (lcd_print_once == 0) {
 14246  008D68  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14247  008D6A  D009               	goto	l3715
 14248                           
 14249                           ;menu.c: 1040: clear_row2();
 14250  008D6C  EC67  F04B         	call	_clear_row2	;wreg free
 14251                           
 14252                           ;menu.c: 1041: Lcd_Print_String("Program #: ");
 14253  008D70  0E4C               	movlw	low STR_34
 14254  008D72  0100               	movlb	0	; () banked
 14255  008D74  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14256  008D76  0EFF               	movlw	high STR_34
 14257  008D78  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14258  008D7A  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 14259  008D7E                     l3715:
 14260                           
 14261                           ;menu.c: 1042: }
 14262                           ;menu.c: 1043: lcd_print_once = 1;
 14263  008D7E  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14264                           
 14265                           ;menu.c: 1046: int2string(programChangeMenu.selector);
 14266  008D80  C146  F060         	movff	_programChangeMenu+2,int2string@number
 14267  008D84  0100               	movlb	0	; () banked
 14268  008D86  6B61               	clrf	(int2string@number+1)& (0+255),b
 14269  008D88  EC6D  F03A         	call	_int2string	;wreg free
 14270                           
 14271                           ;menu.c: 1047: Lcd_Set_Cursor(2,13);
 14272  008D8C  0E0D               	movlw	13
 14273  008D8E  0100               	movlb	0	; () banked
 14274  008D90  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 14275  008D92  0E02               	movlw	2
 14276  008D94  EC42  F047         	call	_Lcd_Set_Cursor
 14277                           
 14278                           ;menu.c: 1048: Lcd_Print_String(string2display);
 14279  008D98  0E92               	movlw	low _string2display
 14280  008D9A  0100               	movlb	0	; () banked
 14281  008D9C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14282  008D9E  0E01               	movlw	high _string2display
 14283  008DA0  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14284  008DA2  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 14285  008DA6                     l3713:
 14286  008DA6  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14287  008DA8  D7DD               	goto	l3714
 14288                           
 14289                           ;menu.c: 1049: }
 14290                           ;menu.c: 1051: patch_number = programChangeMenu.selector;
 14291  008DAA  C146  F0F3         	movff	_programChangeMenu+2,_patch_number
 14292                           
 14293                           ;menu.c: 1053: programChange(channel, programChangeMenu.selector, programChangeMenu.sele
      +                          ctor);
 14294  008DAE  C146  F060         	movff	_programChangeMenu+2,programChange@data1
 14295  008DB2  C146  F061         	movff	_programChangeMenu+2,programChange@data2
 14296  008DB6  503E               	movf	_channel,w,c
 14297  008DB8  EC41  F049         	call	_programChange
 14298  008DBC  0012               	return		;funcret
 14299  008DBE                     __end_of_Function_F:
 14300                           	opt stack 0
 14301                           tblptru	equ	0xFF8
 14302                           tblptrh	equ	0xFF7
 14303                           tblptrl	equ	0xFF6
 14304                           tablat	equ	0xFF5
 14305                           prodh	equ	0xFF4
 14306                           prodl	equ	0xFF3
 14307                           intcon	equ	0xFF2
 14308                           intcon2	equ	0xFF1
 14309                           postinc0	equ	0xFEE
 14310                           wreg	equ	0xFE8
 14311                           postinc1	equ	0xFE6
 14312                           indf2	equ	0xFDF
 14313                           postinc2	equ	0xFDE
 14314                           postdec2	equ	0xFDD
 14315                           fsr2h	equ	0xFDA
 14316                           fsr2l	equ	0xFD9
 14317                           status	equ	0xFD8
 14318                           
 14319 ;; *************** function _programChange *****************
 14320 ;; Defined at:
 14321 ;;		line 225 in file "midi.c"
 14322 ;; Parameters:    Size  Location     Type
 14323 ;;  channel         1    wreg     unsigned char 
 14324 ;;  data1           1    0[BANK0 ] unsigned char 
 14325 ;;  data2           1    1[BANK0 ] unsigned char 
 14326 ;; Auto vars:     Size  Location     Type
 14327 ;;  channel         1    2[BANK0 ] unsigned char 
 14328 ;; Return value:  Size  Location     Type
 14329 ;;                  1    wreg      void 
 14330 ;; Registers used:
 14331 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
 14332 ;; Tracked objects:
 14333 ;;		On entry : 0/0
 14334 ;;		On exit  : 0/0
 14335 ;;		Unchanged: 0/0
 14336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14337 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14338 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14340 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14341 ;;Total ram usage:        3 bytes
 14342 ;; Hardware stack levels used:    1
 14343 ;; Hardware stack levels required when called:    8
 14344 ;; This function calls:
 14345 ;;		___lbmod
 14346 ;;		_key_press_release_note_off
 14347 ;;		_sendOut
 14348 ;;		_sendUSB
 14349 ;; This function is called by:
 14350 ;;		_Function_F
 14351 ;; This function uses a non-reentrant model
 14352 ;;
 14353                           
 14354                           	psect	text37
 14355  009282                     __ptext37:
 14356                           	opt stack 0
 14357  009282                     _programChange:
 14358                           	opt stack 20
 14359                           
 14360                           ;incstack = 0
 14361                           ;programChange@channel stored from wreg
 14362  009282  0100               	movlb	0	; () banked
 14363  009284  6F62               	movwf	programChange@channel& (0+255),b
 14364                           
 14365                           ;midi.c: 229: if((note_off_was_sent == 0) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 
      +                          0)){
 14366  009286  B202               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 14367  009288  D00A               	goto	l502
 14368  00928A  504D               	movf	_NOTE_LENGTH_PULSES,w,c
 14369  00928C  6EE6               	movwf	postinc1,c
 14370  00928E  502E               	movf	_TIMER_OVERFLOWS,w,c
 14371  009290  6EE6               	movwf	postinc1,c
 14372  009292  ECC6  F040         	call	___lbmod	;wreg free
 14373  009296  503F               	movf	btemp,w,c
 14374  009298  B4D8               	btfsc	status,2,c
 14375                           
 14376                           ;midi.c: 231: key_press_release_note_off();
 14377  00929A  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 14378  00929E                     l502:
 14379                           
 14380                           ;midi.c: 232: }
 14381                           ;midi.c: 234: statusByte = channel | program_change;
 14382  00929E  0100               	movlb	0	; () banked
 14383  0092A0  5162               	movf	programChange@channel& (0+255),w,b
 14384  0092A2  09C0               	iorlw	192
 14385  0092A4  6E3D               	movwf	_statusByte,c
 14386                           
 14387                           ; BSR set to: 0
 14388                           ;midi.c: 237: sendUSB(statusByte, data1, data2);
 14389  0092A6  5161               	movf	programChange@data2& (0+255),w,b
 14390  0092A8  6EE6               	movwf	postinc1,c
 14391  0092AA  5160               	movf	programChange@data1& (0+255),w,b
 14392  0092AC  6EE6               	movwf	postinc1,c
 14393  0092AE  503D               	movf	_statusByte,w,c
 14394  0092B0  6EE6               	movwf	postinc1,c
 14395  0092B2  EC40  F036         	call	_sendUSB	;wreg free
 14396                           
 14397                           ;midi.c: 240: sendOut(statusByte, data1, data2);
 14398  0092B6  0100               	movlb	0	; () banked
 14399  0092B8  5161               	movf	programChange@data2& (0+255),w,b
 14400  0092BA  6EE6               	movwf	postinc1,c
 14401  0092BC  5160               	movf	programChange@data1& (0+255),w,b
 14402  0092BE  6EE6               	movwf	postinc1,c
 14403  0092C0  503D               	movf	_statusByte,w,c
 14404  0092C2  6EE6               	movwf	postinc1,c
 14405  0092C4  ECC9  F035         	call	_sendOut	;wreg free
 14406  0092C8  0012               	return		;funcret
 14407  0092CA                     __end_of_programChange:
 14408                           	opt stack 0
 14409                           tblptru	equ	0xFF8
 14410                           tblptrh	equ	0xFF7
 14411                           tblptrl	equ	0xFF6
 14412                           tablat	equ	0xFF5
 14413                           prodh	equ	0xFF4
 14414                           prodl	equ	0xFF3
 14415                           intcon	equ	0xFF2
 14416                           intcon2	equ	0xFF1
 14417                           postinc0	equ	0xFEE
 14418                           wreg	equ	0xFE8
 14419                           postinc1	equ	0xFE6
 14420                           indf2	equ	0xFDF
 14421                           postinc2	equ	0xFDE
 14422                           postdec2	equ	0xFDD
 14423                           fsr2h	equ	0xFDA
 14424                           fsr2l	equ	0xFD9
 14425                           status	equ	0xFD8
 14426                           
 14427 ;; *************** function _Function_E *****************
 14428 ;; Defined at:
 14429 ;;		line 1003 in file "menu.c"
 14430 ;; Parameters:    Size  Location     Type
 14431 ;;		None
 14432 ;; Auto vars:     Size  Location     Type
 14433 ;;		None
 14434 ;; Return value:  Size  Location     Type
 14435 ;;                  1    wreg      void 
 14436 ;; Registers used:
 14437 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14438 ;; Tracked objects:
 14439 ;;		On entry : 0/0
 14440 ;;		On exit  : 0/0
 14441 ;;		Unchanged: 0/0
 14442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14447 ;;Total ram usage:        0 bytes
 14448 ;; Hardware stack levels used:    1
 14449 ;; Hardware stack levels required when called:   17
 14450 ;; This function calls:
 14451 ;;		_Function_E_1
 14452 ;;		_Function_E_2
 14453 ;;		_Lcd_Print_String
 14454 ;;		___lbmod
 14455 ;;		___wmul
 14456 ;;		_clear_row2
 14457 ;;		_un_block_code
 14458 ;; This function is called by:
 14459 ;;		_menu_lcd
 14460 ;; This function uses a non-reentrant model
 14461 ;;
 14462                           
 14463                           	psect	text38
 14464  008BB0                     __ptext38:
 14465                           	opt stack 0
 14466  008BB0                     _Function_E:
 14467                           	opt stack 12
 14468                           
 14469                           ;menu.c: 1005: which_screen = MIDI_CHANNEL_MENU;
 14470                           
 14471                           ;incstack = 0
 14472  008BB0  0E07               	movlw	7
 14473  008BB2  6E4F               	movwf	_which_screen,c
 14474                           
 14475                           ;menu.c: 1006: lcd_print_once = 0;
 14476  008BB4  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14477                           
 14478                           ;menu.c: 1008: while(encoder_click == 0) {
 14479  008BB6  D024               	goto	l3704
 14480  008BB8                     
 14481                           ;menu.c: 1012: un_block_code();
 14482  008BB8  EC10  F04C         	call	_un_block_code	;wreg free
 14483                           
 14484                           ;menu.c: 1014: if (lcd_print_once == 0) {
 14485  008BBC  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14486  008BBE  D01F               	goto	l3706
 14487                           
 14488                           ;menu.c: 1015: clear_row2();
 14489  008BC0  EC67  F04B         	call	_clear_row2	;wreg free
 14490                           
 14491                           ;menu.c: 1016: Lcd_Print_String(LCD_STRINGS[(midiChannelMenu.selector % midiChannelMenu.
      +                          number) + midiChannelMenu.address]);
 14492  008BC4  0101               	movlb	1	; () banked
 14493  008BC6  5147               	movf	_midiChannelMenu& (0+255),w,b
 14494  008BC8  6EE6               	movwf	postinc1,c
 14495  008BCA  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 14496  008BCC  6EE6               	movwf	postinc1,c
 14497  008BCE  ECC6  F040         	call	___lbmod	;wreg free
 14498  008BD2  503F               	movf	btemp,w,c
 14499  008BD4  0101               	movlb	1	; () banked
 14500  008BD6  2548               	addwf	(_midiChannelMenu+1)& (0+255),w,b
 14501  008BD8  0100               	movlb	0	; () banked
 14502  008BDA  6F60               	movwf	___wmul@multiplier& (0+255),b
 14503  008BDC  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 14504  008BDE  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 14505  008BE0  0E00               	movlw	0
 14506  008BE2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14507  008BE4  0E11               	movlw	17
 14508  008BE6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14509  008BE8  EC8F  F04B         	call	___wmul	;wreg free
 14510  008BEC  0E9E               	movlw	low _LCD_STRINGS
 14511  008BEE  0100               	movlb	0	; () banked
 14512  008BF0  2560               	addwf	?___wmul& (0+255),w,b
 14513  008BF2  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14514  008BF4  0EF3               	movlw	high _LCD_STRINGS
 14515  008BF6  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 14516  008BF8  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14517  008BFA  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 14518  008BFE                     l3706:
 14519                           
 14520                           ;menu.c: 1017: }
 14521                           ;menu.c: 1018: lcd_print_once = 1;
 14522  008BFE  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14523  008C00                     l3704:
 14524  008C00  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14525  008C02  D7DA               	goto	l3705
 14526                           
 14527                           ;menu.c: 1019: }
 14528                           ;menu.c: 1021: if(midiChannelMenu.selector == 0) {Function_E_1();}
 14529  008C04  0101               	movlb	1	; () banked
 14530  008C06  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 14531  008C08  B4D8               	btfsc	status,2,c
 14532                           
 14533                           ; BSR set to: 1
 14534  008C0A  ECD1  F048         	call	_Function_E_1	;wreg free
 14535                           
 14536                           ;menu.c: 1022: if(midiChannelMenu.selector == 1) {Function_E_2();}
 14537  008C0E  0101               	movlb	1	; () banked
 14538  008C10  0549               	decf	(_midiChannelMenu+2)& (0+255),w,b
 14539  008C12  A4D8               	btfss	status,2,c
 14540  008C14  0012               	return	
 14541                           
 14542                           ; BSR set to: 1
 14543  008C16  ECAB  F048         	call	_Function_E_2	;wreg free
 14544  008C1A  0012               	return	
 14545  008C1C                     __end_of_Function_E:
 14546                           	opt stack 0
 14547                           tblptru	equ	0xFF8
 14548                           tblptrh	equ	0xFF7
 14549                           tblptrl	equ	0xFF6
 14550                           tablat	equ	0xFF5
 14551                           prodh	equ	0xFF4
 14552                           prodl	equ	0xFF3
 14553                           intcon	equ	0xFF2
 14554                           intcon2	equ	0xFF1
 14555                           postinc0	equ	0xFEE
 14556                           wreg	equ	0xFE8
 14557                           postinc1	equ	0xFE6
 14558                           indf2	equ	0xFDF
 14559                           postinc2	equ	0xFDE
 14560                           postdec2	equ	0xFDD
 14561                           fsr2h	equ	0xFDA
 14562                           fsr2l	equ	0xFD9
 14563                           status	equ	0xFD8
 14564                           
 14565 ;; *************** function _Function_E_2 *****************
 14566 ;; Defined at:
 14567 ;;		line 980 in file "menu.c"
 14568 ;; Parameters:    Size  Location     Type
 14569 ;;		None
 14570 ;; Auto vars:     Size  Location     Type
 14571 ;;		None
 14572 ;; Return value:  Size  Location     Type
 14573 ;;                  1    wreg      void 
 14574 ;; Registers used:
 14575 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14576 ;; Tracked objects:
 14577 ;;		On entry : 0/0
 14578 ;;		On exit  : 0/0
 14579 ;;		Unchanged: 0/0
 14580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14585 ;;Total ram usage:        0 bytes
 14586 ;; Hardware stack levels used:    1
 14587 ;; Hardware stack levels required when called:   16
 14588 ;; This function calls:
 14589 ;;		_Lcd_Print_String
 14590 ;;		_Lcd_Set_Cursor
 14591 ;;		_int2string
 14592 ;;		_un_block_code
 14593 ;; This function is called by:
 14594 ;;		_Function_E
 14595 ;; This function uses a non-reentrant model
 14596 ;;
 14597                           
 14598                           	psect	text39
 14599  009156                     __ptext39:
 14600                           	opt stack 0
 14601  009156                     _Function_E_2:
 14602                           	opt stack 12
 14603                           
 14604                           ;menu.c: 982: which_screen = DRUM_CH_MENU;
 14605                           
 14606                           ;incstack = 0
 14607  009156  0E15               	movlw	21
 14608  009158  6E4F               	movwf	_which_screen,c
 14609                           
 14610                           ;menu.c: 983: lcd_print_once = 0;
 14611  00915A  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14612                           
 14613                           ;menu.c: 984: encoder_click = 0;
 14614  00915C  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14615                           
 14616                           ;menu.c: 985: drumChannelMenu.selector = drumchannel;
 14617  00915E  C052  F140         	movff	_drumchannel,_drumChannelMenu+2
 14618                           
 14619                           ;menu.c: 987: while(encoder_click == 0) {
 14620  009162  D01A               	goto	l3698
 14621  009164                     
 14622                           ;menu.c: 991: un_block_code();
 14623  009164  EC10  F04C         	call	_un_block_code	;wreg free
 14624                           
 14625                           ;menu.c: 993: lcd_print_once = 1;
 14626  009168  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14627                           
 14628                           ;menu.c: 994: int2string((drumChannelMenu.selector) + 1);
 14629  00916A  0E01               	movlw	1
 14630  00916C  0101               	movlb	1	; () banked
 14631  00916E  2540               	addwf	(_drumChannelMenu+2)& (0+255),w,b
 14632  009170  0100               	movlb	0	; () banked
 14633  009172  6F60               	movwf	int2string@number& (0+255),b
 14634  009174  6B61               	clrf	(int2string@number+1)& (0+255),b
 14635  009176  0E00               	movlw	0
 14636  009178  2361               	addwfc	(int2string@number+1)& (0+255),f,b
 14637  00917A  EC6D  F03A         	call	_int2string	;wreg free
 14638                           
 14639                           ;menu.c: 995: Lcd_Set_Cursor(2,13);
 14640  00917E  0E0D               	movlw	13
 14641  009180  0100               	movlb	0	; () banked
 14642  009182  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 14643  009184  0E02               	movlw	2
 14644  009186  EC42  F047         	call	_Lcd_Set_Cursor
 14645                           
 14646                           ;menu.c: 996: Lcd_Print_String(string2display);
 14647  00918A  0E92               	movlw	low _string2display
 14648  00918C  0100               	movlb	0	; () banked
 14649  00918E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14650  009190  0E01               	movlw	high _string2display
 14651  009192  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14652  009194  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 14653  009198                     l3698:
 14654  009198  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14655  00919A  D7E4               	goto	l3699
 14656                           
 14657                           ;menu.c: 997: }
 14658                           ;menu.c: 999: drumchannel = drumChannelMenu.selector;
 14659  00919C  C140  F052         	movff	_drumChannelMenu+2,_drumchannel
 14660  0091A0  0012               	return		;funcret
 14661  0091A2                     __end_of_Function_E_2:
 14662                           	opt stack 0
 14663                           tblptru	equ	0xFF8
 14664                           tblptrh	equ	0xFF7
 14665                           tblptrl	equ	0xFF6
 14666                           tablat	equ	0xFF5
 14667                           prodh	equ	0xFF4
 14668                           prodl	equ	0xFF3
 14669                           intcon	equ	0xFF2
 14670                           intcon2	equ	0xFF1
 14671                           postinc0	equ	0xFEE
 14672                           wreg	equ	0xFE8
 14673                           postinc1	equ	0xFE6
 14674                           indf2	equ	0xFDF
 14675                           postinc2	equ	0xFDE
 14676                           postdec2	equ	0xFDD
 14677                           fsr2h	equ	0xFDA
 14678                           fsr2l	equ	0xFD9
 14679                           status	equ	0xFD8
 14680                           
 14681 ;; *************** function _Function_E_1 *****************
 14682 ;; Defined at:
 14683 ;;		line 955 in file "menu.c"
 14684 ;; Parameters:    Size  Location     Type
 14685 ;;		None
 14686 ;; Auto vars:     Size  Location     Type
 14687 ;;		None
 14688 ;; Return value:  Size  Location     Type
 14689 ;;                  1    wreg      void 
 14690 ;; Registers used:
 14691 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14692 ;; Tracked objects:
 14693 ;;		On entry : 0/0
 14694 ;;		On exit  : 0/0
 14695 ;;		Unchanged: 0/0
 14696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14701 ;;Total ram usage:        0 bytes
 14702 ;; Hardware stack levels used:    1
 14703 ;; Hardware stack levels required when called:   16
 14704 ;; This function calls:
 14705 ;;		_Lcd_Print_String
 14706 ;;		_Lcd_Set_Cursor
 14707 ;;		_int2string
 14708 ;;		_un_block_code
 14709 ;; This function is called by:
 14710 ;;		_Function_E
 14711 ;; This function uses a non-reentrant model
 14712 ;;
 14713                           
 14714                           	psect	text40
 14715  0091A2                     __ptext40:
 14716                           	opt stack 0
 14717  0091A2                     _Function_E_1:
 14718                           	opt stack 12
 14719                           
 14720                           ;menu.c: 957: which_screen = MAIN_CH_MENU;
 14721                           
 14722                           ;incstack = 0
 14723  0091A2  0E14               	movlw	20
 14724  0091A4  6E4F               	movwf	_which_screen,c
 14725                           
 14726                           ;menu.c: 958: lcd_print_once = 0;
 14727  0091A6  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14728                           
 14729                           ;menu.c: 959: encoder_click = 0;
 14730  0091A8  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14731                           
 14732                           ;menu.c: 960: mainChannelMenu.selector = channel;
 14733  0091AA  C03E  F143         	movff	_channel,_mainChannelMenu+2
 14734                           
 14735                           ;menu.c: 962: while(encoder_click == 0) {
 14736  0091AE  D01A               	goto	l3692
 14737  0091B0                     
 14738                           ;menu.c: 966: un_block_code();
 14739  0091B0  EC10  F04C         	call	_un_block_code	;wreg free
 14740                           
 14741                           ;menu.c: 968: lcd_print_once = 1;
 14742  0091B4  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14743                           
 14744                           ;menu.c: 970: int2string((mainChannelMenu.selector) + 1);
 14745  0091B6  0E01               	movlw	1
 14746  0091B8  0101               	movlb	1	; () banked
 14747  0091BA  2543               	addwf	(_mainChannelMenu+2)& (0+255),w,b
 14748  0091BC  0100               	movlb	0	; () banked
 14749  0091BE  6F60               	movwf	int2string@number& (0+255),b
 14750  0091C0  6B61               	clrf	(int2string@number+1)& (0+255),b
 14751  0091C2  0E00               	movlw	0
 14752  0091C4  2361               	addwfc	(int2string@number+1)& (0+255),f,b
 14753  0091C6  EC6D  F03A         	call	_int2string	;wreg free
 14754                           
 14755                           ;menu.c: 972: Lcd_Set_Cursor(2,13);
 14756  0091CA  0E0D               	movlw	13
 14757  0091CC  0100               	movlb	0	; () banked
 14758  0091CE  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 14759  0091D0  0E02               	movlw	2
 14760  0091D2  EC42  F047         	call	_Lcd_Set_Cursor
 14761                           
 14762                           ;menu.c: 973: Lcd_Print_String(string2display);
 14763  0091D6  0E92               	movlw	low _string2display
 14764  0091D8  0100               	movlb	0	; () banked
 14765  0091DA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14766  0091DC  0E01               	movlw	high _string2display
 14767  0091DE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14768  0091E0  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 14769  0091E4                     l3692:
 14770  0091E4  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14771  0091E6  D7E4               	goto	l3693
 14772                           
 14773                           ;menu.c: 974: }
 14774                           ;menu.c: 976: channel = mainChannelMenu.selector;
 14775  0091E8  C143  F03E         	movff	_mainChannelMenu+2,_channel
 14776  0091EC  0012               	return		;funcret
 14777  0091EE                     __end_of_Function_E_1:
 14778                           	opt stack 0
 14779                           tblptru	equ	0xFF8
 14780                           tblptrh	equ	0xFF7
 14781                           tblptrl	equ	0xFF6
 14782                           tablat	equ	0xFF5
 14783                           prodh	equ	0xFF4
 14784                           prodl	equ	0xFF3
 14785                           intcon	equ	0xFF2
 14786                           intcon2	equ	0xFF1
 14787                           postinc0	equ	0xFEE
 14788                           wreg	equ	0xFE8
 14789                           postinc1	equ	0xFE6
 14790                           indf2	equ	0xFDF
 14791                           postinc2	equ	0xFDE
 14792                           postdec2	equ	0xFDD
 14793                           fsr2h	equ	0xFDA
 14794                           fsr2l	equ	0xFD9
 14795                           status	equ	0xFD8
 14796                           
 14797 ;; *************** function _Function_D *****************
 14798 ;; Defined at:
 14799 ;;		line 928 in file "menu.c"
 14800 ;; Parameters:    Size  Location     Type
 14801 ;;		None
 14802 ;; Auto vars:     Size  Location     Type
 14803 ;;		None
 14804 ;; Return value:  Size  Location     Type
 14805 ;;                  1    wreg      void 
 14806 ;; Registers used:
 14807 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14808 ;; Tracked objects:
 14809 ;;		On entry : 0/0
 14810 ;;		On exit  : 0/0
 14811 ;;		Unchanged: 0/0
 14812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14817 ;;Total ram usage:        0 bytes
 14818 ;; Hardware stack levels used:    1
 14819 ;; Hardware stack levels required when called:   17
 14820 ;; This function calls:
 14821 ;;		_Function_D_1
 14822 ;;		_Function_D_2
 14823 ;;		_Function_D_3
 14824 ;;		_Function_D_4
 14825 ;;		_Function_D_5
 14826 ;;		_Lcd_Print_String
 14827 ;;		___lbmod
 14828 ;;		___wmul
 14829 ;;		_clear_row2
 14830 ;;		_un_block_code
 14831 ;; This function is called by:
 14832 ;;		_menu_lcd
 14833 ;; This function uses a non-reentrant model
 14834 ;;
 14835                           
 14836                           	psect	text41
 14837  00806E                     __ptext41:
 14838                           	opt stack 0
 14839  00806E                     _Function_D:
 14840                           	opt stack 12
 14841                           
 14842                           ;menu.c: 930: which_screen = POTENTIOMETER_MENU;
 14843                           
 14844                           ;incstack = 0
 14845  00806E  0E06               	movlw	6
 14846  008070  6E4F               	movwf	_which_screen,c
 14847                           
 14848                           ;menu.c: 931: lcd_print_once = 0;
 14849  008072  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14850                           
 14851                           ;menu.c: 933: while(encoder_click == 0) {
 14852  008074  D024               	goto	l3680
 14853  008076                     
 14854                           ;menu.c: 937: un_block_code();
 14855  008076  EC10  F04C         	call	_un_block_code	;wreg free
 14856                           
 14857                           ;menu.c: 939: if (lcd_print_once == 0) {
 14858  00807A  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14859  00807C  D01F               	goto	l3682
 14860                           
 14861                           ;menu.c: 940: clear_row2();
 14862  00807E  EC67  F04B         	call	_clear_row2	;wreg free
 14863                           
 14864                           ;menu.c: 941: Lcd_Print_String(LCD_STRINGS[(potsMenu.selector % potsMenu.number) + potsM
      +                          enu.address]);
 14865  008082  0101               	movlb	1	; () banked
 14866  008084  5159               	movf	_potsMenu& (0+255),w,b
 14867  008086  6EE6               	movwf	postinc1,c
 14868  008088  515B               	movf	(_potsMenu+2)& (0+255),w,b
 14869  00808A  6EE6               	movwf	postinc1,c
 14870  00808C  ECC6  F040         	call	___lbmod	;wreg free
 14871  008090  503F               	movf	btemp,w,c
 14872  008092  0101               	movlb	1	; () banked
 14873  008094  255A               	addwf	(_potsMenu+1)& (0+255),w,b
 14874  008096  0100               	movlb	0	; () banked
 14875  008098  6F60               	movwf	___wmul@multiplier& (0+255),b
 14876  00809A  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 14877  00809C  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 14878  00809E  0E00               	movlw	0
 14879  0080A0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14880  0080A2  0E11               	movlw	17
 14881  0080A4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14882  0080A6  EC8F  F04B         	call	___wmul	;wreg free
 14883  0080AA  0E9E               	movlw	low _LCD_STRINGS
 14884  0080AC  0100               	movlb	0	; () banked
 14885  0080AE  2560               	addwf	?___wmul& (0+255),w,b
 14886  0080B0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14887  0080B2  0EF3               	movlw	high _LCD_STRINGS
 14888  0080B4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 14889  0080B6  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14890  0080B8  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 14891  0080BC                     l3682:
 14892                           
 14893                           ;menu.c: 942: }
 14894                           ;menu.c: 943: lcd_print_once = 1;
 14895  0080BC  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14896  0080BE                     l3680:
 14897  0080BE  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14898  0080C0  D7DA               	goto	l3681
 14899                           
 14900                           ;menu.c: 944: }
 14901                           ;menu.c: 946: if(potsMenu.selector == 0) {Function_D_1();}
 14902  0080C2  0101               	movlb	1	; () banked
 14903  0080C4  515B               	movf	(_potsMenu+2)& (0+255),w,b
 14904  0080C6  B4D8               	btfsc	status,2,c
 14905                           
 14906                           ; BSR set to: 1
 14907  0080C8  EC97  F041         	call	_Function_D_1	;wreg free
 14908                           
 14909                           ;menu.c: 947: if(potsMenu.selector == 1) {Function_D_2();}
 14910  0080CC  0101               	movlb	1	; () banked
 14911  0080CE  055B               	decf	(_potsMenu+2)& (0+255),w,b
 14912  0080D0  B4D8               	btfsc	status,2,c
 14913                           
 14914                           ; BSR set to: 1
 14915  0080D2  EC73  F047         	call	_Function_D_2	;wreg free
 14916                           
 14917                           ;menu.c: 948: if(potsMenu.selector == 2) {Function_D_3();}
 14918  0080D6  0E02               	movlw	2
 14919  0080D8  0101               	movlb	1	; () banked
 14920  0080DA  195B               	xorwf	(_potsMenu+2)& (0+255),w,b
 14921  0080DC  B4D8               	btfsc	status,2,c
 14922                           
 14923                           ; BSR set to: 1
 14924  0080DE  EC49  F044         	call	_Function_D_3	;wreg free
 14925                           
 14926                           ;menu.c: 949: if(potsMenu.selector == 3) {Function_D_4();}
 14927  0080E2  0E03               	movlw	3
 14928  0080E4  0101               	movlb	1	; () banked
 14929  0080E6  195B               	xorwf	(_potsMenu+2)& (0+255),w,b
 14930  0080E8  B4D8               	btfsc	status,2,c
 14931                           
 14932                           ; BSR set to: 1
 14933  0080EA  EC58  F043         	call	_Function_D_4	;wreg free
 14934                           
 14935                           ;menu.c: 950: if(potsMenu.selector == 4) {Function_D_5();}
 14936  0080EE  0E04               	movlw	4
 14937  0080F0  0101               	movlb	1	; () banked
 14938  0080F2  195B               	xorwf	(_potsMenu+2)& (0+255),w,b
 14939  0080F4  A4D8               	btfss	status,2,c
 14940  0080F6  0012               	return	
 14941                           
 14942                           ; BSR set to: 1
 14943  0080F8  EC1B  F043         	call	_Function_D_5	;wreg free
 14944  0080FC  0012               	return	
 14945  0080FE                     __end_of_Function_D:
 14946                           	opt stack 0
 14947                           tblptru	equ	0xFF8
 14948                           tblptrh	equ	0xFF7
 14949                           tblptrl	equ	0xFF6
 14950                           tablat	equ	0xFF5
 14951                           prodh	equ	0xFF4
 14952                           prodl	equ	0xFF3
 14953                           intcon	equ	0xFF2
 14954                           intcon2	equ	0xFF1
 14955                           postinc0	equ	0xFEE
 14956                           wreg	equ	0xFE8
 14957                           postinc1	equ	0xFE6
 14958                           indf2	equ	0xFDF
 14959                           postinc2	equ	0xFDE
 14960                           postdec2	equ	0xFDD
 14961                           fsr2h	equ	0xFDA
 14962                           fsr2l	equ	0xFD9
 14963                           status	equ	0xFD8
 14964                           
 14965 ;; *************** function _Function_D_5 *****************
 14966 ;; Defined at:
 14967 ;;		line 898 in file "menu.c"
 14968 ;; Parameters:    Size  Location     Type
 14969 ;;		None
 14970 ;; Auto vars:     Size  Location     Type
 14971 ;;  array_index     1  103[BANK0 ] unsigned char 
 14972 ;; Return value:  Size  Location     Type
 14973 ;;                  1    wreg      void 
 14974 ;; Registers used:
 14975 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14976 ;; Tracked objects:
 14977 ;;		On entry : 0/0
 14978 ;;		On exit  : 0/0
 14979 ;;		Unchanged: 0/0
 14980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14982 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14984 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14985 ;;Total ram usage:        1 bytes
 14986 ;; Hardware stack levels used:    1
 14987 ;; Hardware stack levels required when called:   16
 14988 ;; This function calls:
 14989 ;;		_Lcd_Print_String
 14990 ;;		___lbmod
 14991 ;;		___wmul
 14992 ;;		_clear_row1
 14993 ;;		_clear_row2
 14994 ;;		_setControllerNumbers
 14995 ;;		_un_block_code
 14996 ;; This function is called by:
 14997 ;;		_Function_D
 14998 ;; This function uses a non-reentrant model
 14999 ;;
 15000                           
 15001                           	psect	text42
 15002  008636                     __ptext42:
 15003                           	opt stack 0
 15004  008636                     _Function_D_5:
 15005                           	opt stack 12
 15006                           
 15007                           ;menu.c: 900: which_screen = JOYSTICK_CC_MENU;
 15008                           
 15009                           ;incstack = 0
 15010  008636  0E13               	movlw	19
 15011  008638  6E4F               	movwf	_which_screen,c
 15012                           
 15013                           ;menu.c: 902: lcd_print_once = 0;
 15014  00863A  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15015                           
 15016                           ;menu.c: 903: encoder_click = 0;
 15017  00863C  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15018                           
 15019                           ;menu.c: 905: while(encoder_click == 0) {
 15020  00863E  D02D               	goto	l3673
 15021  008640                     
 15022                           ;menu.c: 909: un_block_code();
 15023  008640  EC10  F04C         	call	_un_block_code	;wreg free
 15024                           
 15025                           ;menu.c: 911: if (lcd_print_once == 0) {
 15026  008644  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15027  008646  D028               	goto	l3675
 15028                           
 15029                           ;menu.c: 912: clear_row1();
 15030  008648  EC7B  F04B         	call	_clear_row1	;wreg free
 15031                           
 15032                           ;menu.c: 913: Lcd_Print_String("Set Joystick CC#");
 15033  00864C  0E97               	movlw	low STR_33
 15034  00864E  0100               	movlb	0	; () banked
 15035  008650  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15036  008652  0EFD               	movlw	high STR_33
 15037  008654  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15038  008656  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 15039                           
 15040                           ;menu.c: 914: clear_row2();
 15041  00865A  EC67  F04B         	call	_clear_row2	;wreg free
 15042                           
 15043                           ;menu.c: 915: Lcd_Print_String(LCD_STRINGS[(joystickCCMenu.selector % joystickCCMenu.num
      +                          ber) + joystickCCMenu.address]);
 15044  00865E  0101               	movlb	1	; () banked
 15045  008660  514A               	movf	_joystickCCMenu& (0+255),w,b
 15046  008662  6EE6               	movwf	postinc1,c
 15047  008664  514C               	movf	(_joystickCCMenu+2)& (0+255),w,b
 15048  008666  6EE6               	movwf	postinc1,c
 15049  008668  ECC6  F040         	call	___lbmod	;wreg free
 15050  00866C  503F               	movf	btemp,w,c
 15051  00866E  0101               	movlb	1	; () banked
 15052  008670  254B               	addwf	(_joystickCCMenu+1)& (0+255),w,b
 15053  008672  0100               	movlb	0	; () banked
 15054  008674  6F60               	movwf	___wmul@multiplier& (0+255),b
 15055  008676  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 15056  008678  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 15057  00867A  0E00               	movlw	0
 15058  00867C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15059  00867E  0E11               	movlw	17
 15060  008680  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15061  008682  EC8F  F04B         	call	___wmul	;wreg free
 15062  008686  0E9E               	movlw	low _LCD_STRINGS
 15063  008688  0100               	movlb	0	; () banked
 15064  00868A  2560               	addwf	?___wmul& (0+255),w,b
 15065  00868C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15066  00868E  0EF3               	movlw	high _LCD_STRINGS
 15067  008690  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 15068  008692  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15069  008694  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 15070  008698                     l3675:
 15071                           
 15072                           ;menu.c: 916: }
 15073                           ;menu.c: 917: lcd_print_once = 1;
 15074  008698  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15075  00869A                     l3673:
 15076  00869A  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 15077  00869C  D7D1               	goto	l3674
 15078                           
 15079                           ;menu.c: 918: }
 15080                           ;menu.c: 922: unsigned char array_index = (joystickCCMenu.selector) + 14;
 15081  00869E  0101               	movlb	1	; () banked
 15082  0086A0  514C               	movf	(_joystickCCMenu+2)& (0+255),w,b
 15083  0086A2  0F0E               	addlw	14
 15084  0086A4  0100               	movlb	0	; () banked
 15085  0086A6  6FC7               	movwf	Function_D_5@array_index& (0+255),b
 15086                           
 15087                           ; BSR set to: 0
 15088                           ;menu.c: 923: setControllerNumbers(array_index);
 15089  0086A8  51C7               	movf	Function_D_5@array_index& (0+255),w,b
 15090  0086AA  ECC1  F010         	call	_setControllerNumbers
 15091  0086AE  0012               	return		;funcret
 15092  0086B0                     __end_of_Function_D_5:
 15093                           	opt stack 0
 15094                           tblptru	equ	0xFF8
 15095                           tblptrh	equ	0xFF7
 15096                           tblptrl	equ	0xFF6
 15097                           tablat	equ	0xFF5
 15098                           prodh	equ	0xFF4
 15099                           prodl	equ	0xFF3
 15100                           intcon	equ	0xFF2
 15101                           intcon2	equ	0xFF1
 15102                           postinc0	equ	0xFEE
 15103                           wreg	equ	0xFE8
 15104                           postinc1	equ	0xFE6
 15105                           indf2	equ	0xFDF
 15106                           postinc2	equ	0xFDE
 15107                           postdec2	equ	0xFDD
 15108                           fsr2h	equ	0xFDA
 15109                           fsr2l	equ	0xFD9
 15110                           status	equ	0xFD8
 15111                           
 15112 ;; *************** function _Function_D_4 *****************
 15113 ;; Defined at:
 15114 ;;		line 867 in file "menu.c"
 15115 ;; Parameters:    Size  Location     Type
 15116 ;;		None
 15117 ;; Auto vars:     Size  Location     Type
 15118 ;;  array_index     1  103[BANK0 ] unsigned char 
 15119 ;; Return value:  Size  Location     Type
 15120 ;;                  1    wreg      void 
 15121 ;; Registers used:
 15122 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15123 ;; Tracked objects:
 15124 ;;		On entry : 0/0
 15125 ;;		On exit  : 0/0
 15126 ;;		Unchanged: 0/0
 15127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15129 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15131 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15132 ;;Total ram usage:        1 bytes
 15133 ;; Hardware stack levels used:    1
 15134 ;; Hardware stack levels required when called:   16
 15135 ;; This function calls:
 15136 ;;		_Lcd_Print_String
 15137 ;;		___lbmod
 15138 ;;		___wmul
 15139 ;;		_clear_row1
 15140 ;;		_clear_row2
 15141 ;;		_setControllerNumbers
 15142 ;;		_un_block_code
 15143 ;; This function is called by:
 15144 ;;		_Function_D
 15145 ;; This function uses a non-reentrant model
 15146 ;;
 15147                           
 15148                           	psect	text43
 15149  0086B0                     __ptext43:
 15150                           	opt stack 0
 15151  0086B0                     _Function_D_4:
 15152                           	opt stack 12
 15153                           
 15154                           ;menu.c: 869: which_screen = SLIDEPOTS_CC_MENU;
 15155                           
 15156                           ;incstack = 0
 15157  0086B0  0E12               	movlw	18
 15158  0086B2  6E4F               	movwf	_which_screen,c
 15159                           
 15160                           ;menu.c: 871: lcd_print_once = 0;
 15161  0086B4  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15162                           
 15163                           ;menu.c: 872: encoder_click = 0;
 15164  0086B6  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15165                           
 15166                           ;menu.c: 874: while(encoder_click == 0) {
 15167  0086B8  D02D               	goto	l3666
 15168  0086BA                     
 15169                           ;menu.c: 878: un_block_code();
 15170  0086BA  EC10  F04C         	call	_un_block_code	;wreg free
 15171                           
 15172                           ;menu.c: 880: if (lcd_print_once == 0) {
 15173  0086BE  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15174  0086C0  D028               	goto	l3668
 15175                           
 15176                           ;menu.c: 881: clear_row1();
 15177  0086C2  EC7B  F04B         	call	_clear_row1	;wreg free
 15178                           
 15179                           ;menu.c: 882: Lcd_Print_String("Slidepots CC#:");
 15180  0086C6  0E4D               	movlw	low STR_32
 15181  0086C8  0100               	movlb	0	; () banked
 15182  0086CA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15183  0086CC  0EFE               	movlw	high STR_32
 15184  0086CE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15185  0086D0  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 15186                           
 15187                           ;menu.c: 883: clear_row2();
 15188  0086D4  EC67  F04B         	call	_clear_row2	;wreg free
 15189                           
 15190                           ;menu.c: 884: Lcd_Print_String(LCD_STRINGS[(slidepotsCCMenu.selector % slidepotsCCMenu.n
      +                          umber) + slidepotsCCMenu.address]);
 15191  0086D8  0101               	movlb	1	; () banked
 15192  0086DA  514D               	movf	_slidepotsCCMenu& (0+255),w,b
 15193  0086DC  6EE6               	movwf	postinc1,c
 15194  0086DE  514F               	movf	(_slidepotsCCMenu+2)& (0+255),w,b
 15195  0086E0  6EE6               	movwf	postinc1,c
 15196  0086E2  ECC6  F040         	call	___lbmod	;wreg free
 15197  0086E6  503F               	movf	btemp,w,c
 15198  0086E8  0101               	movlb	1	; () banked
 15199  0086EA  254E               	addwf	(_slidepotsCCMenu+1)& (0+255),w,b
 15200  0086EC  0100               	movlb	0	; () banked
 15201  0086EE  6F60               	movwf	___wmul@multiplier& (0+255),b
 15202  0086F0  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 15203  0086F2  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 15204  0086F4  0E00               	movlw	0
 15205  0086F6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15206  0086F8  0E11               	movlw	17
 15207  0086FA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15208  0086FC  EC8F  F04B         	call	___wmul	;wreg free
 15209  008700  0E9E               	movlw	low _LCD_STRINGS
 15210  008702  0100               	movlb	0	; () banked
 15211  008704  2560               	addwf	?___wmul& (0+255),w,b
 15212  008706  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15213  008708  0EF3               	movlw	high _LCD_STRINGS
 15214  00870A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 15215  00870C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15216  00870E  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 15217  008712                     l3668:
 15218                           
 15219                           ;menu.c: 885: }
 15220                           ;menu.c: 886: lcd_print_once = 1;
 15221  008712  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15222  008714                     l3666:
 15223  008714  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 15224  008716  D7D1               	goto	l3667
 15225                           
 15226                           ;menu.c: 887: }
 15227                           ;menu.c: 892: unsigned char array_index = (slidepotsCCMenu.selector) + 7;
 15228  008718  0101               	movlb	1	; () banked
 15229  00871A  514F               	movf	(_slidepotsCCMenu+2)& (0+255),w,b
 15230  00871C  0F07               	addlw	7
 15231  00871E  0100               	movlb	0	; () banked
 15232  008720  6FC7               	movwf	Function_D_4@array_index& (0+255),b
 15233                           
 15234                           ; BSR set to: 0
 15235                           ;menu.c: 893: setControllerNumbers(array_index);
 15236  008722  51C7               	movf	Function_D_4@array_index& (0+255),w,b
 15237  008724  ECC1  F010         	call	_setControllerNumbers
 15238  008728  0012               	return		;funcret
 15239  00872A                     __end_of_Function_D_4:
 15240                           	opt stack 0
 15241                           tblptru	equ	0xFF8
 15242                           tblptrh	equ	0xFF7
 15243                           tblptrl	equ	0xFF6
 15244                           tablat	equ	0xFF5
 15245                           prodh	equ	0xFF4
 15246                           prodl	equ	0xFF3
 15247                           intcon	equ	0xFF2
 15248                           intcon2	equ	0xFF1
 15249                           postinc0	equ	0xFEE
 15250                           wreg	equ	0xFE8
 15251                           postinc1	equ	0xFE6
 15252                           indf2	equ	0xFDF
 15253                           postinc2	equ	0xFDE
 15254                           postdec2	equ	0xFDD
 15255                           fsr2h	equ	0xFDA
 15256                           fsr2l	equ	0xFD9
 15257                           status	equ	0xFD8
 15258                           
 15259 ;; *************** function _Function_D_3 *****************
 15260 ;; Defined at:
 15261 ;;		line 839 in file "menu.c"
 15262 ;; Parameters:    Size  Location     Type
 15263 ;;		None
 15264 ;; Auto vars:     Size  Location     Type
 15265 ;;  array_index     1  103[BANK0 ] unsigned char 
 15266 ;; Return value:  Size  Location     Type
 15267 ;;                  1    wreg      void 
 15268 ;; Registers used:
 15269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15270 ;; Tracked objects:
 15271 ;;		On entry : 0/0
 15272 ;;		On exit  : 0/0
 15273 ;;		Unchanged: 0/0
 15274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15276 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15278 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15279 ;;Total ram usage:        1 bytes
 15280 ;; Hardware stack levels used:    1
 15281 ;; Hardware stack levels required when called:   16
 15282 ;; This function calls:
 15283 ;;		_Lcd_Print_String
 15284 ;;		___lbmod
 15285 ;;		___wmul
 15286 ;;		_clear_row1
 15287 ;;		_clear_row2
 15288 ;;		_setControllerNumbers
 15289 ;;		_un_block_code
 15290 ;; This function is called by:
 15291 ;;		_Function_D
 15292 ;; This function uses a non-reentrant model
 15293 ;;
 15294                           
 15295                           	psect	text44
 15296  008892                     __ptext44:
 15297                           	opt stack 0
 15298  008892                     _Function_D_3:
 15299                           	opt stack 12
 15300                           
 15301                           ;menu.c: 841: which_screen = POTS_CC_MENU;
 15302                           
 15303                           ;incstack = 0
 15304  008892  0E11               	movlw	17
 15305  008894  6E4F               	movwf	_which_screen,c
 15306                           
 15307                           ;menu.c: 843: lcd_print_once = 0;
 15308  008896  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15309                           
 15310                           ;menu.c: 844: encoder_click = 0;
 15311  008898  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15312                           
 15313                           ;menu.c: 846: while(encoder_click == 0) {
 15314  00889A  D02D               	goto	l3659
 15315  00889C                     
 15316                           ;menu.c: 850: un_block_code();
 15317  00889C  EC10  F04C         	call	_un_block_code	;wreg free
 15318                           
 15319                           ;menu.c: 852: if (lcd_print_once == 0) {
 15320  0088A0  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15321  0088A2  D028               	goto	l3661
 15322                           
 15323                           ;menu.c: 853: clear_row1();
 15324  0088A4  EC7B  F04B         	call	_clear_row1	;wreg free
 15325                           
 15326                           ;menu.c: 854: Lcd_Print_String("Set Pots CC#:");
 15327  0088A8  0EC4               	movlw	low STR_31
 15328  0088AA  0100               	movlb	0	; () banked
 15329  0088AC  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15330  0088AE  0EFE               	movlw	high STR_31
 15331  0088B0  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15332  0088B2  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 15333                           
 15334                           ;menu.c: 855: clear_row2();
 15335  0088B6  EC67  F04B         	call	_clear_row2	;wreg free
 15336                           
 15337                           ;menu.c: 856: Lcd_Print_String(LCD_STRINGS[(potsCCMenu.selector % potsCCMenu.number) + p
      +                          otsCCMenu.address]);
 15338  0088BA  0101               	movlb	1	; () banked
 15339  0088BC  5150               	movf	_potsCCMenu& (0+255),w,b
 15340  0088BE  6EE6               	movwf	postinc1,c
 15341  0088C0  5152               	movf	(_potsCCMenu+2)& (0+255),w,b
 15342  0088C2  6EE6               	movwf	postinc1,c
 15343  0088C4  ECC6  F040         	call	___lbmod	;wreg free
 15344  0088C8  503F               	movf	btemp,w,c
 15345  0088CA  0101               	movlb	1	; () banked
 15346  0088CC  2551               	addwf	(_potsCCMenu+1)& (0+255),w,b
 15347  0088CE  0100               	movlb	0	; () banked
 15348  0088D0  6F60               	movwf	___wmul@multiplier& (0+255),b
 15349  0088D2  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 15350  0088D4  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 15351  0088D6  0E00               	movlw	0
 15352  0088D8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15353  0088DA  0E11               	movlw	17
 15354  0088DC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15355  0088DE  EC8F  F04B         	call	___wmul	;wreg free
 15356  0088E2  0E9E               	movlw	low _LCD_STRINGS
 15357  0088E4  0100               	movlb	0	; () banked
 15358  0088E6  2560               	addwf	?___wmul& (0+255),w,b
 15359  0088E8  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15360  0088EA  0EF3               	movlw	high _LCD_STRINGS
 15361  0088EC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 15362  0088EE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15363  0088F0  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 15364  0088F4                     l3661:
 15365                           
 15366                           ;menu.c: 857: }
 15367                           ;menu.c: 858: lcd_print_once = 1;
 15368  0088F4  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15369  0088F6                     l3659:
 15370  0088F6  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 15371  0088F8  D7D1               	goto	l3660
 15372                           
 15373                           ;menu.c: 859: }
 15374                           ;menu.c: 861: unsigned char array_index = potsCCMenu.selector;
 15375  0088FA  C152  F0C7         	movff	_potsCCMenu+2,Function_D_3@array_index
 15376                           
 15377                           ;menu.c: 862: setControllerNumbers(array_index);
 15378  0088FE  0100               	movlb	0	; () banked
 15379  008900  51C7               	movf	Function_D_3@array_index& (0+255),w,b
 15380  008902  ECC1  F010         	call	_setControllerNumbers
 15381  008906  0012               	return		;funcret
 15382  008908                     __end_of_Function_D_3:
 15383                           	opt stack 0
 15384                           tblptru	equ	0xFF8
 15385                           tblptrh	equ	0xFF7
 15386                           tblptrl	equ	0xFF6
 15387                           tablat	equ	0xFF5
 15388                           prodh	equ	0xFF4
 15389                           prodl	equ	0xFF3
 15390                           intcon	equ	0xFF2
 15391                           intcon2	equ	0xFF1
 15392                           postinc0	equ	0xFEE
 15393                           wreg	equ	0xFE8
 15394                           postinc1	equ	0xFE6
 15395                           indf2	equ	0xFDF
 15396                           postinc2	equ	0xFDE
 15397                           postdec2	equ	0xFDD
 15398                           fsr2h	equ	0xFDA
 15399                           fsr2l	equ	0xFD9
 15400                           status	equ	0xFD8
 15401                           
 15402 ;; *************** function _setControllerNumbers *****************
 15403 ;; Defined at:
 15404 ;;		line 125 in file "menu.c"
 15405 ;; Parameters:    Size  Location     Type
 15406 ;;  array_index     1    wreg     unsigned char 
 15407 ;; Auto vars:     Size  Location     Type
 15408 ;;  array_index     1   15[BANK0 ] unsigned char 
 15409 ;; Return value:  Size  Location     Type
 15410 ;;                  1    wreg      void 
 15411 ;; Registers used:
 15412 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh, cstack
 15413 ;; Tracked objects:
 15414 ;;		On entry : 0/0
 15415 ;;		On exit  : 0/0
 15416 ;;		Unchanged: 0/0
 15417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15420 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15421 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15422 ;;Total ram usage:        2 bytes
 15423 ;; Hardware stack levels used:    1
 15424 ;; Hardware stack levels required when called:    8
 15425 ;; This function calls:
 15426 ;;		_Lcd_Print_String
 15427 ;;		_Lcd_Set_Cursor
 15428 ;;		_int2string
 15429 ;; This function is called by:
 15430 ;;		_Function_D_3
 15431 ;;		_Function_D_4
 15432 ;;		_Function_D_5
 15433 ;;		_initializeControllerNumbers
 15434 ;; This function uses a non-reentrant model
 15435 ;;
 15436                           
 15437                           	psect	text45
 15438  002182                     __ptext45:
 15439                           	opt stack 0
 15440  002182                     _setControllerNumbers:
 15441                           	opt stack 19
 15442                           
 15443                           ;incstack = 0
 15444                           ;setControllerNumbers@array_index stored from wreg
 15445  002182  0100               	movlb	0	; () banked
 15446  002184  6F6F               	movwf	setControllerNumbers@array_index& (0+255),b
 15447                           
 15448                           ;menu.c: 127: which_screen = BLANK;
 15449  002186  0E00               	movlw	0
 15450  002188  6E4F               	movwf	_which_screen,c
 15451                           
 15452                           ;menu.c: 128: lcd_print_once = 0;
 15453  00218A  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15454                           
 15455                           ;menu.c: 129: encoder_click = 0;
 15456  00218C  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15457                           
 15458                           ;menu.c: 131: while(encoder_click == 0) {
 15459  00218E  D271               	goto	l3493
 15460  002190                     l3466:
 15461                           
 15462                           ;menu.c: 136: if(lcd_print_once == 0) {
 15463  002190  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15464  002192  D1CF               	goto	l3487
 15465                           
 15466                           ;menu.c: 138: if (encoder_direction == 0x10) {
 15467  002194  0E10               	movlw	16
 15468  002196  1836               	xorwf	_encoder_direction,w,c
 15469  002198  A4D8               	btfss	status,2,c
 15470  00219A  D075               	goto	l3468
 15471                           
 15472                           ;menu.c: 140: if(inputPotsArray[array_index].controller_resolution == 0){
 15473  00219C  0100               	movlb	0	; () banked
 15474  00219E  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15475  0021A0  0D03               	mullw	3
 15476  0021A2  0E88               	movlw	low _inputPotsArray
 15477  0021A4  24F3               	addwf	prodl,w,c
 15478  0021A6  6ED9               	movwf	fsr2l,c
 15479  0021A8  0E02               	movlw	high _inputPotsArray
 15480  0021AA  20F4               	addwfc	prodh,w,c
 15481  0021AC  6EDA               	movwf	fsr2h,c
 15482  0021AE  0102               	movlb	2	; () banked
 15483  0021B0  B0DF               	btfsc	indf2,0,c
 15484  0021B2  D03C               	goto	l3471
 15485                           
 15486                           ; BSR set to: 2
 15487                           ;menu.c: 141: if(inputPotsArray[array_index].controller_number < 119) {
 15488  0021B4  0100               	movlb	0	; () banked
 15489  0021B6  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15490  0021B8  0D03               	mullw	3
 15491  0021BA  0E01               	movlw	1
 15492  0021BC  26F3               	addwf	prodl,f,c
 15493  0021BE  0E00               	movlw	0
 15494  0021C0  22F4               	addwfc	prodh,f,c
 15495  0021C2  0E88               	movlw	low _inputPotsArray
 15496  0021C4  24F3               	addwf	prodl,w,c
 15497  0021C6  6ED9               	movwf	fsr2l,c
 15498  0021C8  0E02               	movlw	high _inputPotsArray
 15499  0021CA  20F4               	addwfc	prodh,w,c
 15500  0021CC  6EDA               	movwf	fsr2h,c
 15501  0021CE  50DF               	movf	indf2,w,c
 15502  0021D0  0A80               	xorlw	128
 15503  0021D2  0F09               	addlw	-247
 15504  0021D4  B0D8               	btfsc	status,0,c
 15505  0021D6  D02A               	goto	l3471
 15506                           
 15507                           ; BSR set to: 0
 15508                           ;menu.c: 142: inputPotsArray[array_index].controller_number++;
 15509  0021D8  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15510  0021DA  0D03               	mullw	3
 15511  0021DC  0E01               	movlw	1
 15512  0021DE  26F3               	addwf	prodl,f,c
 15513  0021E0  0E00               	movlw	0
 15514  0021E2  22F4               	addwfc	prodh,f,c
 15515  0021E4  0E88               	movlw	low _inputPotsArray
 15516  0021E6  24F3               	addwf	prodl,w,c
 15517  0021E8  6ED9               	movwf	fsr2l,c
 15518  0021EA  0E02               	movlw	high _inputPotsArray
 15519  0021EC  20F4               	addwfc	prodh,w,c
 15520  0021EE  6EDA               	movwf	fsr2h,c
 15521  0021F0  2ADF               	incf	indf2,f,c
 15522                           
 15523                           ;menu.c: 143: if(inputPotsArray[array_index].controller_number == 0){inputPotsArray[arra
      +                          y_index].controller_number = 64;}
 15524  0021F2  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15525  0021F4  0D03               	mullw	3
 15526  0021F6  0E01               	movlw	1
 15527  0021F8  26F3               	addwf	prodl,f,c
 15528  0021FA  0E00               	movlw	0
 15529  0021FC  22F4               	addwfc	prodh,f,c
 15530  0021FE  0E88               	movlw	low _inputPotsArray
 15531  002200  24F3               	addwf	prodl,w,c
 15532  002202  6ED9               	movwf	fsr2l,c
 15533  002204  0E02               	movlw	high _inputPotsArray
 15534  002206  20F4               	addwfc	prodh,w,c
 15535  002208  6EDA               	movwf	fsr2h,c
 15536  00220A  50DF               	movf	indf2,w,c
 15537  00220C  A4D8               	btfss	status,2,c
 15538  00220E  D00E               	goto	l3471
 15539                           
 15540                           ; BSR set to: 0
 15541  002210  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15542  002212  0D03               	mullw	3
 15543  002214  0E01               	movlw	1
 15544  002216  26F3               	addwf	prodl,f,c
 15545  002218  0E00               	movlw	0
 15546  00221A  22F4               	addwfc	prodh,f,c
 15547  00221C  0E88               	movlw	low _inputPotsArray
 15548  00221E  24F3               	addwf	prodl,w,c
 15549  002220  6ED9               	movwf	fsr2l,c
 15550  002222  0E02               	movlw	high _inputPotsArray
 15551  002224  20F4               	addwfc	prodh,w,c
 15552  002226  6EDA               	movwf	fsr2h,c
 15553  002228  0E40               	movlw	64
 15554  00222A  6EDF               	movwf	indf2,c
 15555  00222C                     l3471:
 15556                           
 15557                           ;menu.c: 144: }
 15558                           ;menu.c: 145: }
 15559                           ;menu.c: 147: if(inputPotsArray[array_index].controller_resolution == 1){
 15560                           
 15561                           ; BSR set to: 0
 15562                           
 15563                           ; BSR set to: 0
 15564  00222C  0100               	movlb	0	; () banked
 15565  00222E  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15566  002230  0D03               	mullw	3
 15567  002232  0E88               	movlw	low _inputPotsArray
 15568  002234  24F3               	addwf	prodl,w,c
 15569  002236  6ED9               	movwf	fsr2l,c
 15570  002238  0E02               	movlw	high _inputPotsArray
 15571  00223A  20F4               	addwfc	prodh,w,c
 15572  00223C  6EDA               	movwf	fsr2h,c
 15573  00223E  0102               	movlb	2	; () banked
 15574  002240  A0DF               	btfss	indf2,0,c
 15575  002242  D01F               	goto	l3473
 15576                           
 15577                           ; BSR set to: 2
 15578                           ;menu.c: 148: if(inputPotsArray[array_index].controller_number_two_byte < 31) {
 15579  002244  0100               	movlb	0	; () banked
 15580  002246  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15581  002248  0D03               	mullw	3
 15582  00224A  0E02               	movlw	2
 15583  00224C  26F3               	addwf	prodl,f,c
 15584  00224E  0E00               	movlw	0
 15585  002250  22F4               	addwfc	prodh,f,c
 15586  002252  0E88               	movlw	low _inputPotsArray
 15587  002254  24F3               	addwf	prodl,w,c
 15588  002256  6ED9               	movwf	fsr2l,c
 15589  002258  0E02               	movlw	high _inputPotsArray
 15590  00225A  20F4               	addwfc	prodh,w,c
 15591  00225C  6EDA               	movwf	fsr2h,c
 15592  00225E  50DF               	movf	indf2,w,c
 15593  002260  0A80               	xorlw	128
 15594  002262  0F61               	addlw	-159
 15595  002264  B0D8               	btfsc	status,0,c
 15596  002266  D00D               	goto	l3473
 15597                           
 15598                           ; BSR set to: 0
 15599                           ;menu.c: 149: inputPotsArray[array_index].controller_number_two_byte++;
 15600  002268  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15601  00226A  0D03               	mullw	3
 15602  00226C  0E02               	movlw	2
 15603  00226E  26F3               	addwf	prodl,f,c
 15604  002270  0E00               	movlw	0
 15605  002272  22F4               	addwfc	prodh,f,c
 15606  002274  0E88               	movlw	low _inputPotsArray
 15607  002276  24F3               	addwf	prodl,w,c
 15608  002278  6ED9               	movwf	fsr2l,c
 15609  00227A  0E02               	movlw	high _inputPotsArray
 15610  00227C  20F4               	addwfc	prodh,w,c
 15611  00227E  6EDA               	movwf	fsr2h,c
 15612  002280  2ADF               	incf	indf2,f,c
 15613  002282                     l3473:
 15614                           
 15615                           ;menu.c: 150: }
 15616                           ;menu.c: 151: }
 15617                           ;menu.c: 153: encoder_direction = 0x00;
 15618                           
 15619                           ; BSR set to: 0
 15620                           
 15621                           ; BSR set to: 0
 15622  002282  0E00               	movlw	0
 15623  002284  6E36               	movwf	_encoder_direction,c
 15624  002286                     l3468:
 15625                           
 15626                           ;menu.c: 154: }
 15627                           ;menu.c: 158: if (encoder_direction == 0x20) {
 15628  002286  0E20               	movlw	32
 15629  002288  1836               	xorwf	_encoder_direction,w,c
 15630  00228A  A4D8               	btfss	status,2,c
 15631  00228C  D0B2               	goto	l3474
 15632                           
 15633                           ;menu.c: 160: if(inputPotsArray[array_index].controller_resolution == 0){
 15634  00228E  0100               	movlb	0	; () banked
 15635  002290  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15636  002292  0D03               	mullw	3
 15637  002294  0E88               	movlw	low _inputPotsArray
 15638  002296  24F3               	addwf	prodl,w,c
 15639  002298  6ED9               	movwf	fsr2l,c
 15640  00229A  0E02               	movlw	high _inputPotsArray
 15641  00229C  20F4               	addwfc	prodh,w,c
 15642  00229E  6EDA               	movwf	fsr2h,c
 15643  0022A0  0102               	movlb	2	; () banked
 15644  0022A2  B0DF               	btfsc	indf2,0,c
 15645  0022A4  D079               	goto	l3479
 15646                           
 15647                           ; BSR set to: 2
 15648                           ;menu.c: 162: if(inputPotsArray[array_index].controller_number > -3) {
 15649  0022A6  0100               	movlb	0	; () banked
 15650  0022A8  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15651  0022AA  0D03               	mullw	3
 15652  0022AC  0E01               	movlw	1
 15653  0022AE  26F3               	addwf	prodl,f,c
 15654  0022B0  0E00               	movlw	0
 15655  0022B2  22F4               	addwfc	prodh,f,c
 15656  0022B4  0E88               	movlw	low _inputPotsArray
 15657  0022B6  24F3               	addwf	prodl,w,c
 15658  0022B8  6ED9               	movwf	fsr2l,c
 15659  0022BA  0E02               	movlw	high _inputPotsArray
 15660  0022BC  20F4               	addwfc	prodh,w,c
 15661  0022BE  6EDA               	movwf	fsr2h,c
 15662  0022C0  50DF               	movf	indf2,w,c
 15663  0022C2  0A80               	xorlw	128
 15664  0022C4  0F82               	addlw	130
 15665  0022C6  A0D8               	btfss	status,0,c
 15666  0022C8  D00D               	goto	l3476
 15667                           
 15668                           ; BSR set to: 0
 15669                           ;menu.c: 163: inputPotsArray[array_index].controller_number--;
 15670  0022CA  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15671  0022CC  0D03               	mullw	3
 15672  0022CE  0E01               	movlw	1
 15673  0022D0  26F3               	addwf	prodl,f,c
 15674  0022D2  0E00               	movlw	0
 15675  0022D4  22F4               	addwfc	prodh,f,c
 15676  0022D6  0E88               	movlw	low _inputPotsArray
 15677  0022D8  24F3               	addwf	prodl,w,c
 15678  0022DA  6ED9               	movwf	fsr2l,c
 15679  0022DC  0E02               	movlw	high _inputPotsArray
 15680  0022DE  20F4               	addwfc	prodh,w,c
 15681  0022E0  6EDA               	movwf	fsr2h,c
 15682  0022E2  06DF               	decf	indf2,f,c
 15683  0022E4                     l3476:
 15684                           
 15685                           ; BSR set to: 0
 15686                           ;menu.c: 164: }
 15687                           ;menu.c: 165: if(inputPotsArray[array_index].controller_number == 61) {inputPotsArray[ar
      +                          ray_index].controller_number = -3;}
 15688  0022E4  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15689  0022E6  0D03               	mullw	3
 15690  0022E8  0E01               	movlw	1
 15691  0022EA  26F3               	addwf	prodl,f,c
 15692  0022EC  0E00               	movlw	0
 15693  0022EE  22F4               	addwfc	prodh,f,c
 15694  0022F0  0E88               	movlw	low _inputPotsArray
 15695  0022F2  24F3               	addwf	prodl,w,c
 15696  0022F4  6ED9               	movwf	fsr2l,c
 15697  0022F6  0E02               	movlw	high _inputPotsArray
 15698  0022F8  20F4               	addwfc	prodh,w,c
 15699  0022FA  6EDA               	movwf	fsr2h,c
 15700  0022FC  0E3D               	movlw	61
 15701  0022FE  18DE               	xorwf	postinc2,w,c
 15702  002300  A4D8               	btfss	status,2,c
 15703  002302  D00E               	goto	l3477
 15704                           
 15705                           ; BSR set to: 0
 15706  002304  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15707  002306  0D03               	mullw	3
 15708  002308  0E01               	movlw	1
 15709  00230A  26F3               	addwf	prodl,f,c
 15710  00230C  0E00               	movlw	0
 15711  00230E  22F4               	addwfc	prodh,f,c
 15712  002310  0E88               	movlw	low _inputPotsArray
 15713  002312  24F3               	addwf	prodl,w,c
 15714  002314  6ED9               	movwf	fsr2l,c
 15715  002316  0E02               	movlw	high _inputPotsArray
 15716  002318  20F4               	addwfc	prodh,w,c
 15717  00231A  6EDA               	movwf	fsr2h,c
 15718  00231C  0EFD               	movlw	253
 15719  00231E  6EDF               	movwf	indf2,c
 15720  002320                     l3477:
 15721                           
 15722                           ; BSR set to: 0
 15723                           ;menu.c: 166: if(inputPotsArray[array_index].controller_number == 62) {inputPotsArray[ar
      +                          ray_index].controller_number = -2;}
 15724  002320  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15725  002322  0D03               	mullw	3
 15726  002324  0E01               	movlw	1
 15727  002326  26F3               	addwf	prodl,f,c
 15728  002328  0E00               	movlw	0
 15729  00232A  22F4               	addwfc	prodh,f,c
 15730  00232C  0E88               	movlw	low _inputPotsArray
 15731  00232E  24F3               	addwf	prodl,w,c
 15732  002330  6ED9               	movwf	fsr2l,c
 15733  002332  0E02               	movlw	high _inputPotsArray
 15734  002334  20F4               	addwfc	prodh,w,c
 15735  002336  6EDA               	movwf	fsr2h,c
 15736  002338  0E3E               	movlw	62
 15737  00233A  18DE               	xorwf	postinc2,w,c
 15738  00233C  A4D8               	btfss	status,2,c
 15739  00233E  D00E               	goto	l3478
 15740                           
 15741                           ; BSR set to: 0
 15742  002340  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15743  002342  0D03               	mullw	3
 15744  002344  0E01               	movlw	1
 15745  002346  26F3               	addwf	prodl,f,c
 15746  002348  0E00               	movlw	0
 15747  00234A  22F4               	addwfc	prodh,f,c
 15748  00234C  0E88               	movlw	low _inputPotsArray
 15749  00234E  24F3               	addwf	prodl,w,c
 15750  002350  6ED9               	movwf	fsr2l,c
 15751  002352  0E02               	movlw	high _inputPotsArray
 15752  002354  20F4               	addwfc	prodh,w,c
 15753  002356  6EDA               	movwf	fsr2h,c
 15754  002358  0EFE               	movlw	254
 15755  00235A  6EDF               	movwf	indf2,c
 15756  00235C                     l3478:
 15757                           
 15758                           ; BSR set to: 0
 15759                           ;menu.c: 167: if(inputPotsArray[array_index].controller_number == 63) {inputPotsArray[ar
      +                          ray_index].controller_number = -1;}
 15760  00235C  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15761  00235E  0D03               	mullw	3
 15762  002360  0E01               	movlw	1
 15763  002362  26F3               	addwf	prodl,f,c
 15764  002364  0E00               	movlw	0
 15765  002366  22F4               	addwfc	prodh,f,c
 15766  002368  0E88               	movlw	low _inputPotsArray
 15767  00236A  24F3               	addwf	prodl,w,c
 15768  00236C  6ED9               	movwf	fsr2l,c
 15769  00236E  0E02               	movlw	high _inputPotsArray
 15770  002370  20F4               	addwfc	prodh,w,c
 15771  002372  6EDA               	movwf	fsr2h,c
 15772  002374  0E3F               	movlw	63
 15773  002376  18DE               	xorwf	postinc2,w,c
 15774  002378  A4D8               	btfss	status,2,c
 15775  00237A  D00E               	goto	l3479
 15776                           
 15777                           ; BSR set to: 0
 15778  00237C  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15779  00237E  0D03               	mullw	3
 15780  002380  0E01               	movlw	1
 15781  002382  26F3               	addwf	prodl,f,c
 15782  002384  0E00               	movlw	0
 15783  002386  22F4               	addwfc	prodh,f,c
 15784  002388  0E88               	movlw	low _inputPotsArray
 15785  00238A  24F3               	addwf	prodl,w,c
 15786  00238C  6ED9               	movwf	fsr2l,c
 15787  00238E  0E02               	movlw	high _inputPotsArray
 15788  002390  20F4               	addwfc	prodh,w,c
 15789  002392  6EDA               	movwf	fsr2h,c
 15790  002394  0EFF               	movlw	255
 15791  002396  6EDF               	movwf	indf2,c
 15792  002398                     l3479:
 15793                           
 15794                           ;menu.c: 169: }
 15795                           ;menu.c: 171: if(inputPotsArray[array_index].controller_resolution == 1){
 15796                           
 15797                           ; BSR set to: 0
 15798  002398  0100               	movlb	0	; () banked
 15799  00239A  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15800  00239C  0D03               	mullw	3
 15801  00239E  0E88               	movlw	low _inputPotsArray
 15802  0023A0  24F3               	addwf	prodl,w,c
 15803  0023A2  6ED9               	movwf	fsr2l,c
 15804  0023A4  0E02               	movlw	high _inputPotsArray
 15805  0023A6  20F4               	addwfc	prodh,w,c
 15806  0023A8  6EDA               	movwf	fsr2h,c
 15807  0023AA  0102               	movlb	2	; () banked
 15808  0023AC  A0DF               	btfss	indf2,0,c
 15809  0023AE  D01F               	goto	l3481
 15810                           
 15811                           ; BSR set to: 2
 15812                           ;menu.c: 173: if(inputPotsArray[array_index].controller_number_two_byte > -3) {
 15813  0023B0  0100               	movlb	0	; () banked
 15814  0023B2  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15815  0023B4  0D03               	mullw	3
 15816  0023B6  0E02               	movlw	2
 15817  0023B8  26F3               	addwf	prodl,f,c
 15818  0023BA  0E00               	movlw	0
 15819  0023BC  22F4               	addwfc	prodh,f,c
 15820  0023BE  0E88               	movlw	low _inputPotsArray
 15821  0023C0  24F3               	addwf	prodl,w,c
 15822  0023C2  6ED9               	movwf	fsr2l,c
 15823  0023C4  0E02               	movlw	high _inputPotsArray
 15824  0023C6  20F4               	addwfc	prodh,w,c
 15825  0023C8  6EDA               	movwf	fsr2h,c
 15826  0023CA  50DF               	movf	indf2,w,c
 15827  0023CC  0A80               	xorlw	128
 15828  0023CE  0F82               	addlw	130
 15829  0023D0  A0D8               	btfss	status,0,c
 15830  0023D2  D00D               	goto	l3481
 15831                           
 15832                           ; BSR set to: 0
 15833                           ;menu.c: 174: inputPotsArray[array_index].controller_number_two_byte--;
 15834  0023D4  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15835  0023D6  0D03               	mullw	3
 15836  0023D8  0E02               	movlw	2
 15837  0023DA  26F3               	addwf	prodl,f,c
 15838  0023DC  0E00               	movlw	0
 15839  0023DE  22F4               	addwfc	prodh,f,c
 15840  0023E0  0E88               	movlw	low _inputPotsArray
 15841  0023E2  24F3               	addwf	prodl,w,c
 15842  0023E4  6ED9               	movwf	fsr2l,c
 15843  0023E6  0E02               	movlw	high _inputPotsArray
 15844  0023E8  20F4               	addwfc	prodh,w,c
 15845  0023EA  6EDA               	movwf	fsr2h,c
 15846  0023EC  06DF               	decf	indf2,f,c
 15847  0023EE                     l3481:
 15848                           
 15849                           ;menu.c: 175: }
 15850                           ;menu.c: 177: }
 15851                           ;menu.c: 179: encoder_direction = 0x00;
 15852                           
 15853                           ; BSR set to: 0
 15854                           
 15855                           ; BSR set to: 0
 15856  0023EE  0E00               	movlw	0
 15857  0023F0  6E36               	movwf	_encoder_direction,c
 15858  0023F2                     l3474:
 15859                           
 15860                           ;menu.c: 180: }
 15861                           ;menu.c: 182: if(inputPotsArray[array_index].controller_resolution == 0){
 15862  0023F2  0100               	movlb	0	; () banked
 15863  0023F4  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15864  0023F6  0D03               	mullw	3
 15865  0023F8  0E88               	movlw	low _inputPotsArray
 15866  0023FA  24F3               	addwf	prodl,w,c
 15867  0023FC  6ED9               	movwf	fsr2l,c
 15868  0023FE  0E02               	movlw	high _inputPotsArray
 15869  002400  20F4               	addwfc	prodh,w,c
 15870  002402  6EDA               	movwf	fsr2h,c
 15871  002404  0102               	movlb	2	; () banked
 15872  002406  B0DF               	btfsc	indf2,0,c
 15873  002408  D094               	goto	l3487
 15874                           
 15875                           ; BSR set to: 2
 15876                           ;menu.c: 184: if(inputPotsArray[array_index].controller_number >= 0) {
 15877  00240A  0100               	movlb	0	; () banked
 15878  00240C  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15879  00240E  0D03               	mullw	3
 15880  002410  0E01               	movlw	1
 15881  002412  26F3               	addwf	prodl,f,c
 15882  002414  0E00               	movlw	0
 15883  002416  22F4               	addwfc	prodh,f,c
 15884  002418  0E88               	movlw	low _inputPotsArray
 15885  00241A  24F3               	addwf	prodl,w,c
 15886  00241C  6ED9               	movwf	fsr2l,c
 15887  00241E  0E02               	movlw	high _inputPotsArray
 15888  002420  20F4               	addwfc	prodh,w,c
 15889  002422  6EDA               	movwf	fsr2h,c
 15890  002424  0E00               	movlw	0
 15891  002426  BEDB               	btfsc	plusw2,7,c
 15892  002428  D02E               	goto	l3483
 15893                           
 15894                           ; BSR set to: 0
 15895                           ;menu.c: 186: int2string(inputPotsArray[array_index].controller_number);
 15896  00242A  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15897  00242C  0D03               	mullw	3
 15898  00242E  0E01               	movlw	1
 15899  002430  26F3               	addwf	prodl,f,c
 15900  002432  0E00               	movlw	0
 15901  002434  22F4               	addwfc	prodh,f,c
 15902  002436  0E88               	movlw	low _inputPotsArray
 15903  002438  24F3               	addwf	prodl,w,c
 15904  00243A  6ED9               	movwf	fsr2l,c
 15905  00243C  0E02               	movlw	high _inputPotsArray
 15906  00243E  20F4               	addwfc	prodh,w,c
 15907  002440  6EDA               	movwf	fsr2h,c
 15908  002442  50DF               	movf	indf2,w,c
 15909  002444  6F60               	movwf	int2string@number& (0+255),b
 15910  002446  6B61               	clrf	(int2string@number+1)& (0+255),b
 15911  002448  BF60               	btfsc	int2string@number& (0+255),7,b
 15912  00244A  0761               	decf	(int2string@number+1)& (0+255),f,b
 15913  00244C  EC6D  F03A         	call	_int2string	;wreg free
 15914                           
 15915                           ;menu.c: 188: Lcd_Set_Cursor(2,7);
 15916  002450  0E07               	movlw	7
 15917  002452  0100               	movlb	0	; () banked
 15918  002454  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 15919  002456  0E02               	movlw	2
 15920  002458  EC42  F047         	call	_Lcd_Set_Cursor
 15921                           
 15922                           ;menu.c: 189: Lcd_Print_String("         ");
 15923  00245C  0E6B               	movlw	low (STR_10+7)
 15924  00245E  0100               	movlb	0	; () banked
 15925  002460  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15926  002462  0EFD               	movlw	high (STR_10+7)
 15927  002464  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15928  002466  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 15929                           
 15930                           ;menu.c: 190: Lcd_Set_Cursor(2,13);
 15931  00246A  0E0D               	movlw	13
 15932  00246C  0100               	movlb	0	; () banked
 15933  00246E  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 15934  002470  0E02               	movlw	2
 15935  002472  EC42  F047         	call	_Lcd_Set_Cursor
 15936                           
 15937                           ;menu.c: 191: Lcd_Print_String(string2display);
 15938  002476  0E92               	movlw	low _string2display
 15939  002478  0100               	movlb	0	; () banked
 15940  00247A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15941  00247C  0E01               	movlw	high _string2display
 15942  00247E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15943  002480  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 15944                           
 15945                           ;menu.c: 192: }
 15946  002484  D056               	goto	l3487
 15947  002486                     l3483:
 15948                           
 15949                           ;menu.c: 193: else {
 15950                           ;menu.c: 194: if(inputPotsArray[array_index].controller_number == -1) {
 15951  002486  0100               	movlb	0	; () banked
 15952  002488  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15953  00248A  0D03               	mullw	3
 15954  00248C  0E01               	movlw	1
 15955  00248E  26F3               	addwf	prodl,f,c
 15956  002490  0E00               	movlw	0
 15957  002492  22F4               	addwfc	prodh,f,c
 15958  002494  0E88               	movlw	low _inputPotsArray
 15959  002496  24F3               	addwf	prodl,w,c
 15960  002498  6ED9               	movwf	fsr2l,c
 15961  00249A  0E02               	movlw	high _inputPotsArray
 15962  00249C  20F4               	addwfc	prodh,w,c
 15963  00249E  6EDA               	movwf	fsr2h,c
 15964  0024A0  28DE               	incf	postinc2,w,c
 15965  0024A2  A4D8               	btfss	status,2,c
 15966  0024A4  D00C               	goto	l3485
 15967                           
 15968                           ; BSR set to: 0
 15969                           ;menu.c: 195: Lcd_Set_Cursor(2,7);
 15970  0024A6  0E07               	movlw	7
 15971  0024A8  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 15972  0024AA  0E02               	movlw	2
 15973  0024AC  EC42  F047         	call	_Lcd_Set_Cursor
 15974                           
 15975                           ;menu.c: 196: Lcd_Print_String("  VELOCITY");
 15976  0024B0  0E9E               	movlw	low STR_13
 15977  0024B2  0100               	movlb	0	; () banked
 15978  0024B4  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15979  0024B6  0EFF               	movlw	high STR_13
 15980  0024B8  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15981  0024BA  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 15982  0024BE                     l3485:
 15983                           
 15984                           ;menu.c: 197: }
 15985                           ;menu.c: 199: if(inputPotsArray[array_index].controller_number == -2) {
 15986  0024BE  0100               	movlb	0	; () banked
 15987  0024C0  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15988  0024C2  0D03               	mullw	3
 15989  0024C4  0E01               	movlw	1
 15990  0024C6  26F3               	addwf	prodl,f,c
 15991  0024C8  0E00               	movlw	0
 15992  0024CA  22F4               	addwfc	prodh,f,c
 15993  0024CC  0E88               	movlw	low _inputPotsArray
 15994  0024CE  24F3               	addwf	prodl,w,c
 15995  0024D0  6ED9               	movwf	fsr2l,c
 15996  0024D2  0E02               	movlw	high _inputPotsArray
 15997  0024D4  20F4               	addwfc	prodh,w,c
 15998  0024D6  6EDA               	movwf	fsr2h,c
 15999  0024D8  0EFE               	movlw	254
 16000  0024DA  18DE               	xorwf	postinc2,w,c
 16001  0024DC  A4D8               	btfss	status,2,c
 16002  0024DE  D00C               	goto	l3486
 16003                           
 16004                           ; BSR set to: 0
 16005                           ;menu.c: 200: Lcd_Set_Cursor(2,7);
 16006  0024E0  0E07               	movlw	7
 16007  0024E2  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16008  0024E4  0E02               	movlw	2
 16009  0024E6  EC42  F047         	call	_Lcd_Set_Cursor
 16010                           
 16011                           ;menu.c: 201: Lcd_Print_String(" PITCHBEND");
 16012  0024EA  0E88               	movlw	low STR_14
 16013  0024EC  0100               	movlb	0	; () banked
 16014  0024EE  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16015  0024F0  0EFF               	movlw	high STR_14
 16016  0024F2  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16017  0024F4  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 16018  0024F8                     l3486:
 16019                           
 16020                           ;menu.c: 202: }
 16021                           ;menu.c: 203: if(inputPotsArray[array_index].controller_number == -3) {
 16022  0024F8  0100               	movlb	0	; () banked
 16023  0024FA  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 16024  0024FC  0D03               	mullw	3
 16025  0024FE  0E01               	movlw	1
 16026  002500  26F3               	addwf	prodl,f,c
 16027  002502  0E00               	movlw	0
 16028  002504  22F4               	addwfc	prodh,f,c
 16029  002506  0E88               	movlw	low _inputPotsArray
 16030  002508  24F3               	addwf	prodl,w,c
 16031  00250A  6ED9               	movwf	fsr2l,c
 16032  00250C  0E02               	movlw	high _inputPotsArray
 16033  00250E  20F4               	addwfc	prodh,w,c
 16034  002510  6EDA               	movwf	fsr2h,c
 16035  002512  0EFD               	movlw	253
 16036  002514  18DE               	xorwf	postinc2,w,c
 16037  002516  A4D8               	btfss	status,2,c
 16038  002518  D00C               	goto	l3487
 16039                           
 16040                           ; BSR set to: 0
 16041                           ;menu.c: 204: Lcd_Set_Cursor(2,7);
 16042  00251A  0E07               	movlw	7
 16043  00251C  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16044  00251E  0E02               	movlw	2
 16045  002520  EC42  F047         	call	_Lcd_Set_Cursor
 16046                           
 16047                           ;menu.c: 205: Lcd_Print_String(" MOD.WHEEL");
 16048  002524  0E93               	movlw	low STR_15
 16049  002526  0100               	movlb	0	; () banked
 16050  002528  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16051  00252A  0EFF               	movlw	high STR_15
 16052  00252C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16053  00252E  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 16054  002532                     l3487:
 16055                           
 16056                           ;menu.c: 206: }
 16057                           ;menu.c: 207: }
 16058                           ;menu.c: 208: }
 16059                           ;menu.c: 209: }
 16060                           ;menu.c: 211: if(inputPotsArray[array_index].controller_resolution == 1){
 16061  002532  0100               	movlb	0	; () banked
 16062  002534  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 16063  002536  0D03               	mullw	3
 16064  002538  0E88               	movlw	low _inputPotsArray
 16065  00253A  24F3               	addwf	prodl,w,c
 16066  00253C  6ED9               	movwf	fsr2l,c
 16067  00253E  0E02               	movlw	high _inputPotsArray
 16068  002540  20F4               	addwfc	prodh,w,c
 16069  002542  6EDA               	movwf	fsr2h,c
 16070  002544  0102               	movlb	2	; () banked
 16071  002546  A0DF               	btfss	indf2,0,c
 16072  002548  D094               	goto	l3493
 16073                           
 16074                           ; BSR set to: 2
 16075                           ;menu.c: 213: if(inputPotsArray[array_index].controller_number_two_byte >= 0) {
 16076  00254A  0100               	movlb	0	; () banked
 16077  00254C  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 16078  00254E  0D03               	mullw	3
 16079  002550  0E02               	movlw	2
 16080  002552  26F3               	addwf	prodl,f,c
 16081  002554  0E00               	movlw	0
 16082  002556  22F4               	addwfc	prodh,f,c
 16083  002558  0E88               	movlw	low _inputPotsArray
 16084  00255A  24F3               	addwf	prodl,w,c
 16085  00255C  6ED9               	movwf	fsr2l,c
 16086  00255E  0E02               	movlw	high _inputPotsArray
 16087  002560  20F4               	addwfc	prodh,w,c
 16088  002562  6EDA               	movwf	fsr2h,c
 16089  002564  0E00               	movlw	0
 16090  002566  BEDB               	btfsc	plusw2,7,c
 16091  002568  D02E               	goto	l3489
 16092                           
 16093                           ; BSR set to: 0
 16094                           ;menu.c: 215: int2string(inputPotsArray[array_index].controller_number_two_byte);
 16095  00256A  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 16096  00256C  0D03               	mullw	3
 16097  00256E  0E02               	movlw	2
 16098  002570  26F3               	addwf	prodl,f,c
 16099  002572  0E00               	movlw	0
 16100  002574  22F4               	addwfc	prodh,f,c
 16101  002576  0E88               	movlw	low _inputPotsArray
 16102  002578  24F3               	addwf	prodl,w,c
 16103  00257A  6ED9               	movwf	fsr2l,c
 16104  00257C  0E02               	movlw	high _inputPotsArray
 16105  00257E  20F4               	addwfc	prodh,w,c
 16106  002580  6EDA               	movwf	fsr2h,c
 16107  002582  50DF               	movf	indf2,w,c
 16108  002584  6F60               	movwf	int2string@number& (0+255),b
 16109  002586  6B61               	clrf	(int2string@number+1)& (0+255),b
 16110  002588  BF60               	btfsc	int2string@number& (0+255),7,b
 16111  00258A  0761               	decf	(int2string@number+1)& (0+255),f,b
 16112  00258C  EC6D  F03A         	call	_int2string	;wreg free
 16113                           
 16114                           ;menu.c: 217: Lcd_Set_Cursor(2,7);
 16115  002590  0E07               	movlw	7
 16116  002592  0100               	movlb	0	; () banked
 16117  002594  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16118  002596  0E02               	movlw	2
 16119  002598  EC42  F047         	call	_Lcd_Set_Cursor
 16120                           
 16121                           ;menu.c: 218: Lcd_Print_String("         ");
 16122  00259C  0E6B               	movlw	low (STR_10+7)
 16123  00259E  0100               	movlb	0	; () banked
 16124  0025A0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16125  0025A2  0EFD               	movlw	high (STR_10+7)
 16126  0025A4  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16127  0025A6  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 16128                           
 16129                           ;menu.c: 219: Lcd_Set_Cursor(2,13);
 16130  0025AA  0E0D               	movlw	13
 16131  0025AC  0100               	movlb	0	; () banked
 16132  0025AE  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16133  0025B0  0E02               	movlw	2
 16134  0025B2  EC42  F047         	call	_Lcd_Set_Cursor
 16135                           
 16136                           ;menu.c: 220: Lcd_Print_String(string2display);
 16137  0025B6  0E92               	movlw	low _string2display
 16138  0025B8  0100               	movlb	0	; () banked
 16139  0025BA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16140  0025BC  0E01               	movlw	high _string2display
 16141  0025BE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16142  0025C0  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 16143                           
 16144                           ;menu.c: 221: }
 16145  0025C4  D056               	goto	l3493
 16146  0025C6                     l3489:
 16147                           
 16148                           ;menu.c: 222: else {
 16149                           ;menu.c: 223: if(inputPotsArray[array_index].controller_number_two_byte == -1) {
 16150  0025C6  0100               	movlb	0	; () banked
 16151  0025C8  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 16152  0025CA  0D03               	mullw	3
 16153  0025CC  0E02               	movlw	2
 16154  0025CE  26F3               	addwf	prodl,f,c
 16155  0025D0  0E00               	movlw	0
 16156  0025D2  22F4               	addwfc	prodh,f,c
 16157  0025D4  0E88               	movlw	low _inputPotsArray
 16158  0025D6  24F3               	addwf	prodl,w,c
 16159  0025D8  6ED9               	movwf	fsr2l,c
 16160  0025DA  0E02               	movlw	high _inputPotsArray
 16161  0025DC  20F4               	addwfc	prodh,w,c
 16162  0025DE  6EDA               	movwf	fsr2h,c
 16163  0025E0  28DE               	incf	postinc2,w,c
 16164  0025E2  A4D8               	btfss	status,2,c
 16165  0025E4  D00C               	goto	l3491
 16166                           
 16167                           ; BSR set to: 0
 16168                           ;menu.c: 224: Lcd_Set_Cursor(2,7);
 16169  0025E6  0E07               	movlw	7
 16170  0025E8  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16171  0025EA  0E02               	movlw	2
 16172  0025EC  EC42  F047         	call	_Lcd_Set_Cursor
 16173                           
 16174                           ;menu.c: 225: Lcd_Print_String("  VELOCITY");
 16175  0025F0  0E9E               	movlw	low STR_13
 16176  0025F2  0100               	movlb	0	; () banked
 16177  0025F4  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16178  0025F6  0EFF               	movlw	high STR_13
 16179  0025F8  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16180  0025FA  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 16181  0025FE                     l3491:
 16182                           
 16183                           ;menu.c: 226: }
 16184                           ;menu.c: 228: if(inputPotsArray[array_index].controller_number_two_byte == -2) {
 16185  0025FE  0100               	movlb	0	; () banked
 16186  002600  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 16187  002602  0D03               	mullw	3
 16188  002604  0E02               	movlw	2
 16189  002606  26F3               	addwf	prodl,f,c
 16190  002608  0E00               	movlw	0
 16191  00260A  22F4               	addwfc	prodh,f,c
 16192  00260C  0E88               	movlw	low _inputPotsArray
 16193  00260E  24F3               	addwf	prodl,w,c
 16194  002610  6ED9               	movwf	fsr2l,c
 16195  002612  0E02               	movlw	high _inputPotsArray
 16196  002614  20F4               	addwfc	prodh,w,c
 16197  002616  6EDA               	movwf	fsr2h,c
 16198  002618  0EFE               	movlw	254
 16199  00261A  18DE               	xorwf	postinc2,w,c
 16200  00261C  A4D8               	btfss	status,2,c
 16201  00261E  D00C               	goto	l3492
 16202                           
 16203                           ; BSR set to: 0
 16204                           ;menu.c: 229: Lcd_Set_Cursor(2,7);
 16205  002620  0E07               	movlw	7
 16206  002622  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16207  002624  0E02               	movlw	2
 16208  002626  EC42  F047         	call	_Lcd_Set_Cursor
 16209                           
 16210                           ;menu.c: 230: Lcd_Print_String(" PITCHBEND");
 16211  00262A  0E88               	movlw	low STR_14
 16212  00262C  0100               	movlb	0	; () banked
 16213  00262E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16214  002630  0EFF               	movlw	high STR_14
 16215  002632  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16216  002634  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 16217  002638                     l3492:
 16218                           
 16219                           ;menu.c: 231: }
 16220                           ;menu.c: 232: if(inputPotsArray[array_index].controller_number_two_byte == -3) {
 16221  002638  0100               	movlb	0	; () banked
 16222  00263A  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 16223  00263C  0D03               	mullw	3
 16224  00263E  0E02               	movlw	2
 16225  002640  26F3               	addwf	prodl,f,c
 16226  002642  0E00               	movlw	0
 16227  002644  22F4               	addwfc	prodh,f,c
 16228  002646  0E88               	movlw	low _inputPotsArray
 16229  002648  24F3               	addwf	prodl,w,c
 16230  00264A  6ED9               	movwf	fsr2l,c
 16231  00264C  0E02               	movlw	high _inputPotsArray
 16232  00264E  20F4               	addwfc	prodh,w,c
 16233  002650  6EDA               	movwf	fsr2h,c
 16234  002652  0EFD               	movlw	253
 16235  002654  18DE               	xorwf	postinc2,w,c
 16236  002656  A4D8               	btfss	status,2,c
 16237  002658  D00C               	goto	l3493
 16238                           
 16239                           ; BSR set to: 0
 16240                           ;menu.c: 233: Lcd_Set_Cursor(2,7);
 16241  00265A  0E07               	movlw	7
 16242  00265C  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16243  00265E  0E02               	movlw	2
 16244  002660  EC42  F047         	call	_Lcd_Set_Cursor
 16245                           
 16246                           ;menu.c: 234: Lcd_Print_String(" MOD.WHEEL");
 16247  002664  0E93               	movlw	low STR_15
 16248  002666  0100               	movlb	0	; () banked
 16249  002668  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16250  00266A  0EFF               	movlw	high STR_15
 16251  00266C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16252  00266E  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 16253  002672                     l3493:
 16254  002672  B405               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 16255  002674  0012               	return	
 16256  002676  D58C               	goto	l3466
 16257  002678                     __end_of_setControllerNumbers:
 16258                           	opt stack 0
 16259                           tblptru	equ	0xFF8
 16260                           tblptrh	equ	0xFF7
 16261                           tblptrl	equ	0xFF6
 16262                           tablat	equ	0xFF5
 16263                           prodh	equ	0xFF4
 16264                           prodl	equ	0xFF3
 16265                           intcon	equ	0xFF2
 16266                           intcon2	equ	0xFF1
 16267                           postinc0	equ	0xFEE
 16268                           wreg	equ	0xFE8
 16269                           postinc1	equ	0xFE6
 16270                           indf2	equ	0xFDF
 16271                           postinc2	equ	0xFDE
 16272                           postdec2	equ	0xFDD
 16273                           plusw2	equ	0xFDB
 16274                           fsr2h	equ	0xFDA
 16275                           fsr2l	equ	0xFD9
 16276                           status	equ	0xFD8
 16277                           
 16278 ;; *************** function _Function_D_2 *****************
 16279 ;; Defined at:
 16280 ;;		line 811 in file "menu.c"
 16281 ;; Parameters:    Size  Location     Type
 16282 ;;		None
 16283 ;; Auto vars:     Size  Location     Type
 16284 ;;		None
 16285 ;; Return value:  Size  Location     Type
 16286 ;;                  1    wreg      void 
 16287 ;; Registers used:
 16288 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16289 ;; Tracked objects:
 16290 ;;		On entry : 0/0
 16291 ;;		On exit  : 0/0
 16292 ;;		Unchanged: 0/0
 16293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16297 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16298 ;;Total ram usage:        0 bytes
 16299 ;; Hardware stack levels used:    1
 16300 ;; Hardware stack levels required when called:   16
 16301 ;; This function calls:
 16302 ;;		_Busy_eep
 16303 ;;		_Lcd_Print_String
 16304 ;;		_Lcd_Set_Cursor
 16305 ;;		_Write_b_eep
 16306 ;;		_calculate_alpha
 16307 ;;		_int2string
 16308 ;;		_un_block_code
 16309 ;; This function is called by:
 16310 ;;		_Function_D
 16311 ;; This function uses a non-reentrant model
 16312 ;;
 16313                           
 16314                           	psect	text46
 16315  008EE6                     __ptext46:
 16316                           	opt stack 0
 16317  008EE6                     _Function_D_2:
 16318                           	opt stack 12
 16319                           
 16320                           ;menu.c: 813: which_screen = POTS_ALPHA_MENU;
 16321                           
 16322                           ;incstack = 0
 16323  008EE6  0E10               	movlw	16
 16324  008EE8  6E4F               	movwf	_which_screen,c
 16325                           
 16326                           ;menu.c: 814: lcd_print_once = 0;
 16327  008EEA  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 16328                           
 16329                           ;menu.c: 815: encoder_click = 0;
 16330  008EEC  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 16331                           
 16332                           ;menu.c: 817: potsAlphaMenu.selector = ema_integer;
 16333  008EEE  C0FE  F155         	movff	_ema_integer,_potsAlphaMenu+2
 16334                           
 16335                           ;menu.c: 819: while(encoder_click == 0) {
 16336  008EF2  D016               	goto	l3653
 16337  008EF4                     
 16338                           ;menu.c: 823: un_block_code();
 16339  008EF4  EC10  F04C         	call	_un_block_code	;wreg free
 16340                           
 16341                           ;menu.c: 825: lcd_print_once = 1;
 16342  008EF8  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 16343                           
 16344                           ;menu.c: 827: int2string(potsAlphaMenu.selector);
 16345  008EFA  C155  F060         	movff	_potsAlphaMenu+2,int2string@number
 16346  008EFE  0100               	movlb	0	; () banked
 16347  008F00  6B61               	clrf	(int2string@number+1)& (0+255),b
 16348  008F02  EC6D  F03A         	call	_int2string	;wreg free
 16349                           
 16350                           ;menu.c: 828: Lcd_Set_Cursor(2,13);
 16351  008F06  0E0D               	movlw	13
 16352  008F08  0100               	movlb	0	; () banked
 16353  008F0A  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16354  008F0C  0E02               	movlw	2
 16355  008F0E  EC42  F047         	call	_Lcd_Set_Cursor
 16356                           
 16357                           ;menu.c: 829: Lcd_Print_String(string2display);
 16358  008F12  0E92               	movlw	low _string2display
 16359  008F14  0100               	movlb	0	; () banked
 16360  008F16  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16361  008F18  0E01               	movlw	high _string2display
 16362  008F1A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16363  008F1C  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 16364  008F20                     l3653:
 16365  008F20  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 16366  008F22  D7E8               	goto	l3654
 16367                           
 16368                           ;menu.c: 830: }
 16369                           ;menu.c: 832: ema_integer = potsAlphaMenu.selector;
 16370  008F24  C155  F0FE         	movff	_potsAlphaMenu+2,_ema_integer
 16371                           
 16372                           ;menu.c: 833: (Busy_eep(), Write_b_eep(0x03,ema_integer));
 16373  008F28  EC5F  F04C         	call	_Busy_eep	;wreg free
 16374  008F2C  0E00               	movlw	0
 16375  008F2E  0100               	movlb	0	; () banked
 16376  008F30  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 16377  008F32  0E03               	movlw	3
 16378  008F34  6F60               	movwf	Write_b_eep@badd& (0+255),b
 16379  008F36  C0FE  F062         	movff	_ema_integer,Write_b_eep@bdat
 16380  008F3A  ECD1  F049         	call	_Write_b_eep	;wreg free
 16381                           
 16382                           ;menu.c: 834: calculate_alpha();
 16383  008F3E  ECF7  F048         	call	_calculate_alpha	;wreg free
 16384  008F42  0012               	return		;funcret
 16385  008F44                     __end_of_Function_D_2:
 16386                           	opt stack 0
 16387                           tblptru	equ	0xFF8
 16388                           tblptrh	equ	0xFF7
 16389                           tblptrl	equ	0xFF6
 16390                           tablat	equ	0xFF5
 16391                           prodh	equ	0xFF4
 16392                           prodl	equ	0xFF3
 16393                           intcon	equ	0xFF2
 16394                           intcon2	equ	0xFF1
 16395                           postinc0	equ	0xFEE
 16396                           wreg	equ	0xFE8
 16397                           postinc1	equ	0xFE6
 16398                           indf2	equ	0xFDF
 16399                           postinc2	equ	0xFDE
 16400                           postdec2	equ	0xFDD
 16401                           plusw2	equ	0xFDB
 16402                           fsr2h	equ	0xFDA
 16403                           fsr2l	equ	0xFD9
 16404                           status	equ	0xFD8
 16405                           
 16406 ;; *************** function _calculate_alpha *****************
 16407 ;; Defined at:
 16408 ;;		line 24 in file "potentiometers.c"
 16409 ;; Parameters:    Size  Location     Type
 16410 ;;		None
 16411 ;; Auto vars:     Size  Location     Type
 16412 ;;		None
 16413 ;; Return value:  Size  Location     Type
 16414 ;;                  1    wreg      void 
 16415 ;; Registers used:
 16416 ;;		wreg, status,2, status,0, cstack
 16417 ;; Tracked objects:
 16418 ;;		On entry : 0/0
 16419 ;;		On exit  : 0/0
 16420 ;;		Unchanged: 0/0
 16421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16426 ;;Total ram usage:        0 bytes
 16427 ;; Hardware stack levels used:    1
 16428 ;; Hardware stack levels required when called:    6
 16429 ;; This function calls:
 16430 ;;		___fldiv
 16431 ;;		___xxtofl
 16432 ;; This function is called by:
 16433 ;;		_Function_D_2
 16434 ;;		_main
 16435 ;; This function uses a non-reentrant model
 16436 ;;
 16437                           
 16438                           	psect	text47
 16439  0091EE                     __ptext47:
 16440                           	opt stack 0
 16441  0091EE                     _calculate_alpha:
 16442                           	opt stack 21
 16443                           
 16444                           ;potentiometers.c: 25: (float)ema_alpha = (ema_integer / 100.0);
 16445                           
 16446                           ;incstack = 0
 16447  0091EE  0100               	movlb	0	; () banked
 16448  0091F0  51FE               	movf	_ema_integer& (0+255),w,b
 16449  0091F2  6F60               	movwf	___xxtofl@val& (0+255),b
 16450  0091F4  6B61               	clrf	(___xxtofl@val+1)& (0+255),b
 16451  0091F6  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 16452  0091F8  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 16453  0091FA  0E00               	movlw	0
 16454  0091FC  EC57  F02F         	call	___xxtofl
 16455  009200  C060  F087         	movff	?___xxtofl,___fldiv@b
 16456  009204  C061  F088         	movff	?___xxtofl+1,___fldiv@b+1
 16457  009208  C062  F089         	movff	?___xxtofl+2,___fldiv@b+2
 16458  00920C  C063  F08A         	movff	?___xxtofl+3,___fldiv@b+3
 16459  009210  0E00               	movlw	0
 16460  009212  0100               	movlb	0	; () banked
 16461  009214  6F8B               	movwf	___fldiv@a& (0+255),b
 16462  009216  0E00               	movlw	0
 16463  009218  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 16464  00921A  0EC8               	movlw	200
 16465  00921C  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 16466  00921E  0E42               	movlw	66
 16467  009220  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 16468  009222  EC82  F01D         	call	___fldiv	;wreg free
 16469  009226  C087  F104         	movff	?___fldiv,_ema_alpha
 16470  00922A  C088  F105         	movff	?___fldiv+1,_ema_alpha+1
 16471  00922E  C089  F106         	movff	?___fldiv+2,_ema_alpha+2
 16472  009232  C08A  F107         	movff	?___fldiv+3,_ema_alpha+3
 16473  009236  0012               	return		;funcret
 16474  009238                     __end_of_calculate_alpha:
 16475                           	opt stack 0
 16476                           tblptru	equ	0xFF8
 16477                           tblptrh	equ	0xFF7
 16478                           tblptrl	equ	0xFF6
 16479                           tablat	equ	0xFF5
 16480                           prodh	equ	0xFF4
 16481                           prodl	equ	0xFF3
 16482                           intcon	equ	0xFF2
 16483                           intcon2	equ	0xFF1
 16484                           postinc0	equ	0xFEE
 16485                           wreg	equ	0xFE8
 16486                           postinc1	equ	0xFE6
 16487                           indf2	equ	0xFDF
 16488                           postinc2	equ	0xFDE
 16489                           postdec2	equ	0xFDD
 16490                           plusw2	equ	0xFDB
 16491                           fsr2h	equ	0xFDA
 16492                           fsr2l	equ	0xFD9
 16493                           status	equ	0xFD8
 16494                           
 16495 ;; *************** function ___fldiv *****************
 16496 ;; Defined at:
 16497 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcdiv.c"
 16498 ;; Parameters:    Size  Location     Type
 16499 ;;  b               4   39[BANK0 ] void 
 16500 ;;  a               4   43[BANK0 ] void 
 16501 ;; Auto vars:     Size  Location     Type
 16502 ;;  grs             4   58[BANK0 ] unsigned long 
 16503 ;;  rem             4   52[BANK0 ] unsigned long 
 16504 ;;  new_exp         2   56[BANK0 ] int 
 16505 ;;  aexp            1   63[BANK0 ] unsigned char 
 16506 ;;  bexp            1   62[BANK0 ] unsigned char 
 16507 ;;  sign            1   51[BANK0 ] unsigned char 
 16508 ;; Return value:  Size  Location     Type
 16509 ;;                  4   39[BANK0 ] unsigned char 
 16510 ;; Registers used:
 16511 ;;		wreg, status,2, status,0
 16512 ;; Tracked objects:
 16513 ;;		On entry : 0/0
 16514 ;;		On exit  : 0/0
 16515 ;;		Unchanged: 0/0
 16516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16517 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16518 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16519 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16520 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16521 ;;Total ram usage:       25 bytes
 16522 ;; Hardware stack levels used:    1
 16523 ;; Hardware stack levels required when called:    5
 16524 ;; This function calls:
 16525 ;;		Nothing
 16526 ;; This function is called by:
 16527 ;;		_calculate_alpha
 16528 ;;		_calculate_pulse_length
 16529 ;; This function uses a non-reentrant model
 16530 ;;
 16531                           
 16532                           	psect	text48
 16533  003B04                     __ptext48:
 16534                           	opt stack 0
 16535  003B04                     ___fldiv:
 16536                           	opt stack 22
 16537                           
 16538                           ;incstack = 0
 16539  003B04  0100               	movlb	0	; () banked
 16540  003B06  518A               	movf	(___fldiv@b+3)& (0+255),w,b
 16541  003B08  0B80               	andlw	128
 16542  003B0A  6F93               	movwf	___fldiv@sign& (0+255),b
 16543  003B0C  518A               	movf	(___fldiv@b+3)& (0+255),w,b
 16544  003B0E  258A               	addwf	(___fldiv@b+3)& (0+255),w,b
 16545  003B10  6F9E               	movwf	___fldiv@bexp& (0+255),b
 16546                           
 16547                           ; BSR set to: 0
 16548  003B12  BF89               	btfsc	(___fldiv@b+2)& (0+255),7,b
 16549                           
 16550                           ; BSR set to: 0
 16551  003B14  819E               	bsf	___fldiv@bexp& (0+255),0,b
 16552                           
 16553                           ; BSR set to: 0
 16554                           
 16555                           ; BSR set to: 0
 16556  003B16  519E               	movf	___fldiv@bexp& (0+255),w,b
 16557  003B18  B4D8               	btfsc	status,2,c
 16558  003B1A  D00D               	goto	l6116
 16559                           
 16560                           ; BSR set to: 0
 16561  003B1C  299E               	incf	___fldiv@bexp& (0+255),w,b
 16562  003B1E  A4D8               	btfss	status,2,c
 16563  003B20  D008               	goto	l6117
 16564                           
 16565                           ; BSR set to: 0
 16566  003B22  0E00               	movlw	0
 16567  003B24  6F87               	movwf	___fldiv@b& (0+255),b
 16568  003B26  0E00               	movlw	0
 16569  003B28  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16570  003B2A  0E00               	movlw	0
 16571  003B2C  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16572  003B2E  0E00               	movlw	0
 16573  003B30  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16574  003B32                     l6117:
 16575                           
 16576                           ; BSR set to: 0
 16577                           
 16578                           ; BSR set to: 0
 16579  003B32  8F89               	bsf	(___fldiv@b+2)& (0+255),7,b
 16580  003B34  D006               	goto	L2
 16581  003B36                     l6116:
 16582                           
 16583                           ; BSR set to: 0
 16584                           
 16585                           ; BSR set to: 0
 16586  003B36  0E00               	movlw	0
 16587  003B38  6F87               	movwf	___fldiv@b& (0+255),b
 16588  003B3A  0E00               	movlw	0
 16589  003B3C  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16590  003B3E  0E00               	movlw	0
 16591  003B40  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16592  003B42                     L2:
 16593  003B42  0E00               	movlw	0
 16594  003B44  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16595                           
 16596                           ; BSR set to: 0
 16597                           
 16598                           ; BSR set to: 0
 16599  003B46  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 16600  003B48  0B80               	andlw	128
 16601  003B4A  1B93               	xorwf	___fldiv@sign& (0+255),f,b
 16602                           
 16603                           ; BSR set to: 0
 16604  003B4C  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 16605  003B4E  258E               	addwf	(___fldiv@a+3)& (0+255),w,b
 16606  003B50  6F9F               	movwf	___fldiv@aexp& (0+255),b
 16607                           
 16608                           ; BSR set to: 0
 16609  003B52  BF8D               	btfsc	(___fldiv@a+2)& (0+255),7,b
 16610                           
 16611                           ; BSR set to: 0
 16612  003B54  819F               	bsf	___fldiv@aexp& (0+255),0,b
 16613                           
 16614                           ; BSR set to: 0
 16615                           
 16616                           ; BSR set to: 0
 16617  003B56  519F               	movf	___fldiv@aexp& (0+255),w,b
 16618  003B58  B4D8               	btfsc	status,2,c
 16619  003B5A  D00D               	goto	l6120
 16620                           
 16621                           ; BSR set to: 0
 16622  003B5C  299F               	incf	___fldiv@aexp& (0+255),w,b
 16623  003B5E  A4D8               	btfss	status,2,c
 16624  003B60  D008               	goto	l6121
 16625                           
 16626                           ; BSR set to: 0
 16627  003B62  0E00               	movlw	0
 16628  003B64  6F8B               	movwf	___fldiv@a& (0+255),b
 16629  003B66  0E00               	movlw	0
 16630  003B68  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 16631  003B6A  0E00               	movlw	0
 16632  003B6C  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 16633  003B6E  0E00               	movlw	0
 16634  003B70  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 16635  003B72                     l6121:
 16636                           
 16637                           ; BSR set to: 0
 16638                           
 16639                           ; BSR set to: 0
 16640  003B72  8F8D               	bsf	(___fldiv@a+2)& (0+255),7,b
 16641  003B74  D006               	goto	L3
 16642  003B76                     l6120:
 16643                           
 16644                           ; BSR set to: 0
 16645                           
 16646                           ; BSR set to: 0
 16647  003B76  0E00               	movlw	0
 16648  003B78  6F8B               	movwf	___fldiv@a& (0+255),b
 16649  003B7A  0E00               	movlw	0
 16650  003B7C  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 16651  003B7E  0E00               	movlw	0
 16652  003B80  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 16653  003B82                     L3:
 16654  003B82  0E00               	movlw	0
 16655  003B84  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 16656                           
 16657                           ; BSR set to: 0
 16658                           
 16659                           ; BSR set to: 0
 16660  003B86  518B               	movf	___fldiv@a& (0+255),w,b
 16661  003B88  118C               	iorwf	(___fldiv@a+1)& (0+255),w,b
 16662  003B8A  118D               	iorwf	(___fldiv@a+2)& (0+255),w,b
 16663  003B8C  118E               	iorwf	(___fldiv@a+3)& (0+255),w,b
 16664  003B8E  A4D8               	btfss	status,2,c
 16665  003B90  D015               	goto	l6123
 16666                           
 16667                           ; BSR set to: 0
 16668  003B92  0E00               	movlw	0
 16669  003B94  6F87               	movwf	___fldiv@b& (0+255),b
 16670  003B96  0E00               	movlw	0
 16671  003B98  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16672  003B9A  0E00               	movlw	0
 16673  003B9C  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16674  003B9E  0E00               	movlw	0
 16675  003BA0  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16676                           
 16677                           ; BSR set to: 0
 16678  003BA2  0E80               	movlw	128
 16679  003BA4  1389               	iorwf	(___fldiv@b+2)& (0+255),f,b
 16680  003BA6  0E7F               	movlw	127
 16681  003BA8  138A               	iorwf	(___fldiv@b+3)& (0+255),f,b
 16682                           
 16683                           ; BSR set to: 0
 16684  003BAA  C087  F087         	movff	___fldiv@b,?___fldiv
 16685  003BAE  C088  F088         	movff	___fldiv@b+1,?___fldiv+1
 16686  003BB2  C089  F089         	movff	___fldiv@b+2,?___fldiv+2
 16687  003BB6  C08A  F08A         	movff	___fldiv@b+3,?___fldiv+3
 16688                           
 16689                           ; BSR set to: 0
 16690  003BBA  0012               	return	
 16691  003BBC                     l6123:
 16692                           
 16693                           ; BSR set to: 0
 16694                           
 16695                           ; BSR set to: 0
 16696  003BBC  519E               	movf	___fldiv@bexp& (0+255),w,b
 16697  003BBE  A4D8               	btfss	status,2,c
 16698  003BC0  D011               	goto	l6125
 16699                           
 16700                           ; BSR set to: 0
 16701  003BC2  0E00               	movlw	0
 16702  003BC4  6F87               	movwf	___fldiv@b& (0+255),b
 16703  003BC6  0E00               	movlw	0
 16704  003BC8  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16705  003BCA  0E00               	movlw	0
 16706  003BCC  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16707  003BCE  0E00               	movlw	0
 16708  003BD0  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16709                           
 16710                           ; BSR set to: 0
 16711  003BD2  C087  F087         	movff	___fldiv@b,?___fldiv
 16712  003BD6  C088  F088         	movff	___fldiv@b+1,?___fldiv+1
 16713  003BDA  C089  F089         	movff	___fldiv@b+2,?___fldiv+2
 16714  003BDE  C08A  F08A         	movff	___fldiv@b+3,?___fldiv+3
 16715                           
 16716                           ; BSR set to: 0
 16717  003BE2  0012               	return	
 16718  003BE4                     l6125:
 16719                           
 16720                           ; BSR set to: 0
 16721                           
 16722                           ; BSR set to: 0
 16723  003BE4  519F               	movf	___fldiv@aexp& (0+255),w,b
 16724  003BE6  6F8F               	movwf	??___fldiv& (0+255),b
 16725  003BE8  6B90               	clrf	(??___fldiv+1)& (0+255),b
 16726  003BEA  1F8F               	comf	??___fldiv& (0+255),f,b
 16727  003BEC  1F90               	comf	(??___fldiv+1)& (0+255),f,b
 16728  003BEE  4B8F               	infsnz	??___fldiv& (0+255),f,b
 16729  003BF0  2B90               	incf	(??___fldiv+1)& (0+255),f,b
 16730  003BF2  519E               	movf	___fldiv@bexp& (0+255),w,b
 16731  003BF4  6F91               	movwf	(??___fldiv+2)& (0+255),b
 16732  003BF6  6B92               	clrf	(??___fldiv+3)& (0+255),b
 16733  003BF8  518F               	movf	??___fldiv& (0+255),w,b
 16734  003BFA  2791               	addwf	(??___fldiv+2)& (0+255),f,b
 16735  003BFC  5190               	movf	(??___fldiv+1)& (0+255),w,b
 16736  003BFE  2392               	addwfc	(??___fldiv+3)& (0+255),f,b
 16737  003C00  0E7F               	movlw	127
 16738  003C02  2591               	addwf	(??___fldiv+2)& (0+255),w,b
 16739  003C04  6F98               	movwf	___fldiv@new_exp& (0+255),b
 16740  003C06  0E00               	movlw	0
 16741  003C08  2192               	addwfc	(??___fldiv+3)& (0+255),w,b
 16742  003C0A  6F99               	movwf	(___fldiv@new_exp+1)& (0+255),b
 16743                           
 16744                           ; BSR set to: 0
 16745  003C0C  C087  F094         	movff	___fldiv@b,___fldiv@rem
 16746  003C10  C088  F095         	movff	___fldiv@b+1,___fldiv@rem+1
 16747  003C14  C089  F096         	movff	___fldiv@b+2,___fldiv@rem+2
 16748  003C18  C08A  F097         	movff	___fldiv@b+3,___fldiv@rem+3
 16749                           
 16750                           ; BSR set to: 0
 16751  003C1C  0E00               	movlw	0
 16752  003C1E  6F87               	movwf	___fldiv@b& (0+255),b
 16753  003C20  0E00               	movlw	0
 16754  003C22  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16755  003C24  0E00               	movlw	0
 16756  003C26  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16757  003C28  0E00               	movlw	0
 16758  003C2A  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16759                           
 16760                           ; BSR set to: 0
 16761  003C2C  0E00               	movlw	0
 16762  003C2E  6F9A               	movwf	___fldiv@grs& (0+255),b
 16763  003C30  0E00               	movlw	0
 16764  003C32  6F9B               	movwf	(___fldiv@grs+1)& (0+255),b
 16765  003C34  0E00               	movlw	0
 16766  003C36  6F9C               	movwf	(___fldiv@grs+2)& (0+255),b
 16767  003C38  0E00               	movlw	0
 16768  003C3A  6F9D               	movwf	(___fldiv@grs+3)& (0+255),b
 16769                           
 16770                           ; BSR set to: 0
 16771  003C3C  0E00               	movlw	0
 16772  003C3E  6F9F               	movwf	___fldiv@aexp& (0+255),b
 16773  003C40  D028               	goto	l6126
 16774  003C42                     
 16775                           ; BSR set to: 0
 16776                           
 16777                           ; BSR set to: 0
 16778  003C42  519F               	movf	___fldiv@aexp& (0+255),w,b
 16779  003C44  B4D8               	btfsc	status,2,c
 16780  003C46  D011               	goto	l6128
 16781                           
 16782                           ; BSR set to: 0
 16783  003C48  90D8               	bcf	status,0,c
 16784  003C4A  3794               	rlcf	___fldiv@rem& (0+255),f,b
 16785  003C4C  3795               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 16786  003C4E  3796               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 16787  003C50  3797               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 16788  003C52  90D8               	bcf	status,0,c
 16789  003C54  3787               	rlcf	___fldiv@b& (0+255),f,b
 16790  003C56  3788               	rlcf	(___fldiv@b+1)& (0+255),f,b
 16791  003C58  3789               	rlcf	(___fldiv@b+2)& (0+255),f,b
 16792  003C5A  378A               	rlcf	(___fldiv@b+3)& (0+255),f,b
 16793                           
 16794                           ; BSR set to: 0
 16795  003C5C  BF9D               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 16796                           
 16797                           ; BSR set to: 0
 16798  003C5E  8187               	bsf	___fldiv@b& (0+255),0,b
 16799                           
 16800                           ; BSR set to: 0
 16801  003C60  90D8               	bcf	status,0,c
 16802  003C62  379A               	rlcf	___fldiv@grs& (0+255),f,b
 16803  003C64  379B               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 16804  003C66  379C               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 16805  003C68  379D               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 16806  003C6A                     l6128:
 16807                           
 16808                           ; BSR set to: 0
 16809                           
 16810                           ; BSR set to: 0
 16811  003C6A  518B               	movf	___fldiv@a& (0+255),w,b
 16812  003C6C  5D94               	subwf	___fldiv@rem& (0+255),w,b
 16813  003C6E  518C               	movf	(___fldiv@a+1)& (0+255),w,b
 16814  003C70  5995               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 16815  003C72  518D               	movf	(___fldiv@a+2)& (0+255),w,b
 16816  003C74  5996               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 16817  003C76  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 16818  003C78  5997               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 16819  003C7A  A0D8               	btfss	status,0,c
 16820  003C7C  D009               	goto	l6130
 16821                           
 16822                           ; BSR set to: 0
 16823  003C7E  8D9D               	bsf	(___fldiv@grs+3)& (0+255),6,b
 16824                           
 16825                           ; BSR set to: 0
 16826  003C80  518B               	movf	___fldiv@a& (0+255),w,b
 16827  003C82  5F94               	subwf	___fldiv@rem& (0+255),f,b
 16828  003C84  518C               	movf	(___fldiv@a+1)& (0+255),w,b
 16829  003C86  5B95               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 16830  003C88  518D               	movf	(___fldiv@a+2)& (0+255),w,b
 16831  003C8A  5B96               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 16832  003C8C  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 16833  003C8E  5B97               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 16834  003C90                     l6130:
 16835                           
 16836                           ; BSR set to: 0
 16837                           
 16838                           ; BSR set to: 0
 16839  003C90  2B9F               	incf	___fldiv@aexp& (0+255),f,b
 16840  003C92                     l6126:
 16841                           
 16842                           ; BSR set to: 0
 16843  003C92  0E19               	movlw	25
 16844  003C94  659F               	cpfsgt	___fldiv@aexp& (0+255),b
 16845  003C96  D7D5               	goto	l6127
 16846                           
 16847                           ; BSR set to: 0
 16848                           
 16849                           ; BSR set to: 0
 16850  003C98  5194               	movf	___fldiv@rem& (0+255),w,b
 16851  003C9A  1195               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 16852  003C9C  1196               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 16853  003C9E  1197               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 16854  003CA0  B4D8               	btfsc	status,2,c
 16855  003CA2  D011               	goto	l6133
 16856                           
 16857                           ; BSR set to: 0
 16858  003CA4  819A               	bsf	___fldiv@grs& (0+255),0,b
 16859                           
 16860                           ; BSR set to: 0
 16861  003CA6  D00F               	goto	l6133
 16862  003CA8                     
 16863                           ; BSR set to: 0
 16864                           
 16865                           ; BSR set to: 0
 16866  003CA8  90D8               	bcf	status,0,c
 16867  003CAA  3787               	rlcf	___fldiv@b& (0+255),f,b
 16868  003CAC  3788               	rlcf	(___fldiv@b+1)& (0+255),f,b
 16869  003CAE  3789               	rlcf	(___fldiv@b+2)& (0+255),f,b
 16870  003CB0  378A               	rlcf	(___fldiv@b+3)& (0+255),f,b
 16871                           
 16872                           ; BSR set to: 0
 16873  003CB2  BF9D               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 16874                           
 16875                           ; BSR set to: 0
 16876  003CB4  8187               	bsf	___fldiv@b& (0+255),0,b
 16877                           
 16878                           ; BSR set to: 0
 16879  003CB6  90D8               	bcf	status,0,c
 16880  003CB8  379A               	rlcf	___fldiv@grs& (0+255),f,b
 16881  003CBA  379B               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 16882  003CBC  379C               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 16883  003CBE  379D               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 16884  003CC0  0798               	decf	___fldiv@new_exp& (0+255),f,b
 16885  003CC2  A0D8               	btfss	status,0,c
 16886  003CC4  0799               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 16887  003CC6                     l6133:
 16888                           
 16889                           ; BSR set to: 0
 16890                           
 16891                           ; BSR set to: 0
 16892  003CC6  AF89               	btfss	(___fldiv@b+2)& (0+255),7,b
 16893  003CC8  D7EF               	goto	l6134
 16894                           
 16895                           ; BSR set to: 0
 16896                           
 16897                           ; BSR set to: 0
 16898  003CCA  0E00               	movlw	0
 16899  003CCC  6F9F               	movwf	___fldiv@aexp& (0+255),b
 16900                           
 16901                           ; BSR set to: 0
 16902  003CCE  AF9D               	btfss	(___fldiv@grs+3)& (0+255),7,b
 16903  003CD0  D016               	goto	l6140
 16904                           
 16905                           ; BSR set to: 0
 16906  003CD2  0EFF               	movlw	255
 16907  003CD4  159A               	andwf	___fldiv@grs& (0+255),w,b
 16908  003CD6  6F8F               	movwf	??___fldiv& (0+255),b
 16909  003CD8  0EFF               	movlw	255
 16910  003CDA  159B               	andwf	(___fldiv@grs+1)& (0+255),w,b
 16911  003CDC  6F90               	movwf	(??___fldiv+1)& (0+255),b
 16912  003CDE  0EFF               	movlw	255
 16913  003CE0  159C               	andwf	(___fldiv@grs+2)& (0+255),w,b
 16914  003CE2  6F91               	movwf	(??___fldiv+2)& (0+255),b
 16915  003CE4  0E7F               	movlw	127
 16916  003CE6  159D               	andwf	(___fldiv@grs+3)& (0+255),w,b
 16917  003CE8  6F92               	movwf	(??___fldiv+3)& (0+255),b
 16918  003CEA  518F               	movf	??___fldiv& (0+255),w,b
 16919  003CEC  1190               	iorwf	(??___fldiv+1)& (0+255),w,b
 16920  003CEE  1191               	iorwf	(??___fldiv+2)& (0+255),w,b
 16921  003CF0  1192               	iorwf	(??___fldiv+3)& (0+255),w,b
 16922  003CF2  A4D8               	btfss	status,2,c
 16923  003CF4  D002               	goto	u56500
 16924                           
 16925                           ; BSR set to: 0
 16926                           
 16927                           ; BSR set to: 0
 16928  003CF6  A187               	btfss	___fldiv@b& (0+255),0,b
 16929  003CF8  D002               	goto	l6140
 16930  003CFA                     u56500:
 16931                           
 16932                           ; BSR set to: 0
 16933  003CFA  0E01               	movlw	1
 16934  003CFC  6F9F               	movwf	___fldiv@aexp& (0+255),b
 16935  003CFE                     l6140:
 16936                           
 16937                           ; BSR set to: 0
 16938                           
 16939                           ; BSR set to: 0
 16940                           
 16941                           ; BSR set to: 0
 16942  003CFE  519F               	movf	___fldiv@aexp& (0+255),w,b
 16943  003D00  B4D8               	btfsc	status,2,c
 16944  003D02  D01F               	goto	l6142
 16945                           
 16946                           ; BSR set to: 0
 16947  003D04  0E01               	movlw	1
 16948  003D06  2787               	addwf	___fldiv@b& (0+255),f,b
 16949  003D08  0E00               	movlw	0
 16950  003D0A  2388               	addwfc	(___fldiv@b+1)& (0+255),f,b
 16951  003D0C  2389               	addwfc	(___fldiv@b+2)& (0+255),f,b
 16952  003D0E  238A               	addwfc	(___fldiv@b+3)& (0+255),f,b
 16953                           
 16954                           ; BSR set to: 0
 16955  003D10  A18A               	btfss	(___fldiv@b+3)& (0+255),0,b
 16956  003D12  D017               	goto	l6142
 16957                           
 16958                           ; BSR set to: 0
 16959  003D14  C087  F08F         	movff	___fldiv@b,??___fldiv
 16960  003D18  C088  F090         	movff	___fldiv@b+1,??___fldiv+1
 16961  003D1C  C089  F091         	movff	___fldiv@b+2,??___fldiv+2
 16962  003D20  C08A  F092         	movff	___fldiv@b+3,??___fldiv+3
 16963  003D24  3592               	rlcf	(??___fldiv+3)& (0+255),w,b
 16964  003D26  3392               	rrcf	(??___fldiv+3)& (0+255),f,b
 16965  003D28  3391               	rrcf	(??___fldiv+2)& (0+255),f,b
 16966  003D2A  3390               	rrcf	(??___fldiv+1)& (0+255),f,b
 16967  003D2C  338F               	rrcf	??___fldiv& (0+255),f,b
 16968  003D2E  C08F  F087         	movff	??___fldiv,___fldiv@b
 16969  003D32  C090  F088         	movff	??___fldiv+1,___fldiv@b+1
 16970  003D36  C091  F089         	movff	??___fldiv+2,___fldiv@b+2
 16971  003D3A  C092  F08A         	movff	??___fldiv+3,___fldiv@b+3
 16972                           
 16973                           ; BSR set to: 0
 16974  003D3E  4B98               	infsnz	___fldiv@new_exp& (0+255),f,b
 16975  003D40  2B99               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 16976  003D42                     l6142:
 16977                           
 16978                           ; BSR set to: 0
 16979                           
 16980                           ; BSR set to: 0
 16981                           
 16982                           ; BSR set to: 0
 16983  003D42  BF99               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 16984  003D44  D010               	goto	l6143
 16985  003D46  5199               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 16986  003D48  E103               	bnz	u56530
 16987  003D4A  2998               	incf	___fldiv@new_exp& (0+255),w,b
 16988  003D4C  A0D8               	btfss	status,0,c
 16989  003D4E  D00B               	goto	l6143
 16990  003D50                     u56530:
 16991                           
 16992                           ; BSR set to: 0
 16993  003D50  0E00               	movlw	0
 16994  003D52  6F99               	movwf	(___fldiv@new_exp+1)& (0+255),b
 16995  003D54  6998               	setf	___fldiv@new_exp& (0+255),b
 16996  003D56  0E00               	movlw	0
 16997  003D58  6F87               	movwf	___fldiv@b& (0+255),b
 16998  003D5A  0E00               	movlw	0
 16999  003D5C  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 17000  003D5E  0E00               	movlw	0
 17001  003D60  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 17002  003D62  0E00               	movlw	0
 17003  003D64  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 17004  003D66                     l6143:
 17005                           
 17006                           ; BSR set to: 0
 17007                           
 17008                           ; BSR set to: 0
 17009  003D66  BF99               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 17010  003D68  D005               	goto	u56540
 17011  003D6A  5199               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 17012  003D6C  E111               	bnz	l30978
 17013  003D6E  0598               	decf	___fldiv@new_exp& (0+255),w,b
 17014  003D70  B0D8               	btfsc	status,0,c
 17015  003D72  D00E               	goto	l6144
 17016  003D74                     u56540:
 17017                           
 17018                           ; BSR set to: 0
 17019  003D74  0E00               	movlw	0
 17020  003D76  6F99               	movwf	(___fldiv@new_exp+1)& (0+255),b
 17021  003D78  0E00               	movlw	0
 17022  003D7A  6F98               	movwf	___fldiv@new_exp& (0+255),b
 17023  003D7C  0E00               	movlw	0
 17024  003D7E  6F87               	movwf	___fldiv@b& (0+255),b
 17025  003D80  0E00               	movlw	0
 17026  003D82  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 17027  003D84  0E00               	movlw	0
 17028  003D86  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 17029  003D88  0E00               	movlw	0
 17030  003D8A  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 17031  003D8C  0E00               	movlw	0
 17032  003D8E  6F93               	movwf	___fldiv@sign& (0+255),b
 17033  003D90                     l6144:
 17034  003D90                     l30978:
 17035                           
 17036                           ; BSR set to: 0
 17037  003D90  C098  F09E         	movff	___fldiv@new_exp,___fldiv@bexp
 17038                           
 17039                           ; BSR set to: 0
 17040  003D94  A19E               	btfss	___fldiv@bexp& (0+255),0,b
 17041  003D96  D002               	goto	l6145
 17042                           
 17043                           ; BSR set to: 0
 17044  003D98  8F89               	bsf	(___fldiv@b+2)& (0+255),7,b
 17045  003D9A  D001               	goto	l6146
 17046  003D9C                     l6145:
 17047                           
 17048                           ; BSR set to: 0
 17049                           
 17050                           ; BSR set to: 0
 17051  003D9C  9F89               	bcf	(___fldiv@b+2)& (0+255),7,b
 17052  003D9E                     l6146:
 17053                           
 17054                           ; BSR set to: 0
 17055                           
 17056                           ; BSR set to: 0
 17057  003D9E  90D8               	bcf	status,0,c
 17058  003DA0  319E               	rrcf	___fldiv@bexp& (0+255),w,b
 17059  003DA2  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 17060                           
 17061                           ; BSR set to: 0
 17062  003DA4  5193               	movf	___fldiv@sign& (0+255),w,b
 17063  003DA6  138A               	iorwf	(___fldiv@b+3)& (0+255),f,b
 17064                           
 17065                           ; BSR set to: 0
 17066  003DA8  C087  F087         	movff	___fldiv@b,?___fldiv
 17067  003DAC  C088  F088         	movff	___fldiv@b+1,?___fldiv+1
 17068  003DB0  C089  F089         	movff	___fldiv@b+2,?___fldiv+2
 17069  003DB4  C08A  F08A         	movff	___fldiv@b+3,?___fldiv+3
 17070  003DB8  0012               	return	
 17071  003DBA                     __end_of___fldiv:
 17072                           	opt stack 0
 17073                           tblptru	equ	0xFF8
 17074                           tblptrh	equ	0xFF7
 17075                           tblptrl	equ	0xFF6
 17076                           tablat	equ	0xFF5
 17077                           prodh	equ	0xFF4
 17078                           prodl	equ	0xFF3
 17079                           intcon	equ	0xFF2
 17080                           intcon2	equ	0xFF1
 17081                           postinc0	equ	0xFEE
 17082                           wreg	equ	0xFE8
 17083                           postinc1	equ	0xFE6
 17084                           indf2	equ	0xFDF
 17085                           postinc2	equ	0xFDE
 17086                           postdec2	equ	0xFDD
 17087                           plusw2	equ	0xFDB
 17088                           fsr2h	equ	0xFDA
 17089                           fsr2l	equ	0xFD9
 17090                           status	equ	0xFD8
 17091                           
 17092 ;; *************** function _Function_D_1 *****************
 17093 ;; Defined at:
 17094 ;;		line 778 in file "menu.c"
 17095 ;; Parameters:    Size  Location     Type
 17096 ;;		None
 17097 ;; Auto vars:     Size  Location     Type
 17098 ;;		None
 17099 ;; Return value:  Size  Location     Type
 17100 ;;                  1    wreg      void 
 17101 ;; Registers used:
 17102 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17103 ;; Tracked objects:
 17104 ;;		On entry : 0/0
 17105 ;;		On exit  : 0/0
 17106 ;;		Unchanged: 0/0
 17107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17112 ;;Total ram usage:        0 bytes
 17113 ;; Hardware stack levels used:    1
 17114 ;; Hardware stack levels required when called:   16
 17115 ;; This function calls:
 17116 ;;		_Lcd_Print_String
 17117 ;;		___lbmod
 17118 ;;		___wmul
 17119 ;;		_clear_row1
 17120 ;;		_clear_row2
 17121 ;;		_setControllerResolution
 17122 ;;		_un_block_code
 17123 ;; This function is called by:
 17124 ;;		_Function_D
 17125 ;; This function uses a non-reentrant model
 17126 ;;
 17127                           
 17128                           	psect	text49
 17129  00832E                     __ptext49:
 17130                           	opt stack 0
 17131  00832E                     _Function_D_1:
 17132                           	opt stack 12
 17133                           
 17134                           ;menu.c: 780: which_screen = POTS_RES_MENU;
 17135                           
 17136                           ; BSR set to: 0
 17137                           ;incstack = 0
 17138  00832E  0E0F               	movlw	15
 17139  008330  6E4F               	movwf	_which_screen,c
 17140                           
 17141                           ;menu.c: 781: lcd_print_once = 0;
 17142  008332  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17143                           
 17144                           ;menu.c: 782: encoder_click = 0;
 17145  008334  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17146                           
 17147                           ;menu.c: 784: potsResoMenu.selector = POT_MODE;
 17148  008336  0E00               	movlw	0
 17149  008338  BC05               	btfsc	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17150  00833A  0E01               	movlw	1
 17151  00833C  0101               	movlb	1	; () banked
 17152  00833E  6F58               	movwf	(_potsResoMenu+2)& (0+255),b
 17153                           
 17154                           ;menu.c: 786: while(encoder_click == 0) {
 17155  008340  D02D               	goto	l3646
 17156  008342                     
 17157                           ;menu.c: 790: un_block_code();
 17158                           
 17159                           ; BSR set to: 1
 17160  008342  EC10  F04C         	call	_un_block_code	;wreg free
 17161                           
 17162                           ;menu.c: 792: if (lcd_print_once == 0) {
 17163  008346  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17164  008348  D028               	goto	l3648
 17165                           
 17166                           ;menu.c: 793: clear_row1();
 17167  00834A  EC7B  F04B         	call	_clear_row1	;wreg free
 17168                           
 17169                           ;menu.c: 794: Lcd_Print_String("Pots Resolution:");
 17170  00834E  0EA8               	movlw	low STR_30
 17171  008350  0100               	movlb	0	; () banked
 17172  008352  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17173  008354  0EFD               	movlw	high STR_30
 17174  008356  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17175  008358  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 17176                           
 17177                           ;menu.c: 795: clear_row2();
 17178  00835C  EC67  F04B         	call	_clear_row2	;wreg free
 17179                           
 17180                           ;menu.c: 796: Lcd_Print_String(LCD_STRINGS[(potsResoMenu.selector % potsResoMenu.number)
      +                           + potsResoMenu.address]);
 17181  008360  0101               	movlb	1	; () banked
 17182  008362  5156               	movf	_potsResoMenu& (0+255),w,b
 17183  008364  6EE6               	movwf	postinc1,c
 17184  008366  5158               	movf	(_potsResoMenu+2)& (0+255),w,b
 17185  008368  6EE6               	movwf	postinc1,c
 17186  00836A  ECC6  F040         	call	___lbmod	;wreg free
 17187  00836E  503F               	movf	btemp,w,c
 17188  008370  0101               	movlb	1	; () banked
 17189  008372  2557               	addwf	(_potsResoMenu+1)& (0+255),w,b
 17190  008374  0100               	movlb	0	; () banked
 17191  008376  6F60               	movwf	___wmul@multiplier& (0+255),b
 17192  008378  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 17193  00837A  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 17194  00837C  0E00               	movlw	0
 17195  00837E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17196  008380  0E11               	movlw	17
 17197  008382  6F62               	movwf	___wmul@multiplicand& (0+255),b
 17198  008384  EC8F  F04B         	call	___wmul	;wreg free
 17199  008388  0E9E               	movlw	low _LCD_STRINGS
 17200  00838A  0100               	movlb	0	; () banked
 17201  00838C  2560               	addwf	?___wmul& (0+255),w,b
 17202  00838E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17203  008390  0EF3               	movlw	high _LCD_STRINGS
 17204  008392  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 17205  008394  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17206  008396  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 17207  00839A                     l3648:
 17208                           
 17209                           ;menu.c: 797: }
 17210                           ;menu.c: 798: lcd_print_once = 1;
 17211  00839A  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17212  00839C                     l3646:
 17213  00839C  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 17214  00839E  D7D1               	goto	l3647
 17215                           
 17216                           ;menu.c: 799: }
 17217                           ;menu.c: 805: POT_MODE = potsResoMenu.selector;
 17218  0083A0  0101               	movlb	1	; () banked
 17219  0083A2  A158               	btfss	(_potsResoMenu+2)& (0+255),0,b
 17220  0083A4  D002               	goto	u58350
 17221  0083A6  8C05               	bsf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17222  0083A8  D001               	goto	u58365
 17223  0083AA                     u58350:
 17224  0083AA  9C05               	bcf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17225  0083AC                     u58365:
 17226                           
 17227                           ;menu.c: 806: setControllerResolution();
 17228  0083AC  EC3C  F04B         	call	_setControllerResolution	;wreg free
 17229  0083B0  0012               	return		;funcret
 17230  0083B2                     __end_of_Function_D_1:
 17231                           	opt stack 0
 17232                           tblptru	equ	0xFF8
 17233                           tblptrh	equ	0xFF7
 17234                           tblptrl	equ	0xFF6
 17235                           tablat	equ	0xFF5
 17236                           prodh	equ	0xFF4
 17237                           prodl	equ	0xFF3
 17238                           intcon	equ	0xFF2
 17239                           intcon2	equ	0xFF1
 17240                           postinc0	equ	0xFEE
 17241                           wreg	equ	0xFE8
 17242                           postinc1	equ	0xFE6
 17243                           indf2	equ	0xFDF
 17244                           postinc2	equ	0xFDE
 17245                           postdec2	equ	0xFDD
 17246                           plusw2	equ	0xFDB
 17247                           fsr2h	equ	0xFDA
 17248                           fsr2l	equ	0xFD9
 17249                           status	equ	0xFD8
 17250                           
 17251 ;; *************** function _setControllerResolution *****************
 17252 ;; Defined at:
 17253 ;;		line 115 in file "menu.c"
 17254 ;; Parameters:    Size  Location     Type
 17255 ;;		None
 17256 ;; Auto vars:     Size  Location     Type
 17257 ;;  i               1    0[BANK0 ] unsigned char 
 17258 ;; Return value:  Size  Location     Type
 17259 ;;                  1    wreg      void 
 17260 ;; Registers used:
 17261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17262 ;; Tracked objects:
 17263 ;;		On entry : 0/0
 17264 ;;		On exit  : 0/0
 17265 ;;		Unchanged: 0/0
 17266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17270 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17271 ;;Total ram usage:        1 bytes
 17272 ;; Hardware stack levels used:    1
 17273 ;; Hardware stack levels required when called:    5
 17274 ;; This function calls:
 17275 ;;		Nothing
 17276 ;; This function is called by:
 17277 ;;		_Function_D_1
 17278 ;; This function uses a non-reentrant model
 17279 ;;
 17280                           
 17281                           	psect	text50
 17282  009678                     __ptext50:
 17283                           	opt stack 0
 17284  009678                     _setControllerResolution:
 17285                           	opt stack 22
 17286                           
 17287                           ;menu.c: 117: for(unsigned char i=0;i<16;i++){
 17288                           
 17289                           ;incstack = 0
 17290  009678  0E00               	movlw	0
 17291  00967A  0100               	movlb	0	; () banked
 17292  00967C  6F60               	movwf	setControllerResolution@i& (0+255),b
 17293  00967E                     l31168:
 17294                           
 17295                           ; BSR set to: 0
 17296  00967E  0E0F               	movlw	15
 17297  009680  6560               	cpfsgt	setControllerResolution@i& (0+255),b
 17298  009682  D001               	goto	l3460
 17299  009684  0012               	return	
 17300  009686                     l3460:
 17301                           
 17302                           ; BSR set to: 0
 17303                           ;menu.c: 119: inputPotsArray[i].controller_resolution = POT_MODE;
 17304                           
 17305                           ; BSR set to: 0
 17306  009686  5160               	movf	setControllerResolution@i& (0+255),w,b
 17307  009688  0D03               	mullw	3
 17308  00968A  0E88               	movlw	low _inputPotsArray
 17309  00968C  24F3               	addwf	prodl,w,c
 17310  00968E  6ED9               	movwf	fsr2l,c
 17311  009690  0E02               	movlw	high _inputPotsArray
 17312  009692  20F4               	addwfc	prodh,w,c
 17313  009694  6EDA               	movwf	fsr2h,c
 17314  009696  0102               	movlb	2	; () banked
 17315  009698  90DF               	bcf	indf2,0,c
 17316  00969A  BC05               	btfsc	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17317  00969C  80DF               	bsf	indf2,0,c
 17318  00969E  0100               	movlb	0	; () banked
 17319  0096A0  2B60               	incf	setControllerResolution@i& (0+255),f,b
 17320  0096A2  D7ED               	goto	l31168
 17321  0096A4                     __end_of_setControllerResolution:
 17322                           	opt stack 0
 17323                           tblptru	equ	0xFF8
 17324                           tblptrh	equ	0xFF7
 17325                           tblptrl	equ	0xFF6
 17326                           tablat	equ	0xFF5
 17327                           prodh	equ	0xFF4
 17328                           prodl	equ	0xFF3
 17329                           intcon	equ	0xFF2
 17330                           intcon2	equ	0xFF1
 17331                           postinc0	equ	0xFEE
 17332                           wreg	equ	0xFE8
 17333                           postinc1	equ	0xFE6
 17334                           indf2	equ	0xFDF
 17335                           postinc2	equ	0xFDE
 17336                           postdec2	equ	0xFDD
 17337                           plusw2	equ	0xFDB
 17338                           fsr2h	equ	0xFDA
 17339                           fsr2l	equ	0xFD9
 17340                           status	equ	0xFD8
 17341                           
 17342 ;; *************** function _Function_C *****************
 17343 ;; Defined at:
 17344 ;;		line 749 in file "menu.c"
 17345 ;; Parameters:    Size  Location     Type
 17346 ;;		None
 17347 ;; Auto vars:     Size  Location     Type
 17348 ;;		None
 17349 ;; Return value:  Size  Location     Type
 17350 ;;                  1    wreg      void 
 17351 ;; Registers used:
 17352 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17353 ;; Tracked objects:
 17354 ;;		On entry : 0/0
 17355 ;;		On exit  : 0/0
 17356 ;;		Unchanged: 0/0
 17357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17362 ;;Total ram usage:        0 bytes
 17363 ;; Hardware stack levels used:    1
 17364 ;; Hardware stack levels required when called:   17
 17365 ;; This function calls:
 17366 ;;		_Function_C_1
 17367 ;;		_Function_C_2
 17368 ;;		_Function_C_3
 17369 ;;		_Lcd_Print_String
 17370 ;;		___lbmod
 17371 ;;		___wmul
 17372 ;;		_clear_row2
 17373 ;;		_un_block_code
 17374 ;; This function is called by:
 17375 ;;		_menu_lcd
 17376 ;; This function uses a non-reentrant model
 17377 ;;
 17378                           
 17379                           	psect	text51
 17380  007F4C                     __ptext51:
 17381                           	opt stack 0
 17382  007F4C                     _Function_C:
 17383                           	opt stack 12
 17384                           
 17385                           ;menu.c: 751: which_screen = DRUM_MENU;
 17386                           
 17387                           ; BSR set to: 0
 17388                           ;incstack = 0
 17389  007F4C  0E05               	movlw	5
 17390  007F4E  6E4F               	movwf	_which_screen,c
 17391                           
 17392                           ;menu.c: 752: lcd_print_once = 0;
 17393  007F50  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17394                           
 17395                           ;menu.c: 754: drumMenu.selector = DRUM_MODE;
 17396  007F52  0E00               	movlw	0
 17397  007F54  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 17398  007F56  0E01               	movlw	1
 17399  007F58  0101               	movlb	1	; () banked
 17400  007F5A  6F67               	movwf	(_drumMenu+2)& (0+255),b
 17401                           
 17402                           ;menu.c: 756: while(encoder_click == 0) {
 17403  007F5C  D024               	goto	l3634
 17404  007F5E                     
 17405                           ;menu.c: 760: un_block_code();
 17406                           
 17407                           ; BSR set to: 1
 17408  007F5E  EC10  F04C         	call	_un_block_code	;wreg free
 17409                           
 17410                           ;menu.c: 762: if (lcd_print_once == 0) {
 17411  007F62  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17412  007F64  D01F               	goto	l3636
 17413                           
 17414                           ;menu.c: 763: clear_row2();
 17415  007F66  EC67  F04B         	call	_clear_row2	;wreg free
 17416                           
 17417                           ;menu.c: 764: Lcd_Print_String(LCD_STRINGS[(drumMenu.selector % drumMenu.number) + drumM
      +                          enu.address]);
 17418  007F6A  0101               	movlb	1	; () banked
 17419  007F6C  5165               	movf	_drumMenu& (0+255),w,b
 17420  007F6E  6EE6               	movwf	postinc1,c
 17421  007F70  5167               	movf	(_drumMenu+2)& (0+255),w,b
 17422  007F72  6EE6               	movwf	postinc1,c
 17423  007F74  ECC6  F040         	call	___lbmod	;wreg free
 17424  007F78  503F               	movf	btemp,w,c
 17425  007F7A  0101               	movlb	1	; () banked
 17426  007F7C  2566               	addwf	(_drumMenu+1)& (0+255),w,b
 17427  007F7E  0100               	movlb	0	; () banked
 17428  007F80  6F60               	movwf	___wmul@multiplier& (0+255),b
 17429  007F82  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 17430  007F84  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 17431  007F86  0E00               	movlw	0
 17432  007F88  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17433  007F8A  0E11               	movlw	17
 17434  007F8C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 17435  007F8E  EC8F  F04B         	call	___wmul	;wreg free
 17436  007F92  0E9E               	movlw	low _LCD_STRINGS
 17437  007F94  0100               	movlb	0	; () banked
 17438  007F96  2560               	addwf	?___wmul& (0+255),w,b
 17439  007F98  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17440  007F9A  0EF3               	movlw	high _LCD_STRINGS
 17441  007F9C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 17442  007F9E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17443  007FA0  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 17444  007FA4                     l3636:
 17445                           
 17446                           ;menu.c: 766: }
 17447                           ;menu.c: 767: lcd_print_once = 1;
 17448  007FA4  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17449  007FA6                     l3634:
 17450  007FA6  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 17451  007FA8  D7DA               	goto	l3635
 17452                           
 17453                           ;menu.c: 768: }
 17454                           ;menu.c: 770: if(drumMenu.selector == 0){DRUM_MODE = 0;}
 17455  007FAA  0101               	movlb	1	; () banked
 17456  007FAC  5167               	movf	(_drumMenu+2)& (0+255),w,b
 17457  007FAE  B4D8               	btfsc	status,2,c
 17458                           
 17459                           ; BSR set to: 1
 17460  007FB0  9A01               	bcf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 17461                           
 17462                           ; BSR set to: 1
 17463                           ;menu.c: 771: if(drumMenu.selector == 1){DRUM_MODE = 1;}
 17464                           
 17465                           ; BSR set to: 1
 17466  007FB2  0567               	decf	(_drumMenu+2)& (0+255),w,b
 17467  007FB4  B4D8               	btfsc	status,2,c
 17468                           
 17469                           ; BSR set to: 1
 17470  007FB6  8A01               	bsf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 17471                           
 17472                           ; BSR set to: 1
 17473                           ;menu.c: 772: if(drumMenu.selector == 2) {Function_C_1();}
 17474                           
 17475                           ; BSR set to: 1
 17476  007FB8  0E02               	movlw	2
 17477  007FBA  1967               	xorwf	(_drumMenu+2)& (0+255),w,b
 17478  007FBC  B4D8               	btfsc	status,2,c
 17479                           
 17480                           ; BSR set to: 1
 17481  007FBE  EC7F  F040         	call	_Function_C_1	;wreg free
 17482                           
 17483                           ;menu.c: 773: if(drumMenu.selector == 3) {Function_C_2();}
 17484  007FC2  0E03               	movlw	3
 17485  007FC4  0101               	movlb	1	; () banked
 17486  007FC6  1967               	xorwf	(_drumMenu+2)& (0+255),w,b
 17487  007FC8  B4D8               	btfsc	status,2,c
 17488                           
 17489                           ; BSR set to: 1
 17490  007FCA  EC2D  F031         	call	_Function_C_2	;wreg free
 17491                           
 17492                           ;menu.c: 774: if(drumMenu.selector == 4) {Function_C_3();}
 17493  007FCE  0E04               	movlw	4
 17494  007FD0  0101               	movlb	1	; () banked
 17495  007FD2  1967               	xorwf	(_drumMenu+2)& (0+255),w,b
 17496  007FD4  A4D8               	btfss	status,2,c
 17497  007FD6  0012               	return	
 17498                           
 17499                           ; BSR set to: 1
 17500  007FD8  EC9A  F030         	call	_Function_C_3	;wreg free
 17501  007FDC  0012               	return	
 17502  007FDE                     __end_of_Function_C:
 17503                           	opt stack 0
 17504                           tblptru	equ	0xFF8
 17505                           tblptrh	equ	0xFF7
 17506                           tblptrl	equ	0xFF6
 17507                           tablat	equ	0xFF5
 17508                           prodh	equ	0xFF4
 17509                           prodl	equ	0xFF3
 17510                           intcon	equ	0xFF2
 17511                           intcon2	equ	0xFF1
 17512                           postinc0	equ	0xFEE
 17513                           wreg	equ	0xFE8
 17514                           postinc1	equ	0xFE6
 17515                           indf2	equ	0xFDF
 17516                           postinc2	equ	0xFDE
 17517                           postdec2	equ	0xFDD
 17518                           plusw2	equ	0xFDB
 17519                           fsr2h	equ	0xFDA
 17520                           fsr2l	equ	0xFD9
 17521                           status	equ	0xFD8
 17522                           
 17523 ;; *************** function _Function_C_3 *****************
 17524 ;; Defined at:
 17525 ;;		line 698 in file "menu.c"
 17526 ;; Parameters:    Size  Location     Type
 17527 ;;		None
 17528 ;; Auto vars:     Size  Location     Type
 17529 ;;  array_index     1  104[BANK0 ] unsigned char 
 17530 ;; Return value:  Size  Location     Type
 17531 ;;                  1    wreg      void 
 17532 ;; Registers used:
 17533 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17534 ;; Tracked objects:
 17535 ;;		On entry : 0/0
 17536 ;;		On exit  : 0/0
 17537 ;;		Unchanged: 0/0
 17538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17540 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17541 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17542 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17543 ;;Total ram usage:        2 bytes
 17544 ;; Hardware stack levels used:    1
 17545 ;; Hardware stack levels required when called:   16
 17546 ;; This function calls:
 17547 ;;		_Lcd_Print_String
 17548 ;;		_Lcd_Set_Cursor
 17549 ;;		___lbmod
 17550 ;;		___wmul
 17551 ;;		_clear_row1
 17552 ;;		_clear_row2
 17553 ;;		_int2string
 17554 ;;		_un_block_code
 17555 ;; This function is called by:
 17556 ;;		_Function_C
 17557 ;; This function uses a non-reentrant model
 17558 ;;
 17559                           
 17560                           	psect	text52
 17561  006134                     __ptext52:
 17562                           	opt stack 0
 17563  006134                     _Function_C_3:
 17564                           	opt stack 12
 17565                           
 17566                           ;menu.c: 700: which_screen = DRUMS_CC_MENU;
 17567                           
 17568                           ;incstack = 0
 17569  006134  0E0E               	movlw	14
 17570  006136  6E4F               	movwf	_which_screen,c
 17571                           
 17572                           ;menu.c: 701: lcd_print_once = 0;
 17573  006138  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17574                           
 17575                           ;menu.c: 702: encoder_click = 0;
 17576  00613A  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17577                           
 17578                           ;menu.c: 704: while(encoder_click == 0) {
 17579  00613C  D02D               	goto	l3619
 17580  00613E                     
 17581                           ;menu.c: 708: un_block_code();
 17582  00613E  EC10  F04C         	call	_un_block_code	;wreg free
 17583                           
 17584                           ;menu.c: 710: if (lcd_print_once == 0) {
 17585  006142  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17586  006144  D028               	goto	l3621
 17587                           
 17588                           ;menu.c: 711: clear_row1();
 17589  006146  EC7B  F04B         	call	_clear_row1	;wreg free
 17590                           
 17591                           ;menu.c: 712: Lcd_Print_String("Set CC Number:");
 17592  00614A  0E6B               	movlw	low STR_29
 17593  00614C  0100               	movlb	0	; () banked
 17594  00614E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17595  006150  0EFE               	movlw	high STR_29
 17596  006152  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17597  006154  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 17598                           
 17599                           ;menu.c: 713: clear_row2();
 17600  006158  EC67  F04B         	call	_clear_row2	;wreg free
 17601                           
 17602                           ;menu.c: 714: Lcd_Print_String(LCD_STRINGS[(drumCCMenu.selector % drumCCMenu.number) + d
      +                          rumCCMenu.address]);
 17603  00615C  0101               	movlb	1	; () banked
 17604  00615E  515C               	movf	_drumCCMenu& (0+255),w,b
 17605  006160  6EE6               	movwf	postinc1,c
 17606  006162  515E               	movf	(_drumCCMenu+2)& (0+255),w,b
 17607  006164  6EE6               	movwf	postinc1,c
 17608  006166  ECC6  F040         	call	___lbmod	;wreg free
 17609  00616A  503F               	movf	btemp,w,c
 17610  00616C  0101               	movlb	1	; () banked
 17611  00616E  255D               	addwf	(_drumCCMenu+1)& (0+255),w,b
 17612  006170  0100               	movlb	0	; () banked
 17613  006172  6F60               	movwf	___wmul@multiplier& (0+255),b
 17614  006174  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 17615  006176  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 17616  006178  0E00               	movlw	0
 17617  00617A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17618  00617C  0E11               	movlw	17
 17619  00617E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 17620  006180  EC8F  F04B         	call	___wmul	;wreg free
 17621  006184  0E9E               	movlw	low _LCD_STRINGS
 17622  006186  0100               	movlb	0	; () banked
 17623  006188  2560               	addwf	?___wmul& (0+255),w,b
 17624  00618A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17625  00618C  0EF3               	movlw	high _LCD_STRINGS
 17626  00618E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 17627  006190  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17628  006192  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 17629  006196                     l3621:
 17630                           
 17631                           ;menu.c: 715: }
 17632                           ;menu.c: 716: lcd_print_once = 1;
 17633  006196  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17634  006198                     l3619:
 17635  006198  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 17636  00619A  D7D1               	goto	l3620
 17637                           
 17638                           ;menu.c: 717: }
 17639                           ;menu.c: 719: which_screen = BLANK;
 17640  00619C  0E00               	movlw	0
 17641  00619E  6E4F               	movwf	_which_screen,c
 17642                           
 17643                           ;menu.c: 720: lcd_print_once = 0;
 17644  0061A0  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17645                           
 17646                           ;menu.c: 721: encoder_click = 0;
 17647  0061A2  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17648                           
 17649                           ;menu.c: 722: unsigned char array_index = drumCCMenu.selector;
 17650  0061A4  C15E  F0C8         	movff	_drumCCMenu+2,Function_C_3@array_index
 17651                           
 17652                           ;menu.c: 724: while(encoder_click == 0) {
 17653  0061A8  D055               	goto	l3625
 17654  0061AA                     l3624:
 17655                           
 17656                           ;menu.c: 726: if(lcd_print_once == 0) {
 17657  0061AA  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17658  0061AC  D053               	goto	l3625
 17659                           
 17660                           ;menu.c: 727: if (encoder_direction == 0x10) {
 17661  0061AE  0E10               	movlw	16
 17662  0061B0  1836               	xorwf	_encoder_direction,w,c
 17663  0061B2  A4D8               	btfss	status,2,c
 17664  0061B4  D017               	goto	l3626
 17665                           
 17666                           ;menu.c: 728: if(DRUM_CC[array_index] < 127) {
 17667  0061B6  0100               	movlb	0	; () banked
 17668  0061B8  51C8               	movf	Function_C_3@array_index& (0+255),w,b
 17669  0061BA  0D01               	mullw	1
 17670  0061BC  0EF5               	movlw	low _DRUM_CC
 17671  0061BE  24F3               	addwf	prodl,w,c
 17672  0061C0  6ED9               	movwf	fsr2l,c
 17673  0061C2  0E00               	movlw	high _DRUM_CC
 17674  0061C4  20F4               	addwfc	prodh,w,c
 17675  0061C6  6EDA               	movwf	fsr2h,c
 17676  0061C8  0E7F               	movlw	127
 17677  0061CA  60DF               	cpfslt	indf2,c
 17678  0061CC  D009               	goto	l3627
 17679                           
 17680                           ; BSR set to: 0
 17681                           ;menu.c: 729: DRUM_CC[array_index]++;
 17682  0061CE  51C8               	movf	Function_C_3@array_index& (0+255),w,b
 17683  0061D0  0D01               	mullw	1
 17684  0061D2  0EF5               	movlw	low _DRUM_CC
 17685  0061D4  24F3               	addwf	prodl,w,c
 17686  0061D6  6ED9               	movwf	fsr2l,c
 17687  0061D8  0E00               	movlw	high _DRUM_CC
 17688  0061DA  20F4               	addwfc	prodh,w,c
 17689  0061DC  6EDA               	movwf	fsr2h,c
 17690  0061DE  2ADF               	incf	indf2,f,c
 17691  0061E0                     l3627:
 17692                           
 17693                           ; BSR set to: 0
 17694                           ;menu.c: 730: }
 17695                           ;menu.c: 731: encoder_direction = 0x00;
 17696                           
 17697                           ; BSR set to: 0
 17698  0061E0  0E00               	movlw	0
 17699  0061E2  6E36               	movwf	_encoder_direction,c
 17700  0061E4                     l3626:
 17701                           
 17702                           ;menu.c: 732: }
 17703                           ;menu.c: 734: if (encoder_direction == 0x20) {
 17704                           
 17705                           ; BSR set to: 0
 17706  0061E4  0E20               	movlw	32
 17707  0061E6  1836               	xorwf	_encoder_direction,w,c
 17708  0061E8  A4D8               	btfss	status,2,c
 17709  0061EA  D017               	goto	l3628
 17710                           
 17711                           ;menu.c: 735: if(DRUM_CC[array_index] > 0) {
 17712  0061EC  0100               	movlb	0	; () banked
 17713  0061EE  51C8               	movf	Function_C_3@array_index& (0+255),w,b
 17714  0061F0  0D01               	mullw	1
 17715  0061F2  0EF5               	movlw	low _DRUM_CC
 17716  0061F4  24F3               	addwf	prodl,w,c
 17717  0061F6  6ED9               	movwf	fsr2l,c
 17718  0061F8  0E00               	movlw	high _DRUM_CC
 17719  0061FA  20F4               	addwfc	prodh,w,c
 17720  0061FC  6EDA               	movwf	fsr2h,c
 17721  0061FE  50DF               	movf	indf2,w,c
 17722  006200  B4D8               	btfsc	status,2,c
 17723  006202  D009               	goto	l3629
 17724                           
 17725                           ; BSR set to: 0
 17726                           ;menu.c: 736: DRUM_CC[array_index]--;
 17727  006204  51C8               	movf	Function_C_3@array_index& (0+255),w,b
 17728  006206  0D01               	mullw	1
 17729  006208  0EF5               	movlw	low _DRUM_CC
 17730  00620A  24F3               	addwf	prodl,w,c
 17731  00620C  6ED9               	movwf	fsr2l,c
 17732  00620E  0E00               	movlw	high _DRUM_CC
 17733  006210  20F4               	addwfc	prodh,w,c
 17734  006212  6EDA               	movwf	fsr2h,c
 17735  006214  06DF               	decf	indf2,f,c
 17736  006216                     l3629:
 17737                           
 17738                           ; BSR set to: 0
 17739                           ;menu.c: 737: }
 17740                           ;menu.c: 738: encoder_direction = 0x00;
 17741                           
 17742                           ; BSR set to: 0
 17743  006216  0E00               	movlw	0
 17744  006218  6E36               	movwf	_encoder_direction,c
 17745  00621A                     l3628:
 17746                           
 17747                           ;menu.c: 739: }
 17748                           ;menu.c: 741: int2string(DRUM_CC[array_index]);
 17749                           
 17750                           ; BSR set to: 0
 17751  00621A  0100               	movlb	0	; () banked
 17752  00621C  51C8               	movf	Function_C_3@array_index& (0+255),w,b
 17753  00621E  0D01               	mullw	1
 17754  006220  0EF5               	movlw	low _DRUM_CC
 17755  006222  24F3               	addwf	prodl,w,c
 17756  006224  6ED9               	movwf	fsr2l,c
 17757  006226  0E00               	movlw	high _DRUM_CC
 17758  006228  20F4               	addwfc	prodh,w,c
 17759  00622A  6EDA               	movwf	fsr2h,c
 17760  00622C  50DF               	movf	indf2,w,c
 17761  00622E  6FC7               	movwf	??_Function_C_3& (0+255),b
 17762  006230  51C7               	movf	??_Function_C_3& (0+255),w,b
 17763  006232  6F60               	movwf	int2string@number& (0+255),b
 17764  006234  6B61               	clrf	(int2string@number+1)& (0+255),b
 17765  006236  EC6D  F03A         	call	_int2string	;wreg free
 17766                           
 17767                           ;menu.c: 742: Lcd_Set_Cursor(2,13);
 17768  00623A  0E0D               	movlw	13
 17769  00623C  0100               	movlb	0	; () banked
 17770  00623E  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 17771  006240  0E02               	movlw	2
 17772  006242  EC42  F047         	call	_Lcd_Set_Cursor
 17773                           
 17774                           ;menu.c: 743: Lcd_Print_String(string2display);
 17775  006246  0E92               	movlw	low _string2display
 17776  006248  0100               	movlb	0	; () banked
 17777  00624A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17778  00624C  0E01               	movlw	high _string2display
 17779  00624E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17780  006250  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 17781  006254                     l3625:
 17782  006254  B405               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 17783  006256  0012               	return	
 17784  006258  D7A8               	goto	l3624
 17785  00625A                     __end_of_Function_C_3:
 17786                           	opt stack 0
 17787                           tblptru	equ	0xFF8
 17788                           tblptrh	equ	0xFF7
 17789                           tblptrl	equ	0xFF6
 17790                           tablat	equ	0xFF5
 17791                           prodh	equ	0xFF4
 17792                           prodl	equ	0xFF3
 17793                           intcon	equ	0xFF2
 17794                           intcon2	equ	0xFF1
 17795                           postinc0	equ	0xFEE
 17796                           wreg	equ	0xFE8
 17797                           postinc1	equ	0xFE6
 17798                           indf2	equ	0xFDF
 17799                           postinc2	equ	0xFDE
 17800                           postdec2	equ	0xFDD
 17801                           plusw2	equ	0xFDB
 17802                           fsr2h	equ	0xFDA
 17803                           fsr2l	equ	0xFD9
 17804                           status	equ	0xFD8
 17805                           
 17806 ;; *************** function _Function_C_2 *****************
 17807 ;; Defined at:
 17808 ;;		line 646 in file "menu.c"
 17809 ;; Parameters:    Size  Location     Type
 17810 ;;		None
 17811 ;; Auto vars:     Size  Location     Type
 17812 ;;  array_index     1  104[BANK0 ] unsigned char 
 17813 ;; Return value:  Size  Location     Type
 17814 ;;                  1    wreg      void 
 17815 ;; Registers used:
 17816 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17817 ;; Tracked objects:
 17818 ;;		On entry : 0/0
 17819 ;;		On exit  : 0/0
 17820 ;;		Unchanged: 0/0
 17821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17823 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17824 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17825 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17826 ;;Total ram usage:        2 bytes
 17827 ;; Hardware stack levels used:    1
 17828 ;; Hardware stack levels required when called:   16
 17829 ;; This function calls:
 17830 ;;		_Lcd_Print_String
 17831 ;;		_Lcd_Set_Cursor
 17832 ;;		___lbmod
 17833 ;;		___wmul
 17834 ;;		_clear_row1
 17835 ;;		_clear_row2
 17836 ;;		_int2string
 17837 ;;		_un_block_code
 17838 ;; This function is called by:
 17839 ;;		_Function_C
 17840 ;; This function uses a non-reentrant model
 17841 ;;
 17842                           
 17843                           	psect	text53
 17844  00625A                     __ptext53:
 17845                           	opt stack 0
 17846  00625A                     _Function_C_2:
 17847                           	opt stack 12
 17848                           
 17849                           ;menu.c: 648: which_screen = DRUMS_NN_MENU;
 17850                           
 17851                           ;incstack = 0
 17852  00625A  0E0D               	movlw	13
 17853  00625C  6E4F               	movwf	_which_screen,c
 17854                           
 17855                           ;menu.c: 649: lcd_print_once = 0;
 17856  00625E  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17857                           
 17858                           ;menu.c: 650: encoder_click = 0;
 17859  006260  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17860                           
 17861                           ;menu.c: 652: while(encoder_click == 0) {
 17862  006262  D02D               	goto	l3604
 17863  006264                     
 17864                           ;menu.c: 656: un_block_code();
 17865  006264  EC10  F04C         	call	_un_block_code	;wreg free
 17866                           
 17867                           ;menu.c: 658: if (lcd_print_once == 0) {
 17868  006268  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17869  00626A  D028               	goto	l3606
 17870                           
 17871                           ;menu.c: 659: clear_row1();
 17872  00626C  EC7B  F04B         	call	_clear_row1	;wreg free
 17873                           
 17874                           ;menu.c: 660: Lcd_Print_String("Set Note Number:");
 17875  006270  0ECA               	movlw	low STR_28
 17876  006272  0100               	movlb	0	; () banked
 17877  006274  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17878  006276  0EFD               	movlw	high STR_28
 17879  006278  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17880  00627A  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 17881                           
 17882                           ;menu.c: 661: clear_row2();
 17883  00627E  EC67  F04B         	call	_clear_row2	;wreg free
 17884                           
 17885                           ;menu.c: 662: Lcd_Print_String(LCD_STRINGS[(drumNNMenu.selector % drumNNMenu.number) + d
      +                          rumNNMenu.address]);
 17886  006282  0101               	movlb	1	; () banked
 17887  006284  515F               	movf	_drumNNMenu& (0+255),w,b
 17888  006286  6EE6               	movwf	postinc1,c
 17889  006288  5161               	movf	(_drumNNMenu+2)& (0+255),w,b
 17890  00628A  6EE6               	movwf	postinc1,c
 17891  00628C  ECC6  F040         	call	___lbmod	;wreg free
 17892  006290  503F               	movf	btemp,w,c
 17893  006292  0101               	movlb	1	; () banked
 17894  006294  2560               	addwf	(_drumNNMenu+1)& (0+255),w,b
 17895  006296  0100               	movlb	0	; () banked
 17896  006298  6F60               	movwf	___wmul@multiplier& (0+255),b
 17897  00629A  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 17898  00629C  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 17899  00629E  0E00               	movlw	0
 17900  0062A0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17901  0062A2  0E11               	movlw	17
 17902  0062A4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 17903  0062A6  EC8F  F04B         	call	___wmul	;wreg free
 17904  0062AA  0E9E               	movlw	low _LCD_STRINGS
 17905  0062AC  0100               	movlb	0	; () banked
 17906  0062AE  2560               	addwf	?___wmul& (0+255),w,b
 17907  0062B0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17908  0062B2  0EF3               	movlw	high _LCD_STRINGS
 17909  0062B4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 17910  0062B6  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17911  0062B8  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 17912  0062BC                     l3606:
 17913                           
 17914                           ;menu.c: 663: }
 17915                           ;menu.c: 664: lcd_print_once = 1;
 17916  0062BC  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17917  0062BE                     l3604:
 17918  0062BE  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 17919  0062C0  D7D1               	goto	l3605
 17920                           
 17921                           ;menu.c: 665: }
 17922                           ;menu.c: 667: which_screen = BLANK;
 17923  0062C2  0E00               	movlw	0
 17924  0062C4  6E4F               	movwf	_which_screen,c
 17925                           
 17926                           ;menu.c: 668: lcd_print_once = 0;
 17927  0062C6  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17928                           
 17929                           ;menu.c: 669: encoder_click = 0;
 17930  0062C8  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17931                           
 17932                           ;menu.c: 670: unsigned char array_index = drumNNMenu.selector;
 17933  0062CA  C161  F0C8         	movff	_drumNNMenu+2,Function_C_2@array_index
 17934                           
 17935                           ;menu.c: 672: while(encoder_click == 0) {
 17936  0062CE  D055               	goto	l3610
 17937  0062D0                     l3609:
 17938                           
 17939                           ;menu.c: 674: if(lcd_print_once == 0) {
 17940  0062D0  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17941  0062D2  D053               	goto	l3610
 17942                           
 17943                           ;menu.c: 675: if (encoder_direction == 0x10) {
 17944  0062D4  0E10               	movlw	16
 17945  0062D6  1836               	xorwf	_encoder_direction,w,c
 17946  0062D8  A4D8               	btfss	status,2,c
 17947  0062DA  D017               	goto	l3611
 17948                           
 17949                           ;menu.c: 676: if(DRUM_NOTE[array_index] < 81) {
 17950  0062DC  0100               	movlb	0	; () banked
 17951  0062DE  51C8               	movf	Function_C_2@array_index& (0+255),w,b
 17952  0062E0  0D01               	mullw	1
 17953  0062E2  0EE7               	movlw	low _DRUM_NOTE
 17954  0062E4  24F3               	addwf	prodl,w,c
 17955  0062E6  6ED9               	movwf	fsr2l,c
 17956  0062E8  0E01               	movlw	high _DRUM_NOTE
 17957  0062EA  20F4               	addwfc	prodh,w,c
 17958  0062EC  6EDA               	movwf	fsr2h,c
 17959  0062EE  0E51               	movlw	81
 17960  0062F0  60DF               	cpfslt	indf2,c
 17961  0062F2  D009               	goto	l3612
 17962                           
 17963                           ; BSR set to: 0
 17964                           ;menu.c: 677: DRUM_NOTE[array_index]++;
 17965  0062F4  51C8               	movf	Function_C_2@array_index& (0+255),w,b
 17966  0062F6  0D01               	mullw	1
 17967  0062F8  0EE7               	movlw	low _DRUM_NOTE
 17968  0062FA  24F3               	addwf	prodl,w,c
 17969  0062FC  6ED9               	movwf	fsr2l,c
 17970  0062FE  0E01               	movlw	high _DRUM_NOTE
 17971  006300  20F4               	addwfc	prodh,w,c
 17972  006302  6EDA               	movwf	fsr2h,c
 17973  006304  2ADF               	incf	indf2,f,c
 17974  006306                     l3612:
 17975                           
 17976                           ; BSR set to: 0
 17977                           ;menu.c: 678: }
 17978                           ;menu.c: 679: encoder_direction = 0x00;
 17979                           
 17980                           ; BSR set to: 0
 17981  006306  0E00               	movlw	0
 17982  006308  6E36               	movwf	_encoder_direction,c
 17983  00630A                     l3611:
 17984                           
 17985                           ;menu.c: 680: }
 17986                           ;menu.c: 682: if (encoder_direction == 0x20) {
 17987                           
 17988                           ; BSR set to: 0
 17989  00630A  0E20               	movlw	32
 17990  00630C  1836               	xorwf	_encoder_direction,w,c
 17991  00630E  A4D8               	btfss	status,2,c
 17992  006310  D017               	goto	l3613
 17993                           
 17994                           ;menu.c: 683: if(DRUM_NOTE[array_index] > 35) {
 17995  006312  0100               	movlb	0	; () banked
 17996  006314  51C8               	movf	Function_C_2@array_index& (0+255),w,b
 17997  006316  0D01               	mullw	1
 17998  006318  0EE7               	movlw	low _DRUM_NOTE
 17999  00631A  24F3               	addwf	prodl,w,c
 18000  00631C  6ED9               	movwf	fsr2l,c
 18001  00631E  0E01               	movlw	high _DRUM_NOTE
 18002  006320  20F4               	addwfc	prodh,w,c
 18003  006322  6EDA               	movwf	fsr2h,c
 18004  006324  0E23               	movlw	35
 18005  006326  64DF               	cpfsgt	indf2,c
 18006  006328  D009               	goto	l3614
 18007                           
 18008                           ; BSR set to: 0
 18009                           ;menu.c: 684: DRUM_NOTE[array_index]--;
 18010  00632A  51C8               	movf	Function_C_2@array_index& (0+255),w,b
 18011  00632C  0D01               	mullw	1
 18012  00632E  0EE7               	movlw	low _DRUM_NOTE
 18013  006330  24F3               	addwf	prodl,w,c
 18014  006332  6ED9               	movwf	fsr2l,c
 18015  006334  0E01               	movlw	high _DRUM_NOTE
 18016  006336  20F4               	addwfc	prodh,w,c
 18017  006338  6EDA               	movwf	fsr2h,c
 18018  00633A  06DF               	decf	indf2,f,c
 18019  00633C                     l3614:
 18020                           
 18021                           ; BSR set to: 0
 18022                           ;menu.c: 685: }
 18023                           ;menu.c: 686: encoder_direction = 0x00;
 18024                           
 18025                           ; BSR set to: 0
 18026  00633C  0E00               	movlw	0
 18027  00633E  6E36               	movwf	_encoder_direction,c
 18028  006340                     l3613:
 18029                           
 18030                           ;menu.c: 687: }
 18031                           ;menu.c: 689: int2string(DRUM_NOTE[array_index]);
 18032                           
 18033                           ; BSR set to: 0
 18034  006340  0100               	movlb	0	; () banked
 18035  006342  51C8               	movf	Function_C_2@array_index& (0+255),w,b
 18036  006344  0D01               	mullw	1
 18037  006346  0EE7               	movlw	low _DRUM_NOTE
 18038  006348  24F3               	addwf	prodl,w,c
 18039  00634A  6ED9               	movwf	fsr2l,c
 18040  00634C  0E01               	movlw	high _DRUM_NOTE
 18041  00634E  20F4               	addwfc	prodh,w,c
 18042  006350  6EDA               	movwf	fsr2h,c
 18043  006352  50DF               	movf	indf2,w,c
 18044  006354  6FC7               	movwf	??_Function_C_2& (0+255),b
 18045  006356  51C7               	movf	??_Function_C_2& (0+255),w,b
 18046  006358  6F60               	movwf	int2string@number& (0+255),b
 18047  00635A  6B61               	clrf	(int2string@number+1)& (0+255),b
 18048  00635C  EC6D  F03A         	call	_int2string	;wreg free
 18049                           
 18050                           ;menu.c: 690: Lcd_Set_Cursor(2,13);
 18051  006360  0E0D               	movlw	13
 18052  006362  0100               	movlb	0	; () banked
 18053  006364  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 18054  006366  0E02               	movlw	2
 18055  006368  EC42  F047         	call	_Lcd_Set_Cursor
 18056                           
 18057                           ;menu.c: 691: Lcd_Print_String(string2display);
 18058  00636C  0E92               	movlw	low _string2display
 18059  00636E  0100               	movlb	0	; () banked
 18060  006370  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 18061  006372  0E01               	movlw	high _string2display
 18062  006374  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18063  006376  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 18064  00637A                     l3610:
 18065  00637A  B405               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 18066  00637C  0012               	return	
 18067  00637E  D7A8               	goto	l3609
 18068  006380                     __end_of_Function_C_2:
 18069                           	opt stack 0
 18070                           tblptru	equ	0xFF8
 18071                           tblptrh	equ	0xFF7
 18072                           tblptrl	equ	0xFF6
 18073                           tablat	equ	0xFF5
 18074                           prodh	equ	0xFF4
 18075                           prodl	equ	0xFF3
 18076                           intcon	equ	0xFF2
 18077                           intcon2	equ	0xFF1
 18078                           postinc0	equ	0xFEE
 18079                           wreg	equ	0xFE8
 18080                           postinc1	equ	0xFE6
 18081                           indf2	equ	0xFDF
 18082                           postinc2	equ	0xFDE
 18083                           postdec2	equ	0xFDD
 18084                           plusw2	equ	0xFDB
 18085                           fsr2h	equ	0xFDA
 18086                           fsr2l	equ	0xFD9
 18087                           status	equ	0xFD8
 18088                           
 18089 ;; *************** function _int2string *****************
 18090 ;; Defined at:
 18091 ;;		line 86 in file "menu.c"
 18092 ;; Parameters:    Size  Location     Type
 18093 ;;  number          2    0[BANK0 ] int 
 18094 ;; Auto vars:     Size  Location     Type
 18095 ;;  number_to_di    2    4[BANK0 ] int 
 18096 ;; Return value:  Size  Location     Type
 18097 ;;                  1    wreg      void 
 18098 ;; Registers used:
 18099 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl
 18100 ;; Tracked objects:
 18101 ;;		On entry : 0/0
 18102 ;;		On exit  : 0/0
 18103 ;;		Unchanged: 0/0
 18104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18105 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18106 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18107 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18108 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18109 ;;Total ram usage:        6 bytes
 18110 ;; Hardware stack levels used:    1
 18111 ;; Hardware stack levels required when called:    6
 18112 ;; This function calls:
 18113 ;;		___awdiv
 18114 ;;		___awmod
 18115 ;; This function is called by:
 18116 ;;		_setControllerNumbers
 18117 ;;		_Function_C_2
 18118 ;;		_Function_C_3
 18119 ;;		_Function_D_2
 18120 ;;		_Function_E_1
 18121 ;;		_Function_E_2
 18122 ;;		_Function_F
 18123 ;;		_Function_H_2
 18124 ;;		_Function_H_3
 18125 ;; This function uses a non-reentrant model
 18126 ;;
 18127                           
 18128                           	psect	text54
 18129  0074DA                     __ptext54:
 18130                           	opt stack 0
 18131  0074DA                     _int2string:
 18132                           	opt stack 21
 18133                           
 18134                           ;menu.c: 88: static __bit isNegative = 0;
 18135                           ;menu.c: 89: signed int number_to_display_temp = 0;
 18136                           
 18137                           ;incstack = 0
 18138  0074DA  0E00               	movlw	0
 18139  0074DC  0100               	movlb	0	; () banked
 18140  0074DE  6F65               	movwf	(int2string@number_to_display_temp+1)& (0+255),b
 18141  0074E0  0E00               	movlw	0
 18142  0074E2  6F64               	movwf	int2string@number_to_display_temp& (0+255),b
 18143                           
 18144                           ; BSR set to: 0
 18145                           ;menu.c: 91: if(number < 0) {
 18146  0074E4  AF61               	btfss	(int2string@number+1)& (0+255),7,b
 18147  0074E6  D00E               	goto	l3453
 18148                           
 18149                           ; BSR set to: 0
 18150                           ;menu.c: 92: isNegative = 1;
 18151  0074E8  8201               	bsf	int2string@isNegative/(0+8),int2string@isNegative& (0+7),c
 18152                           
 18153                           ;menu.c: 93: number_to_display_temp = (0 - number);
 18154  0074EA  C060  F062         	movff	int2string@number,??_int2string
 18155  0074EE  C061  F063         	movff	int2string@number+1,??_int2string+1
 18156  0074F2  1F62               	comf	??_int2string& (0+255),f,b
 18157  0074F4  1F63               	comf	(??_int2string+1)& (0+255),f,b
 18158  0074F6  4B62               	infsnz	??_int2string& (0+255),f,b
 18159  0074F8  2B63               	incf	(??_int2string+1)& (0+255),f,b
 18160  0074FA  C062  F064         	movff	??_int2string,int2string@number_to_display_temp
 18161  0074FE  C063  F065         	movff	??_int2string+1,int2string@number_to_display_temp+1
 18162                           
 18163                           ;menu.c: 94: }
 18164  007502  D005               	goto	l3454
 18165  007504                     l3453:
 18166                           
 18167                           ; BSR set to: 0
 18168                           ;menu.c: 95: else {
 18169                           ;menu.c: 96: isNegative = 0;
 18170  007504  9201               	bcf	int2string@isNegative/(0+8),int2string@isNegative& (0+7),c
 18171                           
 18172                           ;menu.c: 97: number_to_display_temp = number;
 18173  007506  C060  F064         	movff	int2string@number,int2string@number_to_display_temp
 18174  00750A  C061  F065         	movff	int2string@number+1,int2string@number_to_display_temp+1
 18175  00750E                     l3454:
 18176                           
 18177                           ; BSR set to: 0
 18178                           ;menu.c: 98: }
 18179                           ;menu.c: 101: if(isNegative) {
 18180  00750E  A201               	btfss	int2string@isNegative/(0+8),int2string@isNegative& (0+7),c
 18181  007510  D002               	goto	l3455
 18182                           
 18183                           ; BSR set to: 0
 18184                           ;menu.c: 102: string2display[0] = '-';
 18185  007512  0E2D               	movlw	45
 18186  007514  D001               	goto	L4
 18187  007516                     l3455:
 18188                           
 18189                           ;menu.c: 104: else{string2display[0] = ' ';}
 18190                           
 18191                           ; BSR set to: 1
 18192  007516  0E20               	movlw	32
 18193  007518                     L4:
 18194  007518  0101               	movlb	1	; () banked
 18195  00751A  6F92               	movwf	_string2display& (0+255),b
 18196                           
 18197                           ; BSR set to: 1
 18198                           ;menu.c: 107: string2display[1] = 48 + ((number_to_display_temp / 100) % 10);
 18199                           
 18200                           ; BSR set to: 1
 18201  00751C  0E0A               	movlw	10
 18202  00751E  6EE6               	movwf	postinc1,c
 18203  007520  0E00               	movlw	0
 18204  007522  6EE6               	movwf	postinc1,c
 18205  007524  0E64               	movlw	100
 18206  007526  6EE6               	movwf	postinc1,c
 18207  007528  0E00               	movlw	0
 18208  00752A  6EE6               	movwf	postinc1,c
 18209  00752C  C064  FFE6         	movff	int2string@number_to_display_temp,postinc1
 18210  007530  C065  FFE6         	movff	int2string@number_to_display_temp+1,postinc1
 18211  007534  EC01  F030         	call	___awdiv	;wreg free
 18212  007538  C03F  FFE6         	movff	btemp,postinc1
 18213  00753C  C040  FFE6         	movff	btemp+1,postinc1
 18214  007540  ECD7  F033         	call	___awmod	;wreg free
 18215  007544  503F               	movf	btemp,w,c
 18216  007546  0F30               	addlw	48
 18217  007548  0101               	movlb	1	; () banked
 18218  00754A  6F93               	movwf	(_string2display+1)& (0+255),b
 18219                           
 18220                           ; BSR set to: 1
 18221                           ;menu.c: 108: string2display[2] = 48 + ((number_to_display_temp / 10) % 10);
 18222  00754C  0E0A               	movlw	10
 18223  00754E  6EE6               	movwf	postinc1,c
 18224  007550  0E00               	movlw	0
 18225  007552  6EE6               	movwf	postinc1,c
 18226  007554  0E0A               	movlw	10
 18227  007556  6EE6               	movwf	postinc1,c
 18228  007558  0E00               	movlw	0
 18229  00755A  6EE6               	movwf	postinc1,c
 18230  00755C  C064  FFE6         	movff	int2string@number_to_display_temp,postinc1
 18231  007560  C065  FFE6         	movff	int2string@number_to_display_temp+1,postinc1
 18232  007564  EC01  F030         	call	___awdiv	;wreg free
 18233  007568  C03F  FFE6         	movff	btemp,postinc1
 18234  00756C  C040  FFE6         	movff	btemp+1,postinc1
 18235  007570  ECD7  F033         	call	___awmod	;wreg free
 18236  007574  503F               	movf	btemp,w,c
 18237  007576  0F30               	addlw	48
 18238  007578  0101               	movlb	1	; () banked
 18239  00757A  6F94               	movwf	(_string2display+2)& (0+255),b
 18240                           
 18241                           ; BSR set to: 1
 18242                           ;menu.c: 109: string2display[3] = 48 + (number_to_display_temp % 10);
 18243  00757C  0E0A               	movlw	10
 18244  00757E  6EE6               	movwf	postinc1,c
 18245  007580  0E00               	movlw	0
 18246  007582  6EE6               	movwf	postinc1,c
 18247  007584  C064  FFE6         	movff	int2string@number_to_display_temp,postinc1
 18248  007588  C065  FFE6         	movff	int2string@number_to_display_temp+1,postinc1
 18249  00758C  ECD7  F033         	call	___awmod	;wreg free
 18250  007590  503F               	movf	btemp,w,c
 18251  007592  0F30               	addlw	48
 18252  007594  0101               	movlb	1	; () banked
 18253  007596  6F95               	movwf	(_string2display+3)& (0+255),b
 18254                           
 18255                           ; BSR set to: 1
 18256                           ;menu.c: 110: string2display[4] = '\0';
 18257  007598  0E00               	movlw	0
 18258  00759A  6F96               	movwf	(_string2display+4)& (0+255),b
 18259                           
 18260                           ; BSR set to: 1
 18261  00759C  0012               	return		;funcret
 18262  00759E                     __end_of_int2string:
 18263                           	opt stack 0
 18264                           tblptru	equ	0xFF8
 18265                           tblptrh	equ	0xFF7
 18266                           tblptrl	equ	0xFF6
 18267                           tablat	equ	0xFF5
 18268                           prodh	equ	0xFF4
 18269                           prodl	equ	0xFF3
 18270                           intcon	equ	0xFF2
 18271                           intcon2	equ	0xFF1
 18272                           postinc0	equ	0xFEE
 18273                           wreg	equ	0xFE8
 18274                           postinc1	equ	0xFE6
 18275                           indf2	equ	0xFDF
 18276                           postinc2	equ	0xFDE
 18277                           postdec2	equ	0xFDD
 18278                           plusw2	equ	0xFDB
 18279                           fsr2h	equ	0xFDA
 18280                           fsr2l	equ	0xFD9
 18281                           status	equ	0xFD8
 18282                           
 18283 ;; *************** function ___awdiv *****************
 18284 ;; Defined at:
 18285 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 18286 ;; Parameters:    Size  Location     Type
 18287 ;;  dividend        2  [STACK] int 
 18288 ;;  divisor         2  [STACK] int 
 18289 ;; Auto vars:     Size  Location     Type
 18290 ;;  quotient        2  [STACK] int 
 18291 ;;  sign            1  [STACK] unsigned char 
 18292 ;;  counter         1  [STACK] unsigned char 
 18293 ;; Return value:  Size  Location     Type
 18294 ;;                  2  [STACK] int 
 18295 ;; Registers used:
 18296 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl
 18297 ;; Tracked objects:
 18298 ;;		On entry : 3E/1
 18299 ;;		On exit  : 0/0
 18300 ;;		Unchanged: 0/0
 18301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18306 ;;Total ram usage:        0 bytes
 18307 ;; Hardware stack levels used:    1
 18308 ;; Hardware stack levels required when called:    5
 18309 ;; This function calls:
 18310 ;;		Nothing
 18311 ;; This function is called by:
 18312 ;;		_displayDigits
 18313 ;;		_int2string
 18314 ;; This function uses a reentrant model
 18315 ;;
 18316                           
 18317                           	psect	text55
 18318  006002                     __ptext55:
 18319                           	opt stack 0
 18320  006002                     ___awdiv:
 18321                           	opt stack 0
 18322                           
 18323                           ; BSR set to: 1
 18324                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
 18325  006002  52E6               	movf	postinc1,f,c
 18326  006004  52E6               	movf	postinc1,f,c
 18327  006006  52E6               	movf	postinc1,f,c
 18328  006008  52E6               	movf	postinc1,f,c
 18329                           
 18330                           ;stkvar	___awdiv@sign @ sp[(-4)+2]
 18331                           
 18332                           ;incstack = 0
 18333  00600A  0EFE               	movlw	-2
 18334  00600C  6AE3               	clrf	plusw1,c
 18335                           
 18336                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18337  00600E  0EF9               	movlw	-7
 18338  006010  AEE3               	btfss	plusw1,7,c
 18339  006012  D009               	goto	l32570
 18340                           
 18341                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18342                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18343  006014  0EF8               	movlw	-8
 18344  006016  6CE3               	negf	plusw1,c
 18345  006018  0EF9               	movlw	-7
 18346  00601A  1EE3               	comf	plusw1,f,c
 18347  00601C  B0D8               	btfsc	status,0,c
 18348  00601E  2AE3               	incf	plusw1,f,c
 18349                           
 18350                           ;stkvar	___awdiv@sign @ sp[(-4)+2]
 18351  006020  0EFE               	movlw	-2
 18352  006022  6AE3               	clrf	plusw1,c
 18353  006024  2AE3               	incf	plusw1,f,c
 18354  006026                     l32570:
 18355                           
 18356                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
 18357  006026  0EFB               	movlw	-5
 18358  006028  AEE3               	btfss	plusw1,7,c
 18359  00602A  D008               	goto	l32576
 18360                           
 18361                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
 18362                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
 18363  00602C  0EFA               	movlw	-6
 18364  00602E  6CE3               	negf	plusw1,c
 18365  006030  0EFB               	movlw	-5
 18366  006032  1EE3               	comf	plusw1,f,c
 18367  006034  B0D8               	btfsc	status,0,c
 18368  006036  2AE3               	incf	plusw1,f,c
 18369                           
 18370                           ;stkvar	___awdiv@sign @ sp[(-4)+2]
 18371  006038  0EFE               	movlw	-2
 18372  00603A  70E3               	btg	plusw1,0,c
 18373  00603C                     l32576:
 18374                           
 18375                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
 18376  00603C  0EFC               	movlw	-4
 18377  00603E  6AE3               	clrf	plusw1,c
 18378  006040  0EFD               	movlw	-3
 18379  006042  6AE3               	clrf	plusw1,c
 18380                           
 18381                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18382  006044  0EF8               	movlw	-8
 18383  006046  CFE3 F03F          	movff	plusw1,btemp
 18384  00604A  0EF9               	movlw	-7
 18385  00604C  50E3               	movf	plusw1,w,c
 18386  00604E  103F               	iorwf	btemp,w,c
 18387  006050  B4D8               	btfsc	status,2,c
 18388  006052  D05B               	goto	u59100
 18389                           
 18390                           ;stkvar	___awdiv@counter @ sp[(-4)+3]
 18391  006054  0EFF               	movlw	-1
 18392  006056  6AE3               	clrf	plusw1,c
 18393  006058  D010               	goto	L5
 18394  00605A                     l32582:
 18395                           
 18396                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18397  00605A  0EF8               	movlw	-8
 18398  00605C  50E3               	movf	plusw1,w,c
 18399  00605E  90D8               	bcf	status,0,c
 18400  006060  34E8               	rlcf	wreg,w,c
 18401  006062  6E3F               	movwf	btemp,c
 18402  006064  0EF8               	movlw	-8
 18403  006066  C03F  FFE3         	movff	btemp,plusw1
 18404  00606A  0EF9               	movlw	-7
 18405  00606C  50E3               	movf	plusw1,w,c
 18406  00606E  34E8               	rlcf	wreg,w,c
 18407  006070  6E3F               	movwf	btemp,c
 18408  006072  0EF9               	movlw	-7
 18409  006074  C03F  FFE3         	movff	btemp,plusw1
 18410                           
 18411                           ;stkvar	___awdiv@counter @ sp[(-4)+3]
 18412  006078  0EFF               	movlw	-1
 18413  00607A                     L5:
 18414  00607A  2AE3               	incf	plusw1,f,c
 18415                           
 18416                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18417  00607C  0EF9               	movlw	-7
 18418  00607E  AEE3               	btfss	plusw1,7,c
 18419  006080  D7EC               	goto	l32582
 18420  006082                     u59080:
 18421                           
 18422                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
 18423  006082  0EFC               	movlw	-4
 18424  006084  50E3               	movf	plusw1,w,c
 18425  006086  90D8               	bcf	status,0,c
 18426  006088  34E8               	rlcf	wreg,w,c
 18427  00608A  6E3F               	movwf	btemp,c
 18428  00608C  0EFC               	movlw	-4
 18429  00608E  C03F  FFE3         	movff	btemp,plusw1
 18430  006092  0EFD               	movlw	-3
 18431  006094  50E3               	movf	plusw1,w,c
 18432  006096  34E8               	rlcf	wreg,w,c
 18433  006098  6E3F               	movwf	btemp,c
 18434  00609A  0EFD               	movlw	-3
 18435  00609C  C03F  FFE3         	movff	btemp,plusw1
 18436                           
 18437                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18438  0060A0  0EF8               	movlw	-8
 18439  0060A2  CFE3 F040          	movff	plusw1,btemp+1
 18440  0060A6  0EF9               	movlw	-7
 18441  0060A8  CFE3 F041          	movff	plusw1,btemp+2
 18442                           
 18443                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
 18444  0060AC  0EFA               	movlw	-6
 18445  0060AE  CFE3 F049          	movff	plusw1,btemp+10
 18446  0060B2  0EFB               	movlw	-5
 18447  0060B4  CFE3 F04A          	movff	plusw1,btemp+11
 18448  0060B8  5040               	movf	btemp+1,w,c
 18449  0060BA  5C49               	subwf	btemp+10,w,c
 18450  0060BC  5041               	movf	btemp+2,w,c
 18451  0060BE  584A               	subwfb	btemp+11,w,c
 18452  0060C0  A0D8               	btfss	status,0,c
 18453  0060C2  D014               	goto	l32596
 18454                           
 18455                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18456                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
 18457  0060C4  0EFA               	movlw	-6
 18458  0060C6  50E3               	movf	plusw1,w,c
 18459  0060C8  6E3F               	movwf	btemp,c
 18460  0060CA  0EF8               	movlw	-8
 18461  0060CC  50E3               	movf	plusw1,w,c
 18462  0060CE  5E3F               	subwf	btemp,f,c
 18463  0060D0  0EFA               	movlw	-6
 18464  0060D2  C03F  FFE3         	movff	btemp,plusw1
 18465  0060D6  0EFB               	movlw	-5
 18466  0060D8  50E3               	movf	plusw1,w,c
 18467  0060DA  6E3F               	movwf	btemp,c
 18468  0060DC  0EF9               	movlw	-7
 18469  0060DE  50E3               	movf	plusw1,w,c
 18470  0060E0  5A3F               	subwfb	btemp,f,c
 18471  0060E2  0EFB               	movlw	-5
 18472  0060E4  C03F  FFE3         	movff	btemp,plusw1
 18473                           
 18474                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
 18475  0060E8  0EFC               	movlw	-4
 18476  0060EA  80E3               	bsf	plusw1,0,c
 18477  0060EC                     l32596:
 18478                           
 18479                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18480  0060EC  90D8               	bcf	status,0,c
 18481  0060EE  0EF9               	movlw	-7
 18482  0060F0  32E3               	rrcf	plusw1,f,c
 18483  0060F2  0EF8               	movlw	-8
 18484  0060F4  32E3               	rrcf	plusw1,f,c
 18485                           
 18486                           ;stkvar	___awdiv@counter @ sp[(-4)+3]
 18487  0060F6  0EFF               	movlw	-1
 18488  0060F8  50E3               	movf	plusw1,w,c
 18489  0060FA  6E3F               	movwf	btemp,c
 18490  0060FC  0E01               	movlw	1
 18491  0060FE  5E3F               	subwf	btemp,f,c
 18492  006100  0EFF               	movlw	-1
 18493  006102  C03F  FFE3         	movff	btemp,plusw1
 18494  006106  A4D8               	btfss	status,2,c
 18495  006108  D7BC               	goto	u59080
 18496  00610A                     u59100:
 18497                           
 18498                           ;stkvar	___awdiv@sign @ sp[(-4)+2]
 18499  00610A  0EFE               	movlw	-2
 18500  00610C  50E3               	movf	plusw1,w,c
 18501  00610E  B4D8               	btfsc	status,2,c
 18502  006110  D006               	goto	l32604
 18503                           
 18504                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
 18505                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
 18506  006112  0EFC               	movlw	-4
 18507  006114  6CE3               	negf	plusw1,c
 18508  006116  0EFD               	movlw	-3
 18509  006118  1EE3               	comf	plusw1,f,c
 18510  00611A  B0D8               	btfsc	status,0,c
 18511  00611C  2AE3               	incf	plusw1,f,c
 18512  00611E                     l32604:
 18513                           
 18514                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
 18515  00611E  0EFC               	movlw	-4
 18516  006120  CFE3 F03F          	movff	plusw1,btemp
 18517  006124  0EFD               	movlw	-3
 18518  006126  CFE3 F040          	movff	plusw1,btemp+1
 18519                           
 18520                           ; ___awdiv: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
 18521  00612A  0EF8               	movlw	248
 18522  00612C  26E1               	addwf	fsr1l,f,c
 18523  00612E  0EFF               	movlw	255
 18524  006130  22E2               	addwfc	fsr1h,f,c
 18525  006132  0012               	return		;funcret
 18526  006134                     __end_of___awdiv:
 18527                           	opt stack 0
 18528                           tblptru	equ	0xFF8
 18529                           tblptrh	equ	0xFF7
 18530                           tblptrl	equ	0xFF6
 18531                           tablat	equ	0xFF5
 18532                           prodh	equ	0xFF4
 18533                           prodl	equ	0xFF3
 18534                           intcon	equ	0xFF2
 18535                           intcon2	equ	0xFF1
 18536                           postinc0	equ	0xFEE
 18537                           wreg	equ	0xFE8
 18538                           postinc1	equ	0xFE6
 18539                           plusw1	equ	0xFE3
 18540                           fsr1h	equ	0xFE2
 18541                           fsr1l	equ	0xFE1
 18542                           indf2	equ	0xFDF
 18543                           postinc2	equ	0xFDE
 18544                           postdec2	equ	0xFDD
 18545                           plusw2	equ	0xFDB
 18546                           fsr2h	equ	0xFDA
 18547                           fsr2l	equ	0xFD9
 18548                           status	equ	0xFD8
 18549                           
 18550 ;; *************** function _Function_C_1 *****************
 18551 ;; Defined at:
 18552 ;;		line 619 in file "menu.c"
 18553 ;; Parameters:    Size  Location     Type
 18554 ;;		None
 18555 ;; Auto vars:     Size  Location     Type
 18556 ;;		None
 18557 ;; Return value:  Size  Location     Type
 18558 ;;                  1    wreg      void 
 18559 ;; Registers used:
 18560 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18561 ;; Tracked objects:
 18562 ;;		On entry : 0/0
 18563 ;;		On exit  : 0/0
 18564 ;;		Unchanged: 0/0
 18565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18569 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18570 ;;Total ram usage:        0 bytes
 18571 ;; Hardware stack levels used:    1
 18572 ;; Hardware stack levels required when called:   16
 18573 ;; This function calls:
 18574 ;;		_Lcd_Print_String
 18575 ;;		___lbmod
 18576 ;;		___wmul
 18577 ;;		_clear_row1
 18578 ;;		_clear_row2
 18579 ;;		_un_block_code
 18580 ;; This function is called by:
 18581 ;;		_Function_C
 18582 ;; This function uses a non-reentrant model
 18583 ;;
 18584                           
 18585                           	psect	text56
 18586  0080FE                     __ptext56:
 18587                           	opt stack 0
 18588  0080FE                     _Function_C_1:
 18589                           	opt stack 12
 18590                           
 18591                           ;menu.c: 621: which_screen = DRUMS_CC_TYPE_MENU;
 18592                           
 18593                           ;incstack = 0
 18594  0080FE  0E0C               	movlw	12
 18595  008100  6E4F               	movwf	_which_screen,c
 18596                           
 18597                           ;menu.c: 622: lcd_print_once = 0;
 18598  008102  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18599                           
 18600                           ;menu.c: 623: encoder_click = 0;
 18601  008104  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 18602                           
 18603                           ;menu.c: 625: drumCCTypeMenu.selector = CONTROL_MODE;
 18604  008106  0E00               	movlw	0
 18605  008108  B801               	btfsc	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 18606  00810A  0E01               	movlw	1
 18607  00810C  0101               	movlb	1	; () banked
 18608  00810E  6F64               	movwf	(_drumCCTypeMenu+2)& (0+255),b
 18609                           
 18610                           ;menu.c: 627: while(encoder_click == 0) {
 18611  008110  D02D               	goto	l3597
 18612  008112                     
 18613                           ;menu.c: 631: un_block_code();
 18614                           
 18615                           ; BSR set to: 1
 18616  008112  EC10  F04C         	call	_un_block_code	;wreg free
 18617                           
 18618                           ;menu.c: 633: if (lcd_print_once == 0) {
 18619  008116  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18620  008118  D028               	goto	l3599
 18621                           
 18622                           ;menu.c: 634: clear_row1();
 18623  00811A  EC7B  F04B         	call	_clear_row1	;wreg free
 18624                           
 18625                           ;menu.c: 635: Lcd_Print_String("Drum CC Mode:");
 18626  00811E  0EE0               	movlw	low STR_27
 18627  008120  0100               	movlb	0	; () banked
 18628  008122  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 18629  008124  0EFE               	movlw	high STR_27
 18630  008126  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18631  008128  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 18632                           
 18633                           ;menu.c: 636: clear_row2();
 18634  00812C  EC67  F04B         	call	_clear_row2	;wreg free
 18635                           
 18636                           ;menu.c: 637: Lcd_Print_String(LCD_STRINGS[(drumCCTypeMenu.selector % drumCCTypeMenu.num
      +                          ber) + drumCCTypeMenu.address]);
 18637  008130  0101               	movlb	1	; () banked
 18638  008132  5162               	movf	_drumCCTypeMenu& (0+255),w,b
 18639  008134  6EE6               	movwf	postinc1,c
 18640  008136  5164               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 18641  008138  6EE6               	movwf	postinc1,c
 18642  00813A  ECC6  F040         	call	___lbmod	;wreg free
 18643  00813E  503F               	movf	btemp,w,c
 18644  008140  0101               	movlb	1	; () banked
 18645  008142  2563               	addwf	(_drumCCTypeMenu+1)& (0+255),w,b
 18646  008144  0100               	movlb	0	; () banked
 18647  008146  6F60               	movwf	___wmul@multiplier& (0+255),b
 18648  008148  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 18649  00814A  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 18650  00814C  0E00               	movlw	0
 18651  00814E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18652  008150  0E11               	movlw	17
 18653  008152  6F62               	movwf	___wmul@multiplicand& (0+255),b
 18654  008154  EC8F  F04B         	call	___wmul	;wreg free
 18655  008158  0E9E               	movlw	low _LCD_STRINGS
 18656  00815A  0100               	movlb	0	; () banked
 18657  00815C  2560               	addwf	?___wmul& (0+255),w,b
 18658  00815E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 18659  008160  0EF3               	movlw	high _LCD_STRINGS
 18660  008162  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 18661  008164  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18662  008166  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 18663  00816A                     l3599:
 18664                           
 18665                           ;menu.c: 638: }
 18666                           ;menu.c: 639: lcd_print_once = 1;
 18667  00816A  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18668  00816C                     l3597:
 18669  00816C  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 18670  00816E  D7D1               	goto	l3598
 18671                           
 18672                           ;menu.c: 640: }
 18673                           ;menu.c: 642: CONTROL_MODE = drumCCTypeMenu.selector % drumCCTypeMenu.number;
 18674  008170  0101               	movlb	1	; () banked
 18675  008172  5162               	movf	_drumCCTypeMenu& (0+255),w,b
 18676  008174  6EE6               	movwf	postinc1,c
 18677  008176  5164               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 18678  008178  6EE6               	movwf	postinc1,c
 18679  00817A  ECC6  F040         	call	___lbmod	;wreg free
 18680  00817E  303F               	rrcf	btemp,w,c
 18681  008180  A0D8               	btfss	status,0,c
 18682  008182  D002               	goto	u58150
 18683  008184  8801               	bsf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 18684  008186  0012               	return	
 18685  008188                     u58150:
 18686  008188  9801               	bcf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 18687  00818A  0012               	return		;funcret
 18688  00818C                     __end_of_Function_C_1:
 18689                           	opt stack 0
 18690                           tblptru	equ	0xFF8
 18691                           tblptrh	equ	0xFF7
 18692                           tblptrl	equ	0xFF6
 18693                           tablat	equ	0xFF5
 18694                           prodh	equ	0xFF4
 18695                           prodl	equ	0xFF3
 18696                           intcon	equ	0xFF2
 18697                           intcon2	equ	0xFF1
 18698                           postinc0	equ	0xFEE
 18699                           wreg	equ	0xFE8
 18700                           postinc1	equ	0xFE6
 18701                           plusw1	equ	0xFE3
 18702                           fsr1h	equ	0xFE2
 18703                           fsr1l	equ	0xFE1
 18704                           indf2	equ	0xFDF
 18705                           postinc2	equ	0xFDE
 18706                           postdec2	equ	0xFDD
 18707                           plusw2	equ	0xFDB
 18708                           fsr2h	equ	0xFDA
 18709                           fsr2l	equ	0xFD9
 18710                           status	equ	0xFD8
 18711                           
 18712 ;; *************** function _Function_B *****************
 18713 ;; Defined at:
 18714 ;;		line 596 in file "menu.c"
 18715 ;; Parameters:    Size  Location     Type
 18716 ;;		None
 18717 ;; Auto vars:     Size  Location     Type
 18718 ;;		None
 18719 ;; Return value:  Size  Location     Type
 18720 ;;                  1    wreg      void 
 18721 ;; Registers used:
 18722 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18723 ;; Tracked objects:
 18724 ;;		On entry : 0/0
 18725 ;;		On exit  : 0/0
 18726 ;;		Unchanged: 0/0
 18727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18732 ;;Total ram usage:        0 bytes
 18733 ;; Hardware stack levels used:    1
 18734 ;; Hardware stack levels required when called:   16
 18735 ;; This function calls:
 18736 ;;		_Lcd_Print_String
 18737 ;;		___lbmod
 18738 ;;		___wmul
 18739 ;;		_clear_row2
 18740 ;;		_un_block_code
 18741 ;; This function is called by:
 18742 ;;		_menu_lcd
 18743 ;; This function uses a non-reentrant model
 18744 ;;
 18745                           
 18746                           	psect	text57
 18747  00872A                     __ptext57:
 18748                           	opt stack 0
 18749  00872A                     _Function_B:
 18750                           	opt stack 13
 18751                           
 18752                           ;menu.c: 598: which_screen = TRANSPOSE_MENU;
 18753                           
 18754                           ;incstack = 0
 18755  00872A  0E04               	movlw	4
 18756  00872C  6E4F               	movwf	_which_screen,c
 18757                           
 18758                           ;menu.c: 599: lcd_print_once = 0;
 18759  00872E  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18760                           
 18761                           ;menu.c: 601: transposeMenu.selector = TRANSPOSE_MODE;
 18762  008730  0E00               	movlw	0
 18763  008732  BC04               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 18764  008734  0E01               	movlw	1
 18765  008736  0101               	movlb	1	; () banked
 18766  008738  6F6A               	movwf	(_transposeMenu+2)& (0+255),b
 18767                           
 18768                           ;menu.c: 603: while(encoder_click == 0) {
 18769  00873A  D031               	goto	l3590
 18770  00873C                     
 18771                           ;menu.c: 607: un_block_code();
 18772                           
 18773                           ; BSR set to: 1
 18774  00873C  EC10  F04C         	call	_un_block_code	;wreg free
 18775                           
 18776                           ;menu.c: 609: if (lcd_print_once == 0) {
 18777  008740  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18778  008742  D02C               	goto	u59845
 18779                           
 18780                           ;menu.c: 610: clear_row2();
 18781  008744  EC67  F04B         	call	_clear_row2	;wreg free
 18782                           
 18783                           ;menu.c: 611: Lcd_Print_String(LCD_STRINGS[(transposeMenu.selector % transposeMenu.numbe
      +                          r) + transposeMenu.address]);
 18784  008748  0101               	movlb	1	; () banked
 18785  00874A  5168               	movf	_transposeMenu& (0+255),w,b
 18786  00874C  6EE6               	movwf	postinc1,c
 18787  00874E  516A               	movf	(_transposeMenu+2)& (0+255),w,b
 18788  008750  6EE6               	movwf	postinc1,c
 18789  008752  ECC6  F040         	call	___lbmod	;wreg free
 18790  008756  503F               	movf	btemp,w,c
 18791  008758  0101               	movlb	1	; () banked
 18792  00875A  2569               	addwf	(_transposeMenu+1)& (0+255),w,b
 18793  00875C  0100               	movlb	0	; () banked
 18794  00875E  6F60               	movwf	___wmul@multiplier& (0+255),b
 18795  008760  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 18796  008762  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 18797  008764  0E00               	movlw	0
 18798  008766  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18799  008768  0E11               	movlw	17
 18800  00876A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 18801  00876C  EC8F  F04B         	call	___wmul	;wreg free
 18802  008770  0E9E               	movlw	low _LCD_STRINGS
 18803  008772  0100               	movlb	0	; () banked
 18804  008774  2560               	addwf	?___wmul& (0+255),w,b
 18805  008776  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 18806  008778  0EF3               	movlw	high _LCD_STRINGS
 18807  00877A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 18808  00877C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18809  00877E  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 18810                           
 18811                           ;menu.c: 612: TRANSPOSE_MODE = transposeMenu.selector % transposeMenu.number;
 18812  008782  0101               	movlb	1	; () banked
 18813  008784  5168               	movf	_transposeMenu& (0+255),w,b
 18814  008786  6EE6               	movwf	postinc1,c
 18815  008788  516A               	movf	(_transposeMenu+2)& (0+255),w,b
 18816  00878A  6EE6               	movwf	postinc1,c
 18817  00878C  ECC6  F040         	call	___lbmod	;wreg free
 18818  008790  303F               	rrcf	btemp,w,c
 18819  008792  A0D8               	btfss	status,0,c
 18820  008794  D002               	goto	u59830
 18821  008796  8C04               	bsf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 18822  008798  D001               	goto	u59845
 18823  00879A                     u59830:
 18824  00879A  9C04               	bcf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 18825  00879C                     u59845:
 18826                           
 18827                           ;menu.c: 613: }
 18828                           ;menu.c: 614: lcd_print_once = 1;
 18829  00879C  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18830  00879E                     l3590:
 18831  00879E  B405               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 18832  0087A0  0012               	return	
 18833  0087A2  D7CC               	goto	l3591
 18834  0087A4                     __end_of_Function_B:
 18835                           	opt stack 0
 18836                           tblptru	equ	0xFF8
 18837                           tblptrh	equ	0xFF7
 18838                           tblptrl	equ	0xFF6
 18839                           tablat	equ	0xFF5
 18840                           prodh	equ	0xFF4
 18841                           prodl	equ	0xFF3
 18842                           intcon	equ	0xFF2
 18843                           intcon2	equ	0xFF1
 18844                           postinc0	equ	0xFEE
 18845                           wreg	equ	0xFE8
 18846                           postinc1	equ	0xFE6
 18847                           plusw1	equ	0xFE3
 18848                           fsr1h	equ	0xFE2
 18849                           fsr1l	equ	0xFE1
 18850                           indf2	equ	0xFDF
 18851                           postinc2	equ	0xFDE
 18852                           postdec2	equ	0xFDD
 18853                           plusw2	equ	0xFDB
 18854                           fsr2h	equ	0xFDA
 18855                           fsr2l	equ	0xFD9
 18856                           status	equ	0xFD8
 18857                           
 18858 ;; *************** function _Function_A *****************
 18859 ;; Defined at:
 18860 ;;		line 539 in file "menu.c"
 18861 ;; Parameters:    Size  Location     Type
 18862 ;;		None
 18863 ;; Auto vars:     Size  Location     Type
 18864 ;;		None
 18865 ;; Return value:  Size  Location     Type
 18866 ;;                  1    wreg      void 
 18867 ;; Registers used:
 18868 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18869 ;; Tracked objects:
 18870 ;;		On entry : 0/0
 18871 ;;		On exit  : 0/0
 18872 ;;		Unchanged: 0/0
 18873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18878 ;;Total ram usage:        0 bytes
 18879 ;; Hardware stack levels used:    1
 18880 ;; Hardware stack levels required when called:   17
 18881 ;; This function calls:
 18882 ;;		_Function_A_1
 18883 ;;		_Function_A_2
 18884 ;;		_Function_A_3
 18885 ;;		_Lcd_Print_String
 18886 ;;		___lbmod
 18887 ;;		___wmul
 18888 ;;		_clear_row2
 18889 ;;		_un_block_code
 18890 ;; This function is called by:
 18891 ;;		_menu_lcd
 18892 ;; This function uses a non-reentrant model
 18893 ;;
 18894                           
 18895                           	psect	text58
 18896  007278                     __ptext58:
 18897                           	opt stack 0
 18898  007278                     _Function_A:
 18899                           	opt stack 12
 18900                           
 18901                           ;menu.c: 542: which_screen = KEYBOARD_MENU;
 18902                           
 18903                           ;incstack = 0
 18904  007278  0E03               	movlw	3
 18905  00727A  6E4F               	movwf	_which_screen,c
 18906                           
 18907                           ;menu.c: 543: lcd_print_once = 0;
 18908  00727C  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18909                           
 18910                           ;menu.c: 545: keyboardMenu.selector = KEYBOARD_MODE;
 18911  00727E  C0F2  F0E7         	movff	_KEYBOARD_MODE,_keyboardMenu+2
 18912                           
 18913                           ;menu.c: 547: while(encoder_click == 0) {
 18914  007282  D04B               	goto	l3576
 18915  007284                     
 18916                           ;menu.c: 549: un_block_code();
 18917  007284  EC10  F04C         	call	_un_block_code	;wreg free
 18918                           
 18919                           ;menu.c: 551: if (lcd_print_once == 0) {
 18920  007288  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18921  00728A  D042               	goto	l3581
 18922                           
 18923                           ;menu.c: 552: clear_row2();
 18924  00728C  EC67  F04B         	call	_clear_row2	;wreg free
 18925                           
 18926                           ;menu.c: 553: Lcd_Print_String(LCD_STRINGS[(keyboardMenu.selector % keyboardMenu.number)
      +                           + keyboardMenu.address]);
 18927  007290  0100               	movlb	0	; () banked
 18928  007292  51E5               	movf	_keyboardMenu& (0+255),w,b
 18929  007294  6EE6               	movwf	postinc1,c
 18930  007296  51E7               	movf	(_keyboardMenu+2)& (0+255),w,b
 18931  007298  6EE6               	movwf	postinc1,c
 18932  00729A  ECC6  F040         	call	___lbmod	;wreg free
 18933  00729E  503F               	movf	btemp,w,c
 18934  0072A0  0100               	movlb	0	; () banked
 18935  0072A2  25E6               	addwf	(_keyboardMenu+1)& (0+255),w,b
 18936  0072A4  6F60               	movwf	___wmul@multiplier& (0+255),b
 18937  0072A6  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 18938  0072A8  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 18939  0072AA  0E00               	movlw	0
 18940  0072AC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18941  0072AE  0E11               	movlw	17
 18942  0072B0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 18943  0072B2  EC8F  F04B         	call	___wmul	;wreg free
 18944  0072B6  0E9E               	movlw	low _LCD_STRINGS
 18945  0072B8  0100               	movlb	0	; () banked
 18946  0072BA  2560               	addwf	?___wmul& (0+255),w,b
 18947  0072BC  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 18948  0072BE  0EF3               	movlw	high _LCD_STRINGS
 18949  0072C0  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 18950  0072C2  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18951  0072C4  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 18952                           
 18953                           ;menu.c: 555: }
 18954                           ;menu.c: 558: while(ON_OFF == 1){
 18955  0072C8  D023               	goto	l3581
 18956  0072CA                     
 18957                           ;menu.c: 560: un_block_code();
 18958  0072CA  EC10  F04C         	call	_un_block_code	;wreg free
 18959                           
 18960                           ;menu.c: 563: if(print_row_2_once == 0){
 18961  0072CE  BE04               	btfsc	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 18962  0072D0  D01F               	goto	l3581
 18963                           
 18964                           ;menu.c: 564: clear_row2();
 18965  0072D2  EC67  F04B         	call	_clear_row2	;wreg free
 18966                           
 18967                           ;menu.c: 565: Lcd_Print_String(LCD_STRINGS[(keyboardMenu.selector % keyboardMenu.number)
      +                           + keyboardMenu.address]);
 18968  0072D6  0100               	movlb	0	; () banked
 18969  0072D8  51E5               	movf	_keyboardMenu& (0+255),w,b
 18970  0072DA  6EE6               	movwf	postinc1,c
 18971  0072DC  51E7               	movf	(_keyboardMenu+2)& (0+255),w,b
 18972  0072DE  6EE6               	movwf	postinc1,c
 18973  0072E0  ECC6  F040         	call	___lbmod	;wreg free
 18974  0072E4  503F               	movf	btemp,w,c
 18975  0072E6  0100               	movlb	0	; () banked
 18976  0072E8  25E6               	addwf	(_keyboardMenu+1)& (0+255),w,b
 18977  0072EA  6F60               	movwf	___wmul@multiplier& (0+255),b
 18978  0072EC  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 18979  0072EE  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 18980  0072F0  0E00               	movlw	0
 18981  0072F2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18982  0072F4  0E11               	movlw	17
 18983  0072F6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 18984  0072F8  EC8F  F04B         	call	___wmul	;wreg free
 18985  0072FC  0E9E               	movlw	low _LCD_STRINGS
 18986  0072FE  0100               	movlb	0	; () banked
 18987  007300  2560               	addwf	?___wmul& (0+255),w,b
 18988  007302  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 18989  007304  0EF3               	movlw	high _LCD_STRINGS
 18990  007306  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 18991  007308  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18992  00730A  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 18993                           
 18994                           ;menu.c: 566: print_row_2_once = 1;
 18995  00730E  8E04               	bsf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 18996  007310                     l3581:
 18997  007310  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 18998  007312  D7DB               	goto	l3580
 18999                           
 19000                           ;menu.c: 567: }
 19001                           ;menu.c: 568: }
 19002                           ;menu.c: 571: KEYBOARD_MODE = keyboardMenu.selector;
 19003  007314  C0E7  F0F2         	movff	_keyboardMenu+2,_KEYBOARD_MODE
 19004                           
 19005                           ;menu.c: 573: lcd_print_once = 1;
 19006  007318  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19007  00731A                     l3576:
 19008  00731A  A405               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 19009  00731C  D7B3               	goto	l3577
 19010                           
 19011                           ;menu.c: 574: }
 19012                           ;menu.c: 579: if(keyboardMenu.selector == MODES) {
 19013  00731E  0E03               	movlw	3
 19014  007320  0100               	movlb	0	; () banked
 19015  007322  19E7               	xorwf	(_keyboardMenu+2)& (0+255),w,b
 19016  007324  B4D8               	btfsc	status,2,c
 19017                           
 19018                           ; BSR set to: 0
 19019                           ;menu.c: 580: Function_A_1();
 19020  007326  ECD1  F038         	call	_Function_A_1	;wreg free
 19021                           
 19022                           ;menu.c: 581: }
 19023                           ;menu.c: 584: if(keyboardMenu.selector == TRIAD) {
 19024  00732A  0E06               	movlw	6
 19025  00732C  0100               	movlb	0	; () banked
 19026  00732E  19E7               	xorwf	(_keyboardMenu+2)& (0+255),w,b
 19027  007330  B4D8               	btfsc	status,2,c
 19028                           
 19029                           ; BSR set to: 0
 19030                           ;menu.c: 585: Function_A_2();
 19031  007332  EC66  F038         	call	_Function_A_2	;wreg free
 19032                           
 19033                           ;menu.c: 587: }
 19034                           ;menu.c: 589: if(keyboardMenu.selector == SEVENTH){
 19035  007336  0E09               	movlw	9
 19036  007338  0100               	movlb	0	; () banked
 19037  00733A  19E7               	xorwf	(_keyboardMenu+2)& (0+255),w,b
 19038  00733C  A4D8               	btfss	status,2,c
 19039  00733E  0012               	return	
 19040                           
 19041                           ; BSR set to: 0
 19042                           ;menu.c: 590: Function_A_3();
 19043  007340  ECFB  F037         	call	_Function_A_3	;wreg free
 19044  007344  0012               	return	
 19045  007346                     __end_of_Function_A:
 19046                           	opt stack 0
 19047                           tblptru	equ	0xFF8
 19048                           tblptrh	equ	0xFF7
 19049                           tblptrl	equ	0xFF6
 19050                           tablat	equ	0xFF5
 19051                           prodh	equ	0xFF4
 19052                           prodl	equ	0xFF3
 19053                           intcon	equ	0xFF2
 19054                           intcon2	equ	0xFF1
 19055                           postinc0	equ	0xFEE
 19056                           wreg	equ	0xFE8
 19057                           postinc1	equ	0xFE6
 19058                           plusw1	equ	0xFE3
 19059                           fsr1h	equ	0xFE2
 19060                           fsr1l	equ	0xFE1
 19061                           indf2	equ	0xFDF
 19062                           postinc2	equ	0xFDE
 19063                           postdec2	equ	0xFDD
 19064                           plusw2	equ	0xFDB
 19065                           fsr2h	equ	0xFDA
 19066                           fsr2l	equ	0xFD9
 19067                           status	equ	0xFD8
 19068                           
 19069 ;; *************** function _Function_A_3 *****************
 19070 ;; Defined at:
 19071 ;;		line 501 in file "menu.c"
 19072 ;; Parameters:    Size  Location     Type
 19073 ;;		None
 19074 ;; Auto vars:     Size  Location     Type
 19075 ;;		None
 19076 ;; Return value:  Size  Location     Type
 19077 ;;                  1    wreg      void 
 19078 ;; Registers used:
 19079 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19080 ;; Tracked objects:
 19081 ;;		On entry : 0/0
 19082 ;;		On exit  : 0/0
 19083 ;;		Unchanged: 0/0
 19084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19089 ;;Total ram usage:        0 bytes
 19090 ;; Hardware stack levels used:    1
 19091 ;; Hardware stack levels required when called:   16
 19092 ;; This function calls:
 19093 ;;		_Lcd_Print_String
 19094 ;;		___lbmod
 19095 ;;		___wmul
 19096 ;;		_clear_row1
 19097 ;;		_clear_row2
 19098 ;;		_un_block_code
 19099 ;; This function is called by:
 19100 ;;		_Function_A
 19101 ;; This function uses a non-reentrant model
 19102 ;;
 19103                           
 19104                           	psect	text59
 19105  006FF6                     __ptext59:
 19106                           	opt stack 0
 19107  006FF6                     _Function_A_3:
 19108                           	opt stack 12
 19109                           
 19110                           ;menu.c: 502: KEYBOARD_MODE = SEVENTH;
 19111                           
 19112                           ;incstack = 0
 19113  006FF6  0E09               	movlw	9
 19114  006FF8  0100               	movlb	0	; () banked
 19115  006FFA  6FF2               	movwf	_KEYBOARD_MODE& (0+255),b
 19116                           
 19117                           ;menu.c: 503: which_screen = SEVENTHS_MENU;
 19118  006FFC  0E0B               	movlw	11
 19119  006FFE  6E4F               	movwf	_which_screen,c
 19120                           
 19121                           ; BSR set to: 0
 19122                           ;menu.c: 504: lcd_print_once = 0;
 19123  007000  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19124                           
 19125                           ; BSR set to: 0
 19126                           ;menu.c: 505: encoder_click = 0;
 19127  007002  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 19128                           
 19129                           ; BSR set to: 0
 19130                           ;menu.c: 507: seventhMenu.selector = which_seventh;
 19131  007004  C0EF  F16D         	movff	_which_seventh,_seventhMenu+2
 19132                           
 19133                           ;menu.c: 509: while(encoder_click == 0) {
 19134  007008  D05E               	goto	l3565
 19135  00700A                     
 19136                           ; BSR set to: 0
 19137                           ;menu.c: 511: un_block_code();
 19138                           
 19139                           ; BSR set to: 0
 19140  00700A  EC10  F04C         	call	_un_block_code	;wreg free
 19141                           
 19142                           ;menu.c: 513: if (lcd_print_once == 0) {
 19143  00700E  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19144  007010  D04D               	goto	l3570
 19145                           
 19146                           ;menu.c: 514: clear_row1();
 19147  007012  EC7B  F04B         	call	_clear_row1	;wreg free
 19148                           
 19149                           ;menu.c: 515: Lcd_Print_String("Select Seventh:");
 19150  007016  0E2D               	movlw	low STR_26
 19151  007018  0100               	movlb	0	; () banked
 19152  00701A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19153  00701C  0EFE               	movlw	high STR_26
 19154  00701E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19155  007020  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 19156                           
 19157                           ;menu.c: 516: clear_row2();
 19158  007024  EC67  F04B         	call	_clear_row2	;wreg free
 19159                           
 19160                           ;menu.c: 517: Lcd_Print_String(LCD_STRINGS[(seventhMenu.selector % seventhMenu.number) +
      +                           seventhMenu.address]);
 19161  007028  0101               	movlb	1	; () banked
 19162  00702A  516B               	movf	_seventhMenu& (0+255),w,b
 19163  00702C  6EE6               	movwf	postinc1,c
 19164  00702E  516D               	movf	(_seventhMenu+2)& (0+255),w,b
 19165  007030  6EE6               	movwf	postinc1,c
 19166  007032  ECC6  F040         	call	___lbmod	;wreg free
 19167  007036  503F               	movf	btemp,w,c
 19168  007038  0101               	movlb	1	; () banked
 19169  00703A  256C               	addwf	(_seventhMenu+1)& (0+255),w,b
 19170  00703C  0100               	movlb	0	; () banked
 19171  00703E  6F60               	movwf	___wmul@multiplier& (0+255),b
 19172  007040  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19173  007042  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19174  007044  0E00               	movlw	0
 19175  007046  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19176  007048  0E11               	movlw	17
 19177  00704A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19178  00704C  EC8F  F04B         	call	___wmul	;wreg free
 19179  007050  0E9E               	movlw	low _LCD_STRINGS
 19180  007052  0100               	movlb	0	; () banked
 19181  007054  2560               	addwf	?___wmul& (0+255),w,b
 19182  007056  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19183  007058  0EF3               	movlw	high _LCD_STRINGS
 19184  00705A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19185  00705C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19186  00705E  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 19187                           
 19188                           ;menu.c: 518: }
 19189                           ;menu.c: 521: while(ON_OFF == 1){
 19190  007062  D024               	goto	l3570
 19191  007064                     
 19192                           ;menu.c: 523: un_block_code();
 19193  007064  EC10  F04C         	call	_un_block_code	;wreg free
 19194                           
 19195                           ;menu.c: 526: if(print_row_2_once == 0){
 19196  007068  BE04               	btfsc	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19197  00706A  D020               	goto	l3570
 19198                           
 19199                           ;menu.c: 527: clear_row2();
 19200  00706C  EC67  F04B         	call	_clear_row2	;wreg free
 19201                           
 19202                           ;menu.c: 528: Lcd_Print_String(LCD_STRINGS[(seventhMenu.selector % seventhMenu.number) +
      +                           seventhMenu.address]);
 19203  007070  0101               	movlb	1	; () banked
 19204  007072  516B               	movf	_seventhMenu& (0+255),w,b
 19205  007074  6EE6               	movwf	postinc1,c
 19206  007076  516D               	movf	(_seventhMenu+2)& (0+255),w,b
 19207  007078  6EE6               	movwf	postinc1,c
 19208  00707A  ECC6  F040         	call	___lbmod	;wreg free
 19209  00707E  503F               	movf	btemp,w,c
 19210  007080  0101               	movlb	1	; () banked
 19211  007082  256C               	addwf	(_seventhMenu+1)& (0+255),w,b
 19212  007084  0100               	movlb	0	; () banked
 19213  007086  6F60               	movwf	___wmul@multiplier& (0+255),b
 19214  007088  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19215  00708A  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19216  00708C  0E00               	movlw	0
 19217  00708E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19218  007090  0E11               	movlw	17
 19219  007092  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19220  007094  EC8F  F04B         	call	___wmul	;wreg free
 19221  007098  0E9E               	movlw	low _LCD_STRINGS
 19222  00709A  0100               	movlb	0	; () banked
 19223  00709C  2560               	addwf	?___wmul& (0+255),w,b
 19224  00709E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19225  0070A0  0EF3               	movlw	high _LCD_STRINGS
 19226  0070A2  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19227  0070A4  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19228  0070A6  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 19229                           
 19230                           ;menu.c: 529: print_row_2_once = 1;
 19231  0070AA  8E04               	bsf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19232  0070AC                     l3570:
 19233  0070AC  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 19234  0070AE  D7DA               	goto	l3569
 19235                           
 19236                           ;menu.c: 530: }
 19237                           ;menu.c: 531: }
 19238                           ;menu.c: 533: which_seventh = seventhMenu.selector % seventhMenu.number;
 19239  0070B0  0101               	movlb	1	; () banked
 19240  0070B2  516B               	movf	_seventhMenu& (0+255),w,b
 19241  0070B4  6EE6               	movwf	postinc1,c
 19242  0070B6  516D               	movf	(_seventhMenu+2)& (0+255),w,b
 19243  0070B8  6EE6               	movwf	postinc1,c
 19244  0070BA  ECC6  F040         	call	___lbmod	;wreg free
 19245  0070BE  503F               	movf	btemp,w,c
 19246  0070C0  0100               	movlb	0	; () banked
 19247  0070C2  6FEF               	movwf	_which_seventh& (0+255),b
 19248                           
 19249                           ; BSR set to: 0
 19250                           ;menu.c: 534: lcd_print_once = 1;
 19251  0070C4  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19252  0070C6                     l3565:
 19253                           
 19254                           ; BSR set to: 0
 19255                           
 19256                           ; BSR set to: 0
 19257  0070C6  B405               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 19258  0070C8  0012               	return	
 19259  0070CA  D79F               	goto	l3566
 19260  0070CC                     __end_of_Function_A_3:
 19261                           	opt stack 0
 19262                           tblptru	equ	0xFF8
 19263                           tblptrh	equ	0xFF7
 19264                           tblptrl	equ	0xFF6
 19265                           tablat	equ	0xFF5
 19266                           prodh	equ	0xFF4
 19267                           prodl	equ	0xFF3
 19268                           intcon	equ	0xFF2
 19269                           intcon2	equ	0xFF1
 19270                           postinc0	equ	0xFEE
 19271                           wreg	equ	0xFE8
 19272                           postinc1	equ	0xFE6
 19273                           plusw1	equ	0xFE3
 19274                           fsr1h	equ	0xFE2
 19275                           fsr1l	equ	0xFE1
 19276                           indf2	equ	0xFDF
 19277                           postinc2	equ	0xFDE
 19278                           postdec2	equ	0xFDD
 19279                           plusw2	equ	0xFDB
 19280                           fsr2h	equ	0xFDA
 19281                           fsr2l	equ	0xFD9
 19282                           status	equ	0xFD8
 19283                           
 19284 ;; *************** function _Function_A_2 *****************
 19285 ;; Defined at:
 19286 ;;		line 462 in file "menu.c"
 19287 ;; Parameters:    Size  Location     Type
 19288 ;;		None
 19289 ;; Auto vars:     Size  Location     Type
 19290 ;;		None
 19291 ;; Return value:  Size  Location     Type
 19292 ;;                  1    wreg      void 
 19293 ;; Registers used:
 19294 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19295 ;; Tracked objects:
 19296 ;;		On entry : 0/0
 19297 ;;		On exit  : 0/0
 19298 ;;		Unchanged: 0/0
 19299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19304 ;;Total ram usage:        0 bytes
 19305 ;; Hardware stack levels used:    1
 19306 ;; Hardware stack levels required when called:   16
 19307 ;; This function calls:
 19308 ;;		_Lcd_Print_String
 19309 ;;		___lbmod
 19310 ;;		___wmul
 19311 ;;		_clear_row1
 19312 ;;		_clear_row2
 19313 ;;		_un_block_code
 19314 ;; This function is called by:
 19315 ;;		_Function_A
 19316 ;; This function uses a non-reentrant model
 19317 ;;
 19318                           
 19319                           	psect	text60
 19320  0070CC                     __ptext60:
 19321                           	opt stack 0
 19322  0070CC                     _Function_A_2:
 19323                           	opt stack 12
 19324                           
 19325                           ;menu.c: 464: KEYBOARD_MODE = TRIAD;
 19326                           
 19327                           ; BSR set to: 0
 19328                           ;incstack = 0
 19329  0070CC  0E06               	movlw	6
 19330  0070CE  0100               	movlb	0	; () banked
 19331  0070D0  6FF2               	movwf	_KEYBOARD_MODE& (0+255),b
 19332                           
 19333                           ;menu.c: 465: which_screen = TRIADS_MENU;
 19334  0070D2  0E0A               	movlw	10
 19335  0070D4  6E4F               	movwf	_which_screen,c
 19336                           
 19337                           ; BSR set to: 0
 19338                           ;menu.c: 466: lcd_print_once = 0;
 19339  0070D6  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19340                           
 19341                           ; BSR set to: 0
 19342                           ;menu.c: 467: encoder_click = 0;
 19343  0070D8  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 19344                           
 19345                           ; BSR set to: 0
 19346                           ;menu.c: 469: triadMenu.selector = which_triad;
 19347  0070DA  C0F0  F170         	movff	_which_triad,_triadMenu+2
 19348                           
 19349                           ;menu.c: 471: while(encoder_click == 0) {
 19350  0070DE  D05E               	goto	l3554
 19351  0070E0                     
 19352                           ; BSR set to: 0
 19353                           ;menu.c: 474: un_block_code();
 19354                           
 19355                           ; BSR set to: 0
 19356  0070E0  EC10  F04C         	call	_un_block_code	;wreg free
 19357                           
 19358                           ;menu.c: 476: if (lcd_print_once == 0) {
 19359  0070E4  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19360  0070E6  D04D               	goto	l3559
 19361                           
 19362                           ;menu.c: 477: clear_row1();
 19363  0070E8  EC7B  F04B         	call	_clear_row1	;wreg free
 19364                           
 19365                           ;menu.c: 478: Lcd_Print_String("Select Triad:");
 19366  0070EC  0ED2               	movlw	low STR_25
 19367  0070EE  0100               	movlb	0	; () banked
 19368  0070F0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19369  0070F2  0EFE               	movlw	high STR_25
 19370  0070F4  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19371  0070F6  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 19372                           
 19373                           ;menu.c: 479: clear_row2();
 19374  0070FA  EC67  F04B         	call	_clear_row2	;wreg free
 19375                           
 19376                           ;menu.c: 480: Lcd_Print_String(LCD_STRINGS[(triadMenu.selector % triadMenu.number) + tri
      +                          adMenu.address]);
 19377  0070FE  0101               	movlb	1	; () banked
 19378  007100  516E               	movf	_triadMenu& (0+255),w,b
 19379  007102  6EE6               	movwf	postinc1,c
 19380  007104  5170               	movf	(_triadMenu+2)& (0+255),w,b
 19381  007106  6EE6               	movwf	postinc1,c
 19382  007108  ECC6  F040         	call	___lbmod	;wreg free
 19383  00710C  503F               	movf	btemp,w,c
 19384  00710E  0101               	movlb	1	; () banked
 19385  007110  256F               	addwf	(_triadMenu+1)& (0+255),w,b
 19386  007112  0100               	movlb	0	; () banked
 19387  007114  6F60               	movwf	___wmul@multiplier& (0+255),b
 19388  007116  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19389  007118  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19390  00711A  0E00               	movlw	0
 19391  00711C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19392  00711E  0E11               	movlw	17
 19393  007120  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19394  007122  EC8F  F04B         	call	___wmul	;wreg free
 19395  007126  0E9E               	movlw	low _LCD_STRINGS
 19396  007128  0100               	movlb	0	; () banked
 19397  00712A  2560               	addwf	?___wmul& (0+255),w,b
 19398  00712C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19399  00712E  0EF3               	movlw	high _LCD_STRINGS
 19400  007130  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19401  007132  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19402  007134  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 19403                           
 19404                           ;menu.c: 481: }
 19405                           ;menu.c: 484: while(ON_OFF == 1){
 19406  007138  D024               	goto	l3559
 19407  00713A                     
 19408                           ;menu.c: 485: un_block_code();
 19409  00713A  EC10  F04C         	call	_un_block_code	;wreg free
 19410                           
 19411                           ;menu.c: 488: if(print_row_2_once == 0){
 19412  00713E  BE04               	btfsc	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19413  007140  D020               	goto	l3559
 19414                           
 19415                           ;menu.c: 489: clear_row2();
 19416  007142  EC67  F04B         	call	_clear_row2	;wreg free
 19417                           
 19418                           ;menu.c: 490: Lcd_Print_String(LCD_STRINGS[(triadMenu.selector % triadMenu.number) + tri
      +                          adMenu.address]);
 19419  007146  0101               	movlb	1	; () banked
 19420  007148  516E               	movf	_triadMenu& (0+255),w,b
 19421  00714A  6EE6               	movwf	postinc1,c
 19422  00714C  5170               	movf	(_triadMenu+2)& (0+255),w,b
 19423  00714E  6EE6               	movwf	postinc1,c
 19424  007150  ECC6  F040         	call	___lbmod	;wreg free
 19425  007154  503F               	movf	btemp,w,c
 19426  007156  0101               	movlb	1	; () banked
 19427  007158  256F               	addwf	(_triadMenu+1)& (0+255),w,b
 19428  00715A  0100               	movlb	0	; () banked
 19429  00715C  6F60               	movwf	___wmul@multiplier& (0+255),b
 19430  00715E  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19431  007160  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19432  007162  0E00               	movlw	0
 19433  007164  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19434  007166  0E11               	movlw	17
 19435  007168  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19436  00716A  EC8F  F04B         	call	___wmul	;wreg free
 19437  00716E  0E9E               	movlw	low _LCD_STRINGS
 19438  007170  0100               	movlb	0	; () banked
 19439  007172  2560               	addwf	?___wmul& (0+255),w,b
 19440  007174  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19441  007176  0EF3               	movlw	high _LCD_STRINGS
 19442  007178  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19443  00717A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19444  00717C  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 19445                           
 19446                           ;menu.c: 491: print_row_2_once = 1;
 19447  007180  8E04               	bsf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19448  007182                     l3559:
 19449  007182  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 19450  007184  D7DA               	goto	l3558
 19451                           
 19452                           ;menu.c: 492: }
 19453                           ;menu.c: 493: }
 19454                           ;menu.c: 495: which_triad = triadMenu.selector % triadMenu.number;
 19455  007186  0101               	movlb	1	; () banked
 19456  007188  516E               	movf	_triadMenu& (0+255),w,b
 19457  00718A  6EE6               	movwf	postinc1,c
 19458  00718C  5170               	movf	(_triadMenu+2)& (0+255),w,b
 19459  00718E  6EE6               	movwf	postinc1,c
 19460  007190  ECC6  F040         	call	___lbmod	;wreg free
 19461  007194  503F               	movf	btemp,w,c
 19462  007196  0100               	movlb	0	; () banked
 19463  007198  6FF0               	movwf	_which_triad& (0+255),b
 19464                           
 19465                           ; BSR set to: 0
 19466                           ;menu.c: 496: lcd_print_once = 1;
 19467  00719A  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19468  00719C                     l3554:
 19469                           
 19470                           ; BSR set to: 0
 19471                           
 19472                           ; BSR set to: 0
 19473  00719C  B405               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 19474  00719E  0012               	return	
 19475  0071A0  D79F               	goto	l3555
 19476  0071A2                     __end_of_Function_A_2:
 19477                           	opt stack 0
 19478                           tblptru	equ	0xFF8
 19479                           tblptrh	equ	0xFF7
 19480                           tblptrl	equ	0xFF6
 19481                           tablat	equ	0xFF5
 19482                           prodh	equ	0xFF4
 19483                           prodl	equ	0xFF3
 19484                           intcon	equ	0xFF2
 19485                           intcon2	equ	0xFF1
 19486                           postinc0	equ	0xFEE
 19487                           wreg	equ	0xFE8
 19488                           postinc1	equ	0xFE6
 19489                           plusw1	equ	0xFE3
 19490                           fsr1h	equ	0xFE2
 19491                           fsr1l	equ	0xFE1
 19492                           indf2	equ	0xFDF
 19493                           postinc2	equ	0xFDE
 19494                           postdec2	equ	0xFDD
 19495                           plusw2	equ	0xFDB
 19496                           fsr2h	equ	0xFDA
 19497                           fsr2l	equ	0xFD9
 19498                           status	equ	0xFD8
 19499                           
 19500 ;; *************** function _Function_A_1 *****************
 19501 ;; Defined at:
 19502 ;;		line 422 in file "menu.c"
 19503 ;; Parameters:    Size  Location     Type
 19504 ;;		None
 19505 ;; Auto vars:     Size  Location     Type
 19506 ;;		None
 19507 ;; Return value:  Size  Location     Type
 19508 ;;                  1    wreg      void 
 19509 ;; Registers used:
 19510 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19511 ;; Tracked objects:
 19512 ;;		On entry : 0/0
 19513 ;;		On exit  : 0/0
 19514 ;;		Unchanged: 0/0
 19515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19520 ;;Total ram usage:        0 bytes
 19521 ;; Hardware stack levels used:    1
 19522 ;; Hardware stack levels required when called:   16
 19523 ;; This function calls:
 19524 ;;		_Lcd_Print_String
 19525 ;;		___lbmod
 19526 ;;		___wmul
 19527 ;;		_clear_row1
 19528 ;;		_clear_row2
 19529 ;;		_un_block_code
 19530 ;; This function is called by:
 19531 ;;		_Function_A
 19532 ;; This function uses a non-reentrant model
 19533 ;;
 19534                           
 19535                           	psect	text61
 19536  0071A2                     __ptext61:
 19537                           	opt stack 0
 19538  0071A2                     _Function_A_1:
 19539                           	opt stack 12
 19540                           
 19541                           ;menu.c: 424: KEYBOARD_MODE = MODES;
 19542                           
 19543                           ; BSR set to: 0
 19544                           ;incstack = 0
 19545  0071A2  0E03               	movlw	3
 19546  0071A4  0100               	movlb	0	; () banked
 19547  0071A6  6FF2               	movwf	_KEYBOARD_MODE& (0+255),b
 19548                           
 19549                           ;menu.c: 425: which_screen = MODES_MENU;
 19550  0071A8  0E09               	movlw	9
 19551  0071AA  6E4F               	movwf	_which_screen,c
 19552                           
 19553                           ; BSR set to: 0
 19554                           ;menu.c: 426: lcd_print_once = 0;
 19555  0071AC  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19556                           
 19557                           ; BSR set to: 0
 19558                           ;menu.c: 427: encoder_click = 0;
 19559  0071AE  9405               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 19560                           
 19561                           ; BSR set to: 0
 19562                           ;menu.c: 429: modeMenu.selector = which_mode;
 19563  0071B0  C0F1  F173         	movff	_which_mode,_modeMenu+2
 19564                           
 19565                           ;menu.c: 431: while(encoder_click == 0) {
 19566  0071B4  D05E               	goto	l3543
 19567  0071B6                     
 19568                           ; BSR set to: 0
 19569                           ;menu.c: 434: un_block_code();
 19570                           
 19571                           ; BSR set to: 0
 19572  0071B6  EC10  F04C         	call	_un_block_code	;wreg free
 19573                           
 19574                           ;menu.c: 436: if (lcd_print_once == 0) {
 19575  0071BA  B005               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19576  0071BC  D04D               	goto	l3548
 19577                           
 19578                           ;menu.c: 437: clear_row1();
 19579  0071BE  EC7B  F04B         	call	_clear_row1	;wreg free
 19580                           
 19581                           ;menu.c: 438: Lcd_Print_String("Enter Mode:");
 19582  0071C2  0E58               	movlw	low STR_24
 19583  0071C4  0100               	movlb	0	; () banked
 19584  0071C6  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19585  0071C8  0EFF               	movlw	high STR_24
 19586  0071CA  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19587  0071CC  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 19588                           
 19589                           ;menu.c: 439: clear_row2();
 19590  0071D0  EC67  F04B         	call	_clear_row2	;wreg free
 19591                           
 19592                           ;menu.c: 440: Lcd_Print_String(LCD_STRINGS[(modeMenu.selector % modeMenu.number) + modeM
      +                          enu.address]);
 19593  0071D4  0101               	movlb	1	; () banked
 19594  0071D6  5171               	movf	_modeMenu& (0+255),w,b
 19595  0071D8  6EE6               	movwf	postinc1,c
 19596  0071DA  5173               	movf	(_modeMenu+2)& (0+255),w,b
 19597  0071DC  6EE6               	movwf	postinc1,c
 19598  0071DE  ECC6  F040         	call	___lbmod	;wreg free
 19599  0071E2  503F               	movf	btemp,w,c
 19600  0071E4  0101               	movlb	1	; () banked
 19601  0071E6  2572               	addwf	(_modeMenu+1)& (0+255),w,b
 19602  0071E8  0100               	movlb	0	; () banked
 19603  0071EA  6F60               	movwf	___wmul@multiplier& (0+255),b
 19604  0071EC  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19605  0071EE  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19606  0071F0  0E00               	movlw	0
 19607  0071F2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19608  0071F4  0E11               	movlw	17
 19609  0071F6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19610  0071F8  EC8F  F04B         	call	___wmul	;wreg free
 19611  0071FC  0E9E               	movlw	low _LCD_STRINGS
 19612  0071FE  0100               	movlb	0	; () banked
 19613  007200  2560               	addwf	?___wmul& (0+255),w,b
 19614  007202  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19615  007204  0EF3               	movlw	high _LCD_STRINGS
 19616  007206  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19617  007208  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19618  00720A  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 19619                           
 19620                           ;menu.c: 441: }
 19621                           ;menu.c: 444: while(ON_OFF == 1){
 19622  00720E  D024               	goto	l3548
 19623  007210                     
 19624                           ;menu.c: 446: un_block_code();
 19625  007210  EC10  F04C         	call	_un_block_code	;wreg free
 19626                           
 19627                           ;menu.c: 449: if(print_row_2_once == 0){
 19628  007214  BE04               	btfsc	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19629  007216  D020               	goto	l3548
 19630                           
 19631                           ;menu.c: 450: clear_row2();
 19632  007218  EC67  F04B         	call	_clear_row2	;wreg free
 19633                           
 19634                           ;menu.c: 451: Lcd_Print_String(LCD_STRINGS[(modeMenu.selector % modeMenu.number) + modeM
      +                          enu.address]);
 19635  00721C  0101               	movlb	1	; () banked
 19636  00721E  5171               	movf	_modeMenu& (0+255),w,b
 19637  007220  6EE6               	movwf	postinc1,c
 19638  007222  5173               	movf	(_modeMenu+2)& (0+255),w,b
 19639  007224  6EE6               	movwf	postinc1,c
 19640  007226  ECC6  F040         	call	___lbmod	;wreg free
 19641  00722A  503F               	movf	btemp,w,c
 19642  00722C  0101               	movlb	1	; () banked
 19643  00722E  2572               	addwf	(_modeMenu+1)& (0+255),w,b
 19644  007230  0100               	movlb	0	; () banked
 19645  007232  6F60               	movwf	___wmul@multiplier& (0+255),b
 19646  007234  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19647  007236  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19648  007238  0E00               	movlw	0
 19649  00723A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19650  00723C  0E11               	movlw	17
 19651  00723E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19652  007240  EC8F  F04B         	call	___wmul	;wreg free
 19653  007244  0E9E               	movlw	low _LCD_STRINGS
 19654  007246  0100               	movlb	0	; () banked
 19655  007248  2560               	addwf	?___wmul& (0+255),w,b
 19656  00724A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19657  00724C  0EF3               	movlw	high _LCD_STRINGS
 19658  00724E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19659  007250  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19660  007252  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 19661                           
 19662                           ;menu.c: 452: print_row_2_once = 1;
 19663  007256  8E04               	bsf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19664  007258                     l3548:
 19665  007258  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 19666  00725A  D7DA               	goto	l3547
 19667                           
 19668                           ;menu.c: 453: }
 19669                           ;menu.c: 454: }
 19670                           ;menu.c: 456: which_mode = modeMenu.selector % modeMenu.number;
 19671  00725C  0101               	movlb	1	; () banked
 19672  00725E  5171               	movf	_modeMenu& (0+255),w,b
 19673  007260  6EE6               	movwf	postinc1,c
 19674  007262  5173               	movf	(_modeMenu+2)& (0+255),w,b
 19675  007264  6EE6               	movwf	postinc1,c
 19676  007266  ECC6  F040         	call	___lbmod	;wreg free
 19677  00726A  503F               	movf	btemp,w,c
 19678  00726C  0100               	movlb	0	; () banked
 19679  00726E  6FF1               	movwf	_which_mode& (0+255),b
 19680                           
 19681                           ; BSR set to: 0
 19682                           ;menu.c: 457: lcd_print_once = 1;
 19683  007270  8005               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19684  007272                     l3543:
 19685                           
 19686                           ; BSR set to: 0
 19687                           
 19688                           ; BSR set to: 0
 19689  007272  B405               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 19690  007274  0012               	return	
 19691  007276  D79F               	goto	l3544
 19692  007278                     __end_of_Function_A_1:
 19693                           	opt stack 0
 19694                           tblptru	equ	0xFF8
 19695                           tblptrh	equ	0xFF7
 19696                           tblptrl	equ	0xFF6
 19697                           tablat	equ	0xFF5
 19698                           prodh	equ	0xFF4
 19699                           prodl	equ	0xFF3
 19700                           intcon	equ	0xFF2
 19701                           intcon2	equ	0xFF1
 19702                           postinc0	equ	0xFEE
 19703                           wreg	equ	0xFE8
 19704                           postinc1	equ	0xFE6
 19705                           plusw1	equ	0xFE3
 19706                           fsr1h	equ	0xFE2
 19707                           fsr1l	equ	0xFE1
 19708                           indf2	equ	0xFDF
 19709                           postinc2	equ	0xFDE
 19710                           postdec2	equ	0xFDD
 19711                           plusw2	equ	0xFDB
 19712                           fsr2h	equ	0xFDA
 19713                           fsr2l	equ	0xFD9
 19714                           status	equ	0xFD8
 19715                           
 19716 ;; *************** function _un_block_code *****************
 19717 ;; Defined at:
 19718 ;;		line 389 in file "menu.c"
 19719 ;; Parameters:    Size  Location     Type
 19720 ;;		None
 19721 ;; Auto vars:     Size  Location     Type
 19722 ;;		None
 19723 ;; Return value:  Size  Location     Type
 19724 ;;                  1    wreg      void 
 19725 ;; Registers used:
 19726 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19727 ;; Tracked objects:
 19728 ;;		On entry : 0/0
 19729 ;;		On exit  : 0/0
 19730 ;;		Unchanged: 0/0
 19731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19736 ;;Total ram usage:        0 bytes
 19737 ;; Hardware stack levels used:    1
 19738 ;; Hardware stack levels required when called:   15
 19739 ;; This function calls:
 19740 ;;		_analogInputs
 19741 ;;		_digitalInputs
 19742 ;;		_processEncoderBuxton
 19743 ;; This function is called by:
 19744 ;;		_Function_A_1
 19745 ;;		_Function_A_2
 19746 ;;		_Function_A_3
 19747 ;;		_Function_A
 19748 ;;		_Function_B
 19749 ;;		_Function_C_1
 19750 ;;		_Function_C_2
 19751 ;;		_Function_C_3
 19752 ;;		_Function_C
 19753 ;;		_Function_D_1
 19754 ;;		_Function_D_2
 19755 ;;		_Function_D_3
 19756 ;;		_Function_D_4
 19757 ;;		_Function_D_5
 19758 ;;		_Function_D
 19759 ;;		_Function_E_1
 19760 ;;		_Function_E_2
 19761 ;;		_Function_E
 19762 ;;		_Function_F
 19763 ;;		_Function_G_1
 19764 ;;		_Function_G_2
 19765 ;;		_Function_G_4
 19766 ;;		_Function_G
 19767 ;;		_Function_H
 19768 ;;		_Function_H_1
 19769 ;;		_Function_H_2
 19770 ;;		_Function_H_3
 19771 ;;		_Function_H_4
 19772 ;;		_Function_H_5
 19773 ;;		_Function_H_6_1
 19774 ;;		_Function_H_6_2
 19775 ;;		_Function_H_6
 19776 ;;		_Function_H_7
 19777 ;;		_Function_H_8_1
 19778 ;;		_Function_H_8_2
 19779 ;;		_Function_H_8
 19780 ;;		_Function_H_9_1
 19781 ;;		_Function_H_9_2
 19782 ;;		_Function_H_9_3
 19783 ;;		_Function_H_9_4
 19784 ;;		_Function_H_9
 19785 ;; This function uses a non-reentrant model
 19786 ;;
 19787                           
 19788                           	psect	text62
 19789  009820                     __ptext62:
 19790                           	opt stack 0
 19791  009820                     _un_block_code:
 19792                           	opt stack 13
 19793                           
 19794                           ;menu.c: 397: if(which_functions_are_unblocked == 0){
 19795                           
 19796                           ; BSR set to: 0
 19797                           ;incstack = 0
 19798  009820  A205               	btfss	_which_functions_are_unblocked/(0+8),_which_functions_are_unblocked& (0+7),c
 19799                           
 19800                           ;menu.c: 398: processEncoderBuxton();
 19801  009822  EC0A  F000         	call	_processEncoderBuxton	;wreg free
 19802                           
 19803                           ;menu.c: 399: }
 19804                           ;menu.c: 402: if(which_functions_are_unblocked == 1){
 19805  009826  A205               	btfss	_which_functions_are_unblocked/(0+8),_which_functions_are_unblocked& (0+7),c
 19806  009828  0012               	return	
 19807                           
 19808                           ;menu.c: 403: digitalInputs();
 19809  00982A  EC82  F048         	call	_digitalInputs	;wreg free
 19810                           
 19811                           ;menu.c: 404: analogInputs();
 19812  00982E  EC65  F049         	call	_analogInputs	;wreg free
 19813                           
 19814                           ;menu.c: 405: processEncoderBuxton();
 19815  009832  EC0A  F000         	call	_processEncoderBuxton	;wreg free
 19816  009836  0012               	return	
 19817  009838                     __end_of_un_block_code:
 19818                           	opt stack 0
 19819                           tblptru	equ	0xFF8
 19820                           tblptrh	equ	0xFF7
 19821                           tblptrl	equ	0xFF6
 19822                           tablat	equ	0xFF5
 19823                           prodh	equ	0xFF4
 19824                           prodl	equ	0xFF3
 19825                           intcon	equ	0xFF2
 19826                           intcon2	equ	0xFF1
 19827                           postinc0	equ	0xFEE
 19828                           wreg	equ	0xFE8
 19829                           postinc1	equ	0xFE6
 19830                           plusw1	equ	0xFE3
 19831                           fsr1h	equ	0xFE2
 19832                           fsr1l	equ	0xFE1
 19833                           indf2	equ	0xFDF
 19834                           postinc2	equ	0xFDE
 19835                           postdec2	equ	0xFDD
 19836                           plusw2	equ	0xFDB
 19837                           fsr2h	equ	0xFDA
 19838                           fsr2l	equ	0xFD9
 19839                           status	equ	0xFD8
 19840                           
 19841 ;; *************** function _processEncoderBuxton *****************
 19842 ;; Defined at:
 19843 ;;		line 51 in file "encoder.c"
 19844 ;; Parameters:    Size  Location     Type
 19845 ;;		None
 19846 ;; Auto vars:     Size  Location     Type
 19847 ;;		None
 19848 ;; Return value:  Size  Location     Type
 19849 ;;                  1    wreg      void 
 19850 ;; Registers used:
 19851 ;;		wreg, status,2, status,0
 19852 ;; Tracked objects:
 19853 ;;		On entry : 0/0
 19854 ;;		On exit  : 0/0
 19855 ;;		Unchanged: 0/0
 19856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19859 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19860 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19861 ;;Total ram usage:        7 bytes
 19862 ;; Hardware stack levels used:    1
 19863 ;; Hardware stack levels required when called:    5
 19864 ;; This function calls:
 19865 ;;		Nothing
 19866 ;; This function is called by:
 19867 ;;		_un_block_code
 19868 ;;		_main
 19869 ;; This function uses a non-reentrant model
 19870 ;;
 19871                           
 19872                           	psect	text63
 19873  000014                     __ptext63:
 19874                           	opt stack 0
 19875  000014                     _processEncoderBuxton:
 19876                           	opt stack 25
 19877                           
 19878                           ;encoder.c: 53: if (encoder_direction == 0x00) {return;}
 19879                           
 19880                           ;incstack = 0
 19881  000014  5036               	movf	_encoder_direction,w,c
 19882  000016  B4D8               	btfsc	status,2,c
 19883  000018  0012               	return	
 19884                           
 19885                           ;encoder.c: 56: if (encoder_direction == 0x10) {
 19886  00001A  0E10               	movlw	16
 19887  00001C  1836               	xorwf	_encoder_direction,w,c
 19888  00001E  A4D8               	btfss	status,2,c
 19889  000020  D3B9               	goto	l933
 19890                           
 19891                           ;encoder.c: 58: lcd_print_once = 0;
 19892  000022  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19893                           
 19894                           ;encoder.c: 59: print_row_2_once = 0;
 19895  000024  9E04               	bcf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19896                           
 19897                           ;encoder.c: 62: if (which_screen == MAIN_MENU) {
 19898  000026  0E02               	movlw	2
 19899  000028  184F               	xorwf	_which_screen,w,c
 19900  00002A  A4D8               	btfss	status,2,c
 19901  00002C  D01F               	goto	l863
 19902                           
 19903                           ;encoder.c: 63: if(mainMenu.selector < mainMenu.number - 1){
 19904  00002E  0EFF               	movlw	255
 19905  000030  0100               	movlb	0	; () banked
 19906  000032  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19907  000034  0EFF               	movlw	255
 19908  000036  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 19909  000038  0101               	movlb	1	; () banked
 19910  00003A  5174               	movf	_mainMenu& (0+255),w,b
 19911  00003C  0100               	movlb	0	; () banked
 19912  00003E  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 19913  000040  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 19914  000042  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 19915  000044  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 19916  000046  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 19917  000048  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 19918  00004A  0101               	movlb	1	; () banked
 19919  00004C  5176               	movf	(_mainMenu+2)& (0+255),w,b
 19920  00004E  0100               	movlb	0	; () banked
 19921  000050  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 19922  000052  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 19923  000054  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 19924  000056  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 19925  000058  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 19926  00005A  0A80               	xorlw	128
 19927  00005C  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 19928  00005E  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 19929  000060  0A80               	xorlw	128
 19930  000062  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 19931  000064  B0D8               	btfsc	status,0,c
 19932  000066  D002               	goto	l863
 19933                           
 19934                           ; BSR set to: 0
 19935                           ;encoder.c: 64: mainMenu.selector++;
 19936  000068  0101               	movlb	1	; () banked
 19937  00006A  2B76               	incf	(_mainMenu+2)& (0+255),f,b
 19938  00006C                     l863:
 19939                           
 19940                           ;encoder.c: 65: }
 19941                           ;encoder.c: 66: }
 19942                           ;encoder.c: 67: if (which_screen == KEYBOARD_MENU) {
 19943                           
 19944                           ; BSR set to: 1
 19945                           
 19946                           ; BSR set to: 1
 19947  00006C  0E03               	movlw	3
 19948  00006E  184F               	xorwf	_which_screen,w,c
 19949  000070  A4D8               	btfss	status,2,c
 19950  000072  D019               	goto	l865
 19951                           
 19952                           ;encoder.c: 68: if(keyboardMenu.selector < (keyboardMenu.number - 1)){
 19953  000074  0EFF               	movlw	255
 19954  000076  0100               	movlb	0	; () banked
 19955  000078  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19956  00007A  0EFF               	movlw	255
 19957  00007C  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 19958  00007E  51E5               	movf	_keyboardMenu& (0+255),w,b
 19959  000080  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 19960  000082  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 19961  000084  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 19962  000086  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 19963  000088  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 19964  00008A  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 19965  00008C  51E7               	movf	(_keyboardMenu+2)& (0+255),w,b
 19966  00008E  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 19967  000090  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 19968  000092  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 19969  000094  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 19970  000096  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 19971  000098  0A80               	xorlw	128
 19972  00009A  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 19973  00009C  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 19974  00009E  0A80               	xorlw	128
 19975  0000A0  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 19976  0000A2  A0D8               	btfss	status,0,c
 19977                           
 19978                           ; BSR set to: 0
 19979                           ;encoder.c: 69: keyboardMenu.selector++;
 19980  0000A4  2BE7               	incf	(_keyboardMenu+2)& (0+255),f,b
 19981  0000A6                     l865:
 19982                           
 19983                           ;encoder.c: 70: }
 19984                           ;encoder.c: 71: }
 19985                           ;encoder.c: 72: if (which_screen == TRANSPOSE_MENU) {
 19986                           
 19987                           ; BSR set to: 0
 19988                           
 19989                           ; BSR set to: 0
 19990  0000A6  0E04               	movlw	4
 19991  0000A8  184F               	xorwf	_which_screen,w,c
 19992  0000AA  A4D8               	btfss	status,2,c
 19993  0000AC  D01F               	goto	l867
 19994                           
 19995                           ;encoder.c: 73: if(transposeMenu.selector < (transposeMenu.number - 1)){
 19996  0000AE  0EFF               	movlw	255
 19997  0000B0  0100               	movlb	0	; () banked
 19998  0000B2  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19999  0000B4  0EFF               	movlw	255
 20000  0000B6  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20001  0000B8  0101               	movlb	1	; () banked
 20002  0000BA  5168               	movf	_transposeMenu& (0+255),w,b
 20003  0000BC  0100               	movlb	0	; () banked
 20004  0000BE  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20005  0000C0  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20006  0000C2  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20007  0000C4  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20008  0000C6  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20009  0000C8  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20010  0000CA  0101               	movlb	1	; () banked
 20011  0000CC  516A               	movf	(_transposeMenu+2)& (0+255),w,b
 20012  0000CE  0100               	movlb	0	; () banked
 20013  0000D0  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20014  0000D2  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20015  0000D4  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20016  0000D6  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20017  0000D8  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20018  0000DA  0A80               	xorlw	128
 20019  0000DC  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20020  0000DE  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20021  0000E0  0A80               	xorlw	128
 20022  0000E2  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20023  0000E4  B0D8               	btfsc	status,0,c
 20024  0000E6  D002               	goto	l867
 20025                           
 20026                           ; BSR set to: 0
 20027                           ;encoder.c: 74: transposeMenu.selector++;
 20028  0000E8  0101               	movlb	1	; () banked
 20029  0000EA  2B6A               	incf	(_transposeMenu+2)& (0+255),f,b
 20030  0000EC                     l867:
 20031                           
 20032                           ;encoder.c: 75: }
 20033                           ;encoder.c: 76: }
 20034                           ;encoder.c: 77: if (which_screen == DRUM_MENU) {
 20035                           
 20036                           ; BSR set to: 1
 20037                           
 20038                           ; BSR set to: 1
 20039  0000EC  0E05               	movlw	5
 20040  0000EE  184F               	xorwf	_which_screen,w,c
 20041  0000F0  A4D8               	btfss	status,2,c
 20042  0000F2  D01F               	goto	l869
 20043                           
 20044                           ;encoder.c: 78: if(drumMenu.selector < (drumMenu.number - 1)){
 20045  0000F4  0EFF               	movlw	255
 20046  0000F6  0100               	movlb	0	; () banked
 20047  0000F8  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20048  0000FA  0EFF               	movlw	255
 20049  0000FC  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20050  0000FE  0101               	movlb	1	; () banked
 20051  000100  5165               	movf	_drumMenu& (0+255),w,b
 20052  000102  0100               	movlb	0	; () banked
 20053  000104  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20054  000106  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20055  000108  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20056  00010A  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20057  00010C  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20058  00010E  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20059  000110  0101               	movlb	1	; () banked
 20060  000112  5167               	movf	(_drumMenu+2)& (0+255),w,b
 20061  000114  0100               	movlb	0	; () banked
 20062  000116  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20063  000118  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20064  00011A  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20065  00011C  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20066  00011E  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20067  000120  0A80               	xorlw	128
 20068  000122  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20069  000124  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20070  000126  0A80               	xorlw	128
 20071  000128  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20072  00012A  B0D8               	btfsc	status,0,c
 20073  00012C  D002               	goto	l869
 20074                           
 20075                           ; BSR set to: 0
 20076                           ;encoder.c: 79: drumMenu.selector++;
 20077  00012E  0101               	movlb	1	; () banked
 20078  000130  2B67               	incf	(_drumMenu+2)& (0+255),f,b
 20079  000132                     l869:
 20080                           
 20081                           ;encoder.c: 80: }
 20082                           ;encoder.c: 81: }
 20083                           ;encoder.c: 82: if (which_screen == POTENTIOMETER_MENU) {
 20084                           
 20085                           ; BSR set to: 1
 20086                           
 20087                           ; BSR set to: 1
 20088  000132  0E06               	movlw	6
 20089  000134  184F               	xorwf	_which_screen,w,c
 20090  000136  A4D8               	btfss	status,2,c
 20091  000138  D01F               	goto	l871
 20092                           
 20093                           ;encoder.c: 83: if(potsMenu.selector < (potsMenu.number - 1)){
 20094  00013A  0EFF               	movlw	255
 20095  00013C  0100               	movlb	0	; () banked
 20096  00013E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20097  000140  0EFF               	movlw	255
 20098  000142  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20099  000144  0101               	movlb	1	; () banked
 20100  000146  5159               	movf	_potsMenu& (0+255),w,b
 20101  000148  0100               	movlb	0	; () banked
 20102  00014A  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20103  00014C  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20104  00014E  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20105  000150  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20106  000152  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20107  000154  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20108  000156  0101               	movlb	1	; () banked
 20109  000158  515B               	movf	(_potsMenu+2)& (0+255),w,b
 20110  00015A  0100               	movlb	0	; () banked
 20111  00015C  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20112  00015E  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20113  000160  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20114  000162  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20115  000164  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20116  000166  0A80               	xorlw	128
 20117  000168  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20118  00016A  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20119  00016C  0A80               	xorlw	128
 20120  00016E  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20121  000170  B0D8               	btfsc	status,0,c
 20122  000172  D002               	goto	l871
 20123                           
 20124                           ; BSR set to: 0
 20125                           ;encoder.c: 84: potsMenu.selector++;
 20126  000174  0101               	movlb	1	; () banked
 20127  000176  2B5B               	incf	(_potsMenu+2)& (0+255),f,b
 20128  000178                     l871:
 20129                           
 20130                           ;encoder.c: 85: }
 20131                           ;encoder.c: 86: }
 20132                           ;encoder.c: 87: if (which_screen == MIDI_CHANNEL_MENU) {
 20133                           
 20134                           ; BSR set to: 1
 20135                           
 20136                           ; BSR set to: 1
 20137  000178  0E07               	movlw	7
 20138  00017A  184F               	xorwf	_which_screen,w,c
 20139  00017C  A4D8               	btfss	status,2,c
 20140  00017E  D01F               	goto	l873
 20141                           
 20142                           ;encoder.c: 88: if(midiChannelMenu.selector < (midiChannelMenu.number - 1)){
 20143  000180  0EFF               	movlw	255
 20144  000182  0100               	movlb	0	; () banked
 20145  000184  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20146  000186  0EFF               	movlw	255
 20147  000188  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20148  00018A  0101               	movlb	1	; () banked
 20149  00018C  5147               	movf	_midiChannelMenu& (0+255),w,b
 20150  00018E  0100               	movlb	0	; () banked
 20151  000190  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20152  000192  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20153  000194  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20154  000196  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20155  000198  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20156  00019A  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20157  00019C  0101               	movlb	1	; () banked
 20158  00019E  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 20159  0001A0  0100               	movlb	0	; () banked
 20160  0001A2  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20161  0001A4  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20162  0001A6  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20163  0001A8  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20164  0001AA  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20165  0001AC  0A80               	xorlw	128
 20166  0001AE  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20167  0001B0  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20168  0001B2  0A80               	xorlw	128
 20169  0001B4  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20170  0001B6  B0D8               	btfsc	status,0,c
 20171  0001B8  D002               	goto	l873
 20172                           
 20173                           ; BSR set to: 0
 20174                           ;encoder.c: 89: midiChannelMenu.selector++;
 20175  0001BA  0101               	movlb	1	; () banked
 20176  0001BC  2B49               	incf	(_midiChannelMenu+2)& (0+255),f,b
 20177  0001BE                     l873:
 20178                           
 20179                           ;encoder.c: 90: }
 20180                           ;encoder.c: 91: }
 20181                           ;encoder.c: 93: if (which_screen == MODES_MENU) {
 20182                           
 20183                           ; BSR set to: 1
 20184                           
 20185                           ; BSR set to: 1
 20186  0001BE  0E09               	movlw	9
 20187  0001C0  184F               	xorwf	_which_screen,w,c
 20188  0001C2  A4D8               	btfss	status,2,c
 20189  0001C4  D01F               	goto	l875
 20190                           
 20191                           ;encoder.c: 94: if(modeMenu.selector < (modeMenu.number - 1)){
 20192  0001C6  0EFF               	movlw	255
 20193  0001C8  0100               	movlb	0	; () banked
 20194  0001CA  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20195  0001CC  0EFF               	movlw	255
 20196  0001CE  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20197  0001D0  0101               	movlb	1	; () banked
 20198  0001D2  5171               	movf	_modeMenu& (0+255),w,b
 20199  0001D4  0100               	movlb	0	; () banked
 20200  0001D6  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20201  0001D8  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20202  0001DA  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20203  0001DC  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20204  0001DE  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20205  0001E0  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20206  0001E2  0101               	movlb	1	; () banked
 20207  0001E4  5173               	movf	(_modeMenu+2)& (0+255),w,b
 20208  0001E6  0100               	movlb	0	; () banked
 20209  0001E8  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20210  0001EA  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20211  0001EC  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20212  0001EE  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20213  0001F0  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20214  0001F2  0A80               	xorlw	128
 20215  0001F4  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20216  0001F6  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20217  0001F8  0A80               	xorlw	128
 20218  0001FA  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20219  0001FC  B0D8               	btfsc	status,0,c
 20220  0001FE  D002               	goto	l875
 20221                           
 20222                           ; BSR set to: 0
 20223                           ;encoder.c: 95: modeMenu.selector++;
 20224  000200  0101               	movlb	1	; () banked
 20225  000202  2B73               	incf	(_modeMenu+2)& (0+255),f,b
 20226  000204                     l875:
 20227                           
 20228                           ;encoder.c: 96: }
 20229                           ;encoder.c: 97: }
 20230                           ;encoder.c: 98: if (which_screen == TRIADS_MENU) {
 20231                           
 20232                           ; BSR set to: 1
 20233                           
 20234                           ; BSR set to: 1
 20235  000204  0E0A               	movlw	10
 20236  000206  184F               	xorwf	_which_screen,w,c
 20237  000208  A4D8               	btfss	status,2,c
 20238  00020A  D01F               	goto	l877
 20239                           
 20240                           ;encoder.c: 99: if(triadMenu.selector < (triadMenu.number - 1)){
 20241  00020C  0EFF               	movlw	255
 20242  00020E  0100               	movlb	0	; () banked
 20243  000210  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20244  000212  0EFF               	movlw	255
 20245  000214  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20246  000216  0101               	movlb	1	; () banked
 20247  000218  516E               	movf	_triadMenu& (0+255),w,b
 20248  00021A  0100               	movlb	0	; () banked
 20249  00021C  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20250  00021E  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20251  000220  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20252  000222  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20253  000224  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20254  000226  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20255  000228  0101               	movlb	1	; () banked
 20256  00022A  5170               	movf	(_triadMenu+2)& (0+255),w,b
 20257  00022C  0100               	movlb	0	; () banked
 20258  00022E  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20259  000230  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20260  000232  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20261  000234  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20262  000236  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20263  000238  0A80               	xorlw	128
 20264  00023A  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20265  00023C  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20266  00023E  0A80               	xorlw	128
 20267  000240  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20268  000242  B0D8               	btfsc	status,0,c
 20269  000244  D002               	goto	l877
 20270                           
 20271                           ; BSR set to: 0
 20272                           ;encoder.c: 100: triadMenu.selector++;
 20273  000246  0101               	movlb	1	; () banked
 20274  000248  2B70               	incf	(_triadMenu+2)& (0+255),f,b
 20275  00024A                     l877:
 20276                           
 20277                           ;encoder.c: 101: }
 20278                           ;encoder.c: 102: }
 20279                           ;encoder.c: 103: if (which_screen == SEVENTHS_MENU) {
 20280                           
 20281                           ; BSR set to: 1
 20282                           
 20283                           ; BSR set to: 1
 20284  00024A  0E0B               	movlw	11
 20285  00024C  184F               	xorwf	_which_screen,w,c
 20286  00024E  A4D8               	btfss	status,2,c
 20287  000250  D01F               	goto	l879
 20288                           
 20289                           ;encoder.c: 104: if(seventhMenu.selector < (seventhMenu.number - 1)){
 20290  000252  0EFF               	movlw	255
 20291  000254  0100               	movlb	0	; () banked
 20292  000256  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20293  000258  0EFF               	movlw	255
 20294  00025A  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20295  00025C  0101               	movlb	1	; () banked
 20296  00025E  516B               	movf	_seventhMenu& (0+255),w,b
 20297  000260  0100               	movlb	0	; () banked
 20298  000262  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20299  000264  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20300  000266  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20301  000268  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20302  00026A  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20303  00026C  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20304  00026E  0101               	movlb	1	; () banked
 20305  000270  516D               	movf	(_seventhMenu+2)& (0+255),w,b
 20306  000272  0100               	movlb	0	; () banked
 20307  000274  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20308  000276  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20309  000278  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20310  00027A  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20311  00027C  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20312  00027E  0A80               	xorlw	128
 20313  000280  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20314  000282  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20315  000284  0A80               	xorlw	128
 20316  000286  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20317  000288  B0D8               	btfsc	status,0,c
 20318  00028A  D002               	goto	l879
 20319                           
 20320                           ; BSR set to: 0
 20321                           ;encoder.c: 105: seventhMenu.selector++;
 20322  00028C  0101               	movlb	1	; () banked
 20323  00028E  2B6D               	incf	(_seventhMenu+2)& (0+255),f,b
 20324  000290                     l879:
 20325                           
 20326                           ;encoder.c: 106: }
 20327                           ;encoder.c: 107: }
 20328                           ;encoder.c: 108: if (which_screen == DRUMS_CC_TYPE_MENU) {
 20329                           
 20330                           ; BSR set to: 1
 20331                           
 20332                           ; BSR set to: 1
 20333  000290  0E0C               	movlw	12
 20334  000292  184F               	xorwf	_which_screen,w,c
 20335  000294  A4D8               	btfss	status,2,c
 20336  000296  D01F               	goto	l881
 20337                           
 20338                           ;encoder.c: 109: if(drumCCTypeMenu.selector < (drumCCTypeMenu.number - 1)){
 20339  000298  0EFF               	movlw	255
 20340  00029A  0100               	movlb	0	; () banked
 20341  00029C  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20342  00029E  0EFF               	movlw	255
 20343  0002A0  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20344  0002A2  0101               	movlb	1	; () banked
 20345  0002A4  5162               	movf	_drumCCTypeMenu& (0+255),w,b
 20346  0002A6  0100               	movlb	0	; () banked
 20347  0002A8  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20348  0002AA  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20349  0002AC  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20350  0002AE  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20351  0002B0  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20352  0002B2  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20353  0002B4  0101               	movlb	1	; () banked
 20354  0002B6  5164               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 20355  0002B8  0100               	movlb	0	; () banked
 20356  0002BA  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20357  0002BC  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20358  0002BE  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20359  0002C0  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20360  0002C2  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20361  0002C4  0A80               	xorlw	128
 20362  0002C6  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20363  0002C8  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20364  0002CA  0A80               	xorlw	128
 20365  0002CC  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20366  0002CE  B0D8               	btfsc	status,0,c
 20367  0002D0  D002               	goto	l881
 20368                           
 20369                           ; BSR set to: 0
 20370                           ;encoder.c: 110: drumCCTypeMenu.selector++;
 20371  0002D2  0101               	movlb	1	; () banked
 20372  0002D4  2B64               	incf	(_drumCCTypeMenu+2)& (0+255),f,b
 20373  0002D6                     l881:
 20374                           
 20375                           ;encoder.c: 111: }
 20376                           ;encoder.c: 112: }
 20377                           ;encoder.c: 114: if (which_screen == DRUMS_NN_MENU) {
 20378                           
 20379                           ; BSR set to: 1
 20380                           
 20381                           ; BSR set to: 1
 20382  0002D6  0E0D               	movlw	13
 20383  0002D8  184F               	xorwf	_which_screen,w,c
 20384  0002DA  A4D8               	btfss	status,2,c
 20385  0002DC  D01F               	goto	l883
 20386                           
 20387                           ;encoder.c: 115: if(drumNNMenu.selector < (drumNNMenu.number - 1)){
 20388  0002DE  0EFF               	movlw	255
 20389  0002E0  0100               	movlb	0	; () banked
 20390  0002E2  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20391  0002E4  0EFF               	movlw	255
 20392  0002E6  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20393  0002E8  0101               	movlb	1	; () banked
 20394  0002EA  515F               	movf	_drumNNMenu& (0+255),w,b
 20395  0002EC  0100               	movlb	0	; () banked
 20396  0002EE  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20397  0002F0  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20398  0002F2  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20399  0002F4  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20400  0002F6  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20401  0002F8  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20402  0002FA  0101               	movlb	1	; () banked
 20403  0002FC  5161               	movf	(_drumNNMenu+2)& (0+255),w,b
 20404  0002FE  0100               	movlb	0	; () banked
 20405  000300  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20406  000302  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20407  000304  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20408  000306  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20409  000308  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20410  00030A  0A80               	xorlw	128
 20411  00030C  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20412  00030E  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20413  000310  0A80               	xorlw	128
 20414  000312  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20415  000314  B0D8               	btfsc	status,0,c
 20416  000316  D002               	goto	l883
 20417                           
 20418                           ; BSR set to: 0
 20419                           ;encoder.c: 116: drumNNMenu.selector++;
 20420  000318  0101               	movlb	1	; () banked
 20421  00031A  2B61               	incf	(_drumNNMenu+2)& (0+255),f,b
 20422  00031C                     l883:
 20423                           
 20424                           ;encoder.c: 117: }
 20425                           ;encoder.c: 118: }
 20426                           ;encoder.c: 120: if (which_screen == DRUMS_CC_MENU) {
 20427                           
 20428                           ; BSR set to: 1
 20429                           
 20430                           ; BSR set to: 1
 20431  00031C  0E0E               	movlw	14
 20432  00031E  184F               	xorwf	_which_screen,w,c
 20433  000320  A4D8               	btfss	status,2,c
 20434  000322  D01F               	goto	l885
 20435                           
 20436                           ;encoder.c: 121: if(drumCCMenu.selector < (drumCCMenu.number - 1)){
 20437  000324  0EFF               	movlw	255
 20438  000326  0100               	movlb	0	; () banked
 20439  000328  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20440  00032A  0EFF               	movlw	255
 20441  00032C  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20442  00032E  0101               	movlb	1	; () banked
 20443  000330  515C               	movf	_drumCCMenu& (0+255),w,b
 20444  000332  0100               	movlb	0	; () banked
 20445  000334  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20446  000336  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20447  000338  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20448  00033A  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20449  00033C  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20450  00033E  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20451  000340  0101               	movlb	1	; () banked
 20452  000342  515E               	movf	(_drumCCMenu+2)& (0+255),w,b
 20453  000344  0100               	movlb	0	; () banked
 20454  000346  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20455  000348  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20456  00034A  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20457  00034C  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20458  00034E  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20459  000350  0A80               	xorlw	128
 20460  000352  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20461  000354  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20462  000356  0A80               	xorlw	128
 20463  000358  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20464  00035A  B0D8               	btfsc	status,0,c
 20465  00035C  D002               	goto	l885
 20466                           
 20467                           ; BSR set to: 0
 20468                           ;encoder.c: 122: drumCCMenu.selector++;
 20469  00035E  0101               	movlb	1	; () banked
 20470  000360  2B5E               	incf	(_drumCCMenu+2)& (0+255),f,b
 20471  000362                     l885:
 20472                           
 20473                           ;encoder.c: 123: }
 20474                           ;encoder.c: 124: }
 20475                           ;encoder.c: 126: if (which_screen == POTS_RES_MENU) {
 20476                           
 20477                           ; BSR set to: 1
 20478                           
 20479                           ; BSR set to: 1
 20480  000362  0E0F               	movlw	15
 20481  000364  184F               	xorwf	_which_screen,w,c
 20482  000366  A4D8               	btfss	status,2,c
 20483  000368  D01F               	goto	l887
 20484                           
 20485                           ;encoder.c: 127: if(potsResoMenu.selector < (potsResoMenu.number - 1)){
 20486  00036A  0EFF               	movlw	255
 20487  00036C  0100               	movlb	0	; () banked
 20488  00036E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20489  000370  0EFF               	movlw	255
 20490  000372  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20491  000374  0101               	movlb	1	; () banked
 20492  000376  5156               	movf	_potsResoMenu& (0+255),w,b
 20493  000378  0100               	movlb	0	; () banked
 20494  00037A  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20495  00037C  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20496  00037E  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20497  000380  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20498  000382  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20499  000384  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20500  000386  0101               	movlb	1	; () banked
 20501  000388  5158               	movf	(_potsResoMenu+2)& (0+255),w,b
 20502  00038A  0100               	movlb	0	; () banked
 20503  00038C  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20504  00038E  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20505  000390  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20506  000392  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20507  000394  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20508  000396  0A80               	xorlw	128
 20509  000398  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20510  00039A  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20511  00039C  0A80               	xorlw	128
 20512  00039E  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20513  0003A0  B0D8               	btfsc	status,0,c
 20514  0003A2  D002               	goto	l887
 20515                           
 20516                           ; BSR set to: 0
 20517                           ;encoder.c: 128: potsResoMenu.selector++;
 20518  0003A4  0101               	movlb	1	; () banked
 20519  0003A6  2B58               	incf	(_potsResoMenu+2)& (0+255),f,b
 20520  0003A8                     l887:
 20521                           
 20522                           ;encoder.c: 129: }
 20523                           ;encoder.c: 130: }
 20524                           ;encoder.c: 132: if (which_screen == ENCODER_POLARITY_MENU) {
 20525                           
 20526                           ; BSR set to: 1
 20527                           
 20528                           ; BSR set to: 1
 20529  0003A8  0E18               	movlw	24
 20530  0003AA  184F               	xorwf	_which_screen,w,c
 20531  0003AC  A4D8               	btfss	status,2,c
 20532  0003AE  D006               	goto	l889
 20533                           
 20534                           ;encoder.c: 136: if(encoderPolarityMenu.selector == 0){
 20535  0003B0  0101               	movlb	1	; () banked
 20536  0003B2  513A               	movf	(_encoderPolarityMenu+2)& (0+255),w,b
 20537  0003B4  A4D8               	btfss	status,2,c
 20538  0003B6  D002               	goto	l889
 20539                           
 20540                           ; BSR set to: 1
 20541                           ;encoder.c: 137: encoderPolarityMenu.selector = 1;
 20542  0003B8  0E01               	movlw	1
 20543  0003BA  6F3A               	movwf	(_encoderPolarityMenu+2)& (0+255),b
 20544  0003BC                     l889:
 20545                           
 20546                           ;encoder.c: 138: }
 20547                           ;encoder.c: 139: }
 20548                           ;encoder.c: 141: if (which_screen == POTS_ALPHA_MENU) {
 20549                           
 20550                           ; BSR set to: 1
 20551                           
 20552                           ; BSR set to: 1
 20553  0003BC  0E10               	movlw	16
 20554  0003BE  184F               	xorwf	_which_screen,w,c
 20555  0003C0  A4D8               	btfss	status,2,c
 20556  0003C2  D006               	goto	l891
 20557                           
 20558                           ;encoder.c: 142: if(potsAlphaMenu.selector <= 85){
 20559  0003C4  0E56               	movlw	86
 20560  0003C6  0101               	movlb	1	; () banked
 20561  0003C8  6155               	cpfslt	(_potsAlphaMenu+2)& (0+255),b
 20562  0003CA  D002               	goto	l891
 20563                           
 20564                           ; BSR set to: 1
 20565                           ;encoder.c: 143: potsAlphaMenu.selector += 5;
 20566  0003CC  0E05               	movlw	5
 20567  0003CE  2755               	addwf	(_potsAlphaMenu+2)& (0+255),f,b
 20568  0003D0                     l891:
 20569                           
 20570                           ;encoder.c: 144: }
 20571                           ;encoder.c: 145: }
 20572                           ;encoder.c: 147: if (which_screen == POTS_CC_MENU) {
 20573                           
 20574                           ; BSR set to: 1
 20575  0003D0  0E11               	movlw	17
 20576  0003D2  184F               	xorwf	_which_screen,w,c
 20577  0003D4  A4D8               	btfss	status,2,c
 20578  0003D6  D01F               	goto	l893
 20579                           
 20580                           ;encoder.c: 148: if(potsCCMenu.selector < (potsCCMenu.number - 1)){
 20581  0003D8  0EFF               	movlw	255
 20582  0003DA  0100               	movlb	0	; () banked
 20583  0003DC  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20584  0003DE  0EFF               	movlw	255
 20585  0003E0  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20586  0003E2  0101               	movlb	1	; () banked
 20587  0003E4  5150               	movf	_potsCCMenu& (0+255),w,b
 20588  0003E6  0100               	movlb	0	; () banked
 20589  0003E8  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20590  0003EA  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20591  0003EC  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20592  0003EE  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20593  0003F0  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20594  0003F2  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20595  0003F4  0101               	movlb	1	; () banked
 20596  0003F6  5152               	movf	(_potsCCMenu+2)& (0+255),w,b
 20597  0003F8  0100               	movlb	0	; () banked
 20598  0003FA  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20599  0003FC  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20600  0003FE  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20601  000400  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20602  000402  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20603  000404  0A80               	xorlw	128
 20604  000406  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20605  000408  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20606  00040A  0A80               	xorlw	128
 20607  00040C  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20608  00040E  B0D8               	btfsc	status,0,c
 20609  000410  D002               	goto	l893
 20610                           
 20611                           ; BSR set to: 0
 20612                           ;encoder.c: 149: potsCCMenu.selector++;
 20613  000412  0101               	movlb	1	; () banked
 20614  000414  2B52               	incf	(_potsCCMenu+2)& (0+255),f,b
 20615  000416                     l893:
 20616                           
 20617                           ;encoder.c: 150: }
 20618                           ;encoder.c: 151: }
 20619                           ;encoder.c: 153: if (which_screen == SLIDEPOTS_CC_MENU) {
 20620                           
 20621                           ; BSR set to: 1
 20622                           
 20623                           ; BSR set to: 1
 20624  000416  0E12               	movlw	18
 20625  000418  184F               	xorwf	_which_screen,w,c
 20626  00041A  A4D8               	btfss	status,2,c
 20627  00041C  D01F               	goto	l895
 20628                           
 20629                           ;encoder.c: 154: if(slidepotsCCMenu.selector < (slidepotsCCMenu.number - 1)){
 20630  00041E  0EFF               	movlw	255
 20631  000420  0100               	movlb	0	; () banked
 20632  000422  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20633  000424  0EFF               	movlw	255
 20634  000426  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20635  000428  0101               	movlb	1	; () banked
 20636  00042A  514D               	movf	_slidepotsCCMenu& (0+255),w,b
 20637  00042C  0100               	movlb	0	; () banked
 20638  00042E  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20639  000430  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20640  000432  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20641  000434  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20642  000436  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20643  000438  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20644  00043A  0101               	movlb	1	; () banked
 20645  00043C  514F               	movf	(_slidepotsCCMenu+2)& (0+255),w,b
 20646  00043E  0100               	movlb	0	; () banked
 20647  000440  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20648  000442  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20649  000444  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20650  000446  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20651  000448  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20652  00044A  0A80               	xorlw	128
 20653  00044C  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20654  00044E  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20655  000450  0A80               	xorlw	128
 20656  000452  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20657  000454  B0D8               	btfsc	status,0,c
 20658  000456  D002               	goto	l895
 20659                           
 20660                           ; BSR set to: 0
 20661                           ;encoder.c: 155: slidepotsCCMenu.selector++;
 20662  000458  0101               	movlb	1	; () banked
 20663  00045A  2B4F               	incf	(_slidepotsCCMenu+2)& (0+255),f,b
 20664  00045C                     l895:
 20665                           
 20666                           ;encoder.c: 156: }
 20667                           ;encoder.c: 157: }
 20668                           ;encoder.c: 159: if (which_screen == PROGRAM_CHANGE_MENU) {
 20669                           
 20670                           ; BSR set to: 1
 20671                           
 20672                           ; BSR set to: 1
 20673  00045C  0E08               	movlw	8
 20674  00045E  184F               	xorwf	_which_screen,w,c
 20675  000460  A4D8               	btfss	status,2,c
 20676  000462  D005               	goto	l897
 20677                           
 20678                           ;encoder.c: 160: if(programChangeMenu.selector < 127){
 20679  000464  0E7F               	movlw	127
 20680  000466  0101               	movlb	1	; () banked
 20681  000468  6146               	cpfslt	(_programChangeMenu+2)& (0+255),b
 20682  00046A  D001               	goto	l897
 20683                           
 20684                           ; BSR set to: 1
 20685                           ;encoder.c: 161: programChangeMenu.selector++;
 20686  00046C  2B46               	incf	(_programChangeMenu+2)& (0+255),f,b
 20687  00046E                     l897:
 20688                           
 20689                           ;encoder.c: 162: }
 20690                           ;encoder.c: 163: }
 20691                           ;encoder.c: 165: if (which_screen == MAIN_CH_MENU) {
 20692                           
 20693                           ; BSR set to: 1
 20694                           
 20695                           ; BSR set to: 1
 20696  00046E  0E14               	movlw	20
 20697  000470  184F               	xorwf	_which_screen,w,c
 20698  000472  A4D8               	btfss	status,2,c
 20699  000474  D005               	goto	l899
 20700                           
 20701                           ;encoder.c: 166: if(mainChannelMenu.selector < 15){
 20702  000476  0E0F               	movlw	15
 20703  000478  0101               	movlb	1	; () banked
 20704  00047A  6143               	cpfslt	(_mainChannelMenu+2)& (0+255),b
 20705  00047C  D001               	goto	l899
 20706                           
 20707                           ; BSR set to: 1
 20708                           ;encoder.c: 167: mainChannelMenu.selector++;
 20709  00047E  2B43               	incf	(_mainChannelMenu+2)& (0+255),f,b
 20710  000480                     l899:
 20711                           
 20712                           ;encoder.c: 168: }
 20713                           ;encoder.c: 169: }
 20714                           ;encoder.c: 171: if (which_screen == DRUM_CH_MENU) {
 20715                           
 20716                           ; BSR set to: 1
 20717                           
 20718                           ; BSR set to: 1
 20719  000480  0E15               	movlw	21
 20720  000482  184F               	xorwf	_which_screen,w,c
 20721  000484  A4D8               	btfss	status,2,c
 20722  000486  D005               	goto	l901
 20723                           
 20724                           ;encoder.c: 172: if(drumChannelMenu.selector < 15){
 20725  000488  0E0F               	movlw	15
 20726  00048A  0101               	movlb	1	; () banked
 20727  00048C  6140               	cpfslt	(_drumChannelMenu+2)& (0+255),b
 20728  00048E  D001               	goto	l901
 20729                           
 20730                           ; BSR set to: 1
 20731                           ;encoder.c: 173: drumChannelMenu.selector++;
 20732  000490  2B40               	incf	(_drumChannelMenu+2)& (0+255),f,b
 20733  000492                     l901:
 20734                           
 20735                           ;encoder.c: 174: }
 20736                           ;encoder.c: 175: }
 20737                           ;encoder.c: 176: if (which_screen == JOYSTICK_CC_MENU) {
 20738                           
 20739                           ; BSR set to: 1
 20740                           
 20741                           ; BSR set to: 1
 20742  000492  0E13               	movlw	19
 20743  000494  184F               	xorwf	_which_screen,w,c
 20744  000496  A4D8               	btfss	status,2,c
 20745  000498  D01F               	goto	l903
 20746                           
 20747                           ;encoder.c: 177: if(joystickCCMenu.selector < (joystickCCMenu.number - 1)){
 20748  00049A  0EFF               	movlw	255
 20749  00049C  0100               	movlb	0	; () banked
 20750  00049E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20751  0004A0  0EFF               	movlw	255
 20752  0004A2  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20753  0004A4  0101               	movlb	1	; () banked
 20754  0004A6  514A               	movf	_joystickCCMenu& (0+255),w,b
 20755  0004A8  0100               	movlb	0	; () banked
 20756  0004AA  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20757  0004AC  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20758  0004AE  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20759  0004B0  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20760  0004B2  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20761  0004B4  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20762  0004B6  0101               	movlb	1	; () banked
 20763  0004B8  514C               	movf	(_joystickCCMenu+2)& (0+255),w,b
 20764  0004BA  0100               	movlb	0	; () banked
 20765  0004BC  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20766  0004BE  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20767  0004C0  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20768  0004C2  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20769  0004C4  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20770  0004C6  0A80               	xorlw	128
 20771  0004C8  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20772  0004CA  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20773  0004CC  0A80               	xorlw	128
 20774  0004CE  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20775  0004D0  B0D8               	btfsc	status,0,c
 20776  0004D2  D002               	goto	l903
 20777                           
 20778                           ; BSR set to: 0
 20779                           ;encoder.c: 178: joystickCCMenu.selector++;
 20780  0004D4  0101               	movlb	1	; () banked
 20781  0004D6  2B4C               	incf	(_joystickCCMenu+2)& (0+255),f,b
 20782  0004D8                     l903:
 20783                           
 20784                           ;encoder.c: 179: }
 20785                           ;encoder.c: 180: }
 20786                           ;encoder.c: 181: if (which_screen == EEPROM_MENU) {
 20787                           
 20788                           ; BSR set to: 1
 20789                           
 20790                           ; BSR set to: 1
 20791  0004D8  0E16               	movlw	22
 20792  0004DA  184F               	xorwf	_which_screen,w,c
 20793  0004DC  A4D8               	btfss	status,2,c
 20794  0004DE  D01F               	goto	l905
 20795                           
 20796                           ;encoder.c: 182: if(eepromMenu.selector < (eepromMenu.number - 1)){
 20797  0004E0  0EFF               	movlw	255
 20798  0004E2  0100               	movlb	0	; () banked
 20799  0004E4  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20800  0004E6  0EFF               	movlw	255
 20801  0004E8  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20802  0004EA  0101               	movlb	1	; () banked
 20803  0004EC  513B               	movf	_eepromMenu& (0+255),w,b
 20804  0004EE  0100               	movlb	0	; () banked
 20805  0004F0  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20806  0004F2  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20807  0004F4  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20808  0004F6  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20809  0004F8  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20810  0004FA  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20811  0004FC  0101               	movlb	1	; () banked
 20812  0004FE  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 20813  000500  0100               	movlb	0	; () banked
 20814  000502  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20815  000504  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20816  000506  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20817  000508  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20818  00050A  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20819  00050C  0A80               	xorlw	128
 20820  00050E  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20821  000510  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20822  000512  0A80               	xorlw	128
 20823  000514  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20824  000516  B0D8               	btfsc	status,0,c
 20825  000518  D002               	goto	l905
 20826                           
 20827                           ; BSR set to: 0
 20828                           ;encoder.c: 183: eepromMenu.selector++;
 20829  00051A  0101               	movlb	1	; () banked
 20830  00051C  2B3D               	incf	(_eepromMenu+2)& (0+255),f,b
 20831  00051E                     l905:
 20832                           
 20833                           ;encoder.c: 184: }
 20834                           ;encoder.c: 185: }
 20835                           ;encoder.c: 186: if (which_screen == SAVES_MENU) {
 20836                           
 20837                           ; BSR set to: 1
 20838                           
 20839                           ; BSR set to: 1
 20840  00051E  0E17               	movlw	23
 20841  000520  184F               	xorwf	_which_screen,w,c
 20842  000522  A4D8               	btfss	status,2,c
 20843  000524  D019               	goto	l907
 20844                           
 20845                           ;encoder.c: 187: if(savesMenu.selector < (savesMenu.number - 1)){
 20846  000526  0EFF               	movlw	255
 20847  000528  0100               	movlb	0	; () banked
 20848  00052A  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20849  00052C  0EFF               	movlw	255
 20850  00052E  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20851  000530  51E2               	movf	_savesMenu& (0+255),w,b
 20852  000532  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20853  000534  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20854  000536  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20855  000538  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20856  00053A  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20857  00053C  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20858  00053E  51E4               	movf	(_savesMenu+2)& (0+255),w,b
 20859  000540  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20860  000542  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20861  000544  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20862  000546  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20863  000548  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20864  00054A  0A80               	xorlw	128
 20865  00054C  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20866  00054E  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20867  000550  0A80               	xorlw	128
 20868  000552  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20869  000554  A0D8               	btfss	status,0,c
 20870                           
 20871                           ; BSR set to: 0
 20872                           ;encoder.c: 188: savesMenu.selector++;
 20873  000556  2BE4               	incf	(_savesMenu+2)& (0+255),f,b
 20874  000558                     l907:
 20875                           
 20876                           ;encoder.c: 189: }
 20877                           ;encoder.c: 190: }
 20878                           ;encoder.c: 192: if (which_screen == ARPEGGIATOR_MENU) {
 20879                           
 20880                           ; BSR set to: 0
 20881                           
 20882                           ; BSR set to: 0
 20883  000558  0E19               	movlw	25
 20884  00055A  184F               	xorwf	_which_screen,w,c
 20885  00055C  A4D8               	btfss	status,2,c
 20886  00055E  D019               	goto	l909
 20887                           
 20888                           ;encoder.c: 193: if(arpeggiatorMenu.selector < (arpeggiatorMenu.number - 1)){
 20889  000560  0EFF               	movlw	255
 20890  000562  0100               	movlb	0	; () banked
 20891  000564  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20892  000566  0EFF               	movlw	255
 20893  000568  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20894  00056A  51DF               	movf	_arpeggiatorMenu& (0+255),w,b
 20895  00056C  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20896  00056E  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20897  000570  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20898  000572  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20899  000574  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20900  000576  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20901  000578  51E1               	movf	(_arpeggiatorMenu+2)& (0+255),w,b
 20902  00057A  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20903  00057C  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20904  00057E  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20905  000580  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20906  000582  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20907  000584  0A80               	xorlw	128
 20908  000586  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20909  000588  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20910  00058A  0A80               	xorlw	128
 20911  00058C  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20912  00058E  A0D8               	btfss	status,0,c
 20913                           
 20914                           ; BSR set to: 0
 20915                           ;encoder.c: 194: arpeggiatorMenu.selector++;
 20916  000590  2BE1               	incf	(_arpeggiatorMenu+2)& (0+255),f,b
 20917  000592                     l909:
 20918                           
 20919                           ;encoder.c: 195: }
 20920                           ;encoder.c: 196: }
 20921                           ;encoder.c: 198: if (which_screen == ARPEGGIATOR_ON_OFF_MENU) {
 20922                           
 20923                           ; BSR set to: 0
 20924                           
 20925                           ; BSR set to: 0
 20926  000592  0E1A               	movlw	26
 20927  000594  184F               	xorwf	_which_screen,w,c
 20928  000596  A4D8               	btfss	status,2,c
 20929  000598  D003               	goto	l910
 20930                           
 20931                           ;encoder.c: 199: arpeggiatorOnOffMenu.selector ^= 1;
 20932  00059A  0E01               	movlw	1
 20933  00059C  0101               	movlb	1	; () banked
 20934  00059E  1B37               	xorwf	(_arpeggiatorOnOffMenu+2)& (0+255),f,b
 20935  0005A0                     l910:
 20936                           
 20937                           ;encoder.c: 203: }
 20938                           ;encoder.c: 204: if (which_screen == ARPEGGIATOR_TEMPO_MENU) {
 20939  0005A0  0E1B               	movlw	27
 20940  0005A2  184F               	xorwf	_which_screen,w,c
 20941  0005A4  A4D8               	btfss	status,2,c
 20942  0005A6  D005               	goto	l912
 20943                           
 20944                           ;encoder.c: 205: if(arpeggiatorTempoMenu.selector < 250){
 20945  0005A8  0EFA               	movlw	250
 20946  0005AA  0101               	movlb	1	; () banked
 20947  0005AC  6134               	cpfslt	(_arpeggiatorTempoMenu+2)& (0+255),b
 20948  0005AE  D001               	goto	l912
 20949                           
 20950                           ; BSR set to: 1
 20951                           ;encoder.c: 206: arpeggiatorTempoMenu.selector++;
 20952  0005B0  2B34               	incf	(_arpeggiatorTempoMenu+2)& (0+255),f,b
 20953  0005B2                     l912:
 20954                           
 20955                           ;encoder.c: 207: }
 20956                           ;encoder.c: 208: }
 20957                           ;encoder.c: 209: if (which_screen == ARPEGGIATOR_OCTAVES_MENU) {
 20958                           
 20959                           ; BSR set to: 1
 20960                           
 20961                           ; BSR set to: 1
 20962  0005B2  0E1C               	movlw	28
 20963  0005B4  184F               	xorwf	_which_screen,w,c
 20964  0005B6  A4D8               	btfss	status,2,c
 20965  0005B8  D005               	goto	l914
 20966                           
 20967                           ;encoder.c: 210: if(arpeggiatorOctavesMenu.selector < 4){
 20968  0005BA  0E04               	movlw	4
 20969  0005BC  0101               	movlb	1	; () banked
 20970  0005BE  6131               	cpfslt	(_arpeggiatorOctavesMenu+2)& (0+255),b
 20971  0005C0  D001               	goto	l914
 20972                           
 20973                           ; BSR set to: 1
 20974                           ;encoder.c: 211: arpeggiatorOctavesMenu.selector++;
 20975  0005C2  2B31               	incf	(_arpeggiatorOctavesMenu+2)& (0+255),f,b
 20976  0005C4                     l914:
 20977                           
 20978                           ;encoder.c: 212: }
 20979                           ;encoder.c: 213: }
 20980                           ;encoder.c: 214: if (which_screen == ARPEGGIATOR_ARPEGGIO_TYPE_MENU) {
 20981                           
 20982                           ; BSR set to: 1
 20983                           
 20984                           ; BSR set to: 1
 20985  0005C4  0E1D               	movlw	29
 20986  0005C6  184F               	xorwf	_which_screen,w,c
 20987  0005C8  A4D8               	btfss	status,2,c
 20988  0005CA  D01F               	goto	l916
 20989                           
 20990                           ;encoder.c: 215: if(arpeggiatorTypeMenu.selector < (arpeggiatorTypeMenu.number - 1)){
 20991  0005CC  0EFF               	movlw	255
 20992  0005CE  0100               	movlb	0	; () banked
 20993  0005D0  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20994  0005D2  0EFF               	movlw	255
 20995  0005D4  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20996  0005D6  0101               	movlb	1	; () banked
 20997  0005D8  512C               	movf	_arpeggiatorTypeMenu& (0+255),w,b
 20998  0005DA  0100               	movlb	0	; () banked
 20999  0005DC  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21000  0005DE  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21001  0005E0  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21002  0005E2  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21003  0005E4  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21004  0005E6  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21005  0005E8  0101               	movlb	1	; () banked
 21006  0005EA  512E               	movf	(_arpeggiatorTypeMenu+2)& (0+255),w,b
 21007  0005EC  0100               	movlb	0	; () banked
 21008  0005EE  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21009  0005F0  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21010  0005F2  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21011  0005F4  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21012  0005F6  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21013  0005F8  0A80               	xorlw	128
 21014  0005FA  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21015  0005FC  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21016  0005FE  0A80               	xorlw	128
 21017  000600  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21018  000602  B0D8               	btfsc	status,0,c
 21019  000604  D002               	goto	l916
 21020                           
 21021                           ; BSR set to: 0
 21022                           ;encoder.c: 216: arpeggiatorTypeMenu.selector++;
 21023  000606  0101               	movlb	1	; () banked
 21024  000608  2B2E               	incf	(_arpeggiatorTypeMenu+2)& (0+255),f,b
 21025  00060A                     l916:
 21026                           
 21027                           ;encoder.c: 217: }
 21028                           ;encoder.c: 218: }
 21029                           ;encoder.c: 219: if (which_screen == ARPEGGIATOR_NOTE_LENGTH_MENU) {
 21030                           
 21031                           ; BSR set to: 1
 21032                           
 21033                           ; BSR set to: 1
 21034  00060A  0E1E               	movlw	30
 21035  00060C  184F               	xorwf	_which_screen,w,c
 21036  00060E  A4D8               	btfss	status,2,c
 21037  000610  D01F               	goto	l918
 21038                           
 21039                           ;encoder.c: 220: if(arpeggiatorNoteLengthMenu.selector < (arpeggiatorNoteLengthMenu.numb
      +                          er - 1)){
 21040  000612  0EFF               	movlw	255
 21041  000614  0100               	movlb	0	; () banked
 21042  000616  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21043  000618  0EFF               	movlw	255
 21044  00061A  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21045  00061C  0101               	movlb	1	; () banked
 21046  00061E  5129               	movf	_arpeggiatorNoteLengthMenu& (0+255),w,b
 21047  000620  0100               	movlb	0	; () banked
 21048  000622  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21049  000624  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21050  000626  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21051  000628  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21052  00062A  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21053  00062C  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21054  00062E  0101               	movlb	1	; () banked
 21055  000630  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 21056  000632  0100               	movlb	0	; () banked
 21057  000634  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21058  000636  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21059  000638  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21060  00063A  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21061  00063C  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21062  00063E  0A80               	xorlw	128
 21063  000640  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21064  000642  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21065  000644  0A80               	xorlw	128
 21066  000646  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21067  000648  B0D8               	btfsc	status,0,c
 21068  00064A  D002               	goto	l918
 21069                           
 21070                           ; BSR set to: 0
 21071                           ;encoder.c: 221: arpeggiatorNoteLengthMenu.selector++;
 21072  00064C  0101               	movlb	1	; () banked
 21073  00064E  2B2B               	incf	(_arpeggiatorNoteLengthMenu+2)& (0+255),f,b
 21074  000650                     l918:
 21075                           
 21076                           ;encoder.c: 222: }
 21077                           ;encoder.c: 223: }
 21078                           ;encoder.c: 224: if (which_screen == ARPEGGIATOR_LATCH_MENU) {
 21079                           
 21080                           ; BSR set to: 1
 21081                           
 21082                           ; BSR set to: 1
 21083  000650  0E1F               	movlw	31
 21084  000652  184F               	xorwf	_which_screen,w,c
 21085  000654  A4D8               	btfss	status,2,c
 21086  000656  D01F               	goto	l920
 21087                           
 21088                           ;encoder.c: 226: if(arpeggiatorLatchMenu.selector < (arpeggiatorLatchMenu.number - 1)){
 21089  000658  0EFF               	movlw	255
 21090  00065A  0100               	movlb	0	; () banked
 21091  00065C  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21092  00065E  0EFF               	movlw	255
 21093  000660  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21094  000662  0101               	movlb	1	; () banked
 21095  000664  5126               	movf	_arpeggiatorLatchMenu& (0+255),w,b
 21096  000666  0100               	movlb	0	; () banked
 21097  000668  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21098  00066A  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21099  00066C  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21100  00066E  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21101  000670  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21102  000672  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21103  000674  0101               	movlb	1	; () banked
 21104  000676  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 21105  000678  0100               	movlb	0	; () banked
 21106  00067A  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21107  00067C  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21108  00067E  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21109  000680  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21110  000682  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21111  000684  0A80               	xorlw	128
 21112  000686  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21113  000688  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21114  00068A  0A80               	xorlw	128
 21115  00068C  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21116  00068E  B0D8               	btfsc	status,0,c
 21117  000690  D002               	goto	l920
 21118                           
 21119                           ; BSR set to: 0
 21120                           ;encoder.c: 227: arpeggiatorLatchMenu.selector++;
 21121  000692  0101               	movlb	1	; () banked
 21122  000694  2B28               	incf	(_arpeggiatorLatchMenu+2)& (0+255),f,b
 21123  000696                     l920:
 21124                           
 21125                           ;encoder.c: 228: }
 21126                           ;encoder.c: 229: }
 21127                           ;encoder.c: 230: if (which_screen == ARPEGGIATOR_LATCH_ON_OFF_MENU) {
 21128                           
 21129                           ; BSR set to: 1
 21130                           
 21131                           ; BSR set to: 1
 21132  000696  0E20               	movlw	32
 21133  000698  184F               	xorwf	_which_screen,w,c
 21134  00069A  A4D8               	btfss	status,2,c
 21135  00069C  D003               	goto	l921
 21136                           
 21137                           ;encoder.c: 231: arpeggiatorLatchOnOffMenu.selector ^= 1;
 21138  00069E  0E01               	movlw	1
 21139  0006A0  0101               	movlb	1	; () banked
 21140  0006A2  1B25               	xorwf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),f,b
 21141  0006A4                     l921:
 21142                           
 21143                           ;encoder.c: 232: }
 21144                           ;encoder.c: 233: if (which_screen == ARPEGGIATOR_AUTO_LATCH_ON_OFF_MENU) {
 21145  0006A4  0E21               	movlw	33
 21146  0006A6  184F               	xorwf	_which_screen,w,c
 21147  0006A8  A4D8               	btfss	status,2,c
 21148  0006AA  D003               	goto	l922
 21149                           
 21150                           ;encoder.c: 234: arpeggiatorAutoLatchOnOffMenu.selector ^= 1;
 21151  0006AC  0E01               	movlw	1
 21152  0006AE  0101               	movlb	1	; () banked
 21153  0006B0  1B22               	xorwf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),f,b
 21154  0006B2                     l922:
 21155                           
 21156                           ;encoder.c: 235: }
 21157                           ;encoder.c: 236: if (which_screen == ARPEGGIATOR_UN_LATCH_MODE_MENU) {
 21158  0006B2  0E22               	movlw	34
 21159  0006B4  184F               	xorwf	_which_screen,w,c
 21160  0006B6  A4D8               	btfss	status,2,c
 21161  0006B8  D003               	goto	l923
 21162                           
 21163                           ;encoder.c: 237: arpeggiatorUnLatchModeMenu.selector ^= 1;
 21164  0006BA  0E01               	movlw	1
 21165  0006BC  0101               	movlb	1	; () banked
 21166  0006BE  1B1F               	xorwf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),f,b
 21167  0006C0                     l923:
 21168                           
 21169                           ;encoder.c: 238: }
 21170                           ;encoder.c: 239: if (which_screen == ARPEGGIATOR_RANDOMIZE_SKIP_MENU) {
 21171  0006C0  0E23               	movlw	35
 21172  0006C2  184F               	xorwf	_which_screen,w,c
 21173  0006C4  A4D8               	btfss	status,2,c
 21174  0006C6  D01F               	goto	l925
 21175                           
 21176                           ;encoder.c: 240: if(arpeggiatorRandomizeSkipMenu.selector < (arpeggiatorRandomizeSkipMen
      +                          u.number - 1)){
 21177  0006C8  0EFF               	movlw	255
 21178  0006CA  0100               	movlb	0	; () banked
 21179  0006CC  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21180  0006CE  0EFF               	movlw	255
 21181  0006D0  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21182  0006D2  0101               	movlb	1	; () banked
 21183  0006D4  511A               	movf	_arpeggiatorRandomizeSkipMenu& (0+255),w,b
 21184  0006D6  0100               	movlb	0	; () banked
 21185  0006D8  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21186  0006DA  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21187  0006DC  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21188  0006DE  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21189  0006E0  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21190  0006E2  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21191  0006E4  0101               	movlb	1	; () banked
 21192  0006E6  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 21193  0006E8  0100               	movlb	0	; () banked
 21194  0006EA  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21195  0006EC  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21196  0006EE  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21197  0006F0  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21198  0006F2  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21199  0006F4  0A80               	xorlw	128
 21200  0006F6  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21201  0006F8  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21202  0006FA  0A80               	xorlw	128
 21203  0006FC  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21204  0006FE  B0D8               	btfsc	status,0,c
 21205  000700  D002               	goto	l925
 21206                           
 21207                           ; BSR set to: 0
 21208                           ;encoder.c: 241: arpeggiatorRandomizeSkipMenu.selector++;
 21209  000702  0101               	movlb	1	; () banked
 21210  000704  2B1C               	incf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),f,b
 21211  000706                     l925:
 21212                           
 21213                           ;encoder.c: 242: }
 21214                           ;encoder.c: 243: }
 21215                           ;encoder.c: 244: if (which_screen == ARPEGGIATOR_RANDOMIZE_TYPE_MENU) {
 21216                           
 21217                           ; BSR set to: 1
 21218                           
 21219                           ; BSR set to: 1
 21220  000706  0E24               	movlw	36
 21221  000708  184F               	xorwf	_which_screen,w,c
 21222  00070A  A4D8               	btfss	status,2,c
 21223  00070C  D003               	goto	l926
 21224                           
 21225                           ;encoder.c: 245: arpeggiatorRandomizeTypeMenu.selector ^= 1;
 21226  00070E  0E01               	movlw	1
 21227  000710  0101               	movlb	1	; () banked
 21228  000712  1B19               	xorwf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),f,b
 21229  000714                     l926:
 21230                           
 21231                           ;encoder.c: 249: }
 21232                           ;encoder.c: 250: if (which_screen == ARPEGGIATOR_SKIP_FIRST_LAST_MENU) {
 21233  000714  0E25               	movlw	37
 21234  000716  184F               	xorwf	_which_screen,w,c
 21235  000718  A4D8               	btfss	status,2,c
 21236  00071A  D003               	goto	l927
 21237                           
 21238                           ;encoder.c: 251: arpeggiatorSkipFirstLastMenu.selector ^= 1;
 21239  00071C  0E01               	movlw	1
 21240  00071E  0101               	movlb	1	; () banked
 21241  000720  1B16               	xorwf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),f,b
 21242  000722                     l927:
 21243                           
 21244                           ;encoder.c: 252: }
 21245                           ;encoder.c: 253: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_MENU) {
 21246  000722  0E26               	movlw	38
 21247  000724  184F               	xorwf	_which_screen,w,c
 21248  000726  A4D8               	btfss	status,2,c
 21249  000728  D019               	goto	l929
 21250                           
 21251                           ;encoder.c: 254: if(arpeggiatorLastNoteModeMenu.selector < (arpeggiatorLastNoteModeMenu.
      +                          number - 1)){
 21252  00072A  0EFF               	movlw	255
 21253  00072C  0100               	movlb	0	; () banked
 21254  00072E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21255  000730  0EFF               	movlw	255
 21256  000732  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21257  000734  51DC               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
 21258  000736  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21259  000738  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21260  00073A  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21261  00073C  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21262  00073E  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21263  000740  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21264  000742  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 21265  000744  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21266  000746  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21267  000748  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21268  00074A  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21269  00074C  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21270  00074E  0A80               	xorlw	128
 21271  000750  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21272  000752  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21273  000754  0A80               	xorlw	128
 21274  000756  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21275  000758  A0D8               	btfss	status,0,c
 21276                           
 21277                           ; BSR set to: 0
 21278                           ;encoder.c: 255: arpeggiatorLastNoteModeMenu.selector++;
 21279  00075A  2BDE               	incf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),f,b
 21280  00075C                     l929:
 21281                           
 21282                           ;encoder.c: 256: }
 21283                           ;encoder.c: 257: }
 21284                           ;encoder.c: 258: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_PRESS_MENU) {
 21285                           
 21286                           ; BSR set to: 0
 21287                           
 21288                           ; BSR set to: 0
 21289  00075C  0E27               	movlw	39
 21290  00075E  184F               	xorwf	_which_screen,w,c
 21291  000760  A4D8               	btfss	status,2,c
 21292  000762  D003               	goto	l930
 21293                           
 21294                           ;encoder.c: 259: arpeggiatorLastNoteModeKeyPressMenu.selector ^= 1;
 21295  000764  0E01               	movlw	1
 21296  000766  0101               	movlb	1	; () banked
 21297  000768  1B13               	xorwf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),f,b
 21298  00076A                     l930:
 21299                           
 21300                           ;encoder.c: 260: }
 21301                           ;encoder.c: 261: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_RELEASE_MENU) {
 21302  00076A  0E28               	movlw	40
 21303  00076C  184F               	xorwf	_which_screen,w,c
 21304  00076E  A4D8               	btfss	status,2,c
 21305  000770  D003               	goto	l931
 21306                           
 21307                           ;encoder.c: 262: arpeggiatorLastNoteModeKeyReleaseMenu.selector ^= 1;
 21308  000772  0E01               	movlw	1
 21309  000774  0101               	movlb	1	; () banked
 21310  000776  1B10               	xorwf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),f,b
 21311  000778                     l931:
 21312                           
 21313                           ;encoder.c: 263: }
 21314                           ;encoder.c: 264: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU) {
 21315  000778  0E29               	movlw	41
 21316  00077A  184F               	xorwf	_which_screen,w,c
 21317  00077C  A4D8               	btfss	status,2,c
 21318  00077E  D003               	goto	l932
 21319                           
 21320                           ;encoder.c: 265: arpeggiatorLastNoteModeTransposeMenu.selector ^= 1;
 21321  000780  0E01               	movlw	1
 21322  000782  0101               	movlb	1	; () banked
 21323  000784  1B0D               	xorwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),f,b
 21324  000786                     l932:
 21325                           
 21326                           ;encoder.c: 266: }
 21327                           ;encoder.c: 267: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_RESET_MENU) {
 21328  000786  0E2A               	movlw	42
 21329  000788  184F               	xorwf	_which_screen,w,c
 21330  00078A  A4D8               	btfss	status,2,c
 21331  00078C  D003               	goto	l933
 21332                           
 21333                           ;encoder.c: 268: arpeggiatorLastNoteModeResetMenu.selector ^= 1;
 21334  00078E  0E01               	movlw	1
 21335  000790  0101               	movlb	1	; () banked
 21336  000792  1B0A               	xorwf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),f,b
 21337  000794                     l933:
 21338                           
 21339                           ;encoder.c: 269: }
 21340                           ;encoder.c: 270: }
 21341                           ;encoder.c: 273: if (encoder_direction == 0x20) {
 21342                           
 21343                           ; BSR set to: 1
 21344  000794  0E20               	movlw	32
 21345  000796  1836               	xorwf	_encoder_direction,w,c
 21346  000798  A4D8               	btfss	status,2,c
 21347  00079A  D147               	goto	l1007
 21348                           
 21349                           ;encoder.c: 275: lcd_print_once = 0;
 21350  00079C  9005               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 21351                           
 21352                           ;encoder.c: 276: print_row_2_once = 0;
 21353  00079E  9E04               	bcf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 21354                           
 21355                           ;encoder.c: 279: if (which_screen == MAIN_MENU) {
 21356  0007A0  0E02               	movlw	2
 21357  0007A2  184F               	xorwf	_which_screen,w,c
 21358  0007A4  A4D8               	btfss	status,2,c
 21359  0007A6  D004               	goto	l936
 21360                           
 21361                           ;encoder.c: 280: if(mainMenu.selector > 0){
 21362  0007A8  0101               	movlb	1	; () banked
 21363  0007AA  5176               	movf	(_mainMenu+2)& (0+255),w,b
 21364  0007AC  A4D8               	btfss	status,2,c
 21365                           
 21366                           ; BSR set to: 1
 21367                           ;encoder.c: 281: mainMenu.selector--;
 21368  0007AE  0776               	decf	(_mainMenu+2)& (0+255),f,b
 21369  0007B0                     l936:
 21370                           
 21371                           ;encoder.c: 282: }
 21372                           ;encoder.c: 283: }
 21373                           ;encoder.c: 284: if (which_screen == KEYBOARD_MENU) {
 21374                           
 21375                           ; BSR set to: 1
 21376                           
 21377                           ; BSR set to: 1
 21378  0007B0  0E03               	movlw	3
 21379  0007B2  184F               	xorwf	_which_screen,w,c
 21380  0007B4  A4D8               	btfss	status,2,c
 21381  0007B6  D004               	goto	l938
 21382                           
 21383                           ;encoder.c: 285: if(keyboardMenu.selector > 0){
 21384  0007B8  0100               	movlb	0	; () banked
 21385  0007BA  51E7               	movf	(_keyboardMenu+2)& (0+255),w,b
 21386  0007BC  A4D8               	btfss	status,2,c
 21387                           
 21388                           ; BSR set to: 0
 21389                           ;encoder.c: 286: keyboardMenu.selector--;
 21390  0007BE  07E7               	decf	(_keyboardMenu+2)& (0+255),f,b
 21391  0007C0                     l938:
 21392                           
 21393                           ;encoder.c: 287: }
 21394                           ;encoder.c: 288: }
 21395                           ;encoder.c: 289: if (which_screen == TRANSPOSE_MENU) {
 21396                           
 21397                           ; BSR set to: 0
 21398                           
 21399                           ; BSR set to: 0
 21400  0007C0  0E04               	movlw	4
 21401  0007C2  184F               	xorwf	_which_screen,w,c
 21402  0007C4  A4D8               	btfss	status,2,c
 21403  0007C6  D004               	goto	l940
 21404                           
 21405                           ;encoder.c: 290: if(transposeMenu.selector > 0){
 21406  0007C8  0101               	movlb	1	; () banked
 21407  0007CA  516A               	movf	(_transposeMenu+2)& (0+255),w,b
 21408  0007CC  A4D8               	btfss	status,2,c
 21409                           
 21410                           ; BSR set to: 1
 21411                           ;encoder.c: 291: transposeMenu.selector--;
 21412  0007CE  076A               	decf	(_transposeMenu+2)& (0+255),f,b
 21413  0007D0                     l940:
 21414                           
 21415                           ;encoder.c: 292: }
 21416                           ;encoder.c: 293: }
 21417                           ;encoder.c: 294: if (which_screen == DRUM_MENU) {
 21418                           
 21419                           ; BSR set to: 1
 21420                           
 21421                           ; BSR set to: 1
 21422  0007D0  0E05               	movlw	5
 21423  0007D2  184F               	xorwf	_which_screen,w,c
 21424  0007D4  A4D8               	btfss	status,2,c
 21425  0007D6  D004               	goto	l942
 21426                           
 21427                           ;encoder.c: 295: if(drumMenu.selector > 0){
 21428  0007D8  0101               	movlb	1	; () banked
 21429  0007DA  5167               	movf	(_drumMenu+2)& (0+255),w,b
 21430  0007DC  A4D8               	btfss	status,2,c
 21431                           
 21432                           ; BSR set to: 1
 21433                           ;encoder.c: 296: drumMenu.selector--;
 21434  0007DE  0767               	decf	(_drumMenu+2)& (0+255),f,b
 21435  0007E0                     l942:
 21436                           
 21437                           ;encoder.c: 297: }
 21438                           ;encoder.c: 298: }
 21439                           ;encoder.c: 299: if (which_screen == POTENTIOMETER_MENU) {
 21440                           
 21441                           ; BSR set to: 1
 21442                           
 21443                           ; BSR set to: 1
 21444  0007E0  0E06               	movlw	6
 21445  0007E2  184F               	xorwf	_which_screen,w,c
 21446  0007E4  A4D8               	btfss	status,2,c
 21447  0007E6  D004               	goto	l944
 21448                           
 21449                           ;encoder.c: 300: if(potsMenu.selector > 0){
 21450  0007E8  0101               	movlb	1	; () banked
 21451  0007EA  515B               	movf	(_potsMenu+2)& (0+255),w,b
 21452  0007EC  A4D8               	btfss	status,2,c
 21453                           
 21454                           ; BSR set to: 1
 21455                           ;encoder.c: 301: potsMenu.selector--;
 21456  0007EE  075B               	decf	(_potsMenu+2)& (0+255),f,b
 21457  0007F0                     l944:
 21458                           
 21459                           ;encoder.c: 302: }
 21460                           ;encoder.c: 303: }
 21461                           ;encoder.c: 304: if (which_screen == MIDI_CHANNEL_MENU) {
 21462                           
 21463                           ; BSR set to: 1
 21464                           
 21465                           ; BSR set to: 1
 21466  0007F0  0E07               	movlw	7
 21467  0007F2  184F               	xorwf	_which_screen,w,c
 21468  0007F4  A4D8               	btfss	status,2,c
 21469  0007F6  D004               	goto	l946
 21470                           
 21471                           ;encoder.c: 305: if(midiChannelMenu.selector > 0){
 21472  0007F8  0101               	movlb	1	; () banked
 21473  0007FA  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 21474  0007FC  A4D8               	btfss	status,2,c
 21475                           
 21476                           ; BSR set to: 1
 21477                           ;encoder.c: 306: midiChannelMenu.selector--;
 21478  0007FE  0749               	decf	(_midiChannelMenu+2)& (0+255),f,b
 21479  000800                     l946:
 21480                           
 21481                           ;encoder.c: 307: }
 21482                           ;encoder.c: 308: }
 21483                           ;encoder.c: 310: if (which_screen == MODES_MENU) {
 21484                           
 21485                           ; BSR set to: 1
 21486                           
 21487                           ; BSR set to: 1
 21488  000800  0E09               	movlw	9
 21489  000802  184F               	xorwf	_which_screen,w,c
 21490  000804  A4D8               	btfss	status,2,c
 21491  000806  D004               	goto	l948
 21492                           
 21493                           ;encoder.c: 311: if(modeMenu.selector > 0){
 21494  000808  0101               	movlb	1	; () banked
 21495  00080A  5173               	movf	(_modeMenu+2)& (0+255),w,b
 21496  00080C  A4D8               	btfss	status,2,c
 21497                           
 21498                           ; BSR set to: 1
 21499                           ;encoder.c: 312: modeMenu.selector--;
 21500  00080E  0773               	decf	(_modeMenu+2)& (0+255),f,b
 21501  000810                     l948:
 21502                           
 21503                           ;encoder.c: 313: }
 21504                           ;encoder.c: 314: }
 21505                           ;encoder.c: 316: if (which_screen == TRIADS_MENU) {
 21506                           
 21507                           ; BSR set to: 1
 21508                           
 21509                           ; BSR set to: 1
 21510  000810  0E0A               	movlw	10
 21511  000812  184F               	xorwf	_which_screen,w,c
 21512  000814  A4D8               	btfss	status,2,c
 21513  000816  D004               	goto	l950
 21514                           
 21515                           ;encoder.c: 317: if(triadMenu.selector > 0){
 21516  000818  0101               	movlb	1	; () banked
 21517  00081A  5170               	movf	(_triadMenu+2)& (0+255),w,b
 21518  00081C  A4D8               	btfss	status,2,c
 21519                           
 21520                           ; BSR set to: 1
 21521                           ;encoder.c: 318: triadMenu.selector--;
 21522  00081E  0770               	decf	(_triadMenu+2)& (0+255),f,b
 21523  000820                     l950:
 21524                           
 21525                           ;encoder.c: 319: }
 21526                           ;encoder.c: 320: }
 21527                           ;encoder.c: 321: if (which_screen == SEVENTHS_MENU) {
 21528                           
 21529                           ; BSR set to: 1
 21530                           
 21531                           ; BSR set to: 1
 21532  000820  0E0B               	movlw	11
 21533  000822  184F               	xorwf	_which_screen,w,c
 21534  000824  A4D8               	btfss	status,2,c
 21535  000826  D004               	goto	l952
 21536                           
 21537                           ;encoder.c: 322: if(seventhMenu.selector > 0){
 21538  000828  0101               	movlb	1	; () banked
 21539  00082A  516D               	movf	(_seventhMenu+2)& (0+255),w,b
 21540  00082C  A4D8               	btfss	status,2,c
 21541                           
 21542                           ; BSR set to: 1
 21543                           ;encoder.c: 323: seventhMenu.selector--;
 21544  00082E  076D               	decf	(_seventhMenu+2)& (0+255),f,b
 21545  000830                     l952:
 21546                           
 21547                           ;encoder.c: 324: }
 21548                           ;encoder.c: 325: }
 21549                           ;encoder.c: 326: if (which_screen == DRUMS_CC_TYPE_MENU) {
 21550                           
 21551                           ; BSR set to: 1
 21552                           
 21553                           ; BSR set to: 1
 21554  000830  0E0C               	movlw	12
 21555  000832  184F               	xorwf	_which_screen,w,c
 21556  000834  A4D8               	btfss	status,2,c
 21557  000836  D004               	goto	l954
 21558                           
 21559                           ;encoder.c: 327: if(drumCCTypeMenu.selector > 0){
 21560  000838  0101               	movlb	1	; () banked
 21561  00083A  5164               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 21562  00083C  A4D8               	btfss	status,2,c
 21563                           
 21564                           ; BSR set to: 1
 21565                           ;encoder.c: 328: drumCCTypeMenu.selector--;
 21566  00083E  0764               	decf	(_drumCCTypeMenu+2)& (0+255),f,b
 21567  000840                     l954:
 21568                           
 21569                           ;encoder.c: 329: }
 21570                           ;encoder.c: 330: }
 21571                           ;encoder.c: 332: if (which_screen == DRUMS_NN_MENU) {
 21572                           
 21573                           ; BSR set to: 1
 21574                           
 21575                           ; BSR set to: 1
 21576  000840  0E0D               	movlw	13
 21577  000842  184F               	xorwf	_which_screen,w,c
 21578  000844  A4D8               	btfss	status,2,c
 21579  000846  D004               	goto	l956
 21580                           
 21581                           ;encoder.c: 333: if(drumNNMenu.selector > 0){
 21582  000848  0101               	movlb	1	; () banked
 21583  00084A  5161               	movf	(_drumNNMenu+2)& (0+255),w,b
 21584  00084C  A4D8               	btfss	status,2,c
 21585                           
 21586                           ; BSR set to: 1
 21587                           ;encoder.c: 334: drumNNMenu.selector--;
 21588  00084E  0761               	decf	(_drumNNMenu+2)& (0+255),f,b
 21589  000850                     l956:
 21590                           
 21591                           ;encoder.c: 335: }
 21592                           ;encoder.c: 336: }
 21593                           ;encoder.c: 338: if (which_screen == DRUMS_CC_MENU) {
 21594                           
 21595                           ; BSR set to: 1
 21596                           
 21597                           ; BSR set to: 1
 21598  000850  0E0E               	movlw	14
 21599  000852  184F               	xorwf	_which_screen,w,c
 21600  000854  A4D8               	btfss	status,2,c
 21601  000856  D004               	goto	l958
 21602                           
 21603                           ;encoder.c: 339: if(drumCCMenu.selector > 0){
 21604  000858  0101               	movlb	1	; () banked
 21605  00085A  515E               	movf	(_drumCCMenu+2)& (0+255),w,b
 21606  00085C  A4D8               	btfss	status,2,c
 21607                           
 21608                           ; BSR set to: 1
 21609                           ;encoder.c: 340: drumCCMenu.selector--;
 21610  00085E  075E               	decf	(_drumCCMenu+2)& (0+255),f,b
 21611  000860                     l958:
 21612                           
 21613                           ;encoder.c: 341: }
 21614                           ;encoder.c: 342: }
 21615                           ;encoder.c: 344: if (which_screen == POTS_RES_MENU) {
 21616                           
 21617                           ; BSR set to: 1
 21618                           
 21619                           ; BSR set to: 1
 21620  000860  0E0F               	movlw	15
 21621  000862  184F               	xorwf	_which_screen,w,c
 21622  000864  A4D8               	btfss	status,2,c
 21623  000866  D004               	goto	l960
 21624                           
 21625                           ;encoder.c: 345: if(potsResoMenu.selector > 0){
 21626  000868  0101               	movlb	1	; () banked
 21627  00086A  5158               	movf	(_potsResoMenu+2)& (0+255),w,b
 21628  00086C  A4D8               	btfss	status,2,c
 21629                           
 21630                           ; BSR set to: 1
 21631                           ;encoder.c: 346: potsResoMenu.selector--;
 21632  00086E  0758               	decf	(_potsResoMenu+2)& (0+255),f,b
 21633  000870                     l960:
 21634                           
 21635                           ;encoder.c: 347: }
 21636                           ;encoder.c: 348: }
 21637                           ;encoder.c: 350: if (which_screen == ENCODER_POLARITY_MENU) {
 21638                           
 21639                           ; BSR set to: 1
 21640                           
 21641                           ; BSR set to: 1
 21642  000870  0E18               	movlw	24
 21643  000872  184F               	xorwf	_which_screen,w,c
 21644  000874  A4D8               	btfss	status,2,c
 21645  000876  D006               	goto	l962
 21646                           
 21647                           ;encoder.c: 351: if(encoderPolarityMenu.selector == 1){
 21648  000878  0101               	movlb	1	; () banked
 21649  00087A  053A               	decf	(_encoderPolarityMenu+2)& (0+255),w,b
 21650  00087C  A4D8               	btfss	status,2,c
 21651  00087E  D002               	goto	l962
 21652                           
 21653                           ; BSR set to: 1
 21654                           ;encoder.c: 352: encoderPolarityMenu.selector = 0;
 21655  000880  0E00               	movlw	0
 21656  000882  6F3A               	movwf	(_encoderPolarityMenu+2)& (0+255),b
 21657  000884                     l962:
 21658                           
 21659                           ;encoder.c: 353: }
 21660                           ;encoder.c: 354: }
 21661                           ;encoder.c: 356: if (which_screen == POTS_ALPHA_MENU) {
 21662                           
 21663                           ; BSR set to: 1
 21664                           
 21665                           ; BSR set to: 1
 21666  000884  0E10               	movlw	16
 21667  000886  184F               	xorwf	_which_screen,w,c
 21668  000888  A4D8               	btfss	status,2,c
 21669  00088A  D006               	goto	l964
 21670                           
 21671                           ;encoder.c: 357: if(potsAlphaMenu.selector >= 15){
 21672  00088C  0E0E               	movlw	14
 21673  00088E  0101               	movlb	1	; () banked
 21674  000890  6555               	cpfsgt	(_potsAlphaMenu+2)& (0+255),b
 21675  000892  D002               	goto	l964
 21676                           
 21677                           ; BSR set to: 1
 21678                           ;encoder.c: 358: potsAlphaMenu.selector -= 5;
 21679  000894  0E05               	movlw	5
 21680  000896  5F55               	subwf	(_potsAlphaMenu+2)& (0+255),f,b
 21681  000898                     l964:
 21682                           
 21683                           ;encoder.c: 363: if(potsCCMenu.selector > -2){
 21684                           
 21685                           ; BSR set to: 1
 21686  000898  0E11               	movlw	17
 21687  00089A  184F               	xorwf	_which_screen,w,c
 21688  00089C  A4D8               	btfss	status,2,c
 21689  00089E  D002               	goto	l966
 21690                           
 21691                           ;encoder.c: 364: potsCCMenu.selector--;
 21692  0008A0  0101               	movlb	1	; () banked
 21693  0008A2  0752               	decf	(_potsCCMenu+2)& (0+255),f,b
 21694  0008A4                     l966:
 21695                           
 21696                           ;encoder.c: 369: if(slidepotsCCMenu.selector > -2){
 21697                           
 21698                           ; BSR set to: 1
 21699                           
 21700                           ; BSR set to: 1
 21701  0008A4  0E12               	movlw	18
 21702  0008A6  184F               	xorwf	_which_screen,w,c
 21703  0008A8  A4D8               	btfss	status,2,c
 21704  0008AA  D002               	goto	l968
 21705                           
 21706                           ;encoder.c: 370: slidepotsCCMenu.selector--;
 21707  0008AC  0101               	movlb	1	; () banked
 21708  0008AE  074F               	decf	(_slidepotsCCMenu+2)& (0+255),f,b
 21709  0008B0                     l968:
 21710                           
 21711                           ;encoder.c: 371: }
 21712                           ;encoder.c: 372: }
 21713                           ;encoder.c: 373: if (which_screen == PROGRAM_CHANGE_MENU) {
 21714                           
 21715                           ; BSR set to: 1
 21716                           
 21717                           ; BSR set to: 1
 21718  0008B0  0E08               	movlw	8
 21719  0008B2  184F               	xorwf	_which_screen,w,c
 21720  0008B4  A4D8               	btfss	status,2,c
 21721  0008B6  D004               	goto	l970
 21722                           
 21723                           ;encoder.c: 374: if(programChangeMenu.selector > 0){
 21724  0008B8  0101               	movlb	1	; () banked
 21725  0008BA  5146               	movf	(_programChangeMenu+2)& (0+255),w,b
 21726  0008BC  A4D8               	btfss	status,2,c
 21727                           
 21728                           ; BSR set to: 1
 21729                           ;encoder.c: 375: programChangeMenu.selector--;
 21730  0008BE  0746               	decf	(_programChangeMenu+2)& (0+255),f,b
 21731  0008C0                     l970:
 21732                           
 21733                           ;encoder.c: 376: }
 21734                           ;encoder.c: 377: }
 21735                           ;encoder.c: 379: if (which_screen == MAIN_CH_MENU) {
 21736                           
 21737                           ; BSR set to: 1
 21738                           
 21739                           ; BSR set to: 1
 21740  0008C0  0E14               	movlw	20
 21741  0008C2  184F               	xorwf	_which_screen,w,c
 21742  0008C4  A4D8               	btfss	status,2,c
 21743  0008C6  D004               	goto	l972
 21744                           
 21745                           ;encoder.c: 380: if(mainChannelMenu.selector > 0){
 21746  0008C8  0101               	movlb	1	; () banked
 21747  0008CA  5143               	movf	(_mainChannelMenu+2)& (0+255),w,b
 21748  0008CC  A4D8               	btfss	status,2,c
 21749                           
 21750                           ; BSR set to: 1
 21751                           ;encoder.c: 381: mainChannelMenu.selector--;
 21752  0008CE  0743               	decf	(_mainChannelMenu+2)& (0+255),f,b
 21753  0008D0                     l972:
 21754                           
 21755                           ;encoder.c: 382: }
 21756                           ;encoder.c: 383: }
 21757                           ;encoder.c: 385: if (which_screen == DRUM_CH_MENU) {
 21758                           
 21759                           ; BSR set to: 1
 21760                           
 21761                           ; BSR set to: 1
 21762  0008D0  0E15               	movlw	21
 21763  0008D2  184F               	xorwf	_which_screen,w,c
 21764  0008D4  A4D8               	btfss	status,2,c
 21765  0008D6  D004               	goto	l974
 21766                           
 21767                           ;encoder.c: 386: if(drumChannelMenu.selector > 0){
 21768  0008D8  0101               	movlb	1	; () banked
 21769  0008DA  5140               	movf	(_drumChannelMenu+2)& (0+255),w,b
 21770  0008DC  A4D8               	btfss	status,2,c
 21771                           
 21772                           ; BSR set to: 1
 21773                           ;encoder.c: 387: drumChannelMenu.selector--;
 21774  0008DE  0740               	decf	(_drumChannelMenu+2)& (0+255),f,b
 21775  0008E0                     l974:
 21776                           
 21777                           ;encoder.c: 392: if(joystickCCMenu.selector > -2){
 21778                           
 21779                           ; BSR set to: 1
 21780                           
 21781                           ; BSR set to: 1
 21782  0008E0  0E13               	movlw	19
 21783  0008E2  184F               	xorwf	_which_screen,w,c
 21784  0008E4  A4D8               	btfss	status,2,c
 21785  0008E6  D002               	goto	l976
 21786                           
 21787                           ;encoder.c: 393: joystickCCMenu.selector--;
 21788  0008E8  0101               	movlb	1	; () banked
 21789  0008EA  074C               	decf	(_joystickCCMenu+2)& (0+255),f,b
 21790  0008EC                     l976:
 21791                           
 21792                           ;encoder.c: 394: }
 21793                           ;encoder.c: 395: }
 21794                           ;encoder.c: 396: if (which_screen == EEPROM_MENU) {
 21795                           
 21796                           ; BSR set to: 1
 21797                           
 21798                           ; BSR set to: 1
 21799  0008EC  0E16               	movlw	22
 21800  0008EE  184F               	xorwf	_which_screen,w,c
 21801  0008F0  A4D8               	btfss	status,2,c
 21802  0008F2  D004               	goto	l978
 21803                           
 21804                           ;encoder.c: 397: if(eepromMenu.selector > 0){
 21805  0008F4  0101               	movlb	1	; () banked
 21806  0008F6  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 21807  0008F8  A4D8               	btfss	status,2,c
 21808                           
 21809                           ; BSR set to: 1
 21810                           ;encoder.c: 398: eepromMenu.selector--;
 21811  0008FA  073D               	decf	(_eepromMenu+2)& (0+255),f,b
 21812  0008FC                     l978:
 21813                           
 21814                           ;encoder.c: 399: }
 21815                           ;encoder.c: 400: }
 21816                           ;encoder.c: 401: if (which_screen == SAVES_MENU) {
 21817                           
 21818                           ; BSR set to: 1
 21819                           
 21820                           ; BSR set to: 1
 21821  0008FC  0E17               	movlw	23
 21822  0008FE  184F               	xorwf	_which_screen,w,c
 21823  000900  A4D8               	btfss	status,2,c
 21824  000902  D004               	goto	l980
 21825                           
 21826                           ;encoder.c: 402: if(savesMenu.selector > 0){
 21827  000904  0100               	movlb	0	; () banked
 21828  000906  51E4               	movf	(_savesMenu+2)& (0+255),w,b
 21829  000908  A4D8               	btfss	status,2,c
 21830                           
 21831                           ; BSR set to: 0
 21832                           ;encoder.c: 403: savesMenu.selector--;
 21833  00090A  07E4               	decf	(_savesMenu+2)& (0+255),f,b
 21834  00090C                     l980:
 21835                           
 21836                           ;encoder.c: 404: }
 21837                           ;encoder.c: 405: }
 21838                           ;encoder.c: 406: if (which_screen == ARPEGGIATOR_MENU) {
 21839                           
 21840                           ; BSR set to: 0
 21841                           
 21842                           ; BSR set to: 0
 21843  00090C  0E19               	movlw	25
 21844  00090E  184F               	xorwf	_which_screen,w,c
 21845  000910  A4D8               	btfss	status,2,c
 21846  000912  D004               	goto	l982
 21847                           
 21848                           ;encoder.c: 407: if(arpeggiatorMenu.selector > 0){
 21849  000914  0100               	movlb	0	; () banked
 21850  000916  51E1               	movf	(_arpeggiatorMenu+2)& (0+255),w,b
 21851  000918  A4D8               	btfss	status,2,c
 21852                           
 21853                           ; BSR set to: 0
 21854                           ;encoder.c: 408: arpeggiatorMenu.selector--;
 21855  00091A  07E1               	decf	(_arpeggiatorMenu+2)& (0+255),f,b
 21856  00091C                     l982:
 21857                           
 21858                           ;encoder.c: 409: }
 21859                           ;encoder.c: 410: }
 21860                           ;encoder.c: 411: if (which_screen == ARPEGGIATOR_ON_OFF_MENU) {
 21861                           
 21862                           ; BSR set to: 0
 21863                           
 21864                           ; BSR set to: 0
 21865  00091C  0E1A               	movlw	26
 21866  00091E  184F               	xorwf	_which_screen,w,c
 21867  000920  A4D8               	btfss	status,2,c
 21868  000922  D003               	goto	l983
 21869                           
 21870                           ;encoder.c: 412: arpeggiatorOnOffMenu.selector ^= 1;
 21871  000924  0E01               	movlw	1
 21872  000926  0101               	movlb	1	; () banked
 21873  000928  1B37               	xorwf	(_arpeggiatorOnOffMenu+2)& (0+255),f,b
 21874  00092A                     l983:
 21875                           
 21876                           ;encoder.c: 416: }
 21877                           ;encoder.c: 417: if (which_screen == ARPEGGIATOR_TEMPO_MENU) {
 21878  00092A  0E1B               	movlw	27
 21879  00092C  184F               	xorwf	_which_screen,w,c
 21880  00092E  A4D8               	btfss	status,2,c
 21881  000930  D005               	goto	l985
 21882                           
 21883                           ;encoder.c: 418: if(arpeggiatorTempoMenu.selector > 25){
 21884  000932  0E19               	movlw	25
 21885  000934  0101               	movlb	1	; () banked
 21886  000936  6534               	cpfsgt	(_arpeggiatorTempoMenu+2)& (0+255),b
 21887  000938  D001               	goto	l985
 21888                           
 21889                           ; BSR set to: 1
 21890                           ;encoder.c: 419: arpeggiatorTempoMenu.selector--;
 21891  00093A  0734               	decf	(_arpeggiatorTempoMenu+2)& (0+255),f,b
 21892  00093C                     l985:
 21893                           
 21894                           ;encoder.c: 420: }
 21895                           ;encoder.c: 421: }
 21896                           ;encoder.c: 422: if (which_screen == ARPEGGIATOR_OCTAVES_MENU) {
 21897                           
 21898                           ; BSR set to: 1
 21899                           
 21900                           ; BSR set to: 1
 21901  00093C  0E1C               	movlw	28
 21902  00093E  184F               	xorwf	_which_screen,w,c
 21903  000940  A4D8               	btfss	status,2,c
 21904  000942  D005               	goto	l987
 21905                           
 21906                           ;encoder.c: 423: if(arpeggiatorOctavesMenu.selector > 1){
 21907  000944  0E01               	movlw	1
 21908  000946  0101               	movlb	1	; () banked
 21909  000948  6531               	cpfsgt	(_arpeggiatorOctavesMenu+2)& (0+255),b
 21910  00094A  D001               	goto	l987
 21911                           
 21912                           ; BSR set to: 1
 21913                           ;encoder.c: 424: arpeggiatorOctavesMenu.selector--;
 21914  00094C  0731               	decf	(_arpeggiatorOctavesMenu+2)& (0+255),f,b
 21915  00094E                     l987:
 21916                           
 21917                           ;encoder.c: 425: }
 21918                           ;encoder.c: 426: }
 21919                           ;encoder.c: 427: if (which_screen == ARPEGGIATOR_ARPEGGIO_TYPE_MENU) {
 21920                           
 21921                           ; BSR set to: 1
 21922                           
 21923                           ; BSR set to: 1
 21924  00094E  0E1D               	movlw	29
 21925  000950  184F               	xorwf	_which_screen,w,c
 21926  000952  A4D8               	btfss	status,2,c
 21927  000954  D004               	goto	l989
 21928                           
 21929                           ;encoder.c: 428: if(arpeggiatorTypeMenu.selector > 0){
 21930  000956  0101               	movlb	1	; () banked
 21931  000958  512E               	movf	(_arpeggiatorTypeMenu+2)& (0+255),w,b
 21932  00095A  A4D8               	btfss	status,2,c
 21933                           
 21934                           ; BSR set to: 1
 21935                           ;encoder.c: 429: arpeggiatorTypeMenu.selector--;
 21936  00095C  072E               	decf	(_arpeggiatorTypeMenu+2)& (0+255),f,b
 21937  00095E                     l989:
 21938                           
 21939                           ;encoder.c: 430: }
 21940                           ;encoder.c: 431: }
 21941                           ;encoder.c: 432: if (which_screen == ARPEGGIATOR_NOTE_LENGTH_MENU) {
 21942                           
 21943                           ; BSR set to: 1
 21944                           
 21945                           ; BSR set to: 1
 21946  00095E  0E1E               	movlw	30
 21947  000960  184F               	xorwf	_which_screen,w,c
 21948  000962  A4D8               	btfss	status,2,c
 21949  000964  D004               	goto	l991
 21950                           
 21951                           ;encoder.c: 433: if(arpeggiatorNoteLengthMenu.selector > 0){
 21952  000966  0101               	movlb	1	; () banked
 21953  000968  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 21954  00096A  A4D8               	btfss	status,2,c
 21955                           
 21956                           ; BSR set to: 1
 21957                           ;encoder.c: 434: arpeggiatorNoteLengthMenu.selector--;
 21958  00096C  072B               	decf	(_arpeggiatorNoteLengthMenu+2)& (0+255),f,b
 21959  00096E                     l991:
 21960                           
 21961                           ;encoder.c: 435: }
 21962                           ;encoder.c: 436: }
 21963                           ;encoder.c: 437: if (which_screen == ARPEGGIATOR_LATCH_MENU) {
 21964                           
 21965                           ; BSR set to: 1
 21966                           
 21967                           ; BSR set to: 1
 21968  00096E  0E1F               	movlw	31
 21969  000970  184F               	xorwf	_which_screen,w,c
 21970  000972  A4D8               	btfss	status,2,c
 21971  000974  D004               	goto	l993
 21972                           
 21973                           ;encoder.c: 439: if(arpeggiatorLatchMenu.selector > 0){
 21974  000976  0101               	movlb	1	; () banked
 21975  000978  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 21976  00097A  A4D8               	btfss	status,2,c
 21977                           
 21978                           ; BSR set to: 1
 21979                           ;encoder.c: 440: arpeggiatorLatchMenu.selector--;
 21980  00097C  0728               	decf	(_arpeggiatorLatchMenu+2)& (0+255),f,b
 21981  00097E                     l993:
 21982                           
 21983                           ;encoder.c: 441: }
 21984                           ;encoder.c: 442: }
 21985                           ;encoder.c: 443: if (which_screen == ARPEGGIATOR_LATCH_ON_OFF_MENU) {
 21986                           
 21987                           ; BSR set to: 1
 21988                           
 21989                           ; BSR set to: 1
 21990  00097E  0E20               	movlw	32
 21991  000980  184F               	xorwf	_which_screen,w,c
 21992  000982  A4D8               	btfss	status,2,c
 21993  000984  D003               	goto	l994
 21994                           
 21995                           ;encoder.c: 444: arpeggiatorLatchOnOffMenu.selector ^= 1;
 21996  000986  0E01               	movlw	1
 21997  000988  0101               	movlb	1	; () banked
 21998  00098A  1B25               	xorwf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),f,b
 21999  00098C                     l994:
 22000                           
 22001                           ;encoder.c: 445: }
 22002                           ;encoder.c: 446: if (which_screen == ARPEGGIATOR_AUTO_LATCH_ON_OFF_MENU) {
 22003  00098C  0E21               	movlw	33
 22004  00098E  184F               	xorwf	_which_screen,w,c
 22005  000990  A4D8               	btfss	status,2,c
 22006  000992  D003               	goto	l995
 22007                           
 22008                           ;encoder.c: 447: arpeggiatorAutoLatchOnOffMenu.selector ^= 1;
 22009  000994  0E01               	movlw	1
 22010  000996  0101               	movlb	1	; () banked
 22011  000998  1B22               	xorwf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),f,b
 22012  00099A                     l995:
 22013                           
 22014                           ;encoder.c: 448: }
 22015                           ;encoder.c: 449: if (which_screen == ARPEGGIATOR_UN_LATCH_MODE_MENU) {
 22016  00099A  0E22               	movlw	34
 22017  00099C  184F               	xorwf	_which_screen,w,c
 22018  00099E  A4D8               	btfss	status,2,c
 22019  0009A0  D003               	goto	l996
 22020                           
 22021                           ;encoder.c: 450: arpeggiatorUnLatchModeMenu.selector ^= 1;
 22022  0009A2  0E01               	movlw	1
 22023  0009A4  0101               	movlb	1	; () banked
 22024  0009A6  1B1F               	xorwf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),f,b
 22025  0009A8                     l996:
 22026                           
 22027                           ;encoder.c: 451: }
 22028                           ;encoder.c: 452: if (which_screen == ARPEGGIATOR_RANDOMIZE_SKIP_MENU) {
 22029  0009A8  0E23               	movlw	35
 22030  0009AA  184F               	xorwf	_which_screen,w,c
 22031  0009AC  A4D8               	btfss	status,2,c
 22032  0009AE  D004               	goto	l998
 22033                           
 22034                           ;encoder.c: 453: if(arpeggiatorRandomizeSkipMenu.selector > 0){
 22035  0009B0  0101               	movlb	1	; () banked
 22036  0009B2  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 22037  0009B4  A4D8               	btfss	status,2,c
 22038                           
 22039                           ; BSR set to: 1
 22040                           ;encoder.c: 454: arpeggiatorRandomizeSkipMenu.selector--;
 22041  0009B6  071C               	decf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),f,b
 22042  0009B8                     l998:
 22043                           
 22044                           ;encoder.c: 455: }
 22045                           ;encoder.c: 456: }
 22046                           ;encoder.c: 457: if (which_screen == ARPEGGIATOR_RANDOMIZE_TYPE_MENU) {
 22047                           
 22048                           ; BSR set to: 1
 22049                           
 22050                           ; BSR set to: 1
 22051  0009B8  0E24               	movlw	36
 22052  0009BA  184F               	xorwf	_which_screen,w,c
 22053  0009BC  A4D8               	btfss	status,2,c
 22054  0009BE  D003               	goto	l999
 22055                           
 22056                           ;encoder.c: 458: arpeggiatorRandomizeTypeMenu.selector ^= 1;
 22057  0009C0  0E01               	movlw	1
 22058  0009C2  0101               	movlb	1	; () banked
 22059  0009C4  1B19               	xorwf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),f,b
 22060  0009C6                     l999:
 22061                           
 22062                           ;encoder.c: 462: }
 22063                           ;encoder.c: 463: if (which_screen == ARPEGGIATOR_SKIP_FIRST_LAST_MENU) {
 22064  0009C6  0E25               	movlw	37
 22065  0009C8  184F               	xorwf	_which_screen,w,c
 22066  0009CA  A4D8               	btfss	status,2,c
 22067  0009CC  D003               	goto	l1000
 22068                           
 22069                           ;encoder.c: 464: arpeggiatorSkipFirstLastMenu.selector ^= 1;
 22070  0009CE  0E01               	movlw	1
 22071  0009D0  0101               	movlb	1	; () banked
 22072  0009D2  1B16               	xorwf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),f,b
 22073  0009D4                     l1000:
 22074                           
 22075                           ;encoder.c: 465: }
 22076                           ;encoder.c: 466: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_MENU) {
 22077  0009D4  0E26               	movlw	38
 22078  0009D6  184F               	xorwf	_which_screen,w,c
 22079  0009D8  A4D8               	btfss	status,2,c
 22080  0009DA  D004               	goto	l1002
 22081                           
 22082                           ;encoder.c: 467: if(arpeggiatorLastNoteModeMenu.selector > 0){
 22083  0009DC  0100               	movlb	0	; () banked
 22084  0009DE  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 22085  0009E0  A4D8               	btfss	status,2,c
 22086                           
 22087                           ; BSR set to: 0
 22088                           ;encoder.c: 468: arpeggiatorLastNoteModeMenu.selector--;
 22089  0009E2  07DE               	decf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),f,b
 22090  0009E4                     l1002:
 22091                           
 22092                           ;encoder.c: 469: }
 22093                           ;encoder.c: 470: }
 22094                           ;encoder.c: 471: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_PRESS_MENU) {
 22095                           
 22096                           ; BSR set to: 0
 22097                           
 22098                           ; BSR set to: 0
 22099  0009E4  0E27               	movlw	39
 22100  0009E6  184F               	xorwf	_which_screen,w,c
 22101  0009E8  A4D8               	btfss	status,2,c
 22102  0009EA  D003               	goto	l1003
 22103                           
 22104                           ;encoder.c: 472: arpeggiatorLastNoteModeKeyPressMenu.selector ^= 1;
 22105  0009EC  0E01               	movlw	1
 22106  0009EE  0101               	movlb	1	; () banked
 22107  0009F0  1B13               	xorwf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),f,b
 22108  0009F2                     l1003:
 22109                           
 22110                           ;encoder.c: 473: }
 22111                           ;encoder.c: 474: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_RELEASE_MENU) {
 22112  0009F2  0E28               	movlw	40
 22113  0009F4  184F               	xorwf	_which_screen,w,c
 22114  0009F6  A4D8               	btfss	status,2,c
 22115  0009F8  D003               	goto	l1004
 22116                           
 22117                           ;encoder.c: 475: arpeggiatorLastNoteModeKeyReleaseMenu.selector ^= 1;
 22118  0009FA  0E01               	movlw	1
 22119  0009FC  0101               	movlb	1	; () banked
 22120  0009FE  1B10               	xorwf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),f,b
 22121  000A00                     l1004:
 22122                           
 22123                           ;encoder.c: 476: }
 22124                           ;encoder.c: 477: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU) {
 22125  000A00  0E29               	movlw	41
 22126  000A02  184F               	xorwf	_which_screen,w,c
 22127  000A04  A4D8               	btfss	status,2,c
 22128  000A06  D003               	goto	l1005
 22129                           
 22130                           ;encoder.c: 478: arpeggiatorLastNoteModeTransposeMenu.selector ^= 1;
 22131  000A08  0E01               	movlw	1
 22132  000A0A  0101               	movlb	1	; () banked
 22133  000A0C  1B0D               	xorwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),f,b
 22134  000A0E                     l1005:
 22135                           
 22136                           ;encoder.c: 479: }
 22137                           ;encoder.c: 480: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU) {
 22138  000A0E  0E29               	movlw	41
 22139  000A10  184F               	xorwf	_which_screen,w,c
 22140  000A12  A4D8               	btfss	status,2,c
 22141  000A14  D003               	goto	l1006
 22142                           
 22143                           ;encoder.c: 481: arpeggiatorLastNoteModeTransposeMenu.selector ^= 1;
 22144  000A16  0E01               	movlw	1
 22145  000A18  0101               	movlb	1	; () banked
 22146  000A1A  1B0D               	xorwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),f,b
 22147  000A1C                     l1006:
 22148                           
 22149                           ;encoder.c: 482: }
 22150                           ;encoder.c: 483: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_RESET_MENU) {
 22151  000A1C  0E2A               	movlw	42
 22152  000A1E  184F               	xorwf	_which_screen,w,c
 22153  000A20  A4D8               	btfss	status,2,c
 22154  000A22  D003               	goto	l1007
 22155                           
 22156                           ;encoder.c: 484: arpeggiatorLastNoteModeResetMenu.selector ^= 1;
 22157  000A24  0E01               	movlw	1
 22158  000A26  0101               	movlb	1	; () banked
 22159  000A28  1B0A               	xorwf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),f,b
 22160  000A2A                     l1007:
 22161                           
 22162                           ;encoder.c: 485: }
 22163                           ;encoder.c: 486: }
 22164                           ;encoder.c: 488: encoder_direction = 0x00;
 22165                           
 22166                           ; BSR set to: 1
 22167                           
 22168                           ; BSR set to: 1
 22169  000A2A  0E00               	movlw	0
 22170  000A2C  6E36               	movwf	_encoder_direction,c
 22171  000A2E  0012               	return		;funcret
 22172  000A30                     __end_of_processEncoderBuxton:
 22173                           	opt stack 0
 22174                           tblptru	equ	0xFF8
 22175                           tblptrh	equ	0xFF7
 22176                           tblptrl	equ	0xFF6
 22177                           tablat	equ	0xFF5
 22178                           prodh	equ	0xFF4
 22179                           prodl	equ	0xFF3
 22180                           intcon	equ	0xFF2
 22181                           intcon2	equ	0xFF1
 22182                           postinc0	equ	0xFEE
 22183                           wreg	equ	0xFE8
 22184                           postinc1	equ	0xFE6
 22185                           plusw1	equ	0xFE3
 22186                           fsr1h	equ	0xFE2
 22187                           fsr1l	equ	0xFE1
 22188                           indf2	equ	0xFDF
 22189                           postinc2	equ	0xFDE
 22190                           postdec2	equ	0xFDD
 22191                           plusw2	equ	0xFDB
 22192                           fsr2h	equ	0xFDA
 22193                           fsr2l	equ	0xFD9
 22194                           status	equ	0xFD8
 22195                           
 22196 ;; *************** function _digitalInputs *****************
 22197 ;; Defined at:
 22198 ;;		line 335 in file "main.c"
 22199 ;; Parameters:    Size  Location     Type
 22200 ;;		None
 22201 ;; Auto vars:     Size  Location     Type
 22202 ;;		None
 22203 ;; Return value:  Size  Location     Type
 22204 ;;                  1    wreg      void 
 22205 ;; Registers used:
 22206 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22207 ;; Tracked objects:
 22208 ;;		On entry : 0/0
 22209 ;;		On exit  : 0/0
 22210 ;;		Unchanged: 0/0
 22211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22216 ;;Total ram usage:        0 bytes
 22217 ;; Hardware stack levels used:    1
 22218 ;; Hardware stack levels required when called:   14
 22219 ;; This function calls:
 22220 ;;		_buttonInputsSerial
 22221 ;;		_keyboardTranspose
 22222 ;;		_processDrumpad
 22223 ;;		_processKeyboard
 22224 ;;		_processOctave
 22225 ;; This function is called by:
 22226 ;;		_un_block_code
 22227 ;;		_main
 22228 ;; This function uses a non-reentrant model
 22229 ;;
 22230                           
 22231                           	psect	text64
 22232  009104                     __ptext64:
 22233                           	opt stack 0
 22234  009104                     _digitalInputs:
 22235                           	opt stack 13
 22236                           
 22237                           ;main.c: 337: buttonInputsSerial();
 22238                           
 22239                           ;incstack = 0
 22240  009104  ECDD  F042         	call	_buttonInputsSerial	;wreg free
 22241                           
 22242                           ;main.c: 340: if(button_state_now != button_state_last) {
 22243  009108  0100               	movlb	0	; () banked
 22244  00910A  51D4               	movf	_button_state_last& (0+255),w,b
 22245  00910C  19D8               	xorwf	_button_state_now& (0+255),w,b
 22246  00910E  E10A               	bnz	u56270
 22247  009110  51D5               	movf	(_button_state_last+1)& (0+255),w,b
 22248  009112  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 22249  009114  E107               	bnz	u56270
 22250  009116  51D6               	movf	(_button_state_last+2)& (0+255),w,b
 22251  009118  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 22252  00911A  E104               	bnz	u56270
 22253  00911C  51D7               	movf	(_button_state_last+3)& (0+255),w,b
 22254  00911E  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 22255  009120  B4D8               	btfsc	status,2,c
 22256  009122  D00E               	goto	l4970
 22257  009124                     u56270:
 22258                           
 22259                           ; BSR set to: 0
 22260                           ;main.c: 341: processOctave();
 22261  009124  EC9F  F01A         	call	_processOctave	;wreg free
 22262                           
 22263                           ;main.c: 342: keyboardTranspose();
 22264  009128  EC88  F021         	call	_keyboardTranspose	;wreg free
 22265                           
 22266                           ;main.c: 343: processKeyboard();
 22267  00912C  EC0E  F046         	call	_processKeyboard	;wreg free
 22268                           
 22269                           ;main.c: 344: button_state_last = button_state_now;
 22270  009130  C0D8  F0D4         	movff	_button_state_now,_button_state_last
 22271  009134  C0D9  F0D5         	movff	_button_state_now+1,_button_state_last+1
 22272  009138  C0DA  F0D6         	movff	_button_state_now+2,_button_state_last+2
 22273  00913C  C0DB  F0D7         	movff	_button_state_now+3,_button_state_last+3
 22274  009140                     l4970:
 22275                           
 22276                           ;main.c: 345: }
 22277                           ;main.c: 348: if(drum_button_state_now != drum_button_state_last) {
 22278  009140  5038               	movf	_drum_button_state_last,w,c
 22279  009142  1839               	xorwf	_drum_button_state_now,w,c
 22280  009144  B4D8               	btfsc	status,2,c
 22281  009146  0012               	return	
 22282                           
 22283                           ;main.c: 349: processOctave();
 22284  009148  EC9F  F01A         	call	_processOctave	;wreg free
 22285                           
 22286                           ;main.c: 350: processDrumpad();
 22287  00914C  EC3E  F00E         	call	_processDrumpad	;wreg free
 22288                           
 22289                           ;main.c: 351: drum_button_state_last = drum_button_state_now;
 22290  009150  C039  F038         	movff	_drum_button_state_now,_drum_button_state_last
 22291  009154  0012               	return	
 22292  009156                     __end_of_digitalInputs:
 22293                           	opt stack 0
 22294                           tblptru	equ	0xFF8
 22295                           tblptrh	equ	0xFF7
 22296                           tblptrl	equ	0xFF6
 22297                           tablat	equ	0xFF5
 22298                           prodh	equ	0xFF4
 22299                           prodl	equ	0xFF3
 22300                           intcon	equ	0xFF2
 22301                           intcon2	equ	0xFF1
 22302                           postinc0	equ	0xFEE
 22303                           wreg	equ	0xFE8
 22304                           postinc1	equ	0xFE6
 22305                           plusw1	equ	0xFE3
 22306                           fsr1h	equ	0xFE2
 22307                           fsr1l	equ	0xFE1
 22308                           indf2	equ	0xFDF
 22309                           postinc2	equ	0xFDE
 22310                           postdec2	equ	0xFDD
 22311                           plusw2	equ	0xFDB
 22312                           fsr2h	equ	0xFDA
 22313                           fsr2l	equ	0xFD9
 22314                           status	equ	0xFD8
 22315                           
 22316 ;; *************** function _processOctave *****************
 22317 ;; Defined at:
 22318 ;;		line 275 in file "octave.c"
 22319 ;; Parameters:    Size  Location     Type
 22320 ;;		None
 22321 ;; Auto vars:     Size  Location     Type
 22322 ;;		None
 22323 ;; Return value:  Size  Location     Type
 22324 ;;                  1    wreg      void 
 22325 ;; Registers used:
 22326 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22327 ;; Tracked objects:
 22328 ;;		On entry : 0/0
 22329 ;;		On exit  : 0/0
 22330 ;;		Unchanged: 0/0
 22331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22334 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22335 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22336 ;;Total ram usage:        2 bytes
 22337 ;; Hardware stack levels used:    1
 22338 ;; Hardware stack levels required when called:   13
 22339 ;; This function calls:
 22340 ;;		___awmod
 22341 ;;		___wmul
 22342 ;;		_doTheLatch
 22343 ;;		_doTheUnLatch
 22344 ;;		_key_press_release_note_off
 22345 ;;		_printThisNumber
 22346 ;;		_random_pitches
 22347 ;;		_random_pitches_non_repeating
 22348 ;;		_resetArpeggio
 22349 ;;		_strcpy
 22350 ;;		_wait_one_pulse
 22351 ;; This function is called by:
 22352 ;;		_digitalInputs
 22353 ;; This function uses a non-reentrant model
 22354 ;;
 22355                           
 22356                           	psect	text65
 22357  00353E                     __ptext65:
 22358                           	opt stack 0
 22359  00353E                     _processOctave:
 22360                           	opt stack 13
 22361                           
 22362                           ;octave.c: 280: if(ARPEGGIO_ON == 1) {
 22363                           
 22364                           ;incstack = 0
 22365  00353E  A804               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 22366  003540  D044               	goto	l2878
 22367                           
 22368                           ;octave.c: 284: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x01))
 22369  003542  0100               	movlb	0	; () banked
 22370  003544  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 22371                           
 22372                           ; BSR set to: 0
 22373  003546  A039               	btfss	_drum_button_state_now,0,c
 22374  003548  D002               	goto	l2873
 22375                           
 22376                           ; BSR set to: 0
 22377                           ;octave.c: 285: {
 22378                           ;octave.c: 292: doTheLatch();
 22379  00354A  ECD7  F04B         	call	_doTheLatch	;wreg free
 22380  00354E                     l2873:
 22381                           
 22382                           ;octave.c: 293: }
 22383                           ;octave.c: 297: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x02)) {
 22384  00354E  0100               	movlb	0	; () banked
 22385  003550  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 22386                           
 22387                           ; BSR set to: 0
 22388  003552  A239               	btfss	_drum_button_state_now,1,c
 22389  003554  D002               	goto	l2874
 22390                           
 22391                           ; BSR set to: 0
 22392                           ;octave.c: 299: doTheUnLatch();
 22393  003556  EC53  F028         	call	_doTheUnLatch	;wreg free
 22394  00355A                     l2874:
 22395                           
 22396                           ;octave.c: 378: }
 22397                           ;octave.c: 382: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x04)){
 22398  00355A  0100               	movlb	0	; () banked
 22399  00355C  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 22400                           
 22401                           ; BSR set to: 0
 22402  00355E  A439               	btfss	_drum_button_state_now,2,c
 22403  003560  D017               	goto	l2875
 22404                           
 22405                           ; BSR set to: 0
 22406                           ;octave.c: 385: if(ARPEGGIO_TYPE == RANDOM) {random_pitches();}
 22407  003562  0E05               	movlw	5
 22408  003564  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 22409  003566  B4D8               	btfsc	status,2,c
 22410                           
 22411                           ; BSR set to: 0
 22412  003568  EC31  F045         	call	_random_pitches	;wreg free
 22413                           
 22414                           ;octave.c: 386: if(ARPEGGIO_TYPE == RANDOM_NON_REPEATING){random_pitches_non_repeating()
      +                          ;}
 22415  00356C  0E04               	movlw	4
 22416  00356E  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 22417  003570  B4D8               	btfsc	status,2,c
 22418  003572  ECDF  F03B         	call	_random_pitches_non_repeating	;wreg free
 22419                           
 22420                           ;octave.c: 388: DISPLAY_MODE = 1;
 22421  003576  0E01               	movlw	1
 22422  003578  0100               	movlb	0	; () banked
 22423  00357A  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 22424                           
 22425                           ; BSR set to: 0
 22426                           ;octave.c: 389: strcpy(string_to_display, "rAnd");
 22427  00357C  0EF8               	movlw	low _string_to_display
 22428  00357E  6F60               	movwf	strcpy@to& (0+255),b
 22429  003580  0E01               	movlw	high _string_to_display
 22430  003582  6F61               	movwf	(strcpy@to+1)& (0+255),b
 22431  003584  0EEB               	movlw	low STR_6
 22432  003586  6F62               	movwf	strcpy@from& (0+255),b
 22433  003588  0EFF               	movlw	high STR_6
 22434  00358A  6F63               	movwf	(strcpy@from+1)& (0+255),b
 22435  00358C  ECF3  F04A         	call	_strcpy	;wreg free
 22436  003590                     l2875:
 22437                           
 22438                           ;octave.c: 391: }
 22439                           ;octave.c: 395: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x08)){
 22440  003590  0100               	movlb	0	; () banked
 22441  003592  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 22442                           
 22443                           ; BSR set to: 0
 22444  003594  A639               	btfss	_drum_button_state_now,3,c
 22445  003596  D019               	goto	l2878
 22446                           
 22447                           ; BSR set to: 0
 22448                           ;octave.c: 398: wait_one_pulse(LAST_NOTE_MODE_RESET);
 22449  003598  0E00               	movlw	0
 22450  00359A  BE02               	btfsc	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 22451  00359C  0E01               	movlw	1
 22452  00359E  EC52  F04B         	call	_wait_one_pulse
 22453                           
 22454                           ;octave.c: 399: note_off_was_sent = 1;
 22455  0035A2  8202               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 22456                           
 22457                           ;octave.c: 400: key_press_release_note_off();
 22458  0035A4  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 22459                           
 22460                           ;octave.c: 403: resetArpeggio();
 22461  0035A8  ECF2  F049         	call	_resetArpeggio	;wreg free
 22462                           
 22463                           ;octave.c: 406: TIMER_OVERFLOWS = 0;
 22464  0035AC  0E00               	movlw	0
 22465  0035AE  6E2E               	movwf	_TIMER_OVERFLOWS,c
 22466                           
 22467                           ;octave.c: 408: DISPLAY_MODE = 1;
 22468  0035B0  0E01               	movlw	1
 22469  0035B2  0100               	movlb	0	; () banked
 22470  0035B4  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 22471                           
 22472                           ; BSR set to: 0
 22473                           ;octave.c: 409: strcpy(string_to_display, "rSEt");
 22474  0035B6  0EF8               	movlw	low _string_to_display
 22475  0035B8  6F60               	movwf	strcpy@to& (0+255),b
 22476  0035BA  0E01               	movlw	high _string_to_display
 22477  0035BC  6F61               	movwf	(strcpy@to+1)& (0+255),b
 22478  0035BE  0EF5               	movlw	low STR_7
 22479  0035C0  6F62               	movwf	strcpy@from& (0+255),b
 22480  0035C2  0EFF               	movlw	high STR_7
 22481  0035C4  6F63               	movwf	(strcpy@from+1)& (0+255),b
 22482  0035C6  ECF3  F04A         	call	_strcpy	;wreg free
 22483  0035CA                     l2878:
 22484                           
 22485                           ;octave.c: 410: }
 22486                           ;octave.c: 411: }
 22487                           ;octave.c: 414: if(button_state_now == 0x04000000){
 22488  0035CA  0E04               	movlw	4
 22489  0035CC  0100               	movlb	0	; () banked
 22490  0035CE  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 22491  0035D0  11D8               	iorwf	_button_state_now& (0+255),w,b
 22492  0035D2  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 22493  0035D4  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 22494  0035D6  A4D8               	btfss	status,2,c
 22495  0035D8  D03D               	goto	l2880
 22496                           
 22497                           ; BSR set to: 0
 22498                           ;octave.c: 415: if ((octave * 12 + semitone) <= 60) {
 22499  0035DA  C03B  F07E         	movff	_semitone,??_processOctave
 22500  0035DE  6B7F               	clrf	(??_processOctave+1)& (0+255),b
 22501  0035E0  BF7E               	btfsc	??_processOctave& (0+255),7,b
 22502  0035E2  077F               	decf	(??_processOctave+1)& (0+255),f,b
 22503  0035E4  5050               	movf	_octave,w,c
 22504  0035E6  6F60               	movwf	___wmul@multiplier& (0+255),b
 22505  0035E8  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 22506  0035EA  BF60               	btfsc	___wmul@multiplier& (0+255),7,b
 22507  0035EC  0761               	decf	(___wmul@multiplier+1)& (0+255),f,b
 22508  0035EE  0E00               	movlw	0
 22509  0035F0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22510  0035F2  0E0C               	movlw	12
 22511  0035F4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22512  0035F6  EC8F  F04B         	call	___wmul	;wreg free
 22513  0035FA  0100               	movlb	0	; () banked
 22514  0035FC  517E               	movf	??_processOctave& (0+255),w,b
 22515  0035FE  2760               	addwf	?___wmul& (0+255),f,b
 22516  003600  517F               	movf	(??_processOctave+1)& (0+255),w,b
 22517  003602  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22518  003604  BF61               	btfsc	(?___wmul+1)& (0+255),7,b
 22519  003606  D006               	goto	u54230
 22520  003608  5161               	movf	(?___wmul+1)& (0+255),w,b
 22521  00360A  E124               	bnz	l30152
 22522  00360C  0E3D               	movlw	61
 22523  00360E  5D60               	subwf	?___wmul& (0+255),w,b
 22524  003610  B0D8               	btfsc	status,0,c
 22525  003612  D020               	goto	l2880
 22526  003614                     u54230:
 22527                           
 22528                           ; BSR set to: 0
 22529                           ;octave.c: 418: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 22530  003614  A204               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 22531  003616  D00E               	goto	l2881
 22532                           
 22533                           ; BSR set to: 0
 22534  003618  502F               	movf	_NUM_NOTES_PRESSED,w,c
 22535  00361A  B4D8               	btfsc	status,2,c
 22536  00361C  D00B               	goto	l2881
 22537                           
 22538                           ; BSR set to: 0
 22539                           ;octave.c: 421: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 22540  00361E  0E00               	movlw	0
 22541  003620  B003               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 22542  003622  0E01               	movlw	1
 22543  003624  EC52  F04B         	call	_wait_one_pulse
 22544                           
 22545                           ;octave.c: 425: if(note_off_was_sent == 0) {key_press_release_note_off();}
 22546  003628  A202               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 22547  00362A  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 22548                           
 22549                           ;octave.c: 428: suppress_note_off = 1;
 22550  00362E  8802               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 22551                           
 22552                           ;octave.c: 430: flag1 = 1;
 22553  003630  8002               	bsf	_flag1/(0+8),_flag1& (0+7),c
 22554                           
 22555                           ;octave.c: 431: flag2 = 1;
 22556  003632  8E01               	bsf	_flag2/(0+8),_flag2& (0+7),c
 22557  003634                     l2881:
 22558                           
 22559                           ;octave.c: 432: }
 22560                           ;octave.c: 434: octave++;
 22561  003634  2A50               	incf	_octave,f,c
 22562                           
 22563                           ;octave.c: 435: if (octave > 7) {octave = 7;}
 22564  003636  5050               	movf	_octave,w,c
 22565  003638  0A80               	xorlw	128
 22566  00363A  0F78               	addlw	-136
 22567  00363C  A0D8               	btfss	status,0,c
 22568  00363E  D002               	goto	l2883
 22569  003640  0E07               	movlw	7
 22570  003642  6E50               	movwf	_octave,c
 22571  003644                     l2883:
 22572                           
 22573                           ;octave.c: 437: printThisNumber(octave);
 22574  003644  5050               	movf	_octave,w,c
 22575  003646  0100               	movlb	0	; () banked
 22576  003648  6F60               	movwf	printThisNumber@n& (0+255),b
 22577  00364A  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 22578  00364C  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 22579  00364E  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 22580  003650  EC33  F04C         	call	_printThisNumber	;wreg free
 22581  003654                     l2880:
 22582  003654                     l30152:
 22583                           
 22584                           ;octave.c: 438: }
 22585                           ;octave.c: 439: }
 22586                           ;octave.c: 442: if(button_state_now == 0x02000000){
 22587  003654  0E02               	movlw	2
 22588  003656  0100               	movlb	0	; () banked
 22589  003658  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 22590  00365A  11D8               	iorwf	_button_state_now& (0+255),w,b
 22591  00365C  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 22592  00365E  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 22593  003660  A4D8               	btfss	status,2,c
 22594  003662  D03A               	goto	l2885
 22595                           
 22596                           ; BSR set to: 0
 22597                           ;octave.c: 443: if ((octave * 12 + semitone) >= 12) {
 22598  003664  C03B  F07E         	movff	_semitone,??_processOctave
 22599  003668  6B7F               	clrf	(??_processOctave+1)& (0+255),b
 22600  00366A  BF7E               	btfsc	??_processOctave& (0+255),7,b
 22601  00366C  077F               	decf	(??_processOctave+1)& (0+255),f,b
 22602  00366E  5050               	movf	_octave,w,c
 22603  003670  6F60               	movwf	___wmul@multiplier& (0+255),b
 22604  003672  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 22605  003674  BF60               	btfsc	___wmul@multiplier& (0+255),7,b
 22606  003676  0761               	decf	(___wmul@multiplier+1)& (0+255),f,b
 22607  003678  0E00               	movlw	0
 22608  00367A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22609  00367C  0E0C               	movlw	12
 22610  00367E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22611  003680  EC8F  F04B         	call	___wmul	;wreg free
 22612  003684  0100               	movlb	0	; () banked
 22613  003686  517E               	movf	??_processOctave& (0+255),w,b
 22614  003688  2760               	addwf	?___wmul& (0+255),f,b
 22615  00368A  517F               	movf	(??_processOctave+1)& (0+255),w,b
 22616  00368C  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22617  00368E  BF61               	btfsc	(?___wmul+1)& (0+255),7,b
 22618  003690  D023               	goto	l2885
 22619  003692  5161               	movf	(?___wmul+1)& (0+255),w,b
 22620  003694  E104               	bnz	u54290
 22621  003696  0E0C               	movlw	12
 22622  003698  5D60               	subwf	?___wmul& (0+255),w,b
 22623  00369A  A0D8               	btfss	status,0,c
 22624  00369C  D01D               	goto	l2885
 22625  00369E                     u54290:
 22626                           
 22627                           ; BSR set to: 0
 22628                           ;octave.c: 446: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 22629  00369E  A204               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 22630  0036A0  D00E               	goto	l2886
 22631                           
 22632                           ; BSR set to: 0
 22633  0036A2  502F               	movf	_NUM_NOTES_PRESSED,w,c
 22634  0036A4  B4D8               	btfsc	status,2,c
 22635  0036A6  D00B               	goto	l2886
 22636                           
 22637                           ; BSR set to: 0
 22638                           ;octave.c: 449: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 22639  0036A8  0E00               	movlw	0
 22640  0036AA  B003               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 22641  0036AC  0E01               	movlw	1
 22642  0036AE  EC52  F04B         	call	_wait_one_pulse
 22643                           
 22644                           ;octave.c: 453: if(note_off_was_sent == 0) {key_press_release_note_off();}
 22645  0036B2  A202               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 22646  0036B4  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 22647                           
 22648                           ;octave.c: 456: suppress_note_off = 1;
 22649  0036B8  8802               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 22650                           
 22651                           ;octave.c: 458: flag1 = 1;
 22652  0036BA  8002               	bsf	_flag1/(0+8),_flag1& (0+7),c
 22653                           
 22654                           ;octave.c: 460: flag2 = 1;
 22655  0036BC  8E01               	bsf	_flag2/(0+8),_flag2& (0+7),c
 22656  0036BE                     l2886:
 22657                           
 22658                           ;octave.c: 461: }
 22659                           ;octave.c: 463: octave--;
 22660  0036BE  0650               	decf	_octave,f,c
 22661                           
 22662                           ;octave.c: 464: if (octave < 0) {octave = 0;}
 22663  0036C0  AE50               	btfss	_octave,7,c
 22664  0036C2  D002               	goto	l2888
 22665  0036C4  0E00               	movlw	0
 22666  0036C6  6E50               	movwf	_octave,c
 22667  0036C8                     l2888:
 22668                           
 22669                           ;octave.c: 466: printThisNumber(octave);
 22670  0036C8  5050               	movf	_octave,w,c
 22671  0036CA  0100               	movlb	0	; () banked
 22672  0036CC  6F60               	movwf	printThisNumber@n& (0+255),b
 22673  0036CE  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 22674  0036D0  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 22675  0036D2  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 22676  0036D4  EC33  F04C         	call	_printThisNumber	;wreg free
 22677  0036D8                     l2885:
 22678                           
 22679                           ;octave.c: 468: }
 22680                           ;octave.c: 469: }
 22681                           ;octave.c: 475: if(button_state_now == (0x04000000 | 0x08000000)){
 22682  0036D8  0E0C               	movlw	12
 22683  0036DA  0100               	movlb	0	; () banked
 22684  0036DC  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 22685  0036DE  11D8               	iorwf	_button_state_now& (0+255),w,b
 22686  0036E0  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 22687  0036E2  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 22688  0036E4  A4D8               	btfss	status,2,c
 22689  0036E6  D055               	goto	l2890
 22690                           
 22691                           ; BSR set to: 0
 22692                           ;octave.c: 477: if ((octave * 12 + semitone) < 72) {
 22693  0036E8  C03B  F07E         	movff	_semitone,??_processOctave
 22694  0036EC  6B7F               	clrf	(??_processOctave+1)& (0+255),b
 22695  0036EE  BF7E               	btfsc	??_processOctave& (0+255),7,b
 22696  0036F0  077F               	decf	(??_processOctave+1)& (0+255),f,b
 22697  0036F2  5050               	movf	_octave,w,c
 22698  0036F4  6F60               	movwf	___wmul@multiplier& (0+255),b
 22699  0036F6  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 22700  0036F8  BF60               	btfsc	___wmul@multiplier& (0+255),7,b
 22701  0036FA  0761               	decf	(___wmul@multiplier+1)& (0+255),f,b
 22702  0036FC  0E00               	movlw	0
 22703  0036FE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22704  003700  0E0C               	movlw	12
 22705  003702  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22706  003704  EC8F  F04B         	call	___wmul	;wreg free
 22707  003708  0100               	movlb	0	; () banked
 22708  00370A  517E               	movf	??_processOctave& (0+255),w,b
 22709  00370C  2760               	addwf	?___wmul& (0+255),f,b
 22710  00370E  517F               	movf	(??_processOctave+1)& (0+255),w,b
 22711  003710  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22712  003712  BF61               	btfsc	(?___wmul+1)& (0+255),7,b
 22713  003714  D006               	goto	u54350
 22714  003716  5161               	movf	(?___wmul+1)& (0+255),w,b
 22715  003718  E13C               	bnz	l30214
 22716  00371A  0E48               	movlw	72
 22717  00371C  5D60               	subwf	?___wmul& (0+255),w,b
 22718  00371E  B0D8               	btfsc	status,0,c
 22719  003720  D038               	goto	l2890
 22720  003722                     u54350:
 22721                           
 22722                           ; BSR set to: 0
 22723                           ;octave.c: 480: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 22724  003722  A204               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 22725  003724  D00E               	goto	l2891
 22726                           
 22727                           ; BSR set to: 0
 22728  003726  502F               	movf	_NUM_NOTES_PRESSED,w,c
 22729  003728  B4D8               	btfsc	status,2,c
 22730  00372A  D00B               	goto	l2891
 22731                           
 22732                           ; BSR set to: 0
 22733                           ;octave.c: 483: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 22734  00372C  0E00               	movlw	0
 22735  00372E  B003               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 22736  003730  0E01               	movlw	1
 22737  003732  EC52  F04B         	call	_wait_one_pulse
 22738                           
 22739                           ;octave.c: 487: if(note_off_was_sent == 0) {key_press_release_note_off();}
 22740  003736  A202               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 22741  003738  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 22742                           
 22743                           ;octave.c: 490: suppress_note_off = 1;
 22744  00373C  8802               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 22745                           
 22746                           ;octave.c: 492: flag1 = 1;
 22747  00373E  8002               	bsf	_flag1/(0+8),_flag1& (0+7),c
 22748                           
 22749                           ;octave.c: 493: flag2 = 1;
 22750  003740  8E01               	bsf	_flag2/(0+8),_flag2& (0+7),c
 22751  003742                     l2891:
 22752                           
 22753                           ;octave.c: 494: }
 22754                           ;octave.c: 496: if (TRANSPOSE_MODE == 0) {
 22755  003742  BC04               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 22756  003744  D008               	goto	l2894
 22757                           
 22758                           ;octave.c: 497: semitone++;
 22759  003746  2A3B               	incf	_semitone,f,c
 22760                           
 22761                           ;octave.c: 498: if (semitone > 12) {semitone = 12;}
 22762  003748  503B               	movf	_semitone,w,c
 22763  00374A  0A80               	xorlw	128
 22764  00374C  0F73               	addlw	-141
 22765  00374E  A0D8               	btfss	status,0,c
 22766  003750  D002               	goto	l2894
 22767  003752  0E0C               	movlw	12
 22768  003754  6E3B               	movwf	_semitone,c
 22769  003756                     l2894:
 22770                           
 22771                           ;octave.c: 499: }
 22772                           ;octave.c: 501: if (TRANSPOSE_MODE == 1) {
 22773  003756  AC04               	btfss	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 22774  003758  D014               	goto	l2895
 22775                           
 22776                           ;octave.c: 502: semitone = (semitone +=7) % 12;
 22777  00375A  0E0C               	movlw	12
 22778  00375C  6EE6               	movwf	postinc1,c
 22779  00375E  0E00               	movlw	0
 22780  003760  6EE6               	movwf	postinc1,c
 22781  003762  0E07               	movlw	7
 22782  003764  263B               	addwf	_semitone,f,c
 22783  003766  C03B  F07E         	movff	_semitone,??_processOctave
 22784  00376A  0100               	movlb	0	; () banked
 22785  00376C  6B7F               	clrf	(??_processOctave+1)& (0+255),b
 22786  00376E  BF7E               	btfsc	??_processOctave& (0+255),7,b
 22787  003770  077F               	decf	(??_processOctave+1)& (0+255),f,b
 22788  003772  C07E  FFE6         	movff	??_processOctave,postinc1
 22789  003776  C07F  FFE6         	movff	??_processOctave+1,postinc1
 22790  00377A  ECD7  F033         	call	___awmod	;wreg free
 22791  00377E  503F               	movf	btemp,w,c
 22792  003780  6E3B               	movwf	_semitone,c
 22793  003782                     l2895:
 22794                           
 22795                           ;octave.c: 503: }
 22796                           ;octave.c: 505: printThisNumber(semitone);
 22797  003782  503B               	movf	_semitone,w,c
 22798  003784  0100               	movlb	0	; () banked
 22799  003786  6F60               	movwf	printThisNumber@n& (0+255),b
 22800  003788  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 22801  00378A  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 22802  00378C  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 22803  00378E  EC33  F04C         	call	_printThisNumber	;wreg free
 22804  003792                     l2890:
 22805  003792                     l30214:
 22806                           
 22807                           ;octave.c: 506: }
 22808                           ;octave.c: 507: }
 22809                           ;octave.c: 510: if(button_state_now == (0x02000000 | 0x08000000)){
 22810  003792  0E0A               	movlw	10
 22811  003794  0100               	movlb	0	; () banked
 22812  003796  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 22813  003798  11D8               	iorwf	_button_state_now& (0+255),w,b
 22814  00379A  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 22815  00379C  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 22816  00379E  A4D8               	btfss	status,2,c
 22817  0037A0  0012               	return	
 22818                           
 22819                           ; BSR set to: 0
 22820                           ;octave.c: 512: if ((octave * 12 + semitone) > 0 ) {
 22821  0037A2  C03B  F07E         	movff	_semitone,??_processOctave
 22822  0037A6  6B7F               	clrf	(??_processOctave+1)& (0+255),b
 22823  0037A8  BF7E               	btfsc	??_processOctave& (0+255),7,b
 22824  0037AA  077F               	decf	(??_processOctave+1)& (0+255),f,b
 22825  0037AC  5050               	movf	_octave,w,c
 22826  0037AE  6F60               	movwf	___wmul@multiplier& (0+255),b
 22827  0037B0  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 22828  0037B2  BF60               	btfsc	___wmul@multiplier& (0+255),7,b
 22829  0037B4  0761               	decf	(___wmul@multiplier+1)& (0+255),f,b
 22830  0037B6  0E00               	movlw	0
 22831  0037B8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22832  0037BA  0E0C               	movlw	12
 22833  0037BC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22834  0037BE  EC8F  F04B         	call	___wmul	;wreg free
 22835  0037C2  0100               	movlb	0	; () banked
 22836  0037C4  517E               	movf	??_processOctave& (0+255),w,b
 22837  0037C6  2760               	addwf	?___wmul& (0+255),f,b
 22838  0037C8  517F               	movf	(??_processOctave+1)& (0+255),w,b
 22839  0037CA  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22840  0037CC  BF61               	btfsc	(?___wmul+1)& (0+255),7,b
 22841  0037CE  0012               	return	
 22842  0037D0  5161               	movf	(?___wmul+1)& (0+255),w,b
 22843  0037D2  E103               	bnz	u54430
 22844  0037D4  0560               	decf	?___wmul& (0+255),w,b
 22845  0037D6  A0D8               	btfss	status,0,c
 22846  0037D8  0012               	return	
 22847  0037DA                     u54430:
 22848                           
 22849                           ; BSR set to: 0
 22850                           ;octave.c: 516: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 22851  0037DA  A204               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 22852  0037DC  D00E               	goto	l2898
 22853                           
 22854                           ; BSR set to: 0
 22855  0037DE  502F               	movf	_NUM_NOTES_PRESSED,w,c
 22856  0037E0  B4D8               	btfsc	status,2,c
 22857  0037E2  D00B               	goto	l2898
 22858                           
 22859                           ; BSR set to: 0
 22860                           ;octave.c: 519: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 22861  0037E4  0E00               	movlw	0
 22862  0037E6  B003               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 22863  0037E8  0E01               	movlw	1
 22864  0037EA  EC52  F04B         	call	_wait_one_pulse
 22865                           
 22866                           ;octave.c: 523: if(note_off_was_sent == 0) {key_press_release_note_off();}
 22867  0037EE  A202               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 22868  0037F0  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 22869                           
 22870                           ;octave.c: 526: suppress_note_off = 1;
 22871  0037F4  8802               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 22872                           
 22873                           ;octave.c: 528: flag1 = 1;
 22874  0037F6  8002               	bsf	_flag1/(0+8),_flag1& (0+7),c
 22875                           
 22876                           ;octave.c: 529: flag2 = 1;
 22877  0037F8  8E01               	bsf	_flag2/(0+8),_flag2& (0+7),c
 22878  0037FA                     l2898:
 22879                           
 22880                           ;octave.c: 530: }
 22881                           ;octave.c: 532: if (TRANSPOSE_MODE == 0) {
 22882  0037FA  BC04               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 22883  0037FC  D008               	goto	l2901
 22884                           
 22885                           ;octave.c: 533: semitone--;
 22886  0037FE  063B               	decf	_semitone,f,c
 22887                           
 22888                           ;octave.c: 534: if (semitone < -12) {semitone = -12;}
 22889  003800  503B               	movf	_semitone,w,c
 22890  003802  0A80               	xorlw	128
 22891  003804  0F8C               	addlw	140
 22892  003806  B0D8               	btfsc	status,0,c
 22893  003808  D002               	goto	l2901
 22894  00380A  0EF4               	movlw	244
 22895  00380C  6E3B               	movwf	_semitone,c
 22896  00380E                     l2901:
 22897                           
 22898                           ;octave.c: 535: }
 22899                           ;octave.c: 537: if (TRANSPOSE_MODE == 1) {
 22900  00380E  AC04               	btfss	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 22901  003810  D014               	goto	l2902
 22902                           
 22903                           ;octave.c: 538: semitone = (semitone -=7) % 12;
 22904  003812  0E0C               	movlw	12
 22905  003814  6EE6               	movwf	postinc1,c
 22906  003816  0E00               	movlw	0
 22907  003818  6EE6               	movwf	postinc1,c
 22908  00381A  0EF9               	movlw	249
 22909  00381C  263B               	addwf	_semitone,f,c
 22910  00381E  C03B  F07E         	movff	_semitone,??_processOctave
 22911  003822  0100               	movlb	0	; () banked
 22912  003824  6B7F               	clrf	(??_processOctave+1)& (0+255),b
 22913  003826  BF7E               	btfsc	??_processOctave& (0+255),7,b
 22914  003828  077F               	decf	(??_processOctave+1)& (0+255),f,b
 22915  00382A  C07E  FFE6         	movff	??_processOctave,postinc1
 22916  00382E  C07F  FFE6         	movff	??_processOctave+1,postinc1
 22917  003832  ECD7  F033         	call	___awmod	;wreg free
 22918  003836  503F               	movf	btemp,w,c
 22919  003838  6E3B               	movwf	_semitone,c
 22920  00383A                     l2902:
 22921                           
 22922                           ;octave.c: 539: }
 22923                           ;octave.c: 541: printThisNumber(semitone);
 22924  00383A  503B               	movf	_semitone,w,c
 22925  00383C  0100               	movlb	0	; () banked
 22926  00383E  6F60               	movwf	printThisNumber@n& (0+255),b
 22927  003840  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 22928  003842  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 22929  003844  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 22930  003846  EC33  F04C         	call	_printThisNumber	;wreg free
 22931  00384A  0012               	return	
 22932  00384C                     __end_of_processOctave:
 22933                           	opt stack 0
 22934                           tblptru	equ	0xFF8
 22935                           tblptrh	equ	0xFF7
 22936                           tblptrl	equ	0xFF6
 22937                           tablat	equ	0xFF5
 22938                           prodh	equ	0xFF4
 22939                           prodl	equ	0xFF3
 22940                           intcon	equ	0xFF2
 22941                           intcon2	equ	0xFF1
 22942                           postinc0	equ	0xFEE
 22943                           wreg	equ	0xFE8
 22944                           postinc1	equ	0xFE6
 22945                           plusw1	equ	0xFE3
 22946                           fsr1h	equ	0xFE2
 22947                           fsr1l	equ	0xFE1
 22948                           indf2	equ	0xFDF
 22949                           postinc2	equ	0xFDE
 22950                           postdec2	equ	0xFDD
 22951                           plusw2	equ	0xFDB
 22952                           fsr2h	equ	0xFDA
 22953                           fsr2l	equ	0xFD9
 22954                           status	equ	0xFD8
 22955                           
 22956 ;; *************** function _doTheUnLatch *****************
 22957 ;; Defined at:
 22958 ;;		line 195 in file "octave.c"
 22959 ;; Parameters:    Size  Location     Type
 22960 ;;		None
 22961 ;; Auto vars:     Size  Location     Type
 22962 ;;		None
 22963 ;; Return value:  Size  Location     Type
 22964 ;;                  1    wreg      void 
 22965 ;; Registers used:
 22966 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22967 ;; Tracked objects:
 22968 ;;		On entry : 0/0
 22969 ;;		On exit  : 0/0
 22970 ;;		Unchanged: 0/0
 22971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22974 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22975 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22976 ;;Total ram usage:        4 bytes
 22977 ;; Hardware stack levels used:    1
 22978 ;; Hardware stack levels required when called:   12
 22979 ;; This function calls:
 22980 ;;		_playThisNote
 22981 ;;		_playThisNote8
 22982 ;;		_playThisNotePentatonic
 22983 ;;		_strcpy
 22984 ;; This function is called by:
 22985 ;;		_processOctave
 22986 ;;		_Function_H_1
 22987 ;;		_Function_H_6_1
 22988 ;; This function uses a non-reentrant model
 22989 ;;
 22990                           
 22991                           	psect	text66
 22992  0050A6                     __ptext66:
 22993                           	opt stack 0
 22994  0050A6                     _doTheUnLatch:
 22995                           	opt stack 13
 22996                           
 22997                           ;octave.c: 197: LATCH = 0;
 22998                           
 22999                           ;incstack = 0
 23000  0050A6  9204               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
 23001                           
 23002                           ;octave.c: 198: ON_OFF = 0;
 23003  0050A8  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23004                           
 23005                           ;octave.c: 202: if(NUM_NOTES_PRESSED > 0) {
 23006  0050AA  502F               	movf	_NUM_NOTES_PRESSED,w,c
 23007  0050AC  B4D8               	btfsc	status,2,c
 23008  0050AE  D07F               	goto	l2840
 23009                           
 23010                           ;octave.c: 204: static __bit once;
 23011                           ;octave.c: 206: parallel = 25;
 23012  0050B0  0E19               	movlw	25
 23013  0050B2  6E30               	movwf	_parallel,c
 23014                           
 23015                           ;octave.c: 209: if ((KEYBOARD_MODE == CHROMATIC) || KEYBOARD_MODE == TRIAD || KEYBOARD_M
      +                          ODE == SEVENTH){
 23016  0050B4  0100               	movlb	0	; () banked
 23017  0050B6  51F2               	movf	_KEYBOARD_MODE& (0+255),w,b
 23018  0050B8  B4D8               	btfsc	status,2,c
 23019  0050BA  D008               	goto	u50970
 23020                           
 23021                           ; BSR set to: 0
 23022  0050BC  0E06               	movlw	6
 23023  0050BE  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23024  0050C0  B4D8               	btfsc	status,2,c
 23025  0050C2  D004               	goto	u50970
 23026                           
 23027                           ; BSR set to: 0
 23028  0050C4  0E09               	movlw	9
 23029  0050C6  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23030  0050C8  A4D8               	btfss	status,2,c
 23031  0050CA  D03D               	goto	l2852
 23032  0050CC                     u50970:
 23033                           
 23034                           ; BSR set to: 0
 23035                           ;octave.c: 211: if((ARPEGGIO_TYPE == AS_PRESSED) || (ARPEGGIO_TYPE == RANDOM) || (ARPEGG
      +                          IO_TYPE == RANDOM_NON_REPEATING) && (once == 0)){
 23036                           
 23037                           ; BSR set to: 0
 23038  0050CC  0E06               	movlw	6
 23039  0050CE  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 23040  0050D0  B4D8               	btfsc	status,2,c
 23041  0050D2  D009               	goto	u51010
 23042                           
 23043                           ; BSR set to: 0
 23044  0050D4  0E05               	movlw	5
 23045  0050D6  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 23046  0050D8  B4D8               	btfsc	status,2,c
 23047  0050DA  D005               	goto	u51010
 23048                           
 23049                           ; BSR set to: 0
 23050  0050DC  0E04               	movlw	4
 23051  0050DE  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 23052  0050E0  B4D8               	btfsc	status,2,c
 23053                           
 23054                           ; BSR set to: 0
 23055  0050E2  B401               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23056  0050E4  D005               	goto	l2846
 23057  0050E6                     u51010:
 23058                           
 23059                           ; BSR set to: 0
 23060                           ;octave.c: 212: playThisNote(ARPEGGIO[0]);
 23061                           
 23062                           ; BSR set to: 0
 23063  0050E6  0101               	movlb	1	; () banked
 23064  0050E8  5182               	movf	_ARPEGGIO& (0+255),w,b
 23065  0050EA  EC55  F033         	call	_playThisNote
 23066                           
 23067                           ;octave.c: 213: once = 1;
 23068  0050EE  8401               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23069  0050F0                     l2846:
 23070                           
 23071                           ;octave.c: 214: }
 23072                           ;octave.c: 215: if((ARPEGGIO_TYPE == UP) || (ARPEGGIO_TYPE == UP_DOWN) && (once == 0)){
 23073  0050F0  5035               	movf	_ARPEGGIO_TYPE,w,c
 23074  0050F2  B4D8               	btfsc	status,2,c
 23075  0050F4  D005               	goto	u51040
 23076  0050F6  0E02               	movlw	2
 23077  0050F8  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 23078  0050FA  B4D8               	btfsc	status,2,c
 23079  0050FC  B401               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23080  0050FE  D005               	goto	l2849
 23081  005100                     u51040:
 23082                           
 23083                           ;octave.c: 216: playThisNote(ARPEGGIO_SORTED[0]);
 23084  005100  0102               	movlb	2	; () banked
 23085  005102  5178               	movf	_ARPEGGIO_SORTED& (0+255),w,b
 23086  005104  EC55  F033         	call	_playThisNote
 23087                           
 23088                           ;octave.c: 217: once = 1;
 23089  005108  8401               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23090  00510A                     l2849:
 23091                           
 23092                           ;octave.c: 218: }
 23093                           ;octave.c: 219: if((ARPEGGIO_TYPE == DOWN) || (ARPEGGIO_TYPE == DOWN_UP) && (once == 0))
      +                          {
 23094  00510A  0435               	decf	_ARPEGGIO_TYPE,w,c
 23095  00510C  B4D8               	btfsc	status,2,c
 23096  00510E  D005               	goto	u51070
 23097  005110  0E03               	movlw	3
 23098  005112  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 23099  005114  B4D8               	btfsc	status,2,c
 23100  005116  B401               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23101  005118  D016               	goto	l2852
 23102  00511A                     u51070:
 23103                           
 23104                           ;octave.c: 220: playThisNote(ARPEGGIO_SORTED[NUM_NOTES_PRESSED - 1]);
 23105  00511A  0EFF               	movlw	255
 23106  00511C  0100               	movlb	0	; () banked
 23107  00511E  6F7A               	movwf	??_doTheUnLatch& (0+255),b
 23108  005120  0EFF               	movlw	255
 23109  005122  6F7B               	movwf	(??_doTheUnLatch+1)& (0+255),b
 23110  005124  502F               	movf	_NUM_NOTES_PRESSED,w,c
 23111  005126  6F7C               	movwf	(??_doTheUnLatch+2)& (0+255),b
 23112  005128  6B7D               	clrf	(??_doTheUnLatch+3)& (0+255),b
 23113  00512A  517A               	movf	??_doTheUnLatch& (0+255),w,b
 23114  00512C  277C               	addwf	(??_doTheUnLatch+2)& (0+255),f,b
 23115  00512E  517B               	movf	(??_doTheUnLatch+1)& (0+255),w,b
 23116  005130  237D               	addwfc	(??_doTheUnLatch+3)& (0+255),f,b
 23117  005132  0E78               	movlw	low _ARPEGGIO_SORTED
 23118  005134  257C               	addwf	(??_doTheUnLatch+2)& (0+255),w,b
 23119  005136  6ED9               	movwf	fsr2l,c
 23120  005138  0E02               	movlw	high _ARPEGGIO_SORTED
 23121  00513A  217D               	addwfc	(??_doTheUnLatch+3)& (0+255),w,b
 23122  00513C  6EDA               	movwf	fsr2h,c
 23123  00513E  50DF               	movf	indf2,w,c
 23124  005140  EC55  F033         	call	_playThisNote
 23125                           
 23126                           ;octave.c: 221: once = 1;
 23127  005144  8401               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23128  005146                     l2852:
 23129                           
 23130                           ;octave.c: 222: }
 23131                           ;octave.c: 223: }
 23132                           ;octave.c: 225: if ((KEYBOARD_MODE == MAJOR) || (KEYBOARD_MODE == MINOR) || (KEYBOARD_MO
      +                          DE == MODES) || (KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) || (KEYBOARD_MODE == DIATONIC_TR
      +                          IAD_MINOR)|| (KEYBOARD_MODE == DIATONIC_7TH_MAJOR) || (KEYBOARD_MODE == DIATONIC_7TH_MIN
      +                          OR
 23133  005146  0100               	movlb	0	; () banked
 23134  005148  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 23135  00514A  B4D8               	btfsc	status,2,c
 23136  00514C  D019               	goto	u51150
 23137                           
 23138                           ; BSR set to: 0
 23139  00514E  0E02               	movlw	2
 23140  005150  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23141  005152  B4D8               	btfsc	status,2,c
 23142  005154  D015               	goto	u51150
 23143                           
 23144                           ; BSR set to: 0
 23145  005156  0E03               	movlw	3
 23146  005158  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23147  00515A  B4D8               	btfsc	status,2,c
 23148  00515C  D011               	goto	u51150
 23149                           
 23150                           ; BSR set to: 0
 23151  00515E  0E07               	movlw	7
 23152  005160  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23153  005162  B4D8               	btfsc	status,2,c
 23154  005164  D00D               	goto	u51150
 23155                           
 23156                           ; BSR set to: 0
 23157  005166  0E08               	movlw	8
 23158  005168  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23159  00516A  B4D8               	btfsc	status,2,c
 23160  00516C  D009               	goto	u51150
 23161                           
 23162                           ; BSR set to: 0
 23163  00516E  0E0A               	movlw	10
 23164  005170  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23165  005172  B4D8               	btfsc	status,2,c
 23166  005174  D005               	goto	u51150
 23167                           
 23168                           ; BSR set to: 0
 23169  005176  0E0B               	movlw	11
 23170  005178  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23171  00517A  B4D8               	btfsc	status,2,c
 23172                           
 23173                           ; BSR set to: 0
 23174  00517C  B401               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23175  00517E  D006               	goto	l2855
 23176  005180                     u51150:
 23177                           
 23178                           ; BSR set to: 0
 23179                           ;octave.c: 226: playThisNote8(0,0);
 23180                           
 23181                           ; BSR set to: 0
 23182  005180  0E00               	movlw	0
 23183  005182  6F71               	movwf	playThisNote8@index& (0+255),b
 23184  005184  0E00               	movlw	0
 23185  005186  EC3C  F013         	call	_playThisNote8
 23186                           
 23187                           ;octave.c: 227: once = 1;
 23188  00518A  8401               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23189  00518C                     l2855:
 23190                           
 23191                           ;octave.c: 228: }
 23192                           ;octave.c: 230: if ((KEYBOARD_MODE == PENTATONIC_MAJOR) || (KEYBOARD_MODE == PENTATONIC_
      +                          MINOR) && (once == 0)){
 23193  00518C  0E04               	movlw	4
 23194  00518E  0100               	movlb	0	; () banked
 23195  005190  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23196  005192  B4D8               	btfsc	status,2,c
 23197  005194  D005               	goto	u51180
 23198                           
 23199                           ; BSR set to: 0
 23200  005196  0E05               	movlw	5
 23201  005198  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23202  00519A  B4D8               	btfsc	status,2,c
 23203                           
 23204                           ; BSR set to: 0
 23205  00519C  B401               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23206  00519E  D006               	goto	l2858
 23207  0051A0                     u51180:
 23208                           
 23209                           ; BSR set to: 0
 23210                           ;octave.c: 231: playThisNotePentatonic(0,0);
 23211                           
 23212                           ; BSR set to: 0
 23213  0051A0  0E00               	movlw	0
 23214  0051A2  6F71               	movwf	playThisNotePentatonic@index& (0+255),b
 23215  0051A4  0E00               	movlw	0
 23216  0051A6  EC07  F02A         	call	_playThisNotePentatonic
 23217                           
 23218                           ;octave.c: 232: once = 1;
 23219  0051AA  8401               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23220  0051AC                     l2858:
 23221                           
 23222                           ;octave.c: 233: }
 23223                           ;octave.c: 235: once = 0;
 23224  0051AC  9401               	bcf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23225  0051AE                     l2840:
 23226                           
 23227                           ;octave.c: 236: }
 23228                           ;octave.c: 239: if((UN_LATCH_MODE == 1) && (latch_was_pressed == 1) && (NUM_NOTES_PRESSE
      +                          D > 1)){
 23229  0051AE  B004               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23230  0051B0  AC03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 23231  0051B2  D010               	goto	l2861
 23232  0051B4  0E01               	movlw	1
 23233  0051B6  642F               	cpfsgt	_NUM_NOTES_PRESSED,c
 23234  0051B8  D00D               	goto	l2861
 23235                           
 23236                           ;octave.c: 240: DISPLAY_MODE = 1;
 23237  0051BA  0E01               	movlw	1
 23238  0051BC  0100               	movlb	0	; () banked
 23239  0051BE  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 23240                           
 23241                           ; BSR set to: 0
 23242                           ;octave.c: 241: strcpy(string_to_display, " dEL");
 23243  0051C0  0EF8               	movlw	low _string_to_display
 23244  0051C2  6F60               	movwf	strcpy@to& (0+255),b
 23245  0051C4  0E01               	movlw	high _string_to_display
 23246  0051C6  6F61               	movwf	(strcpy@to+1)& (0+255),b
 23247  0051C8  0EE1               	movlw	low STR_2
 23248  0051CA  6F62               	movwf	strcpy@from& (0+255),b
 23249  0051CC  0EFF               	movlw	high STR_2
 23250  0051CE  6F63               	movwf	(strcpy@from+1)& (0+255),b
 23251  0051D0  ECF3  F04A         	call	_strcpy	;wreg free
 23252  0051D4                     l2861:
 23253                           
 23254                           ;octave.c: 242: }
 23255                           ;octave.c: 246: if((UN_LATCH_MODE == 1) && (NUM_NOTES_PRESSED == 1)){
 23256  0051D4  A004               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23257  0051D6  D010               	goto	l2862
 23258  0051D8  042F               	decf	_NUM_NOTES_PRESSED,w,c
 23259  0051DA  A4D8               	btfss	status,2,c
 23260  0051DC  D00D               	goto	l2862
 23261                           
 23262                           ;octave.c: 247: DISPLAY_MODE = 1;
 23263  0051DE  0E01               	movlw	1
 23264  0051E0  0100               	movlb	0	; () banked
 23265  0051E2  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 23266                           
 23267                           ; BSR set to: 0
 23268                           ;octave.c: 248: strcpy(string_to_display, "LaSt");
 23269  0051E4  0EF8               	movlw	low _string_to_display
 23270  0051E6  6F60               	movwf	strcpy@to& (0+255),b
 23271  0051E8  0E01               	movlw	high _string_to_display
 23272  0051EA  6F61               	movwf	(strcpy@to+1)& (0+255),b
 23273  0051EC  0EFA               	movlw	low STR_3
 23274  0051EE  6F62               	movwf	strcpy@from& (0+255),b
 23275  0051F0  0EFF               	movlw	high STR_3
 23276  0051F2  6F63               	movwf	(strcpy@from+1)& (0+255),b
 23277  0051F4  ECF3  F04A         	call	_strcpy	;wreg free
 23278  0051F8                     l2862:
 23279                           
 23280                           ;octave.c: 249: }
 23281                           ;octave.c: 253: if((AUTO_LATCH == 1) && (latch_was_pressed == 1) && ((UN_LATCH_MODE == 0
      +                          ) || (UN_LATCH_MODE == 1)) && (NUM_NOTES_PRESSED == 0)){
 23282  0051F8  BE03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 23283  0051FA  AC03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 23284  0051FC  D018               	goto	l2863
 23285  0051FE  A004               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23286  005200  D002               	goto	u51270
 23287  005202  A004               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23288  005204  D014               	goto	l2863
 23289  005206                     u51270:
 23290  005206  502F               	movf	_NUM_NOTES_PRESSED,w,c
 23291  005208  A4D8               	btfss	status,2,c
 23292  00520A  D011               	goto	l2863
 23293                           
 23294                           ;octave.c: 254: NUM_NOTES_PRESSED = 0;
 23295  00520C  0E00               	movlw	0
 23296  00520E  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 23297                           
 23298                           ;octave.c: 255: ARRAY_INDEX = 0;
 23299  005210  0E00               	movlw	0
 23300  005212  0100               	movlb	0	; () banked
 23301  005214  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 23302                           
 23303                           ;octave.c: 257: DISPLAY_MODE = 1;
 23304  005216  0E01               	movlw	1
 23305  005218  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 23306                           
 23307                           ; BSR set to: 0
 23308                           ;octave.c: 258: strcpy(string_to_display, "Auto");
 23309  00521A  0EF8               	movlw	low _string_to_display
 23310  00521C  6F60               	movwf	strcpy@to& (0+255),b
 23311  00521E  0E01               	movlw	high _string_to_display
 23312  005220  6F61               	movwf	(strcpy@to+1)& (0+255),b
 23313  005222  0EF0               	movlw	low STR_4
 23314  005224  6F62               	movwf	strcpy@from& (0+255),b
 23315  005226  0EFF               	movlw	high STR_4
 23316  005228  6F63               	movwf	(strcpy@from+1)& (0+255),b
 23317  00522A  ECF3  F04A         	call	_strcpy	;wreg free
 23318  00522E                     l2863:
 23319                           
 23320                           ;octave.c: 259: }
 23321                           ;octave.c: 266: if((LATCH == 0) && ((UN_LATCH_MODE == 0) || (UN_LATCH_MODE == 1)) && (NU
      +                          M_NOTES_PRESSED == 0)){
 23322  00522E  B204               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 23323  005230  0012               	return	
 23324  005232  A004               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23325  005234  D002               	goto	u51310
 23326  005236  A004               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23327  005238  0012               	return	
 23328  00523A                     u51310:
 23329  00523A  502F               	movf	_NUM_NOTES_PRESSED,w,c
 23330  00523C  A4D8               	btfss	status,2,c
 23331  00523E  0012               	return	
 23332                           
 23333                           ;octave.c: 267: NUM_NOTES_PRESSED = 0;
 23334  005240  0E00               	movlw	0
 23335  005242  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 23336                           
 23337                           ;octave.c: 268: ARRAY_INDEX = 0;
 23338  005244  0E00               	movlw	0
 23339  005246  0100               	movlb	0	; () banked
 23340  005248  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 23341                           
 23342                           ;octave.c: 269: DISPLAY_MODE = 1;
 23343  00524A  0E01               	movlw	1
 23344  00524C  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 23345                           
 23346                           ; BSR set to: 0
 23347                           ;octave.c: 270: strcpy(string_to_display, " oFF");
 23348  00524E  0EF8               	movlw	low _string_to_display
 23349  005250  6F60               	movwf	strcpy@to& (0+255),b
 23350  005252  0E01               	movlw	high _string_to_display
 23351  005254  6F61               	movwf	(strcpy@to+1)& (0+255),b
 23352  005256  0EDC               	movlw	low STR_5
 23353  005258  6F62               	movwf	strcpy@from& (0+255),b
 23354  00525A  0EFF               	movlw	high STR_5
 23355  00525C  6F63               	movwf	(strcpy@from+1)& (0+255),b
 23356  00525E  ECF3  F04A         	call	_strcpy	;wreg free
 23357  005262  0012               	return	
 23358  005264                     __end_of_doTheUnLatch:
 23359                           	opt stack 0
 23360                           tblptru	equ	0xFF8
 23361                           tblptrh	equ	0xFF7
 23362                           tblptrl	equ	0xFF6
 23363                           tablat	equ	0xFF5
 23364                           prodh	equ	0xFF4
 23365                           prodl	equ	0xFF3
 23366                           intcon	equ	0xFF2
 23367                           intcon2	equ	0xFF1
 23368                           postinc0	equ	0xFEE
 23369                           wreg	equ	0xFE8
 23370                           postinc1	equ	0xFE6
 23371                           plusw1	equ	0xFE3
 23372                           fsr1h	equ	0xFE2
 23373                           fsr1l	equ	0xFE1
 23374                           indf2	equ	0xFDF
 23375                           postinc2	equ	0xFDE
 23376                           postdec2	equ	0xFDD
 23377                           plusw2	equ	0xFDB
 23378                           fsr2h	equ	0xFDA
 23379                           fsr2l	equ	0xFD9
 23380                           status	equ	0xFD8
 23381                           
 23382 ;; *************** function _doTheLatch *****************
 23383 ;; Defined at:
 23384 ;;		line 188 in file "octave.c"
 23385 ;; Parameters:    Size  Location     Type
 23386 ;;		None
 23387 ;; Auto vars:     Size  Location     Type
 23388 ;;		None
 23389 ;; Return value:  Size  Location     Type
 23390 ;;                  1    wreg      void 
 23391 ;; Registers used:
 23392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23393 ;; Tracked objects:
 23394 ;;		On entry : 0/0
 23395 ;;		On exit  : 0/0
 23396 ;;		Unchanged: 0/0
 23397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23402 ;;Total ram usage:        0 bytes
 23403 ;; Hardware stack levels used:    1
 23404 ;; Hardware stack levels required when called:    6
 23405 ;; This function calls:
 23406 ;;		_strcpy
 23407 ;; This function is called by:
 23408 ;;		_processOctave
 23409 ;;		_Function_H_6_1
 23410 ;; This function uses a non-reentrant model
 23411 ;;
 23412                           
 23413                           	psect	text67
 23414  0097AE                     __ptext67:
 23415                           	opt stack 0
 23416  0097AE                     _doTheLatch:
 23417                           	opt stack 19
 23418                           
 23419                           ;octave.c: 189: LATCH = 1;
 23420                           
 23421                           ;incstack = 0
 23422  0097AE  8204               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 23423                           
 23424                           ;octave.c: 190: latch_was_pressed = 1;
 23425  0097B0  8C03               	bsf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 23426                           
 23427                           ;octave.c: 191: DISPLAY_MODE = 1;
 23428  0097B2  0E01               	movlw	1
 23429  0097B4  0100               	movlb	0	; () banked
 23430  0097B6  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 23431                           
 23432                           ; BSR set to: 0
 23433                           ;octave.c: 192: strcpy(string_to_display, "HoLd");
 23434  0097B8  0EF8               	movlw	low _string_to_display
 23435  0097BA  6F60               	movwf	strcpy@to& (0+255),b
 23436  0097BC  0E01               	movlw	high _string_to_display
 23437  0097BE  6F61               	movwf	(strcpy@to+1)& (0+255),b
 23438  0097C0  0EE6               	movlw	low STR_1
 23439  0097C2  6F62               	movwf	strcpy@from& (0+255),b
 23440  0097C4  0EFF               	movlw	high STR_1
 23441  0097C6  6F63               	movwf	(strcpy@from+1)& (0+255),b
 23442  0097C8  ECF3  F04A         	call	_strcpy	;wreg free
 23443  0097CC  0012               	return		;funcret
 23444  0097CE                     __end_of_doTheLatch:
 23445                           	opt stack 0
 23446                           tblptru	equ	0xFF8
 23447                           tblptrh	equ	0xFF7
 23448                           tblptrl	equ	0xFF6
 23449                           tablat	equ	0xFF5
 23450                           prodh	equ	0xFF4
 23451                           prodl	equ	0xFF3
 23452                           intcon	equ	0xFF2
 23453                           intcon2	equ	0xFF1
 23454                           postinc0	equ	0xFEE
 23455                           wreg	equ	0xFE8
 23456                           postinc1	equ	0xFE6
 23457                           plusw1	equ	0xFE3
 23458                           fsr1h	equ	0xFE2
 23459                           fsr1l	equ	0xFE1
 23460                           indf2	equ	0xFDF
 23461                           postinc2	equ	0xFDE
 23462                           postdec2	equ	0xFDD
 23463                           plusw2	equ	0xFDB
 23464                           fsr2h	equ	0xFDA
 23465                           fsr2l	equ	0xFD9
 23466                           status	equ	0xFD8
 23467                           
 23468 ;; *************** function _processKeyboard *****************
 23469 ;; Defined at:
 23470 ;;		line 23 in file "keyboard.c"
 23471 ;; Parameters:    Size  Location     Type
 23472 ;;		None
 23473 ;; Auto vars:     Size  Location     Type
 23474 ;;		None
 23475 ;; Return value:  Size  Location     Type
 23476 ;;                  1    wreg      void 
 23477 ;; Registers used:
 23478 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23479 ;; Tracked objects:
 23480 ;;		On entry : 0/0
 23481 ;;		On exit  : 0/0
 23482 ;;		Unchanged: 0/0
 23483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23488 ;;Total ram usage:        0 bytes
 23489 ;; Hardware stack levels used:    1
 23490 ;; Hardware stack levels required when called:   13
 23491 ;; This function calls:
 23492 ;;		_keyboard_all_note_efficient
 23493 ;;		_keyboard_eight_note_efficient
 23494 ;;		_keyboard_sharps_only_efficient
 23495 ;; This function is called by:
 23496 ;;		_digitalInputs
 23497 ;; This function uses a non-reentrant model
 23498 ;;
 23499                           
 23500                           	psect	text68
 23501  008C1C                     __ptext68:
 23502                           	opt stack 0
 23503  008C1C                     _processKeyboard:
 23504                           	opt stack 13
 23505                           
 23506                           ;keyboard.c: 25: if ((KEYBOARD_MODE == CHROMATIC) || KEYBOARD_MODE == TRIAD || KEYBOARD_
      +                          MODE == SEVENTH) {keyboard_all_note_efficient();}
 23507                           
 23508                           ;incstack = 0
 23509  008C1C  0100               	movlb	0	; () banked
 23510  008C1E  51F2               	movf	_KEYBOARD_MODE& (0+255),w,b
 23511  008C20  B4D8               	btfsc	status,2,c
 23512  008C22  D007               	goto	u52260
 23513                           
 23514                           ; BSR set to: 0
 23515  008C24  0E06               	movlw	6
 23516  008C26  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23517  008C28  B4D8               	btfsc	status,2,c
 23518  008C2A  D003               	goto	u52260
 23519                           
 23520                           ; BSR set to: 0
 23521  008C2C  0E09               	movlw	9
 23522  008C2E  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23523  008C30  B4D8               	btfsc	status,2,c
 23524  008C32                     u52260:
 23525                           
 23526                           ; BSR set to: 0
 23527                           
 23528                           ; BSR set to: 0
 23529  008C32  ECB1  F00B         	call	_keyboard_all_note_efficient	;wreg free
 23530                           
 23531                           ;keyboard.c: 27: if ((KEYBOARD_MODE == MAJOR) || (KEYBOARD_MODE == MINOR) || (KEYBOARD_M
      +                          ODE == MODES) || (KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) || (KEYBOARD_MODE == DIATONIC_T
      +                          RIAD_MINOR)|| (KEYBOARD_MODE == DIATONIC_7TH_MAJOR) || (KEYBOARD_MODE == DIATONIC_7TH_MI
      +                          NOR
 23532  008C36  0100               	movlb	0	; () banked
 23533  008C38  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 23534  008C3A  B4D8               	btfsc	status,2,c
 23535  008C3C  D017               	goto	u52330
 23536                           
 23537                           ; BSR set to: 0
 23538  008C3E  0E02               	movlw	2
 23539  008C40  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23540  008C42  B4D8               	btfsc	status,2,c
 23541  008C44  D013               	goto	u52330
 23542                           
 23543                           ; BSR set to: 0
 23544  008C46  0E03               	movlw	3
 23545  008C48  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23546  008C4A  B4D8               	btfsc	status,2,c
 23547  008C4C  D00F               	goto	u52330
 23548                           
 23549                           ; BSR set to: 0
 23550  008C4E  0E07               	movlw	7
 23551  008C50  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23552  008C52  B4D8               	btfsc	status,2,c
 23553  008C54  D00B               	goto	u52330
 23554                           
 23555                           ; BSR set to: 0
 23556  008C56  0E08               	movlw	8
 23557  008C58  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23558  008C5A  B4D8               	btfsc	status,2,c
 23559  008C5C  D007               	goto	u52330
 23560                           
 23561                           ; BSR set to: 0
 23562  008C5E  0E0A               	movlw	10
 23563  008C60  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23564  008C62  B4D8               	btfsc	status,2,c
 23565  008C64  D003               	goto	u52330
 23566                           
 23567                           ; BSR set to: 0
 23568  008C66  0E0B               	movlw	11
 23569  008C68  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23570  008C6A  B4D8               	btfsc	status,2,c
 23571  008C6C                     u52330:
 23572                           
 23573                           ; BSR set to: 0
 23574                           
 23575                           ; BSR set to: 0
 23576  008C6C  EC56  F015         	call	_keyboard_eight_note_efficient	;wreg free
 23577                           
 23578                           ;keyboard.c: 30: if ((KEYBOARD_MODE == PENTATONIC_MAJOR) || (KEYBOARD_MODE == PENTATONIC
      +                          _MINOR)) {keyboard_sharps_only_efficient();}
 23579  008C70  0E04               	movlw	4
 23580  008C72  0100               	movlb	0	; () banked
 23581  008C74  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23582  008C76  B4D8               	btfsc	status,2,c
 23583  008C78  D004               	goto	u52350
 23584                           
 23585                           ; BSR set to: 0
 23586  008C7A  0E05               	movlw	5
 23587  008C7C  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23588  008C7E  A4D8               	btfss	status,2,c
 23589  008C80  0012               	return	
 23590  008C82                     u52350:
 23591                           
 23592                           ; BSR set to: 0
 23593                           
 23594                           ; BSR set to: 0
 23595  008C82  ECDD  F01E         	call	_keyboard_sharps_only_efficient	;wreg free
 23596  008C86  0012               	return	
 23597  008C88                     __end_of_processKeyboard:
 23598                           	opt stack 0
 23599                           tblptru	equ	0xFF8
 23600                           tblptrh	equ	0xFF7
 23601                           tblptrl	equ	0xFF6
 23602                           tablat	equ	0xFF5
 23603                           prodh	equ	0xFF4
 23604                           prodl	equ	0xFF3
 23605                           intcon	equ	0xFF2
 23606                           intcon2	equ	0xFF1
 23607                           postinc0	equ	0xFEE
 23608                           wreg	equ	0xFE8
 23609                           postinc1	equ	0xFE6
 23610                           plusw1	equ	0xFE3
 23611                           fsr1h	equ	0xFE2
 23612                           fsr1l	equ	0xFE1
 23613                           indf2	equ	0xFDF
 23614                           postinc2	equ	0xFDE
 23615                           postdec2	equ	0xFDD
 23616                           plusw2	equ	0xFDB
 23617                           fsr2h	equ	0xFDA
 23618                           fsr2l	equ	0xFD9
 23619                           status	equ	0xFD8
 23620                           
 23621 ;; *************** function _keyboard_sharps_only_efficient *****************
 23622 ;; Defined at:
 23623 ;;		line 140 in file "keyboard.c"
 23624 ;; Parameters:    Size  Location     Type
 23625 ;;		None
 23626 ;; Auto vars:     Size  Location     Type
 23627 ;;  index           1   24[BANK0 ] unsigned char 
 23628 ;;  pitch           1   23[BANK0 ] unsigned char 
 23629 ;; Return value:  Size  Location     Type
 23630 ;;                  1    wreg      void 
 23631 ;; Registers used:
 23632 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23633 ;; Tracked objects:
 23634 ;;		On entry : 0/0
 23635 ;;		On exit  : 0/0
 23636 ;;		Unchanged: 0/0
 23637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23639 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23641 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23642 ;;Total ram usage:        2 bytes
 23643 ;; Hardware stack levels used:    1
 23644 ;; Hardware stack levels required when called:   11
 23645 ;; This function calls:
 23646 ;;		_playThisNotePentatonic
 23647 ;; This function is called by:
 23648 ;;		_processKeyboard
 23649 ;; This function uses a non-reentrant model
 23650 ;;
 23651                           
 23652                           	psect	text69
 23653  003DBA                     __ptext69:
 23654                           	opt stack 0
 23655  003DBA                     _keyboard_sharps_only_efficient:
 23656                           	opt stack 14
 23657                           
 23658                           ;keyboard.c: 142: unsigned char pitch;
 23659                           ;keyboard.c: 143: unsigned char index;
 23660                           ;keyboard.c: 146: if((button_state_now & 0x00000002) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW2){
 23661                           
 23662                           ;incstack = 0
 23663  003DBA  0100               	movlb	0	; () banked
 23664  003DBC  B3D8               	btfsc	_button_state_now& (0+255),1,b
 23665                           
 23666                           ; BSR set to: 0
 23667  003DBE  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23668  003DC0  D00E               	goto	l1419
 23669                           
 23670                           ; BSR set to: 0
 23671  003DC2  B3D0               	btfsc	_keyboard& (0+255),1,b
 23672  003DC4  D00C               	goto	l1419
 23673                           
 23674                           ; BSR set to: 0
 23675                           ;keyboard.c: 147: pitch = Cs;
 23676  003DC6  0E01               	movlw	1
 23677  003DC8  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23678                           
 23679                           ;keyboard.c: 148: index = 0;
 23680  003DCA  0E00               	movlw	0
 23681  003DCC  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23682                           
 23683                           ; BSR set to: 0
 23684                           ;keyboard.c: 149: ON_OFF = 1;
 23685  003DCE  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23686                           
 23687                           ; BSR set to: 0
 23688                           ;keyboard.c: 150: playThisNotePentatonic(pitch, index);
 23689  003DD0  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23690  003DD4  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23691  003DD6  EC07  F02A         	call	_playThisNotePentatonic
 23692                           
 23693                           ;keyboard.c: 151: keyboard.SW2 = 1;
 23694  003DDA  0100               	movlb	0	; () banked
 23695  003DDC  83D0               	bsf	_keyboard& (0+255),1,b
 23696  003DDE                     l1419:
 23697                           
 23698                           ; BSR set to: 0
 23699                           ;keyboard.c: 152: }
 23700                           ;keyboard.c: 153: if((button_state_now & 0x00000008) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW4){
 23701                           
 23702                           ; BSR set to: 0
 23703  003DDE  B7D8               	btfsc	_button_state_now& (0+255),3,b
 23704                           
 23705                           ; BSR set to: 0
 23706  003DE0  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23707  003DE2  D00E               	goto	l1420
 23708                           
 23709                           ; BSR set to: 0
 23710  003DE4  B7D0               	btfsc	_keyboard& (0+255),3,b
 23711  003DE6  D00C               	goto	l1420
 23712                           
 23713                           ; BSR set to: 0
 23714                           ;keyboard.c: 154: pitch = Ds;
 23715  003DE8  0E03               	movlw	3
 23716  003DEA  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23717                           
 23718                           ;keyboard.c: 155: index = 1;
 23719  003DEC  0E01               	movlw	1
 23720  003DEE  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23721                           
 23722                           ; BSR set to: 0
 23723                           ;keyboard.c: 156: ON_OFF = 1;
 23724  003DF0  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23725                           
 23726                           ; BSR set to: 0
 23727                           ;keyboard.c: 157: playThisNotePentatonic(pitch, index);
 23728  003DF2  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23729  003DF6  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23730  003DF8  EC07  F02A         	call	_playThisNotePentatonic
 23731                           
 23732                           ;keyboard.c: 158: keyboard.SW4 = 1;
 23733  003DFC  0100               	movlb	0	; () banked
 23734  003DFE  87D0               	bsf	_keyboard& (0+255),3,b
 23735  003E00                     l1420:
 23736                           
 23737                           ; BSR set to: 0
 23738                           ;keyboard.c: 159: }
 23739                           ;keyboard.c: 160: if((button_state_now & 0x00000040) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW7){
 23740                           
 23741                           ; BSR set to: 0
 23742  003E00  BDD8               	btfsc	_button_state_now& (0+255),6,b
 23743                           
 23744                           ; BSR set to: 0
 23745  003E02  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23746  003E04  D00E               	goto	l1421
 23747                           
 23748                           ; BSR set to: 0
 23749  003E06  BDD0               	btfsc	_keyboard& (0+255),6,b
 23750  003E08  D00C               	goto	l1421
 23751                           
 23752                           ; BSR set to: 0
 23753                           ;keyboard.c: 161: pitch = Fs;
 23754  003E0A  0E06               	movlw	6
 23755  003E0C  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23756                           
 23757                           ;keyboard.c: 162: index = 2;
 23758  003E0E  0E02               	movlw	2
 23759  003E10  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23760                           
 23761                           ; BSR set to: 0
 23762                           ;keyboard.c: 163: ON_OFF = 1;
 23763  003E12  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23764                           
 23765                           ; BSR set to: 0
 23766                           ;keyboard.c: 164: playThisNotePentatonic(pitch, index);
 23767  003E14  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23768  003E18  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23769  003E1A  EC07  F02A         	call	_playThisNotePentatonic
 23770                           
 23771                           ;keyboard.c: 165: keyboard.SW7 = 1;
 23772  003E1E  0100               	movlb	0	; () banked
 23773  003E20  8DD0               	bsf	_keyboard& (0+255),6,b
 23774  003E22                     l1421:
 23775                           
 23776                           ; BSR set to: 0
 23777                           ;keyboard.c: 166: }
 23778                           ;keyboard.c: 167: if((button_state_now & 0x00000100) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW9){
 23779                           
 23780                           ; BSR set to: 0
 23781  003E22  B1D9               	btfsc	(_button_state_now+1)& (0+255),0,b
 23782                           
 23783                           ; BSR set to: 0
 23784  003E24  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23785  003E26  D00E               	goto	l1422
 23786                           
 23787                           ; BSR set to: 0
 23788  003E28  B1D1               	btfsc	(_keyboard+1)& (0+255),0,b
 23789  003E2A  D00C               	goto	l1422
 23790                           
 23791                           ; BSR set to: 0
 23792                           ;keyboard.c: 168: pitch = Gs;
 23793  003E2C  0E08               	movlw	8
 23794  003E2E  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23795                           
 23796                           ;keyboard.c: 169: index = 3;
 23797  003E30  0E03               	movlw	3
 23798  003E32  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23799                           
 23800                           ; BSR set to: 0
 23801                           ;keyboard.c: 170: ON_OFF = 1;
 23802  003E34  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23803                           
 23804                           ; BSR set to: 0
 23805                           ;keyboard.c: 171: playThisNotePentatonic(pitch, index);
 23806  003E36  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23807  003E3A  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23808  003E3C  EC07  F02A         	call	_playThisNotePentatonic
 23809                           
 23810                           ;keyboard.c: 172: keyboard.SW9 = 1;
 23811  003E40  0100               	movlb	0	; () banked
 23812  003E42  81D1               	bsf	(_keyboard+1)& (0+255),0,b
 23813  003E44                     l1422:
 23814                           
 23815                           ; BSR set to: 0
 23816                           ;keyboard.c: 173: }
 23817                           ;keyboard.c: 174: if((button_state_now & 0x00000400) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW11){
 23818                           
 23819                           ; BSR set to: 0
 23820  003E44  B5D9               	btfsc	(_button_state_now+1)& (0+255),2,b
 23821                           
 23822                           ; BSR set to: 0
 23823  003E46  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23824  003E48  D00E               	goto	l1423
 23825                           
 23826                           ; BSR set to: 0
 23827  003E4A  B5D1               	btfsc	(_keyboard+1)& (0+255),2,b
 23828  003E4C  D00C               	goto	l1423
 23829                           
 23830                           ; BSR set to: 0
 23831                           ;keyboard.c: 175: pitch = As;
 23832  003E4E  0E0A               	movlw	10
 23833  003E50  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23834                           
 23835                           ;keyboard.c: 176: index = 4;
 23836  003E52  0E04               	movlw	4
 23837  003E54  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23838                           
 23839                           ; BSR set to: 0
 23840                           ;keyboard.c: 177: ON_OFF = 1;
 23841  003E56  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23842                           
 23843                           ; BSR set to: 0
 23844                           ;keyboard.c: 178: playThisNotePentatonic(pitch, index);
 23845  003E58  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23846  003E5C  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23847  003E5E  EC07  F02A         	call	_playThisNotePentatonic
 23848                           
 23849                           ;keyboard.c: 179: keyboard.SW11 = 1;
 23850  003E62  0100               	movlb	0	; () banked
 23851  003E64  85D1               	bsf	(_keyboard+1)& (0+255),2,b
 23852  003E66                     l1423:
 23853                           
 23854                           ; BSR set to: 0
 23855                           ;keyboard.c: 180: }
 23856                           ;keyboard.c: 182: if((button_state_now & 0x00002000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW14){
 23857                           
 23858                           ; BSR set to: 0
 23859  003E66  BBD9               	btfsc	(_button_state_now+1)& (0+255),5,b
 23860                           
 23861                           ; BSR set to: 0
 23862  003E68  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23863  003E6A  D00E               	goto	l1424
 23864                           
 23865                           ; BSR set to: 0
 23866  003E6C  BBD1               	btfsc	(_keyboard+1)& (0+255),5,b
 23867  003E6E  D00C               	goto	l1424
 23868                           
 23869                           ; BSR set to: 0
 23870                           ;keyboard.c: 183: pitch = C2s;
 23871  003E70  0E0D               	movlw	13
 23872  003E72  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23873                           
 23874                           ;keyboard.c: 184: index = 5;
 23875  003E74  0E05               	movlw	5
 23876  003E76  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23877                           
 23878                           ; BSR set to: 0
 23879                           ;keyboard.c: 185: ON_OFF = 1;
 23880  003E78  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23881                           
 23882                           ; BSR set to: 0
 23883                           ;keyboard.c: 186: playThisNotePentatonic(pitch, index);
 23884  003E7A  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23885  003E7E  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23886  003E80  EC07  F02A         	call	_playThisNotePentatonic
 23887                           
 23888                           ;keyboard.c: 187: keyboard.SW14 = 1;
 23889  003E84  0100               	movlb	0	; () banked
 23890  003E86  8BD1               	bsf	(_keyboard+1)& (0+255),5,b
 23891  003E88                     l1424:
 23892                           
 23893                           ; BSR set to: 0
 23894                           ;keyboard.c: 188: }
 23895                           ;keyboard.c: 189: if((button_state_now & 0x00008000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW16){
 23896                           
 23897                           ; BSR set to: 0
 23898  003E88  BFD9               	btfsc	(_button_state_now+1)& (0+255),7,b
 23899                           
 23900                           ; BSR set to: 0
 23901  003E8A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23902  003E8C  D00E               	goto	l1425
 23903                           
 23904                           ; BSR set to: 0
 23905  003E8E  BFD1               	btfsc	(_keyboard+1)& (0+255),7,b
 23906  003E90  D00C               	goto	l1425
 23907                           
 23908                           ; BSR set to: 0
 23909                           ;keyboard.c: 190: pitch = D2s;
 23910  003E92  0E0F               	movlw	15
 23911  003E94  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23912                           
 23913                           ;keyboard.c: 191: index = 6;
 23914  003E96  0E06               	movlw	6
 23915  003E98  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23916                           
 23917                           ; BSR set to: 0
 23918                           ;keyboard.c: 192: ON_OFF = 1;
 23919  003E9A  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23920                           
 23921                           ; BSR set to: 0
 23922                           ;keyboard.c: 193: playThisNotePentatonic(pitch, index);
 23923  003E9C  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23924  003EA0  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23925  003EA2  EC07  F02A         	call	_playThisNotePentatonic
 23926                           
 23927                           ;keyboard.c: 194: keyboard.SW16 = 1;
 23928  003EA6  0100               	movlb	0	; () banked
 23929  003EA8  8FD1               	bsf	(_keyboard+1)& (0+255),7,b
 23930  003EAA                     l1425:
 23931                           
 23932                           ; BSR set to: 0
 23933                           ;keyboard.c: 195: }
 23934                           ;keyboard.c: 196: if((button_state_now & 0x00040000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW19){
 23935                           
 23936                           ; BSR set to: 0
 23937  003EAA  B5DA               	btfsc	(_button_state_now+2)& (0+255),2,b
 23938                           
 23939                           ; BSR set to: 0
 23940  003EAC  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23941  003EAE  D00E               	goto	l1426
 23942                           
 23943                           ; BSR set to: 0
 23944  003EB0  B5D2               	btfsc	(_keyboard+2)& (0+255),2,b
 23945  003EB2  D00C               	goto	l1426
 23946                           
 23947                           ; BSR set to: 0
 23948                           ;keyboard.c: 197: pitch = F2s;
 23949  003EB4  0E12               	movlw	18
 23950  003EB6  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23951                           
 23952                           ;keyboard.c: 198: index = 7;
 23953  003EB8  0E07               	movlw	7
 23954  003EBA  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23955                           
 23956                           ; BSR set to: 0
 23957                           ;keyboard.c: 199: ON_OFF = 1;
 23958  003EBC  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23959                           
 23960                           ; BSR set to: 0
 23961                           ;keyboard.c: 200: playThisNotePentatonic(pitch, index);
 23962  003EBE  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23963  003EC2  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23964  003EC4  EC07  F02A         	call	_playThisNotePentatonic
 23965                           
 23966                           ;keyboard.c: 201: keyboard.SW19 = 1;
 23967  003EC8  0100               	movlb	0	; () banked
 23968  003ECA  85D2               	bsf	(_keyboard+2)& (0+255),2,b
 23969  003ECC                     l1426:
 23970                           
 23971                           ; BSR set to: 0
 23972                           ;keyboard.c: 202: }
 23973                           ;keyboard.c: 203: if((button_state_now & 0x00100000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW21){
 23974                           
 23975                           ; BSR set to: 0
 23976  003ECC  B9DA               	btfsc	(_button_state_now+2)& (0+255),4,b
 23977                           
 23978                           ; BSR set to: 0
 23979  003ECE  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23980  003ED0  D00E               	goto	l1427
 23981                           
 23982                           ; BSR set to: 0
 23983  003ED2  B9D2               	btfsc	(_keyboard+2)& (0+255),4,b
 23984  003ED4  D00C               	goto	l1427
 23985                           
 23986                           ; BSR set to: 0
 23987                           ;keyboard.c: 204: pitch = G2s;
 23988  003ED6  0E14               	movlw	20
 23989  003ED8  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23990                           
 23991                           ;keyboard.c: 205: index = 8;
 23992  003EDA  0E08               	movlw	8
 23993  003EDC  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23994                           
 23995                           ; BSR set to: 0
 23996                           ;keyboard.c: 206: ON_OFF = 1;
 23997  003EDE  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23998                           
 23999                           ; BSR set to: 0
 24000                           ;keyboard.c: 207: playThisNotePentatonic(pitch, index);
 24001  003EE0  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24002  003EE4  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24003  003EE6  EC07  F02A         	call	_playThisNotePentatonic
 24004                           
 24005                           ;keyboard.c: 208: keyboard.SW21 = 1;
 24006  003EEA  0100               	movlb	0	; () banked
 24007  003EEC  89D2               	bsf	(_keyboard+2)& (0+255),4,b
 24008  003EEE                     l1427:
 24009                           
 24010                           ; BSR set to: 0
 24011                           ;keyboard.c: 209: }
 24012                           ;keyboard.c: 210: if((button_state_now & 0x00400000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW23){
 24013                           
 24014                           ; BSR set to: 0
 24015  003EEE  BDDA               	btfsc	(_button_state_now+2)& (0+255),6,b
 24016                           
 24017                           ; BSR set to: 0
 24018  003EF0  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 24019  003EF2  D00E               	goto	l1428
 24020                           
 24021                           ; BSR set to: 0
 24022  003EF4  BDD2               	btfsc	(_keyboard+2)& (0+255),6,b
 24023  003EF6  D00C               	goto	l1428
 24024                           
 24025                           ; BSR set to: 0
 24026                           ;keyboard.c: 211: pitch = A2s;
 24027  003EF8  0E16               	movlw	22
 24028  003EFA  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24029                           
 24030                           ;keyboard.c: 212: index = 9;
 24031  003EFC  0E09               	movlw	9
 24032  003EFE  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24033                           
 24034                           ; BSR set to: 0
 24035                           ;keyboard.c: 213: ON_OFF = 1;
 24036  003F00  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24037                           
 24038                           ; BSR set to: 0
 24039                           ;keyboard.c: 214: playThisNotePentatonic(pitch, index);
 24040  003F02  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24041  003F06  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24042  003F08  EC07  F02A         	call	_playThisNotePentatonic
 24043                           
 24044                           ;keyboard.c: 215: keyboard.SW23 = 1;
 24045  003F0C  0100               	movlb	0	; () banked
 24046  003F0E  8DD2               	bsf	(_keyboard+2)& (0+255),6,b
 24047  003F10                     l1428:
 24048                           
 24049                           ; BSR set to: 0
 24050                           ;keyboard.c: 216: }
 24051                           ;keyboard.c: 219: if(((button_state_last & 0x00000002)) && ((button_state_now & 0x000000
      +                          02) == 0) && keyboard.SW2) {
 24052                           
 24053                           ; BSR set to: 0
 24054  003F10  B3D4               	btfsc	_button_state_last& (0+255),1,b
 24055                           
 24056                           ; BSR set to: 0
 24057  003F12  B3D8               	btfsc	_button_state_now& (0+255),1,b
 24058  003F14  D00E               	goto	l1429
 24059                           
 24060                           ; BSR set to: 0
 24061  003F16  A3D0               	btfss	_keyboard& (0+255),1,b
 24062  003F18  D00C               	goto	l1429
 24063                           
 24064                           ; BSR set to: 0
 24065                           ;keyboard.c: 220: pitch = Cs;
 24066  003F1A  0E01               	movlw	1
 24067  003F1C  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24068                           
 24069                           ;keyboard.c: 221: index = 0;
 24070  003F1E  0E00               	movlw	0
 24071  003F20  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24072                           
 24073                           ; BSR set to: 0
 24074                           ;keyboard.c: 222: ON_OFF = 0;
 24075  003F22  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24076                           
 24077                           ; BSR set to: 0
 24078                           ;keyboard.c: 223: playThisNotePentatonic(pitch, index);
 24079  003F24  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24080  003F28  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24081  003F2A  EC07  F02A         	call	_playThisNotePentatonic
 24082                           
 24083                           ;keyboard.c: 224: keyboard.SW2 = 0;
 24084  003F2E  0100               	movlb	0	; () banked
 24085  003F30  93D0               	bcf	_keyboard& (0+255),1,b
 24086  003F32                     l1429:
 24087                           
 24088                           ; BSR set to: 0
 24089                           ;keyboard.c: 225: }
 24090                           ;keyboard.c: 226: if(((button_state_last & 0x00000008)) && ((button_state_now & 0x000000
      +                          08) == 0) && keyboard.SW4) {
 24091                           
 24092                           ; BSR set to: 0
 24093  003F32  B7D4               	btfsc	_button_state_last& (0+255),3,b
 24094                           
 24095                           ; BSR set to: 0
 24096  003F34  B7D8               	btfsc	_button_state_now& (0+255),3,b
 24097  003F36  D00E               	goto	l1430
 24098                           
 24099                           ; BSR set to: 0
 24100  003F38  A7D0               	btfss	_keyboard& (0+255),3,b
 24101  003F3A  D00C               	goto	l1430
 24102                           
 24103                           ; BSR set to: 0
 24104                           ;keyboard.c: 227: pitch = Ds;
 24105  003F3C  0E03               	movlw	3
 24106  003F3E  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24107                           
 24108                           ;keyboard.c: 228: index = 1;
 24109  003F40  0E01               	movlw	1
 24110  003F42  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24111                           
 24112                           ; BSR set to: 0
 24113                           ;keyboard.c: 229: ON_OFF = 0;
 24114  003F44  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24115                           
 24116                           ; BSR set to: 0
 24117                           ;keyboard.c: 230: playThisNotePentatonic(pitch, index);
 24118  003F46  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24119  003F4A  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24120  003F4C  EC07  F02A         	call	_playThisNotePentatonic
 24121                           
 24122                           ;keyboard.c: 231: keyboard.SW4 = 0;
 24123  003F50  0100               	movlb	0	; () banked
 24124  003F52  97D0               	bcf	_keyboard& (0+255),3,b
 24125  003F54                     l1430:
 24126                           
 24127                           ; BSR set to: 0
 24128                           ;keyboard.c: 232: }
 24129                           ;keyboard.c: 233: if(((button_state_last & 0x00000040)) && ((button_state_now & 0x000000
      +                          40) == 0) && keyboard.SW7) {
 24130                           
 24131                           ; BSR set to: 0
 24132  003F54  BDD4               	btfsc	_button_state_last& (0+255),6,b
 24133                           
 24134                           ; BSR set to: 0
 24135  003F56  BDD8               	btfsc	_button_state_now& (0+255),6,b
 24136  003F58  D00E               	goto	l1431
 24137                           
 24138                           ; BSR set to: 0
 24139  003F5A  ADD0               	btfss	_keyboard& (0+255),6,b
 24140  003F5C  D00C               	goto	l1431
 24141                           
 24142                           ; BSR set to: 0
 24143                           ;keyboard.c: 234: pitch = Fs;
 24144  003F5E  0E06               	movlw	6
 24145  003F60  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24146                           
 24147                           ;keyboard.c: 235: index = 2;
 24148  003F62  0E02               	movlw	2
 24149  003F64  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24150                           
 24151                           ; BSR set to: 0
 24152                           ;keyboard.c: 236: ON_OFF = 0;
 24153  003F66  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24154                           
 24155                           ; BSR set to: 0
 24156                           ;keyboard.c: 237: playThisNotePentatonic(pitch, index);
 24157  003F68  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24158  003F6C  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24159  003F6E  EC07  F02A         	call	_playThisNotePentatonic
 24160                           
 24161                           ;keyboard.c: 238: keyboard.SW7 = 0;
 24162  003F72  0100               	movlb	0	; () banked
 24163  003F74  9DD0               	bcf	_keyboard& (0+255),6,b
 24164  003F76                     l1431:
 24165                           
 24166                           ; BSR set to: 0
 24167                           ;keyboard.c: 239: }
 24168                           ;keyboard.c: 240: if(((button_state_last & 0x00000100)) && ((button_state_now & 0x000001
      +                          00) == 0) && keyboard.SW9) {
 24169                           
 24170                           ; BSR set to: 0
 24171  003F76  B1D5               	btfsc	(_button_state_last+1)& (0+255),0,b
 24172                           
 24173                           ; BSR set to: 0
 24174  003F78  B1D9               	btfsc	(_button_state_now+1)& (0+255),0,b
 24175  003F7A  D00E               	goto	l1432
 24176                           
 24177                           ; BSR set to: 0
 24178  003F7C  A1D1               	btfss	(_keyboard+1)& (0+255),0,b
 24179  003F7E  D00C               	goto	l1432
 24180                           
 24181                           ; BSR set to: 0
 24182                           ;keyboard.c: 241: pitch = Gs;
 24183  003F80  0E08               	movlw	8
 24184  003F82  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24185                           
 24186                           ;keyboard.c: 242: index = 3;
 24187  003F84  0E03               	movlw	3
 24188  003F86  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24189                           
 24190                           ; BSR set to: 0
 24191                           ;keyboard.c: 243: ON_OFF = 0;
 24192  003F88  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24193                           
 24194                           ; BSR set to: 0
 24195                           ;keyboard.c: 244: playThisNotePentatonic(pitch, index);
 24196  003F8A  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24197  003F8E  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24198  003F90  EC07  F02A         	call	_playThisNotePentatonic
 24199                           
 24200                           ;keyboard.c: 245: keyboard.SW9 = 0;
 24201  003F94  0100               	movlb	0	; () banked
 24202  003F96  91D1               	bcf	(_keyboard+1)& (0+255),0,b
 24203  003F98                     l1432:
 24204                           
 24205                           ; BSR set to: 0
 24206                           ;keyboard.c: 246: }
 24207                           ;keyboard.c: 247: if(((button_state_last & 0x00000400)) && ((button_state_now & 0x000004
      +                          00) == 0) && keyboard.SW11) {
 24208                           
 24209                           ; BSR set to: 0
 24210  003F98  B5D5               	btfsc	(_button_state_last+1)& (0+255),2,b
 24211                           
 24212                           ; BSR set to: 0
 24213  003F9A  B5D9               	btfsc	(_button_state_now+1)& (0+255),2,b
 24214  003F9C  D00E               	goto	l1433
 24215                           
 24216                           ; BSR set to: 0
 24217  003F9E  A5D1               	btfss	(_keyboard+1)& (0+255),2,b
 24218  003FA0  D00C               	goto	l1433
 24219                           
 24220                           ; BSR set to: 0
 24221                           ;keyboard.c: 248: pitch = As;
 24222  003FA2  0E0A               	movlw	10
 24223  003FA4  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24224                           
 24225                           ;keyboard.c: 249: index = 4;
 24226  003FA6  0E04               	movlw	4
 24227  003FA8  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24228                           
 24229                           ; BSR set to: 0
 24230                           ;keyboard.c: 250: ON_OFF = 0;
 24231  003FAA  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24232                           
 24233                           ; BSR set to: 0
 24234                           ;keyboard.c: 251: playThisNotePentatonic(pitch, index);
 24235  003FAC  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24236  003FB0  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24237  003FB2  EC07  F02A         	call	_playThisNotePentatonic
 24238                           
 24239                           ;keyboard.c: 252: keyboard.SW11 = 0;
 24240  003FB6  0100               	movlb	0	; () banked
 24241  003FB8  95D1               	bcf	(_keyboard+1)& (0+255),2,b
 24242  003FBA                     l1433:
 24243                           
 24244                           ; BSR set to: 0
 24245                           ;keyboard.c: 253: }
 24246                           ;keyboard.c: 256: if(((button_state_last & 0x00002000)) && ((button_state_now & 0x000020
      +                          00) == 0) && keyboard.SW14) {
 24247                           
 24248                           ; BSR set to: 0
 24249  003FBA  BBD5               	btfsc	(_button_state_last+1)& (0+255),5,b
 24250                           
 24251                           ; BSR set to: 0
 24252  003FBC  BBD9               	btfsc	(_button_state_now+1)& (0+255),5,b
 24253  003FBE  D00E               	goto	l1434
 24254                           
 24255                           ; BSR set to: 0
 24256  003FC0  ABD1               	btfss	(_keyboard+1)& (0+255),5,b
 24257  003FC2  D00C               	goto	l1434
 24258                           
 24259                           ; BSR set to: 0
 24260                           ;keyboard.c: 257: pitch = C2s;
 24261  003FC4  0E0D               	movlw	13
 24262  003FC6  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24263                           
 24264                           ;keyboard.c: 258: index = 5;
 24265  003FC8  0E05               	movlw	5
 24266  003FCA  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24267                           
 24268                           ; BSR set to: 0
 24269                           ;keyboard.c: 259: ON_OFF = 0;
 24270  003FCC  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24271                           
 24272                           ; BSR set to: 0
 24273                           ;keyboard.c: 260: playThisNotePentatonic(pitch, index);
 24274  003FCE  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24275  003FD2  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24276  003FD4  EC07  F02A         	call	_playThisNotePentatonic
 24277                           
 24278                           ;keyboard.c: 261: keyboard.SW14 = 0;
 24279  003FD8  0100               	movlb	0	; () banked
 24280  003FDA  9BD1               	bcf	(_keyboard+1)& (0+255),5,b
 24281  003FDC                     l1434:
 24282                           
 24283                           ; BSR set to: 0
 24284                           ;keyboard.c: 262: }
 24285                           ;keyboard.c: 263: if(((button_state_last & 0x00008000)) && ((button_state_now & 0x000080
      +                          00) == 0) && keyboard.SW16) {
 24286                           
 24287                           ; BSR set to: 0
 24288  003FDC  BFD5               	btfsc	(_button_state_last+1)& (0+255),7,b
 24289                           
 24290                           ; BSR set to: 0
 24291  003FDE  BFD9               	btfsc	(_button_state_now+1)& (0+255),7,b
 24292  003FE0  D00E               	goto	l1435
 24293                           
 24294                           ; BSR set to: 0
 24295  003FE2  AFD1               	btfss	(_keyboard+1)& (0+255),7,b
 24296  003FE4  D00C               	goto	l1435
 24297                           
 24298                           ; BSR set to: 0
 24299                           ;keyboard.c: 264: pitch = D2s;
 24300  003FE6  0E0F               	movlw	15
 24301  003FE8  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24302                           
 24303                           ;keyboard.c: 265: index = 6;
 24304  003FEA  0E06               	movlw	6
 24305  003FEC  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24306                           
 24307                           ; BSR set to: 0
 24308                           ;keyboard.c: 266: ON_OFF = 0;
 24309  003FEE  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24310                           
 24311                           ; BSR set to: 0
 24312                           ;keyboard.c: 267: playThisNotePentatonic(pitch, index);
 24313  003FF0  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24314  003FF4  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24315  003FF6  EC07  F02A         	call	_playThisNotePentatonic
 24316                           
 24317                           ;keyboard.c: 268: keyboard.SW16 = 0;
 24318  003FFA  0100               	movlb	0	; () banked
 24319  003FFC  9FD1               	bcf	(_keyboard+1)& (0+255),7,b
 24320  003FFE                     l1435:
 24321                           
 24322                           ; BSR set to: 0
 24323                           ;keyboard.c: 269: }
 24324                           ;keyboard.c: 270: if(((button_state_last & 0x00040000)) && ((button_state_now & 0x000400
      +                          00) == 0) && keyboard.SW19) {
 24325                           
 24326                           ; BSR set to: 0
 24327  003FFE  B5D6               	btfsc	(_button_state_last+2)& (0+255),2,b
 24328                           
 24329                           ; BSR set to: 0
 24330  004000  B5DA               	btfsc	(_button_state_now+2)& (0+255),2,b
 24331  004002  D00E               	goto	l1436
 24332                           
 24333                           ; BSR set to: 0
 24334  004004  A5D2               	btfss	(_keyboard+2)& (0+255),2,b
 24335  004006  D00C               	goto	l1436
 24336                           
 24337                           ; BSR set to: 0
 24338                           ;keyboard.c: 271: pitch = F2s;
 24339  004008  0E12               	movlw	18
 24340  00400A  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24341                           
 24342                           ;keyboard.c: 272: index = 7;
 24343  00400C  0E07               	movlw	7
 24344  00400E  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24345                           
 24346                           ; BSR set to: 0
 24347                           ;keyboard.c: 273: ON_OFF = 0;
 24348  004010  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24349                           
 24350                           ; BSR set to: 0
 24351                           ;keyboard.c: 274: playThisNotePentatonic(pitch, index);
 24352  004012  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24353  004016  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24354  004018  EC07  F02A         	call	_playThisNotePentatonic
 24355                           
 24356                           ;keyboard.c: 275: keyboard.SW19 = 0;
 24357  00401C  0100               	movlb	0	; () banked
 24358  00401E  95D2               	bcf	(_keyboard+2)& (0+255),2,b
 24359  004020                     l1436:
 24360                           
 24361                           ; BSR set to: 0
 24362                           ;keyboard.c: 276: }
 24363                           ;keyboard.c: 277: if(((button_state_last & 0x00100000)) && ((button_state_now & 0x001000
      +                          00) == 0) && keyboard.SW21) {
 24364                           
 24365                           ; BSR set to: 0
 24366  004020  B9D6               	btfsc	(_button_state_last+2)& (0+255),4,b
 24367                           
 24368                           ; BSR set to: 0
 24369  004022  B9DA               	btfsc	(_button_state_now+2)& (0+255),4,b
 24370  004024  D00E               	goto	l1437
 24371                           
 24372                           ; BSR set to: 0
 24373  004026  A9D2               	btfss	(_keyboard+2)& (0+255),4,b
 24374  004028  D00C               	goto	l1437
 24375                           
 24376                           ; BSR set to: 0
 24377                           ;keyboard.c: 278: pitch = G2s;
 24378  00402A  0E14               	movlw	20
 24379  00402C  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24380                           
 24381                           ;keyboard.c: 279: index = 8;
 24382  00402E  0E08               	movlw	8
 24383  004030  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24384                           
 24385                           ; BSR set to: 0
 24386                           ;keyboard.c: 280: ON_OFF = 0;
 24387  004032  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24388                           
 24389                           ; BSR set to: 0
 24390                           ;keyboard.c: 281: playThisNotePentatonic(pitch, index);
 24391  004034  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24392  004038  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24393  00403A  EC07  F02A         	call	_playThisNotePentatonic
 24394                           
 24395                           ;keyboard.c: 282: keyboard.SW21 = 0;
 24396  00403E  0100               	movlb	0	; () banked
 24397  004040  99D2               	bcf	(_keyboard+2)& (0+255),4,b
 24398  004042                     l1437:
 24399                           
 24400                           ; BSR set to: 0
 24401                           ;keyboard.c: 283: }
 24402                           ;keyboard.c: 284: if(((button_state_last & 0x00400000)) && ((button_state_now & 0x004000
      +                          00) == 0) && keyboard.SW23) {
 24403                           
 24404                           ; BSR set to: 0
 24405  004042  ADD6               	btfss	(_button_state_last+2)& (0+255),6,b
 24406  004044  0012               	return	
 24407                           
 24408                           ; BSR set to: 0
 24409  004046  BDDA               	btfsc	(_button_state_now+2)& (0+255),6,b
 24410  004048  0012               	return	
 24411                           
 24412                           ; BSR set to: 0
 24413  00404A  ADD2               	btfss	(_keyboard+2)& (0+255),6,b
 24414  00404C  0012               	return	
 24415                           
 24416                           ; BSR set to: 0
 24417                           ;keyboard.c: 285: pitch = A2s;
 24418  00404E  0E16               	movlw	22
 24419  004050  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24420                           
 24421                           ;keyboard.c: 286: index = 9;
 24422  004052  0E09               	movlw	9
 24423  004054  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24424                           
 24425                           ; BSR set to: 0
 24426                           ;keyboard.c: 287: ON_OFF = 0;
 24427  004056  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24428                           
 24429                           ; BSR set to: 0
 24430                           ;keyboard.c: 288: playThisNotePentatonic(pitch, index);
 24431  004058  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24432  00405C  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24433  00405E  EC07  F02A         	call	_playThisNotePentatonic
 24434                           
 24435                           ;keyboard.c: 289: keyboard.SW23 = 0;
 24436  004062  0100               	movlb	0	; () banked
 24437  004064  9DD2               	bcf	(_keyboard+2)& (0+255),6,b
 24438  004066  0012               	return	
 24439  004068                     __end_of_keyboard_sharps_only_efficient:
 24440                           	opt stack 0
 24441                           tblptru	equ	0xFF8
 24442                           tblptrh	equ	0xFF7
 24443                           tblptrl	equ	0xFF6
 24444                           tablat	equ	0xFF5
 24445                           prodh	equ	0xFF4
 24446                           prodl	equ	0xFF3
 24447                           intcon	equ	0xFF2
 24448                           intcon2	equ	0xFF1
 24449                           postinc0	equ	0xFEE
 24450                           wreg	equ	0xFE8
 24451                           postinc1	equ	0xFE6
 24452                           plusw1	equ	0xFE3
 24453                           fsr1h	equ	0xFE2
 24454                           fsr1l	equ	0xFE1
 24455                           indf2	equ	0xFDF
 24456                           postinc2	equ	0xFDE
 24457                           postdec2	equ	0xFDD
 24458                           plusw2	equ	0xFDB
 24459                           fsr2h	equ	0xFDA
 24460                           fsr2l	equ	0xFD9
 24461                           status	equ	0xFD8
 24462                           
 24463 ;; *************** function _playThisNotePentatonic *****************
 24464 ;; Defined at:
 24465 ;;		line 33 in file "keyboard.c"
 24466 ;; Parameters:    Size  Location     Type
 24467 ;;  pitch           1    wreg     unsigned char 
 24468 ;;  index           1   17[BANK0 ] unsigned char 
 24469 ;; Auto vars:     Size  Location     Type
 24470 ;;  pitch           1    0[COMRAM] unsigned char 
 24471 ;;  temp_pitch      1   22[BANK0 ] unsigned char 
 24472 ;; Return value:  Size  Location     Type
 24473 ;;                  1    wreg      void 
 24474 ;; Registers used:
 24475 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24476 ;; Tracked objects:
 24477 ;;		On entry : 0/0
 24478 ;;		On exit  : 0/0
 24479 ;;		Unchanged: 0/0
 24480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 24481 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24482 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24483 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24484 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24485 ;;Total ram usage:        6 bytes
 24486 ;; Hardware stack levels used:    1
 24487 ;; Hardware stack levels required when called:   10
 24488 ;; This function calls:
 24489 ;;		_add_notes_to_arpeggio
 24490 ;;		_delete_notes_from_arpeggio
 24491 ;;		_finish_arpeggio_setup
 24492 ;;		_key_press_release_note_off
 24493 ;;		_noteOff
 24494 ;;		_noteOn
 24495 ;;		_wait_one_pulse
 24496 ;; This function is called by:
 24497 ;;		_keyboard_sharps_only_efficient
 24498 ;;		_doTheUnLatch
 24499 ;; This function uses a non-reentrant model
 24500 ;;
 24501                           
 24502                           	psect	text70
 24503  00540E                     __ptext70:
 24504                           	opt stack 0
 24505  00540E                     _playThisNotePentatonic:
 24506                           	opt stack 14
 24507                           
 24508                           ;keyboard.c: 35: if(ARPEGGIO_ON == 0){
 24509                           
 24510                           ; BSR set to: 0
 24511                           ;incstack = 0
 24512  00540E  B804               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 24513  005410  D058               	goto	l1402
 24514                           
 24515                           ;keyboard.c: 37: if(KEYBOARD_MODE == PENTATONIC_MAJOR) {
 24516  005412  0E04               	movlw	4
 24517  005414  0100               	movlb	0	; () banked
 24518  005416  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24519  005418  A4D8               	btfss	status,2,c
 24520  00541A  D027               	goto	l1399
 24521                           
 24522                           ; BSR set to: 0
 24523                           ;keyboard.c: 38: if(ON_OFF == 1) {noteOn(channel,pentatonic_major_key[index],velocity);}
 24524  00541C  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24525  00541E  D011               	goto	l1398
 24526                           
 24527                           ; BSR set to: 0
 24528  005420  5051               	movf	_velocity,w,c
 24529  005422  6EE6               	movwf	postinc1,c
 24530  005424  5171               	movf	playThisNotePentatonic@index& (0+255),w,b
 24531  005426  0D01               	mullw	1
 24532  005428  0E92               	movlw	low _pentatonic_major_key
 24533  00542A  24F3               	addwf	prodl,w,c
 24534  00542C  6EF6               	movwf	tblptrl,c
 24535  00542E  0EF3               	movlw	high _pentatonic_major_key
 24536  005430  20F4               	addwfc	prodh,w,c
 24537  005432  6EF7               	movwf	tblptrh,c
 24538  005434                     	if	0	;There are less than 3 active tblptr bytes
 24539  005434                     	endif
 24540  005434  0008               	tblrd		*
 24541  005436  50F5               	movf	tablat,w,c
 24542  005438  6EE6               	movwf	postinc1,c
 24543  00543A  503E               	movf	_channel,w,c
 24544  00543C  6EE6               	movwf	postinc1,c
 24545  00543E  ECF8  F044         	call	_noteOn	;wreg free
 24546  005442                     l1398:
 24547                           
 24548                           ;keyboard.c: 39: if(ON_OFF == 0) {noteOff(channel,pentatonic_major_key[index],velocity);
      +                          }
 24549  005442  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24550  005444  D012               	goto	l1399
 24551  005446  5051               	movf	_velocity,w,c
 24552  005448  6EE6               	movwf	postinc1,c
 24553  00544A  0100               	movlb	0	; () banked
 24554  00544C  5171               	movf	playThisNotePentatonic@index& (0+255),w,b
 24555  00544E  0D01               	mullw	1
 24556  005450  0E92               	movlw	low _pentatonic_major_key
 24557  005452  24F3               	addwf	prodl,w,c
 24558  005454  6EF6               	movwf	tblptrl,c
 24559  005456  0EF3               	movlw	high _pentatonic_major_key
 24560  005458  20F4               	addwfc	prodh,w,c
 24561  00545A  6EF7               	movwf	tblptrh,c
 24562  00545C                     	if	0	;There are less than 3 active tblptr bytes
 24563  00545C                     	endif
 24564  00545C  0008               	tblrd		*
 24565  00545E  50F5               	movf	tablat,w,c
 24566  005460  6EE6               	movwf	postinc1,c
 24567  005462  503E               	movf	_channel,w,c
 24568  005464  6EE6               	movwf	postinc1,c
 24569  005466  ECAD  F049         	call	_noteOff	;wreg free
 24570  00546A                     l1399:
 24571                           
 24572                           ;keyboard.c: 40: }
 24573                           ;keyboard.c: 42: if(KEYBOARD_MODE == PENTATONIC_MINOR) {
 24574  00546A  0E05               	movlw	5
 24575  00546C  0100               	movlb	0	; () banked
 24576  00546E  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24577  005470  A4D8               	btfss	status,2,c
 24578  005472  D027               	goto	l1402
 24579                           
 24580                           ; BSR set to: 0
 24581                           ;keyboard.c: 43: if(ON_OFF == 1) {noteOn(channel,pentatonic_minor_key[index],velocity);}
 24582  005474  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24583  005476  D011               	goto	l1401
 24584                           
 24585                           ; BSR set to: 0
 24586  005478  5051               	movf	_velocity,w,c
 24587  00547A  6EE6               	movwf	postinc1,c
 24588  00547C  5171               	movf	playThisNotePentatonic@index& (0+255),w,b
 24589  00547E  0D01               	mullw	1
 24590  005480  0E87               	movlw	low _pentatonic_minor_key
 24591  005482  24F3               	addwf	prodl,w,c
 24592  005484  6EF6               	movwf	tblptrl,c
 24593  005486  0EF3               	movlw	high _pentatonic_minor_key
 24594  005488  20F4               	addwfc	prodh,w,c
 24595  00548A  6EF7               	movwf	tblptrh,c
 24596  00548C                     	if	0	;There are less than 3 active tblptr bytes
 24597  00548C                     	endif
 24598  00548C  0008               	tblrd		*
 24599  00548E  50F5               	movf	tablat,w,c
 24600  005490  6EE6               	movwf	postinc1,c
 24601  005492  503E               	movf	_channel,w,c
 24602  005494  6EE6               	movwf	postinc1,c
 24603  005496  ECF8  F044         	call	_noteOn	;wreg free
 24604  00549A                     l1401:
 24605                           
 24606                           ;keyboard.c: 44: if(ON_OFF == 0) {noteOff(channel,pentatonic_minor_key[index],velocity);
      +                          }
 24607  00549A  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24608  00549C  D012               	goto	l1402
 24609  00549E  5051               	movf	_velocity,w,c
 24610  0054A0  6EE6               	movwf	postinc1,c
 24611  0054A2  0100               	movlb	0	; () banked
 24612  0054A4  5171               	movf	playThisNotePentatonic@index& (0+255),w,b
 24613  0054A6  0D01               	mullw	1
 24614  0054A8  0E87               	movlw	low _pentatonic_minor_key
 24615  0054AA  24F3               	addwf	prodl,w,c
 24616  0054AC  6EF6               	movwf	tblptrl,c
 24617  0054AE  0EF3               	movlw	high _pentatonic_minor_key
 24618  0054B0  20F4               	addwfc	prodh,w,c
 24619  0054B2  6EF7               	movwf	tblptrh,c
 24620  0054B4                     	if	0	;There are less than 3 active tblptr bytes
 24621  0054B4                     	endif
 24622  0054B4  0008               	tblrd		*
 24623  0054B6  50F5               	movf	tablat,w,c
 24624  0054B8  6EE6               	movwf	postinc1,c
 24625  0054BA  503E               	movf	_channel,w,c
 24626  0054BC  6EE6               	movwf	postinc1,c
 24627  0054BE  ECAD  F049         	call	_noteOff	;wreg free
 24628  0054C2                     l1402:
 24629                           
 24630                           ;keyboard.c: 45: }
 24631                           ;keyboard.c: 46: }
 24632                           ;keyboard.c: 49: if(ARPEGGIO_ON == 1){
 24633  0054C2  A804               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 24634  0054C4  0012               	return	
 24635                           
 24636                           ;keyboard.c: 51: unsigned char temp_pitch;
 24637                           ;keyboard.c: 53: if(KEYBOARD_MODE == PENTATONIC_MAJOR) {
 24638  0054C6  0E04               	movlw	4
 24639  0054C8  0100               	movlb	0	; () banked
 24640  0054CA  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24641  0054CC  A4D8               	btfss	status,2,c
 24642  0054CE  D00B               	goto	l1404
 24643                           
 24644                           ; BSR set to: 0
 24645                           ;keyboard.c: 54: temp_pitch = pentatonic_major_key[index];
 24646  0054D0  5171               	movf	playThisNotePentatonic@index& (0+255),w,b
 24647  0054D2  0D01               	mullw	1
 24648  0054D4  0E92               	movlw	low _pentatonic_major_key
 24649  0054D6  24F3               	addwf	prodl,w,c
 24650  0054D8  6EF6               	movwf	tblptrl,c
 24651  0054DA  0EF3               	movlw	high _pentatonic_major_key
 24652  0054DC  20F4               	addwfc	prodh,w,c
 24653  0054DE  6EF7               	movwf	tblptrh,c
 24654  0054E0                     	if	0	;There are less than 3 active tblptr bytes
 24655  0054E0                     	endif
 24656  0054E0  0008               	tblrd		*
 24657  0054E2  CFF5 F076          	movff	tablat,playThisNotePentatonic@temp_pitch
 24658  0054E6                     l1404:
 24659                           
 24660                           ; BSR set to: 0
 24661                           ;keyboard.c: 55: }
 24662                           ;keyboard.c: 57: if(KEYBOARD_MODE == PENTATONIC_MINOR) {
 24663                           
 24664                           ; BSR set to: 0
 24665  0054E6  0E05               	movlw	5
 24666  0054E8  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24667  0054EA  A4D8               	btfss	status,2,c
 24668  0054EC  D00B               	goto	l1405
 24669                           
 24670                           ; BSR set to: 0
 24671                           ;keyboard.c: 58: temp_pitch = pentatonic_minor_key[index];
 24672  0054EE  5171               	movf	playThisNotePentatonic@index& (0+255),w,b
 24673  0054F0  0D01               	mullw	1
 24674  0054F2  0E87               	movlw	low _pentatonic_minor_key
 24675  0054F4  24F3               	addwf	prodl,w,c
 24676  0054F6  6EF6               	movwf	tblptrl,c
 24677  0054F8  0EF3               	movlw	high _pentatonic_minor_key
 24678  0054FA  20F4               	addwfc	prodh,w,c
 24679  0054FC  6EF7               	movwf	tblptrh,c
 24680  0054FE                     	if	0	;There are less than 3 active tblptr bytes
 24681  0054FE                     	endif
 24682  0054FE  0008               	tblrd		*
 24683  005500  CFF5 F076          	movff	tablat,playThisNotePentatonic@temp_pitch
 24684  005504                     l1405:
 24685                           
 24686                           ; BSR set to: 0
 24687                           ;keyboard.c: 59: }
 24688                           ;keyboard.c: 61: if(ON_OFF == 1) {
 24689                           
 24690                           ; BSR set to: 0
 24691  005504  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24692  005506  D019               	goto	l1406
 24693                           
 24694                           ; BSR set to: 0
 24695                           ;keyboard.c: 64: TMR0ON = 0;
 24696  005508  9ED5               	bcf	4053,7,c	;volatile
 24697                           
 24698                           ;keyboard.c: 66: parallel = temp_pitch;
 24699  00550A  C076  F030         	movff	playThisNotePentatonic@temp_pitch,_parallel
 24700                           
 24701                           ; BSR set to: 0
 24702                           ;keyboard.c: 69: if(NUM_NOTES_PRESSED > 0){
 24703  00550E  502F               	movf	_NUM_NOTES_PRESSED,w,c
 24704  005510  B4D8               	btfsc	status,2,c
 24705  005512  D00A               	goto	l1407
 24706                           
 24707                           ; BSR set to: 0
 24708                           ;keyboard.c: 70: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 24709  005514  0E00               	movlw	0
 24710  005516  B403               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 24711  005518  0E01               	movlw	1
 24712  00551A  EC52  F04B         	call	_wait_one_pulse
 24713                           
 24714                           ;keyboard.c: 71: if(note_off_was_sent == 0) {key_press_release_note_off();}
 24715  00551E  A202               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 24716  005520  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 24717                           
 24718                           ;keyboard.c: 72: TIMER_OVERFLOWS = 0;
 24719  005524  0E00               	movlw	0
 24720  005526  6E2E               	movwf	_TIMER_OVERFLOWS,c
 24721  005528                     l1407:
 24722                           
 24723                           ;keyboard.c: 73: }
 24724                           ;keyboard.c: 75: add_notes_to_arpeggio(temp_pitch);
 24725  005528  0100               	movlb	0	; () banked
 24726  00552A  5176               	movf	playThisNotePentatonic@temp_pitch& (0+255),w,b
 24727  00552C  EC57  F034         	call	_add_notes_to_arpeggio
 24728                           
 24729                           ;keyboard.c: 87: if(LATCH == 0) {latch_was_pressed = 0;}
 24730  005530  A204               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 24731  005532  9C03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 24732                           
 24733                           ;keyboard.c: 90: finish_arpeggio_setup();
 24734  005534  ECE7  F04B         	call	_finish_arpeggio_setup	;wreg free
 24735                           
 24736                           ;keyboard.c: 93: TMR0ON = 1;
 24737  005538  8ED5               	bsf	4053,7,c	;volatile
 24738  00553A                     l1406:
 24739                           
 24740                           ;keyboard.c: 94: }
 24741                           ;keyboard.c: 96: if((ON_OFF == 0) && (LATCH == 0)) {
 24742  00553A  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24743  00553C  0012               	return	
 24744  00553E  B204               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 24745  005540  0012               	return	
 24746                           
 24747                           ;keyboard.c: 99: TMR0ON = 0;
 24748  005542  9ED5               	bcf	4053,7,c	;volatile
 24749                           
 24750                           ;keyboard.c: 102: if(NUM_NOTES_PRESSED > 0){
 24751  005544  502F               	movf	_NUM_NOTES_PRESSED,w,c
 24752  005546  B4D8               	btfsc	status,2,c
 24753  005548  D00A               	goto	l1411
 24754                           
 24755                           ;keyboard.c: 103: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 24756  00554A  0E00               	movlw	0
 24757  00554C  B203               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 24758  00554E  0E01               	movlw	1
 24759  005550  EC52  F04B         	call	_wait_one_pulse
 24760                           
 24761                           ;keyboard.c: 104: if(note_off_was_sent == 0) {key_press_release_note_off();}
 24762  005554  A202               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 24763  005556  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 24764                           
 24765                           ;keyboard.c: 105: TIMER_OVERFLOWS = 0;
 24766  00555A  0E00               	movlw	0
 24767  00555C  6E2E               	movwf	_TIMER_OVERFLOWS,c
 24768  00555E                     l1411:
 24769                           
 24770                           ;keyboard.c: 106: }
 24771                           ;keyboard.c: 108: delete_notes_from_arpeggio(temp_pitch);
 24772  00555E  0100               	movlb	0	; () banked
 24773  005560  5176               	movf	playThisNotePentatonic@temp_pitch& (0+255),w,b
 24774  005562  ECBF  F04A         	call	_delete_notes_from_arpeggio
 24775                           
 24776                           ;keyboard.c: 118: if(temp_pitch == parallel){NUM_NOTES_PRESSED = 0;}
 24777  005566  C030  F072         	movff	_parallel,??_playThisNotePentatonic
 24778  00556A  0100               	movlb	0	; () banked
 24779  00556C  6B73               	clrf	(??_playThisNotePentatonic+1)& (0+255),b
 24780  00556E  BF72               	btfsc	??_playThisNotePentatonic& (0+255),7,b
 24781  005570  0773               	decf	(??_playThisNotePentatonic+1)& (0+255),f,b
 24782  005572  5176               	movf	playThisNotePentatonic@temp_pitch& (0+255),w,b
 24783  005574  6F74               	movwf	(??_playThisNotePentatonic+2)& (0+255),b
 24784  005576  6B75               	clrf	(??_playThisNotePentatonic+3)& (0+255),b
 24785  005578  5172               	movf	??_playThisNotePentatonic& (0+255),w,b
 24786  00557A  1974               	xorwf	(??_playThisNotePentatonic+2)& (0+255),w,b
 24787  00557C  E106               	bnz	l27028
 24788  00557E  5173               	movf	(??_playThisNotePentatonic+1)& (0+255),w,b
 24789  005580  1975               	xorwf	(??_playThisNotePentatonic+3)& (0+255),w,b
 24790  005582  A4D8               	btfss	status,2,c
 24791  005584  D002               	goto	l1413
 24792                           
 24793                           ; BSR set to: 0
 24794  005586  0E00               	movlw	0
 24795  005588  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 24796  00558A                     l1413:
 24797  00558A                     l27028:
 24798                           
 24799                           ; BSR set to: 0
 24800                           ;keyboard.c: 121: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 24801  00558A  BE03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 24802                           
 24803                           ; BSR set to: 0
 24804  00558C  AC03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 24805  00558E  D001               	goto	l1414
 24806                           
 24807                           ; BSR set to: 0
 24808                           ;keyboard.c: 122: LATCH = 1;
 24809  005590  8204               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 24810  005592                     l1414:
 24811                           
 24812                           ; BSR set to: 0
 24813                           ;keyboard.c: 123: }
 24814                           ;keyboard.c: 126: if((UN_LATCH_MODE == 0) && (latch_was_pressed == 1)){
 24815  005592  A004               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 24816                           
 24817                           ; BSR set to: 0
 24818  005594  AC03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 24819  005596  D004               	goto	l1415
 24820                           
 24821                           ; BSR set to: 0
 24822                           ;keyboard.c: 127: NUM_NOTES_PRESSED = 0;
 24823  005598  0E00               	movlw	0
 24824  00559A  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 24825                           
 24826                           ;keyboard.c: 128: ARRAY_INDEX = 0;
 24827  00559C  0E00               	movlw	0
 24828  00559E  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 24829  0055A0                     l1415:
 24830                           
 24831                           ; BSR set to: 0
 24832                           ;keyboard.c: 129: }
 24833                           ;keyboard.c: 132: finish_arpeggio_setup();
 24834                           
 24835                           ; BSR set to: 0
 24836  0055A0  ECE7  F04B         	call	_finish_arpeggio_setup	;wreg free
 24837                           
 24838                           ;keyboard.c: 135: TMR0ON = 1;
 24839  0055A4  8ED5               	bsf	4053,7,c	;volatile
 24840  0055A6  0012               	return	
 24841  0055A8                     __end_of_playThisNotePentatonic:
 24842                           	opt stack 0
 24843                           tblptru	equ	0xFF8
 24844                           tblptrh	equ	0xFF7
 24845                           tblptrl	equ	0xFF6
 24846                           tablat	equ	0xFF5
 24847                           prodh	equ	0xFF4
 24848                           prodl	equ	0xFF3
 24849                           intcon	equ	0xFF2
 24850                           intcon2	equ	0xFF1
 24851                           postinc0	equ	0xFEE
 24852                           wreg	equ	0xFE8
 24853                           postinc1	equ	0xFE6
 24854                           plusw1	equ	0xFE3
 24855                           fsr1h	equ	0xFE2
 24856                           fsr1l	equ	0xFE1
 24857                           indf2	equ	0xFDF
 24858                           postinc2	equ	0xFDE
 24859                           postdec2	equ	0xFDD
 24860                           plusw2	equ	0xFDB
 24861                           fsr2h	equ	0xFDA
 24862                           fsr2l	equ	0xFD9
 24863                           status	equ	0xFD8
 24864                           
 24865 ;; *************** function _keyboard_eight_note_efficient *****************
 24866 ;; Defined at:
 24867 ;;		line 1363 in file "keyboard.c"
 24868 ;; Parameters:    Size  Location     Type
 24869 ;;		None
 24870 ;; Auto vars:     Size  Location     Type
 24871 ;;  index           1   27[BANK0 ] unsigned char 
 24872 ;;  pitch           1   26[BANK0 ] unsigned char 
 24873 ;; Return value:  Size  Location     Type
 24874 ;;                  1    wreg      void 
 24875 ;; Registers used:
 24876 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24877 ;; Tracked objects:
 24878 ;;		On entry : 0/0
 24879 ;;		On exit  : 0/0
 24880 ;;		Unchanged: 0/0
 24881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 24882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24883 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24885 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24886 ;;Total ram usage:        2 bytes
 24887 ;; Hardware stack levels used:    1
 24888 ;; Hardware stack levels required when called:   12
 24889 ;; This function calls:
 24890 ;;		_playThisNote8
 24891 ;; This function is called by:
 24892 ;;		_processKeyboard
 24893 ;; This function uses a non-reentrant model
 24894 ;;
 24895                           
 24896                           	psect	text71
 24897  002AAC                     __ptext71:
 24898                           	opt stack 0
 24899  002AAC                     _keyboard_eight_note_efficient:
 24900                           	opt stack 13
 24901                           
 24902                           ;keyboard.c: 1365: unsigned char pitch;
 24903                           ;keyboard.c: 1366: unsigned char index;
 24904                           ;keyboard.c: 1369: if((button_state_now & 0x00000001) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW1){
 24905                           
 24906                           ;incstack = 0
 24907  002AAC  0100               	movlb	0	; () banked
 24908  002AAE  B1D8               	btfsc	_button_state_now& (0+255),0,b
 24909                           
 24910                           ; BSR set to: 0
 24911  002AB0  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 24912  002AB2  D00E               	goto	l1740
 24913                           
 24914                           ; BSR set to: 0
 24915  002AB4  B1D0               	btfsc	_keyboard& (0+255),0,b
 24916  002AB6  D00C               	goto	l1740
 24917                           
 24918                           ; BSR set to: 0
 24919                           ;keyboard.c: 1370: pitch = C;
 24920  002AB8  0E00               	movlw	0
 24921  002ABA  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 24922                           
 24923                           ;keyboard.c: 1371: index = 0;
 24924  002ABC  0E00               	movlw	0
 24925  002ABE  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 24926                           
 24927                           ; BSR set to: 0
 24928                           ;keyboard.c: 1372: ON_OFF = 1;
 24929  002AC0  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24930                           
 24931                           ; BSR set to: 0
 24932                           ;keyboard.c: 1373: playThisNote8(pitch, index);
 24933  002AC2  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 24934  002AC6  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 24935  002AC8  EC3C  F013         	call	_playThisNote8
 24936                           
 24937                           ;keyboard.c: 1374: keyboard.SW1 = 1;
 24938  002ACC  0100               	movlb	0	; () banked
 24939  002ACE  81D0               	bsf	_keyboard& (0+255),0,b
 24940  002AD0                     l1740:
 24941                           
 24942                           ; BSR set to: 0
 24943                           ;keyboard.c: 1375: }
 24944                           ;keyboard.c: 1376: if((button_state_now & 0x00000004) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW3){
 24945                           
 24946                           ; BSR set to: 0
 24947  002AD0  B5D8               	btfsc	_button_state_now& (0+255),2,b
 24948                           
 24949                           ; BSR set to: 0
 24950  002AD2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 24951  002AD4  D00E               	goto	l1741
 24952                           
 24953                           ; BSR set to: 0
 24954  002AD6  B5D0               	btfsc	_keyboard& (0+255),2,b
 24955  002AD8  D00C               	goto	l1741
 24956                           
 24957                           ; BSR set to: 0
 24958                           ;keyboard.c: 1377: pitch = D;
 24959  002ADA  0E02               	movlw	2
 24960  002ADC  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 24961                           
 24962                           ;keyboard.c: 1378: index = 1;
 24963  002ADE  0E01               	movlw	1
 24964  002AE0  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 24965                           
 24966                           ; BSR set to: 0
 24967                           ;keyboard.c: 1379: ON_OFF = 1;
 24968  002AE2  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24969                           
 24970                           ; BSR set to: 0
 24971                           ;keyboard.c: 1380: playThisNote8(pitch, index);
 24972  002AE4  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 24973  002AE8  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 24974  002AEA  EC3C  F013         	call	_playThisNote8
 24975                           
 24976                           ;keyboard.c: 1381: keyboard.SW3 = 1;
 24977  002AEE  0100               	movlb	0	; () banked
 24978  002AF0  85D0               	bsf	_keyboard& (0+255),2,b
 24979  002AF2                     l1741:
 24980                           
 24981                           ; BSR set to: 0
 24982                           ;keyboard.c: 1382: }
 24983                           ;keyboard.c: 1383: if((button_state_now & 0x00000010) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW5){
 24984                           
 24985                           ; BSR set to: 0
 24986  002AF2  B9D8               	btfsc	_button_state_now& (0+255),4,b
 24987                           
 24988                           ; BSR set to: 0
 24989  002AF4  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 24990  002AF6  D00E               	goto	l1742
 24991                           
 24992                           ; BSR set to: 0
 24993  002AF8  B9D0               	btfsc	_keyboard& (0+255),4,b
 24994  002AFA  D00C               	goto	l1742
 24995                           
 24996                           ; BSR set to: 0
 24997                           ;keyboard.c: 1384: pitch = E;
 24998  002AFC  0E04               	movlw	4
 24999  002AFE  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25000                           
 25001                           ;keyboard.c: 1385: index = 2;
 25002  002B00  0E02               	movlw	2
 25003  002B02  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25004                           
 25005                           ; BSR set to: 0
 25006                           ;keyboard.c: 1386: ON_OFF = 1;
 25007  002B04  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25008                           
 25009                           ; BSR set to: 0
 25010                           ;keyboard.c: 1387: playThisNote8(pitch, index);
 25011  002B06  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25012  002B0A  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25013  002B0C  EC3C  F013         	call	_playThisNote8
 25014                           
 25015                           ;keyboard.c: 1388: keyboard.SW5 = 5;
 25016  002B10  0100               	movlb	0	; () banked
 25017  002B12  89D0               	bsf	_keyboard& (0+255),4,b
 25018  002B14                     l1742:
 25019                           
 25020                           ; BSR set to: 0
 25021                           ;keyboard.c: 1389: }
 25022                           ;keyboard.c: 1390: if((button_state_now & 0x00000020) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW6){
 25023                           
 25024                           ; BSR set to: 0
 25025  002B14  BBD8               	btfsc	_button_state_now& (0+255),5,b
 25026                           
 25027                           ; BSR set to: 0
 25028  002B16  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25029  002B18  D00E               	goto	l1743
 25030                           
 25031                           ; BSR set to: 0
 25032  002B1A  BBD0               	btfsc	_keyboard& (0+255),5,b
 25033  002B1C  D00C               	goto	l1743
 25034                           
 25035                           ; BSR set to: 0
 25036                           ;keyboard.c: 1391: pitch = F;
 25037  002B1E  0E05               	movlw	5
 25038  002B20  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25039                           
 25040                           ;keyboard.c: 1392: index = 3;
 25041  002B22  0E03               	movlw	3
 25042  002B24  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25043                           
 25044                           ; BSR set to: 0
 25045                           ;keyboard.c: 1393: ON_OFF = 1;
 25046  002B26  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25047                           
 25048                           ; BSR set to: 0
 25049                           ;keyboard.c: 1394: playThisNote8(pitch, index);
 25050  002B28  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25051  002B2C  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25052  002B2E  EC3C  F013         	call	_playThisNote8
 25053                           
 25054                           ;keyboard.c: 1395: keyboard.SW6 = 1;
 25055  002B32  0100               	movlb	0	; () banked
 25056  002B34  8BD0               	bsf	_keyboard& (0+255),5,b
 25057  002B36                     l1743:
 25058                           
 25059                           ; BSR set to: 0
 25060                           ;keyboard.c: 1396: }
 25061                           ;keyboard.c: 1397: if((button_state_now & 0x00000080) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW8){
 25062                           
 25063                           ; BSR set to: 0
 25064  002B36  BFD8               	btfsc	_button_state_now& (0+255),7,b
 25065                           
 25066                           ; BSR set to: 0
 25067  002B38  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25068  002B3A  D00E               	goto	l1744
 25069                           
 25070                           ; BSR set to: 0
 25071  002B3C  BFD0               	btfsc	_keyboard& (0+255),7,b
 25072  002B3E  D00C               	goto	l1744
 25073                           
 25074                           ; BSR set to: 0
 25075                           ;keyboard.c: 1398: pitch = G;
 25076  002B40  0E07               	movlw	7
 25077  002B42  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25078                           
 25079                           ;keyboard.c: 1399: index = 4;
 25080  002B44  0E04               	movlw	4
 25081  002B46  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25082                           
 25083                           ; BSR set to: 0
 25084                           ;keyboard.c: 1400: ON_OFF = 1;
 25085  002B48  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25086                           
 25087                           ; BSR set to: 0
 25088                           ;keyboard.c: 1401: playThisNote8(pitch, index);
 25089  002B4A  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25090  002B4E  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25091  002B50  EC3C  F013         	call	_playThisNote8
 25092                           
 25093                           ;keyboard.c: 1402: keyboard.SW8 = 1;
 25094  002B54  0100               	movlb	0	; () banked
 25095  002B56  8FD0               	bsf	_keyboard& (0+255),7,b
 25096  002B58                     l1744:
 25097                           
 25098                           ; BSR set to: 0
 25099                           ;keyboard.c: 1403: }
 25100                           ;keyboard.c: 1404: if((button_state_now & 0x00000200) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW10){
 25101                           
 25102                           ; BSR set to: 0
 25103  002B58  B3D9               	btfsc	(_button_state_now+1)& (0+255),1,b
 25104                           
 25105                           ; BSR set to: 0
 25106  002B5A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25107  002B5C  D00E               	goto	l1745
 25108                           
 25109                           ; BSR set to: 0
 25110  002B5E  B3D1               	btfsc	(_keyboard+1)& (0+255),1,b
 25111  002B60  D00C               	goto	l1745
 25112                           
 25113                           ; BSR set to: 0
 25114                           ;keyboard.c: 1405: pitch = A;
 25115  002B62  0E09               	movlw	9
 25116  002B64  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25117                           
 25118                           ;keyboard.c: 1406: index = 5;
 25119  002B66  0E05               	movlw	5
 25120  002B68  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25121                           
 25122                           ; BSR set to: 0
 25123                           ;keyboard.c: 1407: ON_OFF = 1;
 25124  002B6A  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25125                           
 25126                           ; BSR set to: 0
 25127                           ;keyboard.c: 1408: playThisNote8(pitch, index);
 25128  002B6C  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25129  002B70  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25130  002B72  EC3C  F013         	call	_playThisNote8
 25131                           
 25132                           ;keyboard.c: 1409: keyboard.SW10 = 1;
 25133  002B76  0100               	movlb	0	; () banked
 25134  002B78  83D1               	bsf	(_keyboard+1)& (0+255),1,b
 25135  002B7A                     l1745:
 25136                           
 25137                           ; BSR set to: 0
 25138                           ;keyboard.c: 1410: }
 25139                           ;keyboard.c: 1411: if((button_state_now & 0x00000800) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW12){
 25140                           
 25141                           ; BSR set to: 0
 25142  002B7A  B7D9               	btfsc	(_button_state_now+1)& (0+255),3,b
 25143                           
 25144                           ; BSR set to: 0
 25145  002B7C  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25146  002B7E  D00E               	goto	l1746
 25147                           
 25148                           ; BSR set to: 0
 25149  002B80  B7D1               	btfsc	(_keyboard+1)& (0+255),3,b
 25150  002B82  D00C               	goto	l1746
 25151                           
 25152                           ; BSR set to: 0
 25153                           ;keyboard.c: 1412: pitch = B;
 25154  002B84  0E0B               	movlw	11
 25155  002B86  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25156                           
 25157                           ;keyboard.c: 1413: index = 6;
 25158  002B88  0E06               	movlw	6
 25159  002B8A  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25160                           
 25161                           ; BSR set to: 0
 25162                           ;keyboard.c: 1414: ON_OFF = 1;
 25163  002B8C  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25164                           
 25165                           ; BSR set to: 0
 25166                           ;keyboard.c: 1415: playThisNote8(pitch, index);
 25167  002B8E  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25168  002B92  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25169  002B94  EC3C  F013         	call	_playThisNote8
 25170                           
 25171                           ;keyboard.c: 1416: keyboard.SW12 = 1;
 25172  002B98  0100               	movlb	0	; () banked
 25173  002B9A  87D1               	bsf	(_keyboard+1)& (0+255),3,b
 25174  002B9C                     l1746:
 25175                           
 25176                           ; BSR set to: 0
 25177                           ;keyboard.c: 1417: }
 25178                           ;keyboard.c: 1418: if((button_state_now & 0x00001000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW13){
 25179                           
 25180                           ; BSR set to: 0
 25181  002B9C  B9D9               	btfsc	(_button_state_now+1)& (0+255),4,b
 25182                           
 25183                           ; BSR set to: 0
 25184  002B9E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25185  002BA0  D00E               	goto	l1747
 25186                           
 25187                           ; BSR set to: 0
 25188  002BA2  B9D1               	btfsc	(_keyboard+1)& (0+255),4,b
 25189  002BA4  D00C               	goto	l1747
 25190                           
 25191                           ; BSR set to: 0
 25192                           ;keyboard.c: 1419: pitch = C2;
 25193  002BA6  0E0C               	movlw	12
 25194  002BA8  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25195                           
 25196                           ;keyboard.c: 1420: index = 7;
 25197  002BAA  0E07               	movlw	7
 25198  002BAC  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25199                           
 25200                           ; BSR set to: 0
 25201                           ;keyboard.c: 1421: ON_OFF = 1;
 25202  002BAE  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25203                           
 25204                           ; BSR set to: 0
 25205                           ;keyboard.c: 1422: playThisNote8(pitch, index);
 25206  002BB0  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25207  002BB4  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25208  002BB6  EC3C  F013         	call	_playThisNote8
 25209                           
 25210                           ;keyboard.c: 1423: keyboard.SW13 = 1;
 25211  002BBA  0100               	movlb	0	; () banked
 25212  002BBC  89D1               	bsf	(_keyboard+1)& (0+255),4,b
 25213  002BBE                     l1747:
 25214                           
 25215                           ; BSR set to: 0
 25216                           ;keyboard.c: 1424: }
 25217                           ;keyboard.c: 1425: if((button_state_now & 0x00004000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW15){
 25218                           
 25219                           ; BSR set to: 0
 25220  002BBE  BDD9               	btfsc	(_button_state_now+1)& (0+255),6,b
 25221                           
 25222                           ; BSR set to: 0
 25223  002BC0  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25224  002BC2  D00E               	goto	l1748
 25225                           
 25226                           ; BSR set to: 0
 25227  002BC4  BDD1               	btfsc	(_keyboard+1)& (0+255),6,b
 25228  002BC6  D00C               	goto	l1748
 25229                           
 25230                           ; BSR set to: 0
 25231                           ;keyboard.c: 1426: pitch = D2;
 25232  002BC8  0E0E               	movlw	14
 25233  002BCA  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25234                           
 25235                           ;keyboard.c: 1427: index = 8;
 25236  002BCC  0E08               	movlw	8
 25237  002BCE  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25238                           
 25239                           ; BSR set to: 0
 25240                           ;keyboard.c: 1428: ON_OFF = 1;
 25241  002BD0  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25242                           
 25243                           ; BSR set to: 0
 25244                           ;keyboard.c: 1429: playThisNote8(pitch, index);
 25245  002BD2  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25246  002BD6  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25247  002BD8  EC3C  F013         	call	_playThisNote8
 25248                           
 25249                           ;keyboard.c: 1430: keyboard.SW15 = 1;
 25250  002BDC  0100               	movlb	0	; () banked
 25251  002BDE  8DD1               	bsf	(_keyboard+1)& (0+255),6,b
 25252  002BE0                     l1748:
 25253                           
 25254                           ; BSR set to: 0
 25255                           ;keyboard.c: 1431: }
 25256                           ;keyboard.c: 1432: if((button_state_now & 0x00010000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW17){
 25257                           
 25258                           ; BSR set to: 0
 25259  002BE0  B1DA               	btfsc	(_button_state_now+2)& (0+255),0,b
 25260                           
 25261                           ; BSR set to: 0
 25262  002BE2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25263  002BE4  D00E               	goto	l1749
 25264                           
 25265                           ; BSR set to: 0
 25266  002BE6  B1D2               	btfsc	(_keyboard+2)& (0+255),0,b
 25267  002BE8  D00C               	goto	l1749
 25268                           
 25269                           ; BSR set to: 0
 25270                           ;keyboard.c: 1433: pitch = E2;
 25271  002BEA  0E10               	movlw	16
 25272  002BEC  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25273                           
 25274                           ;keyboard.c: 1434: index = 9;
 25275  002BEE  0E09               	movlw	9
 25276  002BF0  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25277                           
 25278                           ; BSR set to: 0
 25279                           ;keyboard.c: 1435: ON_OFF = 1;
 25280  002BF2  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25281                           
 25282                           ; BSR set to: 0
 25283                           ;keyboard.c: 1436: playThisNote8(pitch, index);
 25284  002BF4  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25285  002BF8  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25286  002BFA  EC3C  F013         	call	_playThisNote8
 25287                           
 25288                           ;keyboard.c: 1437: keyboard.SW17 = 1;
 25289  002BFE  0100               	movlb	0	; () banked
 25290  002C00  81D2               	bsf	(_keyboard+2)& (0+255),0,b
 25291  002C02                     l1749:
 25292                           
 25293                           ; BSR set to: 0
 25294                           ;keyboard.c: 1438: }
 25295                           ;keyboard.c: 1439: if((button_state_now & 0x00020000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW18){
 25296                           
 25297                           ; BSR set to: 0
 25298  002C02  B3DA               	btfsc	(_button_state_now+2)& (0+255),1,b
 25299                           
 25300                           ; BSR set to: 0
 25301  002C04  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25302  002C06  D00E               	goto	l1750
 25303                           
 25304                           ; BSR set to: 0
 25305  002C08  B3D2               	btfsc	(_keyboard+2)& (0+255),1,b
 25306  002C0A  D00C               	goto	l1750
 25307                           
 25308                           ; BSR set to: 0
 25309                           ;keyboard.c: 1440: pitch = F2;
 25310  002C0C  0E11               	movlw	17
 25311  002C0E  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25312                           
 25313                           ;keyboard.c: 1441: index = 10;
 25314  002C10  0E0A               	movlw	10
 25315  002C12  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25316                           
 25317                           ; BSR set to: 0
 25318                           ;keyboard.c: 1442: ON_OFF = 1;
 25319  002C14  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25320                           
 25321                           ; BSR set to: 0
 25322                           ;keyboard.c: 1443: playThisNote8(pitch, index);
 25323  002C16  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25324  002C1A  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25325  002C1C  EC3C  F013         	call	_playThisNote8
 25326                           
 25327                           ;keyboard.c: 1444: keyboard.SW18 = 1;
 25328  002C20  0100               	movlb	0	; () banked
 25329  002C22  83D2               	bsf	(_keyboard+2)& (0+255),1,b
 25330  002C24                     l1750:
 25331                           
 25332                           ; BSR set to: 0
 25333                           ;keyboard.c: 1445: }
 25334                           ;keyboard.c: 1446: if((button_state_now & 0x00080000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW20){
 25335                           
 25336                           ; BSR set to: 0
 25337  002C24  B7DA               	btfsc	(_button_state_now+2)& (0+255),3,b
 25338                           
 25339                           ; BSR set to: 0
 25340  002C26  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25341  002C28  D00E               	goto	l1751
 25342                           
 25343                           ; BSR set to: 0
 25344  002C2A  B7D2               	btfsc	(_keyboard+2)& (0+255),3,b
 25345  002C2C  D00C               	goto	l1751
 25346                           
 25347                           ; BSR set to: 0
 25348                           ;keyboard.c: 1447: pitch = G2;
 25349  002C2E  0E13               	movlw	19
 25350  002C30  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25351                           
 25352                           ;keyboard.c: 1448: index = 11;
 25353  002C32  0E0B               	movlw	11
 25354  002C34  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25355                           
 25356                           ; BSR set to: 0
 25357                           ;keyboard.c: 1449: ON_OFF = 1;
 25358  002C36  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25359                           
 25360                           ; BSR set to: 0
 25361                           ;keyboard.c: 1450: playThisNote8(pitch, index);
 25362  002C38  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25363  002C3C  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25364  002C3E  EC3C  F013         	call	_playThisNote8
 25365                           
 25366                           ;keyboard.c: 1451: keyboard.SW20 = 1;
 25367  002C42  0100               	movlb	0	; () banked
 25368  002C44  87D2               	bsf	(_keyboard+2)& (0+255),3,b
 25369  002C46                     l1751:
 25370                           
 25371                           ; BSR set to: 0
 25372                           ;keyboard.c: 1452: }
 25373                           ;keyboard.c: 1453: if((button_state_now & 0x00200000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW22){
 25374                           
 25375                           ; BSR set to: 0
 25376  002C46  BBDA               	btfsc	(_button_state_now+2)& (0+255),5,b
 25377                           
 25378                           ; BSR set to: 0
 25379  002C48  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25380  002C4A  D00E               	goto	l1752
 25381                           
 25382                           ; BSR set to: 0
 25383  002C4C  BBD2               	btfsc	(_keyboard+2)& (0+255),5,b
 25384  002C4E  D00C               	goto	l1752
 25385                           
 25386                           ; BSR set to: 0
 25387                           ;keyboard.c: 1454: pitch = A2;
 25388  002C50  0E15               	movlw	21
 25389  002C52  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25390                           
 25391                           ;keyboard.c: 1455: index = 12;
 25392  002C54  0E0C               	movlw	12
 25393  002C56  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25394                           
 25395                           ; BSR set to: 0
 25396                           ;keyboard.c: 1456: ON_OFF = 1;
 25397  002C58  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25398                           
 25399                           ; BSR set to: 0
 25400                           ;keyboard.c: 1457: playThisNote8(pitch, index);
 25401  002C5A  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25402  002C5E  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25403  002C60  EC3C  F013         	call	_playThisNote8
 25404                           
 25405                           ;keyboard.c: 1458: keyboard.SW22 = 1;
 25406  002C64  0100               	movlb	0	; () banked
 25407  002C66  8BD2               	bsf	(_keyboard+2)& (0+255),5,b
 25408  002C68                     l1752:
 25409                           
 25410                           ; BSR set to: 0
 25411                           ;keyboard.c: 1459: }
 25412                           ;keyboard.c: 1460: if((button_state_now & 0x00800000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW24){
 25413                           
 25414                           ; BSR set to: 0
 25415  002C68  BFDA               	btfsc	(_button_state_now+2)& (0+255),7,b
 25416                           
 25417                           ; BSR set to: 0
 25418  002C6A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25419  002C6C  D00E               	goto	l1753
 25420                           
 25421                           ; BSR set to: 0
 25422  002C6E  BFD2               	btfsc	(_keyboard+2)& (0+255),7,b
 25423  002C70  D00C               	goto	l1753
 25424                           
 25425                           ; BSR set to: 0
 25426                           ;keyboard.c: 1461: pitch = B2;
 25427  002C72  0E17               	movlw	23
 25428  002C74  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25429                           
 25430                           ;keyboard.c: 1462: index = 13;
 25431  002C76  0E0D               	movlw	13
 25432  002C78  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25433                           
 25434                           ; BSR set to: 0
 25435                           ;keyboard.c: 1463: ON_OFF = 1;
 25436  002C7A  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25437                           
 25438                           ; BSR set to: 0
 25439                           ;keyboard.c: 1464: playThisNote8(pitch, index);
 25440  002C7C  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25441  002C80  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25442  002C82  EC3C  F013         	call	_playThisNote8
 25443                           
 25444                           ;keyboard.c: 1465: keyboard.SW24 = 1;
 25445  002C86  0100               	movlb	0	; () banked
 25446  002C88  8FD2               	bsf	(_keyboard+2)& (0+255),7,b
 25447  002C8A                     l1753:
 25448                           
 25449                           ; BSR set to: 0
 25450                           ;keyboard.c: 1466: }
 25451                           ;keyboard.c: 1467: if((button_state_now & 0x01000000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW25){
 25452                           
 25453                           ; BSR set to: 0
 25454  002C8A  B1DB               	btfsc	(_button_state_now+3)& (0+255),0,b
 25455                           
 25456                           ; BSR set to: 0
 25457  002C8C  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25458  002C8E  D00E               	goto	l1754
 25459                           
 25460                           ; BSR set to: 0
 25461  002C90  B1D3               	btfsc	(_keyboard+3)& (0+255),0,b
 25462  002C92  D00C               	goto	l1754
 25463                           
 25464                           ; BSR set to: 0
 25465                           ;keyboard.c: 1468: pitch = C3;
 25466  002C94  0E18               	movlw	24
 25467  002C96  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25468                           
 25469                           ;keyboard.c: 1469: index = 14;
 25470  002C98  0E0E               	movlw	14
 25471  002C9A  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25472                           
 25473                           ; BSR set to: 0
 25474                           ;keyboard.c: 1470: ON_OFF = 1;
 25475  002C9C  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25476                           
 25477                           ; BSR set to: 0
 25478                           ;keyboard.c: 1471: playThisNote8(pitch, index);
 25479  002C9E  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25480  002CA2  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25481  002CA4  EC3C  F013         	call	_playThisNote8
 25482                           
 25483                           ;keyboard.c: 1472: keyboard.SW25 = 1;
 25484  002CA8  0100               	movlb	0	; () banked
 25485  002CAA  81D3               	bsf	(_keyboard+3)& (0+255),0,b
 25486  002CAC                     l1754:
 25487                           
 25488                           ; BSR set to: 0
 25489                           ;keyboard.c: 1473: }
 25490                           ;keyboard.c: 1476: if(((button_state_last & 0x00000001)) && ((button_state_now & 0x00000
      +                          001) == 0) && keyboard.SW1) {
 25491                           
 25492                           ; BSR set to: 0
 25493  002CAC  B1D4               	btfsc	_button_state_last& (0+255),0,b
 25494                           
 25495                           ; BSR set to: 0
 25496  002CAE  B1D8               	btfsc	_button_state_now& (0+255),0,b
 25497  002CB0  D00E               	goto	l1755
 25498                           
 25499                           ; BSR set to: 0
 25500  002CB2  A1D0               	btfss	_keyboard& (0+255),0,b
 25501  002CB4  D00C               	goto	l1755
 25502                           
 25503                           ; BSR set to: 0
 25504                           ;keyboard.c: 1477: pitch = C;
 25505  002CB6  0E00               	movlw	0
 25506  002CB8  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25507                           
 25508                           ;keyboard.c: 1478: index = 0;
 25509  002CBA  0E00               	movlw	0
 25510  002CBC  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25511                           
 25512                           ; BSR set to: 0
 25513                           ;keyboard.c: 1479: ON_OFF = 0;
 25514  002CBE  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25515                           
 25516                           ; BSR set to: 0
 25517                           ;keyboard.c: 1480: playThisNote8(pitch, index);
 25518  002CC0  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25519  002CC4  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25520  002CC6  EC3C  F013         	call	_playThisNote8
 25521                           
 25522                           ;keyboard.c: 1481: keyboard.SW1 = 0;
 25523  002CCA  0100               	movlb	0	; () banked
 25524  002CCC  91D0               	bcf	_keyboard& (0+255),0,b
 25525  002CCE                     l1755:
 25526                           
 25527                           ; BSR set to: 0
 25528                           ;keyboard.c: 1482: }
 25529                           ;keyboard.c: 1483: if(((button_state_last & 0x00000004)) && ((button_state_now & 0x00000
      +                          004) == 0) && keyboard.SW3) {
 25530                           
 25531                           ; BSR set to: 0
 25532  002CCE  B5D4               	btfsc	_button_state_last& (0+255),2,b
 25533                           
 25534                           ; BSR set to: 0
 25535  002CD0  B5D8               	btfsc	_button_state_now& (0+255),2,b
 25536  002CD2  D00E               	goto	l1756
 25537                           
 25538                           ; BSR set to: 0
 25539  002CD4  A5D0               	btfss	_keyboard& (0+255),2,b
 25540  002CD6  D00C               	goto	l1756
 25541                           
 25542                           ; BSR set to: 0
 25543                           ;keyboard.c: 1484: pitch = D;
 25544  002CD8  0E02               	movlw	2
 25545  002CDA  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25546                           
 25547                           ;keyboard.c: 1485: index = 1;
 25548  002CDC  0E01               	movlw	1
 25549  002CDE  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25550                           
 25551                           ; BSR set to: 0
 25552                           ;keyboard.c: 1486: ON_OFF = 0;
 25553  002CE0  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25554                           
 25555                           ; BSR set to: 0
 25556                           ;keyboard.c: 1487: playThisNote8(pitch, index);
 25557  002CE2  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25558  002CE6  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25559  002CE8  EC3C  F013         	call	_playThisNote8
 25560                           
 25561                           ;keyboard.c: 1488: keyboard.SW3 = 0;
 25562  002CEC  0100               	movlb	0	; () banked
 25563  002CEE  95D0               	bcf	_keyboard& (0+255),2,b
 25564  002CF0                     l1756:
 25565                           
 25566                           ; BSR set to: 0
 25567                           ;keyboard.c: 1489: }
 25568                           ;keyboard.c: 1490: if(((button_state_last & 0x00000010)) && ((button_state_now & 0x00000
      +                          010) == 0) && keyboard.SW5) {
 25569                           
 25570                           ; BSR set to: 0
 25571  002CF0  B9D4               	btfsc	_button_state_last& (0+255),4,b
 25572                           
 25573                           ; BSR set to: 0
 25574  002CF2  B9D8               	btfsc	_button_state_now& (0+255),4,b
 25575  002CF4  D00E               	goto	l1757
 25576                           
 25577                           ; BSR set to: 0
 25578  002CF6  A9D0               	btfss	_keyboard& (0+255),4,b
 25579  002CF8  D00C               	goto	l1757
 25580                           
 25581                           ; BSR set to: 0
 25582                           ;keyboard.c: 1491: pitch = E;
 25583  002CFA  0E04               	movlw	4
 25584  002CFC  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25585                           
 25586                           ;keyboard.c: 1492: index = 2;
 25587  002CFE  0E02               	movlw	2
 25588  002D00  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25589                           
 25590                           ; BSR set to: 0
 25591                           ;keyboard.c: 1493: ON_OFF = 0;
 25592  002D02  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25593                           
 25594                           ; BSR set to: 0
 25595                           ;keyboard.c: 1494: playThisNote8(pitch, index);
 25596  002D04  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25597  002D08  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25598  002D0A  EC3C  F013         	call	_playThisNote8
 25599                           
 25600                           ;keyboard.c: 1495: keyboard.SW5 = 0;
 25601  002D0E  0100               	movlb	0	; () banked
 25602  002D10  99D0               	bcf	_keyboard& (0+255),4,b
 25603  002D12                     l1757:
 25604                           
 25605                           ; BSR set to: 0
 25606                           ;keyboard.c: 1496: }
 25607                           ;keyboard.c: 1497: if(((button_state_last & 0x00000020)) && ((button_state_now & 0x00000
      +                          020) == 0) && keyboard.SW6) {
 25608                           
 25609                           ; BSR set to: 0
 25610  002D12  BBD4               	btfsc	_button_state_last& (0+255),5,b
 25611                           
 25612                           ; BSR set to: 0
 25613  002D14  BBD8               	btfsc	_button_state_now& (0+255),5,b
 25614  002D16  D00E               	goto	l1758
 25615                           
 25616                           ; BSR set to: 0
 25617  002D18  ABD0               	btfss	_keyboard& (0+255),5,b
 25618  002D1A  D00C               	goto	l1758
 25619                           
 25620                           ; BSR set to: 0
 25621                           ;keyboard.c: 1498: pitch = F;
 25622  002D1C  0E05               	movlw	5
 25623  002D1E  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25624                           
 25625                           ;keyboard.c: 1499: index = 3;
 25626  002D20  0E03               	movlw	3
 25627  002D22  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25628                           
 25629                           ; BSR set to: 0
 25630                           ;keyboard.c: 1500: ON_OFF = 0;
 25631  002D24  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25632                           
 25633                           ; BSR set to: 0
 25634                           ;keyboard.c: 1501: playThisNote8(pitch, index);
 25635  002D26  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25636  002D2A  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25637  002D2C  EC3C  F013         	call	_playThisNote8
 25638                           
 25639                           ;keyboard.c: 1502: keyboard.SW6 = 0;
 25640  002D30  0100               	movlb	0	; () banked
 25641  002D32  9BD0               	bcf	_keyboard& (0+255),5,b
 25642  002D34                     l1758:
 25643                           
 25644                           ; BSR set to: 0
 25645                           ;keyboard.c: 1503: }
 25646                           ;keyboard.c: 1504: if(((button_state_last & 0x00000080)) && ((button_state_now & 0x00000
      +                          080) == 0) && keyboard.SW8) {
 25647                           
 25648                           ; BSR set to: 0
 25649  002D34  BFD4               	btfsc	_button_state_last& (0+255),7,b
 25650                           
 25651                           ; BSR set to: 0
 25652  002D36  BFD8               	btfsc	_button_state_now& (0+255),7,b
 25653  002D38  D00E               	goto	l1759
 25654                           
 25655                           ; BSR set to: 0
 25656  002D3A  AFD0               	btfss	_keyboard& (0+255),7,b
 25657  002D3C  D00C               	goto	l1759
 25658                           
 25659                           ; BSR set to: 0
 25660                           ;keyboard.c: 1505: pitch = G;
 25661  002D3E  0E07               	movlw	7
 25662  002D40  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25663                           
 25664                           ;keyboard.c: 1506: index = 4;
 25665  002D42  0E04               	movlw	4
 25666  002D44  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25667                           
 25668                           ; BSR set to: 0
 25669                           ;keyboard.c: 1507: ON_OFF = 0;
 25670  002D46  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25671                           
 25672                           ; BSR set to: 0
 25673                           ;keyboard.c: 1508: playThisNote8(pitch, index);
 25674  002D48  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25675  002D4C  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25676  002D4E  EC3C  F013         	call	_playThisNote8
 25677                           
 25678                           ;keyboard.c: 1509: keyboard.SW8 = 0;
 25679  002D52  0100               	movlb	0	; () banked
 25680  002D54  9FD0               	bcf	_keyboard& (0+255),7,b
 25681  002D56                     l1759:
 25682                           
 25683                           ; BSR set to: 0
 25684                           ;keyboard.c: 1510: }
 25685                           ;keyboard.c: 1511: if(((button_state_last & 0x00000200)) && ((button_state_now & 0x00000
      +                          200) == 0) && keyboard.SW10) {
 25686                           
 25687                           ; BSR set to: 0
 25688  002D56  B3D5               	btfsc	(_button_state_last+1)& (0+255),1,b
 25689                           
 25690                           ; BSR set to: 0
 25691  002D58  B3D9               	btfsc	(_button_state_now+1)& (0+255),1,b
 25692  002D5A  D00E               	goto	l1760
 25693                           
 25694                           ; BSR set to: 0
 25695  002D5C  A3D1               	btfss	(_keyboard+1)& (0+255),1,b
 25696  002D5E  D00C               	goto	l1760
 25697                           
 25698                           ; BSR set to: 0
 25699                           ;keyboard.c: 1512: pitch = A;
 25700  002D60  0E09               	movlw	9
 25701  002D62  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25702                           
 25703                           ;keyboard.c: 1513: index = 5;
 25704  002D64  0E05               	movlw	5
 25705  002D66  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25706                           
 25707                           ; BSR set to: 0
 25708                           ;keyboard.c: 1514: ON_OFF = 0;
 25709  002D68  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25710                           
 25711                           ; BSR set to: 0
 25712                           ;keyboard.c: 1515: playThisNote8(pitch, index);
 25713  002D6A  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25714  002D6E  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25715  002D70  EC3C  F013         	call	_playThisNote8
 25716                           
 25717                           ;keyboard.c: 1516: keyboard.SW10 = 10;
 25718  002D74  0100               	movlb	0	; () banked
 25719  002D76  93D1               	bcf	(_keyboard+1)& (0+255),1,b
 25720  002D78                     l1760:
 25721                           
 25722                           ; BSR set to: 0
 25723                           ;keyboard.c: 1517: }
 25724                           ;keyboard.c: 1518: if(((button_state_last & 0x00000800)) && ((button_state_now & 0x00000
      +                          800) == 0) && keyboard.SW12) {
 25725                           
 25726                           ; BSR set to: 0
 25727  002D78  B7D5               	btfsc	(_button_state_last+1)& (0+255),3,b
 25728                           
 25729                           ; BSR set to: 0
 25730  002D7A  B7D9               	btfsc	(_button_state_now+1)& (0+255),3,b
 25731  002D7C  D00E               	goto	l1761
 25732                           
 25733                           ; BSR set to: 0
 25734  002D7E  A7D1               	btfss	(_keyboard+1)& (0+255),3,b
 25735  002D80  D00C               	goto	l1761
 25736                           
 25737                           ; BSR set to: 0
 25738                           ;keyboard.c: 1519: pitch = B;
 25739  002D82  0E0B               	movlw	11
 25740  002D84  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25741                           
 25742                           ;keyboard.c: 1520: index = 6;
 25743  002D86  0E06               	movlw	6
 25744  002D88  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25745                           
 25746                           ; BSR set to: 0
 25747                           ;keyboard.c: 1521: ON_OFF = 0;
 25748  002D8A  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25749                           
 25750                           ; BSR set to: 0
 25751                           ;keyboard.c: 1522: playThisNote8(pitch, index);
 25752  002D8C  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25753  002D90  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25754  002D92  EC3C  F013         	call	_playThisNote8
 25755                           
 25756                           ;keyboard.c: 1523: keyboard.SW12 = 0;
 25757  002D96  0100               	movlb	0	; () banked
 25758  002D98  97D1               	bcf	(_keyboard+1)& (0+255),3,b
 25759  002D9A                     l1761:
 25760                           
 25761                           ; BSR set to: 0
 25762                           ;keyboard.c: 1524: }
 25763                           ;keyboard.c: 1525: if(((button_state_last & 0x00001000)) && ((button_state_now & 0x00001
      +                          000) == 0) && keyboard.SW13) {
 25764                           
 25765                           ; BSR set to: 0
 25766  002D9A  B9D5               	btfsc	(_button_state_last+1)& (0+255),4,b
 25767                           
 25768                           ; BSR set to: 0
 25769  002D9C  B9D9               	btfsc	(_button_state_now+1)& (0+255),4,b
 25770  002D9E  D00E               	goto	l1762
 25771                           
 25772                           ; BSR set to: 0
 25773  002DA0  A9D1               	btfss	(_keyboard+1)& (0+255),4,b
 25774  002DA2  D00C               	goto	l1762
 25775                           
 25776                           ; BSR set to: 0
 25777                           ;keyboard.c: 1526: pitch = C2;
 25778  002DA4  0E0C               	movlw	12
 25779  002DA6  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25780                           
 25781                           ;keyboard.c: 1527: index = 7;
 25782  002DA8  0E07               	movlw	7
 25783  002DAA  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25784                           
 25785                           ; BSR set to: 0
 25786                           ;keyboard.c: 1528: ON_OFF = 0;
 25787  002DAC  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25788                           
 25789                           ; BSR set to: 0
 25790                           ;keyboard.c: 1529: playThisNote8(pitch, index);
 25791  002DAE  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25792  002DB2  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25793  002DB4  EC3C  F013         	call	_playThisNote8
 25794                           
 25795                           ;keyboard.c: 1530: keyboard.SW13 = 0;
 25796  002DB8  0100               	movlb	0	; () banked
 25797  002DBA  99D1               	bcf	(_keyboard+1)& (0+255),4,b
 25798  002DBC                     l1762:
 25799                           
 25800                           ; BSR set to: 0
 25801                           ;keyboard.c: 1531: }
 25802                           ;keyboard.c: 1532: if(((button_state_last & 0x00004000)) && ((button_state_now & 0x00004
      +                          000) == 0) && keyboard.SW15) {
 25803                           
 25804                           ; BSR set to: 0
 25805  002DBC  BDD5               	btfsc	(_button_state_last+1)& (0+255),6,b
 25806                           
 25807                           ; BSR set to: 0
 25808  002DBE  BDD9               	btfsc	(_button_state_now+1)& (0+255),6,b
 25809  002DC0  D00E               	goto	l1763
 25810                           
 25811                           ; BSR set to: 0
 25812  002DC2  ADD1               	btfss	(_keyboard+1)& (0+255),6,b
 25813  002DC4  D00C               	goto	l1763
 25814                           
 25815                           ; BSR set to: 0
 25816                           ;keyboard.c: 1533: pitch = D2;
 25817  002DC6  0E0E               	movlw	14
 25818  002DC8  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25819                           
 25820                           ;keyboard.c: 1534: index = 8;
 25821  002DCA  0E08               	movlw	8
 25822  002DCC  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25823                           
 25824                           ; BSR set to: 0
 25825                           ;keyboard.c: 1535: ON_OFF = 0;
 25826  002DCE  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25827                           
 25828                           ; BSR set to: 0
 25829                           ;keyboard.c: 1536: playThisNote8(pitch, index);
 25830  002DD0  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25831  002DD4  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25832  002DD6  EC3C  F013         	call	_playThisNote8
 25833                           
 25834                           ;keyboard.c: 1537: keyboard.SW15 = 0;
 25835  002DDA  0100               	movlb	0	; () banked
 25836  002DDC  9DD1               	bcf	(_keyboard+1)& (0+255),6,b
 25837  002DDE                     l1763:
 25838                           
 25839                           ; BSR set to: 0
 25840                           ;keyboard.c: 1538: }
 25841                           ;keyboard.c: 1539: if(((button_state_last & 0x00010000)) && ((button_state_now & 0x00010
      +                          000) == 0) && keyboard.SW17) {
 25842                           
 25843                           ; BSR set to: 0
 25844  002DDE  B1D6               	btfsc	(_button_state_last+2)& (0+255),0,b
 25845                           
 25846                           ; BSR set to: 0
 25847  002DE0  B1DA               	btfsc	(_button_state_now+2)& (0+255),0,b
 25848  002DE2  D00E               	goto	l1764
 25849                           
 25850                           ; BSR set to: 0
 25851  002DE4  A1D2               	btfss	(_keyboard+2)& (0+255),0,b
 25852  002DE6  D00C               	goto	l1764
 25853                           
 25854                           ; BSR set to: 0
 25855                           ;keyboard.c: 1540: pitch = E2;
 25856  002DE8  0E10               	movlw	16
 25857  002DEA  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25858                           
 25859                           ;keyboard.c: 1541: index = 9;
 25860  002DEC  0E09               	movlw	9
 25861  002DEE  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25862                           
 25863                           ; BSR set to: 0
 25864                           ;keyboard.c: 1542: ON_OFF = 0;
 25865  002DF0  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25866                           
 25867                           ; BSR set to: 0
 25868                           ;keyboard.c: 1543: playThisNote8(pitch, index);
 25869  002DF2  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25870  002DF6  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25871  002DF8  EC3C  F013         	call	_playThisNote8
 25872                           
 25873                           ;keyboard.c: 1544: keyboard.SW17 = 0;
 25874  002DFC  0100               	movlb	0	; () banked
 25875  002DFE  91D2               	bcf	(_keyboard+2)& (0+255),0,b
 25876  002E00                     l1764:
 25877                           
 25878                           ; BSR set to: 0
 25879                           ;keyboard.c: 1545: }
 25880                           ;keyboard.c: 1546: if(((button_state_last & 0x00020000)) && ((button_state_now & 0x00020
      +                          000) == 0) && keyboard.SW18) {
 25881                           
 25882                           ; BSR set to: 0
 25883  002E00  B3D6               	btfsc	(_button_state_last+2)& (0+255),1,b
 25884                           
 25885                           ; BSR set to: 0
 25886  002E02  B3DA               	btfsc	(_button_state_now+2)& (0+255),1,b
 25887  002E04  D00E               	goto	l1765
 25888                           
 25889                           ; BSR set to: 0
 25890  002E06  A3D2               	btfss	(_keyboard+2)& (0+255),1,b
 25891  002E08  D00C               	goto	l1765
 25892                           
 25893                           ; BSR set to: 0
 25894                           ;keyboard.c: 1547: pitch = F2;
 25895  002E0A  0E11               	movlw	17
 25896  002E0C  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25897                           
 25898                           ;keyboard.c: 1548: index = 10;
 25899  002E0E  0E0A               	movlw	10
 25900  002E10  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25901                           
 25902                           ; BSR set to: 0
 25903                           ;keyboard.c: 1549: ON_OFF = 0;
 25904  002E12  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25905                           
 25906                           ; BSR set to: 0
 25907                           ;keyboard.c: 1550: playThisNote8(pitch, index);
 25908  002E14  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25909  002E18  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25910  002E1A  EC3C  F013         	call	_playThisNote8
 25911                           
 25912                           ;keyboard.c: 1551: keyboard.SW18 = 0;
 25913  002E1E  0100               	movlb	0	; () banked
 25914  002E20  93D2               	bcf	(_keyboard+2)& (0+255),1,b
 25915  002E22                     l1765:
 25916                           
 25917                           ; BSR set to: 0
 25918                           ;keyboard.c: 1552: }
 25919                           ;keyboard.c: 1553: if(((button_state_last & 0x00080000)) && ((button_state_now & 0x00080
      +                          000) == 0) && keyboard.SW20) {
 25920                           
 25921                           ; BSR set to: 0
 25922  002E22  B7D6               	btfsc	(_button_state_last+2)& (0+255),3,b
 25923                           
 25924                           ; BSR set to: 0
 25925  002E24  B7DA               	btfsc	(_button_state_now+2)& (0+255),3,b
 25926  002E26  D00E               	goto	l1766
 25927                           
 25928                           ; BSR set to: 0
 25929  002E28  A7D2               	btfss	(_keyboard+2)& (0+255),3,b
 25930  002E2A  D00C               	goto	l1766
 25931                           
 25932                           ; BSR set to: 0
 25933                           ;keyboard.c: 1554: pitch = G2;
 25934  002E2C  0E13               	movlw	19
 25935  002E2E  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25936                           
 25937                           ;keyboard.c: 1555: index = 11;
 25938  002E30  0E0B               	movlw	11
 25939  002E32  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25940                           
 25941                           ; BSR set to: 0
 25942                           ;keyboard.c: 1556: ON_OFF = 0;
 25943  002E34  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25944                           
 25945                           ; BSR set to: 0
 25946                           ;keyboard.c: 1557: playThisNote8(pitch, index);
 25947  002E36  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25948  002E3A  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25949  002E3C  EC3C  F013         	call	_playThisNote8
 25950                           
 25951                           ;keyboard.c: 1558: keyboard.SW20 = 0;
 25952  002E40  0100               	movlb	0	; () banked
 25953  002E42  97D2               	bcf	(_keyboard+2)& (0+255),3,b
 25954  002E44                     l1766:
 25955                           
 25956                           ; BSR set to: 0
 25957                           ;keyboard.c: 1559: }
 25958                           ;keyboard.c: 1560: if(((button_state_last & 0x00200000)) && ((button_state_now & 0x00200
      +                          000) == 0) && keyboard.SW22) {
 25959                           
 25960                           ; BSR set to: 0
 25961  002E44  BBD6               	btfsc	(_button_state_last+2)& (0+255),5,b
 25962                           
 25963                           ; BSR set to: 0
 25964  002E46  BBDA               	btfsc	(_button_state_now+2)& (0+255),5,b
 25965  002E48  D00E               	goto	l1767
 25966                           
 25967                           ; BSR set to: 0
 25968  002E4A  ABD2               	btfss	(_keyboard+2)& (0+255),5,b
 25969  002E4C  D00C               	goto	l1767
 25970                           
 25971                           ; BSR set to: 0
 25972                           ;keyboard.c: 1561: pitch = A2;
 25973  002E4E  0E15               	movlw	21
 25974  002E50  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25975                           
 25976                           ;keyboard.c: 1562: index = 12;
 25977  002E52  0E0C               	movlw	12
 25978  002E54  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25979                           
 25980                           ; BSR set to: 0
 25981                           ;keyboard.c: 1563: ON_OFF = 0;
 25982  002E56  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25983                           
 25984                           ; BSR set to: 0
 25985                           ;keyboard.c: 1564: playThisNote8(pitch, index);
 25986  002E58  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25987  002E5C  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25988  002E5E  EC3C  F013         	call	_playThisNote8
 25989                           
 25990                           ;keyboard.c: 1565: keyboard.SW22 = 0;
 25991  002E62  0100               	movlb	0	; () banked
 25992  002E64  9BD2               	bcf	(_keyboard+2)& (0+255),5,b
 25993  002E66                     l1767:
 25994                           
 25995                           ; BSR set to: 0
 25996                           ;keyboard.c: 1566: }
 25997                           ;keyboard.c: 1567: if(((button_state_last & 0x00800000)) && ((button_state_now & 0x00800
      +                          000) == 0) && keyboard.SW24) {
 25998                           
 25999                           ; BSR set to: 0
 26000  002E66  BFD6               	btfsc	(_button_state_last+2)& (0+255),7,b
 26001                           
 26002                           ; BSR set to: 0
 26003  002E68  BFDA               	btfsc	(_button_state_now+2)& (0+255),7,b
 26004  002E6A  D00E               	goto	l1768
 26005                           
 26006                           ; BSR set to: 0
 26007  002E6C  AFD2               	btfss	(_keyboard+2)& (0+255),7,b
 26008  002E6E  D00C               	goto	l1768
 26009                           
 26010                           ; BSR set to: 0
 26011                           ;keyboard.c: 1568: pitch = B2;
 26012  002E70  0E17               	movlw	23
 26013  002E72  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 26014                           
 26015                           ;keyboard.c: 1569: index = 13;
 26016  002E74  0E0D               	movlw	13
 26017  002E76  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 26018                           
 26019                           ; BSR set to: 0
 26020                           ;keyboard.c: 1570: ON_OFF = 0;
 26021  002E78  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26022                           
 26023                           ; BSR set to: 0
 26024                           ;keyboard.c: 1571: playThisNote8(pitch, index);
 26025  002E7A  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 26026  002E7E  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 26027  002E80  EC3C  F013         	call	_playThisNote8
 26028                           
 26029                           ;keyboard.c: 1572: keyboard.SW24 = 0;
 26030  002E84  0100               	movlb	0	; () banked
 26031  002E86  9FD2               	bcf	(_keyboard+2)& (0+255),7,b
 26032  002E88                     l1768:
 26033                           
 26034                           ; BSR set to: 0
 26035                           ;keyboard.c: 1573: }
 26036                           ;keyboard.c: 1574: if(((button_state_last & 0x01000000)) && ((button_state_now & 0x01000
      +                          000) == 0) && keyboard.SW25) {
 26037                           
 26038                           ; BSR set to: 0
 26039  002E88  A1D7               	btfss	(_button_state_last+3)& (0+255),0,b
 26040  002E8A  0012               	return	
 26041                           
 26042                           ; BSR set to: 0
 26043  002E8C  B1DB               	btfsc	(_button_state_now+3)& (0+255),0,b
 26044  002E8E  0012               	return	
 26045                           
 26046                           ; BSR set to: 0
 26047  002E90  A1D3               	btfss	(_keyboard+3)& (0+255),0,b
 26048  002E92  0012               	return	
 26049                           
 26050                           ; BSR set to: 0
 26051                           ;keyboard.c: 1575: pitch = C;
 26052  002E94  0E00               	movlw	0
 26053  002E96  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 26054                           
 26055                           ;keyboard.c: 1576: index = 14;
 26056  002E98  0E0E               	movlw	14
 26057  002E9A  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 26058                           
 26059                           ; BSR set to: 0
 26060                           ;keyboard.c: 1577: ON_OFF = 0;
 26061  002E9C  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26062                           
 26063                           ; BSR set to: 0
 26064                           ;keyboard.c: 1578: playThisNote8(pitch, index);
 26065  002E9E  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 26066  002EA2  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 26067  002EA4  EC3C  F013         	call	_playThisNote8
 26068                           
 26069                           ;keyboard.c: 1579: keyboard.SW25 = 0;
 26070  002EA8  0100               	movlb	0	; () banked
 26071  002EAA  91D3               	bcf	(_keyboard+3)& (0+255),0,b
 26072  002EAC  0012               	return	
 26073  002EAE                     __end_of_keyboard_eight_note_efficient:
 26074                           	opt stack 0
 26075                           tblptru	equ	0xFF8
 26076                           tblptrh	equ	0xFF7
 26077                           tblptrl	equ	0xFF6
 26078                           tablat	equ	0xFF5
 26079                           prodh	equ	0xFF4
 26080                           prodl	equ	0xFF3
 26081                           intcon	equ	0xFF2
 26082                           intcon2	equ	0xFF1
 26083                           postinc0	equ	0xFEE
 26084                           wreg	equ	0xFE8
 26085                           postinc1	equ	0xFE6
 26086                           plusw1	equ	0xFE3
 26087                           fsr1h	equ	0xFE2
 26088                           fsr1l	equ	0xFE1
 26089                           indf2	equ	0xFDF
 26090                           postinc2	equ	0xFDE
 26091                           postdec2	equ	0xFDD
 26092                           plusw2	equ	0xFDB
 26093                           fsr2h	equ	0xFDA
 26094                           fsr2l	equ	0xFD9
 26095                           status	equ	0xFD8
 26096                           
 26097 ;; *************** function _playThisNote8 *****************
 26098 ;; Defined at:
 26099 ;;		line 902 in file "keyboard.c"
 26100 ;; Parameters:    Size  Location     Type
 26101 ;;  pitch           1    wreg     unsigned char 
 26102 ;;  index           1   17[BANK0 ] unsigned char 
 26103 ;; Auto vars:     Size  Location     Type
 26104 ;;  pitch           1   22[BANK0 ] unsigned char 
 26105 ;;  temp_pitch      1   23[BANK0 ] unsigned char 
 26106 ;;  mode_p          2   24[BANK0 ] PTR unsigned char 
 26107 ;;		 -> locrian_key(15), aeolian_key(15), mixolydian_key(15), lydian_key(15), 
 26108 ;;		 -> phrygian_key(15), dorian_key(15), ionian_key(15), 
 26109 ;; Return value:  Size  Location     Type
 26110 ;;                  1    wreg      void 
 26111 ;; Registers used:
 26112 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26113 ;; Tracked objects:
 26114 ;;		On entry : 0/0
 26115 ;;		On exit  : 0/0
 26116 ;;		Unchanged: 0/0
 26117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 26118 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26119 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26120 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26121 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26122 ;;Total ram usage:        9 bytes
 26123 ;; Hardware stack levels used:    1
 26124 ;; Hardware stack levels required when called:   11
 26125 ;; This function calls:
 26126 ;;		_add_notes_to_arpeggio
 26127 ;;		_delete_notes_from_arpeggio
 26128 ;;		_finish_arpeggio_setup
 26129 ;;		_key_press_release_note_off
 26130 ;;		_noteOff
 26131 ;;		_noteOn
 26132 ;;		_playDiatonicSeventhMajor
 26133 ;;		_playDiatonicSeventhMinor
 26134 ;;		_playDiatonicTriadMajor
 26135 ;;		_playDiatonicTriadMinor
 26136 ;;		_wait_one_pulse
 26137 ;; This function is called by:
 26138 ;;		_keyboard_eight_note_efficient
 26139 ;;		_doTheUnLatch
 26140 ;; This function uses a non-reentrant model
 26141 ;;
 26142                           
 26143                           	psect	text72
 26144  002678                     __ptext72:
 26145                           	opt stack 0
 26146  002678                     _playThisNote8:
 26147                           	opt stack 13
 26148                           
 26149                           ; BSR set to: 0
 26150                           ;incstack = 0
 26151                           ;playThisNote8@pitch stored from wreg
 26152  002678  0100               	movlb	0	; () banked
 26153  00267A  6F76               	movwf	playThisNote8@pitch& (0+255),b
 26154                           
 26155                           ;keyboard.c: 904: unsigned char *mode_p;
 26156                           ;keyboard.c: 907: switch (which_mode) {
 26157  00267C  D01E               	goto	l1576
 26158  00267E                     
 26159                           ;keyboard.c: 909: mode_p = ionian_key;
 26160  00267E  0E55               	movlw	low _ionian_key
 26161  002680  0100               	movlb	0	; () banked
 26162  002682  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26163  002684  0EFD               	movlw	high _ionian_key
 26164  002686  D017               	goto	L11
 26165  002688                     
 26166                           ; BSR set to: 0
 26167                           ;keyboard.c: 912: mode_p = dorian_key;
 26168                           
 26169                           ; BSR set to: 0
 26170  002688  0E46               	movlw	low _dorian_key
 26171  00268A  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26172  00268C  0EFD               	movlw	high _dorian_key
 26173  00268E  D013               	goto	L11
 26174  002690                     
 26175                           ; BSR set to: 0
 26176                           ;keyboard.c: 915: mode_p = phrygian_key;
 26177                           
 26178                           ; BSR set to: 0
 26179  002690  0E37               	movlw	low _phrygian_key
 26180  002692  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26181  002694  0EFD               	movlw	high _phrygian_key
 26182  002696  D00F               	goto	L11
 26183  002698                     
 26184                           ; BSR set to: 0
 26185                           ;keyboard.c: 918: mode_p = lydian_key;
 26186                           
 26187                           ; BSR set to: 0
 26188  002698  0E28               	movlw	low _lydian_key
 26189  00269A  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26190  00269C  0EFD               	movlw	high _lydian_key
 26191  00269E  D00B               	goto	L11
 26192  0026A0                     
 26193                           ; BSR set to: 0
 26194                           ;keyboard.c: 921: mode_p = mixolydian_key;
 26195                           
 26196                           ; BSR set to: 0
 26197  0026A0  0E19               	movlw	low _mixolydian_key
 26198  0026A2  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26199  0026A4  0EFD               	movlw	high _mixolydian_key
 26200  0026A6  D007               	goto	L11
 26201  0026A8                     
 26202                           ; BSR set to: 0
 26203                           ;keyboard.c: 924: mode_p = aeolian_key;
 26204                           
 26205                           ; BSR set to: 0
 26206  0026A8  0E0A               	movlw	low _aeolian_key
 26207  0026AA  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26208  0026AC  0EFD               	movlw	high _aeolian_key
 26209  0026AE  D003               	goto	L11
 26210  0026B0                     
 26211                           ; BSR set to: 0
 26212                           ;keyboard.c: 927: mode_p = locrian_key;
 26213                           
 26214                           ; BSR set to: 0
 26215  0026B0  0EFB               	movlw	low _locrian_key
 26216  0026B2  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26217  0026B4  0EFC               	movlw	high _locrian_key
 26218  0026B6                     L11:
 26219  0026B6  6F79               	movwf	(playThisNote8@mode_p+1)& (0+255),b
 26220                           
 26221                           ; BSR set to: 0
 26222                           ;keyboard.c: 931: }
 26223                           
 26224                           ; BSR set to: 0
 26225                           ;keyboard.c: 930: break;
 26226                           
 26227                           ;keyboard.c: 929: default:
 26228                           
 26229                           ;keyboard.c: 928: break;
 26230  0026B8  D017               	goto	l1578
 26231  0026BA                     l1576:
 26232                           
 26233                           ; BSR set to: 0
 26234  0026BA  0100               	movlb	0	; () banked
 26235  0026BC  51F1               	movf	_which_mode& (0+255),w,b
 26236                           
 26237                           ; Switch size 1, requested type "space"
 26238                           ; Number of cases is 7, Range of values is 0 to 6
 26239                           ; switch strategies available:
 26240                           ; Name         Instructions Cycles
 26241                           ; simple_byte           22    12 (average)
 26242                           ;	Chosen strategy is simple_byte
 26243  0026BE  0A00               	xorlw	0	; case 0
 26244  0026C0  B4D8               	btfsc	status,2,c
 26245  0026C2  D7DD               	goto	l1577
 26246  0026C4  0A01               	xorlw	1	; case 1
 26247  0026C6  B4D8               	btfsc	status,2,c
 26248  0026C8  D7DF               	goto	l1579
 26249  0026CA  0A03               	xorlw	3	; case 2
 26250  0026CC  B4D8               	btfsc	status,2,c
 26251  0026CE  D7E0               	goto	l1580
 26252  0026D0  0A01               	xorlw	1	; case 3
 26253  0026D2  B4D8               	btfsc	status,2,c
 26254  0026D4  D7E1               	goto	l1581
 26255  0026D6  0A07               	xorlw	7	; case 4
 26256  0026D8  B4D8               	btfsc	status,2,c
 26257  0026DA  D7E2               	goto	l1582
 26258  0026DC  0A01               	xorlw	1	; case 5
 26259  0026DE  B4D8               	btfsc	status,2,c
 26260  0026E0  D7E3               	goto	l1583
 26261  0026E2  0A03               	xorlw	3	; case 6
 26262  0026E4  B4D8               	btfsc	status,2,c
 26263  0026E6  D7E4               	goto	l1584
 26264  0026E8                     l1578:
 26265                           
 26266                           ; BSR set to: 0
 26267                           ;keyboard.c: 934: if(ARPEGGIO_ON == 0){
 26268  0026E8  B804               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 26269  0026EA  D0D8               	goto	l1599
 26270                           
 26271                           ; BSR set to: 0
 26272                           ;keyboard.c: 936: if(KEYBOARD_MODE == MAJOR) {
 26273  0026EC  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 26274  0026EE  A4D8               	btfss	status,2,c
 26275  0026F0  D027               	goto	l1589
 26276                           
 26277                           ; BSR set to: 0
 26278                           ;keyboard.c: 937: if(ON_OFF == 1) {noteOn(channel,major_key[index],velocity);}
 26279  0026F2  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26280  0026F4  D011               	goto	l1588
 26281                           
 26282                           ; BSR set to: 0
 26283  0026F6  5051               	movf	_velocity,w,c
 26284  0026F8  6EE6               	movwf	postinc1,c
 26285  0026FA  5171               	movf	playThisNote8@index& (0+255),w,b
 26286  0026FC  0D01               	mullw	1
 26287  0026FE  0E78               	movlw	low _major_key
 26288  002700  24F3               	addwf	prodl,w,c
 26289  002702  6EF6               	movwf	tblptrl,c
 26290  002704  0EF3               	movlw	high _major_key
 26291  002706  20F4               	addwfc	prodh,w,c
 26292  002708  6EF7               	movwf	tblptrh,c
 26293  00270A                     	if	0	;There are less than 3 active tblptr bytes
 26294  00270A                     	endif
 26295  00270A  0008               	tblrd		*
 26296  00270C  50F5               	movf	tablat,w,c
 26297  00270E  6EE6               	movwf	postinc1,c
 26298  002710  503E               	movf	_channel,w,c
 26299  002712  6EE6               	movwf	postinc1,c
 26300  002714  ECF8  F044         	call	_noteOn	;wreg free
 26301  002718                     l1588:
 26302                           
 26303                           ;keyboard.c: 938: if(ON_OFF == 0) {noteOff(channel,major_key[index],velocity);}
 26304  002718  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26305  00271A  D012               	goto	l1589
 26306  00271C  5051               	movf	_velocity,w,c
 26307  00271E  6EE6               	movwf	postinc1,c
 26308  002720  0100               	movlb	0	; () banked
 26309  002722  5171               	movf	playThisNote8@index& (0+255),w,b
 26310  002724  0D01               	mullw	1
 26311  002726  0E78               	movlw	low _major_key
 26312  002728  24F3               	addwf	prodl,w,c
 26313  00272A  6EF6               	movwf	tblptrl,c
 26314  00272C  0EF3               	movlw	high _major_key
 26315  00272E  20F4               	addwfc	prodh,w,c
 26316  002730  6EF7               	movwf	tblptrh,c
 26317  002732                     	if	0	;There are less than 3 active tblptr bytes
 26318  002732                     	endif
 26319  002732  0008               	tblrd		*
 26320  002734  50F5               	movf	tablat,w,c
 26321  002736  6EE6               	movwf	postinc1,c
 26322  002738  503E               	movf	_channel,w,c
 26323  00273A  6EE6               	movwf	postinc1,c
 26324  00273C  ECAD  F049         	call	_noteOff	;wreg free
 26325  002740                     l1589:
 26326                           
 26327                           ;keyboard.c: 939: }
 26328                           ;keyboard.c: 941: if(KEYBOARD_MODE == MINOR) {
 26329  002740  0E02               	movlw	2
 26330  002742  0100               	movlb	0	; () banked
 26331  002744  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26332  002746  A4D8               	btfss	status,2,c
 26333  002748  D027               	goto	l1592
 26334                           
 26335                           ; BSR set to: 0
 26336                           ;keyboard.c: 942: if(ON_OFF == 1) {noteOn(channel,minor_key[index],velocity);}
 26337  00274A  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26338  00274C  D011               	goto	l1591
 26339                           
 26340                           ; BSR set to: 0
 26341  00274E  5051               	movf	_velocity,w,c
 26342  002750  6EE6               	movwf	postinc1,c
 26343  002752  5171               	movf	playThisNote8@index& (0+255),w,b
 26344  002754  0D01               	mullw	1
 26345  002756  0E69               	movlw	low _minor_key
 26346  002758  24F3               	addwf	prodl,w,c
 26347  00275A  6EF6               	movwf	tblptrl,c
 26348  00275C  0EF3               	movlw	high _minor_key
 26349  00275E  20F4               	addwfc	prodh,w,c
 26350  002760  6EF7               	movwf	tblptrh,c
 26351  002762                     	if	0	;There are less than 3 active tblptr bytes
 26352  002762                     	endif
 26353  002762  0008               	tblrd		*
 26354  002764  50F5               	movf	tablat,w,c
 26355  002766  6EE6               	movwf	postinc1,c
 26356  002768  503E               	movf	_channel,w,c
 26357  00276A  6EE6               	movwf	postinc1,c
 26358  00276C  ECF8  F044         	call	_noteOn	;wreg free
 26359  002770                     l1591:
 26360                           
 26361                           ;keyboard.c: 943: if(ON_OFF == 0) {noteOff(channel,minor_key[index],velocity);}
 26362  002770  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26363  002772  D012               	goto	l1592
 26364  002774  5051               	movf	_velocity,w,c
 26365  002776  6EE6               	movwf	postinc1,c
 26366  002778  0100               	movlb	0	; () banked
 26367  00277A  5171               	movf	playThisNote8@index& (0+255),w,b
 26368  00277C  0D01               	mullw	1
 26369  00277E  0E69               	movlw	low _minor_key
 26370  002780  24F3               	addwf	prodl,w,c
 26371  002782  6EF6               	movwf	tblptrl,c
 26372  002784  0EF3               	movlw	high _minor_key
 26373  002786  20F4               	addwfc	prodh,w,c
 26374  002788  6EF7               	movwf	tblptrh,c
 26375  00278A                     	if	0	;There are less than 3 active tblptr bytes
 26376  00278A                     	endif
 26377  00278A  0008               	tblrd		*
 26378  00278C  50F5               	movf	tablat,w,c
 26379  00278E  6EE6               	movwf	postinc1,c
 26380  002790  503E               	movf	_channel,w,c
 26381  002792  6EE6               	movwf	postinc1,c
 26382  002794  ECAD  F049         	call	_noteOff	;wreg free
 26383  002798                     l1592:
 26384                           
 26385                           ;keyboard.c: 944: }
 26386                           ;keyboard.c: 946: if(KEYBOARD_MODE == MODES) {
 26387  002798  0E03               	movlw	3
 26388  00279A  0100               	movlb	0	; () banked
 26389  00279C  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26390  00279E  A4D8               	btfss	status,2,c
 26391  0027A0  D07D               	goto	l1599
 26392                           
 26393                           ; BSR set to: 0
 26394                           ;keyboard.c: 947: if(index == 0) {
 26395  0027A2  5171               	movf	playThisNote8@index& (0+255),w,b
 26396  0027A4  A4D8               	btfss	status,2,c
 26397  0027A6  D033               	goto	l1596
 26398                           
 26399                           ; BSR set to: 0
 26400                           ;keyboard.c: 948: if(ON_OFF == 1) {noteOn(channel,mode_p[index],velocity);}
 26401  0027A8  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26402  0027AA  D017               	goto	l1595
 26403                           
 26404                           ; BSR set to: 0
 26405  0027AC  5051               	movf	_velocity,w,c
 26406  0027AE  6EE6               	movwf	postinc1,c
 26407  0027B0  5171               	movf	playThisNote8@index& (0+255),w,b
 26408  0027B2  0D01               	mullw	1
 26409  0027B4  C078  F072         	movff	playThisNote8@mode_p,??_playThisNote8
 26410  0027B8  C079  F073         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 26411  0027BC  50F3               	movf	prodl,w,c
 26412  0027BE  2772               	addwf	??_playThisNote8& (0+255),f,b
 26413  0027C0  50F4               	movf	prodh,w,c
 26414  0027C2  2373               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 26415  0027C4  C072  FFF6         	movff	??_playThisNote8,tblptrl
 26416  0027C8  C073  FFF7         	movff	??_playThisNote8+1,tblptrh
 26417  0027CC                     	if	0	;tblptru may be non-zero
 26418  0027CC                     	endif
 26419  0027CC                     	if	0	;tblptru may be non-zero
 26420  0027CC                     	endif
 26421  0027CC  0008               	tblrd		*
 26422  0027CE  50F5               	movf	tablat,w,c
 26423  0027D0  6EE6               	movwf	postinc1,c
 26424  0027D2  503E               	movf	_channel,w,c
 26425  0027D4  6EE6               	movwf	postinc1,c
 26426  0027D6  ECF8  F044         	call	_noteOn	;wreg free
 26427  0027DA                     l1595:
 26428                           
 26429                           ;keyboard.c: 949: if(ON_OFF == 0) {noteOff(channel,mode_p[index],velocity);}
 26430  0027DA  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26431  0027DC  D018               	goto	l1596
 26432  0027DE  5051               	movf	_velocity,w,c
 26433  0027E0  6EE6               	movwf	postinc1,c
 26434  0027E2  0100               	movlb	0	; () banked
 26435  0027E4  5171               	movf	playThisNote8@index& (0+255),w,b
 26436  0027E6  0D01               	mullw	1
 26437  0027E8  C078  F072         	movff	playThisNote8@mode_p,??_playThisNote8
 26438  0027EC  C079  F073         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 26439  0027F0  50F3               	movf	prodl,w,c
 26440  0027F2  2772               	addwf	??_playThisNote8& (0+255),f,b
 26441  0027F4  50F4               	movf	prodh,w,c
 26442  0027F6  2373               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 26443  0027F8  C072  FFF6         	movff	??_playThisNote8,tblptrl
 26444  0027FC  C073  FFF7         	movff	??_playThisNote8+1,tblptrh
 26445  002800                     	if	0	;tblptru may be non-zero
 26446  002800                     	endif
 26447  002800                     	if	0	;tblptru may be non-zero
 26448  002800                     	endif
 26449  002800  0008               	tblrd		*
 26450  002802  50F5               	movf	tablat,w,c
 26451  002804  6EE6               	movwf	postinc1,c
 26452  002806  503E               	movf	_channel,w,c
 26453  002808  6EE6               	movwf	postinc1,c
 26454  00280A  ECAD  F049         	call	_noteOff	;wreg free
 26455  00280E                     l1596:
 26456                           
 26457                           ;keyboard.c: 950: }
 26458                           ;keyboard.c: 951: if(index > 0) {
 26459  00280E  0100               	movlb	0	; () banked
 26460  002810  5171               	movf	playThisNote8@index& (0+255),w,b
 26461  002812  B4D8               	btfsc	status,2,c
 26462  002814  D043               	goto	l1599
 26463                           
 26464                           ; BSR set to: 0
 26465                           ;keyboard.c: 952: if(ON_OFF == 1) {noteOn(channel,mode_p[0] + mode_p[index],velocity);}
 26466  002816  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26467  002818  D01F               	goto	l1598
 26468                           
 26469                           ; BSR set to: 0
 26470  00281A  5051               	movf	_velocity,w,c
 26471  00281C  6EE6               	movwf	postinc1,c
 26472  00281E  5171               	movf	playThisNote8@index& (0+255),w,b
 26473  002820  0D01               	mullw	1
 26474  002822  C078  F072         	movff	playThisNote8@mode_p,??_playThisNote8
 26475  002826  C079  F073         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 26476  00282A  50F3               	movf	prodl,w,c
 26477  00282C  2772               	addwf	??_playThisNote8& (0+255),f,b
 26478  00282E  50F4               	movf	prodh,w,c
 26479  002830  2373               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 26480  002832  C072  FFF6         	movff	??_playThisNote8,tblptrl
 26481  002836  C073  FFF7         	movff	??_playThisNote8+1,tblptrh
 26482  00283A                     	if	0	;tblptru may be non-zero
 26483  00283A                     	endif
 26484  00283A                     	if	0	;tblptru may be non-zero
 26485  00283A                     	endif
 26486  00283A  0008               	tblrd		*
 26487  00283C  CFF5 F074          	movff	tablat,??_playThisNote8+2
 26488  002840  C078  FFF6         	movff	playThisNote8@mode_p,tblptrl
 26489  002844  C079  FFF7         	movff	playThisNote8@mode_p+1,tblptrh
 26490  002848                     	if	0	;tblptru may be non-zero
 26491  002848                     	endif
 26492  002848                     	if	0	;tblptru may be non-zero
 26493  002848                     	endif
 26494  002848  0008               	tblrd		*
 26495  00284A  50F5               	movf	tablat,w,c
 26496  00284C  2574               	addwf	(??_playThisNote8+2)& (0+255),w,b
 26497  00284E  6EE6               	movwf	postinc1,c
 26498  002850  503E               	movf	_channel,w,c
 26499  002852  6EE6               	movwf	postinc1,c
 26500  002854  ECF8  F044         	call	_noteOn	;wreg free
 26501  002858                     l1598:
 26502                           
 26503                           ;keyboard.c: 953: if(ON_OFF == 0) {noteOff(channel,mode_p[0] + mode_p[index],velocity);}
 26504  002858  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26505  00285A  D020               	goto	l1599
 26506  00285C  5051               	movf	_velocity,w,c
 26507  00285E  6EE6               	movwf	postinc1,c
 26508  002860  0100               	movlb	0	; () banked
 26509  002862  5171               	movf	playThisNote8@index& (0+255),w,b
 26510  002864  0D01               	mullw	1
 26511  002866  C078  F072         	movff	playThisNote8@mode_p,??_playThisNote8
 26512  00286A  C079  F073         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 26513  00286E  50F3               	movf	prodl,w,c
 26514  002870  2772               	addwf	??_playThisNote8& (0+255),f,b
 26515  002872  50F4               	movf	prodh,w,c
 26516  002874  2373               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 26517  002876  C072  FFF6         	movff	??_playThisNote8,tblptrl
 26518  00287A  C073  FFF7         	movff	??_playThisNote8+1,tblptrh
 26519  00287E                     	if	0	;tblptru may be non-zero
 26520  00287E                     	endif
 26521  00287E                     	if	0	;tblptru may be non-zero
 26522  00287E                     	endif
 26523  00287E  0008               	tblrd		*
 26524  002880  CFF5 F074          	movff	tablat,??_playThisNote8+2
 26525  002884  C078  FFF6         	movff	playThisNote8@mode_p,tblptrl
 26526  002888  C079  FFF7         	movff	playThisNote8@mode_p+1,tblptrh
 26527  00288C                     	if	0	;tblptru may be non-zero
 26528  00288C                     	endif
 26529  00288C                     	if	0	;tblptru may be non-zero
 26530  00288C                     	endif
 26531  00288C  0008               	tblrd		*
 26532  00288E  50F5               	movf	tablat,w,c
 26533  002890  2574               	addwf	(??_playThisNote8+2)& (0+255),w,b
 26534  002892  6EE6               	movwf	postinc1,c
 26535  002894  503E               	movf	_channel,w,c
 26536  002896  6EE6               	movwf	postinc1,c
 26537  002898  ECAD  F049         	call	_noteOff	;wreg free
 26538  00289C                     l1599:
 26539                           
 26540                           ;keyboard.c: 954: }
 26541                           ;keyboard.c: 955: }
 26542                           ;keyboard.c: 956: }
 26543                           ;keyboard.c: 959: if(ARPEGGIO_ON == 1){
 26544  00289C  A804               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 26545  00289E  D0DD               	goto	l1613
 26546                           
 26547                           ;keyboard.c: 961: unsigned char temp_pitch;
 26548                           ;keyboard.c: 963: if(KEYBOARD_MODE == MAJOR) {
 26549  0028A0  0100               	movlb	0	; () banked
 26550  0028A2  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 26551  0028A4  A4D8               	btfss	status,2,c
 26552  0028A6  D00B               	goto	l1601
 26553                           
 26554                           ; BSR set to: 0
 26555                           ;keyboard.c: 964: temp_pitch = major_key[index];
 26556  0028A8  5171               	movf	playThisNote8@index& (0+255),w,b
 26557  0028AA  0D01               	mullw	1
 26558  0028AC  0E78               	movlw	low _major_key
 26559  0028AE  24F3               	addwf	prodl,w,c
 26560  0028B0  6EF6               	movwf	tblptrl,c
 26561  0028B2  0EF3               	movlw	high _major_key
 26562  0028B4  20F4               	addwfc	prodh,w,c
 26563  0028B6  6EF7               	movwf	tblptrh,c
 26564  0028B8                     	if	0	;There are less than 3 active tblptr bytes
 26565  0028B8                     	endif
 26566  0028B8  0008               	tblrd		*
 26567  0028BA  CFF5 F077          	movff	tablat,playThisNote8@temp_pitch
 26568  0028BE                     l1601:
 26569                           
 26570                           ; BSR set to: 0
 26571                           ;keyboard.c: 965: }
 26572                           ;keyboard.c: 967: if(KEYBOARD_MODE == MINOR) {
 26573                           
 26574                           ; BSR set to: 0
 26575  0028BE  0E02               	movlw	2
 26576  0028C0  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26577  0028C2  A4D8               	btfss	status,2,c
 26578  0028C4  D00B               	goto	l1602
 26579                           
 26580                           ; BSR set to: 0
 26581                           ;keyboard.c: 968: temp_pitch = minor_key[index];
 26582  0028C6  5171               	movf	playThisNote8@index& (0+255),w,b
 26583  0028C8  0D01               	mullw	1
 26584  0028CA  0E69               	movlw	low _minor_key
 26585  0028CC  24F3               	addwf	prodl,w,c
 26586  0028CE  6EF6               	movwf	tblptrl,c
 26587  0028D0  0EF3               	movlw	high _minor_key
 26588  0028D2  20F4               	addwfc	prodh,w,c
 26589  0028D4  6EF7               	movwf	tblptrh,c
 26590  0028D6                     	if	0	;There are less than 3 active tblptr bytes
 26591  0028D6                     	endif
 26592  0028D6  0008               	tblrd		*
 26593  0028D8  CFF5 F077          	movff	tablat,playThisNote8@temp_pitch
 26594  0028DC                     l1602:
 26595                           
 26596                           ; BSR set to: 0
 26597                           ;keyboard.c: 969: }
 26598                           ;keyboard.c: 971: if(KEYBOARD_MODE == MODES) {
 26599                           
 26600                           ; BSR set to: 0
 26601  0028DC  0E03               	movlw	3
 26602  0028DE  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26603  0028E0  A4D8               	btfss	status,2,c
 26604  0028E2  D030               	goto	l1605
 26605                           
 26606                           ; BSR set to: 0
 26607                           ;keyboard.c: 972: if(index == 0){temp_pitch = mode_p[index];}
 26608  0028E4  5171               	movf	playThisNote8@index& (0+255),w,b
 26609  0028E6  A4D8               	btfss	status,2,c
 26610  0028E8  D011               	goto	l1604
 26611                           
 26612                           ; BSR set to: 0
 26613  0028EA  5171               	movf	playThisNote8@index& (0+255),w,b
 26614  0028EC  0D01               	mullw	1
 26615  0028EE  C078  F072         	movff	playThisNote8@mode_p,??_playThisNote8
 26616  0028F2  C079  F073         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 26617  0028F6  50F3               	movf	prodl,w,c
 26618  0028F8  2772               	addwf	??_playThisNote8& (0+255),f,b
 26619  0028FA  50F4               	movf	prodh,w,c
 26620  0028FC  2373               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 26621  0028FE  C072  FFF6         	movff	??_playThisNote8,tblptrl
 26622  002902  C073  FFF7         	movff	??_playThisNote8+1,tblptrh
 26623  002906                     	if	0	;tblptru may be non-zero
 26624  002906                     	endif
 26625  002906                     	if	0	;tblptru may be non-zero
 26626  002906                     	endif
 26627  002906  0008               	tblrd		*
 26628  002908  CFF5 F077          	movff	tablat,playThisNote8@temp_pitch
 26629  00290C                     l1604:
 26630                           
 26631                           ; BSR set to: 0
 26632                           ;keyboard.c: 973: if(index > 0){temp_pitch = (mode_p[0] + mode_p[index]);}
 26633                           
 26634                           ; BSR set to: 0
 26635  00290C  5171               	movf	playThisNote8@index& (0+255),w,b
 26636  00290E  B4D8               	btfsc	status,2,c
 26637  002910  D019               	goto	l1605
 26638                           
 26639                           ; BSR set to: 0
 26640  002912  5171               	movf	playThisNote8@index& (0+255),w,b
 26641  002914  0D01               	mullw	1
 26642  002916  C078  F072         	movff	playThisNote8@mode_p,??_playThisNote8
 26643  00291A  C079  F073         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 26644  00291E  50F3               	movf	prodl,w,c
 26645  002920  2772               	addwf	??_playThisNote8& (0+255),f,b
 26646  002922  50F4               	movf	prodh,w,c
 26647  002924  2373               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 26648  002926  C072  FFF6         	movff	??_playThisNote8,tblptrl
 26649  00292A  C073  FFF7         	movff	??_playThisNote8+1,tblptrh
 26650  00292E                     	if	0	;tblptru may be non-zero
 26651  00292E                     	endif
 26652  00292E                     	if	0	;tblptru may be non-zero
 26653  00292E                     	endif
 26654  00292E  0008               	tblrd		*
 26655  002930  CFF5 F074          	movff	tablat,??_playThisNote8+2
 26656  002934  C078  FFF6         	movff	playThisNote8@mode_p,tblptrl
 26657  002938  C079  FFF7         	movff	playThisNote8@mode_p+1,tblptrh
 26658  00293C                     	if	0	;tblptru may be non-zero
 26659  00293C                     	endif
 26660  00293C                     	if	0	;tblptru may be non-zero
 26661  00293C                     	endif
 26662  00293C  0008               	tblrd		*
 26663  00293E  50F5               	movf	tablat,w,c
 26664  002940  2574               	addwf	(??_playThisNote8+2)& (0+255),w,b
 26665  002942  6F77               	movwf	playThisNote8@temp_pitch& (0+255),b
 26666  002944                     l1605:
 26667                           
 26668                           ; BSR set to: 0
 26669                           ;keyboard.c: 974: }
 26670                           ;keyboard.c: 976: if(ON_OFF == 1) {
 26671                           
 26672                           ; BSR set to: 0
 26673                           
 26674                           ; BSR set to: 0
 26675  002944  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26676  002946  D024               	goto	l1606
 26677                           
 26678                           ; BSR set to: 0
 26679                           ;keyboard.c: 979: TMR0ON = 0;
 26680  002948  9ED5               	bcf	4053,7,c	;volatile
 26681                           
 26682                           ;keyboard.c: 981: parallel = temp_pitch;
 26683  00294A  C077  F030         	movff	playThisNote8@temp_pitch,_parallel
 26684                           
 26685                           ; BSR set to: 0
 26686                           ;keyboard.c: 984: if(NUM_NOTES_PRESSED > 0){
 26687  00294E  502F               	movf	_NUM_NOTES_PRESSED,w,c
 26688  002950  B4D8               	btfsc	status,2,c
 26689  002952  D00A               	goto	l1607
 26690                           
 26691                           ; BSR set to: 0
 26692                           ;keyboard.c: 985: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 26693  002954  0E00               	movlw	0
 26694  002956  B403               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 26695  002958  0E01               	movlw	1
 26696  00295A  EC52  F04B         	call	_wait_one_pulse
 26697                           
 26698                           ;keyboard.c: 986: if(note_off_was_sent == 0) {key_press_release_note_off();}
 26699  00295E  A202               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 26700  002960  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 26701                           
 26702                           ;keyboard.c: 987: TIMER_OVERFLOWS = 0;
 26703  002964  0E00               	movlw	0
 26704  002966  6E2E               	movwf	_TIMER_OVERFLOWS,c
 26705  002968                     l1607:
 26706                           
 26707                           ;keyboard.c: 988: }
 26708                           ;keyboard.c: 991: if((KEYBOARD_MODE == MAJOR) | (KEYBOARD_MODE == MINOR) | (KEYBOARD_MOD
      +                          E == MODES)){
 26709  002968  0100               	movlb	0	; () banked
 26710  00296A  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 26711  00296C  B4D8               	btfsc	status,2,c
 26712  00296E  D008               	goto	u47520
 26713                           
 26714                           ; BSR set to: 0
 26715  002970  0E02               	movlw	2
 26716  002972  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26717  002974  B4D8               	btfsc	status,2,c
 26718  002976  D004               	goto	u47520
 26719                           
 26720                           ; BSR set to: 0
 26721  002978  0E03               	movlw	3
 26722  00297A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26723  00297C  A4D8               	btfss	status,2,c
 26724  00297E  D003               	goto	l1609
 26725  002980                     u47520:
 26726                           
 26727                           ; BSR set to: 0
 26728                           ;keyboard.c: 992: add_notes_to_arpeggio(temp_pitch);
 26729                           
 26730                           ; BSR set to: 0
 26731  002980  5177               	movf	playThisNote8@temp_pitch& (0+255),w,b
 26732  002982  EC57  F034         	call	_add_notes_to_arpeggio
 26733  002986                     l1609:
 26734                           
 26735                           ;keyboard.c: 993: }
 26736                           ;keyboard.c: 996: if(LATCH == 0) {latch_was_pressed = 0;}
 26737  002986  A204               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 26738  002988  9C03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 26739                           
 26740                           ;keyboard.c: 999: finish_arpeggio_setup();
 26741  00298A  ECE7  F04B         	call	_finish_arpeggio_setup	;wreg free
 26742                           
 26743                           ;keyboard.c: 1002: TMR0ON = 1;
 26744  00298E  8ED5               	bsf	4053,7,c	;volatile
 26745  002990                     l1606:
 26746                           
 26747                           ;keyboard.c: 1003: }
 26748                           ;keyboard.c: 1005: if((ON_OFF == 0) && (LATCH == 0)) {
 26749  002990  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26750  002992  B204               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 26751  002994  D062               	goto	l1613
 26752                           
 26753                           ;keyboard.c: 1008: TMR0ON = 0;
 26754  002996  9ED5               	bcf	4053,7,c	;volatile
 26755                           
 26756                           ;keyboard.c: 1011: if(NUM_NOTES_PRESSED > 0){
 26757  002998  502F               	movf	_NUM_NOTES_PRESSED,w,c
 26758  00299A  B4D8               	btfsc	status,2,c
 26759  00299C  D00A               	goto	l1614
 26760                           
 26761                           ;keyboard.c: 1012: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 26762  00299E  0E00               	movlw	0
 26763  0029A0  B203               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 26764  0029A2  0E01               	movlw	1
 26765  0029A4  EC52  F04B         	call	_wait_one_pulse
 26766                           
 26767                           ;keyboard.c: 1013: if(note_off_was_sent == 0) {key_press_release_note_off();}
 26768  0029A8  A202               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 26769  0029AA  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 26770                           
 26771                           ;keyboard.c: 1014: TIMER_OVERFLOWS = 0;
 26772  0029AE  0E00               	movlw	0
 26773  0029B0  6E2E               	movwf	_TIMER_OVERFLOWS,c
 26774  0029B2                     l1614:
 26775                           
 26776                           ;keyboard.c: 1015: }
 26777                           ;keyboard.c: 1018: if((KEYBOARD_MODE == MAJOR) | (KEYBOARD_MODE == MINOR) | (KEYBOARD_MO
      +                          DE == MODES)){
 26778  0029B2  0100               	movlb	0	; () banked
 26779  0029B4  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 26780  0029B6  B4D8               	btfsc	status,2,c
 26781  0029B8  D008               	goto	u47600
 26782                           
 26783                           ; BSR set to: 0
 26784  0029BA  0E02               	movlw	2
 26785  0029BC  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26786  0029BE  B4D8               	btfsc	status,2,c
 26787  0029C0  D004               	goto	u47600
 26788                           
 26789                           ; BSR set to: 0
 26790  0029C2  0E03               	movlw	3
 26791  0029C4  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26792  0029C6  A4D8               	btfss	status,2,c
 26793  0029C8  D003               	goto	l1616
 26794  0029CA                     u47600:
 26795                           
 26796                           ; BSR set to: 0
 26797                           ;keyboard.c: 1019: delete_notes_from_arpeggio(temp_pitch);
 26798                           
 26799                           ; BSR set to: 0
 26800  0029CA  5177               	movf	playThisNote8@temp_pitch& (0+255),w,b
 26801  0029CC  ECBF  F04A         	call	_delete_notes_from_arpeggio
 26802  0029D0                     l1616:
 26803                           
 26804                           ;keyboard.c: 1020: }
 26805                           ;keyboard.c: 1022: if(temp_pitch == parallel){NUM_NOTES_PRESSED = 0;}
 26806  0029D0  C030  F072         	movff	_parallel,??_playThisNote8
 26807  0029D4  0100               	movlb	0	; () banked
 26808  0029D6  6B73               	clrf	(??_playThisNote8+1)& (0+255),b
 26809  0029D8  BF72               	btfsc	??_playThisNote8& (0+255),7,b
 26810  0029DA  0773               	decf	(??_playThisNote8+1)& (0+255),f,b
 26811  0029DC  5177               	movf	playThisNote8@temp_pitch& (0+255),w,b
 26812  0029DE  6F74               	movwf	(??_playThisNote8+2)& (0+255),b
 26813  0029E0  6B75               	clrf	(??_playThisNote8+3)& (0+255),b
 26814  0029E2  5172               	movf	??_playThisNote8& (0+255),w,b
 26815  0029E4  1974               	xorwf	(??_playThisNote8+2)& (0+255),w,b
 26816  0029E6  E106               	bnz	l27266
 26817  0029E8  5173               	movf	(??_playThisNote8+1)& (0+255),w,b
 26818  0029EA  1975               	xorwf	(??_playThisNote8+3)& (0+255),w,b
 26819  0029EC  A4D8               	btfss	status,2,c
 26820  0029EE  D002               	goto	l1619
 26821                           
 26822                           ; BSR set to: 0
 26823  0029F0  0E00               	movlw	0
 26824  0029F2  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 26825  0029F4                     l1619:
 26826  0029F4                     l27266:
 26827                           
 26828                           ; BSR set to: 0
 26829                           ;keyboard.c: 1027: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 26830  0029F4  BE03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 26831                           
 26832                           ; BSR set to: 0
 26833  0029F6  AC03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 26834  0029F8  D001               	goto	l1620
 26835                           
 26836                           ; BSR set to: 0
 26837                           ;keyboard.c: 1028: LATCH = 1;
 26838  0029FA  8204               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 26839  0029FC                     l1620:
 26840                           
 26841                           ; BSR set to: 0
 26842                           ;keyboard.c: 1029: }
 26843                           ;keyboard.c: 1034: if(((KEYBOARD_MODE == MAJOR) | (KEYBOARD_MODE == MINOR) | (KEYBOARD_M
      +                          ODE == MODES)) && (UN_LATCH_MODE == 0) && (latch_was_pressed == 1)){
 26844                           
 26845                           ; BSR set to: 0
 26846  0029FC  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 26847  0029FE  B4D8               	btfsc	status,2,c
 26848  002A00  D008               	goto	u47660
 26849                           
 26850                           ; BSR set to: 0
 26851  002A02  0E02               	movlw	2
 26852  002A04  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26853  002A06  B4D8               	btfsc	status,2,c
 26854  002A08  D004               	goto	u47660
 26855                           
 26856                           ; BSR set to: 0
 26857  002A0A  0E03               	movlw	3
 26858  002A0C  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26859  002A0E  A4D8               	btfss	status,2,c
 26860  002A10  D007               	goto	l1621
 26861  002A12                     u47660:
 26862                           
 26863                           ; BSR set to: 0
 26864  002A12  A004               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 26865                           
 26866                           ; BSR set to: 0
 26867  002A14  AC03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 26868  002A16  D004               	goto	l1621
 26869                           
 26870                           ; BSR set to: 0
 26871                           ;keyboard.c: 1035: NUM_NOTES_PRESSED = 0;
 26872  002A18  0E00               	movlw	0
 26873  002A1A  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 26874                           
 26875                           ;keyboard.c: 1036: ARRAY_INDEX = 0;
 26876  002A1C  0E00               	movlw	0
 26877  002A1E  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 26878  002A20                     l1621:
 26879                           
 26880                           ; BSR set to: 0
 26881                           ;keyboard.c: 1037: }
 26882                           ;keyboard.c: 1040: if((KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) | (KEYBOARD_MODE == DIATON
      +                          IC_TRIAD_MINOR) | (KEYBOARD_MODE == DIATONIC_7TH_MAJOR) |(KEYBOARD_MODE == DIATONIC_7TH_
      +                          MINOR) && ((UN_LATCH_MODE == 0) || (UN_LATCH_MODE == 1)) && (latch_was_pressed == 1)){
 26883                           
 26884                           ; BSR set to: 0
 26885  002A20  0E07               	movlw	7
 26886  002A22  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26887  002A24  B4D8               	btfsc	status,2,c
 26888  002A26  D00C               	goto	u47720
 26889                           
 26890                           ; BSR set to: 0
 26891  002A28  0E08               	movlw	8
 26892  002A2A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26893  002A2C  B4D8               	btfsc	status,2,c
 26894  002A2E  D008               	goto	u47720
 26895                           
 26896                           ; BSR set to: 0
 26897  002A30  0E0A               	movlw	10
 26898  002A32  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26899  002A34  B4D8               	btfsc	status,2,c
 26900  002A36  D004               	goto	u47720
 26901                           
 26902                           ; BSR set to: 0
 26903  002A38  0E0B               	movlw	11
 26904  002A3A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26905  002A3C  A4D8               	btfss	status,2,c
 26906  002A3E  D00A               	goto	l1624
 26907  002A40                     u47720:
 26908                           
 26909                           ; BSR set to: 0
 26910  002A40  A004               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 26911  002A42  D002               	goto	u47740
 26912                           
 26913                           ; BSR set to: 0
 26914  002A44  A004               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 26915  002A46  D006               	goto	l1624
 26916  002A48                     u47740:
 26917                           
 26918                           ; BSR set to: 0
 26919  002A48  AC03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 26920  002A4A  D004               	goto	l1624
 26921                           
 26922                           ; BSR set to: 0
 26923                           ;keyboard.c: 1041: NUM_NOTES_PRESSED = 0;
 26924  002A4C  0E00               	movlw	0
 26925  002A4E  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 26926                           
 26927                           ;keyboard.c: 1042: ARRAY_INDEX = 0;
 26928  002A50  0E00               	movlw	0
 26929  002A52  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 26930  002A54                     l1624:
 26931                           
 26932                           ; BSR set to: 0
 26933                           ;keyboard.c: 1043: }
 26934                           ;keyboard.c: 1046: finish_arpeggio_setup();
 26935                           
 26936                           ; BSR set to: 0
 26937  002A54  ECE7  F04B         	call	_finish_arpeggio_setup	;wreg free
 26938                           
 26939                           ;keyboard.c: 1049: TMR0ON = 1;
 26940  002A58  8ED5               	bsf	4053,7,c	;volatile
 26941  002A5A                     l1613:
 26942                           
 26943                           ;keyboard.c: 1050: }
 26944                           ;keyboard.c: 1051: }
 26945                           ;keyboard.c: 1053: if(KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) {
 26946  002A5A  0E07               	movlw	7
 26947  002A5C  0100               	movlb	0	; () banked
 26948  002A5E  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26949  002A60  A4D8               	btfss	status,2,c
 26950  002A62  D005               	goto	l1629
 26951                           
 26952                           ; BSR set to: 0
 26953                           ;keyboard.c: 1054: playDiatonicTriadMajor(pitch, index);
 26954  002A64  C071  F061         	movff	playThisNote8@index,playDiatonicTriadMajor@index
 26955  002A68  5176               	movf	playThisNote8@pitch& (0+255),w,b
 26956  002A6A  EC66  F02C         	call	_playDiatonicTriadMajor
 26957  002A6E                     l1629:
 26958                           
 26959                           ;keyboard.c: 1055: }
 26960                           ;keyboard.c: 1056: if(KEYBOARD_MODE == DIATONIC_TRIAD_MINOR) {
 26961  002A6E  0E08               	movlw	8
 26962  002A70  0100               	movlb	0	; () banked
 26963  002A72  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26964  002A74  A4D8               	btfss	status,2,c
 26965  002A76  D005               	goto	l1630
 26966                           
 26967                           ; BSR set to: 0
 26968                           ;keyboard.c: 1057: playDiatonicTriadMinor(pitch, index);
 26969  002A78  C071  F061         	movff	playThisNote8@index,playDiatonicTriadMinor@index
 26970  002A7C  5176               	movf	playThisNote8@pitch& (0+255),w,b
 26971  002A7E  ECDB  F022         	call	_playDiatonicTriadMinor
 26972  002A82                     l1630:
 26973                           
 26974                           ;keyboard.c: 1058: }
 26975                           ;keyboard.c: 1059: if(KEYBOARD_MODE == DIATONIC_7TH_MAJOR) {
 26976  002A82  0E0A               	movlw	10
 26977  002A84  0100               	movlb	0	; () banked
 26978  002A86  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26979  002A88  A4D8               	btfss	status,2,c
 26980  002A8A  D005               	goto	l1631
 26981                           
 26982                           ; BSR set to: 0
 26983                           ;keyboard.c: 1060: playDiatonicSeventhMajor(pitch, index);
 26984  002A8C  C071  F061         	movff	playThisNote8@index,playDiatonicSeventhMajor@index
 26985  002A90  5176               	movf	playThisNote8@pitch& (0+255),w,b
 26986  002A92  ECD4  F02A         	call	_playDiatonicSeventhMajor
 26987  002A96                     l1631:
 26988                           
 26989                           ;keyboard.c: 1061: }
 26990                           ;keyboard.c: 1062: if(KEYBOARD_MODE == DIATONIC_7TH_MINOR) {
 26991  002A96  0E0B               	movlw	11
 26992  002A98  0100               	movlb	0	; () banked
 26993  002A9A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26994  002A9C  A4D8               	btfss	status,2,c
 26995  002A9E  0012               	return	
 26996                           
 26997                           ; BSR set to: 0
 26998                           ;keyboard.c: 1063: playDiatonicSeventhMinor(pitch, index);
 26999  002AA0  C071  F061         	movff	playThisNote8@index,playDiatonicSeventhMinor@index
 27000  002AA4  5176               	movf	playThisNote8@pitch& (0+255),w,b
 27001  002AA6  EC0C  F024         	call	_playDiatonicSeventhMinor
 27002  002AAA  0012               	return	
 27003  002AAC                     __end_of_playThisNote8:
 27004                           	opt stack 0
 27005                           tblptru	equ	0xFF8
 27006                           tblptrh	equ	0xFF7
 27007                           tblptrl	equ	0xFF6
 27008                           tablat	equ	0xFF5
 27009                           prodh	equ	0xFF4
 27010                           prodl	equ	0xFF3
 27011                           intcon	equ	0xFF2
 27012                           intcon2	equ	0xFF1
 27013                           postinc0	equ	0xFEE
 27014                           wreg	equ	0xFE8
 27015                           postinc1	equ	0xFE6
 27016                           plusw1	equ	0xFE3
 27017                           fsr1h	equ	0xFE2
 27018                           fsr1l	equ	0xFE1
 27019                           indf2	equ	0xFDF
 27020                           postinc2	equ	0xFDE
 27021                           postdec2	equ	0xFDD
 27022                           plusw2	equ	0xFDB
 27023                           fsr2h	equ	0xFDA
 27024                           fsr2l	equ	0xFD9
 27025                           status	equ	0xFD8
 27026                           
 27027 ;; *************** function _playDiatonicTriadMinor *****************
 27028 ;; Defined at:
 27029 ;;		line 1207 in file "keyboard.c"
 27030 ;; Parameters:    Size  Location     Type
 27031 ;;  pitch           1    wreg     unsigned char 
 27032 ;;  index           1    1[BANK0 ] unsigned char 
 27033 ;; Auto vars:     Size  Location     Type
 27034 ;;  pitch           1    6[BANK0 ] unsigned char 
 27035 ;;  i               1    8[BANK0 ] unsigned char 
 27036 ;;  i               1    7[BANK0 ] unsigned char 
 27037 ;; Return value:  Size  Location     Type
 27038 ;;                  1    wreg      void 
 27039 ;; Registers used:
 27040 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27041 ;; Tracked objects:
 27042 ;;		On entry : 0/0
 27043 ;;		On exit  : 0/0
 27044 ;;		Unchanged: 0/0
 27045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 27046 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27047 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27048 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27049 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27050 ;;Total ram usage:        8 bytes
 27051 ;; Hardware stack levels used:    1
 27052 ;; Hardware stack levels required when called:   10
 27053 ;; This function calls:
 27054 ;;		_finish_arpeggio_setup
 27055 ;;		_key_press_release_note_off
 27056 ;;		_noteOff
 27057 ;;		_noteOn
 27058 ;;		_wait_one_pulse
 27059 ;; This function is called by:
 27060 ;;		_playThisNote8
 27061 ;; This function uses a non-reentrant model
 27062 ;;
 27063                           
 27064                           	psect	text73
 27065  0045B6                     __ptext73:
 27066                           	opt stack 0
 27067  0045B6                     _playDiatonicTriadMinor:
 27068                           	opt stack 13
 27069                           
 27070                           ;incstack = 0
 27071                           ;playDiatonicTriadMinor@pitch stored from wreg
 27072  0045B6  0100               	movlb	0	; () banked
 27073  0045B8  6F66               	movwf	playDiatonicTriadMinor@pitch& (0+255),b
 27074                           
 27075                           ;keyboard.c: 1210: if(ARPEGGIO_ON == 0){
 27076  0045BA  B804               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 27077  0045BC  D08F               	goto	u46100
 27078                           
 27079                           ;keyboard.c: 1211: for(unsigned char i = 0; i<3; i++){
 27080  0045BE  0E00               	movlw	0
 27081  0045C0  0100               	movlb	0	; () banked
 27082  0045C2  6F67               	movwf	playDiatonicTriadMinor@i& (0+255),b
 27083  0045C4                     l26616:
 27084                           
 27085                           ; BSR set to: 0
 27086  0045C4  0E02               	movlw	2
 27087  0045C6  6567               	cpfsgt	playDiatonicTriadMinor@i& (0+255),b
 27088  0045C8  D001               	goto	l1683
 27089  0045CA  D088               	goto	u46100
 27090  0045CC                     l1683:
 27091                           
 27092                           ; BSR set to: 0
 27093                           ;keyboard.c: 1212: if(i==0){
 27094                           
 27095                           ; BSR set to: 0
 27096  0045CC  5167               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 27097  0045CE  A4D8               	btfss	status,2,c
 27098  0045D0  D027               	goto	l1687
 27099                           
 27100                           ; BSR set to: 0
 27101                           ;keyboard.c: 1213: if(ON_OFF == 1) {noteOn(channel,diatonic_minor[index][0],velocity);}
 27102  0045D2  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27103  0045D4  D011               	goto	l1686
 27104                           
 27105                           ; BSR set to: 0
 27106  0045D6  5051               	movf	_velocity,w,c
 27107  0045D8  6EE6               	movwf	postinc1,c
 27108  0045DA  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27109  0045DC  0D03               	mullw	3
 27110  0045DE  0EE3               	movlw	low _diatonic_minor
 27111  0045E0  24F3               	addwf	prodl,w,c
 27112  0045E2  6EF6               	movwf	tblptrl,c
 27113  0045E4  0EF2               	movlw	high _diatonic_minor
 27114  0045E6  20F4               	addwfc	prodh,w,c
 27115  0045E8  6EF7               	movwf	tblptrh,c
 27116  0045EA                     	if	0	;There are less than 3 active tblptr bytes
 27117  0045EA                     	endif
 27118  0045EA  0008               	tblrd		*
 27119  0045EC  50F5               	movf	tablat,w,c
 27120  0045EE  6EE6               	movwf	postinc1,c
 27121  0045F0  503E               	movf	_channel,w,c
 27122  0045F2  6EE6               	movwf	postinc1,c
 27123  0045F4  ECF8  F044         	call	_noteOn	;wreg free
 27124  0045F8                     l1686:
 27125                           
 27126                           ;keyboard.c: 1214: if(ON_OFF == 0) {noteOff(channel,diatonic_minor[index][0],velocity);}
 27127  0045F8  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27128  0045FA  D012               	goto	l1687
 27129  0045FC  5051               	movf	_velocity,w,c
 27130  0045FE  6EE6               	movwf	postinc1,c
 27131  004600  0100               	movlb	0	; () banked
 27132  004602  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27133  004604  0D03               	mullw	3
 27134  004606  0EE3               	movlw	low _diatonic_minor
 27135  004608  24F3               	addwf	prodl,w,c
 27136  00460A  6EF6               	movwf	tblptrl,c
 27137  00460C  0EF2               	movlw	high _diatonic_minor
 27138  00460E  20F4               	addwfc	prodh,w,c
 27139  004610  6EF7               	movwf	tblptrh,c
 27140  004612                     	if	0	;There are less than 3 active tblptr bytes
 27141  004612                     	endif
 27142  004612  0008               	tblrd		*
 27143  004614  50F5               	movf	tablat,w,c
 27144  004616  6EE6               	movwf	postinc1,c
 27145  004618  503E               	movf	_channel,w,c
 27146  00461A  6EE6               	movwf	postinc1,c
 27147  00461C  ECAD  F049         	call	_noteOff	;wreg free
 27148  004620                     l1687:
 27149                           
 27150                           ;keyboard.c: 1215: }
 27151                           ;keyboard.c: 1216: if(i>0){
 27152  004620  0100               	movlb	0	; () banked
 27153  004622  5167               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 27154  004624  B4D8               	btfsc	status,2,c
 27155  004626  D057               	goto	l1690
 27156                           
 27157                           ; BSR set to: 0
 27158                           ;keyboard.c: 1217: if(ON_OFF == 1) noteOn(channel,diatonic_minor[index][0] + diatonic_mi
      +                          nor[index][i],velocity);
 27159  004628  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27160  00462A  D029               	goto	l1689
 27161                           
 27162                           ; BSR set to: 0
 27163  00462C  5051               	movf	_velocity,w,c
 27164  00462E  6EE6               	movwf	postinc1,c
 27165  004630  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27166  004632  0D03               	mullw	3
 27167  004634  0EE3               	movlw	low _diatonic_minor
 27168  004636  6F62               	movwf	??_playDiatonicTriadMinor& (0+255),b
 27169  004638  0EF2               	movlw	high _diatonic_minor
 27170  00463A  6F63               	movwf	(??_playDiatonicTriadMinor+1)& (0+255),b
 27171  00463C  50F3               	movf	prodl,w,c
 27172  00463E  2762               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 27173  004640  50F4               	movf	prodh,w,c
 27174  004642  2363               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27175  004644  5167               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 27176  004646  0D01               	mullw	1
 27177  004648  50F3               	movf	prodl,w,c
 27178  00464A  2762               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 27179  00464C  50F4               	movf	prodh,w,c
 27180  00464E  2363               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27181  004650  C062  FFF6         	movff	??_playDiatonicTriadMinor,tblptrl
 27182  004654  C063  FFF7         	movff	??_playDiatonicTriadMinor+1,tblptrh
 27183  004658                     	if	0	;tblptru may be non-zero
 27184  004658                     	endif
 27185  004658                     	if	0	;tblptru may be non-zero
 27186  004658                     	endif
 27187  004658  0008               	tblrd		*
 27188  00465A  CFF5 F064          	movff	tablat,??_playDiatonicTriadMinor+2
 27189  00465E  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27190  004660  0D03               	mullw	3
 27191  004662  0EE3               	movlw	low _diatonic_minor
 27192  004664  24F3               	addwf	prodl,w,c
 27193  004666  6EF6               	movwf	tblptrl,c
 27194  004668  0EF2               	movlw	high _diatonic_minor
 27195  00466A  20F4               	addwfc	prodh,w,c
 27196  00466C  6EF7               	movwf	tblptrh,c
 27197  00466E                     	if	0	;There are less than 3 active tblptr bytes
 27198  00466E                     	endif
 27199  00466E  0008               	tblrd		*
 27200  004670  50F5               	movf	tablat,w,c
 27201  004672  2564               	addwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 27202  004674  6EE6               	movwf	postinc1,c
 27203  004676  503E               	movf	_channel,w,c
 27204  004678  6EE6               	movwf	postinc1,c
 27205  00467A  ECF8  F044         	call	_noteOn	;wreg free
 27206  00467E                     l1689:
 27207                           
 27208                           ;keyboard.c: 1218: if(ON_OFF == 0) noteOff(channel,diatonic_minor[index][0] + diatonic_m
      +                          inor[index][i],velocity);
 27209  00467E  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27210  004680  D02A               	goto	l1690
 27211  004682  5051               	movf	_velocity,w,c
 27212  004684  6EE6               	movwf	postinc1,c
 27213  004686  0100               	movlb	0	; () banked
 27214  004688  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27215  00468A  0D03               	mullw	3
 27216  00468C  0EE3               	movlw	low _diatonic_minor
 27217  00468E  6F62               	movwf	??_playDiatonicTriadMinor& (0+255),b
 27218  004690  0EF2               	movlw	high _diatonic_minor
 27219  004692  6F63               	movwf	(??_playDiatonicTriadMinor+1)& (0+255),b
 27220  004694  50F3               	movf	prodl,w,c
 27221  004696  2762               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 27222  004698  50F4               	movf	prodh,w,c
 27223  00469A  2363               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27224  00469C  5167               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 27225  00469E  0D01               	mullw	1
 27226  0046A0  50F3               	movf	prodl,w,c
 27227  0046A2  2762               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 27228  0046A4  50F4               	movf	prodh,w,c
 27229  0046A6  2363               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27230  0046A8  C062  FFF6         	movff	??_playDiatonicTriadMinor,tblptrl
 27231  0046AC  C063  FFF7         	movff	??_playDiatonicTriadMinor+1,tblptrh
 27232  0046B0                     	if	0	;tblptru may be non-zero
 27233  0046B0                     	endif
 27234  0046B0                     	if	0	;tblptru may be non-zero
 27235  0046B0                     	endif
 27236  0046B0  0008               	tblrd		*
 27237  0046B2  CFF5 F064          	movff	tablat,??_playDiatonicTriadMinor+2
 27238  0046B6  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27239  0046B8  0D03               	mullw	3
 27240  0046BA  0EE3               	movlw	low _diatonic_minor
 27241  0046BC  24F3               	addwf	prodl,w,c
 27242  0046BE  6EF6               	movwf	tblptrl,c
 27243  0046C0  0EF2               	movlw	high _diatonic_minor
 27244  0046C2  20F4               	addwfc	prodh,w,c
 27245  0046C4  6EF7               	movwf	tblptrh,c
 27246  0046C6                     	if	0	;There are less than 3 active tblptr bytes
 27247  0046C6                     	endif
 27248  0046C6  0008               	tblrd		*
 27249  0046C8  50F5               	movf	tablat,w,c
 27250  0046CA  2564               	addwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 27251  0046CC  6EE6               	movwf	postinc1,c
 27252  0046CE  503E               	movf	_channel,w,c
 27253  0046D0  6EE6               	movwf	postinc1,c
 27254  0046D2  ECAD  F049         	call	_noteOff	;wreg free
 27255  0046D6                     l1690:
 27256  0046D6  0100               	movlb	0	; () banked
 27257  0046D8  2B67               	incf	playDiatonicTriadMinor@i& (0+255),f,b
 27258  0046DA  D774               	goto	l26616
 27259  0046DC                     u46100:
 27260                           
 27261                           ;keyboard.c: 1219: }
 27262                           ;keyboard.c: 1220: }
 27263                           ;keyboard.c: 1221: }
 27264                           ;keyboard.c: 1224: if(ARPEGGIO_ON == 1){
 27265                           
 27266                           ; BSR set to: 0
 27267  0046DC  A804               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 27268  0046DE  0012               	return	
 27269                           
 27270                           ;keyboard.c: 1225: if(ON_OFF == 1) {
 27271  0046E0  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27272  0046E2  D065               	goto	l1692
 27273                           
 27274                           ;keyboard.c: 1227: TMR0ON = 0;
 27275  0046E4  9ED5               	bcf	4053,7,c	;volatile
 27276                           
 27277                           ;keyboard.c: 1229: parallel = pitch;
 27278  0046E6  C066  F030         	movff	playDiatonicTriadMinor@pitch,_parallel
 27279                           
 27280                           ;keyboard.c: 1232: if(NUM_NOTES_PRESSED > 0){
 27281  0046EA  502F               	movf	_NUM_NOTES_PRESSED,w,c
 27282  0046EC  B4D8               	btfsc	status,2,c
 27283  0046EE  D00A               	goto	l1693
 27284                           
 27285                           ;keyboard.c: 1233: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 27286  0046F0  0E00               	movlw	0
 27287  0046F2  B403               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 27288  0046F4  0E01               	movlw	1
 27289  0046F6  EC52  F04B         	call	_wait_one_pulse
 27290                           
 27291                           ;keyboard.c: 1234: if(note_off_was_sent == 0) {key_press_release_note_off();}
 27292  0046FA  A202               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 27293  0046FC  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 27294                           
 27295                           ;keyboard.c: 1235: TIMER_OVERFLOWS = 0;
 27296  004700  0E00               	movlw	0
 27297  004702  6E2E               	movwf	_TIMER_OVERFLOWS,c
 27298  004704                     l1693:
 27299                           
 27300                           ;keyboard.c: 1236: }
 27301                           ;keyboard.c: 1238: for(unsigned char i = 0; i<3; i++){
 27302  004704  0E00               	movlw	0
 27303  004706  0100               	movlb	0	; () banked
 27304  004708  6F68               	movwf	playDiatonicTriadMinor@i_1720& (0+255),b
 27305  00470A                     l26660:
 27306                           
 27307                           ; BSR set to: 0
 27308  00470A  0E02               	movlw	2
 27309  00470C  6568               	cpfsgt	playDiatonicTriadMinor@i_1720& (0+255),b
 27310  00470E  D001               	goto	l1695
 27311  004710  D046               	goto	u46180
 27312  004712                     l1695:
 27313                           
 27314                           ; BSR set to: 0
 27315                           ;keyboard.c: 1239: if(i==0){ARPEGGIO[i] = diatonic_minor[index][0];}
 27316                           
 27317                           ; BSR set to: 0
 27318  004712  5168               	movf	playDiatonicTriadMinor@i_1720& (0+255),w,b
 27319  004714  A4D8               	btfss	status,2,c
 27320  004716  D013               	goto	l1697
 27321                           
 27322                           ; BSR set to: 0
 27323  004718  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27324  00471A  0D03               	mullw	3
 27325  00471C  0EE3               	movlw	low _diatonic_minor
 27326  00471E  24F3               	addwf	prodl,w,c
 27327  004720  6EF6               	movwf	tblptrl,c
 27328  004722  0EF2               	movlw	high _diatonic_minor
 27329  004724  20F4               	addwfc	prodh,w,c
 27330  004726  6EF7               	movwf	tblptrh,c
 27331  004728                     	if	0	;There are less than 3 active tblptr bytes
 27332  004728                     	endif
 27333  004728  5168               	movf	playDiatonicTriadMinor@i_1720& (0+255),w,b
 27334  00472A  0D01               	mullw	1
 27335  00472C  0E82               	movlw	low _ARPEGGIO
 27336  00472E  24F3               	addwf	prodl,w,c
 27337  004730  6ED9               	movwf	fsr2l,c
 27338  004732  0E01               	movlw	high _ARPEGGIO
 27339  004734  20F4               	addwfc	prodh,w,c
 27340  004736  6EDA               	movwf	fsr2h,c
 27341  004738  0008               	tblrd		*
 27342  00473A  CFF5 FFDF          	movff	tablat,indf2
 27343  00473E                     l1697:
 27344                           
 27345                           ; BSR set to: 0
 27346                           ;keyboard.c: 1240: if(i>0){ARPEGGIO[i] = diatonic_minor[index][0] + diatonic_minor[index
      +                          ][i];}
 27347                           
 27348                           ; BSR set to: 0
 27349  00473E  5168               	movf	playDiatonicTriadMinor@i_1720& (0+255),w,b
 27350  004740  B4D8               	btfsc	status,2,c
 27351  004742  D02B               	goto	l1698
 27352                           
 27353                           ; BSR set to: 0
 27354  004744  5168               	movf	playDiatonicTriadMinor@i_1720& (0+255),w,b
 27355  004746  0D01               	mullw	1
 27356  004748  0E82               	movlw	low _ARPEGGIO
 27357  00474A  24F3               	addwf	prodl,w,c
 27358  00474C  6ED9               	movwf	fsr2l,c
 27359  00474E  0E01               	movlw	high _ARPEGGIO
 27360  004750  20F4               	addwfc	prodh,w,c
 27361  004752  6EDA               	movwf	fsr2h,c
 27362  004754  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27363  004756  0D03               	mullw	3
 27364  004758  0EE3               	movlw	low _diatonic_minor
 27365  00475A  6F62               	movwf	??_playDiatonicTriadMinor& (0+255),b
 27366  00475C  0EF2               	movlw	high _diatonic_minor
 27367  00475E  6F63               	movwf	(??_playDiatonicTriadMinor+1)& (0+255),b
 27368  004760  50F3               	movf	prodl,w,c
 27369  004762  2762               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 27370  004764  50F4               	movf	prodh,w,c
 27371  004766  2363               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27372  004768  5168               	movf	playDiatonicTriadMinor@i_1720& (0+255),w,b
 27373  00476A  0D01               	mullw	1
 27374  00476C  50F3               	movf	prodl,w,c
 27375  00476E  2762               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 27376  004770  50F4               	movf	prodh,w,c
 27377  004772  2363               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27378  004774  C062  FFF6         	movff	??_playDiatonicTriadMinor,tblptrl
 27379  004778  C063  FFF7         	movff	??_playDiatonicTriadMinor+1,tblptrh
 27380  00477C                     	if	0	;tblptru may be non-zero
 27381  00477C                     	endif
 27382  00477C                     	if	0	;tblptru may be non-zero
 27383  00477C                     	endif
 27384  00477C  0008               	tblrd		*
 27385  00477E  CFF5 F064          	movff	tablat,??_playDiatonicTriadMinor+2
 27386  004782  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27387  004784  0D03               	mullw	3
 27388  004786  0EE3               	movlw	low _diatonic_minor
 27389  004788  24F3               	addwf	prodl,w,c
 27390  00478A  6EF6               	movwf	tblptrl,c
 27391  00478C  0EF2               	movlw	high _diatonic_minor
 27392  00478E  20F4               	addwfc	prodh,w,c
 27393  004790  6EF7               	movwf	tblptrh,c
 27394  004792                     	if	0	;There are less than 3 active tblptr bytes
 27395  004792                     	endif
 27396  004792  0008               	tblrd		*
 27397  004794  50F5               	movf	tablat,w,c
 27398  004796  2564               	addwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 27399  004798  6EDF               	movwf	indf2,c
 27400  00479A                     l1698:
 27401                           
 27402                           ; BSR set to: 0
 27403                           
 27404                           ; BSR set to: 0
 27405  00479A  2B68               	incf	playDiatonicTriadMinor@i_1720& (0+255),f,b
 27406  00479C  D7B6               	goto	l26660
 27407  00479E                     u46180:
 27408                           
 27409                           ; BSR set to: 0
 27410                           ;keyboard.c: 1241: }
 27411                           ;keyboard.c: 1243: NUM_NOTES_PRESSED = 3;
 27412                           
 27413                           ; BSR set to: 0
 27414  00479E  0E03               	movlw	3
 27415  0047A0  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 27416                           
 27417                           ; BSR set to: 0
 27418                           ;keyboard.c: 1246: if(LATCH == 0) {latch_was_pressed = 0;}
 27419  0047A2  A204               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 27420                           
 27421                           ; BSR set to: 0
 27422  0047A4  9C03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27423                           
 27424                           ; BSR set to: 0
 27425                           ;keyboard.c: 1249: finish_arpeggio_setup();
 27426                           
 27427                           ; BSR set to: 0
 27428  0047A6  ECE7  F04B         	call	_finish_arpeggio_setup	;wreg free
 27429                           
 27430                           ;keyboard.c: 1251: TMR0ON = 1;
 27431  0047AA  8ED5               	bsf	4053,7,c	;volatile
 27432                           
 27433                           ;keyboard.c: 1253: return;
 27434  0047AC  0012               	return	
 27435  0047AE                     l1692:
 27436                           
 27437                           ;keyboard.c: 1254: }
 27438                           ;keyboard.c: 1256: if((ON_OFF == 0) && (LATCH == 0)) {
 27439  0047AE  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27440  0047B0  0012               	return	
 27441  0047B2  B204               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 27442  0047B4  0012               	return	
 27443                           
 27444                           ;keyboard.c: 1258: if(NUM_NOTES_PRESSED > 0){
 27445  0047B6  502F               	movf	_NUM_NOTES_PRESSED,w,c
 27446  0047B8  B4D8               	btfsc	status,2,c
 27447  0047BA  D00A               	goto	l1702
 27448                           
 27449                           ;keyboard.c: 1259: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 27450  0047BC  0E00               	movlw	0
 27451  0047BE  B203               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 27452  0047C0  0E01               	movlw	1
 27453  0047C2  EC52  F04B         	call	_wait_one_pulse
 27454                           
 27455                           ;keyboard.c: 1260: if(note_off_was_sent == 0) {key_press_release_note_off();}
 27456  0047C6  A202               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 27457  0047C8  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 27458                           
 27459                           ;keyboard.c: 1261: TIMER_OVERFLOWS = 0;
 27460  0047CC  0E00               	movlw	0
 27461  0047CE  6E2E               	movwf	_TIMER_OVERFLOWS,c
 27462  0047D0                     l1702:
 27463                           
 27464                           ;keyboard.c: 1262: }
 27465                           ;keyboard.c: 1264: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 27466  0047D0  C030  F062         	movff	_parallel,??_playDiatonicTriadMinor
 27467  0047D4  0100               	movlb	0	; () banked
 27468  0047D6  6B63               	clrf	(??_playDiatonicTriadMinor+1)& (0+255),b
 27469  0047D8  BF62               	btfsc	??_playDiatonicTriadMinor& (0+255),7,b
 27470  0047DA  0763               	decf	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27471  0047DC  5166               	movf	playDiatonicTriadMinor@pitch& (0+255),w,b
 27472  0047DE  6F64               	movwf	(??_playDiatonicTriadMinor+2)& (0+255),b
 27473  0047E0  6B65               	clrf	(??_playDiatonicTriadMinor+3)& (0+255),b
 27474  0047E2  5162               	movf	??_playDiatonicTriadMinor& (0+255),w,b
 27475  0047E4  1964               	xorwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 27476  0047E6  E106               	bnz	l26704
 27477  0047E8  5163               	movf	(??_playDiatonicTriadMinor+1)& (0+255),w,b
 27478  0047EA  1965               	xorwf	(??_playDiatonicTriadMinor+3)& (0+255),w,b
 27479  0047EC  A4D8               	btfss	status,2,c
 27480  0047EE  D002               	goto	l1704
 27481                           
 27482                           ; BSR set to: 0
 27483  0047F0  0E00               	movlw	0
 27484  0047F2  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 27485  0047F4                     l1704:
 27486  0047F4                     l26704:
 27487                           
 27488                           ; BSR set to: 0
 27489                           ;keyboard.c: 1266: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 27490  0047F4  BE03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 27491                           
 27492                           ; BSR set to: 0
 27493  0047F6  AC03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27494  0047F8  D001               	goto	l1705
 27495                           
 27496                           ; BSR set to: 0
 27497                           ;keyboard.c: 1267: LATCH = 1;
 27498  0047FA  8204               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 27499  0047FC                     l1705:
 27500                           
 27501                           ; BSR set to: 0
 27502                           ;keyboard.c: 1268: }
 27503                           ;keyboard.c: 1271: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_presse
      +                          d == 1)){
 27504  0047FC  A004               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 27505  0047FE  D002               	goto	u46280
 27506                           
 27507                           ; BSR set to: 0
 27508  004800  A004               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 27509  004802  D006               	goto	l1706
 27510  004804                     u46280:
 27511                           
 27512                           ; BSR set to: 0
 27513  004804  AC03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27514  004806  D004               	goto	l1706
 27515                           
 27516                           ; BSR set to: 0
 27517                           ;keyboard.c: 1272: NUM_NOTES_PRESSED = 0;
 27518  004808  0E00               	movlw	0
 27519  00480A  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 27520                           
 27521                           ;keyboard.c: 1273: ARRAY_INDEX = 0;
 27522  00480C  0E00               	movlw	0
 27523  00480E  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 27524  004810                     l1706:
 27525                           
 27526                           ; BSR set to: 0
 27527                           ;keyboard.c: 1274: }
 27528                           ;keyboard.c: 1277: finish_arpeggio_setup();
 27529                           
 27530                           ; BSR set to: 0
 27531  004810  ECE7  F04B         	call	_finish_arpeggio_setup	;wreg free
 27532                           
 27533                           ;keyboard.c: 1278: TMR0ON = 1;
 27534  004814  8ED5               	bsf	4053,7,c	;volatile
 27535                           
 27536                           ;keyboard.c: 1280: return;
 27537  004816  0012               	return	
 27538  004818                     __end_of_playDiatonicTriadMinor:
 27539                           	opt stack 0
 27540                           tblptru	equ	0xFF8
 27541                           tblptrh	equ	0xFF7
 27542                           tblptrl	equ	0xFF6
 27543                           tablat	equ	0xFF5
 27544                           prodh	equ	0xFF4
 27545                           prodl	equ	0xFF3
 27546                           intcon	equ	0xFF2
 27547                           intcon2	equ	0xFF1
 27548                           postinc0	equ	0xFEE
 27549                           wreg	equ	0xFE8
 27550                           postinc1	equ	0xFE6
 27551                           plusw1	equ	0xFE3
 27552                           fsr1h	equ	0xFE2
 27553                           fsr1l	equ	0xFE1
 27554                           indf2	equ	0xFDF
 27555                           postinc2	equ	0xFDE
 27556                           postdec2	equ	0xFDD
 27557                           plusw2	equ	0xFDB
 27558                           fsr2h	equ	0xFDA
 27559                           fsr2l	equ	0xFD9
 27560                           status	equ	0xFD8
 27561                           
 27562 ;; *************** function _playDiatonicTriadMajor *****************
 27563 ;; Defined at:
 27564 ;;		line 1067 in file "keyboard.c"
 27565 ;; Parameters:    Size  Location     Type
 27566 ;;  pitch           1    wreg     unsigned char 
 27567 ;;  index           1    1[BANK0 ] unsigned char 
 27568 ;; Auto vars:     Size  Location     Type
 27569 ;;  pitch           1    8[BANK0 ] unsigned char 
 27570 ;;  i               1    7[BANK0 ] unsigned char 
 27571 ;;  i               1    6[BANK0 ] unsigned char 
 27572 ;; Return value:  Size  Location     Type
 27573 ;;                  1    wreg      void 
 27574 ;; Registers used:
 27575 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27576 ;; Tracked objects:
 27577 ;;		On entry : 0/0
 27578 ;;		On exit  : 0/0
 27579 ;;		Unchanged: 0/0
 27580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 27581 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27582 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27583 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27584 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27585 ;;Total ram usage:        8 bytes
 27586 ;; Hardware stack levels used:    1
 27587 ;; Hardware stack levels required when called:   10
 27588 ;; This function calls:
 27589 ;;		_finish_arpeggio_setup
 27590 ;;		_key_press_release_note_off
 27591 ;;		_noteOff
 27592 ;;		_noteOn
 27593 ;;		_wait_one_pulse
 27594 ;; This function is called by:
 27595 ;;		_playThisNote8
 27596 ;; This function uses a non-reentrant model
 27597 ;;
 27598                           
 27599                           	psect	text74
 27600  0058CC                     __ptext74:
 27601                           	opt stack 0
 27602  0058CC                     _playDiatonicTriadMajor:
 27603                           	opt stack 13
 27604                           
 27605                           ;incstack = 0
 27606                           ;playDiatonicTriadMajor@pitch stored from wreg
 27607  0058CC  0100               	movlb	0	; () banked
 27608  0058CE  6F68               	movwf	playDiatonicTriadMajor@pitch& (0+255),b
 27609                           
 27610                           ;keyboard.c: 1070: if(ARPEGGIO_ON == 0){
 27611  0058D0  B804               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 27612  0058D2  D04B               	goto	u45840
 27613                           
 27614                           ;keyboard.c: 1071: for(unsigned char i = 0; i<3; i++){
 27615  0058D4  0E00               	movlw	0
 27616  0058D6  0100               	movlb	0	; () banked
 27617  0058D8  6F66               	movwf	playDiatonicTriadMajor@i& (0+255),b
 27618  0058DA                     l26530:
 27619                           
 27620                           ; BSR set to: 0
 27621  0058DA  0E02               	movlw	2
 27622  0058DC  6566               	cpfsgt	playDiatonicTriadMajor@i& (0+255),b
 27623  0058DE  D001               	goto	l1637
 27624  0058E0  D044               	goto	u45840
 27625  0058E2                     l1637:
 27626                           
 27627                           ; BSR set to: 0
 27628                           ;keyboard.c: 1072: if(ON_OFF == 1) {noteOn(channel,pitch + diatonic_major[index][i],velo
      +                          city);}
 27629  0058E2  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27630  0058E4  D01E               	goto	l1639
 27631                           
 27632                           ; BSR set to: 0
 27633  0058E6  5051               	movf	_velocity,w,c
 27634  0058E8  6EE6               	movwf	postinc1,c
 27635  0058EA  5161               	movf	playDiatonicTriadMajor@index& (0+255),w,b
 27636  0058EC  0D03               	mullw	3
 27637  0058EE  0E10               	movlw	low _diatonic_major
 27638  0058F0  6F62               	movwf	??_playDiatonicTriadMajor& (0+255),b
 27639  0058F2  0EF3               	movlw	high _diatonic_major
 27640  0058F4  6F63               	movwf	(??_playDiatonicTriadMajor+1)& (0+255),b
 27641  0058F6  50F3               	movf	prodl,w,c
 27642  0058F8  2762               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 27643  0058FA  50F4               	movf	prodh,w,c
 27644  0058FC  2363               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27645  0058FE  5166               	movf	playDiatonicTriadMajor@i& (0+255),w,b
 27646  005900  0D01               	mullw	1
 27647  005902  50F3               	movf	prodl,w,c
 27648  005904  2762               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 27649  005906  50F4               	movf	prodh,w,c
 27650  005908  2363               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27651  00590A  C062  FFF6         	movff	??_playDiatonicTriadMajor,tblptrl
 27652  00590E  C063  FFF7         	movff	??_playDiatonicTriadMajor+1,tblptrh
 27653  005912                     	if	0	;tblptru may be non-zero
 27654  005912                     	endif
 27655  005912                     	if	0	;tblptru may be non-zero
 27656  005912                     	endif
 27657  005912  0008               	tblrd		*
 27658  005914  50F5               	movf	tablat,w,c
 27659  005916  2568               	addwf	playDiatonicTriadMajor@pitch& (0+255),w,b
 27660  005918  6EE6               	movwf	postinc1,c
 27661  00591A  503E               	movf	_channel,w,c
 27662  00591C  6EE6               	movwf	postinc1,c
 27663  00591E  ECF8  F044         	call	_noteOn	;wreg free
 27664  005922                     l1639:
 27665                           
 27666                           ;keyboard.c: 1073: if(ON_OFF == 0) {noteOff(channel,pitch + diatonic_major[index][i],vel
      +                          ocity);}
 27667  005922  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27668  005924  D01F               	goto	l1640
 27669  005926  5051               	movf	_velocity,w,c
 27670  005928  6EE6               	movwf	postinc1,c
 27671  00592A  0100               	movlb	0	; () banked
 27672  00592C  5161               	movf	playDiatonicTriadMajor@index& (0+255),w,b
 27673  00592E  0D03               	mullw	3
 27674  005930  0E10               	movlw	low _diatonic_major
 27675  005932  6F62               	movwf	??_playDiatonicTriadMajor& (0+255),b
 27676  005934  0EF3               	movlw	high _diatonic_major
 27677  005936  6F63               	movwf	(??_playDiatonicTriadMajor+1)& (0+255),b
 27678  005938  50F3               	movf	prodl,w,c
 27679  00593A  2762               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 27680  00593C  50F4               	movf	prodh,w,c
 27681  00593E  2363               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27682  005940  5166               	movf	playDiatonicTriadMajor@i& (0+255),w,b
 27683  005942  0D01               	mullw	1
 27684  005944  50F3               	movf	prodl,w,c
 27685  005946  2762               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 27686  005948  50F4               	movf	prodh,w,c
 27687  00594A  2363               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27688  00594C  C062  FFF6         	movff	??_playDiatonicTriadMajor,tblptrl
 27689  005950  C063  FFF7         	movff	??_playDiatonicTriadMajor+1,tblptrh
 27690  005954                     	if	0	;tblptru may be non-zero
 27691  005954                     	endif
 27692  005954                     	if	0	;tblptru may be non-zero
 27693  005954                     	endif
 27694  005954  0008               	tblrd		*
 27695  005956  50F5               	movf	tablat,w,c
 27696  005958  2568               	addwf	playDiatonicTriadMajor@pitch& (0+255),w,b
 27697  00595A  6EE6               	movwf	postinc1,c
 27698  00595C  503E               	movf	_channel,w,c
 27699  00595E  6EE6               	movwf	postinc1,c
 27700  005960  ECAD  F049         	call	_noteOff	;wreg free
 27701  005964                     l1640:
 27702  005964  0100               	movlb	0	; () banked
 27703  005966  2B66               	incf	playDiatonicTriadMajor@i& (0+255),f,b
 27704  005968  D7B8               	goto	l26530
 27705  00596A                     u45840:
 27706                           
 27707                           ;keyboard.c: 1074: }
 27708                           ;keyboard.c: 1075: }
 27709                           ;keyboard.c: 1078: if(ARPEGGIO_ON == 1){
 27710                           
 27711                           ; BSR set to: 0
 27712  00596A  A804               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 27713  00596C  0012               	return	
 27714                           
 27715                           ;keyboard.c: 1079: if(ON_OFF == 1) {
 27716  00596E  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27717  005970  D040               	goto	l1642
 27718                           
 27719                           ;keyboard.c: 1081: TMR0ON = 0;
 27720  005972  9ED5               	bcf	4053,7,c	;volatile
 27721                           
 27722                           ;keyboard.c: 1083: parallel = pitch;
 27723  005974  C068  F030         	movff	playDiatonicTriadMajor@pitch,_parallel
 27724                           
 27725                           ;keyboard.c: 1086: if(NUM_NOTES_PRESSED > 0){
 27726  005978  502F               	movf	_NUM_NOTES_PRESSED,w,c
 27727  00597A  B4D8               	btfsc	status,2,c
 27728  00597C  D00A               	goto	l1643
 27729                           
 27730                           ;keyboard.c: 1087: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 27731  00597E  0E00               	movlw	0
 27732  005980  B403               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 27733  005982  0E01               	movlw	1
 27734  005984  EC52  F04B         	call	_wait_one_pulse
 27735                           
 27736                           ;keyboard.c: 1088: if(note_off_was_sent == 0) {key_press_release_note_off();}
 27737  005988  A202               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 27738  00598A  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 27739                           
 27740                           ;keyboard.c: 1089: TIMER_OVERFLOWS = 0;
 27741  00598E  0E00               	movlw	0
 27742  005990  6E2E               	movwf	_TIMER_OVERFLOWS,c
 27743  005992                     l1643:
 27744                           
 27745                           ;keyboard.c: 1090: }
 27746                           ;keyboard.c: 1092: for(unsigned char i = 0; i<3; i++){
 27747  005992  0E00               	movlw	0
 27748  005994  0100               	movlb	0	; () banked
 27749  005996  6F67               	movwf	playDiatonicTriadMajor@i_1710& (0+255),b
 27750  005998                     l26560:
 27751                           
 27752                           ; BSR set to: 0
 27753  005998  0E02               	movlw	2
 27754  00599A  6567               	cpfsgt	playDiatonicTriadMajor@i_1710& (0+255),b
 27755  00599C  D001               	goto	l1645
 27756  00599E  D022               	goto	u45900
 27757  0059A0                     l1645:
 27758                           
 27759                           ; BSR set to: 0
 27760                           ;keyboard.c: 1093: ARPEGGIO[i] = pitch + diatonic_major[index][i];
 27761                           
 27762                           ; BSR set to: 0
 27763  0059A0  5167               	movf	playDiatonicTriadMajor@i_1710& (0+255),w,b
 27764  0059A2  0D01               	mullw	1
 27765  0059A4  0E82               	movlw	low _ARPEGGIO
 27766  0059A6  24F3               	addwf	prodl,w,c
 27767  0059A8  6ED9               	movwf	fsr2l,c
 27768  0059AA  0E01               	movlw	high _ARPEGGIO
 27769  0059AC  20F4               	addwfc	prodh,w,c
 27770  0059AE  6EDA               	movwf	fsr2h,c
 27771  0059B0  5161               	movf	playDiatonicTriadMajor@index& (0+255),w,b
 27772  0059B2  0D03               	mullw	3
 27773  0059B4  0E10               	movlw	low _diatonic_major
 27774  0059B6  6F62               	movwf	??_playDiatonicTriadMajor& (0+255),b
 27775  0059B8  0EF3               	movlw	high _diatonic_major
 27776  0059BA  6F63               	movwf	(??_playDiatonicTriadMajor+1)& (0+255),b
 27777  0059BC  50F3               	movf	prodl,w,c
 27778  0059BE  2762               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 27779  0059C0  50F4               	movf	prodh,w,c
 27780  0059C2  2363               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27781  0059C4  5167               	movf	playDiatonicTriadMajor@i_1710& (0+255),w,b
 27782  0059C6  0D01               	mullw	1
 27783  0059C8  50F3               	movf	prodl,w,c
 27784  0059CA  2762               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 27785  0059CC  50F4               	movf	prodh,w,c
 27786  0059CE  2363               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27787  0059D0  C062  FFF6         	movff	??_playDiatonicTriadMajor,tblptrl
 27788  0059D4  C063  FFF7         	movff	??_playDiatonicTriadMajor+1,tblptrh
 27789  0059D8                     	if	0	;tblptru may be non-zero
 27790  0059D8                     	endif
 27791  0059D8                     	if	0	;tblptru may be non-zero
 27792  0059D8                     	endif
 27793  0059D8  0008               	tblrd		*
 27794  0059DA  50F5               	movf	tablat,w,c
 27795  0059DC  2568               	addwf	playDiatonicTriadMajor@pitch& (0+255),w,b
 27796  0059DE  6EDF               	movwf	indf2,c
 27797                           
 27798                           ; BSR set to: 0
 27799  0059E0  2B67               	incf	playDiatonicTriadMajor@i_1710& (0+255),f,b
 27800  0059E2  D7DA               	goto	l26560
 27801  0059E4                     u45900:
 27802                           
 27803                           ; BSR set to: 0
 27804                           ;keyboard.c: 1094: }
 27805                           ;keyboard.c: 1096: NUM_NOTES_PRESSED = 3;
 27806                           
 27807                           ; BSR set to: 0
 27808  0059E4  0E03               	movlw	3
 27809  0059E6  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 27810                           
 27811                           ; BSR set to: 0
 27812                           ;keyboard.c: 1099: if(LATCH == 0) {latch_was_pressed = 0;}
 27813  0059E8  A204               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 27814                           
 27815                           ; BSR set to: 0
 27816  0059EA  9C03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27817                           
 27818                           ; BSR set to: 0
 27819                           ;keyboard.c: 1102: finish_arpeggio_setup();
 27820                           
 27821                           ; BSR set to: 0
 27822  0059EC  ECE7  F04B         	call	_finish_arpeggio_setup	;wreg free
 27823                           
 27824                           ;keyboard.c: 1104: TMR0ON = 1;
 27825  0059F0  8ED5               	bsf	4053,7,c	;volatile
 27826  0059F2                     l1642:
 27827                           
 27828                           ;keyboard.c: 1105: }
 27829                           ;keyboard.c: 1107: if((ON_OFF == 0) && (LATCH == 0)) {
 27830  0059F2  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27831  0059F4  0012               	return	
 27832  0059F6  B204               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 27833  0059F8  0012               	return	
 27834                           
 27835                           ;keyboard.c: 1109: if(NUM_NOTES_PRESSED > 0){
 27836  0059FA  502F               	movf	_NUM_NOTES_PRESSED,w,c
 27837  0059FC  B4D8               	btfsc	status,2,c
 27838  0059FE  D00A               	goto	l1649
 27839                           
 27840                           ;keyboard.c: 1110: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 27841  005A00  0E00               	movlw	0
 27842  005A02  B203               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 27843  005A04  0E01               	movlw	1
 27844  005A06  EC52  F04B         	call	_wait_one_pulse
 27845                           
 27846                           ;keyboard.c: 1111: if(note_off_was_sent == 0) {key_press_release_note_off();}
 27847  005A0A  A202               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 27848  005A0C  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 27849                           
 27850                           ;keyboard.c: 1112: TIMER_OVERFLOWS = 0;
 27851  005A10  0E00               	movlw	0
 27852  005A12  6E2E               	movwf	_TIMER_OVERFLOWS,c
 27853  005A14                     l1649:
 27854                           
 27855                           ;keyboard.c: 1113: }
 27856                           ;keyboard.c: 1115: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 27857  005A14  C030  F062         	movff	_parallel,??_playDiatonicTriadMajor
 27858  005A18  0100               	movlb	0	; () banked
 27859  005A1A  6B63               	clrf	(??_playDiatonicTriadMajor+1)& (0+255),b
 27860  005A1C  BF62               	btfsc	??_playDiatonicTriadMajor& (0+255),7,b
 27861  005A1E  0763               	decf	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27862  005A20  5168               	movf	playDiatonicTriadMajor@pitch& (0+255),w,b
 27863  005A22  6F64               	movwf	(??_playDiatonicTriadMajor+2)& (0+255),b
 27864  005A24  6B65               	clrf	(??_playDiatonicTriadMajor+3)& (0+255),b
 27865  005A26  5162               	movf	??_playDiatonicTriadMajor& (0+255),w,b
 27866  005A28  1964               	xorwf	(??_playDiatonicTriadMajor+2)& (0+255),w,b
 27867  005A2A  E106               	bnz	l26598
 27868  005A2C  5163               	movf	(??_playDiatonicTriadMajor+1)& (0+255),w,b
 27869  005A2E  1965               	xorwf	(??_playDiatonicTriadMajor+3)& (0+255),w,b
 27870  005A30  A4D8               	btfss	status,2,c
 27871  005A32  D002               	goto	l1651
 27872                           
 27873                           ; BSR set to: 0
 27874  005A34  0E00               	movlw	0
 27875  005A36  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 27876  005A38                     l1651:
 27877  005A38                     l26598:
 27878                           
 27879                           ; BSR set to: 0
 27880                           ;keyboard.c: 1117: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 27881  005A38  BE03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 27882                           
 27883                           ; BSR set to: 0
 27884  005A3A  AC03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27885  005A3C  D001               	goto	l1652
 27886                           
 27887                           ; BSR set to: 0
 27888                           ;keyboard.c: 1118: LATCH = 1;
 27889  005A3E  8204               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 27890  005A40                     l1652:
 27891                           
 27892                           ; BSR set to: 0
 27893                           ;keyboard.c: 1119: }
 27894                           ;keyboard.c: 1122: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_presse
      +                          d == 1)){
 27895  005A40  A004               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 27896  005A42  D002               	goto	u46000
 27897                           
 27898                           ; BSR set to: 0
 27899  005A44  A004               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 27900  005A46  D006               	goto	l1653
 27901  005A48                     u46000:
 27902                           
 27903                           ; BSR set to: 0
 27904  005A48  AC03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27905  005A4A  D004               	goto	l1653
 27906                           
 27907                           ; BSR set to: 0
 27908                           ;keyboard.c: 1123: NUM_NOTES_PRESSED = 0;
 27909  005A4C  0E00               	movlw	0
 27910  005A4E  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 27911                           
 27912                           ;keyboard.c: 1124: ARRAY_INDEX = 0;
 27913  005A50  0E00               	movlw	0
 27914  005A52  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 27915  005A54                     l1653:
 27916                           
 27917                           ; BSR set to: 0
 27918                           ;keyboard.c: 1125: }
 27919                           ;keyboard.c: 1128: finish_arpeggio_setup();
 27920                           
 27921                           ; BSR set to: 0
 27922  005A54  ECE7  F04B         	call	_finish_arpeggio_setup	;wreg free
 27923                           
 27924                           ;keyboard.c: 1129: TMR0ON = 1;
 27925  005A58  8ED5               	bsf	4053,7,c	;volatile
 27926  005A5A  0012               	return	
 27927  005A5C                     __end_of_playDiatonicTriadMajor:
 27928                           	opt stack 0
 27929                           tblptru	equ	0xFF8
 27930                           tblptrh	equ	0xFF7
 27931                           tblptrl	equ	0xFF6
 27932                           tablat	equ	0xFF5
 27933                           prodh	equ	0xFF4
 27934                           prodl	equ	0xFF3
 27935                           intcon	equ	0xFF2
 27936                           intcon2	equ	0xFF1
 27937                           postinc0	equ	0xFEE
 27938                           wreg	equ	0xFE8
 27939                           postinc1	equ	0xFE6
 27940                           plusw1	equ	0xFE3
 27941                           fsr1h	equ	0xFE2
 27942                           fsr1l	equ	0xFE1
 27943                           indf2	equ	0xFDF
 27944                           postinc2	equ	0xFDE
 27945                           postdec2	equ	0xFDD
 27946                           plusw2	equ	0xFDB
 27947                           fsr2h	equ	0xFDA
 27948                           fsr2l	equ	0xFD9
 27949                           status	equ	0xFD8
 27950                           
 27951 ;; *************** function _playDiatonicSeventhMinor *****************
 27952 ;; Defined at:
 27953 ;;		line 1285 in file "keyboard.c"
 27954 ;; Parameters:    Size  Location     Type
 27955 ;;  pitch           1    wreg     unsigned char 
 27956 ;;  index           1    1[BANK0 ] unsigned char 
 27957 ;; Auto vars:     Size  Location     Type
 27958 ;;  pitch           1    6[BANK0 ] unsigned char 
 27959 ;;  i               1    8[BANK0 ] unsigned char 
 27960 ;;  i               1    7[BANK0 ] unsigned char 
 27961 ;; Return value:  Size  Location     Type
 27962 ;;                  1    wreg      void 
 27963 ;; Registers used:
 27964 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27965 ;; Tracked objects:
 27966 ;;		On entry : 0/0
 27967 ;;		On exit  : 0/0
 27968 ;;		Unchanged: 0/0
 27969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 27970 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27971 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27972 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27973 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27974 ;;Total ram usage:        8 bytes
 27975 ;; Hardware stack levels used:    1
 27976 ;; Hardware stack levels required when called:   10
 27977 ;; This function calls:
 27978 ;;		_finish_arpeggio_setup
 27979 ;;		_key_press_release_note_off
 27980 ;;		_noteOff
 27981 ;;		_noteOn
 27982 ;;		_wait_one_pulse
 27983 ;; This function is called by:
 27984 ;;		_playThisNote8
 27985 ;; This function uses a non-reentrant model
 27986 ;;
 27987                           
 27988                           	psect	text75
 27989  004818                     __ptext75:
 27990                           	opt stack 0
 27991  004818                     _playDiatonicSeventhMinor:
 27992                           	opt stack 13
 27993                           
 27994                           ;incstack = 0
 27995                           ;playDiatonicSeventhMinor@pitch stored from wreg
 27996  004818  0100               	movlb	0	; () banked
 27997  00481A  6F66               	movwf	playDiatonicSeventhMinor@pitch& (0+255),b
 27998                           
 27999                           ;keyboard.c: 1288: if(ARPEGGIO_ON == 0){
 28000  00481C  B804               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 28001  00481E  D08F               	goto	u46600
 28002                           
 28003                           ;keyboard.c: 1289: for(unsigned char i = 0; i<4; i++){
 28004  004820  0E00               	movlw	0
 28005  004822  0100               	movlb	0	; () banked
 28006  004824  6F67               	movwf	playDiatonicSeventhMinor@i& (0+255),b
 28007  004826                     l26812:
 28008                           
 28009                           ; BSR set to: 0
 28010  004826  0E03               	movlw	3
 28011  004828  6567               	cpfsgt	playDiatonicSeventhMinor@i& (0+255),b
 28012  00482A  D001               	goto	l1712
 28013  00482C  D088               	goto	u46600
 28014  00482E                     l1712:
 28015                           
 28016                           ; BSR set to: 0
 28017                           ;keyboard.c: 1290: if(i==0){
 28018                           
 28019                           ; BSR set to: 0
 28020  00482E  5167               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 28021  004830  A4D8               	btfss	status,2,c
 28022  004832  D027               	goto	l1716
 28023                           
 28024                           ; BSR set to: 0
 28025                           ;keyboard.c: 1291: if(ON_OFF == 1) {noteOn(channel,diatonic_seventh_minor[index][0],velo
      +                          city);}
 28026  004834  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28027  004836  D011               	goto	l1715
 28028                           
 28029                           ; BSR set to: 0
 28030  004838  5051               	movf	_velocity,w,c
 28031  00483A  6EE6               	movwf	postinc1,c
 28032  00483C  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28033  00483E  0D04               	mullw	4
 28034  004840  0E6B               	movlw	low _diatonic_seventh_minor
 28035  004842  24F3               	addwf	prodl,w,c
 28036  004844  6EF6               	movwf	tblptrl,c
 28037  004846  0EF2               	movlw	high _diatonic_seventh_minor
 28038  004848  20F4               	addwfc	prodh,w,c
 28039  00484A  6EF7               	movwf	tblptrh,c
 28040  00484C                     	if	0	;There are less than 3 active tblptr bytes
 28041  00484C                     	endif
 28042  00484C  0008               	tblrd		*
 28043  00484E  50F5               	movf	tablat,w,c
 28044  004850  6EE6               	movwf	postinc1,c
 28045  004852  503E               	movf	_channel,w,c
 28046  004854  6EE6               	movwf	postinc1,c
 28047  004856  ECF8  F044         	call	_noteOn	;wreg free
 28048  00485A                     l1715:
 28049                           
 28050                           ;keyboard.c: 1292: if(ON_OFF == 0) {noteOff(channel,diatonic_seventh_minor[index][0],vel
      +                          ocity);}
 28051  00485A  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28052  00485C  D012               	goto	l1716
 28053  00485E  5051               	movf	_velocity,w,c
 28054  004860  6EE6               	movwf	postinc1,c
 28055  004862  0100               	movlb	0	; () banked
 28056  004864  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28057  004866  0D04               	mullw	4
 28058  004868  0E6B               	movlw	low _diatonic_seventh_minor
 28059  00486A  24F3               	addwf	prodl,w,c
 28060  00486C  6EF6               	movwf	tblptrl,c
 28061  00486E  0EF2               	movlw	high _diatonic_seventh_minor
 28062  004870  20F4               	addwfc	prodh,w,c
 28063  004872  6EF7               	movwf	tblptrh,c
 28064  004874                     	if	0	;There are less than 3 active tblptr bytes
 28065  004874                     	endif
 28066  004874  0008               	tblrd		*
 28067  004876  50F5               	movf	tablat,w,c
 28068  004878  6EE6               	movwf	postinc1,c
 28069  00487A  503E               	movf	_channel,w,c
 28070  00487C  6EE6               	movwf	postinc1,c
 28071  00487E  ECAD  F049         	call	_noteOff	;wreg free
 28072  004882                     l1716:
 28073                           
 28074                           ;keyboard.c: 1293: }
 28075                           ;keyboard.c: 1294: if(i>0){
 28076  004882  0100               	movlb	0	; () banked
 28077  004884  5167               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 28078  004886  B4D8               	btfsc	status,2,c
 28079  004888  D057               	goto	l1719
 28080                           
 28081                           ; BSR set to: 0
 28082                           ;keyboard.c: 1295: if(ON_OFF == 1) noteOn(channel,diatonic_seventh_minor[index][0] + dia
      +                          tonic_seventh_minor[index][i],velocity);
 28083  00488A  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28084  00488C  D029               	goto	l1718
 28085                           
 28086                           ; BSR set to: 0
 28087  00488E  5051               	movf	_velocity,w,c
 28088  004890  6EE6               	movwf	postinc1,c
 28089  004892  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28090  004894  0D04               	mullw	4
 28091  004896  0E6B               	movlw	low _diatonic_seventh_minor
 28092  004898  6F62               	movwf	??_playDiatonicSeventhMinor& (0+255),b
 28093  00489A  0EF2               	movlw	high _diatonic_seventh_minor
 28094  00489C  6F63               	movwf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 28095  00489E  50F3               	movf	prodl,w,c
 28096  0048A0  2762               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 28097  0048A2  50F4               	movf	prodh,w,c
 28098  0048A4  2363               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28099  0048A6  5167               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 28100  0048A8  0D01               	mullw	1
 28101  0048AA  50F3               	movf	prodl,w,c
 28102  0048AC  2762               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 28103  0048AE  50F4               	movf	prodh,w,c
 28104  0048B0  2363               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28105  0048B2  C062  FFF6         	movff	??_playDiatonicSeventhMinor,tblptrl
 28106  0048B6  C063  FFF7         	movff	??_playDiatonicSeventhMinor+1,tblptrh
 28107  0048BA                     	if	0	;tblptru may be non-zero
 28108  0048BA                     	endif
 28109  0048BA                     	if	0	;tblptru may be non-zero
 28110  0048BA                     	endif
 28111  0048BA  0008               	tblrd		*
 28112  0048BC  CFF5 F064          	movff	tablat,??_playDiatonicSeventhMinor+2
 28113  0048C0  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28114  0048C2  0D04               	mullw	4
 28115  0048C4  0E6B               	movlw	low _diatonic_seventh_minor
 28116  0048C6  24F3               	addwf	prodl,w,c
 28117  0048C8  6EF6               	movwf	tblptrl,c
 28118  0048CA  0EF2               	movlw	high _diatonic_seventh_minor
 28119  0048CC  20F4               	addwfc	prodh,w,c
 28120  0048CE  6EF7               	movwf	tblptrh,c
 28121  0048D0                     	if	0	;There are less than 3 active tblptr bytes
 28122  0048D0                     	endif
 28123  0048D0  0008               	tblrd		*
 28124  0048D2  50F5               	movf	tablat,w,c
 28125  0048D4  2564               	addwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 28126  0048D6  6EE6               	movwf	postinc1,c
 28127  0048D8  503E               	movf	_channel,w,c
 28128  0048DA  6EE6               	movwf	postinc1,c
 28129  0048DC  ECF8  F044         	call	_noteOn	;wreg free
 28130  0048E0                     l1718:
 28131                           
 28132                           ;keyboard.c: 1296: if(ON_OFF == 0) noteOff(channel,diatonic_seventh_minor[index][0] + di
      +                          atonic_seventh_minor[index][i],velocity);
 28133  0048E0  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28134  0048E2  D02A               	goto	l1719
 28135  0048E4  5051               	movf	_velocity,w,c
 28136  0048E6  6EE6               	movwf	postinc1,c
 28137  0048E8  0100               	movlb	0	; () banked
 28138  0048EA  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28139  0048EC  0D04               	mullw	4
 28140  0048EE  0E6B               	movlw	low _diatonic_seventh_minor
 28141  0048F0  6F62               	movwf	??_playDiatonicSeventhMinor& (0+255),b
 28142  0048F2  0EF2               	movlw	high _diatonic_seventh_minor
 28143  0048F4  6F63               	movwf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 28144  0048F6  50F3               	movf	prodl,w,c
 28145  0048F8  2762               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 28146  0048FA  50F4               	movf	prodh,w,c
 28147  0048FC  2363               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28148  0048FE  5167               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 28149  004900  0D01               	mullw	1
 28150  004902  50F3               	movf	prodl,w,c
 28151  004904  2762               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 28152  004906  50F4               	movf	prodh,w,c
 28153  004908  2363               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28154  00490A  C062  FFF6         	movff	??_playDiatonicSeventhMinor,tblptrl
 28155  00490E  C063  FFF7         	movff	??_playDiatonicSeventhMinor+1,tblptrh
 28156  004912                     	if	0	;tblptru may be non-zero
 28157  004912                     	endif
 28158  004912                     	if	0	;tblptru may be non-zero
 28159  004912                     	endif
 28160  004912  0008               	tblrd		*
 28161  004914  CFF5 F064          	movff	tablat,??_playDiatonicSeventhMinor+2
 28162  004918  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28163  00491A  0D04               	mullw	4
 28164  00491C  0E6B               	movlw	low _diatonic_seventh_minor
 28165  00491E  24F3               	addwf	prodl,w,c
 28166  004920  6EF6               	movwf	tblptrl,c
 28167  004922  0EF2               	movlw	high _diatonic_seventh_minor
 28168  004924  20F4               	addwfc	prodh,w,c
 28169  004926  6EF7               	movwf	tblptrh,c
 28170  004928                     	if	0	;There are less than 3 active tblptr bytes
 28171  004928                     	endif
 28172  004928  0008               	tblrd		*
 28173  00492A  50F5               	movf	tablat,w,c
 28174  00492C  2564               	addwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 28175  00492E  6EE6               	movwf	postinc1,c
 28176  004930  503E               	movf	_channel,w,c
 28177  004932  6EE6               	movwf	postinc1,c
 28178  004934  ECAD  F049         	call	_noteOff	;wreg free
 28179  004938                     l1719:
 28180  004938  0100               	movlb	0	; () banked
 28181  00493A  2B67               	incf	playDiatonicSeventhMinor@i& (0+255),f,b
 28182  00493C  D774               	goto	l26812
 28183  00493E                     u46600:
 28184                           
 28185                           ;keyboard.c: 1297: }
 28186                           ;keyboard.c: 1298: }
 28187                           ;keyboard.c: 1299: }
 28188                           ;keyboard.c: 1302: if(ARPEGGIO_ON == 1){
 28189                           
 28190                           ; BSR set to: 0
 28191  00493E  A804               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 28192  004940  0012               	return	
 28193                           
 28194                           ;keyboard.c: 1304: if(ON_OFF == 1) {
 28195  004942  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28196  004944  D064               	goto	l1721
 28197                           
 28198                           ;keyboard.c: 1306: TMR0ON = 0;
 28199  004946  9ED5               	bcf	4053,7,c	;volatile
 28200                           
 28201                           ;keyboard.c: 1308: parallel = pitch;
 28202  004948  C066  F030         	movff	playDiatonicSeventhMinor@pitch,_parallel
 28203                           
 28204                           ;keyboard.c: 1311: if(NUM_NOTES_PRESSED > 0){
 28205  00494C  502F               	movf	_NUM_NOTES_PRESSED,w,c
 28206  00494E  B4D8               	btfsc	status,2,c
 28207  004950  D00A               	goto	l1722
 28208                           
 28209                           ;keyboard.c: 1312: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 28210  004952  0E00               	movlw	0
 28211  004954  B403               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 28212  004956  0E01               	movlw	1
 28213  004958  EC52  F04B         	call	_wait_one_pulse
 28214                           
 28215                           ;keyboard.c: 1313: if(note_off_was_sent == 0) {key_press_release_note_off();}
 28216  00495C  A202               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 28217  00495E  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 28218                           
 28219                           ;keyboard.c: 1314: TIMER_OVERFLOWS = 0;
 28220  004962  0E00               	movlw	0
 28221  004964  6E2E               	movwf	_TIMER_OVERFLOWS,c
 28222  004966                     l1722:
 28223                           
 28224                           ;keyboard.c: 1315: }
 28225                           ;keyboard.c: 1317: for(unsigned char i = 0; i<4; i++){
 28226  004966  0E00               	movlw	0
 28227  004968  0100               	movlb	0	; () banked
 28228  00496A  6F68               	movwf	playDiatonicSeventhMinor@i_1725& (0+255),b
 28229  00496C                     l26856:
 28230                           
 28231                           ; BSR set to: 0
 28232  00496C  0E03               	movlw	3
 28233  00496E  6568               	cpfsgt	playDiatonicSeventhMinor@i_1725& (0+255),b
 28234  004970  D001               	goto	l1724
 28235  004972  D046               	goto	u46680
 28236  004974                     l1724:
 28237                           
 28238                           ; BSR set to: 0
 28239                           ;keyboard.c: 1318: if(i==0){ARPEGGIO[i] = diatonic_seventh_minor[index][0];}
 28240                           
 28241                           ; BSR set to: 0
 28242  004974  5168               	movf	playDiatonicSeventhMinor@i_1725& (0+255),w,b
 28243  004976  A4D8               	btfss	status,2,c
 28244  004978  D013               	goto	l1726
 28245                           
 28246                           ; BSR set to: 0
 28247  00497A  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28248  00497C  0D04               	mullw	4
 28249  00497E  0E6B               	movlw	low _diatonic_seventh_minor
 28250  004980  24F3               	addwf	prodl,w,c
 28251  004982  6EF6               	movwf	tblptrl,c
 28252  004984  0EF2               	movlw	high _diatonic_seventh_minor
 28253  004986  20F4               	addwfc	prodh,w,c
 28254  004988  6EF7               	movwf	tblptrh,c
 28255  00498A                     	if	0	;There are less than 3 active tblptr bytes
 28256  00498A                     	endif
 28257  00498A  5168               	movf	playDiatonicSeventhMinor@i_1725& (0+255),w,b
 28258  00498C  0D01               	mullw	1
 28259  00498E  0E82               	movlw	low _ARPEGGIO
 28260  004990  24F3               	addwf	prodl,w,c
 28261  004992  6ED9               	movwf	fsr2l,c
 28262  004994  0E01               	movlw	high _ARPEGGIO
 28263  004996  20F4               	addwfc	prodh,w,c
 28264  004998  6EDA               	movwf	fsr2h,c
 28265  00499A  0008               	tblrd		*
 28266  00499C  CFF5 FFDF          	movff	tablat,indf2
 28267  0049A0                     l1726:
 28268                           
 28269                           ; BSR set to: 0
 28270                           ;keyboard.c: 1319: if(i>0){ARPEGGIO[i] = diatonic_seventh_minor[index][0] + diatonic_sev
      +                          enth_minor[index][i];}
 28271                           
 28272                           ; BSR set to: 0
 28273  0049A0  5168               	movf	playDiatonicSeventhMinor@i_1725& (0+255),w,b
 28274  0049A2  B4D8               	btfsc	status,2,c
 28275  0049A4  D02B               	goto	l1727
 28276                           
 28277                           ; BSR set to: 0
 28278  0049A6  5168               	movf	playDiatonicSeventhMinor@i_1725& (0+255),w,b
 28279  0049A8  0D01               	mullw	1
 28280  0049AA  0E82               	movlw	low _ARPEGGIO
 28281  0049AC  24F3               	addwf	prodl,w,c
 28282  0049AE  6ED9               	movwf	fsr2l,c
 28283  0049B0  0E01               	movlw	high _ARPEGGIO
 28284  0049B2  20F4               	addwfc	prodh,w,c
 28285  0049B4  6EDA               	movwf	fsr2h,c
 28286  0049B6  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28287  0049B8  0D04               	mullw	4
 28288  0049BA  0E6B               	movlw	low _diatonic_seventh_minor
 28289  0049BC  6F62               	movwf	??_playDiatonicSeventhMinor& (0+255),b
 28290  0049BE  0EF2               	movlw	high _diatonic_seventh_minor
 28291  0049C0  6F63               	movwf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 28292  0049C2  50F3               	movf	prodl,w,c
 28293  0049C4  2762               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 28294  0049C6  50F4               	movf	prodh,w,c
 28295  0049C8  2363               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28296  0049CA  5168               	movf	playDiatonicSeventhMinor@i_1725& (0+255),w,b
 28297  0049CC  0D01               	mullw	1
 28298  0049CE  50F3               	movf	prodl,w,c
 28299  0049D0  2762               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 28300  0049D2  50F4               	movf	prodh,w,c
 28301  0049D4  2363               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28302  0049D6  C062  FFF6         	movff	??_playDiatonicSeventhMinor,tblptrl
 28303  0049DA  C063  FFF7         	movff	??_playDiatonicSeventhMinor+1,tblptrh
 28304  0049DE                     	if	0	;tblptru may be non-zero
 28305  0049DE                     	endif
 28306  0049DE                     	if	0	;tblptru may be non-zero
 28307  0049DE                     	endif
 28308  0049DE  0008               	tblrd		*
 28309  0049E0  CFF5 F064          	movff	tablat,??_playDiatonicSeventhMinor+2
 28310  0049E4  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28311  0049E6  0D04               	mullw	4
 28312  0049E8  0E6B               	movlw	low _diatonic_seventh_minor
 28313  0049EA  24F3               	addwf	prodl,w,c
 28314  0049EC  6EF6               	movwf	tblptrl,c
 28315  0049EE  0EF2               	movlw	high _diatonic_seventh_minor
 28316  0049F0  20F4               	addwfc	prodh,w,c
 28317  0049F2  6EF7               	movwf	tblptrh,c
 28318  0049F4                     	if	0	;There are less than 3 active tblptr bytes
 28319  0049F4                     	endif
 28320  0049F4  0008               	tblrd		*
 28321  0049F6  50F5               	movf	tablat,w,c
 28322  0049F8  2564               	addwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 28323  0049FA  6EDF               	movwf	indf2,c
 28324  0049FC                     l1727:
 28325                           
 28326                           ; BSR set to: 0
 28327                           
 28328                           ; BSR set to: 0
 28329  0049FC  2B68               	incf	playDiatonicSeventhMinor@i_1725& (0+255),f,b
 28330  0049FE  D7B6               	goto	l26856
 28331  004A00                     u46680:
 28332                           
 28333                           ; BSR set to: 0
 28334                           ;keyboard.c: 1320: }
 28335                           ;keyboard.c: 1322: NUM_NOTES_PRESSED = 4;
 28336                           
 28337                           ; BSR set to: 0
 28338  004A00  0E04               	movlw	4
 28339  004A02  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 28340                           
 28341                           ; BSR set to: 0
 28342                           ;keyboard.c: 1325: if(LATCH == 0) {latch_was_pressed = 0;}
 28343  004A04  A204               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 28344                           
 28345                           ; BSR set to: 0
 28346  004A06  9C03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28347                           
 28348                           ; BSR set to: 0
 28349                           ;keyboard.c: 1328: finish_arpeggio_setup();
 28350                           
 28351                           ; BSR set to: 0
 28352  004A08  ECE7  F04B         	call	_finish_arpeggio_setup	;wreg free
 28353                           
 28354                           ;keyboard.c: 1330: TMR0ON = 1;
 28355  004A0C  8ED5               	bsf	4053,7,c	;volatile
 28356  004A0E                     l1721:
 28357                           
 28358                           ;keyboard.c: 1331: }
 28359                           ;keyboard.c: 1333: if((ON_OFF == 0) && (LATCH == 0)) {
 28360  004A0E  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28361  004A10  0012               	return	
 28362  004A12  B204               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 28363  004A14  0012               	return	
 28364                           
 28365                           ;keyboard.c: 1335: if(NUM_NOTES_PRESSED > 0){
 28366  004A16  502F               	movf	_NUM_NOTES_PRESSED,w,c
 28367  004A18  B4D8               	btfsc	status,2,c
 28368  004A1A  D00A               	goto	l1730
 28369                           
 28370                           ;keyboard.c: 1336: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 28371  004A1C  0E00               	movlw	0
 28372  004A1E  B203               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 28373  004A20  0E01               	movlw	1
 28374  004A22  EC52  F04B         	call	_wait_one_pulse
 28375                           
 28376                           ;keyboard.c: 1337: if(note_off_was_sent == 0) {key_press_release_note_off();}
 28377  004A26  A202               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 28378  004A28  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 28379                           
 28380                           ;keyboard.c: 1338: TIMER_OVERFLOWS = 0;
 28381  004A2C  0E00               	movlw	0
 28382  004A2E  6E2E               	movwf	_TIMER_OVERFLOWS,c
 28383  004A30                     l1730:
 28384                           
 28385                           ;keyboard.c: 1339: }
 28386                           ;keyboard.c: 1341: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 28387  004A30  C030  F062         	movff	_parallel,??_playDiatonicSeventhMinor
 28388  004A34  0100               	movlb	0	; () banked
 28389  004A36  6B63               	clrf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 28390  004A38  BF62               	btfsc	??_playDiatonicSeventhMinor& (0+255),7,b
 28391  004A3A  0763               	decf	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28392  004A3C  5166               	movf	playDiatonicSeventhMinor@pitch& (0+255),w,b
 28393  004A3E  6F64               	movwf	(??_playDiatonicSeventhMinor+2)& (0+255),b
 28394  004A40  6B65               	clrf	(??_playDiatonicSeventhMinor+3)& (0+255),b
 28395  004A42  5162               	movf	??_playDiatonicSeventhMinor& (0+255),w,b
 28396  004A44  1964               	xorwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 28397  004A46  E106               	bnz	l26900
 28398  004A48  5163               	movf	(??_playDiatonicSeventhMinor+1)& (0+255),w,b
 28399  004A4A  1965               	xorwf	(??_playDiatonicSeventhMinor+3)& (0+255),w,b
 28400  004A4C  A4D8               	btfss	status,2,c
 28401  004A4E  D002               	goto	l1732
 28402                           
 28403                           ; BSR set to: 0
 28404  004A50  0E00               	movlw	0
 28405  004A52  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 28406  004A54                     l1732:
 28407  004A54                     l26900:
 28408                           
 28409                           ; BSR set to: 0
 28410                           ;keyboard.c: 1343: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 28411  004A54  BE03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 28412                           
 28413                           ; BSR set to: 0
 28414  004A56  AC03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28415  004A58  D001               	goto	l1733
 28416                           
 28417                           ; BSR set to: 0
 28418                           ;keyboard.c: 1344: LATCH = 1;
 28419  004A5A  8204               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 28420  004A5C                     l1733:
 28421                           
 28422                           ; BSR set to: 0
 28423                           ;keyboard.c: 1345: }
 28424                           ;keyboard.c: 1348: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_presse
      +                          d == 1)){
 28425  004A5C  A004               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 28426  004A5E  D002               	goto	u46780
 28427                           
 28428                           ; BSR set to: 0
 28429  004A60  A004               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 28430  004A62  D006               	goto	l1734
 28431  004A64                     u46780:
 28432                           
 28433                           ; BSR set to: 0
 28434  004A64  AC03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28435  004A66  D004               	goto	l1734
 28436                           
 28437                           ; BSR set to: 0
 28438                           ;keyboard.c: 1349: NUM_NOTES_PRESSED = 0;
 28439  004A68  0E00               	movlw	0
 28440  004A6A  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 28441                           
 28442                           ;keyboard.c: 1350: ARRAY_INDEX = 0;
 28443  004A6C  0E00               	movlw	0
 28444  004A6E  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 28445  004A70                     l1734:
 28446                           
 28447                           ; BSR set to: 0
 28448                           ;keyboard.c: 1351: }
 28449                           ;keyboard.c: 1354: finish_arpeggio_setup();
 28450                           
 28451                           ; BSR set to: 0
 28452  004A70  ECE7  F04B         	call	_finish_arpeggio_setup	;wreg free
 28453                           
 28454                           ;keyboard.c: 1355: TMR0ON = 1;
 28455  004A74  8ED5               	bsf	4053,7,c	;volatile
 28456                           
 28457                           ;keyboard.c: 1357: return;
 28458  004A76  0012               	return	
 28459  004A78                     __end_of_playDiatonicSeventhMinor:
 28460                           	opt stack 0
 28461                           tblptru	equ	0xFF8
 28462                           tblptrh	equ	0xFF7
 28463                           tblptrl	equ	0xFF6
 28464                           tablat	equ	0xFF5
 28465                           prodh	equ	0xFF4
 28466                           prodl	equ	0xFF3
 28467                           intcon	equ	0xFF2
 28468                           intcon2	equ	0xFF1
 28469                           postinc0	equ	0xFEE
 28470                           wreg	equ	0xFE8
 28471                           postinc1	equ	0xFE6
 28472                           plusw1	equ	0xFE3
 28473                           fsr1h	equ	0xFE2
 28474                           fsr1l	equ	0xFE1
 28475                           indf2	equ	0xFDF
 28476                           postinc2	equ	0xFDE
 28477                           postdec2	equ	0xFDD
 28478                           plusw2	equ	0xFDB
 28479                           fsr2h	equ	0xFDA
 28480                           fsr2l	equ	0xFD9
 28481                           status	equ	0xFD8
 28482                           
 28483 ;; *************** function _playDiatonicSeventhMajor *****************
 28484 ;; Defined at:
 28485 ;;		line 1135 in file "keyboard.c"
 28486 ;; Parameters:    Size  Location     Type
 28487 ;;  pitch           1    wreg     unsigned char 
 28488 ;;  index           1    1[BANK0 ] unsigned char 
 28489 ;; Auto vars:     Size  Location     Type
 28490 ;;  pitch           1    8[BANK0 ] unsigned char 
 28491 ;;  i               1    7[BANK0 ] unsigned char 
 28492 ;;  i               1    6[BANK0 ] unsigned char 
 28493 ;; Return value:  Size  Location     Type
 28494 ;;                  1    wreg      void 
 28495 ;; Registers used:
 28496 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28497 ;; Tracked objects:
 28498 ;;		On entry : 0/0
 28499 ;;		On exit  : 0/0
 28500 ;;		Unchanged: 0/0
 28501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 28502 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28503 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28504 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28505 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28506 ;;Total ram usage:        8 bytes
 28507 ;; Hardware stack levels used:    1
 28508 ;; Hardware stack levels required when called:   10
 28509 ;; This function calls:
 28510 ;;		_finish_arpeggio_setup
 28511 ;;		_key_press_release_note_off
 28512 ;;		_noteOff
 28513 ;;		_noteOn
 28514 ;;		_wait_one_pulse
 28515 ;; This function is called by:
 28516 ;;		_playThisNote8
 28517 ;; This function uses a non-reentrant model
 28518 ;;
 28519                           
 28520                           	psect	text76
 28521  0055A8                     __ptext76:
 28522                           	opt stack 0
 28523  0055A8                     _playDiatonicSeventhMajor:
 28524                           	opt stack 13
 28525                           
 28526                           ;incstack = 0
 28527                           ;playDiatonicSeventhMajor@pitch stored from wreg
 28528  0055A8  0100               	movlb	0	; () banked
 28529  0055AA  6F68               	movwf	playDiatonicSeventhMajor@pitch& (0+255),b
 28530                           
 28531                           ;keyboard.c: 1138: if(ARPEGGIO_ON == 0){
 28532  0055AC  B804               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 28533  0055AE  D04B               	goto	u46340
 28534                           
 28535                           ;keyboard.c: 1139: for(unsigned char i = 0; i<4; i++){
 28536  0055B0  0E00               	movlw	0
 28537  0055B2  0100               	movlb	0	; () banked
 28538  0055B4  6F66               	movwf	playDiatonicSeventhMajor@i& (0+255),b
 28539  0055B6                     l26724:
 28540                           
 28541                           ; BSR set to: 0
 28542  0055B6  0E03               	movlw	3
 28543  0055B8  6566               	cpfsgt	playDiatonicSeventhMajor@i& (0+255),b
 28544  0055BA  D001               	goto	l1660
 28545  0055BC  D044               	goto	u46340
 28546  0055BE                     l1660:
 28547                           
 28548                           ; BSR set to: 0
 28549                           ;keyboard.c: 1141: if(ON_OFF == 1) {noteOn(channel,pitch + diatonic_seventh_major[index]
      +                          [i],velocity);}
 28550  0055BE  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28551  0055C0  D01E               	goto	l1662
 28552                           
 28553                           ; BSR set to: 0
 28554  0055C2  5051               	movf	_velocity,w,c
 28555  0055C4  6EE6               	movwf	postinc1,c
 28556  0055C6  5161               	movf	playDiatonicSeventhMajor@index& (0+255),w,b
 28557  0055C8  0D04               	mullw	4
 28558  0055CA  0EA7               	movlw	low _diatonic_seventh_major
 28559  0055CC  6F62               	movwf	??_playDiatonicSeventhMajor& (0+255),b
 28560  0055CE  0EF2               	movlw	high _diatonic_seventh_major
 28561  0055D0  6F63               	movwf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 28562  0055D2  50F3               	movf	prodl,w,c
 28563  0055D4  2762               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 28564  0055D6  50F4               	movf	prodh,w,c
 28565  0055D8  2363               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28566  0055DA  5166               	movf	playDiatonicSeventhMajor@i& (0+255),w,b
 28567  0055DC  0D01               	mullw	1
 28568  0055DE  50F3               	movf	prodl,w,c
 28569  0055E0  2762               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 28570  0055E2  50F4               	movf	prodh,w,c
 28571  0055E4  2363               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28572  0055E6  C062  FFF6         	movff	??_playDiatonicSeventhMajor,tblptrl
 28573  0055EA  C063  FFF7         	movff	??_playDiatonicSeventhMajor+1,tblptrh
 28574  0055EE                     	if	0	;tblptru may be non-zero
 28575  0055EE                     	endif
 28576  0055EE                     	if	0	;tblptru may be non-zero
 28577  0055EE                     	endif
 28578  0055EE  0008               	tblrd		*
 28579  0055F0  50F5               	movf	tablat,w,c
 28580  0055F2  2568               	addwf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 28581  0055F4  6EE6               	movwf	postinc1,c
 28582  0055F6  503E               	movf	_channel,w,c
 28583  0055F8  6EE6               	movwf	postinc1,c
 28584  0055FA  ECF8  F044         	call	_noteOn	;wreg free
 28585  0055FE                     l1662:
 28586                           
 28587                           ;keyboard.c: 1142: if(ON_OFF == 0) {noteOff(channel,pitch + diatonic_seventh_major[index
      +                          ][i],velocity);}
 28588  0055FE  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28589  005600  D01F               	goto	l1663
 28590  005602  5051               	movf	_velocity,w,c
 28591  005604  6EE6               	movwf	postinc1,c
 28592  005606  0100               	movlb	0	; () banked
 28593  005608  5161               	movf	playDiatonicSeventhMajor@index& (0+255),w,b
 28594  00560A  0D04               	mullw	4
 28595  00560C  0EA7               	movlw	low _diatonic_seventh_major
 28596  00560E  6F62               	movwf	??_playDiatonicSeventhMajor& (0+255),b
 28597  005610  0EF2               	movlw	high _diatonic_seventh_major
 28598  005612  6F63               	movwf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 28599  005614  50F3               	movf	prodl,w,c
 28600  005616  2762               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 28601  005618  50F4               	movf	prodh,w,c
 28602  00561A  2363               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28603  00561C  5166               	movf	playDiatonicSeventhMajor@i& (0+255),w,b
 28604  00561E  0D01               	mullw	1
 28605  005620  50F3               	movf	prodl,w,c
 28606  005622  2762               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 28607  005624  50F4               	movf	prodh,w,c
 28608  005626  2363               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28609  005628  C062  FFF6         	movff	??_playDiatonicSeventhMajor,tblptrl
 28610  00562C  C063  FFF7         	movff	??_playDiatonicSeventhMajor+1,tblptrh
 28611  005630                     	if	0	;tblptru may be non-zero
 28612  005630                     	endif
 28613  005630                     	if	0	;tblptru may be non-zero
 28614  005630                     	endif
 28615  005630  0008               	tblrd		*
 28616  005632  50F5               	movf	tablat,w,c
 28617  005634  2568               	addwf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 28618  005636  6EE6               	movwf	postinc1,c
 28619  005638  503E               	movf	_channel,w,c
 28620  00563A  6EE6               	movwf	postinc1,c
 28621  00563C  ECAD  F049         	call	_noteOff	;wreg free
 28622  005640                     l1663:
 28623  005640  0100               	movlb	0	; () banked
 28624  005642  2B66               	incf	playDiatonicSeventhMajor@i& (0+255),f,b
 28625  005644  D7B8               	goto	l26724
 28626  005646                     u46340:
 28627                           
 28628                           ;keyboard.c: 1143: }
 28629                           ;keyboard.c: 1144: }
 28630                           ;keyboard.c: 1147: if(ARPEGGIO_ON == 1){
 28631                           
 28632                           ; BSR set to: 0
 28633  005646  A804               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 28634  005648  0012               	return	
 28635                           
 28636                           ;keyboard.c: 1148: if(ON_OFF == 1) {
 28637  00564A  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28638  00564C  D041               	goto	l1665
 28639                           
 28640                           ;keyboard.c: 1150: TMR0ON = 0;
 28641  00564E  9ED5               	bcf	4053,7,c	;volatile
 28642                           
 28643                           ;keyboard.c: 1152: parallel = pitch;
 28644  005650  C068  F030         	movff	playDiatonicSeventhMajor@pitch,_parallel
 28645                           
 28646                           ;keyboard.c: 1155: if(NUM_NOTES_PRESSED > 0){
 28647  005654  502F               	movf	_NUM_NOTES_PRESSED,w,c
 28648  005656  B4D8               	btfsc	status,2,c
 28649  005658  D00A               	goto	l1666
 28650                           
 28651                           ;keyboard.c: 1156: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 28652  00565A  0E00               	movlw	0
 28653  00565C  B403               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 28654  00565E  0E01               	movlw	1
 28655  005660  EC52  F04B         	call	_wait_one_pulse
 28656                           
 28657                           ;keyboard.c: 1157: if(note_off_was_sent == 0) {key_press_release_note_off();}
 28658  005664  A202               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 28659  005666  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 28660                           
 28661                           ;keyboard.c: 1158: TIMER_OVERFLOWS = 0;
 28662  00566A  0E00               	movlw	0
 28663  00566C  6E2E               	movwf	_TIMER_OVERFLOWS,c
 28664  00566E                     l1666:
 28665                           
 28666                           ;keyboard.c: 1159: }
 28667                           ;keyboard.c: 1161: for(unsigned char i = 0; i<4; i++){
 28668  00566E  0E00               	movlw	0
 28669  005670  0100               	movlb	0	; () banked
 28670  005672  6F67               	movwf	playDiatonicSeventhMajor@i_1715& (0+255),b
 28671  005674                     l26754:
 28672                           
 28673                           ; BSR set to: 0
 28674  005674  0E03               	movlw	3
 28675  005676  6567               	cpfsgt	playDiatonicSeventhMajor@i_1715& (0+255),b
 28676  005678  D001               	goto	l1668
 28677  00567A  D022               	goto	u46400
 28678  00567C                     l1668:
 28679                           
 28680                           ; BSR set to: 0
 28681                           ;keyboard.c: 1162: ARPEGGIO[i] = pitch + diatonic_seventh_major[index][i];
 28682                           
 28683                           ; BSR set to: 0
 28684  00567C  5167               	movf	playDiatonicSeventhMajor@i_1715& (0+255),w,b
 28685  00567E  0D01               	mullw	1
 28686  005680  0E82               	movlw	low _ARPEGGIO
 28687  005682  24F3               	addwf	prodl,w,c
 28688  005684  6ED9               	movwf	fsr2l,c
 28689  005686  0E01               	movlw	high _ARPEGGIO
 28690  005688  20F4               	addwfc	prodh,w,c
 28691  00568A  6EDA               	movwf	fsr2h,c
 28692  00568C  5161               	movf	playDiatonicSeventhMajor@index& (0+255),w,b
 28693  00568E  0D04               	mullw	4
 28694  005690  0EA7               	movlw	low _diatonic_seventh_major
 28695  005692  6F62               	movwf	??_playDiatonicSeventhMajor& (0+255),b
 28696  005694  0EF2               	movlw	high _diatonic_seventh_major
 28697  005696  6F63               	movwf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 28698  005698  50F3               	movf	prodl,w,c
 28699  00569A  2762               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 28700  00569C  50F4               	movf	prodh,w,c
 28701  00569E  2363               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28702  0056A0  5167               	movf	playDiatonicSeventhMajor@i_1715& (0+255),w,b
 28703  0056A2  0D01               	mullw	1
 28704  0056A4  50F3               	movf	prodl,w,c
 28705  0056A6  2762               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 28706  0056A8  50F4               	movf	prodh,w,c
 28707  0056AA  2363               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28708  0056AC  C062  FFF6         	movff	??_playDiatonicSeventhMajor,tblptrl
 28709  0056B0  C063  FFF7         	movff	??_playDiatonicSeventhMajor+1,tblptrh
 28710  0056B4                     	if	0	;tblptru may be non-zero
 28711  0056B4                     	endif
 28712  0056B4                     	if	0	;tblptru may be non-zero
 28713  0056B4                     	endif
 28714  0056B4  0008               	tblrd		*
 28715  0056B6  50F5               	movf	tablat,w,c
 28716  0056B8  2568               	addwf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 28717  0056BA  6EDF               	movwf	indf2,c
 28718                           
 28719                           ; BSR set to: 0
 28720  0056BC  2B67               	incf	playDiatonicSeventhMajor@i_1715& (0+255),f,b
 28721  0056BE  D7DA               	goto	l26754
 28722  0056C0                     u46400:
 28723                           
 28724                           ; BSR set to: 0
 28725                           ;keyboard.c: 1163: }
 28726                           ;keyboard.c: 1165: NUM_NOTES_PRESSED = 4;
 28727                           
 28728                           ; BSR set to: 0
 28729  0056C0  0E04               	movlw	4
 28730  0056C2  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 28731                           
 28732                           ; BSR set to: 0
 28733                           ;keyboard.c: 1168: if(LATCH == 0) {latch_was_pressed = 0;}
 28734  0056C4  A204               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 28735                           
 28736                           ; BSR set to: 0
 28737  0056C6  9C03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28738                           
 28739                           ; BSR set to: 0
 28740                           ;keyboard.c: 1171: finish_arpeggio_setup();
 28741                           
 28742                           ; BSR set to: 0
 28743  0056C8  ECE7  F04B         	call	_finish_arpeggio_setup	;wreg free
 28744                           
 28745                           ;keyboard.c: 1173: TMR0ON = 1;
 28746  0056CC  8ED5               	bsf	4053,7,c	;volatile
 28747                           
 28748                           ;keyboard.c: 1175: return;
 28749  0056CE  0012               	return	
 28750  0056D0                     l1665:
 28751                           
 28752                           ;keyboard.c: 1176: }
 28753                           ;keyboard.c: 1178: if((ON_OFF == 0) && (LATCH == 0)) {
 28754  0056D0  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28755  0056D2  0012               	return	
 28756  0056D4  B204               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 28757  0056D6  0012               	return	
 28758                           
 28759                           ;keyboard.c: 1180: if(NUM_NOTES_PRESSED > 0){
 28760  0056D8  502F               	movf	_NUM_NOTES_PRESSED,w,c
 28761  0056DA  B4D8               	btfsc	status,2,c
 28762  0056DC  D00A               	goto	l1673
 28763                           
 28764                           ;keyboard.c: 1181: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 28765  0056DE  0E00               	movlw	0
 28766  0056E0  B203               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 28767  0056E2  0E01               	movlw	1
 28768  0056E4  EC52  F04B         	call	_wait_one_pulse
 28769                           
 28770                           ;keyboard.c: 1182: if(note_off_was_sent == 0) {key_press_release_note_off();}
 28771  0056E8  A202               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 28772  0056EA  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 28773                           
 28774                           ;keyboard.c: 1183: TIMER_OVERFLOWS = 0;
 28775  0056EE  0E00               	movlw	0
 28776  0056F0  6E2E               	movwf	_TIMER_OVERFLOWS,c
 28777  0056F2                     l1673:
 28778                           
 28779                           ;keyboard.c: 1184: }
 28780                           ;keyboard.c: 1186: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 28781  0056F2  C030  F062         	movff	_parallel,??_playDiatonicSeventhMajor
 28782  0056F6  0100               	movlb	0	; () banked
 28783  0056F8  6B63               	clrf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 28784  0056FA  BF62               	btfsc	??_playDiatonicSeventhMajor& (0+255),7,b
 28785  0056FC  0763               	decf	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28786  0056FE  5168               	movf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 28787  005700  6F64               	movwf	(??_playDiatonicSeventhMajor+2)& (0+255),b
 28788  005702  6B65               	clrf	(??_playDiatonicSeventhMajor+3)& (0+255),b
 28789  005704  5162               	movf	??_playDiatonicSeventhMajor& (0+255),w,b
 28790  005706  1964               	xorwf	(??_playDiatonicSeventhMajor+2)& (0+255),w,b
 28791  005708  E106               	bnz	l26792
 28792  00570A  5163               	movf	(??_playDiatonicSeventhMajor+1)& (0+255),w,b
 28793  00570C  1965               	xorwf	(??_playDiatonicSeventhMajor+3)& (0+255),w,b
 28794  00570E  A4D8               	btfss	status,2,c
 28795  005710  D002               	goto	l1675
 28796                           
 28797                           ; BSR set to: 0
 28798  005712  0E00               	movlw	0
 28799  005714  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 28800  005716                     l1675:
 28801  005716                     l26792:
 28802                           
 28803                           ; BSR set to: 0
 28804                           ;keyboard.c: 1188: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 28805  005716  BE03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 28806                           
 28807                           ; BSR set to: 0
 28808  005718  AC03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28809  00571A  D001               	goto	l1676
 28810                           
 28811                           ; BSR set to: 0
 28812                           ;keyboard.c: 1189: LATCH = 1;
 28813  00571C  8204               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 28814  00571E                     l1676:
 28815                           
 28816                           ; BSR set to: 0
 28817                           ;keyboard.c: 1190: }
 28818                           ;keyboard.c: 1193: if(((UN_LATCH_MODE == 0 | (UN_LATCH_MODE == 1)) && (latch_was_pressed
      +                           == 1))){
 28819  00571E  A004               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 28820  005720  D002               	goto	u46500
 28821                           
 28822                           ; BSR set to: 0
 28823  005722  A004               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 28824  005724  D006               	goto	l1677
 28825  005726                     u46500:
 28826                           
 28827                           ; BSR set to: 0
 28828  005726  AC03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28829  005728  D004               	goto	l1677
 28830                           
 28831                           ; BSR set to: 0
 28832                           ;keyboard.c: 1194: NUM_NOTES_PRESSED = 0;
 28833  00572A  0E00               	movlw	0
 28834  00572C  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 28835                           
 28836                           ;keyboard.c: 1195: ARRAY_INDEX = 0;
 28837  00572E  0E00               	movlw	0
 28838  005730  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 28839  005732                     l1677:
 28840                           
 28841                           ; BSR set to: 0
 28842                           ;keyboard.c: 1196: }
 28843                           ;keyboard.c: 1199: finish_arpeggio_setup();
 28844                           
 28845                           ; BSR set to: 0
 28846  005732  ECE7  F04B         	call	_finish_arpeggio_setup	;wreg free
 28847                           
 28848                           ;keyboard.c: 1200: TMR0ON = 1;
 28849  005736  8ED5               	bsf	4053,7,c	;volatile
 28850                           
 28851                           ;keyboard.c: 1202: return;
 28852  005738  0012               	return	
 28853  00573A                     __end_of_playDiatonicSeventhMajor:
 28854                           	opt stack 0
 28855                           tblptru	equ	0xFF8
 28856                           tblptrh	equ	0xFF7
 28857                           tblptrl	equ	0xFF6
 28858                           tablat	equ	0xFF5
 28859                           prodh	equ	0xFF4
 28860                           prodl	equ	0xFF3
 28861                           intcon	equ	0xFF2
 28862                           intcon2	equ	0xFF1
 28863                           postinc0	equ	0xFEE
 28864                           wreg	equ	0xFE8
 28865                           postinc1	equ	0xFE6
 28866                           plusw1	equ	0xFE3
 28867                           fsr1h	equ	0xFE2
 28868                           fsr1l	equ	0xFE1
 28869                           indf2	equ	0xFDF
 28870                           postinc2	equ	0xFDE
 28871                           postdec2	equ	0xFDD
 28872                           plusw2	equ	0xFDB
 28873                           fsr2h	equ	0xFDA
 28874                           fsr2l	equ	0xFD9
 28875                           status	equ	0xFD8
 28876                           
 28877 ;; *************** function _keyboard_all_note_efficient *****************
 28878 ;; Defined at:
 28879 ;;		line 590 in file "keyboard.c"
 28880 ;; Parameters:    Size  Location     Type
 28881 ;;		None
 28882 ;; Auto vars:     Size  Location     Type
 28883 ;;  pitch           1   22[BANK0 ] unsigned char 
 28884 ;; Return value:  Size  Location     Type
 28885 ;;                  1    wreg      void 
 28886 ;; Registers used:
 28887 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28888 ;; Tracked objects:
 28889 ;;		On entry : 0/0
 28890 ;;		On exit  : 0/0
 28891 ;;		Unchanged: 0/0
 28892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 28893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28894 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28896 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28897 ;;Total ram usage:        1 bytes
 28898 ;; Hardware stack levels used:    1
 28899 ;; Hardware stack levels required when called:   12
 28900 ;; This function calls:
 28901 ;;		_playThisNote
 28902 ;; This function is called by:
 28903 ;;		_processKeyboard
 28904 ;; This function uses a non-reentrant model
 28905 ;;
 28906                           
 28907                           	psect	text77
 28908  001762                     __ptext77:
 28909                           	opt stack 0
 28910  001762                     _keyboard_all_note_efficient:
 28911                           	opt stack 13
 28912                           
 28913                           ;keyboard.c: 592: unsigned char pitch;
 28914                           ;keyboard.c: 595: if((button_state_now & 0x00000001) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW1) {
 28915                           
 28916                           ;incstack = 0
 28917  001762  0100               	movlb	0	; () banked
 28918  001764  B1D8               	btfsc	_button_state_now& (0+255),0,b
 28919                           
 28920                           ; BSR set to: 0
 28921  001766  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 28922  001768  D00A               	goto	l1523
 28923                           
 28924                           ; BSR set to: 0
 28925  00176A  B1D0               	btfsc	_keyboard& (0+255),0,b
 28926  00176C  D008               	goto	l1523
 28927                           
 28928                           ; BSR set to: 0
 28929                           ;keyboard.c: 596: pitch = C;
 28930  00176E  0E00               	movlw	0
 28931  001770  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 28932                           
 28933                           ; BSR set to: 0
 28934                           ;keyboard.c: 597: ON_OFF = 1;
 28935  001772  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28936                           
 28937                           ; BSR set to: 0
 28938                           ;keyboard.c: 598: playThisNote(pitch);
 28939  001774  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 28940  001776  EC55  F033         	call	_playThisNote
 28941                           
 28942                           ;keyboard.c: 599: keyboard.SW1 = 1;
 28943  00177A  0100               	movlb	0	; () banked
 28944  00177C  81D0               	bsf	_keyboard& (0+255),0,b
 28945  00177E                     l1523:
 28946                           
 28947                           ; BSR set to: 0
 28948                           ;keyboard.c: 600: }
 28949                           ;keyboard.c: 602: if((button_state_now & 0x00000002) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW2) {
 28950                           
 28951                           ; BSR set to: 0
 28952  00177E  B3D8               	btfsc	_button_state_now& (0+255),1,b
 28953                           
 28954                           ; BSR set to: 0
 28955  001780  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 28956  001782  D00A               	goto	l1524
 28957                           
 28958                           ; BSR set to: 0
 28959  001784  B3D0               	btfsc	_keyboard& (0+255),1,b
 28960  001786  D008               	goto	l1524
 28961                           
 28962                           ; BSR set to: 0
 28963                           ;keyboard.c: 603: pitch = Cs;
 28964  001788  0E01               	movlw	1
 28965  00178A  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 28966                           
 28967                           ; BSR set to: 0
 28968                           ;keyboard.c: 604: ON_OFF = 1;
 28969  00178C  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28970                           
 28971                           ; BSR set to: 0
 28972                           ;keyboard.c: 605: playThisNote(pitch);
 28973  00178E  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 28974  001790  EC55  F033         	call	_playThisNote
 28975                           
 28976                           ;keyboard.c: 606: keyboard.SW2 = 1;
 28977  001794  0100               	movlb	0	; () banked
 28978  001796  83D0               	bsf	_keyboard& (0+255),1,b
 28979  001798                     l1524:
 28980                           
 28981                           ; BSR set to: 0
 28982                           ;keyboard.c: 607: }
 28983                           ;keyboard.c: 609: if((button_state_now & 0x00000004) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW3) {
 28984                           
 28985                           ; BSR set to: 0
 28986  001798  B5D8               	btfsc	_button_state_now& (0+255),2,b
 28987                           
 28988                           ; BSR set to: 0
 28989  00179A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 28990  00179C  D00A               	goto	l1525
 28991                           
 28992                           ; BSR set to: 0
 28993  00179E  B5D0               	btfsc	_keyboard& (0+255),2,b
 28994  0017A0  D008               	goto	l1525
 28995                           
 28996                           ; BSR set to: 0
 28997                           ;keyboard.c: 610: pitch = D;
 28998  0017A2  0E02               	movlw	2
 28999  0017A4  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29000                           
 29001                           ; BSR set to: 0
 29002                           ;keyboard.c: 611: ON_OFF = 1;
 29003  0017A6  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29004                           
 29005                           ; BSR set to: 0
 29006                           ;keyboard.c: 612: playThisNote(pitch);
 29007  0017A8  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29008  0017AA  EC55  F033         	call	_playThisNote
 29009                           
 29010                           ;keyboard.c: 613: keyboard.SW3 = 1;
 29011  0017AE  0100               	movlb	0	; () banked
 29012  0017B0  85D0               	bsf	_keyboard& (0+255),2,b
 29013  0017B2                     l1525:
 29014                           
 29015                           ; BSR set to: 0
 29016                           ;keyboard.c: 614: }
 29017                           ;keyboard.c: 615: if((button_state_now & 0x00000008) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW4) {
 29018                           
 29019                           ; BSR set to: 0
 29020  0017B2  B7D8               	btfsc	_button_state_now& (0+255),3,b
 29021                           
 29022                           ; BSR set to: 0
 29023  0017B4  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29024  0017B6  D00A               	goto	l1526
 29025                           
 29026                           ; BSR set to: 0
 29027  0017B8  B7D0               	btfsc	_keyboard& (0+255),3,b
 29028  0017BA  D008               	goto	l1526
 29029                           
 29030                           ; BSR set to: 0
 29031                           ;keyboard.c: 616: pitch = Ds;
 29032  0017BC  0E03               	movlw	3
 29033  0017BE  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29034                           
 29035                           ; BSR set to: 0
 29036                           ;keyboard.c: 617: ON_OFF = 1;
 29037  0017C0  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29038                           
 29039                           ; BSR set to: 0
 29040                           ;keyboard.c: 618: playThisNote(pitch);
 29041  0017C2  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29042  0017C4  EC55  F033         	call	_playThisNote
 29043                           
 29044                           ;keyboard.c: 619: keyboard.SW4 = 1;
 29045  0017C8  0100               	movlb	0	; () banked
 29046  0017CA  87D0               	bsf	_keyboard& (0+255),3,b
 29047  0017CC                     l1526:
 29048                           
 29049                           ; BSR set to: 0
 29050                           ;keyboard.c: 620: }
 29051                           ;keyboard.c: 621: if((button_state_now & 0x00000010) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW5) {
 29052                           
 29053                           ; BSR set to: 0
 29054  0017CC  B9D8               	btfsc	_button_state_now& (0+255),4,b
 29055                           
 29056                           ; BSR set to: 0
 29057  0017CE  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29058  0017D0  D00A               	goto	l1527
 29059                           
 29060                           ; BSR set to: 0
 29061  0017D2  B9D0               	btfsc	_keyboard& (0+255),4,b
 29062  0017D4  D008               	goto	l1527
 29063                           
 29064                           ; BSR set to: 0
 29065                           ;keyboard.c: 622: pitch = E;
 29066  0017D6  0E04               	movlw	4
 29067  0017D8  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29068                           
 29069                           ; BSR set to: 0
 29070                           ;keyboard.c: 623: ON_OFF = 1;
 29071  0017DA  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29072                           
 29073                           ; BSR set to: 0
 29074                           ;keyboard.c: 624: playThisNote(pitch);
 29075  0017DC  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29076  0017DE  EC55  F033         	call	_playThisNote
 29077                           
 29078                           ;keyboard.c: 625: keyboard.SW5 = 1;
 29079  0017E2  0100               	movlb	0	; () banked
 29080  0017E4  89D0               	bsf	_keyboard& (0+255),4,b
 29081  0017E6                     l1527:
 29082                           
 29083                           ; BSR set to: 0
 29084                           ;keyboard.c: 626: }
 29085                           ;keyboard.c: 627: if((button_state_now & 0x00000020) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW6) {
 29086                           
 29087                           ; BSR set to: 0
 29088  0017E6  BBD8               	btfsc	_button_state_now& (0+255),5,b
 29089                           
 29090                           ; BSR set to: 0
 29091  0017E8  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29092  0017EA  D00A               	goto	l1528
 29093                           
 29094                           ; BSR set to: 0
 29095  0017EC  BBD0               	btfsc	_keyboard& (0+255),5,b
 29096  0017EE  D008               	goto	l1528
 29097                           
 29098                           ; BSR set to: 0
 29099                           ;keyboard.c: 628: pitch = F;
 29100  0017F0  0E05               	movlw	5
 29101  0017F2  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29102                           
 29103                           ; BSR set to: 0
 29104                           ;keyboard.c: 629: ON_OFF = 1;
 29105  0017F4  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29106                           
 29107                           ; BSR set to: 0
 29108                           ;keyboard.c: 630: playThisNote(pitch);
 29109  0017F6  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29110  0017F8  EC55  F033         	call	_playThisNote
 29111                           
 29112                           ;keyboard.c: 631: keyboard.SW6 = 1;
 29113  0017FC  0100               	movlb	0	; () banked
 29114  0017FE  8BD0               	bsf	_keyboard& (0+255),5,b
 29115  001800                     l1528:
 29116                           
 29117                           ; BSR set to: 0
 29118                           ;keyboard.c: 632: }
 29119                           ;keyboard.c: 633: if((button_state_now & 0x00000040) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW7) {
 29120                           
 29121                           ; BSR set to: 0
 29122  001800  BDD8               	btfsc	_button_state_now& (0+255),6,b
 29123                           
 29124                           ; BSR set to: 0
 29125  001802  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29126  001804  D00A               	goto	l1529
 29127                           
 29128                           ; BSR set to: 0
 29129  001806  BDD0               	btfsc	_keyboard& (0+255),6,b
 29130  001808  D008               	goto	l1529
 29131                           
 29132                           ; BSR set to: 0
 29133                           ;keyboard.c: 634: pitch = Fs;
 29134  00180A  0E06               	movlw	6
 29135  00180C  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29136                           
 29137                           ; BSR set to: 0
 29138                           ;keyboard.c: 635: ON_OFF = 1;
 29139  00180E  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29140                           
 29141                           ; BSR set to: 0
 29142                           ;keyboard.c: 636: playThisNote(pitch);
 29143  001810  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29144  001812  EC55  F033         	call	_playThisNote
 29145                           
 29146                           ;keyboard.c: 637: keyboard.SW7 = 1;
 29147  001816  0100               	movlb	0	; () banked
 29148  001818  8DD0               	bsf	_keyboard& (0+255),6,b
 29149  00181A                     l1529:
 29150                           
 29151                           ; BSR set to: 0
 29152                           ;keyboard.c: 638: }
 29153                           ;keyboard.c: 639: if((button_state_now & 0x00000080) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW8) {
 29154                           
 29155                           ; BSR set to: 0
 29156  00181A  BFD8               	btfsc	_button_state_now& (0+255),7,b
 29157                           
 29158                           ; BSR set to: 0
 29159  00181C  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29160  00181E  D00A               	goto	l1530
 29161                           
 29162                           ; BSR set to: 0
 29163  001820  BFD0               	btfsc	_keyboard& (0+255),7,b
 29164  001822  D008               	goto	l1530
 29165                           
 29166                           ; BSR set to: 0
 29167                           ;keyboard.c: 640: pitch = G;
 29168  001824  0E07               	movlw	7
 29169  001826  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29170                           
 29171                           ; BSR set to: 0
 29172                           ;keyboard.c: 641: ON_OFF = 1;
 29173  001828  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29174                           
 29175                           ; BSR set to: 0
 29176                           ;keyboard.c: 642: playThisNote(pitch);
 29177  00182A  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29178  00182C  EC55  F033         	call	_playThisNote
 29179                           
 29180                           ;keyboard.c: 643: keyboard.SW8 = 1;
 29181  001830  0100               	movlb	0	; () banked
 29182  001832  8FD0               	bsf	_keyboard& (0+255),7,b
 29183  001834                     l1530:
 29184                           
 29185                           ; BSR set to: 0
 29186                           ;keyboard.c: 644: }
 29187                           ;keyboard.c: 645: if((button_state_now & 0x00000100) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW9) {
 29188                           
 29189                           ; BSR set to: 0
 29190  001834  B1D9               	btfsc	(_button_state_now+1)& (0+255),0,b
 29191                           
 29192                           ; BSR set to: 0
 29193  001836  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29194  001838  D00A               	goto	l1531
 29195                           
 29196                           ; BSR set to: 0
 29197  00183A  B1D1               	btfsc	(_keyboard+1)& (0+255),0,b
 29198  00183C  D008               	goto	l1531
 29199                           
 29200                           ; BSR set to: 0
 29201                           ;keyboard.c: 646: pitch = Gs;
 29202  00183E  0E08               	movlw	8
 29203  001840  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29204                           
 29205                           ; BSR set to: 0
 29206                           ;keyboard.c: 647: ON_OFF = 1;
 29207  001842  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29208                           
 29209                           ; BSR set to: 0
 29210                           ;keyboard.c: 648: playThisNote(pitch);
 29211  001844  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29212  001846  EC55  F033         	call	_playThisNote
 29213                           
 29214                           ;keyboard.c: 649: keyboard.SW9 = 1;
 29215  00184A  0100               	movlb	0	; () banked
 29216  00184C  81D1               	bsf	(_keyboard+1)& (0+255),0,b
 29217  00184E                     l1531:
 29218                           
 29219                           ; BSR set to: 0
 29220                           ;keyboard.c: 650: }
 29221                           ;keyboard.c: 651: if((button_state_now & 0x00000200) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW10) {
 29222                           
 29223                           ; BSR set to: 0
 29224  00184E  B3D9               	btfsc	(_button_state_now+1)& (0+255),1,b
 29225                           
 29226                           ; BSR set to: 0
 29227  001850  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29228  001852  D00A               	goto	l1532
 29229                           
 29230                           ; BSR set to: 0
 29231  001854  B3D1               	btfsc	(_keyboard+1)& (0+255),1,b
 29232  001856  D008               	goto	l1532
 29233                           
 29234                           ; BSR set to: 0
 29235                           ;keyboard.c: 652: pitch = A;
 29236  001858  0E09               	movlw	9
 29237  00185A  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29238                           
 29239                           ; BSR set to: 0
 29240                           ;keyboard.c: 653: ON_OFF = 1;
 29241  00185C  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29242                           
 29243                           ; BSR set to: 0
 29244                           ;keyboard.c: 654: playThisNote(pitch);
 29245  00185E  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29246  001860  EC55  F033         	call	_playThisNote
 29247                           
 29248                           ;keyboard.c: 655: keyboard.SW10 = 1;
 29249  001864  0100               	movlb	0	; () banked
 29250  001866  83D1               	bsf	(_keyboard+1)& (0+255),1,b
 29251  001868                     l1532:
 29252                           
 29253                           ; BSR set to: 0
 29254                           ;keyboard.c: 656: }
 29255                           ;keyboard.c: 657: if((button_state_now & 0x00000400) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW11) {
 29256                           
 29257                           ; BSR set to: 0
 29258  001868  B5D9               	btfsc	(_button_state_now+1)& (0+255),2,b
 29259                           
 29260                           ; BSR set to: 0
 29261  00186A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29262  00186C  D00A               	goto	l1533
 29263                           
 29264                           ; BSR set to: 0
 29265  00186E  B5D1               	btfsc	(_keyboard+1)& (0+255),2,b
 29266  001870  D008               	goto	l1533
 29267                           
 29268                           ; BSR set to: 0
 29269                           ;keyboard.c: 658: pitch = As;
 29270  001872  0E0A               	movlw	10
 29271  001874  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29272                           
 29273                           ; BSR set to: 0
 29274                           ;keyboard.c: 659: ON_OFF = 1;
 29275  001876  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29276                           
 29277                           ; BSR set to: 0
 29278                           ;keyboard.c: 660: playThisNote(pitch);
 29279  001878  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29280  00187A  EC55  F033         	call	_playThisNote
 29281                           
 29282                           ;keyboard.c: 661: keyboard.SW11 = 1;
 29283  00187E  0100               	movlb	0	; () banked
 29284  001880  85D1               	bsf	(_keyboard+1)& (0+255),2,b
 29285  001882                     l1533:
 29286                           
 29287                           ; BSR set to: 0
 29288                           ;keyboard.c: 662: }
 29289                           ;keyboard.c: 663: if((button_state_now & 0x00000800) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW12) {
 29290                           
 29291                           ; BSR set to: 0
 29292  001882  B7D9               	btfsc	(_button_state_now+1)& (0+255),3,b
 29293                           
 29294                           ; BSR set to: 0
 29295  001884  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29296  001886  D00A               	goto	l1534
 29297                           
 29298                           ; BSR set to: 0
 29299  001888  B7D1               	btfsc	(_keyboard+1)& (0+255),3,b
 29300  00188A  D008               	goto	l1534
 29301                           
 29302                           ; BSR set to: 0
 29303                           ;keyboard.c: 664: pitch = B;
 29304  00188C  0E0B               	movlw	11
 29305  00188E  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29306                           
 29307                           ; BSR set to: 0
 29308                           ;keyboard.c: 665: ON_OFF = 1;
 29309  001890  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29310                           
 29311                           ; BSR set to: 0
 29312                           ;keyboard.c: 666: playThisNote(pitch);
 29313  001892  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29314  001894  EC55  F033         	call	_playThisNote
 29315                           
 29316                           ;keyboard.c: 667: keyboard.SW12 = 1;
 29317  001898  0100               	movlb	0	; () banked
 29318  00189A  87D1               	bsf	(_keyboard+1)& (0+255),3,b
 29319  00189C                     l1534:
 29320                           
 29321                           ; BSR set to: 0
 29322                           ;keyboard.c: 668: }
 29323                           ;keyboard.c: 669: if((button_state_now & 0x00001000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW13) {
 29324                           
 29325                           ; BSR set to: 0
 29326  00189C  B9D9               	btfsc	(_button_state_now+1)& (0+255),4,b
 29327                           
 29328                           ; BSR set to: 0
 29329  00189E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29330  0018A0  D00A               	goto	l1535
 29331                           
 29332                           ; BSR set to: 0
 29333  0018A2  B9D1               	btfsc	(_keyboard+1)& (0+255),4,b
 29334  0018A4  D008               	goto	l1535
 29335                           
 29336                           ; BSR set to: 0
 29337                           ;keyboard.c: 670: pitch = C2;
 29338  0018A6  0E0C               	movlw	12
 29339  0018A8  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29340                           
 29341                           ; BSR set to: 0
 29342                           ;keyboard.c: 671: ON_OFF = 1;
 29343  0018AA  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29344                           
 29345                           ; BSR set to: 0
 29346                           ;keyboard.c: 672: playThisNote(pitch);
 29347  0018AC  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29348  0018AE  EC55  F033         	call	_playThisNote
 29349                           
 29350                           ;keyboard.c: 673: keyboard.SW13 = 1;
 29351  0018B2  0100               	movlb	0	; () banked
 29352  0018B4  89D1               	bsf	(_keyboard+1)& (0+255),4,b
 29353  0018B6                     l1535:
 29354                           
 29355                           ; BSR set to: 0
 29356                           ;keyboard.c: 674: }
 29357                           ;keyboard.c: 675: if((button_state_now & 0x00002000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW14) {
 29358                           
 29359                           ; BSR set to: 0
 29360  0018B6  BBD9               	btfsc	(_button_state_now+1)& (0+255),5,b
 29361                           
 29362                           ; BSR set to: 0
 29363  0018B8  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29364  0018BA  D00A               	goto	l1536
 29365                           
 29366                           ; BSR set to: 0
 29367  0018BC  BBD1               	btfsc	(_keyboard+1)& (0+255),5,b
 29368  0018BE  D008               	goto	l1536
 29369                           
 29370                           ; BSR set to: 0
 29371                           ;keyboard.c: 676: pitch = C2s;
 29372  0018C0  0E0D               	movlw	13
 29373  0018C2  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29374                           
 29375                           ; BSR set to: 0
 29376                           ;keyboard.c: 677: ON_OFF = 1;
 29377  0018C4  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29378                           
 29379                           ; BSR set to: 0
 29380                           ;keyboard.c: 678: playThisNote(pitch);
 29381  0018C6  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29382  0018C8  EC55  F033         	call	_playThisNote
 29383                           
 29384                           ;keyboard.c: 679: keyboard.SW14 = 1;
 29385  0018CC  0100               	movlb	0	; () banked
 29386  0018CE  8BD1               	bsf	(_keyboard+1)& (0+255),5,b
 29387  0018D0                     l1536:
 29388                           
 29389                           ; BSR set to: 0
 29390                           ;keyboard.c: 680: }
 29391                           ;keyboard.c: 681: if((button_state_now & 0x00004000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW15) {
 29392                           
 29393                           ; BSR set to: 0
 29394  0018D0  BDD9               	btfsc	(_button_state_now+1)& (0+255),6,b
 29395                           
 29396                           ; BSR set to: 0
 29397  0018D2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29398  0018D4  D00A               	goto	l1537
 29399                           
 29400                           ; BSR set to: 0
 29401  0018D6  BDD1               	btfsc	(_keyboard+1)& (0+255),6,b
 29402  0018D8  D008               	goto	l1537
 29403                           
 29404                           ; BSR set to: 0
 29405                           ;keyboard.c: 682: pitch = D2;
 29406  0018DA  0E0E               	movlw	14
 29407  0018DC  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29408                           
 29409                           ; BSR set to: 0
 29410                           ;keyboard.c: 683: ON_OFF = 1;
 29411  0018DE  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29412                           
 29413                           ; BSR set to: 0
 29414                           ;keyboard.c: 684: playThisNote(pitch);
 29415  0018E0  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29416  0018E2  EC55  F033         	call	_playThisNote
 29417                           
 29418                           ;keyboard.c: 685: keyboard.SW15 = 1;
 29419  0018E6  0100               	movlb	0	; () banked
 29420  0018E8  8DD1               	bsf	(_keyboard+1)& (0+255),6,b
 29421  0018EA                     l1537:
 29422                           
 29423                           ; BSR set to: 0
 29424                           ;keyboard.c: 686: }
 29425                           ;keyboard.c: 687: if((button_state_now & 0x00008000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW16) {
 29426                           
 29427                           ; BSR set to: 0
 29428  0018EA  BFD9               	btfsc	(_button_state_now+1)& (0+255),7,b
 29429                           
 29430                           ; BSR set to: 0
 29431  0018EC  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29432  0018EE  D00A               	goto	l1538
 29433                           
 29434                           ; BSR set to: 0
 29435  0018F0  BFD1               	btfsc	(_keyboard+1)& (0+255),7,b
 29436  0018F2  D008               	goto	l1538
 29437                           
 29438                           ; BSR set to: 0
 29439                           ;keyboard.c: 688: pitch = D2s;
 29440  0018F4  0E0F               	movlw	15
 29441  0018F6  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29442                           
 29443                           ; BSR set to: 0
 29444                           ;keyboard.c: 689: ON_OFF = 1;
 29445  0018F8  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29446                           
 29447                           ; BSR set to: 0
 29448                           ;keyboard.c: 690: playThisNote(pitch);
 29449  0018FA  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29450  0018FC  EC55  F033         	call	_playThisNote
 29451                           
 29452                           ;keyboard.c: 691: keyboard.SW16 = 1;
 29453  001900  0100               	movlb	0	; () banked
 29454  001902  8FD1               	bsf	(_keyboard+1)& (0+255),7,b
 29455  001904                     l1538:
 29456                           
 29457                           ; BSR set to: 0
 29458                           ;keyboard.c: 692: }
 29459                           ;keyboard.c: 693: if((button_state_now & 0x00010000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW17) {
 29460                           
 29461                           ; BSR set to: 0
 29462  001904  B1DA               	btfsc	(_button_state_now+2)& (0+255),0,b
 29463                           
 29464                           ; BSR set to: 0
 29465  001906  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29466  001908  D00A               	goto	l1539
 29467                           
 29468                           ; BSR set to: 0
 29469  00190A  B1D2               	btfsc	(_keyboard+2)& (0+255),0,b
 29470  00190C  D008               	goto	l1539
 29471                           
 29472                           ; BSR set to: 0
 29473                           ;keyboard.c: 694: pitch = E2;
 29474  00190E  0E10               	movlw	16
 29475  001910  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29476                           
 29477                           ; BSR set to: 0
 29478                           ;keyboard.c: 695: ON_OFF = 1;
 29479  001912  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29480                           
 29481                           ; BSR set to: 0
 29482                           ;keyboard.c: 696: playThisNote(pitch);
 29483  001914  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29484  001916  EC55  F033         	call	_playThisNote
 29485                           
 29486                           ;keyboard.c: 697: keyboard.SW17 = 1;
 29487  00191A  0100               	movlb	0	; () banked
 29488  00191C  81D2               	bsf	(_keyboard+2)& (0+255),0,b
 29489  00191E                     l1539:
 29490                           
 29491                           ; BSR set to: 0
 29492                           ;keyboard.c: 698: }
 29493                           ;keyboard.c: 699: if((button_state_now & 0x00020000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW18) {
 29494                           
 29495                           ; BSR set to: 0
 29496  00191E  B3DA               	btfsc	(_button_state_now+2)& (0+255),1,b
 29497                           
 29498                           ; BSR set to: 0
 29499  001920  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29500  001922  D00A               	goto	l1540
 29501                           
 29502                           ; BSR set to: 0
 29503  001924  B3D2               	btfsc	(_keyboard+2)& (0+255),1,b
 29504  001926  D008               	goto	l1540
 29505                           
 29506                           ; BSR set to: 0
 29507                           ;keyboard.c: 700: pitch = F2;
 29508  001928  0E11               	movlw	17
 29509  00192A  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29510                           
 29511                           ; BSR set to: 0
 29512                           ;keyboard.c: 701: ON_OFF = 1;
 29513  00192C  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29514                           
 29515                           ; BSR set to: 0
 29516                           ;keyboard.c: 702: playThisNote(pitch);
 29517  00192E  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29518  001930  EC55  F033         	call	_playThisNote
 29519                           
 29520                           ;keyboard.c: 703: keyboard.SW18 = 1;
 29521  001934  0100               	movlb	0	; () banked
 29522  001936  83D2               	bsf	(_keyboard+2)& (0+255),1,b
 29523  001938                     l1540:
 29524                           
 29525                           ; BSR set to: 0
 29526                           ;keyboard.c: 704: }
 29527                           ;keyboard.c: 705: if((button_state_now & 0x00040000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW19) {
 29528                           
 29529                           ; BSR set to: 0
 29530  001938  B5DA               	btfsc	(_button_state_now+2)& (0+255),2,b
 29531                           
 29532                           ; BSR set to: 0
 29533  00193A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29534  00193C  D00A               	goto	l1541
 29535                           
 29536                           ; BSR set to: 0
 29537  00193E  B5D2               	btfsc	(_keyboard+2)& (0+255),2,b
 29538  001940  D008               	goto	l1541
 29539                           
 29540                           ; BSR set to: 0
 29541                           ;keyboard.c: 706: pitch = F2s;
 29542  001942  0E12               	movlw	18
 29543  001944  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29544                           
 29545                           ; BSR set to: 0
 29546                           ;keyboard.c: 707: ON_OFF = 1;
 29547  001946  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29548                           
 29549                           ; BSR set to: 0
 29550                           ;keyboard.c: 708: playThisNote(pitch);
 29551  001948  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29552  00194A  EC55  F033         	call	_playThisNote
 29553                           
 29554                           ;keyboard.c: 709: keyboard.SW19 = 1;
 29555  00194E  0100               	movlb	0	; () banked
 29556  001950  85D2               	bsf	(_keyboard+2)& (0+255),2,b
 29557  001952                     l1541:
 29558                           
 29559                           ; BSR set to: 0
 29560                           ;keyboard.c: 710: }
 29561                           ;keyboard.c: 711: if((button_state_now & 0x00080000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW20) {
 29562                           
 29563                           ; BSR set to: 0
 29564  001952  B7DA               	btfsc	(_button_state_now+2)& (0+255),3,b
 29565                           
 29566                           ; BSR set to: 0
 29567  001954  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29568  001956  D00A               	goto	l1542
 29569                           
 29570                           ; BSR set to: 0
 29571  001958  B7D2               	btfsc	(_keyboard+2)& (0+255),3,b
 29572  00195A  D008               	goto	l1542
 29573                           
 29574                           ; BSR set to: 0
 29575                           ;keyboard.c: 712: pitch = G2;
 29576  00195C  0E13               	movlw	19
 29577  00195E  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29578                           
 29579                           ; BSR set to: 0
 29580                           ;keyboard.c: 713: ON_OFF = 1;
 29581  001960  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29582                           
 29583                           ; BSR set to: 0
 29584                           ;keyboard.c: 714: playThisNote(pitch);
 29585  001962  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29586  001964  EC55  F033         	call	_playThisNote
 29587                           
 29588                           ;keyboard.c: 715: keyboard.SW20 = 1;
 29589  001968  0100               	movlb	0	; () banked
 29590  00196A  87D2               	bsf	(_keyboard+2)& (0+255),3,b
 29591  00196C                     l1542:
 29592                           
 29593                           ; BSR set to: 0
 29594                           ;keyboard.c: 716: }
 29595                           ;keyboard.c: 717: if((button_state_now & 0x00100000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW21) {
 29596                           
 29597                           ; BSR set to: 0
 29598  00196C  B9DA               	btfsc	(_button_state_now+2)& (0+255),4,b
 29599                           
 29600                           ; BSR set to: 0
 29601  00196E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29602  001970  D00A               	goto	l1543
 29603                           
 29604                           ; BSR set to: 0
 29605  001972  B9D2               	btfsc	(_keyboard+2)& (0+255),4,b
 29606  001974  D008               	goto	l1543
 29607                           
 29608                           ; BSR set to: 0
 29609                           ;keyboard.c: 718: pitch = G2s;
 29610  001976  0E14               	movlw	20
 29611  001978  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29612                           
 29613                           ; BSR set to: 0
 29614                           ;keyboard.c: 719: ON_OFF = 1;
 29615  00197A  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29616                           
 29617                           ; BSR set to: 0
 29618                           ;keyboard.c: 720: playThisNote(pitch);
 29619  00197C  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29620  00197E  EC55  F033         	call	_playThisNote
 29621                           
 29622                           ;keyboard.c: 721: keyboard.SW21 = 1;
 29623  001982  0100               	movlb	0	; () banked
 29624  001984  89D2               	bsf	(_keyboard+2)& (0+255),4,b
 29625  001986                     l1543:
 29626                           
 29627                           ; BSR set to: 0
 29628                           ;keyboard.c: 722: }
 29629                           ;keyboard.c: 723: if((button_state_now & 0x00200000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW22) {
 29630                           
 29631                           ; BSR set to: 0
 29632  001986  BBDA               	btfsc	(_button_state_now+2)& (0+255),5,b
 29633                           
 29634                           ; BSR set to: 0
 29635  001988  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29636  00198A  D00A               	goto	l1544
 29637                           
 29638                           ; BSR set to: 0
 29639  00198C  BBD2               	btfsc	(_keyboard+2)& (0+255),5,b
 29640  00198E  D008               	goto	l1544
 29641                           
 29642                           ; BSR set to: 0
 29643                           ;keyboard.c: 724: pitch = A2;
 29644  001990  0E15               	movlw	21
 29645  001992  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29646                           
 29647                           ; BSR set to: 0
 29648                           ;keyboard.c: 725: ON_OFF = 1;
 29649  001994  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29650                           
 29651                           ; BSR set to: 0
 29652                           ;keyboard.c: 726: playThisNote(pitch);
 29653  001996  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29654  001998  EC55  F033         	call	_playThisNote
 29655                           
 29656                           ;keyboard.c: 727: keyboard.SW22 = 1;
 29657  00199C  0100               	movlb	0	; () banked
 29658  00199E  8BD2               	bsf	(_keyboard+2)& (0+255),5,b
 29659  0019A0                     l1544:
 29660                           
 29661                           ; BSR set to: 0
 29662                           ;keyboard.c: 728: }
 29663                           ;keyboard.c: 729: if((button_state_now & 0x00400000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW23) {
 29664                           
 29665                           ; BSR set to: 0
 29666  0019A0  BDDA               	btfsc	(_button_state_now+2)& (0+255),6,b
 29667                           
 29668                           ; BSR set to: 0
 29669  0019A2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29670  0019A4  D00A               	goto	l1545
 29671                           
 29672                           ; BSR set to: 0
 29673  0019A6  BDD2               	btfsc	(_keyboard+2)& (0+255),6,b
 29674  0019A8  D008               	goto	l1545
 29675                           
 29676                           ; BSR set to: 0
 29677                           ;keyboard.c: 730: pitch = A2s;
 29678  0019AA  0E16               	movlw	22
 29679  0019AC  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29680                           
 29681                           ; BSR set to: 0
 29682                           ;keyboard.c: 731: ON_OFF = 1;
 29683  0019AE  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29684                           
 29685                           ; BSR set to: 0
 29686                           ;keyboard.c: 732: playThisNote(pitch);
 29687  0019B0  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29688  0019B2  EC55  F033         	call	_playThisNote
 29689                           
 29690                           ;keyboard.c: 733: keyboard.SW23 = 1;
 29691  0019B6  0100               	movlb	0	; () banked
 29692  0019B8  8DD2               	bsf	(_keyboard+2)& (0+255),6,b
 29693  0019BA                     l1545:
 29694                           
 29695                           ; BSR set to: 0
 29696                           ;keyboard.c: 734: }
 29697                           ;keyboard.c: 735: if((button_state_now & 0x00800000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW24) {
 29698                           
 29699                           ; BSR set to: 0
 29700  0019BA  BFDA               	btfsc	(_button_state_now+2)& (0+255),7,b
 29701                           
 29702                           ; BSR set to: 0
 29703  0019BC  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29704  0019BE  D00A               	goto	l1546
 29705                           
 29706                           ; BSR set to: 0
 29707  0019C0  BFD2               	btfsc	(_keyboard+2)& (0+255),7,b
 29708  0019C2  D008               	goto	l1546
 29709                           
 29710                           ; BSR set to: 0
 29711                           ;keyboard.c: 736: pitch = B2;
 29712  0019C4  0E17               	movlw	23
 29713  0019C6  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29714                           
 29715                           ; BSR set to: 0
 29716                           ;keyboard.c: 737: ON_OFF = 1;
 29717  0019C8  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29718                           
 29719                           ; BSR set to: 0
 29720                           ;keyboard.c: 738: playThisNote(pitch);
 29721  0019CA  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29722  0019CC  EC55  F033         	call	_playThisNote
 29723                           
 29724                           ;keyboard.c: 739: keyboard.SW24 = 1;
 29725  0019D0  0100               	movlb	0	; () banked
 29726  0019D2  8FD2               	bsf	(_keyboard+2)& (0+255),7,b
 29727  0019D4                     l1546:
 29728                           
 29729                           ; BSR set to: 0
 29730                           ;keyboard.c: 740: }
 29731                           ;keyboard.c: 741: if((button_state_now & 0x01000000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW25) {
 29732                           
 29733                           ; BSR set to: 0
 29734  0019D4  B1DB               	btfsc	(_button_state_now+3)& (0+255),0,b
 29735                           
 29736                           ; BSR set to: 0
 29737  0019D6  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29738  0019D8  D00A               	goto	l1547
 29739                           
 29740                           ; BSR set to: 0
 29741  0019DA  B1D3               	btfsc	(_keyboard+3)& (0+255),0,b
 29742  0019DC  D008               	goto	l1547
 29743                           
 29744                           ; BSR set to: 0
 29745                           ;keyboard.c: 742: pitch = C3;
 29746  0019DE  0E18               	movlw	24
 29747  0019E0  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29748                           
 29749                           ; BSR set to: 0
 29750                           ;keyboard.c: 743: ON_OFF = 1;
 29751  0019E2  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29752                           
 29753                           ; BSR set to: 0
 29754                           ;keyboard.c: 744: playThisNote(pitch);
 29755  0019E4  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29756  0019E6  EC55  F033         	call	_playThisNote
 29757                           
 29758                           ;keyboard.c: 745: keyboard.SW25 = 1;
 29759  0019EA  0100               	movlb	0	; () banked
 29760  0019EC  81D3               	bsf	(_keyboard+3)& (0+255),0,b
 29761  0019EE                     l1547:
 29762                           
 29763                           ; BSR set to: 0
 29764                           ;keyboard.c: 746: }
 29765                           ;keyboard.c: 749: if(((button_state_last & 0x00000001)) && ((button_state_now & 0x000000
      +                          01) == 0) && keyboard.SW1) {
 29766                           
 29767                           ; BSR set to: 0
 29768  0019EE  B1D4               	btfsc	_button_state_last& (0+255),0,b
 29769                           
 29770                           ; BSR set to: 0
 29771  0019F0  B1D8               	btfsc	_button_state_now& (0+255),0,b
 29772  0019F2  D00A               	goto	l1548
 29773                           
 29774                           ; BSR set to: 0
 29775  0019F4  A1D0               	btfss	_keyboard& (0+255),0,b
 29776  0019F6  D008               	goto	l1548
 29777                           
 29778                           ; BSR set to: 0
 29779                           ;keyboard.c: 750: pitch = C;
 29780  0019F8  0E00               	movlw	0
 29781  0019FA  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29782                           
 29783                           ; BSR set to: 0
 29784                           ;keyboard.c: 751: ON_OFF = 0;
 29785  0019FC  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29786                           
 29787                           ; BSR set to: 0
 29788                           ;keyboard.c: 752: playThisNote(pitch);
 29789  0019FE  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29790  001A00  EC55  F033         	call	_playThisNote
 29791                           
 29792                           ;keyboard.c: 753: keyboard.SW1 = 0;
 29793  001A04  0100               	movlb	0	; () banked
 29794  001A06  91D0               	bcf	_keyboard& (0+255),0,b
 29795  001A08                     l1548:
 29796                           
 29797                           ; BSR set to: 0
 29798                           ;keyboard.c: 754: }
 29799                           ;keyboard.c: 755: if(((button_state_last & 0x00000002)) && ((button_state_now & 0x000000
      +                          02) == 0) && keyboard.SW2) {
 29800                           
 29801                           ; BSR set to: 0
 29802  001A08  B3D4               	btfsc	_button_state_last& (0+255),1,b
 29803                           
 29804                           ; BSR set to: 0
 29805  001A0A  B3D8               	btfsc	_button_state_now& (0+255),1,b
 29806  001A0C  D00A               	goto	l1549
 29807                           
 29808                           ; BSR set to: 0
 29809  001A0E  A3D0               	btfss	_keyboard& (0+255),1,b
 29810  001A10  D008               	goto	l1549
 29811                           
 29812                           ; BSR set to: 0
 29813                           ;keyboard.c: 756: pitch = Cs;
 29814  001A12  0E01               	movlw	1
 29815  001A14  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29816                           
 29817                           ; BSR set to: 0
 29818                           ;keyboard.c: 757: ON_OFF = 0;
 29819  001A16  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29820                           
 29821                           ; BSR set to: 0
 29822                           ;keyboard.c: 758: playThisNote(pitch);
 29823  001A18  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29824  001A1A  EC55  F033         	call	_playThisNote
 29825                           
 29826                           ;keyboard.c: 759: keyboard.SW2 = 0;
 29827  001A1E  0100               	movlb	0	; () banked
 29828  001A20  93D0               	bcf	_keyboard& (0+255),1,b
 29829  001A22                     l1549:
 29830                           
 29831                           ; BSR set to: 0
 29832                           ;keyboard.c: 760: }
 29833                           ;keyboard.c: 761: if(((button_state_last & 0x00000004)) && ((button_state_now & 0x000000
      +                          04) == 0) && keyboard.SW3) {
 29834                           
 29835                           ; BSR set to: 0
 29836  001A22  B5D4               	btfsc	_button_state_last& (0+255),2,b
 29837                           
 29838                           ; BSR set to: 0
 29839  001A24  B5D8               	btfsc	_button_state_now& (0+255),2,b
 29840  001A26  D00A               	goto	l1550
 29841                           
 29842                           ; BSR set to: 0
 29843  001A28  A5D0               	btfss	_keyboard& (0+255),2,b
 29844  001A2A  D008               	goto	l1550
 29845                           
 29846                           ; BSR set to: 0
 29847                           ;keyboard.c: 762: pitch = D;
 29848  001A2C  0E02               	movlw	2
 29849  001A2E  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29850                           
 29851                           ; BSR set to: 0
 29852                           ;keyboard.c: 763: ON_OFF = 0;
 29853  001A30  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29854                           
 29855                           ; BSR set to: 0
 29856                           ;keyboard.c: 764: playThisNote(pitch);
 29857  001A32  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29858  001A34  EC55  F033         	call	_playThisNote
 29859                           
 29860                           ;keyboard.c: 765: keyboard.SW3 = 0;
 29861  001A38  0100               	movlb	0	; () banked
 29862  001A3A  95D0               	bcf	_keyboard& (0+255),2,b
 29863  001A3C                     l1550:
 29864                           
 29865                           ; BSR set to: 0
 29866                           ;keyboard.c: 766: }
 29867                           ;keyboard.c: 767: if(((button_state_last & 0x00000008)) && ((button_state_now & 0x000000
      +                          08) == 0) && keyboard.SW4) {
 29868                           
 29869                           ; BSR set to: 0
 29870  001A3C  B7D4               	btfsc	_button_state_last& (0+255),3,b
 29871                           
 29872                           ; BSR set to: 0
 29873  001A3E  B7D8               	btfsc	_button_state_now& (0+255),3,b
 29874  001A40  D00A               	goto	l1551
 29875                           
 29876                           ; BSR set to: 0
 29877  001A42  A7D0               	btfss	_keyboard& (0+255),3,b
 29878  001A44  D008               	goto	l1551
 29879                           
 29880                           ; BSR set to: 0
 29881                           ;keyboard.c: 768: pitch = Ds;
 29882  001A46  0E03               	movlw	3
 29883  001A48  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29884                           
 29885                           ; BSR set to: 0
 29886                           ;keyboard.c: 769: ON_OFF = 0;
 29887  001A4A  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29888                           
 29889                           ; BSR set to: 0
 29890                           ;keyboard.c: 770: playThisNote(pitch);
 29891  001A4C  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29892  001A4E  EC55  F033         	call	_playThisNote
 29893                           
 29894                           ;keyboard.c: 771: keyboard.SW4 = 0;
 29895  001A52  0100               	movlb	0	; () banked
 29896  001A54  97D0               	bcf	_keyboard& (0+255),3,b
 29897  001A56                     l1551:
 29898                           
 29899                           ; BSR set to: 0
 29900                           ;keyboard.c: 772: }
 29901                           ;keyboard.c: 773: if(((button_state_last & 0x00000010)) && ((button_state_now & 0x000000
      +                          10) == 0) && keyboard.SW5) {
 29902                           
 29903                           ; BSR set to: 0
 29904  001A56  B9D4               	btfsc	_button_state_last& (0+255),4,b
 29905                           
 29906                           ; BSR set to: 0
 29907  001A58  B9D8               	btfsc	_button_state_now& (0+255),4,b
 29908  001A5A  D00A               	goto	l1552
 29909                           
 29910                           ; BSR set to: 0
 29911  001A5C  A9D0               	btfss	_keyboard& (0+255),4,b
 29912  001A5E  D008               	goto	l1552
 29913                           
 29914                           ; BSR set to: 0
 29915                           ;keyboard.c: 774: pitch = E;
 29916  001A60  0E04               	movlw	4
 29917  001A62  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29918                           
 29919                           ; BSR set to: 0
 29920                           ;keyboard.c: 775: ON_OFF = 0;
 29921  001A64  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29922                           
 29923                           ; BSR set to: 0
 29924                           ;keyboard.c: 776: playThisNote(pitch);
 29925  001A66  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29926  001A68  EC55  F033         	call	_playThisNote
 29927                           
 29928                           ;keyboard.c: 777: keyboard.SW5 = 0;
 29929  001A6C  0100               	movlb	0	; () banked
 29930  001A6E  99D0               	bcf	_keyboard& (0+255),4,b
 29931  001A70                     l1552:
 29932                           
 29933                           ; BSR set to: 0
 29934                           ;keyboard.c: 778: }
 29935                           ;keyboard.c: 779: if(((button_state_last & 0x00000020)) && ((button_state_now & 0x000000
      +                          20) == 0) && keyboard.SW6) {
 29936                           
 29937                           ; BSR set to: 0
 29938  001A70  BBD4               	btfsc	_button_state_last& (0+255),5,b
 29939                           
 29940                           ; BSR set to: 0
 29941  001A72  BBD8               	btfsc	_button_state_now& (0+255),5,b
 29942  001A74  D00A               	goto	l1553
 29943                           
 29944                           ; BSR set to: 0
 29945  001A76  ABD0               	btfss	_keyboard& (0+255),5,b
 29946  001A78  D008               	goto	l1553
 29947                           
 29948                           ; BSR set to: 0
 29949                           ;keyboard.c: 780: pitch = F;
 29950  001A7A  0E05               	movlw	5
 29951  001A7C  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29952                           
 29953                           ; BSR set to: 0
 29954                           ;keyboard.c: 781: ON_OFF = 0;
 29955  001A7E  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29956                           
 29957                           ; BSR set to: 0
 29958                           ;keyboard.c: 782: playThisNote(pitch);
 29959  001A80  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29960  001A82  EC55  F033         	call	_playThisNote
 29961                           
 29962                           ;keyboard.c: 783: keyboard.SW6 = 0;
 29963  001A86  0100               	movlb	0	; () banked
 29964  001A88  9BD0               	bcf	_keyboard& (0+255),5,b
 29965  001A8A                     l1553:
 29966                           
 29967                           ; BSR set to: 0
 29968                           ;keyboard.c: 784: }
 29969                           ;keyboard.c: 785: if(((button_state_last & 0x00000040)) && ((button_state_now & 0x000000
      +                          40) == 0) && keyboard.SW7) {
 29970                           
 29971                           ; BSR set to: 0
 29972  001A8A  BDD4               	btfsc	_button_state_last& (0+255),6,b
 29973                           
 29974                           ; BSR set to: 0
 29975  001A8C  BDD8               	btfsc	_button_state_now& (0+255),6,b
 29976  001A8E  D00A               	goto	l1554
 29977                           
 29978                           ; BSR set to: 0
 29979  001A90  ADD0               	btfss	_keyboard& (0+255),6,b
 29980  001A92  D008               	goto	l1554
 29981                           
 29982                           ; BSR set to: 0
 29983                           ;keyboard.c: 786: pitch = Fs;
 29984  001A94  0E06               	movlw	6
 29985  001A96  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29986                           
 29987                           ; BSR set to: 0
 29988                           ;keyboard.c: 787: ON_OFF = 0;
 29989  001A98  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29990                           
 29991                           ; BSR set to: 0
 29992                           ;keyboard.c: 788: playThisNote(pitch);
 29993  001A9A  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29994  001A9C  EC55  F033         	call	_playThisNote
 29995                           
 29996                           ;keyboard.c: 789: keyboard.SW7 = 0;
 29997  001AA0  0100               	movlb	0	; () banked
 29998  001AA2  9DD0               	bcf	_keyboard& (0+255),6,b
 29999  001AA4                     l1554:
 30000                           
 30001                           ; BSR set to: 0
 30002                           ;keyboard.c: 790: }
 30003                           ;keyboard.c: 791: if(((button_state_last & 0x00000080)) && ((button_state_now & 0x000000
      +                          80) == 0) && keyboard.SW8) {
 30004                           
 30005                           ; BSR set to: 0
 30006  001AA4  BFD4               	btfsc	_button_state_last& (0+255),7,b
 30007                           
 30008                           ; BSR set to: 0
 30009  001AA6  BFD8               	btfsc	_button_state_now& (0+255),7,b
 30010  001AA8  D00A               	goto	l1555
 30011                           
 30012                           ; BSR set to: 0
 30013  001AAA  AFD0               	btfss	_keyboard& (0+255),7,b
 30014  001AAC  D008               	goto	l1555
 30015                           
 30016                           ; BSR set to: 0
 30017                           ;keyboard.c: 792: pitch = G;
 30018  001AAE  0E07               	movlw	7
 30019  001AB0  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30020                           
 30021                           ; BSR set to: 0
 30022                           ;keyboard.c: 793: ON_OFF = 0;
 30023  001AB2  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30024                           
 30025                           ; BSR set to: 0
 30026                           ;keyboard.c: 794: playThisNote(pitch);
 30027  001AB4  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30028  001AB6  EC55  F033         	call	_playThisNote
 30029                           
 30030                           ;keyboard.c: 795: keyboard.SW8 = 0;
 30031  001ABA  0100               	movlb	0	; () banked
 30032  001ABC  9FD0               	bcf	_keyboard& (0+255),7,b
 30033  001ABE                     l1555:
 30034                           
 30035                           ; BSR set to: 0
 30036                           ;keyboard.c: 796: }
 30037                           ;keyboard.c: 797: if(((button_state_last & 0x00000100)) && ((button_state_now & 0x000001
      +                          00) == 0) && keyboard.SW9) {
 30038                           
 30039                           ; BSR set to: 0
 30040  001ABE  B1D5               	btfsc	(_button_state_last+1)& (0+255),0,b
 30041                           
 30042                           ; BSR set to: 0
 30043  001AC0  B1D9               	btfsc	(_button_state_now+1)& (0+255),0,b
 30044  001AC2  D00A               	goto	l1556
 30045                           
 30046                           ; BSR set to: 0
 30047  001AC4  A1D1               	btfss	(_keyboard+1)& (0+255),0,b
 30048  001AC6  D008               	goto	l1556
 30049                           
 30050                           ; BSR set to: 0
 30051                           ;keyboard.c: 798: pitch = Gs;
 30052  001AC8  0E08               	movlw	8
 30053  001ACA  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30054                           
 30055                           ; BSR set to: 0
 30056                           ;keyboard.c: 799: ON_OFF = 0;
 30057  001ACC  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30058                           
 30059                           ; BSR set to: 0
 30060                           ;keyboard.c: 800: playThisNote(pitch);
 30061  001ACE  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30062  001AD0  EC55  F033         	call	_playThisNote
 30063                           
 30064                           ;keyboard.c: 801: keyboard.SW9 = 0;
 30065  001AD4  0100               	movlb	0	; () banked
 30066  001AD6  91D1               	bcf	(_keyboard+1)& (0+255),0,b
 30067  001AD8                     l1556:
 30068                           
 30069                           ; BSR set to: 0
 30070                           ;keyboard.c: 802: }
 30071                           ;keyboard.c: 803: if(((button_state_last & 0x00000200)) && ((button_state_now & 0x000002
      +                          00) == 0) && keyboard.SW10) {
 30072                           
 30073                           ; BSR set to: 0
 30074  001AD8  B3D5               	btfsc	(_button_state_last+1)& (0+255),1,b
 30075                           
 30076                           ; BSR set to: 0
 30077  001ADA  B3D9               	btfsc	(_button_state_now+1)& (0+255),1,b
 30078  001ADC  D00A               	goto	l1557
 30079                           
 30080                           ; BSR set to: 0
 30081  001ADE  A3D1               	btfss	(_keyboard+1)& (0+255),1,b
 30082  001AE0  D008               	goto	l1557
 30083                           
 30084                           ; BSR set to: 0
 30085                           ;keyboard.c: 804: pitch = A;
 30086  001AE2  0E09               	movlw	9
 30087  001AE4  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30088                           
 30089                           ; BSR set to: 0
 30090                           ;keyboard.c: 805: ON_OFF = 0;
 30091  001AE6  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30092                           
 30093                           ; BSR set to: 0
 30094                           ;keyboard.c: 806: playThisNote(pitch);
 30095  001AE8  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30096  001AEA  EC55  F033         	call	_playThisNote
 30097                           
 30098                           ;keyboard.c: 807: keyboard.SW10 = 0;
 30099  001AEE  0100               	movlb	0	; () banked
 30100  001AF0  93D1               	bcf	(_keyboard+1)& (0+255),1,b
 30101  001AF2                     l1557:
 30102                           
 30103                           ; BSR set to: 0
 30104                           ;keyboard.c: 808: }
 30105                           ;keyboard.c: 809: if(((button_state_last & 0x00000400)) && ((button_state_now & 0x000004
      +                          00) == 0) && keyboard.SW11) {
 30106                           
 30107                           ; BSR set to: 0
 30108  001AF2  B5D5               	btfsc	(_button_state_last+1)& (0+255),2,b
 30109                           
 30110                           ; BSR set to: 0
 30111  001AF4  B5D9               	btfsc	(_button_state_now+1)& (0+255),2,b
 30112  001AF6  D00A               	goto	l1558
 30113                           
 30114                           ; BSR set to: 0
 30115  001AF8  A5D1               	btfss	(_keyboard+1)& (0+255),2,b
 30116  001AFA  D008               	goto	l1558
 30117                           
 30118                           ; BSR set to: 0
 30119                           ;keyboard.c: 810: pitch = As;
 30120  001AFC  0E0A               	movlw	10
 30121  001AFE  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30122                           
 30123                           ; BSR set to: 0
 30124                           ;keyboard.c: 811: ON_OFF = 0;
 30125  001B00  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30126                           
 30127                           ; BSR set to: 0
 30128                           ;keyboard.c: 812: playThisNote(pitch);
 30129  001B02  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30130  001B04  EC55  F033         	call	_playThisNote
 30131                           
 30132                           ;keyboard.c: 813: keyboard.SW11 = 0;
 30133  001B08  0100               	movlb	0	; () banked
 30134  001B0A  95D1               	bcf	(_keyboard+1)& (0+255),2,b
 30135  001B0C                     l1558:
 30136                           
 30137                           ; BSR set to: 0
 30138                           ;keyboard.c: 814: }
 30139                           ;keyboard.c: 815: if(((button_state_last & 0x00000800)) && ((button_state_now & 0x000008
      +                          00) == 0) && keyboard.SW12) {
 30140                           
 30141                           ; BSR set to: 0
 30142  001B0C  B7D5               	btfsc	(_button_state_last+1)& (0+255),3,b
 30143                           
 30144                           ; BSR set to: 0
 30145  001B0E  B7D9               	btfsc	(_button_state_now+1)& (0+255),3,b
 30146  001B10  D00A               	goto	l1559
 30147                           
 30148                           ; BSR set to: 0
 30149  001B12  A7D1               	btfss	(_keyboard+1)& (0+255),3,b
 30150  001B14  D008               	goto	l1559
 30151                           
 30152                           ; BSR set to: 0
 30153                           ;keyboard.c: 816: pitch = B;
 30154  001B16  0E0B               	movlw	11
 30155  001B18  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30156                           
 30157                           ; BSR set to: 0
 30158                           ;keyboard.c: 817: ON_OFF = 0;
 30159  001B1A  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30160                           
 30161                           ; BSR set to: 0
 30162                           ;keyboard.c: 818: playThisNote(pitch);
 30163  001B1C  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30164  001B1E  EC55  F033         	call	_playThisNote
 30165                           
 30166                           ;keyboard.c: 819: keyboard.SW12 = 0;
 30167  001B22  0100               	movlb	0	; () banked
 30168  001B24  97D1               	bcf	(_keyboard+1)& (0+255),3,b
 30169  001B26                     l1559:
 30170                           
 30171                           ; BSR set to: 0
 30172                           ;keyboard.c: 820: }
 30173                           ;keyboard.c: 821: if(((button_state_last & 0x00001000)) && ((button_state_now & 0x000010
      +                          00) == 0) && keyboard.SW13) {
 30174                           
 30175                           ; BSR set to: 0
 30176  001B26  B9D5               	btfsc	(_button_state_last+1)& (0+255),4,b
 30177                           
 30178                           ; BSR set to: 0
 30179  001B28  B9D9               	btfsc	(_button_state_now+1)& (0+255),4,b
 30180  001B2A  D00A               	goto	l1560
 30181                           
 30182                           ; BSR set to: 0
 30183  001B2C  A9D1               	btfss	(_keyboard+1)& (0+255),4,b
 30184  001B2E  D008               	goto	l1560
 30185                           
 30186                           ; BSR set to: 0
 30187                           ;keyboard.c: 822: pitch = C2;
 30188  001B30  0E0C               	movlw	12
 30189  001B32  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30190                           
 30191                           ; BSR set to: 0
 30192                           ;keyboard.c: 823: ON_OFF = 0;
 30193  001B34  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30194                           
 30195                           ; BSR set to: 0
 30196                           ;keyboard.c: 824: playThisNote(pitch);
 30197  001B36  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30198  001B38  EC55  F033         	call	_playThisNote
 30199                           
 30200                           ;keyboard.c: 825: keyboard.SW13 = 0;
 30201  001B3C  0100               	movlb	0	; () banked
 30202  001B3E  99D1               	bcf	(_keyboard+1)& (0+255),4,b
 30203  001B40                     l1560:
 30204                           
 30205                           ; BSR set to: 0
 30206                           ;keyboard.c: 826: }
 30207                           ;keyboard.c: 827: if(((button_state_last & 0x00002000)) && ((button_state_now & 0x000020
      +                          00) == 0) && keyboard.SW14) {
 30208                           
 30209                           ; BSR set to: 0
 30210  001B40  BBD5               	btfsc	(_button_state_last+1)& (0+255),5,b
 30211                           
 30212                           ; BSR set to: 0
 30213  001B42  BBD9               	btfsc	(_button_state_now+1)& (0+255),5,b
 30214  001B44  D00A               	goto	l1561
 30215                           
 30216                           ; BSR set to: 0
 30217  001B46  ABD1               	btfss	(_keyboard+1)& (0+255),5,b
 30218  001B48  D008               	goto	l1561
 30219                           
 30220                           ; BSR set to: 0
 30221                           ;keyboard.c: 828: pitch = C2s;
 30222  001B4A  0E0D               	movlw	13
 30223  001B4C  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30224                           
 30225                           ; BSR set to: 0
 30226                           ;keyboard.c: 829: ON_OFF = 0;
 30227  001B4E  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30228                           
 30229                           ; BSR set to: 0
 30230                           ;keyboard.c: 830: playThisNote(pitch);
 30231  001B50  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30232  001B52  EC55  F033         	call	_playThisNote
 30233                           
 30234                           ;keyboard.c: 831: keyboard.SW14 = 0;
 30235  001B56  0100               	movlb	0	; () banked
 30236  001B58  9BD1               	bcf	(_keyboard+1)& (0+255),5,b
 30237  001B5A                     l1561:
 30238                           
 30239                           ; BSR set to: 0
 30240                           ;keyboard.c: 832: }
 30241                           ;keyboard.c: 833: if(((button_state_last & 0x00004000)) && ((button_state_now & 0x000040
      +                          00) == 0) && keyboard.SW15) {
 30242                           
 30243                           ; BSR set to: 0
 30244  001B5A  BDD5               	btfsc	(_button_state_last+1)& (0+255),6,b
 30245                           
 30246                           ; BSR set to: 0
 30247  001B5C  BDD9               	btfsc	(_button_state_now+1)& (0+255),6,b
 30248  001B5E  D00A               	goto	l1562
 30249                           
 30250                           ; BSR set to: 0
 30251  001B60  ADD1               	btfss	(_keyboard+1)& (0+255),6,b
 30252  001B62  D008               	goto	l1562
 30253                           
 30254                           ; BSR set to: 0
 30255                           ;keyboard.c: 834: pitch = D2;
 30256  001B64  0E0E               	movlw	14
 30257  001B66  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30258                           
 30259                           ; BSR set to: 0
 30260                           ;keyboard.c: 835: ON_OFF = 0;
 30261  001B68  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30262                           
 30263                           ; BSR set to: 0
 30264                           ;keyboard.c: 836: playThisNote(pitch);
 30265  001B6A  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30266  001B6C  EC55  F033         	call	_playThisNote
 30267                           
 30268                           ;keyboard.c: 837: keyboard.SW15 = 0;
 30269  001B70  0100               	movlb	0	; () banked
 30270  001B72  9DD1               	bcf	(_keyboard+1)& (0+255),6,b
 30271  001B74                     l1562:
 30272                           
 30273                           ; BSR set to: 0
 30274                           ;keyboard.c: 838: }
 30275                           ;keyboard.c: 839: if(((button_state_last & 0x00008000)) && ((button_state_now & 0x000080
      +                          00) == 0) && keyboard.SW16) {
 30276                           
 30277                           ; BSR set to: 0
 30278  001B74  BFD5               	btfsc	(_button_state_last+1)& (0+255),7,b
 30279                           
 30280                           ; BSR set to: 0
 30281  001B76  BFD9               	btfsc	(_button_state_now+1)& (0+255),7,b
 30282  001B78  D00A               	goto	l1563
 30283                           
 30284                           ; BSR set to: 0
 30285  001B7A  AFD1               	btfss	(_keyboard+1)& (0+255),7,b
 30286  001B7C  D008               	goto	l1563
 30287                           
 30288                           ; BSR set to: 0
 30289                           ;keyboard.c: 840: pitch = D2s;
 30290  001B7E  0E0F               	movlw	15
 30291  001B80  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30292                           
 30293                           ; BSR set to: 0
 30294                           ;keyboard.c: 841: ON_OFF = 0;
 30295  001B82  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30296                           
 30297                           ; BSR set to: 0
 30298                           ;keyboard.c: 842: playThisNote(pitch);
 30299  001B84  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30300  001B86  EC55  F033         	call	_playThisNote
 30301                           
 30302                           ;keyboard.c: 843: keyboard.SW16 = 0;
 30303  001B8A  0100               	movlb	0	; () banked
 30304  001B8C  9FD1               	bcf	(_keyboard+1)& (0+255),7,b
 30305  001B8E                     l1563:
 30306                           
 30307                           ; BSR set to: 0
 30308                           ;keyboard.c: 844: }
 30309                           ;keyboard.c: 845: if(((button_state_last & 0x00010000)) && ((button_state_now & 0x000100
      +                          00) == 0) && keyboard.SW17) {
 30310                           
 30311                           ; BSR set to: 0
 30312  001B8E  B1D6               	btfsc	(_button_state_last+2)& (0+255),0,b
 30313                           
 30314                           ; BSR set to: 0
 30315  001B90  B1DA               	btfsc	(_button_state_now+2)& (0+255),0,b
 30316  001B92  D00A               	goto	l1564
 30317                           
 30318                           ; BSR set to: 0
 30319  001B94  A1D2               	btfss	(_keyboard+2)& (0+255),0,b
 30320  001B96  D008               	goto	l1564
 30321                           
 30322                           ; BSR set to: 0
 30323                           ;keyboard.c: 846: pitch = E2;
 30324  001B98  0E10               	movlw	16
 30325  001B9A  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30326                           
 30327                           ; BSR set to: 0
 30328                           ;keyboard.c: 847: ON_OFF = 0;
 30329  001B9C  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30330                           
 30331                           ; BSR set to: 0
 30332                           ;keyboard.c: 848: playThisNote(pitch);
 30333  001B9E  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30334  001BA0  EC55  F033         	call	_playThisNote
 30335                           
 30336                           ;keyboard.c: 849: keyboard.SW17 = 0;
 30337  001BA4  0100               	movlb	0	; () banked
 30338  001BA6  91D2               	bcf	(_keyboard+2)& (0+255),0,b
 30339  001BA8                     l1564:
 30340                           
 30341                           ; BSR set to: 0
 30342                           ;keyboard.c: 850: }
 30343                           ;keyboard.c: 851: if(((button_state_last & 0x00020000)) && ((button_state_now & 0x000200
      +                          00) == 0) && keyboard.SW18) {
 30344                           
 30345                           ; BSR set to: 0
 30346  001BA8  B3D6               	btfsc	(_button_state_last+2)& (0+255),1,b
 30347                           
 30348                           ; BSR set to: 0
 30349  001BAA  B3DA               	btfsc	(_button_state_now+2)& (0+255),1,b
 30350  001BAC  D00A               	goto	l1565
 30351                           
 30352                           ; BSR set to: 0
 30353  001BAE  A3D2               	btfss	(_keyboard+2)& (0+255),1,b
 30354  001BB0  D008               	goto	l1565
 30355                           
 30356                           ; BSR set to: 0
 30357                           ;keyboard.c: 852: pitch = F2;
 30358  001BB2  0E11               	movlw	17
 30359  001BB4  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30360                           
 30361                           ; BSR set to: 0
 30362                           ;keyboard.c: 853: ON_OFF = 0;
 30363  001BB6  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30364                           
 30365                           ; BSR set to: 0
 30366                           ;keyboard.c: 854: playThisNote(pitch);
 30367  001BB8  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30368  001BBA  EC55  F033         	call	_playThisNote
 30369                           
 30370                           ;keyboard.c: 855: keyboard.SW18 = 0;
 30371  001BBE  0100               	movlb	0	; () banked
 30372  001BC0  93D2               	bcf	(_keyboard+2)& (0+255),1,b
 30373  001BC2                     l1565:
 30374                           
 30375                           ; BSR set to: 0
 30376                           ;keyboard.c: 856: }
 30377                           ;keyboard.c: 857: if(((button_state_last & 0x00040000)) && ((button_state_now & 0x000400
      +                          00) == 0) && keyboard.SW19) {
 30378                           
 30379                           ; BSR set to: 0
 30380  001BC2  B5D6               	btfsc	(_button_state_last+2)& (0+255),2,b
 30381                           
 30382                           ; BSR set to: 0
 30383  001BC4  B5DA               	btfsc	(_button_state_now+2)& (0+255),2,b
 30384  001BC6  D00A               	goto	l1566
 30385                           
 30386                           ; BSR set to: 0
 30387  001BC8  A5D2               	btfss	(_keyboard+2)& (0+255),2,b
 30388  001BCA  D008               	goto	l1566
 30389                           
 30390                           ; BSR set to: 0
 30391                           ;keyboard.c: 858: pitch = F2s;
 30392  001BCC  0E12               	movlw	18
 30393  001BCE  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30394                           
 30395                           ; BSR set to: 0
 30396                           ;keyboard.c: 859: ON_OFF = 0;
 30397  001BD0  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30398                           
 30399                           ; BSR set to: 0
 30400                           ;keyboard.c: 860: playThisNote(pitch);
 30401  001BD2  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30402  001BD4  EC55  F033         	call	_playThisNote
 30403                           
 30404                           ;keyboard.c: 861: keyboard.SW19 = 0;
 30405  001BD8  0100               	movlb	0	; () banked
 30406  001BDA  95D2               	bcf	(_keyboard+2)& (0+255),2,b
 30407  001BDC                     l1566:
 30408                           
 30409                           ; BSR set to: 0
 30410                           ;keyboard.c: 862: }
 30411                           ;keyboard.c: 863: if(((button_state_last & 0x00080000)) && ((button_state_now & 0x000800
      +                          00) == 0) && keyboard.SW20) {
 30412                           
 30413                           ; BSR set to: 0
 30414  001BDC  B7D6               	btfsc	(_button_state_last+2)& (0+255),3,b
 30415                           
 30416                           ; BSR set to: 0
 30417  001BDE  B7DA               	btfsc	(_button_state_now+2)& (0+255),3,b
 30418  001BE0  D00A               	goto	l1567
 30419                           
 30420                           ; BSR set to: 0
 30421  001BE2  A7D2               	btfss	(_keyboard+2)& (0+255),3,b
 30422  001BE4  D008               	goto	l1567
 30423                           
 30424                           ; BSR set to: 0
 30425                           ;keyboard.c: 864: pitch = G2;
 30426  001BE6  0E13               	movlw	19
 30427  001BE8  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30428                           
 30429                           ; BSR set to: 0
 30430                           ;keyboard.c: 865: ON_OFF = 0;
 30431  001BEA  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30432                           
 30433                           ; BSR set to: 0
 30434                           ;keyboard.c: 866: playThisNote(pitch);
 30435  001BEC  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30436  001BEE  EC55  F033         	call	_playThisNote
 30437                           
 30438                           ;keyboard.c: 867: keyboard.SW20 = 0;
 30439  001BF2  0100               	movlb	0	; () banked
 30440  001BF4  97D2               	bcf	(_keyboard+2)& (0+255),3,b
 30441  001BF6                     l1567:
 30442                           
 30443                           ; BSR set to: 0
 30444                           ;keyboard.c: 868: }
 30445                           ;keyboard.c: 869: if(((button_state_last & 0x00100000)) && ((button_state_now & 0x001000
      +                          00) == 0) && keyboard.SW21) {
 30446                           
 30447                           ; BSR set to: 0
 30448  001BF6  B9D6               	btfsc	(_button_state_last+2)& (0+255),4,b
 30449                           
 30450                           ; BSR set to: 0
 30451  001BF8  B9DA               	btfsc	(_button_state_now+2)& (0+255),4,b
 30452  001BFA  D00A               	goto	l1568
 30453                           
 30454                           ; BSR set to: 0
 30455  001BFC  A9D2               	btfss	(_keyboard+2)& (0+255),4,b
 30456  001BFE  D008               	goto	l1568
 30457                           
 30458                           ; BSR set to: 0
 30459                           ;keyboard.c: 870: pitch = G2s;
 30460  001C00  0E14               	movlw	20
 30461  001C02  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30462                           
 30463                           ; BSR set to: 0
 30464                           ;keyboard.c: 871: ON_OFF = 0;
 30465  001C04  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30466                           
 30467                           ; BSR set to: 0
 30468                           ;keyboard.c: 872: playThisNote(pitch);
 30469  001C06  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30470  001C08  EC55  F033         	call	_playThisNote
 30471                           
 30472                           ;keyboard.c: 873: keyboard.SW21 = 0;
 30473  001C0C  0100               	movlb	0	; () banked
 30474  001C0E  99D2               	bcf	(_keyboard+2)& (0+255),4,b
 30475  001C10                     l1568:
 30476                           
 30477                           ; BSR set to: 0
 30478                           ;keyboard.c: 874: }
 30479                           ;keyboard.c: 875: if(((button_state_last & 0x00200000)) && ((button_state_now & 0x002000
      +                          00) == 0) && keyboard.SW22) {
 30480                           
 30481                           ; BSR set to: 0
 30482  001C10  BBD6               	btfsc	(_button_state_last+2)& (0+255),5,b
 30483                           
 30484                           ; BSR set to: 0
 30485  001C12  BBDA               	btfsc	(_button_state_now+2)& (0+255),5,b
 30486  001C14  D00A               	goto	l1569
 30487                           
 30488                           ; BSR set to: 0
 30489  001C16  ABD2               	btfss	(_keyboard+2)& (0+255),5,b
 30490  001C18  D008               	goto	l1569
 30491                           
 30492                           ; BSR set to: 0
 30493                           ;keyboard.c: 876: pitch = A2;
 30494  001C1A  0E15               	movlw	21
 30495  001C1C  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30496                           
 30497                           ; BSR set to: 0
 30498                           ;keyboard.c: 877: ON_OFF = 0;
 30499  001C1E  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30500                           
 30501                           ; BSR set to: 0
 30502                           ;keyboard.c: 878: playThisNote(pitch);
 30503  001C20  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30504  001C22  EC55  F033         	call	_playThisNote
 30505                           
 30506                           ;keyboard.c: 879: keyboard.SW22 = 0;
 30507  001C26  0100               	movlb	0	; () banked
 30508  001C28  9BD2               	bcf	(_keyboard+2)& (0+255),5,b
 30509  001C2A                     l1569:
 30510                           
 30511                           ; BSR set to: 0
 30512                           ;keyboard.c: 880: }
 30513                           ;keyboard.c: 881: if(((button_state_last & 0x00400000)) && ((button_state_now & 0x004000
      +                          00) == 0) && keyboard.SW23) {
 30514                           
 30515                           ; BSR set to: 0
 30516  001C2A  BDD6               	btfsc	(_button_state_last+2)& (0+255),6,b
 30517                           
 30518                           ; BSR set to: 0
 30519  001C2C  BDDA               	btfsc	(_button_state_now+2)& (0+255),6,b
 30520  001C2E  D00A               	goto	l1570
 30521                           
 30522                           ; BSR set to: 0
 30523  001C30  ADD2               	btfss	(_keyboard+2)& (0+255),6,b
 30524  001C32  D008               	goto	l1570
 30525                           
 30526                           ; BSR set to: 0
 30527                           ;keyboard.c: 882: pitch = A2s;
 30528  001C34  0E16               	movlw	22
 30529  001C36  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30530                           
 30531                           ; BSR set to: 0
 30532                           ;keyboard.c: 883: ON_OFF = 0;
 30533  001C38  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30534                           
 30535                           ; BSR set to: 0
 30536                           ;keyboard.c: 884: playThisNote(pitch);
 30537  001C3A  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30538  001C3C  EC55  F033         	call	_playThisNote
 30539                           
 30540                           ;keyboard.c: 885: keyboard.SW23 = 0;
 30541  001C40  0100               	movlb	0	; () banked
 30542  001C42  9DD2               	bcf	(_keyboard+2)& (0+255),6,b
 30543  001C44                     l1570:
 30544                           
 30545                           ; BSR set to: 0
 30546                           ;keyboard.c: 886: }
 30547                           ;keyboard.c: 887: if(((button_state_last & 0x00800000)) && ((button_state_now & 0x008000
      +                          00) == 0) && keyboard.SW24) {
 30548                           
 30549                           ; BSR set to: 0
 30550  001C44  BFD6               	btfsc	(_button_state_last+2)& (0+255),7,b
 30551                           
 30552                           ; BSR set to: 0
 30553  001C46  BFDA               	btfsc	(_button_state_now+2)& (0+255),7,b
 30554  001C48  D00A               	goto	l1571
 30555                           
 30556                           ; BSR set to: 0
 30557  001C4A  AFD2               	btfss	(_keyboard+2)& (0+255),7,b
 30558  001C4C  D008               	goto	l1571
 30559                           
 30560                           ; BSR set to: 0
 30561                           ;keyboard.c: 888: pitch = B2;
 30562  001C4E  0E17               	movlw	23
 30563  001C50  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30564                           
 30565                           ; BSR set to: 0
 30566                           ;keyboard.c: 889: ON_OFF = 0;
 30567  001C52  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30568                           
 30569                           ; BSR set to: 0
 30570                           ;keyboard.c: 890: playThisNote(pitch);
 30571  001C54  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30572  001C56  EC55  F033         	call	_playThisNote
 30573                           
 30574                           ;keyboard.c: 891: keyboard.SW24 = 0;
 30575  001C5A  0100               	movlb	0	; () banked
 30576  001C5C  9FD2               	bcf	(_keyboard+2)& (0+255),7,b
 30577  001C5E                     l1571:
 30578                           
 30579                           ; BSR set to: 0
 30580                           ;keyboard.c: 892: }
 30581                           ;keyboard.c: 893: if(((button_state_last & 0x01000000)) && ((button_state_now & 0x010000
      +                          00) == 0) && keyboard.SW25) {
 30582                           
 30583                           ; BSR set to: 0
 30584  001C5E  A1D7               	btfss	(_button_state_last+3)& (0+255),0,b
 30585  001C60  0012               	return	
 30586                           
 30587                           ; BSR set to: 0
 30588  001C62  B1DB               	btfsc	(_button_state_now+3)& (0+255),0,b
 30589  001C64  0012               	return	
 30590                           
 30591                           ; BSR set to: 0
 30592  001C66  A1D3               	btfss	(_keyboard+3)& (0+255),0,b
 30593  001C68  0012               	return	
 30594                           
 30595                           ; BSR set to: 0
 30596                           ;keyboard.c: 894: pitch = C3;
 30597  001C6A  0E18               	movlw	24
 30598  001C6C  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30599                           
 30600                           ; BSR set to: 0
 30601                           ;keyboard.c: 895: ON_OFF = 0;
 30602  001C6E  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30603                           
 30604                           ; BSR set to: 0
 30605                           ;keyboard.c: 896: playThisNote(pitch);
 30606  001C70  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30607  001C72  EC55  F033         	call	_playThisNote
 30608                           
 30609                           ;keyboard.c: 897: keyboard.SW25 = 0;
 30610  001C76  0100               	movlb	0	; () banked
 30611  001C78  91D3               	bcf	(_keyboard+3)& (0+255),0,b
 30612  001C7A  0012               	return	
 30613  001C7C                     __end_of_keyboard_all_note_efficient:
 30614                           	opt stack 0
 30615                           tblptru	equ	0xFF8
 30616                           tblptrh	equ	0xFF7
 30617                           tblptrl	equ	0xFF6
 30618                           tablat	equ	0xFF5
 30619                           prodh	equ	0xFF4
 30620                           prodl	equ	0xFF3
 30621                           intcon	equ	0xFF2
 30622                           intcon2	equ	0xFF1
 30623                           postinc0	equ	0xFEE
 30624                           wreg	equ	0xFE8
 30625                           postinc1	equ	0xFE6
 30626                           plusw1	equ	0xFE3
 30627                           fsr1h	equ	0xFE2
 30628                           fsr1l	equ	0xFE1
 30629                           indf2	equ	0xFDF
 30630                           postinc2	equ	0xFDE
 30631                           postdec2	equ	0xFDD
 30632                           plusw2	equ	0xFDB
 30633                           fsr2h	equ	0xFDA
 30634                           fsr2l	equ	0xFD9
 30635                           status	equ	0xFD8
 30636                           
 30637 ;; *************** function _playThisNote *****************
 30638 ;; Defined at:
 30639 ;;		line 493 in file "keyboard.c"
 30640 ;; Parameters:    Size  Location     Type
 30641 ;;  pitch           1    wreg     unsigned char 
 30642 ;; Auto vars:     Size  Location     Type
 30643 ;;  pitch           1   21[BANK0 ] unsigned char 
 30644 ;; Return value:  Size  Location     Type
 30645 ;;                  1    wreg      void 
 30646 ;; Registers used:
 30647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30648 ;; Tracked objects:
 30649 ;;		On entry : 0/0
 30650 ;;		On exit  : 0/0
 30651 ;;		Unchanged: 0/0
 30652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 30653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30654 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30655 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30656 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30657 ;;Total ram usage:        5 bytes
 30658 ;; Hardware stack levels used:    1
 30659 ;; Hardware stack levels required when called:   11
 30660 ;; This function calls:
 30661 ;;		_add_notes_to_arpeggio
 30662 ;;		_delete_notes_from_arpeggio
 30663 ;;		_finish_arpeggio_setup
 30664 ;;		_key_press_release_note_off
 30665 ;;		_noteOff
 30666 ;;		_noteOn
 30667 ;;		_playSeventh
 30668 ;;		_playTriad
 30669 ;;		_wait_one_pulse
 30670 ;; This function is called by:
 30671 ;;		_keyboard_all_note_efficient
 30672 ;;		_doTheUnLatch
 30673 ;; This function uses a non-reentrant model
 30674 ;;
 30675                           
 30676                           	psect	text78
 30677  0066AA                     __ptext78:
 30678                           	opt stack 0
 30679  0066AA                     _playThisNote:
 30680                           	opt stack 13
 30681                           
 30682                           ; BSR set to: 0
 30683                           ;incstack = 0
 30684                           ;playThisNote@pitch stored from wreg
 30685  0066AA  0100               	movlb	0	; () banked
 30686  0066AC  6F75               	movwf	playThisNote@pitch& (0+255),b
 30687                           
 30688                           ;keyboard.c: 495: if(KEYBOARD_MODE == CHROMATIC) {
 30689  0066AE  0100               	movlb	0	; () banked
 30690  0066B0  51F2               	movf	_KEYBOARD_MODE& (0+255),w,b
 30691  0066B2  A4D8               	btfss	status,2,c
 30692  0066B4  D06B               	goto	l1513
 30693                           
 30694                           ; BSR set to: 0
 30695                           ;keyboard.c: 498: if(ARPEGGIO_ON == 0){
 30696  0066B6  B804               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 30697  0066B8  D015               	goto	l1506
 30698                           
 30699                           ; BSR set to: 0
 30700                           ;keyboard.c: 499: if(ON_OFF == 1) {noteOn(channel,pitch,velocity);}
 30701  0066BA  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30702  0066BC  D008               	goto	l1505
 30703                           
 30704                           ; BSR set to: 0
 30705  0066BE  5051               	movf	_velocity,w,c
 30706  0066C0  6EE6               	movwf	postinc1,c
 30707  0066C2  5175               	movf	playThisNote@pitch& (0+255),w,b
 30708  0066C4  6EE6               	movwf	postinc1,c
 30709  0066C6  503E               	movf	_channel,w,c
 30710  0066C8  6EE6               	movwf	postinc1,c
 30711  0066CA  ECF8  F044         	call	_noteOn	;wreg free
 30712  0066CE                     l1505:
 30713                           
 30714                           ;keyboard.c: 500: if(ON_OFF == 0) {noteOff(channel,pitch,velocity);}
 30715  0066CE  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30716  0066D0  D009               	goto	l1506
 30717  0066D2  5051               	movf	_velocity,w,c
 30718  0066D4  6EE6               	movwf	postinc1,c
 30719  0066D6  0100               	movlb	0	; () banked
 30720  0066D8  5175               	movf	playThisNote@pitch& (0+255),w,b
 30721  0066DA  6EE6               	movwf	postinc1,c
 30722  0066DC  503E               	movf	_channel,w,c
 30723  0066DE  6EE6               	movwf	postinc1,c
 30724  0066E0  ECAD  F049         	call	_noteOff	;wreg free
 30725  0066E4                     l1506:
 30726                           
 30727                           ;keyboard.c: 501: }
 30728                           ;keyboard.c: 504: if(ARPEGGIO_ON == 1){
 30729  0066E4  A804               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 30730  0066E6  D052               	goto	l1513
 30731                           
 30732                           ;keyboard.c: 506: if(ON_OFF == 1){
 30733  0066E8  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30734  0066EA  D01A               	goto	l1508
 30735                           
 30736                           ;keyboard.c: 509: TMR0ON = 0;
 30737  0066EC  9ED5               	bcf	4053,7,c	;volatile
 30738                           
 30739                           ;keyboard.c: 511: parallel = pitch;
 30740  0066EE  C075  F030         	movff	playThisNote@pitch,_parallel
 30741                           
 30742                           ;keyboard.c: 514: if(NUM_NOTES_PRESSED > 0){
 30743  0066F2  502F               	movf	_NUM_NOTES_PRESSED,w,c
 30744  0066F4  B4D8               	btfsc	status,2,c
 30745  0066F6  D00A               	goto	l1509
 30746                           
 30747                           ;keyboard.c: 515: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 30748  0066F8  0E00               	movlw	0
 30749  0066FA  B403               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 30750  0066FC  0E01               	movlw	1
 30751  0066FE  EC52  F04B         	call	_wait_one_pulse
 30752                           
 30753                           ;keyboard.c: 516: if(note_off_was_sent == 0) {key_press_release_note_off();}
 30754  006702  A202               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 30755  006704  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 30756                           
 30757                           ;keyboard.c: 517: TIMER_OVERFLOWS = 0;
 30758  006708  0E00               	movlw	0
 30759  00670A  6E2E               	movwf	_TIMER_OVERFLOWS,c
 30760  00670C                     l1509:
 30761                           
 30762                           ;keyboard.c: 518: }
 30763                           ;keyboard.c: 521: add_notes_to_arpeggio(pitch);
 30764  00670C  0100               	movlb	0	; () banked
 30765  00670E  5175               	movf	playThisNote@pitch& (0+255),w,b
 30766  006710  EC57  F034         	call	_add_notes_to_arpeggio
 30767                           
 30768                           ;keyboard.c: 524: if(LATCH == 0) {
 30769  006714  A204               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 30770                           
 30771                           ;keyboard.c: 525: latch_was_pressed = 0;
 30772  006716  9C03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30773                           
 30774                           ;keyboard.c: 526: }
 30775                           ;keyboard.c: 529: finish_arpeggio_setup();
 30776  006718  ECE7  F04B         	call	_finish_arpeggio_setup	;wreg free
 30777                           
 30778                           ;keyboard.c: 532: TMR0ON = 1;
 30779  00671C  8ED5               	bsf	4053,7,c	;volatile
 30780                           
 30781                           ;keyboard.c: 534: return;
 30782  00671E  0012               	return	
 30783  006720                     l1508:
 30784                           
 30785                           ;keyboard.c: 535: }
 30786                           ;keyboard.c: 538: if((ON_OFF == 0) && (LATCH == 0)){
 30787  006720  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30788  006722  B204               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 30789  006724  D033               	goto	l1513
 30790                           
 30791                           ;keyboard.c: 541: TMR0ON = 0;
 30792  006726  9ED5               	bcf	4053,7,c	;volatile
 30793                           
 30794                           ;keyboard.c: 544: if(NUM_NOTES_PRESSED > 0){
 30795  006728  502F               	movf	_NUM_NOTES_PRESSED,w,c
 30796  00672A  B4D8               	btfsc	status,2,c
 30797  00672C  D00A               	goto	l1514
 30798                           
 30799                           ;keyboard.c: 545: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 30800  00672E  0E00               	movlw	0
 30801  006730  B203               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 30802  006732  0E01               	movlw	1
 30803  006734  EC52  F04B         	call	_wait_one_pulse
 30804                           
 30805                           ;keyboard.c: 546: if(note_off_was_sent == 0) {key_press_release_note_off();}
 30806  006738  A202               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 30807  00673A  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 30808                           
 30809                           ;keyboard.c: 547: TIMER_OVERFLOWS = 0;
 30810  00673E  0E00               	movlw	0
 30811  006740  6E2E               	movwf	_TIMER_OVERFLOWS,c
 30812  006742                     l1514:
 30813                           
 30814                           ;keyboard.c: 548: }
 30815                           ;keyboard.c: 551: delete_notes_from_arpeggio(pitch);
 30816  006742  0100               	movlb	0	; () banked
 30817  006744  5175               	movf	playThisNote@pitch& (0+255),w,b
 30818  006746  ECBF  F04A         	call	_delete_notes_from_arpeggio
 30819                           
 30820                           ;keyboard.c: 554: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 30821  00674A  C030  F071         	movff	_parallel,??_playThisNote
 30822  00674E  0100               	movlb	0	; () banked
 30823  006750  6B72               	clrf	(??_playThisNote+1)& (0+255),b
 30824  006752  BF71               	btfsc	??_playThisNote& (0+255),7,b
 30825  006754  0772               	decf	(??_playThisNote+1)& (0+255),f,b
 30826  006756  5175               	movf	playThisNote@pitch& (0+255),w,b
 30827  006758  6F73               	movwf	(??_playThisNote+2)& (0+255),b
 30828  00675A  6B74               	clrf	(??_playThisNote+3)& (0+255),b
 30829  00675C  5171               	movf	??_playThisNote& (0+255),w,b
 30830  00675E  1973               	xorwf	(??_playThisNote+2)& (0+255),w,b
 30831  006760  E106               	bnz	l27102
 30832  006762  5172               	movf	(??_playThisNote+1)& (0+255),w,b
 30833  006764  1974               	xorwf	(??_playThisNote+3)& (0+255),w,b
 30834  006766  A4D8               	btfss	status,2,c
 30835  006768  D002               	goto	l1516
 30836                           
 30837                           ; BSR set to: 0
 30838  00676A  0E00               	movlw	0
 30839  00676C  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 30840  00676E                     l1516:
 30841  00676E                     l27102:
 30842                           
 30843                           ; BSR set to: 0
 30844                           ;keyboard.c: 559: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 30845  00676E  BE03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 30846                           
 30847                           ; BSR set to: 0
 30848  006770  AC03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30849  006772  D001               	goto	l1517
 30850                           
 30851                           ; BSR set to: 0
 30852                           ;keyboard.c: 560: LATCH = 1;
 30853  006774  8204               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 30854  006776                     l1517:
 30855                           
 30856                           ; BSR set to: 0
 30857                           ;keyboard.c: 561: }
 30858                           ;keyboard.c: 564: if((UN_LATCH_MODE == 0) && (latch_was_pressed == 1)){
 30859  006776  A004               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 30860                           
 30861                           ; BSR set to: 0
 30862  006778  AC03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30863  00677A  D004               	goto	l1518
 30864                           
 30865                           ; BSR set to: 0
 30866                           ;keyboard.c: 565: NUM_NOTES_PRESSED = 0;
 30867  00677C  0E00               	movlw	0
 30868  00677E  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 30869                           
 30870                           ;keyboard.c: 566: ARRAY_INDEX = 0;
 30871  006780  0E00               	movlw	0
 30872  006782  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 30873  006784                     l1518:
 30874                           
 30875                           ; BSR set to: 0
 30876                           ;keyboard.c: 567: }
 30877                           ;keyboard.c: 570: finish_arpeggio_setup();
 30878                           
 30879                           ; BSR set to: 0
 30880  006784  ECE7  F04B         	call	_finish_arpeggio_setup	;wreg free
 30881                           
 30882                           ;keyboard.c: 573: TMR0ON = 1;
 30883  006788  8ED5               	bsf	4053,7,c	;volatile
 30884                           
 30885                           ;keyboard.c: 575: return;
 30886  00678A  0012               	return	
 30887  00678C                     l1513:
 30888                           
 30889                           ;keyboard.c: 576: }
 30890                           ;keyboard.c: 577: }
 30891                           ;keyboard.c: 578: }
 30892                           ;keyboard.c: 580: if(KEYBOARD_MODE == TRIAD) {
 30893  00678C  0E06               	movlw	6
 30894  00678E  0100               	movlb	0	; () banked
 30895  006790  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 30896  006792  A4D8               	btfss	status,2,c
 30897  006794  D003               	goto	l1519
 30898                           
 30899                           ; BSR set to: 0
 30900                           ;keyboard.c: 581: playTriad(pitch);
 30901  006796  5175               	movf	playThisNote@pitch& (0+255),w,b
 30902  006798  EC2E  F02D         	call	_playTriad
 30903  00679C                     l1519:
 30904                           
 30905                           ;keyboard.c: 582: }
 30906                           ;keyboard.c: 584: if(KEYBOARD_MODE == SEVENTH) {
 30907  00679C  0E09               	movlw	9
 30908  00679E  0100               	movlb	0	; () banked
 30909  0067A0  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 30910  0067A2  A4D8               	btfss	status,2,c
 30911  0067A4  0012               	return	
 30912                           
 30913                           ; BSR set to: 0
 30914                           ;keyboard.c: 585: playSeventh(pitch);
 30915  0067A6  5175               	movf	playThisNote@pitch& (0+255),w,b
 30916  0067A8  EC9D  F02B         	call	_playSeventh
 30917  0067AC  0012               	return	
 30918  0067AE                     __end_of_playThisNote:
 30919                           	opt stack 0
 30920                           tblptru	equ	0xFF8
 30921                           tblptrh	equ	0xFF7
 30922                           tblptrl	equ	0xFF6
 30923                           tablat	equ	0xFF5
 30924                           prodh	equ	0xFF4
 30925                           prodl	equ	0xFF3
 30926                           intcon	equ	0xFF2
 30927                           intcon2	equ	0xFF1
 30928                           postinc0	equ	0xFEE
 30929                           wreg	equ	0xFE8
 30930                           postinc1	equ	0xFE6
 30931                           plusw1	equ	0xFE3
 30932                           fsr1h	equ	0xFE2
 30933                           fsr1l	equ	0xFE1
 30934                           indf2	equ	0xFDF
 30935                           postinc2	equ	0xFDE
 30936                           postdec2	equ	0xFDD
 30937                           plusw2	equ	0xFDB
 30938                           fsr2h	equ	0xFDA
 30939                           fsr2l	equ	0xFD9
 30940                           status	equ	0xFD8
 30941                           
 30942 ;; *************** function _playTriad *****************
 30943 ;; Defined at:
 30944 ;;		line 293 in file "keyboard.c"
 30945 ;; Parameters:    Size  Location     Type
 30946 ;;  pitch           1    wreg     unsigned char 
 30947 ;; Auto vars:     Size  Location     Type
 30948 ;;  pitch           1    9[BANK0 ] unsigned char 
 30949 ;;  i               1    8[BANK0 ] unsigned char 
 30950 ;;  i               1    7[BANK0 ] unsigned char 
 30951 ;;  triad_p         2    5[BANK0 ] PTR unsigned char 
 30952 ;;		 -> diminished_triad(3), augmented_triad(3), minor_triad(3), major_triad(3), 
 30953 ;; Return value:  Size  Location     Type
 30954 ;;                  1    wreg      void 
 30955 ;; Registers used:
 30956 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, prodl, prodh, cstack
 30957 ;; Tracked objects:
 30958 ;;		On entry : 0/0
 30959 ;;		On exit  : 0/0
 30960 ;;		Unchanged: 0/0
 30961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 30962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30963 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30964 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30965 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30966 ;;Total ram usage:        9 bytes
 30967 ;; Hardware stack levels used:    1
 30968 ;; Hardware stack levels required when called:   10
 30969 ;; This function calls:
 30970 ;;		_finish_arpeggio_setup
 30971 ;;		_key_press_release_note_off
 30972 ;;		_noteOff
 30973 ;;		_noteOn
 30974 ;;		_wait_one_pulse
 30975 ;; This function is called by:
 30976 ;;		_playThisNote
 30977 ;; This function uses a non-reentrant model
 30978 ;;
 30979                           
 30980                           	psect	text79
 30981  005A5C                     __ptext79:
 30982                           	opt stack 0
 30983  005A5C                     _playTriad:
 30984                           	opt stack 13
 30985                           
 30986                           ;incstack = 0
 30987                           ;playTriad@pitch stored from wreg
 30988  005A5C  0100               	movlb	0	; () banked
 30989  005A5E  6F69               	movwf	playTriad@pitch& (0+255),b
 30990                           
 30991                           ;keyboard.c: 295: unsigned char *triad_p;
 30992                           ;keyboard.c: 299: switch (which_triad) {
 30993  005A60  D012               	goto	l1442
 30994  005A62                     
 30995                           ;keyboard.c: 301: triad_p = major_triad;
 30996  005A62  0EFD               	movlw	low _major_triad
 30997  005A64  0100               	movlb	0	; () banked
 30998  005A66  6F65               	movwf	playTriad@triad_p& (0+255),b
 30999  005A68  0E01               	movlw	high _major_triad
 31000  005A6A  D00B               	goto	L14
 31001  005A6C                     
 31002                           ; BSR set to: 0
 31003                           ;keyboard.c: 304: triad_p = minor_triad;
 31004                           
 31005                           ; BSR set to: 0
 31006  005A6C  0EE2               	movlw	low _minor_triad
 31007  005A6E  6F65               	movwf	playTriad@triad_p& (0+255),b
 31008  005A70  0E02               	movlw	high _minor_triad
 31009  005A72  D007               	goto	L14
 31010  005A74                     
 31011                           ; BSR set to: 0
 31012                           ;keyboard.c: 307: triad_p = augmented_triad;
 31013                           
 31014                           ; BSR set to: 0
 31015  005A74  0EDF               	movlw	low _augmented_triad
 31016  005A76  6F65               	movwf	playTriad@triad_p& (0+255),b
 31017  005A78  0E02               	movlw	high _augmented_triad
 31018  005A7A  D003               	goto	L14
 31019  005A7C                     
 31020                           ; BSR set to: 0
 31021                           ;keyboard.c: 310: triad_p = diminished_triad;
 31022                           
 31023                           ; BSR set to: 0
 31024  005A7C  0EDC               	movlw	low _diminished_triad
 31025  005A7E  6F65               	movwf	playTriad@triad_p& (0+255),b
 31026  005A80  0E02               	movlw	high _diminished_triad
 31027  005A82                     L14:
 31028  005A82  6F66               	movwf	(playTriad@triad_p+1)& (0+255),b
 31029                           
 31030                           ; BSR set to: 0
 31031                           ;keyboard.c: 314: }
 31032                           
 31033                           ; BSR set to: 0
 31034                           ;keyboard.c: 313: break;
 31035                           
 31036                           ;keyboard.c: 312: default:
 31037                           
 31038                           ;keyboard.c: 311: break;
 31039  005A84  D00E               	goto	l1444
 31040  005A86                     l1442:
 31041                           
 31042                           ; BSR set to: 0
 31043  005A86  0100               	movlb	0	; () banked
 31044  005A88  51F0               	movf	_which_triad& (0+255),w,b
 31045                           
 31046                           ; Switch size 1, requested type "space"
 31047                           ; Number of cases is 4, Range of values is 0 to 3
 31048                           ; switch strategies available:
 31049                           ; Name         Instructions Cycles
 31050                           ; simple_byte           13     7 (average)
 31051                           ;	Chosen strategy is simple_byte
 31052  005A8A  0A00               	xorlw	0	; case 0
 31053  005A8C  B4D8               	btfsc	status,2,c
 31054  005A8E  D7E9               	goto	l1443
 31055  005A90  0A01               	xorlw	1	; case 1
 31056  005A92  B4D8               	btfsc	status,2,c
 31057  005A94  D7EB               	goto	l1445
 31058  005A96  0A03               	xorlw	3	; case 2
 31059  005A98  B4D8               	btfsc	status,2,c
 31060  005A9A  D7EC               	goto	l1446
 31061  005A9C  0A01               	xorlw	1	; case 3
 31062  005A9E  B4D8               	btfsc	status,2,c
 31063  005AA0  D7ED               	goto	l1447
 31064  005AA2                     l1444:
 31065                           
 31066                           ; BSR set to: 0
 31067                           ;keyboard.c: 326: if(ARPEGGIO_ON == 0){
 31068  005AA2  B804               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 31069  005AA4  D030               	goto	u45400
 31070                           
 31071                           ; BSR set to: 0
 31072                           ;keyboard.c: 327: for(unsigned char i = 0; i<3; i++){
 31073  005AA6  0E00               	movlw	0
 31074  005AA8  6F67               	movwf	playTriad@i& (0+255),b
 31075  005AAA                     l26340:
 31076                           
 31077                           ; BSR set to: 0
 31078  005AAA  0E02               	movlw	2
 31079  005AAC  6567               	cpfsgt	playTriad@i& (0+255),b
 31080  005AAE  D001               	goto	l1450
 31081  005AB0  D02A               	goto	u45400
 31082  005AB2                     l1450:
 31083                           
 31084                           ; BSR set to: 0
 31085                           ;keyboard.c: 328: if(ON_OFF == 1) {noteOn(channel,triad_p[i] + pitch,velocity);}
 31086  005AB2  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31087  005AB4  D011               	goto	l1452
 31088                           
 31089                           ; BSR set to: 0
 31090  005AB6  5051               	movf	_velocity,w,c
 31091  005AB8  6EE6               	movwf	postinc1,c
 31092  005ABA  5167               	movf	playTriad@i& (0+255),w,b
 31093  005ABC  0D01               	mullw	1
 31094  005ABE  50F3               	movf	prodl,w,c
 31095  005AC0  2565               	addwf	playTriad@triad_p& (0+255),w,b
 31096  005AC2  6ED9               	movwf	fsr2l,c
 31097  005AC4  50F4               	movf	prodh,w,c
 31098  005AC6  2166               	addwfc	(playTriad@triad_p+1)& (0+255),w,b
 31099  005AC8  6EDA               	movwf	fsr2h,c
 31100  005ACA  50DF               	movf	indf2,w,c
 31101  005ACC  2569               	addwf	playTriad@pitch& (0+255),w,b
 31102  005ACE  6EE6               	movwf	postinc1,c
 31103  005AD0  503E               	movf	_channel,w,c
 31104  005AD2  6EE6               	movwf	postinc1,c
 31105  005AD4  ECF8  F044         	call	_noteOn	;wreg free
 31106  005AD8                     l1452:
 31107                           
 31108                           ;keyboard.c: 329: if(ON_OFF == 0) {noteOff(channel,triad_p[i] + pitch,velocity);}
 31109  005AD8  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31110  005ADA  D012               	goto	l1453
 31111  005ADC  5051               	movf	_velocity,w,c
 31112  005ADE  6EE6               	movwf	postinc1,c
 31113  005AE0  0100               	movlb	0	; () banked
 31114  005AE2  5167               	movf	playTriad@i& (0+255),w,b
 31115  005AE4  0D01               	mullw	1
 31116  005AE6  50F3               	movf	prodl,w,c
 31117  005AE8  2565               	addwf	playTriad@triad_p& (0+255),w,b
 31118  005AEA  6ED9               	movwf	fsr2l,c
 31119  005AEC  50F4               	movf	prodh,w,c
 31120  005AEE  2166               	addwfc	(playTriad@triad_p+1)& (0+255),w,b
 31121  005AF0  6EDA               	movwf	fsr2h,c
 31122  005AF2  50DF               	movf	indf2,w,c
 31123  005AF4  2569               	addwf	playTriad@pitch& (0+255),w,b
 31124  005AF6  6EE6               	movwf	postinc1,c
 31125  005AF8  503E               	movf	_channel,w,c
 31126  005AFA  6EE6               	movwf	postinc1,c
 31127  005AFC  ECAD  F049         	call	_noteOff	;wreg free
 31128  005B00                     l1453:
 31129  005B00  0100               	movlb	0	; () banked
 31130  005B02  2B67               	incf	playTriad@i& (0+255),f,b
 31131  005B04  D7D2               	goto	l26340
 31132  005B06                     u45400:
 31133                           
 31134                           ; BSR set to: 0
 31135                           ;keyboard.c: 330: }
 31136                           ;keyboard.c: 331: }
 31137                           ;keyboard.c: 334: if(ARPEGGIO_ON == 1){
 31138                           
 31139                           ; BSR set to: 0
 31140  005B06  A804               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 31141  005B08  0012               	return	
 31142                           
 31143                           ; BSR set to: 0
 31144                           ;keyboard.c: 335: if(ON_OFF == 1) {
 31145  005B0A  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31146  005B0C  D034               	goto	l1455
 31147                           
 31148                           ; BSR set to: 0
 31149                           ;keyboard.c: 337: TMR0ON = 0;
 31150  005B0E  9ED5               	bcf	4053,7,c	;volatile
 31151                           
 31152                           ;keyboard.c: 340: parallel = pitch;
 31153  005B10  C069  F030         	movff	playTriad@pitch,_parallel
 31154                           
 31155                           ; BSR set to: 0
 31156                           ;keyboard.c: 343: if(NUM_NOTES_PRESSED > 0){
 31157  005B14  502F               	movf	_NUM_NOTES_PRESSED,w,c
 31158  005B16  B4D8               	btfsc	status,2,c
 31159  005B18  D00A               	goto	l1456
 31160                           
 31161                           ; BSR set to: 0
 31162                           ;keyboard.c: 344: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 31163  005B1A  0E00               	movlw	0
 31164  005B1C  B403               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 31165  005B1E  0E01               	movlw	1
 31166  005B20  EC52  F04B         	call	_wait_one_pulse
 31167                           
 31168                           ;keyboard.c: 345: if(note_off_was_sent == 0) {key_press_release_note_off();}
 31169  005B24  A202               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 31170  005B26  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 31171                           
 31172                           ;keyboard.c: 346: TIMER_OVERFLOWS = 0;
 31173  005B2A  0E00               	movlw	0
 31174  005B2C  6E2E               	movwf	_TIMER_OVERFLOWS,c
 31175  005B2E                     l1456:
 31176                           
 31177                           ;keyboard.c: 347: }
 31178                           ;keyboard.c: 349: for(unsigned char i = 0; i<3; i++){
 31179  005B2E  0E00               	movlw	0
 31180  005B30  0100               	movlb	0	; () banked
 31181  005B32  6F68               	movwf	playTriad@i_1688& (0+255),b
 31182  005B34                     l26370:
 31183                           
 31184                           ; BSR set to: 0
 31185  005B34  0E02               	movlw	2
 31186  005B36  6568               	cpfsgt	playTriad@i_1688& (0+255),b
 31187  005B38  D001               	goto	l1458
 31188  005B3A  D015               	goto	u45460
 31189  005B3C                     l1458:
 31190                           
 31191                           ; BSR set to: 0
 31192                           ;keyboard.c: 350: ARPEGGIO[i] = triad_p[i] + pitch;
 31193                           
 31194                           ; BSR set to: 0
 31195  005B3C  5168               	movf	playTriad@i_1688& (0+255),w,b
 31196  005B3E  0D01               	mullw	1
 31197  005B40  0E82               	movlw	low _ARPEGGIO
 31198  005B42  24F3               	addwf	prodl,w,c
 31199  005B44  6ED9               	movwf	fsr2l,c
 31200  005B46  0E01               	movlw	high _ARPEGGIO
 31201  005B48  20F4               	addwfc	prodh,w,c
 31202  005B4A  6EDA               	movwf	fsr2h,c
 31203  005B4C  5168               	movf	playTriad@i_1688& (0+255),w,b
 31204  005B4E  0D01               	mullw	1
 31205  005B50  50F3               	movf	prodl,w,c
 31206  005B52  2565               	addwf	playTriad@triad_p& (0+255),w,b
 31207  005B54  6EE9               	movwf	fsr0l,c
 31208  005B56  50F4               	movf	prodh,w,c
 31209  005B58  2166               	addwfc	(playTriad@triad_p+1)& (0+255),w,b
 31210  005B5A  6EEA               	movwf	fsr0h,c
 31211  005B5C  50EF               	movf	indf0,w,c
 31212  005B5E  2569               	addwf	playTriad@pitch& (0+255),w,b
 31213  005B60  6EDF               	movwf	indf2,c
 31214                           
 31215                           ; BSR set to: 0
 31216  005B62  2B68               	incf	playTriad@i_1688& (0+255),f,b
 31217  005B64  D7E7               	goto	l26370
 31218  005B66                     u45460:
 31219                           
 31220                           ; BSR set to: 0
 31221                           ;keyboard.c: 351: }
 31222                           ;keyboard.c: 353: NUM_NOTES_PRESSED = 3;
 31223                           
 31224                           ; BSR set to: 0
 31225  005B66  0E03               	movlw	3
 31226  005B68  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 31227                           
 31228                           ; BSR set to: 0
 31229                           ;keyboard.c: 357: if(LATCH == 0) {latch_was_pressed = 0;}
 31230  005B6A  A204               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 31231                           
 31232                           ; BSR set to: 0
 31233  005B6C  9C03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31234                           
 31235                           ; BSR set to: 0
 31236                           ;keyboard.c: 359: finish_arpeggio_setup();
 31237                           
 31238                           ; BSR set to: 0
 31239  005B6E  ECE7  F04B         	call	_finish_arpeggio_setup	;wreg free
 31240                           
 31241                           ;keyboard.c: 360: TMR0ON = 1;
 31242  005B72  8ED5               	bsf	4053,7,c	;volatile
 31243                           
 31244                           ;keyboard.c: 362: return;
 31245  005B74  0012               	return	
 31246  005B76                     l1455:
 31247                           
 31248                           ; BSR set to: 0
 31249                           ;keyboard.c: 363: }
 31250                           ;keyboard.c: 365: if((ON_OFF == 0) && (LATCH == 0)) {
 31251  005B76  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31252  005B78  0012               	return	
 31253                           
 31254                           ; BSR set to: 0
 31255  005B7A  B204               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 31256  005B7C  0012               	return	
 31257                           
 31258                           ; BSR set to: 0
 31259                           ;keyboard.c: 367: if(NUM_NOTES_PRESSED > 0){
 31260  005B7E  502F               	movf	_NUM_NOTES_PRESSED,w,c
 31261  005B80  B4D8               	btfsc	status,2,c
 31262  005B82  D00A               	goto	l1463
 31263                           
 31264                           ; BSR set to: 0
 31265                           ;keyboard.c: 368: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 31266  005B84  0E00               	movlw	0
 31267  005B86  B203               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 31268  005B88  0E01               	movlw	1
 31269  005B8A  EC52  F04B         	call	_wait_one_pulse
 31270                           
 31271                           ;keyboard.c: 369: if(note_off_was_sent == 0) {key_press_release_note_off();}
 31272  005B8E  A202               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 31273  005B90  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 31274                           
 31275                           ;keyboard.c: 370: TIMER_OVERFLOWS = 0;
 31276  005B94  0E00               	movlw	0
 31277  005B96  6E2E               	movwf	_TIMER_OVERFLOWS,c
 31278  005B98                     l1463:
 31279                           
 31280                           ;keyboard.c: 371: }
 31281                           ;keyboard.c: 374: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 31282  005B98  C030  F061         	movff	_parallel,??_playTriad
 31283  005B9C  0100               	movlb	0	; () banked
 31284  005B9E  6B62               	clrf	(??_playTriad+1)& (0+255),b
 31285  005BA0  BF61               	btfsc	??_playTriad& (0+255),7,b
 31286  005BA2  0762               	decf	(??_playTriad+1)& (0+255),f,b
 31287  005BA4  5169               	movf	playTriad@pitch& (0+255),w,b
 31288  005BA6  6F63               	movwf	(??_playTriad+2)& (0+255),b
 31289  005BA8  6B64               	clrf	(??_playTriad+3)& (0+255),b
 31290  005BAA  5161               	movf	??_playTriad& (0+255),w,b
 31291  005BAC  1963               	xorwf	(??_playTriad+2)& (0+255),w,b
 31292  005BAE  E106               	bnz	l26408
 31293  005BB0  5162               	movf	(??_playTriad+1)& (0+255),w,b
 31294  005BB2  1964               	xorwf	(??_playTriad+3)& (0+255),w,b
 31295  005BB4  A4D8               	btfss	status,2,c
 31296  005BB6  D002               	goto	l1465
 31297                           
 31298                           ; BSR set to: 0
 31299  005BB8  0E00               	movlw	0
 31300  005BBA  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 31301  005BBC                     l1465:
 31302  005BBC                     l26408:
 31303                           
 31304                           ; BSR set to: 0
 31305                           ;keyboard.c: 379: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 31306  005BBC  BE03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 31307                           
 31308                           ; BSR set to: 0
 31309  005BBE  AC03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31310  005BC0  D001               	goto	l1466
 31311                           
 31312                           ; BSR set to: 0
 31313                           ;keyboard.c: 380: LATCH = 1;
 31314  005BC2  8204               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 31315  005BC4                     l1466:
 31316                           
 31317                           ; BSR set to: 0
 31318                           ;keyboard.c: 381: }
 31319                           ;keyboard.c: 384: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_pressed
      +                           == 1)){
 31320  005BC4  A004               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 31321  005BC6  D002               	goto	u45560
 31322                           
 31323                           ; BSR set to: 0
 31324  005BC8  A004               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 31325  005BCA  D006               	goto	l1467
 31326  005BCC                     u45560:
 31327                           
 31328                           ; BSR set to: 0
 31329  005BCC  AC03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31330  005BCE  D004               	goto	l1467
 31331                           
 31332                           ; BSR set to: 0
 31333                           ;keyboard.c: 385: NUM_NOTES_PRESSED = 0;
 31334  005BD0  0E00               	movlw	0
 31335  005BD2  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 31336                           
 31337                           ;keyboard.c: 386: ARRAY_INDEX = 0;
 31338  005BD4  0E00               	movlw	0
 31339  005BD6  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 31340  005BD8                     l1467:
 31341                           
 31342                           ; BSR set to: 0
 31343                           ;keyboard.c: 387: }
 31344                           ;keyboard.c: 389: finish_arpeggio_setup();
 31345                           
 31346                           ; BSR set to: 0
 31347  005BD8  ECE7  F04B         	call	_finish_arpeggio_setup	;wreg free
 31348                           
 31349                           ;keyboard.c: 390: TMR0ON = 1;
 31350  005BDC  8ED5               	bsf	4053,7,c	;volatile
 31351                           
 31352                           ;keyboard.c: 391: return;
 31353  005BDE  0012               	return	
 31354  005BE0                     __end_of_playTriad:
 31355                           	opt stack 0
 31356                           tblptru	equ	0xFF8
 31357                           tblptrh	equ	0xFF7
 31358                           tblptrl	equ	0xFF6
 31359                           tablat	equ	0xFF5
 31360                           prodh	equ	0xFF4
 31361                           prodl	equ	0xFF3
 31362                           intcon	equ	0xFF2
 31363                           intcon2	equ	0xFF1
 31364                           indf0	equ	0xFEF
 31365                           postinc0	equ	0xFEE
 31366                           fsr0h	equ	0xFEA
 31367                           fsr0l	equ	0xFE9
 31368                           wreg	equ	0xFE8
 31369                           postinc1	equ	0xFE6
 31370                           plusw1	equ	0xFE3
 31371                           fsr1h	equ	0xFE2
 31372                           fsr1l	equ	0xFE1
 31373                           indf2	equ	0xFDF
 31374                           postinc2	equ	0xFDE
 31375                           postdec2	equ	0xFDD
 31376                           plusw2	equ	0xFDB
 31377                           fsr2h	equ	0xFDA
 31378                           fsr2l	equ	0xFD9
 31379                           status	equ	0xFD8
 31380                           
 31381 ;; *************** function _playSeventh *****************
 31382 ;; Defined at:
 31383 ;;		line 396 in file "keyboard.c"
 31384 ;; Parameters:    Size  Location     Type
 31385 ;;  pitch           1    wreg     unsigned char 
 31386 ;; Auto vars:     Size  Location     Type
 31387 ;;  pitch           1    9[BANK0 ] unsigned char 
 31388 ;;  i               1    8[BANK0 ] unsigned char 
 31389 ;;  i               1    7[BANK0 ] unsigned char 
 31390 ;;  seventh_p       2    5[BANK0 ] PTR unsigned char 
 31391 ;;		 -> diminished_7th(4), half_diminished_7th(4), minor_7th(4), major_7th(4), 
 31392 ;;		 -> dominant_7th(4), 
 31393 ;; Return value:  Size  Location     Type
 31394 ;;                  1    wreg      void 
 31395 ;; Registers used:
 31396 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, prodl, prodh, cstack
 31397 ;; Tracked objects:
 31398 ;;		On entry : 0/0
 31399 ;;		On exit  : 0/0
 31400 ;;		Unchanged: 0/0
 31401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 31402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31403 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31404 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31405 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31406 ;;Total ram usage:        9 bytes
 31407 ;; Hardware stack levels used:    1
 31408 ;; Hardware stack levels required when called:   10
 31409 ;; This function calls:
 31410 ;;		_finish_arpeggio_setup
 31411 ;;		_key_press_release_note_off
 31412 ;;		_noteOff
 31413 ;;		_noteOn
 31414 ;;		_wait_one_pulse
 31415 ;; This function is called by:
 31416 ;;		_playThisNote
 31417 ;; This function uses a non-reentrant model
 31418 ;;
 31419                           
 31420                           	psect	text80
 31421  00573A                     __ptext80:
 31422                           	opt stack 0
 31423  00573A                     _playSeventh:
 31424                           	opt stack 13
 31425                           
 31426                           ;incstack = 0
 31427                           ;playSeventh@pitch stored from wreg
 31428  00573A  0100               	movlb	0	; () banked
 31429  00573C  6F69               	movwf	playSeventh@pitch& (0+255),b
 31430                           
 31431                           ;keyboard.c: 398: unsigned char *seventh_p;
 31432                           ;keyboard.c: 401: switch (which_seventh) {
 31433  00573E  D016               	goto	l1472
 31434  005740                     
 31435                           ;keyboard.c: 403: seventh_p = dominant_7th;
 31436  005740  0ED8               	movlw	low _dominant_7th
 31437  005742  0100               	movlb	0	; () banked
 31438  005744  6F65               	movwf	playSeventh@seventh_p& (0+255),b
 31439  005746  0E02               	movlw	high _dominant_7th
 31440  005748  D00F               	goto	L18
 31441  00574A                     
 31442                           ; BSR set to: 0
 31443                           ;keyboard.c: 406: seventh_p = major_7th;
 31444                           
 31445                           ; BSR set to: 0
 31446  00574A  0ED4               	movlw	low _major_7th
 31447  00574C  6F65               	movwf	playSeventh@seventh_p& (0+255),b
 31448  00574E  0E02               	movlw	high _major_7th
 31449  005750  D00B               	goto	L18
 31450  005752                     
 31451                           ; BSR set to: 0
 31452                           ;keyboard.c: 409: seventh_p = minor_7th;
 31453                           
 31454                           ; BSR set to: 0
 31455  005752  0ED0               	movlw	low _minor_7th
 31456  005754  6F65               	movwf	playSeventh@seventh_p& (0+255),b
 31457  005756  0E02               	movlw	high _minor_7th
 31458  005758  D007               	goto	L18
 31459  00575A                     
 31460                           ; BSR set to: 0
 31461                           ;keyboard.c: 412: seventh_p = half_diminished_7th;
 31462                           
 31463                           ; BSR set to: 0
 31464  00575A  0ECC               	movlw	low _half_diminished_7th
 31465  00575C  6F65               	movwf	playSeventh@seventh_p& (0+255),b
 31466  00575E  0E02               	movlw	high _half_diminished_7th
 31467  005760  D003               	goto	L18
 31468  005762                     
 31469                           ; BSR set to: 0
 31470                           ;keyboard.c: 415: seventh_p = diminished_7th;
 31471                           
 31472                           ; BSR set to: 0
 31473  005762  0EC8               	movlw	low _diminished_7th
 31474  005764  6F65               	movwf	playSeventh@seventh_p& (0+255),b
 31475  005766  0E02               	movlw	high _diminished_7th
 31476  005768                     L18:
 31477  005768  6F66               	movwf	(playSeventh@seventh_p+1)& (0+255),b
 31478                           
 31479                           ; BSR set to: 0
 31480                           ;keyboard.c: 419: }
 31481                           
 31482                           ; BSR set to: 0
 31483                           ;keyboard.c: 418: break;
 31484                           
 31485                           ;keyboard.c: 417: default:
 31486                           
 31487                           ;keyboard.c: 416: break;
 31488  00576A  D011               	goto	l1474
 31489  00576C                     l1472:
 31490                           
 31491                           ; BSR set to: 0
 31492  00576C  0100               	movlb	0	; () banked
 31493  00576E  51EF               	movf	_which_seventh& (0+255),w,b
 31494                           
 31495                           ; Switch size 1, requested type "space"
 31496                           ; Number of cases is 5, Range of values is 0 to 4
 31497                           ; switch strategies available:
 31498                           ; Name         Instructions Cycles
 31499                           ; simple_byte           16     9 (average)
 31500                           ;	Chosen strategy is simple_byte
 31501  005770  0A00               	xorlw	0	; case 0
 31502  005772  B4D8               	btfsc	status,2,c
 31503  005774  D7E5               	goto	l1473
 31504  005776  0A01               	xorlw	1	; case 1
 31505  005778  B4D8               	btfsc	status,2,c
 31506  00577A  D7E7               	goto	l1475
 31507  00577C  0A03               	xorlw	3	; case 2
 31508  00577E  B4D8               	btfsc	status,2,c
 31509  005780  D7E8               	goto	l1476
 31510  005782  0A01               	xorlw	1	; case 3
 31511  005784  B4D8               	btfsc	status,2,c
 31512  005786  D7E9               	goto	l1477
 31513  005788  0A07               	xorlw	7	; case 4
 31514  00578A  B4D8               	btfsc	status,2,c
 31515  00578C  D7EA               	goto	l1478
 31516  00578E                     l1474:
 31517                           
 31518                           ; BSR set to: 0
 31519                           ;keyboard.c: 422: if(ARPEGGIO_ON == 0){
 31520  00578E  B804               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 31521  005790  D030               	goto	u45620
 31522                           
 31523                           ; BSR set to: 0
 31524                           ;keyboard.c: 423: for(unsigned char i = 0; i<4; i++){
 31525  005792  0E00               	movlw	0
 31526  005794  6F67               	movwf	playSeventh@i& (0+255),b
 31527  005796                     l26442:
 31528                           
 31529                           ; BSR set to: 0
 31530  005796  0E03               	movlw	3
 31531  005798  6567               	cpfsgt	playSeventh@i& (0+255),b
 31532  00579A  D001               	goto	l1481
 31533  00579C  D02A               	goto	u45620
 31534  00579E                     l1481:
 31535                           
 31536                           ; BSR set to: 0
 31537                           ;keyboard.c: 424: if(ON_OFF == 1) {noteOn(channel,seventh_p[i] + pitch,velocity);}
 31538  00579E  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31539  0057A0  D011               	goto	l1483
 31540                           
 31541                           ; BSR set to: 0
 31542  0057A2  5051               	movf	_velocity,w,c
 31543  0057A4  6EE6               	movwf	postinc1,c
 31544  0057A6  5167               	movf	playSeventh@i& (0+255),w,b
 31545  0057A8  0D01               	mullw	1
 31546  0057AA  50F3               	movf	prodl,w,c
 31547  0057AC  2565               	addwf	playSeventh@seventh_p& (0+255),w,b
 31548  0057AE  6ED9               	movwf	fsr2l,c
 31549  0057B0  50F4               	movf	prodh,w,c
 31550  0057B2  2166               	addwfc	(playSeventh@seventh_p+1)& (0+255),w,b
 31551  0057B4  6EDA               	movwf	fsr2h,c
 31552  0057B6  50DF               	movf	indf2,w,c
 31553  0057B8  2569               	addwf	playSeventh@pitch& (0+255),w,b
 31554  0057BA  6EE6               	movwf	postinc1,c
 31555  0057BC  503E               	movf	_channel,w,c
 31556  0057BE  6EE6               	movwf	postinc1,c
 31557  0057C0  ECF8  F044         	call	_noteOn	;wreg free
 31558  0057C4                     l1483:
 31559                           
 31560                           ;keyboard.c: 425: if(ON_OFF == 0) {noteOff(channel,seventh_p[i] + pitch,velocity);}
 31561  0057C4  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31562  0057C6  D012               	goto	l1484
 31563  0057C8  5051               	movf	_velocity,w,c
 31564  0057CA  6EE6               	movwf	postinc1,c
 31565  0057CC  0100               	movlb	0	; () banked
 31566  0057CE  5167               	movf	playSeventh@i& (0+255),w,b
 31567  0057D0  0D01               	mullw	1
 31568  0057D2  50F3               	movf	prodl,w,c
 31569  0057D4  2565               	addwf	playSeventh@seventh_p& (0+255),w,b
 31570  0057D6  6ED9               	movwf	fsr2l,c
 31571  0057D8  50F4               	movf	prodh,w,c
 31572  0057DA  2166               	addwfc	(playSeventh@seventh_p+1)& (0+255),w,b
 31573  0057DC  6EDA               	movwf	fsr2h,c
 31574  0057DE  50DF               	movf	indf2,w,c
 31575  0057E0  2569               	addwf	playSeventh@pitch& (0+255),w,b
 31576  0057E2  6EE6               	movwf	postinc1,c
 31577  0057E4  503E               	movf	_channel,w,c
 31578  0057E6  6EE6               	movwf	postinc1,c
 31579  0057E8  ECAD  F049         	call	_noteOff	;wreg free
 31580  0057EC                     l1484:
 31581  0057EC  0100               	movlb	0	; () banked
 31582  0057EE  2B67               	incf	playSeventh@i& (0+255),f,b
 31583  0057F0  D7D2               	goto	l26442
 31584  0057F2                     u45620:
 31585                           
 31586                           ; BSR set to: 0
 31587                           ;keyboard.c: 426: }
 31588                           ;keyboard.c: 427: }
 31589                           ;keyboard.c: 430: if(ARPEGGIO_ON == 1){
 31590                           
 31591                           ; BSR set to: 0
 31592  0057F2  A804               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 31593  0057F4  0012               	return	
 31594                           
 31595                           ; BSR set to: 0
 31596                           ;keyboard.c: 432: if(ON_OFF == 1) {
 31597  0057F6  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31598  0057F8  D034               	goto	l1486
 31599                           
 31600                           ; BSR set to: 0
 31601                           ;keyboard.c: 434: TMR0ON = 0;
 31602  0057FA  9ED5               	bcf	4053,7,c	;volatile
 31603                           
 31604                           ;keyboard.c: 437: parallel = pitch;
 31605  0057FC  C069  F030         	movff	playSeventh@pitch,_parallel
 31606                           
 31607                           ; BSR set to: 0
 31608                           ;keyboard.c: 440: if(NUM_NOTES_PRESSED > 0){
 31609  005800  502F               	movf	_NUM_NOTES_PRESSED,w,c
 31610  005802  B4D8               	btfsc	status,2,c
 31611  005804  D00A               	goto	l1487
 31612                           
 31613                           ; BSR set to: 0
 31614                           ;keyboard.c: 441: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 31615  005806  0E00               	movlw	0
 31616  005808  B403               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 31617  00580A  0E01               	movlw	1
 31618  00580C  EC52  F04B         	call	_wait_one_pulse
 31619                           
 31620                           ;keyboard.c: 442: if(note_off_was_sent == 0) {key_press_release_note_off();}
 31621  005810  A202               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 31622  005812  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 31623                           
 31624                           ;keyboard.c: 443: TIMER_OVERFLOWS = 0;
 31625  005816  0E00               	movlw	0
 31626  005818  6E2E               	movwf	_TIMER_OVERFLOWS,c
 31627  00581A                     l1487:
 31628                           
 31629                           ;keyboard.c: 444: }
 31630                           ;keyboard.c: 446: for(unsigned char i = 0; i<4; i++){
 31631  00581A  0E00               	movlw	0
 31632  00581C  0100               	movlb	0	; () banked
 31633  00581E  6F68               	movwf	playSeventh@i_1693& (0+255),b
 31634  005820                     l26472:
 31635                           
 31636                           ; BSR set to: 0
 31637  005820  0E03               	movlw	3
 31638  005822  6568               	cpfsgt	playSeventh@i_1693& (0+255),b
 31639  005824  D001               	goto	l1489
 31640  005826  D015               	goto	u45680
 31641  005828                     l1489:
 31642                           
 31643                           ; BSR set to: 0
 31644                           ;keyboard.c: 447: ARPEGGIO[i] = seventh_p[i] + pitch;
 31645                           
 31646                           ; BSR set to: 0
 31647  005828  5168               	movf	playSeventh@i_1693& (0+255),w,b
 31648  00582A  0D01               	mullw	1
 31649  00582C  0E82               	movlw	low _ARPEGGIO
 31650  00582E  24F3               	addwf	prodl,w,c
 31651  005830  6ED9               	movwf	fsr2l,c
 31652  005832  0E01               	movlw	high _ARPEGGIO
 31653  005834  20F4               	addwfc	prodh,w,c
 31654  005836  6EDA               	movwf	fsr2h,c
 31655  005838  5168               	movf	playSeventh@i_1693& (0+255),w,b
 31656  00583A  0D01               	mullw	1
 31657  00583C  50F3               	movf	prodl,w,c
 31658  00583E  2565               	addwf	playSeventh@seventh_p& (0+255),w,b
 31659  005840  6EE9               	movwf	fsr0l,c
 31660  005842  50F4               	movf	prodh,w,c
 31661  005844  2166               	addwfc	(playSeventh@seventh_p+1)& (0+255),w,b
 31662  005846  6EEA               	movwf	fsr0h,c
 31663  005848  50EF               	movf	indf0,w,c
 31664  00584A  2569               	addwf	playSeventh@pitch& (0+255),w,b
 31665  00584C  6EDF               	movwf	indf2,c
 31666                           
 31667                           ; BSR set to: 0
 31668  00584E  2B68               	incf	playSeventh@i_1693& (0+255),f,b
 31669  005850  D7E7               	goto	l26472
 31670  005852                     u45680:
 31671                           
 31672                           ; BSR set to: 0
 31673                           ;keyboard.c: 448: }
 31674                           ;keyboard.c: 450: NUM_NOTES_PRESSED = 4;
 31675                           
 31676                           ; BSR set to: 0
 31677  005852  0E04               	movlw	4
 31678  005854  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 31679                           
 31680                           ; BSR set to: 0
 31681                           ;keyboard.c: 453: if(LATCH == 0) {latch_was_pressed = 0;}
 31682  005856  A204               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 31683                           
 31684                           ; BSR set to: 0
 31685  005858  9C03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31686                           
 31687                           ; BSR set to: 0
 31688                           ;keyboard.c: 455: finish_arpeggio_setup();
 31689                           
 31690                           ; BSR set to: 0
 31691  00585A  ECE7  F04B         	call	_finish_arpeggio_setup	;wreg free
 31692                           
 31693                           ;keyboard.c: 456: TMR0ON = 1;
 31694  00585E  8ED5               	bsf	4053,7,c	;volatile
 31695                           
 31696                           ;keyboard.c: 458: return;
 31697  005860  0012               	return	
 31698  005862                     l1486:
 31699                           
 31700                           ; BSR set to: 0
 31701                           ;keyboard.c: 459: }
 31702                           ;keyboard.c: 461: if((ON_OFF == 0) && (LATCH == 0)) {
 31703  005862  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31704  005864  0012               	return	
 31705                           
 31706                           ; BSR set to: 0
 31707  005866  B204               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 31708  005868  0012               	return	
 31709                           
 31710                           ; BSR set to: 0
 31711                           ;keyboard.c: 463: if(NUM_NOTES_PRESSED > 0){
 31712  00586A  502F               	movf	_NUM_NOTES_PRESSED,w,c
 31713  00586C  B4D8               	btfsc	status,2,c
 31714  00586E  D00A               	goto	l1494
 31715                           
 31716                           ; BSR set to: 0
 31717                           ;keyboard.c: 464: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 31718  005870  0E00               	movlw	0
 31719  005872  B203               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 31720  005874  0E01               	movlw	1
 31721  005876  EC52  F04B         	call	_wait_one_pulse
 31722                           
 31723                           ;keyboard.c: 465: if(note_off_was_sent == 0) {key_press_release_note_off();}
 31724  00587A  A202               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 31725  00587C  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 31726                           
 31727                           ;keyboard.c: 466: TIMER_OVERFLOWS = 0;
 31728  005880  0E00               	movlw	0
 31729  005882  6E2E               	movwf	_TIMER_OVERFLOWS,c
 31730  005884                     l1494:
 31731                           
 31732                           ;keyboard.c: 467: }
 31733                           ;keyboard.c: 470: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 31734  005884  C030  F061         	movff	_parallel,??_playSeventh
 31735  005888  0100               	movlb	0	; () banked
 31736  00588A  6B62               	clrf	(??_playSeventh+1)& (0+255),b
 31737  00588C  BF61               	btfsc	??_playSeventh& (0+255),7,b
 31738  00588E  0762               	decf	(??_playSeventh+1)& (0+255),f,b
 31739  005890  5169               	movf	playSeventh@pitch& (0+255),w,b
 31740  005892  6F63               	movwf	(??_playSeventh+2)& (0+255),b
 31741  005894  6B64               	clrf	(??_playSeventh+3)& (0+255),b
 31742  005896  5161               	movf	??_playSeventh& (0+255),w,b
 31743  005898  1963               	xorwf	(??_playSeventh+2)& (0+255),w,b
 31744  00589A  E106               	bnz	l26510
 31745  00589C  5162               	movf	(??_playSeventh+1)& (0+255),w,b
 31746  00589E  1964               	xorwf	(??_playSeventh+3)& (0+255),w,b
 31747  0058A0  A4D8               	btfss	status,2,c
 31748  0058A2  D002               	goto	l1496
 31749                           
 31750                           ; BSR set to: 0
 31751  0058A4  0E00               	movlw	0
 31752  0058A6  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 31753  0058A8                     l1496:
 31754  0058A8                     l26510:
 31755                           
 31756                           ; BSR set to: 0
 31757                           ;keyboard.c: 475: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 31758  0058A8  BE03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 31759                           
 31760                           ; BSR set to: 0
 31761  0058AA  AC03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31762  0058AC  D001               	goto	l1497
 31763                           
 31764                           ; BSR set to: 0
 31765                           ;keyboard.c: 476: LATCH = 1;
 31766  0058AE  8204               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 31767  0058B0                     l1497:
 31768                           
 31769                           ; BSR set to: 0
 31770                           ;keyboard.c: 477: }
 31771                           ;keyboard.c: 480: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_pressed
      +                           == 1)){
 31772  0058B0  A004               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 31773  0058B2  D002               	goto	u45780
 31774                           
 31775                           ; BSR set to: 0
 31776  0058B4  A004               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 31777  0058B6  D006               	goto	l1498
 31778  0058B8                     u45780:
 31779                           
 31780                           ; BSR set to: 0
 31781  0058B8  AC03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31782  0058BA  D004               	goto	l1498
 31783                           
 31784                           ; BSR set to: 0
 31785                           ;keyboard.c: 481: NUM_NOTES_PRESSED = 0;
 31786  0058BC  0E00               	movlw	0
 31787  0058BE  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 31788                           
 31789                           ;keyboard.c: 482: ARRAY_INDEX = 0;
 31790  0058C0  0E00               	movlw	0
 31791  0058C2  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 31792  0058C4                     l1498:
 31793                           
 31794                           ; BSR set to: 0
 31795                           ;keyboard.c: 483: }
 31796                           ;keyboard.c: 485: finish_arpeggio_setup();
 31797                           
 31798                           ; BSR set to: 0
 31799  0058C4  ECE7  F04B         	call	_finish_arpeggio_setup	;wreg free
 31800                           
 31801                           ;keyboard.c: 486: TMR0ON = 1;
 31802  0058C8  8ED5               	bsf	4053,7,c	;volatile
 31803                           
 31804                           ;keyboard.c: 488: return;
 31805  0058CA  0012               	return	
 31806  0058CC                     __end_of_playSeventh:
 31807                           	opt stack 0
 31808                           tblptru	equ	0xFF8
 31809                           tblptrh	equ	0xFF7
 31810                           tblptrl	equ	0xFF6
 31811                           tablat	equ	0xFF5
 31812                           prodh	equ	0xFF4
 31813                           prodl	equ	0xFF3
 31814                           intcon	equ	0xFF2
 31815                           intcon2	equ	0xFF1
 31816                           indf0	equ	0xFEF
 31817                           postinc0	equ	0xFEE
 31818                           fsr0h	equ	0xFEA
 31819                           fsr0l	equ	0xFE9
 31820                           wreg	equ	0xFE8
 31821                           postinc1	equ	0xFE6
 31822                           plusw1	equ	0xFE3
 31823                           fsr1h	equ	0xFE2
 31824                           fsr1l	equ	0xFE1
 31825                           indf2	equ	0xFDF
 31826                           postinc2	equ	0xFDE
 31827                           postdec2	equ	0xFDD
 31828                           plusw2	equ	0xFDB
 31829                           fsr2h	equ	0xFDA
 31830                           fsr2l	equ	0xFD9
 31831                           status	equ	0xFD8
 31832                           
 31833 ;; *************** function _noteOn *****************
 31834 ;; Defined at:
 31835 ;;		line 123 in file "midi.c"
 31836 ;; Parameters:    Size  Location     Type
 31837 ;;  channel         1  [STACK] unsigned char 
 31838 ;;  pitch           1  [STACK] unsigned char 
 31839 ;;  velocity        1  [STACK] unsigned char 
 31840 ;; Auto vars:     Size  Location     Type
 31841 ;;		None
 31842 ;; Return value:  Size  Location     Type
 31843 ;;                  1  [STACK] void 
 31844 ;; Registers used:
 31845 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh
 31846 ;; Tracked objects:
 31847 ;;		On entry : 0/0
 31848 ;;		On exit  : 0/0
 31849 ;;		Unchanged: 0/0
 31850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 31851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31855 ;;Total ram usage:        0 bytes
 31856 ;; Hardware stack levels used:    1
 31857 ;; Hardware stack levels required when called:    7
 31858 ;; This function calls:
 31859 ;;		_noteOff
 31860 ;;		_sendOut
 31861 ;;		_sendUSB
 31862 ;; This function is called by:
 31863 ;;		_playThisNotePentatonic
 31864 ;;		_playTriad
 31865 ;;		_playSeventh
 31866 ;;		_playThisNote
 31867 ;;		_playThisNote8
 31868 ;;		_playDiatonicTriadMajor
 31869 ;;		_playDiatonicSeventhMajor
 31870 ;;		_playDiatonicTriadMinor
 31871 ;;		_playDiatonicSeventhMinor
 31872 ;;		_playArpeggio
 31873 ;;		_keyboard_all_note
 31874 ;;		_keyboard_eight_note
 31875 ;; This function uses a reentrant model
 31876 ;;
 31877                           
 31878                           	psect	text81
 31879  0089F0                     __ptext81:
 31880                           	opt stack 0
 31881  0089F0                     _noteOn:
 31882                           	opt stack 6
 31883                           
 31884                           ;midi.c: 125: noteNumber = pitch + semitone + ((octave + 1) * 12);
 31885                           ;stkvar	noteOn@pitch @ sp[(0)+-2]
 31886                           
 31887                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
 31888                           ;incstack = 0
 31889  0089F0  0EFE               	movlw	-2
 31890  0089F2  CFE3 F04A          	movff	plusw1,btemp+11
 31891  0089F6  5050               	movf	_octave,w,c
 31892  0089F8  0D0C               	mullw	12
 31893  0089FA  50F3               	movf	prodl,w,c
 31894  0089FC  243B               	addwf	_semitone,w,c
 31895  0089FE  244A               	addwf	btemp+11,w,c
 31896  008A00  0F0C               	addlw	12
 31897  008A02  6E3C               	movwf	_noteNumber,c
 31898                           
 31899                           ;midi.c: 126: statusByte = channel | note_on;
 31900                           ;stkvar	noteOn@channel @ sp[(0)+-1]
 31901  008A04  0EFF               	movlw	-1
 31902  008A06  50E3               	movf	plusw1,w,c
 31903  008A08  0990               	iorlw	144
 31904  008A0A  6E3D               	movwf	_statusByte,c
 31905                           
 31906                           ;midi.c: 129: if (velocity == 0) {noteOff(channel, pitch, velocity);return;}
 31907                           ;stkvar	noteOn@velocity @ sp[(0)+-3]
 31908  008A0C  0EFD               	movlw	-3
 31909  008A0E  50E3               	movf	plusw1,w,c
 31910  008A10  A4D8               	btfss	status,2,c
 31911  008A12  D00C               	goto	l32666
 31912                           
 31913                           ;stkvar	noteOn@velocity @ sp[(0)+-3]
 31914  008A14  0EFD               	movlw	-3
 31915  008A16  50E3               	movf	plusw1,w,c
 31916  008A18  6EE6               	movwf	postinc1,c
 31917                           
 31918                           ;stkvar	noteOn@pitch @ sp[(-1)+-2]
 31919  008A1A  0EFD               	movlw	-3
 31920  008A1C  50E3               	movf	plusw1,w,c
 31921  008A1E  6EE6               	movwf	postinc1,c
 31922                           
 31923                           ;stkvar	noteOn@channel @ sp[(-2)+-1]
 31924  008A20  0EFD               	movlw	-3
 31925  008A22  50E3               	movf	plusw1,w,c
 31926  008A24  6EE6               	movwf	postinc1,c
 31927  008A26  ECAD  F049         	call	_noteOff	;wreg free
 31928  008A2A  D017               	goto	l482
 31929  008A2C                     l32666:
 31930                           
 31931                           ;midi.c: 132: sendUSB(statusByte, noteNumber, velocity);
 31932                           ;stkvar	noteOn@velocity @ sp[(0)+-3]
 31933  008A2C  0EFD               	movlw	-3
 31934  008A2E  50E3               	movf	plusw1,w,c
 31935  008A30  6EE6               	movwf	postinc1,c
 31936  008A32  503C               	movf	_noteNumber,w,c
 31937  008A34  6EE6               	movwf	postinc1,c
 31938  008A36  503D               	movf	_statusByte,w,c
 31939  008A38  6EE6               	movwf	postinc1,c
 31940  008A3A  EC40  F036         	call	_sendUSB	;wreg free
 31941                           
 31942                           ;midi.c: 135: if(velocity > 0) {
 31943                           ;stkvar	noteOn@velocity @ sp[(0)+-3]
 31944  008A3E  0EFD               	movlw	-3
 31945  008A40  50E3               	movf	plusw1,w,c
 31946  008A42  B4D8               	btfsc	status,2,c
 31947  008A44  D009               	goto	l32672
 31948                           
 31949                           ;midi.c: 136: sendOut(statusByte, noteNumber, velocity);
 31950                           ;stkvar	noteOn@velocity @ sp[(0)+-3]
 31951  008A46  0EFD               	movlw	-3
 31952  008A48  50E3               	movf	plusw1,w,c
 31953  008A4A  6EE6               	movwf	postinc1,c
 31954  008A4C  503C               	movf	_noteNumber,w,c
 31955  008A4E  6EE6               	movwf	postinc1,c
 31956  008A50  503D               	movf	_statusByte,w,c
 31957  008A52  6EE6               	movwf	postinc1,c
 31958  008A54  ECC9  F035         	call	_sendOut	;wreg free
 31959  008A58                     l32672:
 31960                           
 31961                           ;midi.c: 139: }
 31962                           ;midi.c: 141: note_off_was_sent = 0;
 31963  008A58  9202               	bcf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 31964  008A5A                     l482:
 31965                           
 31966                           ; _noteOn: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsiz
      +                          e = 3, vargsize = 0
 31967  008A5A  52E5               	movf	postdec1,f,c
 31968  008A5C  52E5               	movf	postdec1,f,c
 31969  008A5E  52E5               	movf	postdec1,f,c
 31970  008A60  0012               	return		;funcret
 31971  008A62                     __end_of_noteOn:
 31972                           	opt stack 0
 31973                           tblptru	equ	0xFF8
 31974                           tblptrh	equ	0xFF7
 31975                           tblptrl	equ	0xFF6
 31976                           tablat	equ	0xFF5
 31977                           prodh	equ	0xFF4
 31978                           prodl	equ	0xFF3
 31979                           intcon	equ	0xFF2
 31980                           intcon2	equ	0xFF1
 31981                           indf0	equ	0xFEF
 31982                           postinc0	equ	0xFEE
 31983                           fsr0h	equ	0xFEA
 31984                           fsr0l	equ	0xFE9
 31985                           wreg	equ	0xFE8
 31986                           postinc1	equ	0xFE6
 31987                           postdec1	equ	0xFE5
 31988                           plusw1	equ	0xFE3
 31989                           fsr1h	equ	0xFE2
 31990                           fsr1l	equ	0xFE1
 31991                           indf2	equ	0xFDF
 31992                           postinc2	equ	0xFDE
 31993                           postdec2	equ	0xFDD
 31994                           plusw2	equ	0xFDB
 31995                           fsr2h	equ	0xFDA
 31996                           fsr2l	equ	0xFD9
 31997                           status	equ	0xFD8
 31998                           
 31999 ;; *************** function _finish_arpeggio_setup *****************
 32000 ;; Defined at:
 32001 ;;		line 98 in file "arpeggio.c"
 32002 ;; Parameters:    Size  Location     Type
 32003 ;;		None
 32004 ;; Auto vars:     Size  Location     Type
 32005 ;;		None
 32006 ;; Return value:  Size  Location     Type
 32007 ;;                  1    wreg      void 
 32008 ;; Registers used:
 32009 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+10, btemp+11, prodl, prodh, cstack
 32010 ;; Tracked objects:
 32011 ;;		On entry : 0/0
 32012 ;;		On exit  : 0/0
 32013 ;;		Unchanged: 0/0
 32014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32019 ;;Total ram usage:        0 bytes
 32020 ;; Hardware stack levels used:    1
 32021 ;; Hardware stack levels required when called:    9
 32022 ;; This function calls:
 32023 ;;		_resetArpeggio
 32024 ;;		_setupArpeggio
 32025 ;; This function is called by:
 32026 ;;		_playThisNotePentatonic
 32027 ;;		_playTriad
 32028 ;;		_playSeventh
 32029 ;;		_playThisNote
 32030 ;;		_playThisNote8
 32031 ;;		_playDiatonicTriadMajor
 32032 ;;		_playDiatonicSeventhMajor
 32033 ;;		_playDiatonicTriadMinor
 32034 ;;		_playDiatonicSeventhMinor
 32035 ;; This function uses a non-reentrant model
 32036 ;;
 32037                           
 32038                           	psect	text82
 32039  0097CE                     __ptext82:
 32040                           	opt stack 0
 32041  0097CE                     _finish_arpeggio_setup:
 32042                           	opt stack 14
 32043                           
 32044                           ;arpeggio.c: 101: if((ON_OFF == 1) && (RESET_ON_KEY_PRESS == 1)){resetArpeggio();}
 32045                           
 32046                           ;incstack = 0
 32047  0097CE  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32048  0097D0  A604               	btfss	_RESET_ON_KEY_PRESS/(0+8),_RESET_ON_KEY_PRESS& (0+7),c
 32049  0097D2  D002               	goto	l5404
 32050  0097D4  ECF2  F049         	call	_resetArpeggio	;wreg free
 32051  0097D8                     l5404:
 32052                           
 32053                           ;arpeggio.c: 102: if((ON_OFF == 0) && (RESET_ON_KEY_RELEASE == 1)){resetArpeggio();}
 32054  0097D8  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32055  0097DA  A404               	btfss	_RESET_ON_KEY_RELEASE/(0+8),_RESET_ON_KEY_RELEASE& (0+7),c
 32056  0097DC  D002               	goto	l5405
 32057  0097DE  ECF2  F049         	call	_resetArpeggio	;wreg free
 32058  0097E2                     l5405:
 32059                           
 32060                           ;arpeggio.c: 105: setupArpeggio();
 32061  0097E2  ECBE  F044         	call	_setupArpeggio	;wreg free
 32062                           
 32063                           ;arpeggio.c: 107: TIMER_OVERFLOWS = 0;
 32064  0097E6  0E00               	movlw	0
 32065  0097E8  6E2E               	movwf	_TIMER_OVERFLOWS,c
 32066  0097EA  0012               	return		;funcret
 32067  0097EC                     __end_of_finish_arpeggio_setup:
 32068                           	opt stack 0
 32069                           tblptru	equ	0xFF8
 32070                           tblptrh	equ	0xFF7
 32071                           tblptrl	equ	0xFF6
 32072                           tablat	equ	0xFF5
 32073                           prodh	equ	0xFF4
 32074                           prodl	equ	0xFF3
 32075                           intcon	equ	0xFF2
 32076                           intcon2	equ	0xFF1
 32077                           indf0	equ	0xFEF
 32078                           postinc0	equ	0xFEE
 32079                           fsr0h	equ	0xFEA
 32080                           fsr0l	equ	0xFE9
 32081                           wreg	equ	0xFE8
 32082                           postinc1	equ	0xFE6
 32083                           postdec1	equ	0xFE5
 32084                           plusw1	equ	0xFE3
 32085                           fsr1h	equ	0xFE2
 32086                           fsr1l	equ	0xFE1
 32087                           indf2	equ	0xFDF
 32088                           postinc2	equ	0xFDE
 32089                           postdec2	equ	0xFDD
 32090                           plusw2	equ	0xFDB
 32091                           fsr2h	equ	0xFDA
 32092                           fsr2l	equ	0xFD9
 32093                           status	equ	0xFD8
 32094                           
 32095 ;; *************** function _setupArpeggio *****************
 32096 ;; Defined at:
 32097 ;;		line 183 in file "arpeggio.c"
 32098 ;; Parameters:    Size  Location     Type
 32099 ;;		None
 32100 ;; Auto vars:     Size  Location     Type
 32101 ;;		None
 32102 ;; Return value:  Size  Location     Type
 32103 ;;                  1    wreg      void 
 32104 ;; Registers used:
 32105 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+10, btemp+11, prodl, prodh, cstack
 32106 ;; Tracked objects:
 32107 ;;		On entry : 0/0
 32108 ;;		On exit  : 0/0
 32109 ;;		Unchanged: 0/0
 32110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32115 ;;Total ram usage:        0 bytes
 32116 ;; Hardware stack levels used:    1
 32117 ;; Hardware stack levels required when called:    8
 32118 ;; This function calls:
 32119 ;;		_copy_array
 32120 ;;		_random_pitches
 32121 ;;		_random_pitches_non_repeating
 32122 ;; This function is called by:
 32123 ;;		_Function_H_4
 32124 ;;		_finish_arpeggio_setup
 32125 ;; This function uses a non-reentrant model
 32126 ;;
 32127                           
 32128                           	psect	text83
 32129  00897C                     __ptext83:
 32130                           	opt stack 0
 32131  00897C                     _setupArpeggio:
 32132                           	opt stack 14
 32133                           
 32134                           ;arpeggio.c: 188: if(NUM_NOTES_PRESSED == 0){return;}
 32135                           
 32136                           ;incstack = 0
 32137  00897C  502F               	movf	_NUM_NOTES_PRESSED,w,c
 32138  00897E  B4D8               	btfsc	status,2,c
 32139  008980  0012               	return	
 32140                           
 32141                           ;arpeggio.c: 191: copy_array();
 32142  008982  EC11  F047         	call	_copy_array	;wreg free
 32143                           
 32144                           ;arpeggio.c: 194: if(ARPEGGIO_TYPE == RANDOM) {random_pitches();}
 32145  008986  0E05               	movlw	5
 32146  008988  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 32147  00898A  B4D8               	btfsc	status,2,c
 32148  00898C  EC31  F045         	call	_random_pitches	;wreg free
 32149                           
 32150                           ;arpeggio.c: 195: if(ARPEGGIO_TYPE == RANDOM_NON_REPEATING) {random_pitches_non_repeatin
      +                          g();}
 32151  008990  0E04               	movlw	4
 32152  008992  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 32153  008994  B4D8               	btfsc	status,2,c
 32154  008996  ECDF  F03B         	call	_random_pitches_non_repeating	;wreg free
 32155                           
 32156                           ;arpeggio.c: 204: if(ARPEGGIO_TYPE == AS_PRESSED){arpeggioPtr = ARPEGGIO;}
 32157  00899A  0E06               	movlw	6
 32158  00899C  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 32159  00899E  A4D8               	btfss	status,2,c
 32160  0089A0  D004               	goto	l5438
 32161  0089A2  0E82               	movlw	low _ARPEGGIO
 32162  0089A4  6E2A               	movwf	_arpeggioPtr,c
 32163  0089A6  0E01               	movlw	high _ARPEGGIO
 32164  0089A8  6E2B               	movwf	_arpeggioPtr+1,c
 32165  0089AA                     l5438:
 32166                           
 32167                           ;arpeggio.c: 205: if(ARPEGGIO_TYPE == UP | ARPEGGIO_TYPE == UP_DOWN){arpeggioPtr = ARPEG
      +                          GIO_SORTED;}
 32168  0089AA  5035               	movf	_ARPEGGIO_TYPE,w,c
 32169  0089AC  B4D8               	btfsc	status,2,c
 32170  0089AE  D004               	goto	u44940
 32171  0089B0  0E02               	movlw	2
 32172  0089B2  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 32173  0089B4  A4D8               	btfss	status,2,c
 32174  0089B6  D004               	goto	l5439
 32175  0089B8                     u44940:
 32176  0089B8  0E78               	movlw	low _ARPEGGIO_SORTED
 32177  0089BA  6E2A               	movwf	_arpeggioPtr,c
 32178  0089BC  0E02               	movlw	high _ARPEGGIO_SORTED
 32179  0089BE  6E2B               	movwf	_arpeggioPtr+1,c
 32180  0089C0                     l5439:
 32181                           
 32182                           ;arpeggio.c: 206: if(ARPEGGIO_TYPE == DOWN | ARPEGGIO_TYPE == DOWN_UP){arpeggioPtr = ARP
      +                          EGGIO_SORTED;}
 32183  0089C0  0435               	decf	_ARPEGGIO_TYPE,w,c
 32184  0089C2  B4D8               	btfsc	status,2,c
 32185  0089C4  D004               	goto	u44960
 32186  0089C6  0E03               	movlw	3
 32187  0089C8  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 32188  0089CA  A4D8               	btfss	status,2,c
 32189  0089CC  D004               	goto	l5442
 32190  0089CE                     u44960:
 32191  0089CE  0E78               	movlw	low _ARPEGGIO_SORTED
 32192  0089D0  6E2A               	movwf	_arpeggioPtr,c
 32193  0089D2  0E02               	movlw	high _ARPEGGIO_SORTED
 32194  0089D4  6E2B               	movwf	_arpeggioPtr+1,c
 32195  0089D6                     l5442:
 32196                           
 32197                           ;arpeggio.c: 207: if(ARPEGGIO_TYPE == RANDOM | ARPEGGIO_TYPE == RANDOM_NON_REPEATING){ar
      +                          peggioPtr = ARPEGGIO_RANDOM;}
 32198  0089D6  0E05               	movlw	5
 32199  0089D8  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 32200  0089DA  B4D8               	btfsc	status,2,c
 32201  0089DC  D004               	goto	u44980
 32202  0089DE  0E04               	movlw	4
 32203  0089E0  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 32204  0089E2  A4D8               	btfss	status,2,c
 32205  0089E4  0012               	return	
 32206  0089E6                     u44980:
 32207  0089E6  0E68               	movlw	low _ARPEGGIO_RANDOM
 32208  0089E8  6E2A               	movwf	_arpeggioPtr,c
 32209  0089EA  0E02               	movlw	high _ARPEGGIO_RANDOM
 32210  0089EC  6E2B               	movwf	_arpeggioPtr+1,c
 32211  0089EE  0012               	return	
 32212  0089F0                     __end_of_setupArpeggio:
 32213                           	opt stack 0
 32214                           tblptru	equ	0xFF8
 32215                           tblptrh	equ	0xFF7
 32216                           tblptrl	equ	0xFF6
 32217                           tablat	equ	0xFF5
 32218                           prodh	equ	0xFF4
 32219                           prodl	equ	0xFF3
 32220                           intcon	equ	0xFF2
 32221                           intcon2	equ	0xFF1
 32222                           indf0	equ	0xFEF
 32223                           postinc0	equ	0xFEE
 32224                           fsr0h	equ	0xFEA
 32225                           fsr0l	equ	0xFE9
 32226                           wreg	equ	0xFE8
 32227                           postinc1	equ	0xFE6
 32228                           postdec1	equ	0xFE5
 32229                           plusw1	equ	0xFE3
 32230                           fsr1h	equ	0xFE2
 32231                           fsr1l	equ	0xFE1
 32232                           indf2	equ	0xFDF
 32233                           postinc2	equ	0xFDE
 32234                           postdec2	equ	0xFDD
 32235                           plusw2	equ	0xFDB
 32236                           fsr2h	equ	0xFDA
 32237                           fsr2l	equ	0xFD9
 32238                           status	equ	0xFD8
 32239                           
 32240 ;; *************** function _random_pitches_non_repeating *****************
 32241 ;; Defined at:
 32242 ;;		line 265 in file "arpeggio.c"
 32243 ;; Parameters:    Size  Location     Type
 32244 ;;		None
 32245 ;; Auto vars:     Size  Location     Type
 32246 ;;  randomIndex     1  [STACK] unsigned char 
 32247 ;;  temp            1  [STACK] unsigned char 
 32248 ;;  i               1  [STACK] unsigned char 
 32249 ;; Return value:  Size  Location     Type
 32250 ;;                  1  [STACK] void 
 32251 ;; Registers used:
 32252 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+10, btemp+11, prodl
 32253 ;; Tracked objects:
 32254 ;;		On entry : 0/0
 32255 ;;		On exit  : 0/0
 32256 ;;		Unchanged: 0/0
 32257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32262 ;;Total ram usage:        0 bytes
 32263 ;; Hardware stack levels used:    1
 32264 ;; Hardware stack levels required when called:    7
 32265 ;; This function calls:
 32266 ;;		___awmod
 32267 ;;		_rand
 32268 ;; This function is called by:
 32269 ;;		_processOctave
 32270 ;;		_setupArpeggio
 32271 ;;		_playArpeggio
 32272 ;; This function uses a reentrant model
 32273 ;;
 32274                           
 32275                           	psect	text84
 32276  0077BE                     __ptext84:
 32277                           	opt stack 0
 32278  0077BE                     _random_pitches_non_repeating:
 32279                           	opt stack 0
 32280                           
 32281                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
 32282  0077BE  52E6               	movf	postinc1,f,c
 32283  0077C0  52E6               	movf	postinc1,f,c
 32284  0077C2  52E6               	movf	postinc1,f,c
 32285                           
 32286                           ;arpeggio.c: 267: if(NUM_NOTES_PRESSED == 0){return;}
 32287                           
 32288                           ;incstack = 0
 32289  0077C4  502F               	movf	_NUM_NOTES_PRESSED,w,c
 32290  0077C6  B4D8               	btfsc	status,2,c
 32291  0077C8  D04D               	goto	u59240
 32292                           
 32293                           ;arpeggio.c: 269: for(unsigned char i = 0; i < NUM_NOTES_PRESSED; i++) {
 32294                           ;stkvar	random_pitches_non_repeating@i @ sp[(-3)+2]
 32295  0077CA  0EFF               	movlw	-1
 32296  0077CC  6AE3               	clrf	plusw1,c
 32297  0077CE  D043               	goto	l32704
 32298  0077D0                     l32694:
 32299                           
 32300                           ;arpeggio.c: 270: unsigned char temp = ARPEGGIO_RANDOM[i];
 32301                           ;stkvar	random_pitches_non_repeating@i @ sp[(-3)+2]
 32302  0077D0  0EFF               	movlw	-1
 32303  0077D2  50E3               	movf	plusw1,w,c
 32304  0077D4  6E40               	movwf	btemp+1,c
 32305  0077D6  6A41               	clrf	btemp+2,c
 32306  0077D8  0E68               	movlw	low _ARPEGGIO_RANDOM
 32307  0077DA  2440               	addwf	btemp+1,w,c
 32308  0077DC  6ED9               	movwf	fsr2l,c
 32309  0077DE  0E02               	movlw	high _ARPEGGIO_RANDOM
 32310  0077E0  2041               	addwfc	btemp+2,w,c
 32311  0077E2  6EDA               	movwf	fsr2h,c
 32312  0077E4  50DF               	movf	indf2,w,c
 32313  0077E6  6E4A               	movwf	btemp+11,c
 32314                           
 32315                           ;stkvar	random_pitches_non_repeating@temp @ sp[(-3)+1]
 32316  0077E8  0EFE               	movlw	-2
 32317  0077EA  C04A  FFE3         	movff	btemp+11,plusw1
 32318                           
 32319                           ;arpeggio.c: 271: unsigned char randomIndex = rand() % NUM_NOTES_PRESSED;
 32320  0077EE  502F               	movf	_NUM_NOTES_PRESSED,w,c
 32321  0077F0  6EE6               	movwf	postinc1,c
 32322  0077F2  0E00               	movlw	0
 32323  0077F4  6EE6               	movwf	postinc1,c
 32324  0077F6  EC53  F041         	call	_rand	;wreg free
 32325  0077FA  C03F  FFE6         	movff	btemp,postinc1
 32326  0077FE  C040  FFE6         	movff	btemp+1,postinc1
 32327  007802  ECD7  F033         	call	___awmod	;wreg free
 32328                           
 32329                           ;stkvar	random_pitches_non_repeating@randomIndex @ sp[(-3)+0]
 32330  007806  0EFD               	movlw	-3
 32331  007808  C03F  FFE3         	movff	btemp,plusw1
 32332                           
 32333                           ;arpeggio.c: 272: ARPEGGIO_RANDOM[i] = ARPEGGIO_RANDOM[randomIndex];
 32334                           ;stkvar	random_pitches_non_repeating@randomIndex @ sp[(-3)+0]
 32335  00780C  0EFD               	movlw	-3
 32336  00780E  50E3               	movf	plusw1,w,c
 32337  007810  6E40               	movwf	btemp+1,c
 32338  007812  6A41               	clrf	btemp+2,c
 32339  007814  0E68               	movlw	low _ARPEGGIO_RANDOM
 32340  007816  2440               	addwf	btemp+1,w,c
 32341  007818  6ED9               	movwf	fsr2l,c
 32342  00781A  0E02               	movlw	high _ARPEGGIO_RANDOM
 32343  00781C  2041               	addwfc	btemp+2,w,c
 32344  00781E  6EDA               	movwf	fsr2h,c
 32345                           
 32346                           ;stkvar	random_pitches_non_repeating@i @ sp[(-3)+2]
 32347  007820  0EFF               	movlw	-1
 32348  007822  50E3               	movf	plusw1,w,c
 32349  007824  6E40               	movwf	btemp+1,c
 32350  007826  6A41               	clrf	btemp+2,c
 32351  007828  0E68               	movlw	low _ARPEGGIO_RANDOM
 32352  00782A  2440               	addwf	btemp+1,w,c
 32353  00782C  6EE9               	movwf	fsr0l,c
 32354  00782E  0E02               	movlw	high _ARPEGGIO_RANDOM
 32355  007830  2041               	addwfc	btemp+2,w,c
 32356  007832  6EEA               	movwf	fsr0h,c
 32357  007834  CFDF FFEF          	movff	indf2,indf0
 32358                           
 32359                           ;arpeggio.c: 273: ARPEGGIO_RANDOM[randomIndex] = temp;
 32360                           ;stkvar	random_pitches_non_repeating@temp @ sp[(-3)+1]
 32361                           ;stkvar	random_pitches_non_repeating@randomIndex @ sp[(-3)+0]
 32362  007838  0EFD               	movlw	-3
 32363  00783A  50E3               	movf	plusw1,w,c
 32364  00783C  6E40               	movwf	btemp+1,c
 32365  00783E  6A41               	clrf	btemp+2,c
 32366  007840  0E68               	movlw	low _ARPEGGIO_RANDOM
 32367  007842  2440               	addwf	btemp+1,w,c
 32368  007844  6ED9               	movwf	fsr2l,c
 32369  007846  0E02               	movlw	high _ARPEGGIO_RANDOM
 32370  007848  2041               	addwfc	btemp+2,w,c
 32371  00784A  6EDA               	movwf	fsr2h,c
 32372  00784C  0EFE               	movlw	-2
 32373  00784E  CFE3 FFDF          	movff	plusw1,indf2
 32374                           
 32375                           ;stkvar	random_pitches_non_repeating@i @ sp[(-3)+2]
 32376  007852  0EFF               	movlw	-1
 32377  007854  2AE3               	incf	plusw1,f,c
 32378  007856                     l32704:
 32379                           
 32380                           ;stkvar	random_pitches_non_repeating@i @ sp[(-3)+2]
 32381  007856  0EFF               	movlw	-1
 32382  007858  CFE3 F03F          	movff	plusw1,btemp
 32383  00785C  502F               	movf	_NUM_NOTES_PRESSED,w,c
 32384  00785E  5C3F               	subwf	btemp,w,c
 32385  007860  A0D8               	btfss	status,0,c
 32386  007862  D7B6               	goto	l32694
 32387  007864                     u59240:
 32388                           
 32389                           ; _random_pitches_non_repeating: autosize = 3, savesize = 0, parsavesize = 0, tempsize =
      +                           0 parsize = 0, argsize = 0, vargsize = 0
 32390  007864  52E5               	movf	postdec1,f,c
 32391  007866  52E5               	movf	postdec1,f,c
 32392  007868  52E5               	movf	postdec1,f,c
 32393  00786A  0012               	return		;funcret
 32394  00786C                     __end_of_random_pitches_non_repeating:
 32395                           	opt stack 0
 32396                           tblptru	equ	0xFF8
 32397                           tblptrh	equ	0xFF7
 32398                           tblptrl	equ	0xFF6
 32399                           tablat	equ	0xFF5
 32400                           prodh	equ	0xFF4
 32401                           prodl	equ	0xFF3
 32402                           intcon	equ	0xFF2
 32403                           intcon2	equ	0xFF1
 32404                           indf0	equ	0xFEF
 32405                           postinc0	equ	0xFEE
 32406                           fsr0h	equ	0xFEA
 32407                           fsr0l	equ	0xFE9
 32408                           wreg	equ	0xFE8
 32409                           postinc1	equ	0xFE6
 32410                           postdec1	equ	0xFE5
 32411                           plusw1	equ	0xFE3
 32412                           fsr1h	equ	0xFE2
 32413                           fsr1l	equ	0xFE1
 32414                           indf2	equ	0xFDF
 32415                           postinc2	equ	0xFDE
 32416                           postdec2	equ	0xFDD
 32417                           plusw2	equ	0xFDB
 32418                           fsr2h	equ	0xFDA
 32419                           fsr2l	equ	0xFD9
 32420                           status	equ	0xFD8
 32421                           
 32422 ;; *************** function _random_pitches *****************
 32423 ;; Defined at:
 32424 ;;		line 254 in file "arpeggio.c"
 32425 ;; Parameters:    Size  Location     Type
 32426 ;;		None
 32427 ;; Auto vars:     Size  Location     Type
 32428 ;;  random_array    1  [STACK] unsigned char 
 32429 ;;  i               1  [STACK] unsigned char 
 32430 ;; Return value:  Size  Location     Type
 32431 ;;                  1  [STACK] void 
 32432 ;; Registers used:
 32433 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+10, btemp+11, prodl
 32434 ;; Tracked objects:
 32435 ;;		On entry : 0/0
 32436 ;;		On exit  : 0/0
 32437 ;;		Unchanged: 0/0
 32438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32443 ;;Total ram usage:        0 bytes
 32444 ;; Hardware stack levels used:    1
 32445 ;; Hardware stack levels required when called:    7
 32446 ;; This function calls:
 32447 ;;		___awmod
 32448 ;;		_rand
 32449 ;; This function is called by:
 32450 ;;		_processOctave
 32451 ;;		_setupArpeggio
 32452 ;;		_playArpeggio
 32453 ;; This function uses a reentrant model
 32454 ;;
 32455                           
 32456                           	psect	text85
 32457  008A62                     __ptext85:
 32458                           	opt stack 0
 32459  008A62                     _random_pitches:
 32460                           	opt stack 0
 32461                           
 32462                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
 32463  008A62  52E6               	movf	postinc1,f,c
 32464  008A64  52E6               	movf	postinc1,f,c
 32465                           
 32466                           ;arpeggio.c: 256: if(NUM_NOTES_PRESSED == 0){return;}
 32467                           
 32468                           ;incstack = 0
 32469  008A66  502F               	movf	_NUM_NOTES_PRESSED,w,c
 32470  008A68  B4D8               	btfsc	status,2,c
 32471  008A6A  D031               	goto	u59220
 32472                           
 32473                           ;arpeggio.c: 258: for (unsigned char i = 0; i < NUM_NOTES_PRESSED; i++){
 32474                           ;stkvar	random_pitches@i @ sp[(-2)+1]
 32475  008A6C  0EFF               	movlw	-1
 32476  008A6E  6AE3               	clrf	plusw1,c
 32477  008A70  D027               	goto	l32686
 32478  008A72                     l32680:
 32479                           
 32480                           ;arpeggio.c: 259: unsigned char random_array_index = rand() % (NUM_NOTES_PRESSED);
 32481  008A72  502F               	movf	_NUM_NOTES_PRESSED,w,c
 32482  008A74  6EE6               	movwf	postinc1,c
 32483  008A76  0E00               	movlw	0
 32484  008A78  6EE6               	movwf	postinc1,c
 32485  008A7A  EC53  F041         	call	_rand	;wreg free
 32486  008A7E  C03F  FFE6         	movff	btemp,postinc1
 32487  008A82  C040  FFE6         	movff	btemp+1,postinc1
 32488  008A86  ECD7  F033         	call	___awmod	;wreg free
 32489                           
 32490                           ;stkvar	random_pitches@random_array_index @ sp[(-2)+0]
 32491  008A8A  0EFE               	movlw	-2
 32492  008A8C  C03F  FFE3         	movff	btemp,plusw1
 32493                           
 32494                           ;arpeggio.c: 260: ARPEGGIO_RANDOM[i] = ARPEGGIO[random_array_index];
 32495                           ;stkvar	random_pitches@random_array_index @ sp[(-2)+0]
 32496  008A90  0EFE               	movlw	-2
 32497  008A92  50E3               	movf	plusw1,w,c
 32498  008A94  6E40               	movwf	btemp+1,c
 32499  008A96  6A41               	clrf	btemp+2,c
 32500  008A98  0E82               	movlw	low _ARPEGGIO
 32501  008A9A  2440               	addwf	btemp+1,w,c
 32502  008A9C  6ED9               	movwf	fsr2l,c
 32503  008A9E  0E01               	movlw	high _ARPEGGIO
 32504  008AA0  2041               	addwfc	btemp+2,w,c
 32505  008AA2  6EDA               	movwf	fsr2h,c
 32506                           
 32507                           ;stkvar	random_pitches@i @ sp[(-2)+1]
 32508  008AA4  0EFF               	movlw	-1
 32509  008AA6  50E3               	movf	plusw1,w,c
 32510  008AA8  6E40               	movwf	btemp+1,c
 32511  008AAA  6A41               	clrf	btemp+2,c
 32512  008AAC  0E68               	movlw	low _ARPEGGIO_RANDOM
 32513  008AAE  2440               	addwf	btemp+1,w,c
 32514  008AB0  6EE9               	movwf	fsr0l,c
 32515  008AB2  0E02               	movlw	high _ARPEGGIO_RANDOM
 32516  008AB4  2041               	addwfc	btemp+2,w,c
 32517  008AB6  6EEA               	movwf	fsr0h,c
 32518  008AB8  CFDF FFEF          	movff	indf2,indf0
 32519                           
 32520                           ;stkvar	random_pitches@i @ sp[(-2)+1]
 32521  008ABC  0EFF               	movlw	-1
 32522  008ABE  2AE3               	incf	plusw1,f,c
 32523  008AC0                     l32686:
 32524                           
 32525                           ;stkvar	random_pitches@i @ sp[(-2)+1]
 32526  008AC0  0EFF               	movlw	-1
 32527  008AC2  CFE3 F03F          	movff	plusw1,btemp
 32528  008AC6  502F               	movf	_NUM_NOTES_PRESSED,w,c
 32529  008AC8  5C3F               	subwf	btemp,w,c
 32530  008ACA  A0D8               	btfss	status,0,c
 32531  008ACC  D7D2               	goto	l32680
 32532  008ACE                     u59220:
 32533                           
 32534                           ; _random_pitches: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
 32535  008ACE  52E5               	movf	postdec1,f,c
 32536  008AD0  52E5               	movf	postdec1,f,c
 32537  008AD2  0012               	return		;funcret
 32538  008AD4                     __end_of_random_pitches:
 32539                           	opt stack 0
 32540                           tblptru	equ	0xFF8
 32541                           tblptrh	equ	0xFF7
 32542                           tblptrl	equ	0xFF6
 32543                           tablat	equ	0xFF5
 32544                           prodh	equ	0xFF4
 32545                           prodl	equ	0xFF3
 32546                           intcon	equ	0xFF2
 32547                           intcon2	equ	0xFF1
 32548                           indf0	equ	0xFEF
 32549                           postinc0	equ	0xFEE
 32550                           fsr0h	equ	0xFEA
 32551                           fsr0l	equ	0xFE9
 32552                           wreg	equ	0xFE8
 32553                           postinc1	equ	0xFE6
 32554                           postdec1	equ	0xFE5
 32555                           plusw1	equ	0xFE3
 32556                           fsr1h	equ	0xFE2
 32557                           fsr1l	equ	0xFE1
 32558                           indf2	equ	0xFDF
 32559                           postinc2	equ	0xFDE
 32560                           postdec2	equ	0xFDD
 32561                           plusw2	equ	0xFDB
 32562                           fsr2h	equ	0xFDA
 32563                           fsr2l	equ	0xFD9
 32564                           status	equ	0xFD8
 32565                           
 32566 ;; *************** function _rand *****************
 32567 ;; Defined at:
 32568 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
 32569 ;; Parameters:    Size  Location     Type
 32570 ;;		None
 32571 ;; Auto vars:     Size  Location     Type
 32572 ;;		None
 32573 ;; Return value:  Size  Location     Type
 32574 ;;                  2  [STACK] int 
 32575 ;; Registers used:
 32576 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+
      +10, btemp+11
 32577 ;; Tracked objects:
 32578 ;;		On entry : 0/0
 32579 ;;		On exit  : 0/0
 32580 ;;		Unchanged: 0/0
 32581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32586 ;;Total ram usage:        0 bytes
 32587 ;; Hardware stack levels used:    1
 32588 ;; Hardware stack levels required when called:    6
 32589 ;; This function calls:
 32590 ;;		___lmul
 32591 ;; This function is called by:
 32592 ;;		_random_pitches
 32593 ;;		_random_pitches_non_repeating
 32594 ;;		_playArpeggio
 32595 ;; This function uses a reentrant model
 32596 ;;
 32597                           
 32598                           	psect	text86
 32599  0082A6                     __ptext86:
 32600                           	opt stack 0
 32601  0082A6                     _rand:
 32602                           	opt stack 6
 32603                           
 32604                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
 32605                           ;incstack = 0
 32606  0082A6  0E6D               	movlw	109
 32607  0082A8  6EE6               	movwf	postinc1,c
 32608  0082AA  0E4E               	movlw	78
 32609  0082AC  6EE6               	movwf	postinc1,c
 32610  0082AE  0EC6               	movlw	198
 32611  0082B0  6EE6               	movwf	postinc1,c
 32612  0082B2  0E41               	movlw	65
 32613  0082B4  6EE6               	movwf	postinc1,c
 32614  0082B6  C1EF  FFE6         	movff	_randx,postinc1
 32615  0082BA  C1F0  FFE6         	movff	_randx+1,postinc1
 32616  0082BE  C1F1  FFE6         	movff	_randx+2,postinc1
 32617  0082C2  C1F2  FFE6         	movff	_randx+3,postinc1
 32618  0082C6  EC0A  F03A         	call	___lmul	;wreg free
 32619  0082CA  C03F  F1EF         	movff	btemp,_randx
 32620  0082CE  C040  F1F0         	movff	btemp+1,_randx+1
 32621  0082D2  C041  F1F1         	movff	btemp+2,_randx+2
 32622  0082D6  C042  F1F2         	movff	btemp+3,_randx+3
 32623  0082DA  0E39               	movlw	57
 32624  0082DC  0101               	movlb	1	; () banked
 32625  0082DE  27EF               	addwf	_randx& (0+255),f,b
 32626  0082E0  0E30               	movlw	48
 32627  0082E2  23F0               	addwfc	(_randx+1)& (0+255),f,b
 32628  0082E4  0E00               	movlw	0
 32629  0082E6  23F1               	addwfc	(_randx+2)& (0+255),f,b
 32630  0082E8  0E00               	movlw	0
 32631  0082EA  23F2               	addwfc	(_randx+3)& (0+255),f,b
 32632                           
 32633                           ; BSR set to: 1
 32634  0082EC  0E10               	movlw	16
 32635  0082EE  6E4A               	movwf	btemp+11,c
 32636  0082F0  C1EF  F043         	movff	_randx,btemp+4
 32637  0082F4  C1F0  F044         	movff	_randx+1,btemp+5
 32638  0082F8  C1F1  F045         	movff	_randx+2,btemp+6
 32639  0082FC  C1F2  F046         	movff	_randx+3,btemp+7
 32640  008300                     u59045:
 32641  008300  664A               	tstfsz	btemp+11,c
 32642  008302  D001               	goto	u59046
 32643  008304  D007               	goto	u59047
 32644  008306                     u59046:
 32645  008306  3446               	rlcf	btemp+7,w,c
 32646  008308  3246               	rrcf	btemp+7,f,c
 32647  00830A  3245               	rrcf	btemp+6,f,c
 32648  00830C  3244               	rrcf	btemp+5,f,c
 32649  00830E  3243               	rrcf	btemp+4,f,c
 32650  008310  2E4A               	decfsz	btemp+11,f,c
 32651  008312  D7F6               	goto	u59045
 32652  008314                     u59047:
 32653  008314  C043  F03F         	movff	btemp+4,btemp
 32654  008318  C044  F040         	movff	btemp+5,btemp+1
 32655  00831C  0EFF               	movlw	255
 32656  00831E  6E49               	movwf	btemp+10,c
 32657  008320  0E7F               	movlw	127
 32658  008322  6E4A               	movwf	btemp+11,c
 32659  008324  5049               	movf	btemp+10,w,c
 32660  008326  163F               	andwf	btemp,f,c
 32661  008328  504A               	movf	btemp+11,w,c
 32662  00832A  1640               	andwf	btemp+1,f,c
 32663                           
 32664                           ; _rand: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize 
      +                          = 0, vargsize = 0
 32665  00832C  0012               	return		;funcret
 32666  00832E                     __end_of_rand:
 32667                           	opt stack 0
 32668                           tblptru	equ	0xFF8
 32669                           tblptrh	equ	0xFF7
 32670                           tblptrl	equ	0xFF6
 32671                           tablat	equ	0xFF5
 32672                           prodh	equ	0xFF4
 32673                           prodl	equ	0xFF3
 32674                           intcon	equ	0xFF2
 32675                           intcon2	equ	0xFF1
 32676                           indf0	equ	0xFEF
 32677                           postinc0	equ	0xFEE
 32678                           fsr0h	equ	0xFEA
 32679                           fsr0l	equ	0xFE9
 32680                           wreg	equ	0xFE8
 32681                           postinc1	equ	0xFE6
 32682                           postdec1	equ	0xFE5
 32683                           plusw1	equ	0xFE3
 32684                           fsr1h	equ	0xFE2
 32685                           fsr1l	equ	0xFE1
 32686                           indf2	equ	0xFDF
 32687                           postinc2	equ	0xFDE
 32688                           postdec2	equ	0xFDD
 32689                           plusw2	equ	0xFDB
 32690                           fsr2h	equ	0xFDA
 32691                           fsr2l	equ	0xFD9
 32692                           status	equ	0xFD8
 32693                           
 32694 ;; *************** function ___awmod *****************
 32695 ;; Defined at:
 32696 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 32697 ;; Parameters:    Size  Location     Type
 32698 ;;  dividend        2  [STACK] int 
 32699 ;;  divisor         2  [STACK] int 
 32700 ;; Auto vars:     Size  Location     Type
 32701 ;;  sign            1  [STACK] unsigned char 
 32702 ;;  counter         1  [STACK] unsigned char 
 32703 ;; Return value:  Size  Location     Type
 32704 ;;                  2  [STACK] int 
 32705 ;; Registers used:
 32706 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl
 32707 ;; Tracked objects:
 32708 ;;		On entry : 0/1
 32709 ;;		On exit  : 0/0
 32710 ;;		Unchanged: 0/0
 32711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32716 ;;Total ram usage:        0 bytes
 32717 ;; Hardware stack levels used:    1
 32718 ;; Hardware stack levels required when called:    5
 32719 ;; This function calls:
 32720 ;;		Nothing
 32721 ;; This function is called by:
 32722 ;;		_processOctave
 32723 ;;		_displayDigits
 32724 ;;		_int2string
 32725 ;;		_random_pitches
 32726 ;;		_random_pitches_non_repeating
 32727 ;;		_playArpeggio
 32728 ;; This function uses a reentrant model
 32729 ;;
 32730                           
 32731                           	psect	text87
 32732  0067AE                     __ptext87:
 32733                           	opt stack 0
 32734  0067AE                     ___awmod:
 32735                           	opt stack 0
 32736                           
 32737                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
 32738  0067AE  52E6               	movf	postinc1,f,c
 32739  0067B0  52E6               	movf	postinc1,f,c
 32740                           
 32741                           ;stkvar	___awmod@sign @ sp[(-2)+0]
 32742                           
 32743                           ;incstack = 0
 32744  0067B2  0EFE               	movlw	-2
 32745  0067B4  6AE3               	clrf	plusw1,c
 32746                           
 32747                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32748  0067B6  0EFD               	movlw	-3
 32749  0067B8  AEE3               	btfss	plusw1,7,c
 32750  0067BA  D009               	goto	l32616
 32751                           
 32752                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32753                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32754  0067BC  0EFC               	movlw	-4
 32755  0067BE  6CE3               	negf	plusw1,c
 32756  0067C0  0EFD               	movlw	-3
 32757  0067C2  1EE3               	comf	plusw1,f,c
 32758  0067C4  B0D8               	btfsc	status,0,c
 32759  0067C6  2AE3               	incf	plusw1,f,c
 32760                           
 32761                           ;stkvar	___awmod@sign @ sp[(-2)+0]
 32762  0067C8  0EFE               	movlw	-2
 32763  0067CA  6AE3               	clrf	plusw1,c
 32764  0067CC  2AE3               	incf	plusw1,f,c
 32765  0067CE                     l32616:
 32766                           
 32767                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32768  0067CE  0EFB               	movlw	-5
 32769  0067D0  AEE3               	btfss	plusw1,7,c
 32770  0067D2  D006               	goto	l32620
 32771                           
 32772                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32773                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32774  0067D4  0EFA               	movlw	-6
 32775  0067D6  6CE3               	negf	plusw1,c
 32776  0067D8  0EFB               	movlw	-5
 32777  0067DA  1EE3               	comf	plusw1,f,c
 32778  0067DC  B0D8               	btfsc	status,0,c
 32779  0067DE  2AE3               	incf	plusw1,f,c
 32780  0067E0                     l32620:
 32781                           
 32782                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32783  0067E0  0EFA               	movlw	-6
 32784  0067E2  CFE3 F03F          	movff	plusw1,btemp
 32785  0067E6  0EFB               	movlw	-5
 32786  0067E8  50E3               	movf	plusw1,w,c
 32787  0067EA  103F               	iorwf	btemp,w,c
 32788  0067EC  B4D8               	btfsc	status,2,c
 32789  0067EE  D04A               	goto	u59170
 32790                           
 32791                           ;stkvar	___awmod@counter @ sp[(-2)+1]
 32792  0067F0  0EFF               	movlw	-1
 32793  0067F2  6AE3               	clrf	plusw1,c
 32794  0067F4  D010               	goto	L19
 32795  0067F6                     l32624:
 32796                           
 32797                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32798  0067F6  0EFA               	movlw	-6
 32799  0067F8  50E3               	movf	plusw1,w,c
 32800  0067FA  90D8               	bcf	status,0,c
 32801  0067FC  34E8               	rlcf	wreg,w,c
 32802  0067FE  6E3F               	movwf	btemp,c
 32803  006800  0EFA               	movlw	-6
 32804  006802  C03F  FFE3         	movff	btemp,plusw1
 32805  006806  0EFB               	movlw	-5
 32806  006808  50E3               	movf	plusw1,w,c
 32807  00680A  34E8               	rlcf	wreg,w,c
 32808  00680C  6E3F               	movwf	btemp,c
 32809  00680E  0EFB               	movlw	-5
 32810  006810  C03F  FFE3         	movff	btemp,plusw1
 32811                           
 32812                           ;stkvar	___awmod@counter @ sp[(-2)+1]
 32813  006814  0EFF               	movlw	-1
 32814  006816                     L19:
 32815  006816  2AE3               	incf	plusw1,f,c
 32816                           
 32817                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32818  006818  0EFB               	movlw	-5
 32819  00681A  AEE3               	btfss	plusw1,7,c
 32820  00681C  D7EC               	goto	l32624
 32821  00681E                     u59150:
 32822                           
 32823                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32824  00681E  0EFA               	movlw	-6
 32825  006820  CFE3 F040          	movff	plusw1,btemp+1
 32826  006824  0EFB               	movlw	-5
 32827  006826  CFE3 F041          	movff	plusw1,btemp+2
 32828                           
 32829                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32830  00682A  0EFC               	movlw	-4
 32831  00682C  CFE3 F049          	movff	plusw1,btemp+10
 32832  006830  0EFD               	movlw	-3
 32833  006832  CFE3 F04A          	movff	plusw1,btemp+11
 32834  006836  5040               	movf	btemp+1,w,c
 32835  006838  5C49               	subwf	btemp+10,w,c
 32836  00683A  5041               	movf	btemp+2,w,c
 32837  00683C  584A               	subwfb	btemp+11,w,c
 32838  00683E  A0D8               	btfss	status,0,c
 32839  006840  D012               	goto	l32634
 32840                           
 32841                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32842                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32843  006842  0EFC               	movlw	-4
 32844  006844  50E3               	movf	plusw1,w,c
 32845  006846  6E3F               	movwf	btemp,c
 32846  006848  0EFA               	movlw	-6
 32847  00684A  50E3               	movf	plusw1,w,c
 32848  00684C  5E3F               	subwf	btemp,f,c
 32849  00684E  0EFC               	movlw	-4
 32850  006850  C03F  FFE3         	movff	btemp,plusw1
 32851  006854  0EFD               	movlw	-3
 32852  006856  50E3               	movf	plusw1,w,c
 32853  006858  6E3F               	movwf	btemp,c
 32854  00685A  0EFB               	movlw	-5
 32855  00685C  50E3               	movf	plusw1,w,c
 32856  00685E  5A3F               	subwfb	btemp,f,c
 32857  006860  0EFD               	movlw	-3
 32858  006862  C03F  FFE3         	movff	btemp,plusw1
 32859  006866                     l32634:
 32860                           
 32861                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32862  006866  90D8               	bcf	status,0,c
 32863  006868  0EFB               	movlw	-5
 32864  00686A  32E3               	rrcf	plusw1,f,c
 32865  00686C  0EFA               	movlw	-6
 32866  00686E  32E3               	rrcf	plusw1,f,c
 32867                           
 32868                           ;stkvar	___awmod@counter @ sp[(-2)+1]
 32869  006870  0EFF               	movlw	-1
 32870  006872  50E3               	movf	plusw1,w,c
 32871  006874  6E3F               	movwf	btemp,c
 32872  006876  0E01               	movlw	1
 32873  006878  5E3F               	subwf	btemp,f,c
 32874  00687A  0EFF               	movlw	-1
 32875  00687C  C03F  FFE3         	movff	btemp,plusw1
 32876  006880  A4D8               	btfss	status,2,c
 32877  006882  D7CD               	goto	u59150
 32878  006884                     u59170:
 32879                           
 32880                           ;stkvar	___awmod@sign @ sp[(-2)+0]
 32881  006884  0EFE               	movlw	-2
 32882  006886  50E3               	movf	plusw1,w,c
 32883  006888  B4D8               	btfsc	status,2,c
 32884  00688A  D006               	goto	l32642
 32885                           
 32886                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32887                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32888  00688C  0EFC               	movlw	-4
 32889  00688E  6CE3               	negf	plusw1,c
 32890  006890  0EFD               	movlw	-3
 32891  006892  1EE3               	comf	plusw1,f,c
 32892  006894  B0D8               	btfsc	status,0,c
 32893  006896  2AE3               	incf	plusw1,f,c
 32894  006898                     l32642:
 32895                           
 32896                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32897  006898  0EFC               	movlw	-4
 32898  00689A  CFE3 F03F          	movff	plusw1,btemp
 32899  00689E  0EFD               	movlw	-3
 32900  0068A0  CFE3 F040          	movff	plusw1,btemp+1
 32901                           
 32902                           ; ___awmod: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
 32903  0068A4  0EFA               	movlw	250
 32904  0068A6  26E1               	addwf	fsr1l,f,c
 32905  0068A8  0EFF               	movlw	255
 32906  0068AA  22E2               	addwfc	fsr1h,f,c
 32907  0068AC  0012               	return		;funcret
 32908  0068AE                     __end_of___awmod:
 32909                           	opt stack 0
 32910                           tblptru	equ	0xFF8
 32911                           tblptrh	equ	0xFF7
 32912                           tblptrl	equ	0xFF6
 32913                           tablat	equ	0xFF5
 32914                           prodh	equ	0xFF4
 32915                           prodl	equ	0xFF3
 32916                           intcon	equ	0xFF2
 32917                           intcon2	equ	0xFF1
 32918                           indf0	equ	0xFEF
 32919                           postinc0	equ	0xFEE
 32920                           fsr0h	equ	0xFEA
 32921                           fsr0l	equ	0xFE9
 32922                           wreg	equ	0xFE8
 32923                           postinc1	equ	0xFE6
 32924                           postdec1	equ	0xFE5
 32925                           plusw1	equ	0xFE3
 32926                           fsr1h	equ	0xFE2
 32927                           fsr1l	equ	0xFE1
 32928                           indf2	equ	0xFDF
 32929                           postinc2	equ	0xFDE
 32930                           postdec2	equ	0xFDD
 32931                           plusw2	equ	0xFDB
 32932                           fsr2h	equ	0xFDA
 32933                           fsr2l	equ	0xFD9
 32934                           status	equ	0xFD8
 32935                           
 32936 ;; *************** function _copy_array *****************
 32937 ;; Defined at:
 32938 ;;		line 210 in file "arpeggio.c"
 32939 ;; Parameters:    Size  Location     Type
 32940 ;;		None
 32941 ;; Auto vars:     Size  Location     Type
 32942 ;;  i               1    0[BANK0 ] unsigned char 
 32943 ;; Return value:  Size  Location     Type
 32944 ;;                  1    wreg      void 
 32945 ;; Registers used:
 32946 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 32947 ;; Tracked objects:
 32948 ;;		On entry : 0/0
 32949 ;;		On exit  : 0/0
 32950 ;;		Unchanged: 0/0
 32951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32953 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32955 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32956 ;;Total ram usage:        1 bytes
 32957 ;; Hardware stack levels used:    1
 32958 ;; Hardware stack levels required when called:    5
 32959 ;; This function calls:
 32960 ;;		Nothing
 32961 ;; This function is called by:
 32962 ;;		_setupArpeggio
 32963 ;; This function uses a non-reentrant model
 32964 ;;
 32965                           
 32966                           	psect	text88
 32967  008E22                     __ptext88:
 32968                           	opt stack 0
 32969  008E22                     _copy_array:
 32970                           	opt stack 16
 32971                           
 32972                           ;arpeggio.c: 212: if(NUM_NOTES_PRESSED == 0){return;}
 32973                           
 32974                           ;incstack = 0
 32975  008E22  502F               	movf	_NUM_NOTES_PRESSED,w,c
 32976  008E24  B4D8               	btfsc	status,2,c
 32977  008E26  0012               	return	
 32978                           
 32979                           ;arpeggio.c: 215: for(unsigned char i = 0; i < NUM_NOTES_PRESSED; i++){
 32980  008E28  0E00               	movlw	0
 32981  008E2A  0100               	movlb	0	; () banked
 32982  008E2C  6F60               	movwf	copy_array@i& (0+255),b
 32983  008E2E  D025               	goto	l5452
 32984  008E30                     
 32985                           ; BSR set to: 0
 32986                           ;arpeggio.c: 216: ARPEGGIO_SORTED[i] = ARPEGGIO[i];
 32987                           
 32988                           ; BSR set to: 0
 32989  008E30  5160               	movf	copy_array@i& (0+255),w,b
 32990  008E32  0D01               	mullw	1
 32991  008E34  0E82               	movlw	low _ARPEGGIO
 32992  008E36  24F3               	addwf	prodl,w,c
 32993  008E38  6ED9               	movwf	fsr2l,c
 32994  008E3A  0E01               	movlw	high _ARPEGGIO
 32995  008E3C  20F4               	addwfc	prodh,w,c
 32996  008E3E  6EDA               	movwf	fsr2h,c
 32997  008E40  5160               	movf	copy_array@i& (0+255),w,b
 32998  008E42  0D01               	mullw	1
 32999  008E44  0E78               	movlw	low _ARPEGGIO_SORTED
 33000  008E46  24F3               	addwf	prodl,w,c
 33001  008E48  6EE9               	movwf	fsr0l,c
 33002  008E4A  0E02               	movlw	high _ARPEGGIO_SORTED
 33003  008E4C  20F4               	addwfc	prodh,w,c
 33004  008E4E  6EEA               	movwf	fsr0h,c
 33005  008E50  CFDF FFEF          	movff	indf2,indf0
 33006                           
 33007                           ;arpeggio.c: 217: ARPEGGIO_RANDOM[i] = ARPEGGIO[i];
 33008  008E54  5160               	movf	copy_array@i& (0+255),w,b
 33009  008E56  0D01               	mullw	1
 33010  008E58  0E82               	movlw	low _ARPEGGIO
 33011  008E5A  24F3               	addwf	prodl,w,c
 33012  008E5C  6ED9               	movwf	fsr2l,c
 33013  008E5E  0E01               	movlw	high _ARPEGGIO
 33014  008E60  20F4               	addwfc	prodh,w,c
 33015  008E62  6EDA               	movwf	fsr2h,c
 33016  008E64  5160               	movf	copy_array@i& (0+255),w,b
 33017  008E66  0D01               	mullw	1
 33018  008E68  0E68               	movlw	low _ARPEGGIO_RANDOM
 33019  008E6A  24F3               	addwf	prodl,w,c
 33020  008E6C  6EE9               	movwf	fsr0l,c
 33021  008E6E  0E02               	movlw	high _ARPEGGIO_RANDOM
 33022  008E70  20F4               	addwfc	prodh,w,c
 33023  008E72  6EEA               	movwf	fsr0h,c
 33024  008E74  CFDF FFEF          	movff	indf2,indf0
 33025                           
 33026                           ; BSR set to: 0
 33027  008E78  2B60               	incf	copy_array@i& (0+255),f,b
 33028  008E7A                     l5452:
 33029                           
 33030                           ; BSR set to: 0
 33031                           
 33032                           ; BSR set to: 0
 33033  008E7A  502F               	movf	_NUM_NOTES_PRESSED,w,c
 33034  008E7C  5D60               	subwf	copy_array@i& (0+255),w,b
 33035  008E7E  B0D8               	btfsc	status,0,c
 33036  008E80  0012               	return	
 33037  008E82  D7D6               	goto	l5453
 33038  008E84                     __end_of_copy_array:
 33039                           	opt stack 0
 33040                           tblptru	equ	0xFF8
 33041                           tblptrh	equ	0xFF7
 33042                           tblptrl	equ	0xFF6
 33043                           tablat	equ	0xFF5
 33044                           prodh	equ	0xFF4
 33045                           prodl	equ	0xFF3
 33046                           intcon	equ	0xFF2
 33047                           intcon2	equ	0xFF1
 33048                           indf0	equ	0xFEF
 33049                           postinc0	equ	0xFEE
 33050                           fsr0h	equ	0xFEA
 33051                           fsr0l	equ	0xFE9
 33052                           wreg	equ	0xFE8
 33053                           postinc1	equ	0xFE6
 33054                           postdec1	equ	0xFE5
 33055                           plusw1	equ	0xFE3
 33056                           fsr1h	equ	0xFE2
 33057                           fsr1l	equ	0xFE1
 33058                           indf2	equ	0xFDF
 33059                           postinc2	equ	0xFDE
 33060                           postdec2	equ	0xFDD
 33061                           plusw2	equ	0xFDB
 33062                           fsr2h	equ	0xFDA
 33063                           fsr2l	equ	0xFD9
 33064                           status	equ	0xFD8
 33065                           
 33066 ;; *************** function _resetArpeggio *****************
 33067 ;; Defined at:
 33068 ;;		line 162 in file "arpeggio.c"
 33069 ;; Parameters:    Size  Location     Type
 33070 ;;		None
 33071 ;; Auto vars:     Size  Location     Type
 33072 ;;		None
 33073 ;; Return value:  Size  Location     Type
 33074 ;;                  1    wreg      void 
 33075 ;; Registers used:
 33076 ;;		wreg, status,2, status,0
 33077 ;; Tracked objects:
 33078 ;;		On entry : 0/0
 33079 ;;		On exit  : 0/0
 33080 ;;		Unchanged: 0/0
 33081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33086 ;;Total ram usage:        0 bytes
 33087 ;; Hardware stack levels used:    1
 33088 ;; Hardware stack levels required when called:    5
 33089 ;; This function calls:
 33090 ;;		Nothing
 33091 ;; This function is called by:
 33092 ;;		_processOctave
 33093 ;;		_finish_arpeggio_setup
 33094 ;; This function uses a non-reentrant model
 33095 ;;
 33096                           
 33097                           	psect	text89
 33098  0093E4                     __ptext89:
 33099                           	opt stack 0
 33100  0093E4                     _resetArpeggio:
 33101                           	opt stack 20
 33102                           
 33103                           ;arpeggio.c: 164: which_note = 0;
 33104                           
 33105                           ;incstack = 0
 33106  0093E4  0E00               	movlw	0
 33107  0093E6  6E33               	movwf	_which_note,c
 33108                           
 33109                           ;arpeggio.c: 165: which_octave = 0;
 33110  0093E8  0E00               	movlw	0
 33111  0093EA  6E32               	movwf	_which_octave,c
 33112                           
 33113                           ;arpeggio.c: 166: last_note = 0;
 33114  0093EC  0E00               	movlw	0
 33115  0093EE  0100               	movlb	0	; () banked
 33116  0093F0  6FEC               	movwf	_last_note& (0+255),b
 33117                           
 33118                           ;arpeggio.c: 167: last_octave = 0;
 33119  0093F2  0E00               	movlw	0
 33120  0093F4  0101               	movlb	1	; () banked
 33121  0093F6  6F7D               	movwf	_last_octave& (0+255),b
 33122                           
 33123                           ; BSR set to: 1
 33124                           ;arpeggio.c: 168: overflow = 0;
 33125  0093F8  9602               	bcf	_overflow/(0+8),_overflow& (0+7),c
 33126                           
 33127                           ; BSR set to: 1
 33128                           ;arpeggio.c: 169: octave_overflow = 0;
 33129  0093FA  9402               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 33130                           
 33131                           ; BSR set to: 1
 33132                           ;arpeggio.c: 172: if(ARPEGGIO_TYPE == UP_DOWN && startingDirection == DOWN){
 33133  0093FC  0E02               	movlw	2
 33134  0093FE  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 33135  009400  A4D8               	btfss	status,2,c
 33136  009402  D005               	goto	l5429
 33137                           
 33138                           ; BSR set to: 1
 33139  009404  0434               	decf	_startingDirection,w,c
 33140  009406  A4D8               	btfss	status,2,c
 33141  009408  D002               	goto	l5429
 33142                           
 33143                           ; BSR set to: 1
 33144                           ;arpeggio.c: 173: ARPEGGIO_TYPE = DOWN_UP;
 33145  00940A  0E03               	movlw	3
 33146  00940C  6E35               	movwf	_ARPEGGIO_TYPE,c
 33147  00940E                     l5429:
 33148                           
 33149                           ; BSR set to: 1
 33150                           ;arpeggio.c: 174: }
 33151                           ;arpeggio.c: 176: if(ARPEGGIO_TYPE == DOWN_UP && startingDirection == UP){
 33152                           
 33153                           ; BSR set to: 1
 33154  00940E  0E03               	movlw	3
 33155  009410  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 33156  009412  A4D8               	btfss	status,2,c
 33157  009414  0012               	return	
 33158                           
 33159                           ; BSR set to: 1
 33160  009416  5034               	movf	_startingDirection,w,c
 33161  009418  A4D8               	btfss	status,2,c
 33162  00941A  0012               	return	
 33163                           
 33164                           ; BSR set to: 1
 33165                           ;arpeggio.c: 177: ARPEGGIO_TYPE = UP_DOWN;
 33166  00941C  0E02               	movlw	2
 33167  00941E  6E35               	movwf	_ARPEGGIO_TYPE,c
 33168  009420  0012               	return	
 33169  009422                     __end_of_resetArpeggio:
 33170                           	opt stack 0
 33171                           tblptru	equ	0xFF8
 33172                           tblptrh	equ	0xFF7
 33173                           tblptrl	equ	0xFF6
 33174                           tablat	equ	0xFF5
 33175                           prodh	equ	0xFF4
 33176                           prodl	equ	0xFF3
 33177                           intcon	equ	0xFF2
 33178                           intcon2	equ	0xFF1
 33179                           indf0	equ	0xFEF
 33180                           postinc0	equ	0xFEE
 33181                           fsr0h	equ	0xFEA
 33182                           fsr0l	equ	0xFE9
 33183                           wreg	equ	0xFE8
 33184                           postinc1	equ	0xFE6
 33185                           postdec1	equ	0xFE5
 33186                           plusw1	equ	0xFE3
 33187                           fsr1h	equ	0xFE2
 33188                           fsr1l	equ	0xFE1
 33189                           indf2	equ	0xFDF
 33190                           postinc2	equ	0xFDE
 33191                           postdec2	equ	0xFDD
 33192                           plusw2	equ	0xFDB
 33193                           fsr2h	equ	0xFDA
 33194                           fsr2l	equ	0xFD9
 33195                           status	equ	0xFD8
 33196                           
 33197 ;; *************** function _delete_notes_from_arpeggio *****************
 33198 ;; Defined at:
 33199 ;;		line 63 in file "arpeggio.c"
 33200 ;; Parameters:    Size  Location     Type
 33201 ;;  pitch           1    wreg     unsigned char 
 33202 ;; Auto vars:     Size  Location     Type
 33203 ;;  pitch           1    9[BANK0 ] unsigned char 
 33204 ;;  INDEX_TO_SHI    1   10[BANK0 ] char 
 33205 ;; Return value:  Size  Location     Type
 33206 ;;                  1    wreg      void 
 33207 ;; Registers used:
 33208 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33209 ;; Tracked objects:
 33210 ;;		On entry : 0/0
 33211 ;;		On exit  : 0/0
 33212 ;;		Unchanged: 0/0
 33213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33215 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33217 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33218 ;;Total ram usage:        2 bytes
 33219 ;; Hardware stack levels used:    1
 33220 ;; Hardware stack levels required when called:    6
 33221 ;; This function calls:
 33222 ;;		_findArrayIndex
 33223 ;;		_rotateArrayLeft
 33224 ;; This function is called by:
 33225 ;;		_playThisNotePentatonic
 33226 ;;		_playThisNote
 33227 ;;		_playThisNote8
 33228 ;; This function uses a non-reentrant model
 33229 ;;
 33230                           
 33231                           	psect	text90
 33232  00957E                     __ptext90:
 33233                           	opt stack 0
 33234  00957E                     _delete_notes_from_arpeggio:
 33235                           	opt stack 17
 33236                           
 33237                           ; BSR set to: 1
 33238                           ;incstack = 0
 33239                           ;delete_notes_from_arpeggio@pitch stored from wreg
 33240  00957E  0100               	movlb	0	; () banked
 33241  009580  6F69               	movwf	delete_notes_from_arpeggio@pitch& (0+255),b
 33242                           
 33243                           ;arpeggio.c: 66: signed char INDEX_TO_SHIFT_LEFT_AT = findArrayIndex(pitch);
 33244  009582  0100               	movlb	0	; () banked
 33245  009584  5169               	movf	delete_notes_from_arpeggio@pitch& (0+255),w,b
 33246  009586  EC11  F04A         	call	_findArrayIndex
 33247  00958A  0100               	movlb	0	; () banked
 33248  00958C  6F6A               	movwf	delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT& (0+255),b
 33249                           
 33250                           ; BSR set to: 0
 33251                           ;arpeggio.c: 77: rotateArrayLeft(INDEX_TO_SHIFT_LEFT_AT);
 33252  00958E  516A               	movf	delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT& (0+255),w,b
 33253  009590  ECD2  F043         	call	_rotateArrayLeft
 33254                           
 33255                           ;arpeggio.c: 80: if(NUM_NOTES_PRESSED > 0) {NUM_NOTES_PRESSED--;}
 33256  009594  502F               	movf	_NUM_NOTES_PRESSED,w,c
 33257  009596  A4D8               	btfss	status,2,c
 33258  009598  062F               	decf	_NUM_NOTES_PRESSED,f,c
 33259                           
 33260                           ;arpeggio.c: 85: if(NUM_NOTES_PRESSED == 0) {ARRAY_INDEX = 0;}
 33261  00959A  502F               	movf	_NUM_NOTES_PRESSED,w,c
 33262  00959C  A4D8               	btfss	status,2,c
 33263  00959E  D003               	goto	l5399
 33264  0095A0  0E00               	movlw	0
 33265  0095A2  0100               	movlb	0	; () banked
 33266  0095A4  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 33267  0095A6                     l5399:
 33268                           
 33269                           ;arpeggio.c: 88: if(ARRAY_INDEX > 0){ARRAY_INDEX--;}
 33270  0095A6  0100               	movlb	0	; () banked
 33271  0095A8  51EB               	movf	_ARRAY_INDEX& (0+255),w,b
 33272  0095AA  B4D8               	btfsc	status,2,c
 33273  0095AC  0012               	return	
 33274                           
 33275                           ; BSR set to: 0
 33276  0095AE  07EB               	decf	_ARRAY_INDEX& (0+255),f,b
 33277  0095B0  0012               	return	
 33278  0095B2                     __end_of_delete_notes_from_arpeggio:
 33279                           	opt stack 0
 33280                           tblptru	equ	0xFF8
 33281                           tblptrh	equ	0xFF7
 33282                           tblptrl	equ	0xFF6
 33283                           tablat	equ	0xFF5
 33284                           prodh	equ	0xFF4
 33285                           prodl	equ	0xFF3
 33286                           intcon	equ	0xFF2
 33287                           intcon2	equ	0xFF1
 33288                           indf0	equ	0xFEF
 33289                           postinc0	equ	0xFEE
 33290                           fsr0h	equ	0xFEA
 33291                           fsr0l	equ	0xFE9
 33292                           wreg	equ	0xFE8
 33293                           postinc1	equ	0xFE6
 33294                           postdec1	equ	0xFE5
 33295                           plusw1	equ	0xFE3
 33296                           fsr1h	equ	0xFE2
 33297                           fsr1l	equ	0xFE1
 33298                           indf2	equ	0xFDF
 33299                           postinc2	equ	0xFDE
 33300                           postdec2	equ	0xFDD
 33301                           plusw2	equ	0xFDB
 33302                           fsr2h	equ	0xFDA
 33303                           fsr2l	equ	0xFD9
 33304                           status	equ	0xFD8
 33305                           
 33306 ;; *************** function _findArrayIndex *****************
 33307 ;; Defined at:
 33308 ;;		line 516 in file "arpeggio.c"
 33309 ;; Parameters:    Size  Location     Type
 33310 ;;  pitch_of_key    1    wreg     unsigned char 
 33311 ;; Auto vars:     Size  Location     Type
 33312 ;;  pitch_of_key    1    1[BANK0 ] unsigned char 
 33313 ;;  i               1    2[BANK0 ] unsigned char 
 33314 ;; Return value:  Size  Location     Type
 33315 ;;                  1    wreg      char 
 33316 ;; Registers used:
 33317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 33318 ;; Tracked objects:
 33319 ;;		On entry : 0/0
 33320 ;;		On exit  : 0/0
 33321 ;;		Unchanged: 0/0
 33322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33324 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33325 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33326 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33327 ;;Total ram usage:        3 bytes
 33328 ;; Hardware stack levels used:    1
 33329 ;; Hardware stack levels required when called:    5
 33330 ;; This function calls:
 33331 ;;		Nothing
 33332 ;; This function is called by:
 33333 ;;		_delete_notes_from_arpeggio
 33334 ;; This function uses a non-reentrant model
 33335 ;;
 33336                           
 33337                           	psect	text91
 33338  009422                     __ptext91:
 33339                           	opt stack 0
 33340  009422                     _findArrayIndex:
 33341                           	opt stack 17
 33342                           
 33343                           ; BSR set to: 0
 33344                           ;incstack = 0
 33345                           ;findArrayIndex@pitch_of_key_release stored from wreg
 33346  009422  0100               	movlb	0	; () banked
 33347  009424  6F61               	movwf	findArrayIndex@pitch_of_key_release& (0+255),b
 33348                           
 33349                           ;arpeggio.c: 518: for (unsigned char i=0;i<MAX_NUM_NOTES;i++){
 33350  009426  0E00               	movlw	0
 33351  009428  0100               	movlb	0	; () banked
 33352  00942A  6F62               	movwf	findArrayIndex@i& (0+255),b
 33353  00942C                     l26274:
 33354                           
 33355                           ; BSR set to: 0
 33356  00942C  0E9D               	movlw	low _MAX_NUM_NOTES
 33357  00942E  6EF6               	movwf	tblptrl,c
 33358  009430                     	if	1	;There is more than 1 active tblptr byte
 33359  009430  0EF3               	movlw	high _MAX_NUM_NOTES
 33360  009432  6EF7               	movwf	tblptrh,c
 33361  009434                     	endif
 33362  009434                     	if	0	;There are less than 3 active tblptr bytes
 33363  009434                     	endif
 33364  009434  0009               	tblrd		*+
 33365  009436  50F5               	movf	tablat,w,c
 33366  009438  5D62               	subwf	findArrayIndex@i& (0+255),w,b
 33367  00943A  B0D8               	btfsc	status,0,c
 33368  00943C  0012               	return	
 33369                           
 33370                           ; BSR set to: 0
 33371                           ;arpeggio.c: 519: if(ARPEGGIO[i] == pitch_of_key_release){return i;}
 33372                           
 33373                           ; BSR set to: 0
 33374                           
 33375                           ; BSR set to: 0
 33376  00943E  5162               	movf	findArrayIndex@i& (0+255),w,b
 33377  009440  0D01               	mullw	1
 33378  009442  0E82               	movlw	low _ARPEGGIO
 33379  009444  24F3               	addwf	prodl,w,c
 33380  009446  6ED9               	movwf	fsr2l,c
 33381  009448  0E01               	movlw	high _ARPEGGIO
 33382  00944A  20F4               	addwfc	prodh,w,c
 33383  00944C  6EDA               	movwf	fsr2h,c
 33384  00944E  5161               	movf	findArrayIndex@pitch_of_key_release& (0+255),w,b
 33385  009450  18DE               	xorwf	postinc2,w,c
 33386  009452  A4D8               	btfss	status,2,c
 33387  009454  D002               	goto	l26284
 33388                           
 33389                           ; BSR set to: 0
 33390  009456  5162               	movf	findArrayIndex@i& (0+255),w,b
 33391                           
 33392                           ; BSR set to: 0
 33393  009458  0012               	return	
 33394  00945A                     l26284:
 33395                           
 33396                           ; BSR set to: 0
 33397                           
 33398                           ; BSR set to: 0
 33399                           
 33400                           ;arpeggio.c: 520: else{;}
 33401                           
 33402                           ; BSR set to: 0
 33403                           
 33404                           ; BSR set to: 0
 33405  00945A  2B62               	incf	findArrayIndex@i& (0+255),f,b
 33406  00945C  D7E7               	goto	l26274
 33407  00945E                     __end_of_findArrayIndex:
 33408                           	opt stack 0
 33409                           tblptru	equ	0xFF8
 33410                           tblptrh	equ	0xFF7
 33411                           tblptrl	equ	0xFF6
 33412                           tablat	equ	0xFF5
 33413                           prodh	equ	0xFF4
 33414                           prodl	equ	0xFF3
 33415                           intcon	equ	0xFF2
 33416                           intcon2	equ	0xFF1
 33417                           indf0	equ	0xFEF
 33418                           postinc0	equ	0xFEE
 33419                           fsr0h	equ	0xFEA
 33420                           fsr0l	equ	0xFE9
 33421                           wreg	equ	0xFE8
 33422                           postinc1	equ	0xFE6
 33423                           postdec1	equ	0xFE5
 33424                           plusw1	equ	0xFE3
 33425                           fsr1h	equ	0xFE2
 33426                           fsr1l	equ	0xFE1
 33427                           indf2	equ	0xFDF
 33428                           postinc2	equ	0xFDE
 33429                           postdec2	equ	0xFDD
 33430                           plusw2	equ	0xFDB
 33431                           fsr2h	equ	0xFDA
 33432                           fsr2l	equ	0xFD9
 33433                           status	equ	0xFD8
 33434                           
 33435 ;; *************** function _add_notes_to_arpeggio *****************
 33436 ;; Defined at:
 33437 ;;		line 39 in file "arpeggio.c"
 33438 ;; Parameters:    Size  Location     Type
 33439 ;;  pitch           1    wreg     unsigned char 
 33440 ;; Auto vars:     Size  Location     Type
 33441 ;;  pitch           1   16[BANK0 ] unsigned char 
 33442 ;; Return value:  Size  Location     Type
 33443 ;;                  1    wreg      void 
 33444 ;; Registers used:
 33445 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33446 ;; Tracked objects:
 33447 ;;		On entry : 0/0
 33448 ;;		On exit  : 0/0
 33449 ;;		Unchanged: 0/0
 33450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33452 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33453 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33454 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33455 ;;Total ram usage:        8 bytes
 33456 ;; Hardware stack levels used:    1
 33457 ;; Hardware stack levels required when called:    6
 33458 ;; This function calls:
 33459 ;;		_rotateArrayLeft
 33460 ;; This function is called by:
 33461 ;;		_playThisNotePentatonic
 33462 ;;		_playThisNote
 33463 ;;		_playThisNote8
 33464 ;; This function uses a non-reentrant model
 33465 ;;
 33466                           
 33467                           	psect	text92
 33468  0068AE                     __ptext92:
 33469                           	opt stack 0
 33470  0068AE                     _add_notes_to_arpeggio:
 33471                           	opt stack 17
 33472                           
 33473                           ; BSR set to: 0
 33474                           ;incstack = 0
 33475                           ;add_notes_to_arpeggio@pitch stored from wreg
 33476  0068AE  0100               	movlb	0	; () banked
 33477  0068B0  6F70               	movwf	add_notes_to_arpeggio@pitch& (0+255),b
 33478                           
 33479                           ;arpeggio.c: 43: if(ARRAY_INDEX > (MAX_NUM_NOTES - 1)){
 33480  0068B2  0100               	movlb	0	; () banked
 33481  0068B4  51EB               	movf	_ARRAY_INDEX& (0+255),w,b
 33482  0068B6  6F69               	movwf	??_add_notes_to_arpeggio& (0+255),b
 33483  0068B8  6B6A               	clrf	(??_add_notes_to_arpeggio+1)& (0+255),b
 33484  0068BA  0EFF               	movlw	255
 33485  0068BC  6F6B               	movwf	(??_add_notes_to_arpeggio+2)& (0+255),b
 33486  0068BE  0EFF               	movlw	255
 33487  0068C0  6F6C               	movwf	(??_add_notes_to_arpeggio+3)& (0+255),b
 33488  0068C2  0E9D               	movlw	low _MAX_NUM_NOTES
 33489  0068C4  6EF6               	movwf	tblptrl,c
 33490  0068C6                     	if	1	;There is more than 1 active tblptr byte
 33491  0068C6  0EF3               	movlw	high _MAX_NUM_NOTES
 33492  0068C8  6EF7               	movwf	tblptrh,c
 33493  0068CA                     	endif
 33494  0068CA                     	if	0	;There are less than 3 active tblptr bytes
 33495  0068CA                     	endif
 33496  0068CA  0008               	tblrd		*
 33497  0068CC  50F5               	movf	tablat,w,c
 33498  0068CE  6F6D               	movwf	(??_add_notes_to_arpeggio+4)& (0+255),b
 33499  0068D0  6B6E               	clrf	(??_add_notes_to_arpeggio+5)& (0+255),b
 33500  0068D2  516B               	movf	(??_add_notes_to_arpeggio+2)& (0+255),w,b
 33501  0068D4  276D               	addwf	(??_add_notes_to_arpeggio+4)& (0+255),f,b
 33502  0068D6  516C               	movf	(??_add_notes_to_arpeggio+3)& (0+255),w,b
 33503  0068D8  236E               	addwfc	(??_add_notes_to_arpeggio+5)& (0+255),f,b
 33504  0068DA  5169               	movf	??_add_notes_to_arpeggio& (0+255),w,b
 33505  0068DC  5D6D               	subwf	(??_add_notes_to_arpeggio+4)& (0+255),w,b
 33506  0068DE  516E               	movf	(??_add_notes_to_arpeggio+5)& (0+255),w,b
 33507  0068E0  0A80               	xorlw	128
 33508  0068E2  6F6F               	movwf	(??_add_notes_to_arpeggio+6)& (0+255),b
 33509  0068E4  516A               	movf	(??_add_notes_to_arpeggio+1)& (0+255),w,b
 33510  0068E6  0A80               	xorlw	128
 33511  0068E8  596F               	subwfb	(??_add_notes_to_arpeggio+6)& (0+255),w,b
 33512  0068EA  B0D8               	btfsc	status,0,c
 33513  0068EC  D025               	goto	l5392
 33514                           
 33515                           ; BSR set to: 0
 33516                           ;arpeggio.c: 44: ARRAY_INDEX = MAX_NUM_NOTES - 1;
 33517  0068EE  0E9D               	movlw	low _MAX_NUM_NOTES
 33518  0068F0  6EF6               	movwf	tblptrl,c
 33519  0068F2                     	if	1	;There is more than 1 active tblptr byte
 33520  0068F2  0EF3               	movlw	high _MAX_NUM_NOTES
 33521  0068F4  6EF7               	movwf	tblptrh,c
 33522  0068F6                     	endif
 33523  0068F6                     	if	0	;There are less than 3 active tblptr bytes
 33524  0068F6                     	endif
 33525  0068F6  0008               	tblrd		*
 33526  0068F8  CFF5 F069          	movff	tablat,??_add_notes_to_arpeggio
 33527  0068FC  0569               	decf	??_add_notes_to_arpeggio& (0+255),w,b
 33528  0068FE  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 33529                           
 33530                           ; BSR set to: 0
 33531                           ;arpeggio.c: 45: rotateArrayLeft(0);
 33532  006900  0E00               	movlw	0
 33533  006902  ECD2  F043         	call	_rotateArrayLeft
 33534                           
 33535                           ;arpeggio.c: 46: ARPEGGIO[MAX_NUM_NOTES - 1] = pitch;
 33536  006906  0EFF               	movlw	255
 33537  006908  0100               	movlb	0	; () banked
 33538  00690A  6F69               	movwf	??_add_notes_to_arpeggio& (0+255),b
 33539  00690C  0EFF               	movlw	255
 33540  00690E  6F6A               	movwf	(??_add_notes_to_arpeggio+1)& (0+255),b
 33541  006910  0E9D               	movlw	low _MAX_NUM_NOTES
 33542  006912  6EF6               	movwf	tblptrl,c
 33543  006914                     	if	1	;There is more than 1 active tblptr byte
 33544  006914  0EF3               	movlw	high _MAX_NUM_NOTES
 33545  006916  6EF7               	movwf	tblptrh,c
 33546  006918                     	endif
 33547  006918                     	if	0	;There are less than 3 active tblptr bytes
 33548  006918                     	endif
 33549  006918  0008               	tblrd		*
 33550  00691A  50F5               	movf	tablat,w,c
 33551  00691C  6F6B               	movwf	(??_add_notes_to_arpeggio+2)& (0+255),b
 33552  00691E  6B6C               	clrf	(??_add_notes_to_arpeggio+3)& (0+255),b
 33553  006920  5169               	movf	??_add_notes_to_arpeggio& (0+255),w,b
 33554  006922  276B               	addwf	(??_add_notes_to_arpeggio+2)& (0+255),f,b
 33555  006924  516A               	movf	(??_add_notes_to_arpeggio+1)& (0+255),w,b
 33556  006926  236C               	addwfc	(??_add_notes_to_arpeggio+3)& (0+255),f,b
 33557  006928  0E82               	movlw	low _ARPEGGIO
 33558  00692A  256B               	addwf	(??_add_notes_to_arpeggio+2)& (0+255),w,b
 33559  00692C  6ED9               	movwf	fsr2l,c
 33560  00692E  0E01               	movlw	high _ARPEGGIO
 33561  006930  216C               	addwfc	(??_add_notes_to_arpeggio+3)& (0+255),w,b
 33562  006932  6EDA               	movwf	fsr2h,c
 33563  006934  C070  FFDF         	movff	add_notes_to_arpeggio@pitch,indf2
 33564  006938                     l5392:
 33565                           
 33566                           ; BSR set to: 0
 33567                           ;arpeggio.c: 47: }
 33568                           ;arpeggio.c: 49: if(ARRAY_INDEX <= (MAX_NUM_NOTES - 1)){
 33569                           
 33570                           ; BSR set to: 0
 33571  006938  51EB               	movf	_ARRAY_INDEX& (0+255),w,b
 33572  00693A  6F69               	movwf	??_add_notes_to_arpeggio& (0+255),b
 33573  00693C  6B6A               	clrf	(??_add_notes_to_arpeggio+1)& (0+255),b
 33574  00693E  0EFF               	movlw	255
 33575  006940  6F6B               	movwf	(??_add_notes_to_arpeggio+2)& (0+255),b
 33576  006942  0EFF               	movlw	255
 33577  006944  6F6C               	movwf	(??_add_notes_to_arpeggio+3)& (0+255),b
 33578  006946  0E9D               	movlw	low _MAX_NUM_NOTES
 33579  006948  6EF6               	movwf	tblptrl,c
 33580  00694A                     	if	1	;There is more than 1 active tblptr byte
 33581  00694A  0EF3               	movlw	high _MAX_NUM_NOTES
 33582  00694C  6EF7               	movwf	tblptrh,c
 33583  00694E                     	endif
 33584  00694E                     	if	0	;There are less than 3 active tblptr bytes
 33585  00694E                     	endif
 33586  00694E  0008               	tblrd		*
 33587  006950  50F5               	movf	tablat,w,c
 33588  006952  6F6D               	movwf	(??_add_notes_to_arpeggio+4)& (0+255),b
 33589  006954  6B6E               	clrf	(??_add_notes_to_arpeggio+5)& (0+255),b
 33590  006956  516B               	movf	(??_add_notes_to_arpeggio+2)& (0+255),w,b
 33591  006958  276D               	addwf	(??_add_notes_to_arpeggio+4)& (0+255),f,b
 33592  00695A  516C               	movf	(??_add_notes_to_arpeggio+3)& (0+255),w,b
 33593  00695C  236E               	addwfc	(??_add_notes_to_arpeggio+5)& (0+255),f,b
 33594  00695E  5169               	movf	??_add_notes_to_arpeggio& (0+255),w,b
 33595  006960  5D6D               	subwf	(??_add_notes_to_arpeggio+4)& (0+255),w,b
 33596  006962  516E               	movf	(??_add_notes_to_arpeggio+5)& (0+255),w,b
 33597  006964  0A80               	xorlw	128
 33598  006966  6F6F               	movwf	(??_add_notes_to_arpeggio+6)& (0+255),b
 33599  006968  516A               	movf	(??_add_notes_to_arpeggio+1)& (0+255),w,b
 33600  00696A  0A80               	xorlw	128
 33601  00696C  596F               	subwfb	(??_add_notes_to_arpeggio+6)& (0+255),w,b
 33602  00696E  A0D8               	btfss	status,0,c
 33603  006970  D00B               	goto	l5393
 33604                           
 33605                           ; BSR set to: 0
 33606                           ;arpeggio.c: 51: ARPEGGIO[ARRAY_INDEX] = pitch;
 33607  006972  51EB               	movf	_ARRAY_INDEX& (0+255),w,b
 33608  006974  0D01               	mullw	1
 33609  006976  0E82               	movlw	low _ARPEGGIO
 33610  006978  24F3               	addwf	prodl,w,c
 33611  00697A  6ED9               	movwf	fsr2l,c
 33612  00697C  0E01               	movlw	high _ARPEGGIO
 33613  00697E  20F4               	addwfc	prodh,w,c
 33614  006980  6EDA               	movwf	fsr2h,c
 33615  006982  C070  FFDF         	movff	add_notes_to_arpeggio@pitch,indf2
 33616                           
 33617                           ; BSR set to: 0
 33618                           ;arpeggio.c: 53: ARRAY_INDEX++;
 33619  006986  2BEB               	incf	_ARRAY_INDEX& (0+255),f,b
 33620  006988                     l5393:
 33621                           
 33622                           ; BSR set to: 0
 33623                           ;arpeggio.c: 54: }
 33624                           ;arpeggio.c: 57: NUM_NOTES_PRESSED++;
 33625                           
 33626                           ; BSR set to: 0
 33627  006988  2A2F               	incf	_NUM_NOTES_PRESSED,f,c
 33628                           
 33629                           ; BSR set to: 0
 33630                           ;arpeggio.c: 59: if(NUM_NOTES_PRESSED > MAX_NUM_NOTES){NUM_NOTES_PRESSED = MAX_NUM_NOTES
      +                          ;}
 33631  00698A  0E9D               	movlw	low _MAX_NUM_NOTES
 33632  00698C  6EF6               	movwf	tblptrl,c
 33633  00698E                     	if	1	;There is more than 1 active tblptr byte
 33634  00698E  0EF3               	movlw	high _MAX_NUM_NOTES
 33635  006990  6EF7               	movwf	tblptrh,c
 33636  006992                     	endif
 33637  006992                     	if	0	;There are less than 3 active tblptr bytes
 33638  006992                     	endif
 33639  006992  502F               	movf	_NUM_NOTES_PRESSED,w,c
 33640  006994  0009               	tblrd		*+
 33641  006996  5CF5               	subwf	tablat,w,c
 33642  006998  B0D8               	btfsc	status,0,c
 33643  00699A  0012               	return	
 33644                           
 33645                           ; BSR set to: 0
 33646  00699C  0E9D               	movlw	low _MAX_NUM_NOTES
 33647  00699E  6EF6               	movwf	tblptrl,c
 33648  0069A0                     	if	1	;There is more than 1 active tblptr byte
 33649  0069A0  0EF3               	movlw	high _MAX_NUM_NOTES
 33650  0069A2  6EF7               	movwf	tblptrh,c
 33651  0069A4                     	endif
 33652  0069A4                     	if	0	;There are less than 3 active tblptr bytes
 33653  0069A4                     	endif
 33654  0069A4  0008               	tblrd		*
 33655  0069A6  CFF5 F02F          	movff	tablat,_NUM_NOTES_PRESSED
 33656  0069AA  0012               	return	
 33657  0069AC                     __end_of_add_notes_to_arpeggio:
 33658                           	opt stack 0
 33659                           tblptru	equ	0xFF8
 33660                           tblptrh	equ	0xFF7
 33661                           tblptrl	equ	0xFF6
 33662                           tablat	equ	0xFF5
 33663                           prodh	equ	0xFF4
 33664                           prodl	equ	0xFF3
 33665                           intcon	equ	0xFF2
 33666                           intcon2	equ	0xFF1
 33667                           indf0	equ	0xFEF
 33668                           postinc0	equ	0xFEE
 33669                           fsr0h	equ	0xFEA
 33670                           fsr0l	equ	0xFE9
 33671                           wreg	equ	0xFE8
 33672                           postinc1	equ	0xFE6
 33673                           postdec1	equ	0xFE5
 33674                           plusw1	equ	0xFE3
 33675                           fsr1h	equ	0xFE2
 33676                           fsr1l	equ	0xFE1
 33677                           indf2	equ	0xFDF
 33678                           postinc2	equ	0xFDE
 33679                           postdec2	equ	0xFDD
 33680                           plusw2	equ	0xFDB
 33681                           fsr2h	equ	0xFDA
 33682                           fsr2l	equ	0xFD9
 33683                           status	equ	0xFD8
 33684                           
 33685 ;; *************** function _rotateArrayLeft *****************
 33686 ;; Defined at:
 33687 ;;		line 584 in file "arpeggio.c"
 33688 ;; Parameters:    Size  Location     Type
 33689 ;;  array_index     1    wreg     unsigned char 
 33690 ;; Auto vars:     Size  Location     Type
 33691 ;;  array_index     1    7[BANK0 ] unsigned char 
 33692 ;;  i               1    8[BANK0 ] unsigned char 
 33693 ;; Return value:  Size  Location     Type
 33694 ;;                  1    wreg      void 
 33695 ;; Registers used:
 33696 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 33697 ;; Tracked objects:
 33698 ;;		On entry : 0/0
 33699 ;;		On exit  : 0/0
 33700 ;;		Unchanged: 0/0
 33701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33703 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33704 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33705 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33706 ;;Total ram usage:        9 bytes
 33707 ;; Hardware stack levels used:    1
 33708 ;; Hardware stack levels required when called:    5
 33709 ;; This function calls:
 33710 ;;		Nothing
 33711 ;; This function is called by:
 33712 ;;		_add_notes_to_arpeggio
 33713 ;;		_delete_notes_from_arpeggio
 33714 ;; This function uses a non-reentrant model
 33715 ;;
 33716                           
 33717                           	psect	text93
 33718  0087A4                     __ptext93:
 33719                           	opt stack 0
 33720  0087A4                     _rotateArrayLeft:
 33721                           	opt stack 17
 33722                           
 33723                           ; BSR set to: 0
 33724                           ;incstack = 0
 33725                           ;rotateArrayLeft@array_index stored from wreg
 33726  0087A4  0100               	movlb	0	; () banked
 33727  0087A6  6F67               	movwf	rotateArrayLeft@array_index& (0+255),b
 33728                           
 33729                           ;arpeggio.c: 607: for(unsigned char i=array_index; i < (MAX_NUM_NOTES - 1) ;i++)
 33730  0087A8  C067  F068         	movff	rotateArrayLeft@array_index,rotateArrayLeft@i
 33731  0087AC  0EFF               	movlw	255
 33732  0087AE  0100               	movlb	0	; () banked
 33733  0087B0  6F60               	movwf	??_rotateArrayLeft& (0+255),b
 33734  0087B2  0EFF               	movlw	255
 33735  0087B4  6F61               	movwf	(??_rotateArrayLeft+1)& (0+255),b
 33736  0087B6  0E9D               	movlw	low _MAX_NUM_NOTES
 33737  0087B8  6EF6               	movwf	tblptrl,c
 33738  0087BA                     	if	1	;There is more than 1 active tblptr byte
 33739  0087BA  0EF3               	movlw	high _MAX_NUM_NOTES
 33740  0087BC  6EF7               	movwf	tblptrh,c
 33741  0087BE                     	endif
 33742  0087BE                     	if	0	;There are less than 3 active tblptr bytes
 33743  0087BE                     	endif
 33744  0087BE  0008               	tblrd		*
 33745  0087C0  50F5               	movf	tablat,w,c
 33746  0087C2  6F62               	movwf	(??_rotateArrayLeft+2)& (0+255),b
 33747  0087C4  6B63               	clrf	(??_rotateArrayLeft+3)& (0+255),b
 33748  0087C6  5160               	movf	??_rotateArrayLeft& (0+255),w,b
 33749  0087C8  2762               	addwf	(??_rotateArrayLeft+2)& (0+255),f,b
 33750  0087CA  5161               	movf	(??_rotateArrayLeft+1)& (0+255),w,b
 33751  0087CC  2363               	addwfc	(??_rotateArrayLeft+3)& (0+255),f,b
 33752  0087CE  5168               	movf	rotateArrayLeft@i& (0+255),w,b
 33753  0087D0  6F64               	movwf	(??_rotateArrayLeft+4)& (0+255),b
 33754  0087D2  6B65               	clrf	(??_rotateArrayLeft+5)& (0+255),b
 33755  0087D4  5162               	movf	(??_rotateArrayLeft+2)& (0+255),w,b
 33756  0087D6  5D64               	subwf	(??_rotateArrayLeft+4)& (0+255),w,b
 33757  0087D8  5165               	movf	(??_rotateArrayLeft+5)& (0+255),w,b
 33758  0087DA  0A80               	xorlw	128
 33759  0087DC  6F66               	movwf	(??_rotateArrayLeft+6)& (0+255),b
 33760  0087DE  5163               	movf	(??_rotateArrayLeft+3)& (0+255),w,b
 33761  0087E0  0A80               	xorlw	128
 33762  0087E2  5966               	subwfb	(??_rotateArrayLeft+6)& (0+255),w,b
 33763  0087E4  B0D8               	btfsc	status,0,c
 33764  0087E6  0012               	return	
 33765                           
 33766                           ; BSR set to: 0
 33767                           ;arpeggio.c: 608: {
 33768                           ;arpeggio.c: 609: ARPEGGIO[i]=ARPEGGIO[i+1];
 33769                           
 33770                           ; BSR set to: 0
 33771                           
 33772                           ; BSR set to: 0
 33773  0087E8  5168               	movf	rotateArrayLeft@i& (0+255),w,b
 33774  0087EA  6F60               	movwf	??_rotateArrayLeft& (0+255),b
 33775  0087EC  6B61               	clrf	(??_rotateArrayLeft+1)& (0+255),b
 33776  0087EE  0E01               	movlw	1
 33777  0087F0  2760               	addwf	??_rotateArrayLeft& (0+255),f,b
 33778  0087F2  0E00               	movlw	0
 33779  0087F4  2361               	addwfc	(??_rotateArrayLeft+1)& (0+255),f,b
 33780  0087F6  0E82               	movlw	low _ARPEGGIO
 33781  0087F8  2560               	addwf	??_rotateArrayLeft& (0+255),w,b
 33782  0087FA  6ED9               	movwf	fsr2l,c
 33783  0087FC  0E01               	movlw	high _ARPEGGIO
 33784  0087FE  2161               	addwfc	(??_rotateArrayLeft+1)& (0+255),w,b
 33785  008800  6EDA               	movwf	fsr2h,c
 33786  008802  5168               	movf	rotateArrayLeft@i& (0+255),w,b
 33787  008804  0D01               	mullw	1
 33788  008806  0E82               	movlw	low _ARPEGGIO
 33789  008808  24F3               	addwf	prodl,w,c
 33790  00880A  6EE9               	movwf	fsr0l,c
 33791  00880C  0E01               	movlw	high _ARPEGGIO
 33792  00880E  20F4               	addwfc	prodh,w,c
 33793  008810  6EEA               	movwf	fsr0h,c
 33794  008812  CFDF FFEF          	movff	indf2,indf0
 33795                           
 33796                           ; BSR set to: 0
 33797  008816  2B68               	incf	rotateArrayLeft@i& (0+255),f,b
 33798                           
 33799                           ; BSR set to: 0
 33800  008818  0EFF               	movlw	255
 33801  00881A  D7CA               	goto	L20
 33802  00881C                     __end_of_rotateArrayLeft:
 33803                           	opt stack 0
 33804                           tblptru	equ	0xFF8
 33805                           tblptrh	equ	0xFF7
 33806                           tblptrl	equ	0xFF6
 33807                           tablat	equ	0xFF5
 33808                           prodh	equ	0xFF4
 33809                           prodl	equ	0xFF3
 33810                           intcon	equ	0xFF2
 33811                           intcon2	equ	0xFF1
 33812                           indf0	equ	0xFEF
 33813                           postinc0	equ	0xFEE
 33814                           fsr0h	equ	0xFEA
 33815                           fsr0l	equ	0xFE9
 33816                           wreg	equ	0xFE8
 33817                           postinc1	equ	0xFE6
 33818                           postdec1	equ	0xFE5
 33819                           plusw1	equ	0xFE3
 33820                           fsr1h	equ	0xFE2
 33821                           fsr1l	equ	0xFE1
 33822                           indf2	equ	0xFDF
 33823                           postinc2	equ	0xFDE
 33824                           postdec2	equ	0xFDD
 33825                           plusw2	equ	0xFDB
 33826                           fsr2h	equ	0xFDA
 33827                           fsr2l	equ	0xFD9
 33828                           status	equ	0xFD8
 33829                           
 33830 ;; *************** function _processDrumpad *****************
 33831 ;; Defined at:
 33832 ;;		line 21 in file "drum.c"
 33833 ;; Parameters:    Size  Location     Type
 33834 ;;		None
 33835 ;; Auto vars:     Size  Location     Type
 33836 ;;		None
 33837 ;; Return value:  Size  Location     Type
 33838 ;;                  1    wreg      void 
 33839 ;; Registers used:
 33840 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
 33841 ;; Tracked objects:
 33842 ;;		On entry : 0/0
 33843 ;;		On exit  : 0/0
 33844 ;;		Unchanged: 0/0
 33845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33850 ;;Total ram usage:        0 bytes
 33851 ;; Hardware stack levels used:    1
 33852 ;; Hardware stack levels required when called:    9
 33853 ;; This function calls:
 33854 ;;		_controlChange
 33855 ;;		_noteOffDrum
 33856 ;;		_noteOnDrum
 33857 ;; This function is called by:
 33858 ;;		_digitalInputs
 33859 ;; This function uses a non-reentrant model
 33860 ;;
 33861                           
 33862                           	psect	text94
 33863  001C7C                     __ptext94:
 33864                           	opt stack 0
 33865  001C7C                     _processDrumpad:
 33866                           	opt stack 17
 33867                           
 33868                           ;drum.c: 25: if((drum_button_state_now & 0x01) && !(button_state_now & 0x08000000) && !d
      +                          rum.SW1){
 33869                           
 33870                           ; BSR set to: 0
 33871                           ;incstack = 0
 33872  001C7C  A039               	btfss	_drum_button_state_now,0,c
 33873  001C7E  D034               	goto	l2368
 33874  001C80  0100               	movlb	0	; () banked
 33875  001C82  A7DB               	btfss	(_button_state_now+3)& (0+255),3,b
 33876                           
 33877                           ; BSR set to: 0
 33878  001C84  B037               	btfsc	_drum,0,c
 33879  001C86  D030               	goto	l2368
 33880                           
 33881                           ; BSR set to: 0
 33882                           ;drum.c: 26: drum.SW1 = 1;
 33883  001C88  8037               	bsf	_drum,0,c
 33884                           
 33885                           ;drum.c: 27: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[0],velocity);}
 33886  001C8A  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 33887  001C8C  D007               	goto	l2369
 33888                           
 33889                           ; BSR set to: 0
 33890  001C8E  C1E7  F060         	movff	_DRUM_NOTE,noteOnDrum@pitch
 33891  001C92  C051  F061         	movff	_velocity,noteOnDrum@velocity
 33892  001C96  5052               	movf	_drumchannel,w,c
 33893  001C98  EC58  F048         	call	_noteOnDrum
 33894  001C9C                     l2369:
 33895                           
 33896                           ;drum.c: 28: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[0], 
      +                          127);}
 33897  001C9C  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 33898  001C9E  AA01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 33899  001CA0  D008               	goto	l2370
 33900  001CA2  C0F5  F060         	movff	_DRUM_CC,controlChange@controllerNumber
 33901  001CA6  0E7F               	movlw	127
 33902  001CA8  0100               	movlb	0	; () banked
 33903  001CAA  6F61               	movwf	controlChange@value& (0+255),b
 33904  001CAC  503E               	movf	_channel,w,c
 33905  001CAE  EC2C  F048         	call	_controlChange
 33906  001CB2                     l2370:
 33907                           
 33908                           ;drum.c: 29: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 0) {controlChan
      +                          ge(channel,DRUM_CC[0], 127);}
 33909  001CB2  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 33910  001CB4  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 33911  001CB6  D00A               	goto	l2371
 33912  001CB8  B02D               	btfsc	_toggle_state,0,c
 33913  001CBA  D008               	goto	l2371
 33914  001CBC  C0F5  F060         	movff	_DRUM_CC,controlChange@controllerNumber
 33915  001CC0  0E7F               	movlw	127
 33916  001CC2  0100               	movlb	0	; () banked
 33917  001CC4  6F61               	movwf	controlChange@value& (0+255),b
 33918  001CC6  503E               	movf	_channel,w,c
 33919  001CC8  EC2C  F048         	call	_controlChange
 33920  001CCC                     l2371:
 33921                           
 33922                           ;drum.c: 30: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 1) {controlChan
      +                          ge(channel,DRUM_CC[0], 0);}
 33923  001CCC  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 33924  001CCE  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 33925  001CD0  D00A               	goto	l2372
 33926  001CD2  A02D               	btfss	_toggle_state,0,c
 33927  001CD4  D008               	goto	l2372
 33928  001CD6  C0F5  F060         	movff	_DRUM_CC,controlChange@controllerNumber
 33929  001CDA  0E00               	movlw	0
 33930  001CDC  0100               	movlb	0	; () banked
 33931  001CDE  6F61               	movwf	controlChange@value& (0+255),b
 33932  001CE0  503E               	movf	_channel,w,c
 33933  001CE2  EC2C  F048         	call	_controlChange
 33934  001CE6                     l2372:
 33935                           
 33936                           ;drum.c: 31: toggle_state.T1 ^= 1;
 33937  001CE6  702D               	btg	_toggle_state,0,c
 33938  001CE8                     l2368:
 33939                           
 33940                           ;drum.c: 32: }
 33941                           ;drum.c: 33: if(((drum_button_state_now) & 0x02) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW2) {
 33942  001CE8  A239               	btfss	_drum_button_state_now,1,c
 33943  001CEA  D034               	goto	l2373
 33944  001CEC  0100               	movlb	0	; () banked
 33945  001CEE  A7DB               	btfss	(_button_state_now+3)& (0+255),3,b
 33946                           
 33947                           ; BSR set to: 0
 33948  001CF0  B237               	btfsc	_drum,1,c
 33949  001CF2  D030               	goto	l2373
 33950                           
 33951                           ; BSR set to: 0
 33952                           ;drum.c: 34: drum.SW2 = 1;
 33953  001CF4  8237               	bsf	_drum,1,c
 33954                           
 33955                           ;drum.c: 35: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[1],velocity);}
 33956  001CF6  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 33957  001CF8  D007               	goto	l2374
 33958                           
 33959                           ; BSR set to: 0
 33960  001CFA  C1E8  F060         	movff	_DRUM_NOTE+1,noteOnDrum@pitch
 33961  001CFE  C051  F061         	movff	_velocity,noteOnDrum@velocity
 33962  001D02  5052               	movf	_drumchannel,w,c
 33963  001D04  EC58  F048         	call	_noteOnDrum
 33964  001D08                     l2374:
 33965                           
 33966                           ;drum.c: 36: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[1], 
      +                          127);}
 33967  001D08  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 33968  001D0A  AA01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 33969  001D0C  D008               	goto	l2375
 33970  001D0E  C0F6  F060         	movff	_DRUM_CC+1,controlChange@controllerNumber
 33971  001D12  0E7F               	movlw	127
 33972  001D14  0100               	movlb	0	; () banked
 33973  001D16  6F61               	movwf	controlChange@value& (0+255),b
 33974  001D18  503E               	movf	_channel,w,c
 33975  001D1A  EC2C  F048         	call	_controlChange
 33976  001D1E                     l2375:
 33977                           
 33978                           ;drum.c: 37: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 0) {controlChan
      +                          ge(channel,DRUM_CC[1], 127);}
 33979  001D1E  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 33980  001D20  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 33981  001D22  D00A               	goto	l2376
 33982  001D24  B22D               	btfsc	_toggle_state,1,c
 33983  001D26  D008               	goto	l2376
 33984  001D28  C0F6  F060         	movff	_DRUM_CC+1,controlChange@controllerNumber
 33985  001D2C  0E7F               	movlw	127
 33986  001D2E  0100               	movlb	0	; () banked
 33987  001D30  6F61               	movwf	controlChange@value& (0+255),b
 33988  001D32  503E               	movf	_channel,w,c
 33989  001D34  EC2C  F048         	call	_controlChange
 33990  001D38                     l2376:
 33991                           
 33992                           ;drum.c: 38: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 1) {controlChan
      +                          ge(channel,DRUM_CC[1], 0);}
 33993  001D38  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 33994  001D3A  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 33995  001D3C  D00A               	goto	l2377
 33996  001D3E  A22D               	btfss	_toggle_state,1,c
 33997  001D40  D008               	goto	l2377
 33998  001D42  C0F6  F060         	movff	_DRUM_CC+1,controlChange@controllerNumber
 33999  001D46  0E00               	movlw	0
 34000  001D48  0100               	movlb	0	; () banked
 34001  001D4A  6F61               	movwf	controlChange@value& (0+255),b
 34002  001D4C  503E               	movf	_channel,w,c
 34003  001D4E  EC2C  F048         	call	_controlChange
 34004  001D52                     l2377:
 34005                           
 34006                           ;drum.c: 39: toggle_state.T2 ^= 1;
 34007  001D52  722D               	btg	_toggle_state,1,c
 34008  001D54                     l2373:
 34009                           
 34010                           ;drum.c: 40: }
 34011                           ;drum.c: 41: if(((drum_button_state_now) & 0x04) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW3) {
 34012  001D54  A439               	btfss	_drum_button_state_now,2,c
 34013  001D56  D034               	goto	l2378
 34014  001D58  0100               	movlb	0	; () banked
 34015  001D5A  A7DB               	btfss	(_button_state_now+3)& (0+255),3,b
 34016                           
 34017                           ; BSR set to: 0
 34018  001D5C  B437               	btfsc	_drum,2,c
 34019  001D5E  D030               	goto	l2378
 34020                           
 34021                           ; BSR set to: 0
 34022                           ;drum.c: 42: drum.SW3 = 1;
 34023  001D60  8437               	bsf	_drum,2,c
 34024                           
 34025                           ;drum.c: 43: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[2],velocity);}
 34026  001D62  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34027  001D64  D007               	goto	l2379
 34028                           
 34029                           ; BSR set to: 0
 34030  001D66  C1E9  F060         	movff	_DRUM_NOTE+2,noteOnDrum@pitch
 34031  001D6A  C051  F061         	movff	_velocity,noteOnDrum@velocity
 34032  001D6E  5052               	movf	_drumchannel,w,c
 34033  001D70  EC58  F048         	call	_noteOnDrum
 34034  001D74                     l2379:
 34035                           
 34036                           ;drum.c: 44: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[2], 
      +                          127);}
 34037  001D74  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34038  001D76  AA01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34039  001D78  D008               	goto	l2380
 34040  001D7A  C0F7  F060         	movff	_DRUM_CC+2,controlChange@controllerNumber
 34041  001D7E  0E7F               	movlw	127
 34042  001D80  0100               	movlb	0	; () banked
 34043  001D82  6F61               	movwf	controlChange@value& (0+255),b
 34044  001D84  503E               	movf	_channel,w,c
 34045  001D86  EC2C  F048         	call	_controlChange
 34046  001D8A                     l2380:
 34047                           
 34048                           ;drum.c: 45: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 0) {controlChan
      +                          ge(channel,DRUM_CC[2], 127);}
 34049  001D8A  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34050  001D8C  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34051  001D8E  D00A               	goto	l2381
 34052  001D90  B42D               	btfsc	_toggle_state,2,c
 34053  001D92  D008               	goto	l2381
 34054  001D94  C0F7  F060         	movff	_DRUM_CC+2,controlChange@controllerNumber
 34055  001D98  0E7F               	movlw	127
 34056  001D9A  0100               	movlb	0	; () banked
 34057  001D9C  6F61               	movwf	controlChange@value& (0+255),b
 34058  001D9E  503E               	movf	_channel,w,c
 34059  001DA0  EC2C  F048         	call	_controlChange
 34060  001DA4                     l2381:
 34061                           
 34062                           ;drum.c: 46: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 1) {controlChan
      +                          ge(channel,DRUM_CC[2], 0);}
 34063  001DA4  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34064  001DA6  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34065  001DA8  D00A               	goto	l2382
 34066  001DAA  A42D               	btfss	_toggle_state,2,c
 34067  001DAC  D008               	goto	l2382
 34068  001DAE  C0F7  F060         	movff	_DRUM_CC+2,controlChange@controllerNumber
 34069  001DB2  0E00               	movlw	0
 34070  001DB4  0100               	movlb	0	; () banked
 34071  001DB6  6F61               	movwf	controlChange@value& (0+255),b
 34072  001DB8  503E               	movf	_channel,w,c
 34073  001DBA  EC2C  F048         	call	_controlChange
 34074  001DBE                     l2382:
 34075                           
 34076                           ;drum.c: 47: toggle_state.T3 ^= 1;
 34077  001DBE  742D               	btg	_toggle_state,2,c
 34078  001DC0                     l2378:
 34079                           
 34080                           ;drum.c: 48: }
 34081                           ;drum.c: 49: if(((drum_button_state_now) & 0x08) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW4) {
 34082  001DC0  A639               	btfss	_drum_button_state_now,3,c
 34083  001DC2  D034               	goto	l2383
 34084  001DC4  0100               	movlb	0	; () banked
 34085  001DC6  A7DB               	btfss	(_button_state_now+3)& (0+255),3,b
 34086                           
 34087                           ; BSR set to: 0
 34088  001DC8  B637               	btfsc	_drum,3,c
 34089  001DCA  D030               	goto	l2383
 34090                           
 34091                           ; BSR set to: 0
 34092                           ;drum.c: 50: drum.SW4 = 1;
 34093  001DCC  8637               	bsf	_drum,3,c
 34094                           
 34095                           ;drum.c: 51: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[3],velocity);}
 34096  001DCE  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34097  001DD0  D007               	goto	l2384
 34098                           
 34099                           ; BSR set to: 0
 34100  001DD2  C1EA  F060         	movff	_DRUM_NOTE+3,noteOnDrum@pitch
 34101  001DD6  C051  F061         	movff	_velocity,noteOnDrum@velocity
 34102  001DDA  5052               	movf	_drumchannel,w,c
 34103  001DDC  EC58  F048         	call	_noteOnDrum
 34104  001DE0                     l2384:
 34105                           
 34106                           ;drum.c: 52: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[3], 
      +                          127);}
 34107  001DE0  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34108  001DE2  AA01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34109  001DE4  D008               	goto	l2385
 34110  001DE6  C0F8  F060         	movff	_DRUM_CC+3,controlChange@controllerNumber
 34111  001DEA  0E7F               	movlw	127
 34112  001DEC  0100               	movlb	0	; () banked
 34113  001DEE  6F61               	movwf	controlChange@value& (0+255),b
 34114  001DF0  503E               	movf	_channel,w,c
 34115  001DF2  EC2C  F048         	call	_controlChange
 34116  001DF6                     l2385:
 34117                           
 34118                           ;drum.c: 53: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 0) {controlChan
      +                          ge(channel,DRUM_CC[3], 127);}
 34119  001DF6  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34120  001DF8  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34121  001DFA  D00A               	goto	l2386
 34122  001DFC  B62D               	btfsc	_toggle_state,3,c
 34123  001DFE  D008               	goto	l2386
 34124  001E00  C0F8  F060         	movff	_DRUM_CC+3,controlChange@controllerNumber
 34125  001E04  0E7F               	movlw	127
 34126  001E06  0100               	movlb	0	; () banked
 34127  001E08  6F61               	movwf	controlChange@value& (0+255),b
 34128  001E0A  503E               	movf	_channel,w,c
 34129  001E0C  EC2C  F048         	call	_controlChange
 34130  001E10                     l2386:
 34131                           
 34132                           ;drum.c: 54: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 1) {controlChan
      +                          ge(channel,DRUM_CC[3], 0);}
 34133  001E10  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34134  001E12  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34135  001E14  D00A               	goto	l2387
 34136  001E16  A62D               	btfss	_toggle_state,3,c
 34137  001E18  D008               	goto	l2387
 34138  001E1A  C0F8  F060         	movff	_DRUM_CC+3,controlChange@controllerNumber
 34139  001E1E  0E00               	movlw	0
 34140  001E20  0100               	movlb	0	; () banked
 34141  001E22  6F61               	movwf	controlChange@value& (0+255),b
 34142  001E24  503E               	movf	_channel,w,c
 34143  001E26  EC2C  F048         	call	_controlChange
 34144  001E2A                     l2387:
 34145                           
 34146                           ;drum.c: 55: toggle_state.T4 ^= 1;
 34147  001E2A  762D               	btg	_toggle_state,3,c
 34148  001E2C                     l2383:
 34149                           
 34150                           ;drum.c: 56: }
 34151                           ;drum.c: 57: if(((drum_button_state_now) & 0x10) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW5){
 34152  001E2C  A839               	btfss	_drum_button_state_now,4,c
 34153  001E2E  D034               	goto	l2388
 34154  001E30  0100               	movlb	0	; () banked
 34155  001E32  A7DB               	btfss	(_button_state_now+3)& (0+255),3,b
 34156                           
 34157                           ; BSR set to: 0
 34158  001E34  B837               	btfsc	_drum,4,c
 34159  001E36  D030               	goto	l2388
 34160                           
 34161                           ; BSR set to: 0
 34162                           ;drum.c: 58: drum.SW5 = 1;
 34163  001E38  8837               	bsf	_drum,4,c
 34164                           
 34165                           ;drum.c: 59: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[4],velocity);}
 34166  001E3A  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34167  001E3C  D007               	goto	l2389
 34168                           
 34169                           ; BSR set to: 0
 34170  001E3E  C1EB  F060         	movff	_DRUM_NOTE+4,noteOnDrum@pitch
 34171  001E42  C051  F061         	movff	_velocity,noteOnDrum@velocity
 34172  001E46  5052               	movf	_drumchannel,w,c
 34173  001E48  EC58  F048         	call	_noteOnDrum
 34174  001E4C                     l2389:
 34175                           
 34176                           ;drum.c: 60: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[4], 
      +                          127);}
 34177  001E4C  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34178  001E4E  AA01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34179  001E50  D008               	goto	l2390
 34180  001E52  C0F9  F060         	movff	_DRUM_CC+4,controlChange@controllerNumber
 34181  001E56  0E7F               	movlw	127
 34182  001E58  0100               	movlb	0	; () banked
 34183  001E5A  6F61               	movwf	controlChange@value& (0+255),b
 34184  001E5C  503E               	movf	_channel,w,c
 34185  001E5E  EC2C  F048         	call	_controlChange
 34186  001E62                     l2390:
 34187                           
 34188                           ;drum.c: 61: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 0) {controlChan
      +                          ge(channel,DRUM_CC[4], 127);}
 34189  001E62  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34190  001E64  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34191  001E66  D00A               	goto	l2391
 34192  001E68  B02D               	btfsc	_toggle_state,0,c
 34193  001E6A  D008               	goto	l2391
 34194  001E6C  C0F9  F060         	movff	_DRUM_CC+4,controlChange@controllerNumber
 34195  001E70  0E7F               	movlw	127
 34196  001E72  0100               	movlb	0	; () banked
 34197  001E74  6F61               	movwf	controlChange@value& (0+255),b
 34198  001E76  503E               	movf	_channel,w,c
 34199  001E78  EC2C  F048         	call	_controlChange
 34200  001E7C                     l2391:
 34201                           
 34202                           ;drum.c: 62: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 1) {controlChan
      +                          ge(channel,DRUM_CC[4], 0);}
 34203  001E7C  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34204  001E7E  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34205  001E80  D00A               	goto	l2392
 34206  001E82  A02D               	btfss	_toggle_state,0,c
 34207  001E84  D008               	goto	l2392
 34208  001E86  C0F9  F060         	movff	_DRUM_CC+4,controlChange@controllerNumber
 34209  001E8A  0E00               	movlw	0
 34210  001E8C  0100               	movlb	0	; () banked
 34211  001E8E  6F61               	movwf	controlChange@value& (0+255),b
 34212  001E90  503E               	movf	_channel,w,c
 34213  001E92  EC2C  F048         	call	_controlChange
 34214  001E96                     l2392:
 34215                           
 34216                           ;drum.c: 63: toggle_state.T5 ^= 1;
 34217  001E96  782D               	btg	_toggle_state,4,c
 34218  001E98                     l2388:
 34219                           
 34220                           ;drum.c: 64: }
 34221                           ;drum.c: 65: if(((drum_button_state_now) & 0x20) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW6) {
 34222  001E98  AA39               	btfss	_drum_button_state_now,5,c
 34223  001E9A  D034               	goto	l2393
 34224  001E9C  0100               	movlb	0	; () banked
 34225  001E9E  A7DB               	btfss	(_button_state_now+3)& (0+255),3,b
 34226                           
 34227                           ; BSR set to: 0
 34228  001EA0  BA37               	btfsc	_drum,5,c
 34229  001EA2  D030               	goto	l2393
 34230                           
 34231                           ; BSR set to: 0
 34232                           ;drum.c: 66: drum.SW6 = 1;
 34233  001EA4  8A37               	bsf	_drum,5,c
 34234                           
 34235                           ;drum.c: 67: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[5],velocity);}
 34236  001EA6  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34237  001EA8  D007               	goto	l2394
 34238                           
 34239                           ; BSR set to: 0
 34240  001EAA  C1EC  F060         	movff	_DRUM_NOTE+5,noteOnDrum@pitch
 34241  001EAE  C051  F061         	movff	_velocity,noteOnDrum@velocity
 34242  001EB2  5052               	movf	_drumchannel,w,c
 34243  001EB4  EC58  F048         	call	_noteOnDrum
 34244  001EB8                     l2394:
 34245                           
 34246                           ;drum.c: 68: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[5], 
      +                          127);}
 34247  001EB8  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34248  001EBA  AA01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34249  001EBC  D008               	goto	l2395
 34250  001EBE  C0FA  F060         	movff	_DRUM_CC+5,controlChange@controllerNumber
 34251  001EC2  0E7F               	movlw	127
 34252  001EC4  0100               	movlb	0	; () banked
 34253  001EC6  6F61               	movwf	controlChange@value& (0+255),b
 34254  001EC8  503E               	movf	_channel,w,c
 34255  001ECA  EC2C  F048         	call	_controlChange
 34256  001ECE                     l2395:
 34257                           
 34258                           ;drum.c: 69: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 0) {controlChan
      +                          ge(channel,DRUM_CC[5], 127);}
 34259  001ECE  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34260  001ED0  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34261  001ED2  D00A               	goto	l2396
 34262  001ED4  B22D               	btfsc	_toggle_state,1,c
 34263  001ED6  D008               	goto	l2396
 34264  001ED8  C0FA  F060         	movff	_DRUM_CC+5,controlChange@controllerNumber
 34265  001EDC  0E7F               	movlw	127
 34266  001EDE  0100               	movlb	0	; () banked
 34267  001EE0  6F61               	movwf	controlChange@value& (0+255),b
 34268  001EE2  503E               	movf	_channel,w,c
 34269  001EE4  EC2C  F048         	call	_controlChange
 34270  001EE8                     l2396:
 34271                           
 34272                           ;drum.c: 70: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 1) {controlChan
      +                          ge(channel,DRUM_CC[5], 0);}
 34273  001EE8  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34274  001EEA  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34275  001EEC  D00A               	goto	l2397
 34276  001EEE  A22D               	btfss	_toggle_state,1,c
 34277  001EF0  D008               	goto	l2397
 34278  001EF2  C0FA  F060         	movff	_DRUM_CC+5,controlChange@controllerNumber
 34279  001EF6  0E00               	movlw	0
 34280  001EF8  0100               	movlb	0	; () banked
 34281  001EFA  6F61               	movwf	controlChange@value& (0+255),b
 34282  001EFC  503E               	movf	_channel,w,c
 34283  001EFE  EC2C  F048         	call	_controlChange
 34284  001F02                     l2397:
 34285                           
 34286                           ;drum.c: 71: toggle_state.T6 ^= 1;
 34287  001F02  7A2D               	btg	_toggle_state,5,c
 34288  001F04                     l2393:
 34289                           
 34290                           ;drum.c: 72: }
 34291                           ;drum.c: 73: if(((drum_button_state_now) & 0x40) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW7) {
 34292  001F04  AC39               	btfss	_drum_button_state_now,6,c
 34293  001F06  D034               	goto	l2398
 34294  001F08  0100               	movlb	0	; () banked
 34295  001F0A  A7DB               	btfss	(_button_state_now+3)& (0+255),3,b
 34296                           
 34297                           ; BSR set to: 0
 34298  001F0C  BC37               	btfsc	_drum,6,c
 34299  001F0E  D030               	goto	l2398
 34300                           
 34301                           ; BSR set to: 0
 34302                           ;drum.c: 74: drum.SW7 = 1;
 34303  001F10  8C37               	bsf	_drum,6,c
 34304                           
 34305                           ;drum.c: 75: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[6],velocity);}
 34306  001F12  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34307  001F14  D007               	goto	l2399
 34308                           
 34309                           ; BSR set to: 0
 34310  001F16  C1ED  F060         	movff	_DRUM_NOTE+6,noteOnDrum@pitch
 34311  001F1A  C051  F061         	movff	_velocity,noteOnDrum@velocity
 34312  001F1E  5052               	movf	_drumchannel,w,c
 34313  001F20  EC58  F048         	call	_noteOnDrum
 34314  001F24                     l2399:
 34315                           
 34316                           ;drum.c: 76: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[6], 
      +                          127);}
 34317  001F24  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34318  001F26  AA01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34319  001F28  D008               	goto	l2400
 34320  001F2A  C0FB  F060         	movff	_DRUM_CC+6,controlChange@controllerNumber
 34321  001F2E  0E7F               	movlw	127
 34322  001F30  0100               	movlb	0	; () banked
 34323  001F32  6F61               	movwf	controlChange@value& (0+255),b
 34324  001F34  503E               	movf	_channel,w,c
 34325  001F36  EC2C  F048         	call	_controlChange
 34326  001F3A                     l2400:
 34327                           
 34328                           ;drum.c: 77: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 0) {controlChan
      +                          ge(channel,DRUM_CC[6], 127);}
 34329  001F3A  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34330  001F3C  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34331  001F3E  D00A               	goto	l2401
 34332  001F40  B42D               	btfsc	_toggle_state,2,c
 34333  001F42  D008               	goto	l2401
 34334  001F44  C0FB  F060         	movff	_DRUM_CC+6,controlChange@controllerNumber
 34335  001F48  0E7F               	movlw	127
 34336  001F4A  0100               	movlb	0	; () banked
 34337  001F4C  6F61               	movwf	controlChange@value& (0+255),b
 34338  001F4E  503E               	movf	_channel,w,c
 34339  001F50  EC2C  F048         	call	_controlChange
 34340  001F54                     l2401:
 34341                           
 34342                           ;drum.c: 78: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 1) {controlChan
      +                          ge(channel,DRUM_CC[6], 0);}
 34343  001F54  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34344  001F56  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34345  001F58  D00A               	goto	l2402
 34346  001F5A  A42D               	btfss	_toggle_state,2,c
 34347  001F5C  D008               	goto	l2402
 34348  001F5E  C0FB  F060         	movff	_DRUM_CC+6,controlChange@controllerNumber
 34349  001F62  0E00               	movlw	0
 34350  001F64  0100               	movlb	0	; () banked
 34351  001F66  6F61               	movwf	controlChange@value& (0+255),b
 34352  001F68  503E               	movf	_channel,w,c
 34353  001F6A  EC2C  F048         	call	_controlChange
 34354  001F6E                     l2402:
 34355                           
 34356                           ;drum.c: 79: toggle_state.T7 ^= 1;
 34357  001F6E  7C2D               	btg	_toggle_state,6,c
 34358  001F70                     l2398:
 34359                           
 34360                           ;drum.c: 80: }
 34361                           ;drum.c: 81: if(((drum_button_state_now) & 0x80) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW8) {
 34362  001F70  AE39               	btfss	_drum_button_state_now,7,c
 34363  001F72  D034               	goto	l2403
 34364  001F74  0100               	movlb	0	; () banked
 34365  001F76  A7DB               	btfss	(_button_state_now+3)& (0+255),3,b
 34366                           
 34367                           ; BSR set to: 0
 34368  001F78  BE37               	btfsc	_drum,7,c
 34369  001F7A  D030               	goto	l2403
 34370                           
 34371                           ; BSR set to: 0
 34372                           ;drum.c: 82: drum.SW8 = 1;
 34373  001F7C  8E37               	bsf	_drum,7,c
 34374                           
 34375                           ;drum.c: 83: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[7],velocity);}
 34376  001F7E  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34377  001F80  D007               	goto	l2404
 34378                           
 34379                           ; BSR set to: 0
 34380  001F82  C1EE  F060         	movff	_DRUM_NOTE+7,noteOnDrum@pitch
 34381  001F86  C051  F061         	movff	_velocity,noteOnDrum@velocity
 34382  001F8A  5052               	movf	_drumchannel,w,c
 34383  001F8C  EC58  F048         	call	_noteOnDrum
 34384  001F90                     l2404:
 34385                           
 34386                           ;drum.c: 84: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[7], 
      +                          127);}
 34387  001F90  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34388  001F92  AA01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34389  001F94  D008               	goto	l2405
 34390  001F96  C0FC  F060         	movff	_DRUM_CC+7,controlChange@controllerNumber
 34391  001F9A  0E7F               	movlw	127
 34392  001F9C  0100               	movlb	0	; () banked
 34393  001F9E  6F61               	movwf	controlChange@value& (0+255),b
 34394  001FA0  503E               	movf	_channel,w,c
 34395  001FA2  EC2C  F048         	call	_controlChange
 34396  001FA6                     l2405:
 34397                           
 34398                           ;drum.c: 85: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 0) {controlChan
      +                          ge(channel,DRUM_CC[7], 127);}
 34399  001FA6  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34400  001FA8  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34401  001FAA  D00A               	goto	l2406
 34402  001FAC  B62D               	btfsc	_toggle_state,3,c
 34403  001FAE  D008               	goto	l2406
 34404  001FB0  C0FC  F060         	movff	_DRUM_CC+7,controlChange@controllerNumber
 34405  001FB4  0E7F               	movlw	127
 34406  001FB6  0100               	movlb	0	; () banked
 34407  001FB8  6F61               	movwf	controlChange@value& (0+255),b
 34408  001FBA  503E               	movf	_channel,w,c
 34409  001FBC  EC2C  F048         	call	_controlChange
 34410  001FC0                     l2406:
 34411                           
 34412                           ;drum.c: 86: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 1) {controlChan
      +                          ge(channel,DRUM_CC[7], 0);}
 34413  001FC0  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34414  001FC2  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34415  001FC4  D00A               	goto	l2407
 34416  001FC6  A62D               	btfss	_toggle_state,3,c
 34417  001FC8  D008               	goto	l2407
 34418  001FCA  C0FC  F060         	movff	_DRUM_CC+7,controlChange@controllerNumber
 34419  001FCE  0E00               	movlw	0
 34420  001FD0  0100               	movlb	0	; () banked
 34421  001FD2  6F61               	movwf	controlChange@value& (0+255),b
 34422  001FD4  503E               	movf	_channel,w,c
 34423  001FD6  EC2C  F048         	call	_controlChange
 34424  001FDA                     l2407:
 34425                           
 34426                           ;drum.c: 87: toggle_state.T8 ^= 1;
 34427  001FDA  7E2D               	btg	_toggle_state,7,c
 34428  001FDC                     l2403:
 34429                           
 34430                           ;drum.c: 88: }
 34431                           ;drum.c: 91: if(((drum_button_state_last & 0x01)) && ((drum_button_state_now & 0x01) == 
      +                          0) && drum.SW1) {
 34432  001FDC  B038               	btfsc	_drum_button_state_last,0,c
 34433  001FDE  B039               	btfsc	_drum_button_state_now,0,c
 34434  001FE0  D017               	goto	l2410
 34435  001FE2  A037               	btfss	_drum,0,c
 34436  001FE4  D015               	goto	l2410
 34437                           
 34438                           ;drum.c: 92: drum.SW1 = 0;
 34439  001FE6  9037               	bcf	_drum,0,c
 34440                           
 34441                           ;drum.c: 93: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[0],velocity);}
 34442  001FE8  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34443  001FEA  D007               	goto	l2409
 34444  001FEC  C1E7  F060         	movff	_DRUM_NOTE,noteOffDrum@pitch
 34445  001FF0  C051  F061         	movff	_velocity,noteOffDrum@velocity
 34446  001FF4  5052               	movf	_drumchannel,w,c
 34447  001FF6  ECD9  F04A         	call	_noteOffDrum
 34448  001FFA                     l2409:
 34449                           
 34450                           ;drum.c: 94: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[0], 
      +                          0);}
 34451  001FFA  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34452  001FFC  AA01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34453  001FFE  D008               	goto	l2410
 34454  002000  C0F5  F060         	movff	_DRUM_CC,controlChange@controllerNumber
 34455  002004  0E00               	movlw	0
 34456  002006  0100               	movlb	0	; () banked
 34457  002008  6F61               	movwf	controlChange@value& (0+255),b
 34458  00200A  503E               	movf	_channel,w,c
 34459  00200C  EC2C  F048         	call	_controlChange
 34460  002010                     l2410:
 34461                           
 34462                           ;drum.c: 95: }
 34463                           ;drum.c: 96: if(((drum_button_state_last & 0x02)) && ((drum_button_state_now & 0x02) == 
      +                          0) && drum.SW2) {
 34464  002010  B238               	btfsc	_drum_button_state_last,1,c
 34465  002012  B239               	btfsc	_drum_button_state_now,1,c
 34466  002014  D017               	goto	l2413
 34467  002016  A237               	btfss	_drum,1,c
 34468  002018  D015               	goto	l2413
 34469                           
 34470                           ;drum.c: 97: drum.SW2 = 0;
 34471  00201A  9237               	bcf	_drum,1,c
 34472                           
 34473                           ;drum.c: 98: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[1],velocity);}
 34474  00201C  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34475  00201E  D007               	goto	l2412
 34476  002020  C1E8  F060         	movff	_DRUM_NOTE+1,noteOffDrum@pitch
 34477  002024  C051  F061         	movff	_velocity,noteOffDrum@velocity
 34478  002028  5052               	movf	_drumchannel,w,c
 34479  00202A  ECD9  F04A         	call	_noteOffDrum
 34480  00202E                     l2412:
 34481                           
 34482                           ;drum.c: 99: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[1], 
      +                          0);}
 34483  00202E  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34484  002030  AA01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34485  002032  D008               	goto	l2413
 34486  002034  C0F6  F060         	movff	_DRUM_CC+1,controlChange@controllerNumber
 34487  002038  0E00               	movlw	0
 34488  00203A  0100               	movlb	0	; () banked
 34489  00203C  6F61               	movwf	controlChange@value& (0+255),b
 34490  00203E  503E               	movf	_channel,w,c
 34491  002040  EC2C  F048         	call	_controlChange
 34492  002044                     l2413:
 34493                           
 34494                           ;drum.c: 100: }
 34495                           ;drum.c: 101: if(((drum_button_state_last & 0x04)) && ((drum_button_state_now & 0x04) ==
      +                           0) && drum.SW3) {
 34496  002044  B438               	btfsc	_drum_button_state_last,2,c
 34497  002046  B439               	btfsc	_drum_button_state_now,2,c
 34498  002048  D017               	goto	l2416
 34499  00204A  A437               	btfss	_drum,2,c
 34500  00204C  D015               	goto	l2416
 34501                           
 34502                           ;drum.c: 102: drum.SW3 = 0;
 34503  00204E  9437               	bcf	_drum,2,c
 34504                           
 34505                           ;drum.c: 103: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[2],velocity);}
 34506  002050  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34507  002052  D007               	goto	l2415
 34508  002054  C1E9  F060         	movff	_DRUM_NOTE+2,noteOffDrum@pitch
 34509  002058  C051  F061         	movff	_velocity,noteOffDrum@velocity
 34510  00205C  5052               	movf	_drumchannel,w,c
 34511  00205E  ECD9  F04A         	call	_noteOffDrum
 34512  002062                     l2415:
 34513                           
 34514                           ;drum.c: 104: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[2],
      +                           0);}
 34515  002062  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34516  002064  AA01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34517  002066  D008               	goto	l2416
 34518  002068  C0F7  F060         	movff	_DRUM_CC+2,controlChange@controllerNumber
 34519  00206C  0E00               	movlw	0
 34520  00206E  0100               	movlb	0	; () banked
 34521  002070  6F61               	movwf	controlChange@value& (0+255),b
 34522  002072  503E               	movf	_channel,w,c
 34523  002074  EC2C  F048         	call	_controlChange
 34524  002078                     l2416:
 34525                           
 34526                           ;drum.c: 105: }
 34527                           ;drum.c: 106: if(((drum_button_state_last & 0x08)) && ((drum_button_state_now & 0x08) ==
      +                           0) && drum.SW4) {
 34528  002078  B638               	btfsc	_drum_button_state_last,3,c
 34529  00207A  B639               	btfsc	_drum_button_state_now,3,c
 34530  00207C  D017               	goto	l2419
 34531  00207E  A637               	btfss	_drum,3,c
 34532  002080  D015               	goto	l2419
 34533                           
 34534                           ;drum.c: 107: drum.SW4 = 0;
 34535  002082  9637               	bcf	_drum,3,c
 34536                           
 34537                           ;drum.c: 108: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[3],velocity);}
 34538  002084  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34539  002086  D007               	goto	l2418
 34540  002088  C1EA  F060         	movff	_DRUM_NOTE+3,noteOffDrum@pitch
 34541  00208C  C051  F061         	movff	_velocity,noteOffDrum@velocity
 34542  002090  5052               	movf	_drumchannel,w,c
 34543  002092  ECD9  F04A         	call	_noteOffDrum
 34544  002096                     l2418:
 34545                           
 34546                           ;drum.c: 109: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[3],
      +                           0);}
 34547  002096  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34548  002098  AA01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34549  00209A  D008               	goto	l2419
 34550  00209C  C0F8  F060         	movff	_DRUM_CC+3,controlChange@controllerNumber
 34551  0020A0  0E00               	movlw	0
 34552  0020A2  0100               	movlb	0	; () banked
 34553  0020A4  6F61               	movwf	controlChange@value& (0+255),b
 34554  0020A6  503E               	movf	_channel,w,c
 34555  0020A8  EC2C  F048         	call	_controlChange
 34556  0020AC                     l2419:
 34557                           
 34558                           ;drum.c: 110: }
 34559                           ;drum.c: 111: if(((drum_button_state_last & 0x10)) && ((drum_button_state_now & 0x10) ==
      +                           0) && drum.SW5) {
 34560  0020AC  B838               	btfsc	_drum_button_state_last,4,c
 34561  0020AE  B839               	btfsc	_drum_button_state_now,4,c
 34562  0020B0  D017               	goto	l2422
 34563  0020B2  A837               	btfss	_drum,4,c
 34564  0020B4  D015               	goto	l2422
 34565                           
 34566                           ;drum.c: 112: drum.SW5 = 0;
 34567  0020B6  9837               	bcf	_drum,4,c
 34568                           
 34569                           ;drum.c: 113: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[4],velocity);}
 34570  0020B8  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34571  0020BA  D007               	goto	l2421
 34572  0020BC  C1EB  F060         	movff	_DRUM_NOTE+4,noteOffDrum@pitch
 34573  0020C0  C051  F061         	movff	_velocity,noteOffDrum@velocity
 34574  0020C4  5052               	movf	_drumchannel,w,c
 34575  0020C6  ECD9  F04A         	call	_noteOffDrum
 34576  0020CA                     l2421:
 34577                           
 34578                           ;drum.c: 114: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[4],
      +                           0);}
 34579  0020CA  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34580  0020CC  AA01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34581  0020CE  D008               	goto	l2422
 34582  0020D0  C0F9  F060         	movff	_DRUM_CC+4,controlChange@controllerNumber
 34583  0020D4  0E00               	movlw	0
 34584  0020D6  0100               	movlb	0	; () banked
 34585  0020D8  6F61               	movwf	controlChange@value& (0+255),b
 34586  0020DA  503E               	movf	_channel,w,c
 34587  0020DC  EC2C  F048         	call	_controlChange
 34588  0020E0                     l2422:
 34589                           
 34590                           ;drum.c: 115: }
 34591                           ;drum.c: 116: if(((drum_button_state_last & 0x20)) && ((drum_button_state_now & 0x20) ==
      +                           0) && drum.SW6) {
 34592  0020E0  BA38               	btfsc	_drum_button_state_last,5,c
 34593  0020E2  BA39               	btfsc	_drum_button_state_now,5,c
 34594  0020E4  D017               	goto	l2425
 34595  0020E6  AA37               	btfss	_drum,5,c
 34596  0020E8  D015               	goto	l2425
 34597                           
 34598                           ;drum.c: 117: drum.SW6 = 0;
 34599  0020EA  9A37               	bcf	_drum,5,c
 34600                           
 34601                           ;drum.c: 118: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[5],velocity);}
 34602  0020EC  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34603  0020EE  D007               	goto	l2424
 34604  0020F0  C1EC  F060         	movff	_DRUM_NOTE+5,noteOffDrum@pitch
 34605  0020F4  C051  F061         	movff	_velocity,noteOffDrum@velocity
 34606  0020F8  5052               	movf	_drumchannel,w,c
 34607  0020FA  ECD9  F04A         	call	_noteOffDrum
 34608  0020FE                     l2424:
 34609                           
 34610                           ;drum.c: 119: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[5],
      +                           0);}
 34611  0020FE  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34612  002100  AA01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34613  002102  D008               	goto	l2425
 34614  002104  C0FA  F060         	movff	_DRUM_CC+5,controlChange@controllerNumber
 34615  002108  0E00               	movlw	0
 34616  00210A  0100               	movlb	0	; () banked
 34617  00210C  6F61               	movwf	controlChange@value& (0+255),b
 34618  00210E  503E               	movf	_channel,w,c
 34619  002110  EC2C  F048         	call	_controlChange
 34620  002114                     l2425:
 34621                           
 34622                           ;drum.c: 120: }
 34623                           ;drum.c: 121: if(((drum_button_state_last & 0x40)) && ((drum_button_state_now & 0x40) ==
      +                           0) && drum.SW7) {
 34624  002114  BC38               	btfsc	_drum_button_state_last,6,c
 34625  002116  BC39               	btfsc	_drum_button_state_now,6,c
 34626  002118  D017               	goto	l2428
 34627  00211A  AC37               	btfss	_drum,6,c
 34628  00211C  D015               	goto	l2428
 34629                           
 34630                           ;drum.c: 122: drum.SW7 = 0;
 34631  00211E  9C37               	bcf	_drum,6,c
 34632                           
 34633                           ;drum.c: 123: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[6],velocity);}
 34634  002120  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34635  002122  D007               	goto	l2427
 34636  002124  C1ED  F060         	movff	_DRUM_NOTE+6,noteOffDrum@pitch
 34637  002128  C051  F061         	movff	_velocity,noteOffDrum@velocity
 34638  00212C  5052               	movf	_drumchannel,w,c
 34639  00212E  ECD9  F04A         	call	_noteOffDrum
 34640  002132                     l2427:
 34641                           
 34642                           ;drum.c: 124: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[6],
      +                           0);}
 34643  002132  A801               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34644  002134  AA01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34645  002136  D008               	goto	l2428
 34646  002138  C0FB  F060         	movff	_DRUM_CC+6,controlChange@controllerNumber
 34647  00213C  0E00               	movlw	0
 34648  00213E  0100               	movlb	0	; () banked
 34649  002140  6F61               	movwf	controlChange@value& (0+255),b
 34650  002142  503E               	movf	_channel,w,c
 34651  002144  EC2C  F048         	call	_controlChange
 34652  002148                     l2428:
 34653                           
 34654                           ;drum.c: 125: }
 34655                           ;drum.c: 126: if(((drum_button_state_last & 0x80)) && ((drum_button_state_now & 0x80) ==
      +                           0) && drum.SW8) {
 34656  002148  AE38               	btfss	_drum_button_state_last,7,c
 34657  00214A  0012               	return	
 34658  00214C  BE39               	btfsc	_drum_button_state_now,7,c
 34659  00214E  0012               	return	
 34660  002150  AE37               	btfss	_drum,7,c
 34661  002152  0012               	return	
 34662                           
 34663                           ;drum.c: 127: drum.SW8 = 0;
 34664  002154  9E37               	bcf	_drum,7,c
 34665                           
 34666                           ;drum.c: 128: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[7],velocity);}
 34667  002156  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34668  002158  D007               	goto	l2430
 34669  00215A  C1EE  F060         	movff	_DRUM_NOTE+7,noteOffDrum@pitch
 34670  00215E  C051  F061         	movff	_velocity,noteOffDrum@velocity
 34671  002162  5052               	movf	_drumchannel,w,c
 34672  002164  ECD9  F04A         	call	_noteOffDrum
 34673  002168                     l2430:
 34674                           
 34675                           ;drum.c: 129: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[7],
      +                           0);}
 34676  002168  B801               	btfsc	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34677  00216A  0012               	return	
 34678  00216C  AA01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34679  00216E  0012               	return	
 34680  002170  C0FC  F060         	movff	_DRUM_CC+7,controlChange@controllerNumber
 34681  002174  0E00               	movlw	0
 34682  002176  0100               	movlb	0	; () banked
 34683  002178  6F61               	movwf	controlChange@value& (0+255),b
 34684  00217A  503E               	movf	_channel,w,c
 34685  00217C  EC2C  F048         	call	_controlChange
 34686  002180  0012               	return	
 34687  002182                     __end_of_processDrumpad:
 34688                           	opt stack 0
 34689                           tblptru	equ	0xFF8
 34690                           tblptrh	equ	0xFF7
 34691                           tblptrl	equ	0xFF6
 34692                           tablat	equ	0xFF5
 34693                           prodh	equ	0xFF4
 34694                           prodl	equ	0xFF3
 34695                           intcon	equ	0xFF2
 34696                           intcon2	equ	0xFF1
 34697                           indf0	equ	0xFEF
 34698                           postinc0	equ	0xFEE
 34699                           fsr0h	equ	0xFEA
 34700                           fsr0l	equ	0xFE9
 34701                           wreg	equ	0xFE8
 34702                           postinc1	equ	0xFE6
 34703                           postdec1	equ	0xFE5
 34704                           plusw1	equ	0xFE3
 34705                           fsr1h	equ	0xFE2
 34706                           fsr1l	equ	0xFE1
 34707                           indf2	equ	0xFDF
 34708                           postinc2	equ	0xFDE
 34709                           postdec2	equ	0xFDD
 34710                           plusw2	equ	0xFDB
 34711                           fsr2h	equ	0xFDA
 34712                           fsr2l	equ	0xFD9
 34713                           status	equ	0xFD8
 34714                           
 34715 ;; *************** function _noteOnDrum *****************
 34716 ;; Defined at:
 34717 ;;		line 160 in file "midi.c"
 34718 ;; Parameters:    Size  Location     Type
 34719 ;;  channel         1    wreg     unsigned char 
 34720 ;;  pitch           1    0[BANK0 ] unsigned char 
 34721 ;;  velocity        1    1[BANK0 ] unsigned char 
 34722 ;; Auto vars:     Size  Location     Type
 34723 ;;  channel         1    2[BANK0 ] unsigned char 
 34724 ;; Return value:  Size  Location     Type
 34725 ;;                  1    wreg      void 
 34726 ;; Registers used:
 34727 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh
 34728 ;; Tracked objects:
 34729 ;;		On entry : 0/0
 34730 ;;		On exit  : 0/0
 34731 ;;		Unchanged: 0/0
 34732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34733 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34734 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34736 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34737 ;;Total ram usage:        3 bytes
 34738 ;; Hardware stack levels used:    1
 34739 ;; Hardware stack levels required when called:    7
 34740 ;; This function calls:
 34741 ;;		_noteOff
 34742 ;;		_sendOut
 34743 ;;		_sendUSB
 34744 ;; This function is called by:
 34745 ;;		_processDrumpad
 34746 ;; This function uses a non-reentrant model
 34747 ;;
 34748                           
 34749                           	psect	text95
 34750  0090B0                     __ptext95:
 34751                           	opt stack 0
 34752  0090B0                     _noteOnDrum:
 34753                           	opt stack 18
 34754                           
 34755                           ;incstack = 0
 34756                           ;noteOnDrum@channel stored from wreg
 34757  0090B0  0100               	movlb	0	; () banked
 34758  0090B2  6F62               	movwf	noteOnDrum@channel& (0+255),b
 34759                           
 34760                           ;midi.c: 162: noteNumber = pitch;
 34761  0090B4  C060  F03C         	movff	noteOnDrum@pitch,_noteNumber
 34762                           
 34763                           ;midi.c: 163: statusByte = channel | note_on;
 34764  0090B8  0100               	movlb	0	; () banked
 34765  0090BA  5162               	movf	noteOnDrum@channel& (0+255),w,b
 34766  0090BC  0990               	iorlw	144
 34767  0090BE  6E3D               	movwf	_statusByte,c
 34768                           
 34769                           ; BSR set to: 0
 34770                           ;midi.c: 165: if (velocity == 0) {noteOff(channel, pitch, velocity);return;}
 34771  0090C0  5161               	movf	noteOnDrum@velocity& (0+255),w,b
 34772  0090C2  A4D8               	btfss	status,2,c
 34773  0090C4  D009               	goto	l489
 34774                           
 34775                           ; BSR set to: 0
 34776  0090C6  5161               	movf	noteOnDrum@velocity& (0+255),w,b
 34777  0090C8  6EE6               	movwf	postinc1,c
 34778  0090CA  5160               	movf	noteOnDrum@pitch& (0+255),w,b
 34779  0090CC  6EE6               	movwf	postinc1,c
 34780  0090CE  5162               	movf	noteOnDrum@channel& (0+255),w,b
 34781  0090D0  6EE6               	movwf	postinc1,c
 34782  0090D2  ECAD  F049         	call	_noteOff	;wreg free
 34783  0090D6  0012               	return	
 34784  0090D8                     l489:
 34785                           
 34786                           ;midi.c: 168: sendUSB(statusByte, noteNumber, velocity);
 34787  0090D8  0100               	movlb	0	; () banked
 34788  0090DA  5161               	movf	noteOnDrum@velocity& (0+255),w,b
 34789  0090DC  6EE6               	movwf	postinc1,c
 34790  0090DE  503C               	movf	_noteNumber,w,c
 34791  0090E0  6EE6               	movwf	postinc1,c
 34792  0090E2  503D               	movf	_statusByte,w,c
 34793  0090E4  6EE6               	movwf	postinc1,c
 34794  0090E6  EC40  F036         	call	_sendUSB	;wreg free
 34795                           
 34796                           ;midi.c: 171: if(velocity > 0) {
 34797  0090EA  0100               	movlb	0	; () banked
 34798  0090EC  5161               	movf	noteOnDrum@velocity& (0+255),w,b
 34799  0090EE  B4D8               	btfsc	status,2,c
 34800  0090F0  0012               	return	
 34801                           
 34802                           ; BSR set to: 0
 34803                           ;midi.c: 172: sendOut(statusByte, noteNumber, velocity);
 34804  0090F2  5161               	movf	noteOnDrum@velocity& (0+255),w,b
 34805  0090F4  6EE6               	movwf	postinc1,c
 34806  0090F6  503C               	movf	_noteNumber,w,c
 34807  0090F8  6EE6               	movwf	postinc1,c
 34808  0090FA  503D               	movf	_statusByte,w,c
 34809  0090FC  6EE6               	movwf	postinc1,c
 34810  0090FE  ECC9  F035         	call	_sendOut	;wreg free
 34811  009102  0012               	return	
 34812  009104                     __end_of_noteOnDrum:
 34813                           	opt stack 0
 34814                           tblptru	equ	0xFF8
 34815                           tblptrh	equ	0xFF7
 34816                           tblptrl	equ	0xFF6
 34817                           tablat	equ	0xFF5
 34818                           prodh	equ	0xFF4
 34819                           prodl	equ	0xFF3
 34820                           intcon	equ	0xFF2
 34821                           intcon2	equ	0xFF1
 34822                           indf0	equ	0xFEF
 34823                           postinc0	equ	0xFEE
 34824                           fsr0h	equ	0xFEA
 34825                           fsr0l	equ	0xFE9
 34826                           wreg	equ	0xFE8
 34827                           postinc1	equ	0xFE6
 34828                           postdec1	equ	0xFE5
 34829                           plusw1	equ	0xFE3
 34830                           fsr1h	equ	0xFE2
 34831                           fsr1l	equ	0xFE1
 34832                           indf2	equ	0xFDF
 34833                           postinc2	equ	0xFDE
 34834                           postdec2	equ	0xFDD
 34835                           plusw2	equ	0xFDB
 34836                           fsr2h	equ	0xFDA
 34837                           fsr2l	equ	0xFD9
 34838                           status	equ	0xFD8
 34839                           
 34840 ;; *************** function _noteOffDrum *****************
 34841 ;; Defined at:
 34842 ;;		line 145 in file "midi.c"
 34843 ;; Parameters:    Size  Location     Type
 34844 ;;  channel         1    wreg     unsigned char 
 34845 ;;  pitch           1    0[BANK0 ] unsigned char 
 34846 ;;  velocity        1    1[BANK0 ] unsigned char 
 34847 ;; Auto vars:     Size  Location     Type
 34848 ;;  channel         1    2[BANK0 ] unsigned char 
 34849 ;; Return value:  Size  Location     Type
 34850 ;;                  1    wreg      void 
 34851 ;; Registers used:
 34852 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11
 34853 ;; Tracked objects:
 34854 ;;		On entry : 0/0
 34855 ;;		On exit  : 0/0
 34856 ;;		Unchanged: 0/0
 34857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34858 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34859 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34861 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34862 ;;Total ram usage:        3 bytes
 34863 ;; Hardware stack levels used:    1
 34864 ;; Hardware stack levels required when called:    6
 34865 ;; This function calls:
 34866 ;;		_sendOut
 34867 ;;		_sendUSB
 34868 ;; This function is called by:
 34869 ;;		_processDrumpad
 34870 ;; This function uses a non-reentrant model
 34871 ;;
 34872                           
 34873                           	psect	text96
 34874  0095B2                     __ptext96:
 34875                           	opt stack 0
 34876  0095B2                     _noteOffDrum:
 34877                           	opt stack 19
 34878                           
 34879                           ;incstack = 0
 34880                           ;noteOffDrum@channel stored from wreg
 34881  0095B2  0100               	movlb	0	; () banked
 34882  0095B4  6F62               	movwf	noteOffDrum@channel& (0+255),b
 34883                           
 34884                           ;midi.c: 147: noteNumber = pitch;
 34885  0095B6  C060  F03C         	movff	noteOffDrum@pitch,_noteNumber
 34886                           
 34887                           ;midi.c: 148: statusByte = channel | note_off;
 34888  0095BA  0100               	movlb	0	; () banked
 34889  0095BC  5162               	movf	noteOffDrum@channel& (0+255),w,b
 34890  0095BE  0980               	iorlw	128
 34891  0095C0  6E3D               	movwf	_statusByte,c
 34892                           
 34893                           ; BSR set to: 0
 34894                           ;midi.c: 151: sendUSB(statusByte, noteNumber, velocity);
 34895  0095C2  5161               	movf	noteOffDrum@velocity& (0+255),w,b
 34896  0095C4  6EE6               	movwf	postinc1,c
 34897  0095C6  503C               	movf	_noteNumber,w,c
 34898  0095C8  6EE6               	movwf	postinc1,c
 34899  0095CA  503D               	movf	_statusByte,w,c
 34900  0095CC  6EE6               	movwf	postinc1,c
 34901  0095CE  EC40  F036         	call	_sendUSB	;wreg free
 34902                           
 34903                           ;midi.c: 154: sendOut(statusByte, noteNumber, velocity);
 34904  0095D2  0100               	movlb	0	; () banked
 34905  0095D4  5161               	movf	noteOffDrum@velocity& (0+255),w,b
 34906  0095D6  6EE6               	movwf	postinc1,c
 34907  0095D8  503C               	movf	_noteNumber,w,c
 34908  0095DA  6EE6               	movwf	postinc1,c
 34909  0095DC  503D               	movf	_statusByte,w,c
 34910  0095DE  6EE6               	movwf	postinc1,c
 34911  0095E0  ECC9  F035         	call	_sendOut	;wreg free
 34912  0095E4  0012               	return		;funcret
 34913  0095E6                     __end_of_noteOffDrum:
 34914                           	opt stack 0
 34915                           tblptru	equ	0xFF8
 34916                           tblptrh	equ	0xFF7
 34917                           tblptrl	equ	0xFF6
 34918                           tablat	equ	0xFF5
 34919                           prodh	equ	0xFF4
 34920                           prodl	equ	0xFF3
 34921                           intcon	equ	0xFF2
 34922                           intcon2	equ	0xFF1
 34923                           indf0	equ	0xFEF
 34924                           postinc0	equ	0xFEE
 34925                           fsr0h	equ	0xFEA
 34926                           fsr0l	equ	0xFE9
 34927                           wreg	equ	0xFE8
 34928                           postinc1	equ	0xFE6
 34929                           postdec1	equ	0xFE5
 34930                           plusw1	equ	0xFE3
 34931                           fsr1h	equ	0xFE2
 34932                           fsr1l	equ	0xFE1
 34933                           indf2	equ	0xFDF
 34934                           postinc2	equ	0xFDE
 34935                           postdec2	equ	0xFDD
 34936                           plusw2	equ	0xFDB
 34937                           fsr2h	equ	0xFDA
 34938                           fsr2l	equ	0xFD9
 34939                           status	equ	0xFD8
 34940                           
 34941 ;; *************** function _keyboardTranspose *****************
 34942 ;; Defined at:
 34943 ;;		line 28 in file "octave.c"
 34944 ;; Parameters:    Size  Location     Type
 34945 ;;		None
 34946 ;; Auto vars:     Size  Location     Type
 34947 ;;		None
 34948 ;; Return value:  Size  Location     Type
 34949 ;;                  1    wreg      void 
 34950 ;; Registers used:
 34951 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
 34952 ;; Tracked objects:
 34953 ;;		On entry : 0/0
 34954 ;;		On exit  : 0/0
 34955 ;;		Unchanged: 0/0
 34956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34961 ;;Total ram usage:        0 bytes
 34962 ;; Hardware stack levels used:    1
 34963 ;; Hardware stack levels required when called:    8
 34964 ;; This function calls:
 34965 ;;		_key_press_release_note_off
 34966 ;;		_printThisNumber
 34967 ;;		_wait_one_pulse
 34968 ;; This function is called by:
 34969 ;;		_digitalInputs
 34970 ;; This function uses a non-reentrant model
 34971 ;;
 34972                           
 34973                           	psect	text97
 34974  004310                     __ptext97:
 34975                           	opt stack 0
 34976  004310                     _keyboardTranspose:
 34977                           	opt stack 18
 34978                           
 34979                           ;octave.c: 30: static signed char semitone_temp;
 34980                           ;octave.c: 31: static __bit keyPress;
 34981                           ;octave.c: 33: if(button_state_now == (0x08000000 | 0x00000001))
 34982                           
 34983                           ;incstack = 0
 34984  004310  0100               	movlb	0	; () banked
 34985  004312  05D8               	decf	_button_state_now& (0+255),w,b
 34986  004314  E109               	bnz	l29902
 34987  004316  0E08               	movlw	8
 34988  004318  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 34989  00431A  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 34990  00431C  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 34991  00431E  A4D8               	btfss	status,2,c
 34992  004320  D003               	goto	l2804
 34993                           
 34994                           ; BSR set to: 0
 34995                           ;octave.c: 34: {
 34996                           ;octave.c: 35: semitone_temp = -12;
 34997  004322  0EF4               	movlw	244
 34998  004324  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 34999                           
 35000                           ; BSR set to: 0
 35001                           ;octave.c: 36: keyPress = 1;
 35002  004326  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35003  004328                     l2804:
 35004  004328                     l29902:
 35005                           
 35006                           ; BSR set to: 0
 35007                           ;octave.c: 37: }
 35008                           ;octave.c: 38: if(button_state_now == (0x08000000 | 0x00000002))
 35009  004328  0E02               	movlw	2
 35010  00432A  19D8               	xorwf	_button_state_now& (0+255),w,b
 35011  00432C  E109               	bnz	l29908
 35012  00432E  0E08               	movlw	8
 35013  004330  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35014  004332  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35015  004334  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35016  004336  A4D8               	btfss	status,2,c
 35017  004338  D003               	goto	l2805
 35018                           
 35019                           ; BSR set to: 0
 35020                           ;octave.c: 39: {
 35021                           ;octave.c: 40: semitone_temp = -11;
 35022  00433A  0EF5               	movlw	245
 35023  00433C  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35024                           
 35025                           ; BSR set to: 0
 35026                           ;octave.c: 41: keyPress = 1;
 35027  00433E  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35028  004340                     l2805:
 35029  004340                     l29908:
 35030                           
 35031                           ; BSR set to: 0
 35032                           ;octave.c: 42: }
 35033                           ;octave.c: 43: if(button_state_now == (0x08000000 | 0x00000004))
 35034  004340  0E04               	movlw	4
 35035  004342  19D8               	xorwf	_button_state_now& (0+255),w,b
 35036  004344  E109               	bnz	l29914
 35037  004346  0E08               	movlw	8
 35038  004348  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35039  00434A  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35040  00434C  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35041  00434E  A4D8               	btfss	status,2,c
 35042  004350  D003               	goto	l2806
 35043                           
 35044                           ; BSR set to: 0
 35045                           ;octave.c: 44: {
 35046                           ;octave.c: 45: semitone_temp = -10;
 35047  004352  0EF6               	movlw	246
 35048  004354  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35049                           
 35050                           ; BSR set to: 0
 35051                           ;octave.c: 46: keyPress = 1;
 35052  004356  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35053  004358                     l2806:
 35054  004358                     l29914:
 35055                           
 35056                           ; BSR set to: 0
 35057                           ;octave.c: 47: }
 35058                           ;octave.c: 48: if(button_state_now == (0x08000000 | 0x00000008))
 35059  004358  0E08               	movlw	8
 35060  00435A  19D8               	xorwf	_button_state_now& (0+255),w,b
 35061  00435C  E109               	bnz	l29920
 35062  00435E  0E08               	movlw	8
 35063  004360  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35064  004362  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35065  004364  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35066  004366  A4D8               	btfss	status,2,c
 35067  004368  D003               	goto	l2807
 35068                           
 35069                           ; BSR set to: 0
 35070                           ;octave.c: 49: {
 35071                           ;octave.c: 50: semitone_temp = -9;
 35072  00436A  0EF7               	movlw	247
 35073  00436C  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35074                           
 35075                           ; BSR set to: 0
 35076                           ;octave.c: 51: keyPress = 1;
 35077  00436E  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35078  004370                     l2807:
 35079  004370                     l29920:
 35080                           
 35081                           ; BSR set to: 0
 35082                           ;octave.c: 52: }
 35083                           ;octave.c: 53: if(button_state_now == (0x08000000 | 0x00000010))
 35084  004370  0E10               	movlw	16
 35085  004372  19D8               	xorwf	_button_state_now& (0+255),w,b
 35086  004374  E109               	bnz	l29926
 35087  004376  0E08               	movlw	8
 35088  004378  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35089  00437A  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35090  00437C  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35091  00437E  A4D8               	btfss	status,2,c
 35092  004380  D003               	goto	l2808
 35093                           
 35094                           ; BSR set to: 0
 35095                           ;octave.c: 54: {
 35096                           ;octave.c: 55: semitone_temp = -8;
 35097  004382  0EF8               	movlw	248
 35098  004384  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35099                           
 35100                           ; BSR set to: 0
 35101                           ;octave.c: 56: keyPress = 1;
 35102  004386  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35103  004388                     l2808:
 35104  004388                     l29926:
 35105                           
 35106                           ; BSR set to: 0
 35107                           ;octave.c: 57: }
 35108                           ;octave.c: 58: if(button_state_now == (0x08000000 | 0x00000020))
 35109  004388  0E20               	movlw	32
 35110  00438A  19D8               	xorwf	_button_state_now& (0+255),w,b
 35111  00438C  E109               	bnz	l29932
 35112  00438E  0E08               	movlw	8
 35113  004390  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35114  004392  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35115  004394  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35116  004396  A4D8               	btfss	status,2,c
 35117  004398  D003               	goto	l2809
 35118                           
 35119                           ; BSR set to: 0
 35120                           ;octave.c: 59: {
 35121                           ;octave.c: 60: semitone_temp = -7;
 35122  00439A  0EF9               	movlw	249
 35123  00439C  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35124                           
 35125                           ; BSR set to: 0
 35126                           ;octave.c: 61: keyPress = 1;
 35127  00439E  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35128  0043A0                     l2809:
 35129  0043A0                     l29932:
 35130                           
 35131                           ; BSR set to: 0
 35132                           ;octave.c: 62: }
 35133                           ;octave.c: 63: if(button_state_now == (0x08000000 | 0x00000040))
 35134  0043A0  0E40               	movlw	64
 35135  0043A2  19D8               	xorwf	_button_state_now& (0+255),w,b
 35136  0043A4  E109               	bnz	l29938
 35137  0043A6  0E08               	movlw	8
 35138  0043A8  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35139  0043AA  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35140  0043AC  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35141  0043AE  A4D8               	btfss	status,2,c
 35142  0043B0  D003               	goto	l2810
 35143                           
 35144                           ; BSR set to: 0
 35145                           ;octave.c: 64: {
 35146                           ;octave.c: 65: semitone_temp = -6;
 35147  0043B2  0EFA               	movlw	250
 35148  0043B4  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35149                           
 35150                           ; BSR set to: 0
 35151                           ;octave.c: 66: keyPress = 1;
 35152  0043B6  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35153  0043B8                     l2810:
 35154  0043B8                     l29938:
 35155                           
 35156                           ; BSR set to: 0
 35157                           ;octave.c: 67: }
 35158                           ;octave.c: 68: if(button_state_now == (0x08000000 | 0x00000080))
 35159  0043B8  0E80               	movlw	128
 35160  0043BA  19D8               	xorwf	_button_state_now& (0+255),w,b
 35161  0043BC  E109               	bnz	l29944
 35162  0043BE  0E08               	movlw	8
 35163  0043C0  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35164  0043C2  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35165  0043C4  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35166  0043C6  A4D8               	btfss	status,2,c
 35167  0043C8  D003               	goto	l2811
 35168                           
 35169                           ; BSR set to: 0
 35170                           ;octave.c: 69: {
 35171                           ;octave.c: 70: semitone_temp = -5;
 35172  0043CA  0EFB               	movlw	251
 35173  0043CC  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35174                           
 35175                           ; BSR set to: 0
 35176                           ;octave.c: 71: keyPress = 1;
 35177  0043CE  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35178  0043D0                     l2811:
 35179  0043D0                     l29944:
 35180                           
 35181                           ; BSR set to: 0
 35182                           ;octave.c: 72: }
 35183                           ;octave.c: 73: if(button_state_now == (0x08000000 | 0x00000100))
 35184  0043D0  05D9               	decf	(_button_state_now+1)& (0+255),w,b
 35185  0043D2  E109               	bnz	l29950
 35186  0043D4  0E08               	movlw	8
 35187  0043D6  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35188  0043D8  11D8               	iorwf	_button_state_now& (0+255),w,b
 35189  0043DA  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35190  0043DC  A4D8               	btfss	status,2,c
 35191  0043DE  D003               	goto	l2812
 35192                           
 35193                           ; BSR set to: 0
 35194                           ;octave.c: 74: {
 35195                           ;octave.c: 75: semitone_temp = -4;
 35196  0043E0  0EFC               	movlw	252
 35197  0043E2  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35198                           
 35199                           ; BSR set to: 0
 35200                           ;octave.c: 76: keyPress = 1;
 35201  0043E4  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35202  0043E6                     l2812:
 35203  0043E6                     l29950:
 35204                           
 35205                           ; BSR set to: 0
 35206                           ;octave.c: 77: }
 35207                           ;octave.c: 78: if(button_state_now == (0x08000000 | 0x00000200))
 35208  0043E6  0E02               	movlw	2
 35209  0043E8  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 35210  0043EA  E109               	bnz	l29956
 35211  0043EC  0E08               	movlw	8
 35212  0043EE  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35213  0043F0  11D8               	iorwf	_button_state_now& (0+255),w,b
 35214  0043F2  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35215  0043F4  A4D8               	btfss	status,2,c
 35216  0043F6  D003               	goto	l2813
 35217                           
 35218                           ; BSR set to: 0
 35219                           ;octave.c: 79: {
 35220                           ;octave.c: 80: semitone_temp = -3;
 35221  0043F8  0EFD               	movlw	253
 35222  0043FA  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35223                           
 35224                           ; BSR set to: 0
 35225                           ;octave.c: 81: keyPress = 1;
 35226  0043FC  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35227  0043FE                     l2813:
 35228  0043FE                     l29956:
 35229                           
 35230                           ; BSR set to: 0
 35231                           ;octave.c: 82: }
 35232                           ;octave.c: 83: if(button_state_now == (0x08000000 | 0x00000400))
 35233  0043FE  0E04               	movlw	4
 35234  004400  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 35235  004402  E109               	bnz	l29962
 35236  004404  0E08               	movlw	8
 35237  004406  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35238  004408  11D8               	iorwf	_button_state_now& (0+255),w,b
 35239  00440A  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35240  00440C  A4D8               	btfss	status,2,c
 35241  00440E  D003               	goto	l2814
 35242                           
 35243                           ; BSR set to: 0
 35244                           ;octave.c: 84: {
 35245                           ;octave.c: 85: semitone_temp = -2;
 35246  004410  0EFE               	movlw	254
 35247  004412  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35248                           
 35249                           ; BSR set to: 0
 35250                           ;octave.c: 86: keyPress = 1;
 35251  004414  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35252  004416                     l2814:
 35253  004416                     l29962:
 35254                           
 35255                           ; BSR set to: 0
 35256                           ;octave.c: 87: }
 35257                           ;octave.c: 88: if(button_state_now == (0x08000000 | 0x00000800))
 35258  004416  0E08               	movlw	8
 35259  004418  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 35260  00441A  E108               	bnz	l29966
 35261  00441C  0E08               	movlw	8
 35262  00441E  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35263  004420  11D8               	iorwf	_button_state_now& (0+255),w,b
 35264  004422  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35265  004424  A4D8               	btfss	status,2,c
 35266  004426  D002               	goto	l2815
 35267                           
 35268                           ; BSR set to: 0
 35269                           ;octave.c: 89: {
 35270                           ;octave.c: 90: semitone_temp = -1;
 35271  004428  69EA               	setf	keyboardTranspose@semitone_temp& (0+255),b
 35272                           
 35273                           ;octave.c: 91: keyPress = 1;
 35274  00442A  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35275  00442C                     l2815:
 35276  00442C                     l29966:
 35277                           
 35278                           ; BSR set to: 0
 35279                           ;octave.c: 92: }
 35280                           ;octave.c: 93: if(button_state_now == (0x08000000 | 0x00001000))
 35281  00442C  0E10               	movlw	16
 35282  00442E  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 35283  004430  E109               	bnz	l29972
 35284  004432  0E08               	movlw	8
 35285  004434  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35286  004436  11D8               	iorwf	_button_state_now& (0+255),w,b
 35287  004438  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35288  00443A  A4D8               	btfss	status,2,c
 35289  00443C  D003               	goto	l2816
 35290                           
 35291                           ; BSR set to: 0
 35292                           ;octave.c: 94: {
 35293                           ;octave.c: 95: semitone_temp = 0;
 35294  00443E  0E00               	movlw	0
 35295  004440  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35296                           
 35297                           ; BSR set to: 0
 35298                           ;octave.c: 96: keyPress = 1;
 35299  004442  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35300  004444                     l2816:
 35301  004444                     l29972:
 35302                           
 35303                           ; BSR set to: 0
 35304                           ;octave.c: 97: }
 35305                           ;octave.c: 98: if(button_state_now == (0x08000000 | 0x00002000))
 35306  004444  0E20               	movlw	32
 35307  004446  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 35308  004448  E109               	bnz	l29978
 35309  00444A  0E08               	movlw	8
 35310  00444C  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35311  00444E  11D8               	iorwf	_button_state_now& (0+255),w,b
 35312  004450  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35313  004452  A4D8               	btfss	status,2,c
 35314  004454  D003               	goto	l2817
 35315                           
 35316                           ; BSR set to: 0
 35317                           ;octave.c: 99: {
 35318                           ;octave.c: 100: semitone_temp = 1;
 35319  004456  0E01               	movlw	1
 35320  004458  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35321                           
 35322                           ; BSR set to: 0
 35323                           ;octave.c: 101: keyPress = 1;
 35324  00445A  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35325  00445C                     l2817:
 35326  00445C                     l29978:
 35327                           
 35328                           ; BSR set to: 0
 35329                           ;octave.c: 102: }
 35330                           ;octave.c: 103: if(button_state_now == (0x08000000 | 0x00004000))
 35331  00445C  0E40               	movlw	64
 35332  00445E  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 35333  004460  E109               	bnz	l29984
 35334  004462  0E08               	movlw	8
 35335  004464  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35336  004466  11D8               	iorwf	_button_state_now& (0+255),w,b
 35337  004468  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35338  00446A  A4D8               	btfss	status,2,c
 35339  00446C  D003               	goto	l2818
 35340                           
 35341                           ; BSR set to: 0
 35342                           ;octave.c: 104: {
 35343                           ;octave.c: 105: semitone_temp = 2;
 35344  00446E  0E02               	movlw	2
 35345  004470  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35346                           
 35347                           ; BSR set to: 0
 35348                           ;octave.c: 106: keyPress = 1;
 35349  004472  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35350  004474                     l2818:
 35351  004474                     l29984:
 35352                           
 35353                           ; BSR set to: 0
 35354                           ;octave.c: 107: }
 35355                           ;octave.c: 108: if(button_state_now == (0x08000000 | 0x00008000))
 35356  004474  0E80               	movlw	128
 35357  004476  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 35358  004478  E109               	bnz	l29990
 35359  00447A  0E08               	movlw	8
 35360  00447C  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35361  00447E  11D8               	iorwf	_button_state_now& (0+255),w,b
 35362  004480  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35363  004482  A4D8               	btfss	status,2,c
 35364  004484  D003               	goto	l2819
 35365                           
 35366                           ; BSR set to: 0
 35367                           ;octave.c: 109: {
 35368                           ;octave.c: 110: semitone_temp = 3;
 35369  004486  0E03               	movlw	3
 35370  004488  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35371                           
 35372                           ; BSR set to: 0
 35373                           ;octave.c: 111: keyPress = 1;
 35374  00448A  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35375  00448C                     l2819:
 35376  00448C                     l29990:
 35377                           
 35378                           ; BSR set to: 0
 35379                           ;octave.c: 112: }
 35380                           ;octave.c: 113: if(button_state_now == (0x08000000 | 0x00010000))
 35381  00448C  05DA               	decf	(_button_state_now+2)& (0+255),w,b
 35382  00448E  E109               	bnz	l29996
 35383  004490  0E08               	movlw	8
 35384  004492  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35385  004494  11D8               	iorwf	_button_state_now& (0+255),w,b
 35386  004496  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35387  004498  A4D8               	btfss	status,2,c
 35388  00449A  D003               	goto	l2820
 35389                           
 35390                           ; BSR set to: 0
 35391                           ;octave.c: 114: {
 35392                           ;octave.c: 115: semitone_temp = 4;
 35393  00449C  0E04               	movlw	4
 35394  00449E  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35395                           
 35396                           ; BSR set to: 0
 35397                           ;octave.c: 116: keyPress = 1;
 35398  0044A0  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35399  0044A2                     l2820:
 35400  0044A2                     l29996:
 35401                           
 35402                           ; BSR set to: 0
 35403                           ;octave.c: 117: }
 35404                           ;octave.c: 118: if(button_state_now == (0x08000000 | 0x00020000))
 35405  0044A2  0E02               	movlw	2
 35406  0044A4  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 35407  0044A6  E109               	bnz	l30002
 35408  0044A8  0E08               	movlw	8
 35409  0044AA  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35410  0044AC  11D8               	iorwf	_button_state_now& (0+255),w,b
 35411  0044AE  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35412  0044B0  A4D8               	btfss	status,2,c
 35413  0044B2  D003               	goto	l2821
 35414                           
 35415                           ; BSR set to: 0
 35416                           ;octave.c: 119: {
 35417                           ;octave.c: 120: semitone_temp = 5;
 35418  0044B4  0E05               	movlw	5
 35419  0044B6  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35420                           
 35421                           ; BSR set to: 0
 35422                           ;octave.c: 121: keyPress = 1;
 35423  0044B8  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35424  0044BA                     l2821:
 35425  0044BA                     l30002:
 35426                           
 35427                           ; BSR set to: 0
 35428                           ;octave.c: 122: }
 35429                           ;octave.c: 123: if(button_state_now == (0x08000000 | 0x00040000))
 35430  0044BA  0E04               	movlw	4
 35431  0044BC  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 35432  0044BE  E109               	bnz	l30008
 35433  0044C0  0E08               	movlw	8
 35434  0044C2  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35435  0044C4  11D8               	iorwf	_button_state_now& (0+255),w,b
 35436  0044C6  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35437  0044C8  A4D8               	btfss	status,2,c
 35438  0044CA  D003               	goto	l2822
 35439                           
 35440                           ; BSR set to: 0
 35441                           ;octave.c: 124: {
 35442                           ;octave.c: 125: semitone_temp = 6;
 35443  0044CC  0E06               	movlw	6
 35444  0044CE  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35445                           
 35446                           ; BSR set to: 0
 35447                           ;octave.c: 126: keyPress = 1;
 35448  0044D0  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35449  0044D2                     l2822:
 35450  0044D2                     l30008:
 35451                           
 35452                           ; BSR set to: 0
 35453                           ;octave.c: 127: }
 35454                           ;octave.c: 128: if(button_state_now == (0x08000000 | 0x00080000))
 35455  0044D2  0E08               	movlw	8
 35456  0044D4  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 35457  0044D6  E109               	bnz	l30014
 35458  0044D8  0E08               	movlw	8
 35459  0044DA  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35460  0044DC  11D8               	iorwf	_button_state_now& (0+255),w,b
 35461  0044DE  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35462  0044E0  A4D8               	btfss	status,2,c
 35463  0044E2  D003               	goto	l2823
 35464                           
 35465                           ; BSR set to: 0
 35466                           ;octave.c: 129: {
 35467                           ;octave.c: 130: semitone_temp = 7;
 35468  0044E4  0E07               	movlw	7
 35469  0044E6  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35470                           
 35471                           ; BSR set to: 0
 35472                           ;octave.c: 131: keyPress = 1;
 35473  0044E8  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35474  0044EA                     l2823:
 35475  0044EA                     l30014:
 35476                           
 35477                           ; BSR set to: 0
 35478                           ;octave.c: 132: }
 35479                           ;octave.c: 133: if(button_state_now == (0x08000000 | 0x00100000))
 35480  0044EA  0E10               	movlw	16
 35481  0044EC  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 35482  0044EE  E109               	bnz	l30020
 35483  0044F0  0E08               	movlw	8
 35484  0044F2  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35485  0044F4  11D8               	iorwf	_button_state_now& (0+255),w,b
 35486  0044F6  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35487  0044F8  A4D8               	btfss	status,2,c
 35488  0044FA  D003               	goto	l2824
 35489                           
 35490                           ; BSR set to: 0
 35491                           ;octave.c: 134: {
 35492                           ;octave.c: 135: semitone_temp = 8;
 35493  0044FC  0E08               	movlw	8
 35494  0044FE  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35495                           
 35496                           ; BSR set to: 0
 35497                           ;octave.c: 136: keyPress = 1;
 35498  004500  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35499  004502                     l2824:
 35500  004502                     l30020:
 35501                           
 35502                           ; BSR set to: 0
 35503                           ;octave.c: 137: }
 35504                           ;octave.c: 138: if(button_state_now == (0x08000000 | 0x00200000))
 35505  004502  0E20               	movlw	32
 35506  004504  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 35507  004506  E109               	bnz	l30026
 35508  004508  0E08               	movlw	8
 35509  00450A  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35510  00450C  11D8               	iorwf	_button_state_now& (0+255),w,b
 35511  00450E  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35512  004510  A4D8               	btfss	status,2,c
 35513  004512  D003               	goto	l2825
 35514                           
 35515                           ; BSR set to: 0
 35516                           ;octave.c: 139: {
 35517                           ;octave.c: 140: semitone_temp = 9;
 35518  004514  0E09               	movlw	9
 35519  004516  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35520                           
 35521                           ; BSR set to: 0
 35522                           ;octave.c: 141: keyPress = 1;
 35523  004518  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35524  00451A                     l2825:
 35525  00451A                     l30026:
 35526                           
 35527                           ; BSR set to: 0
 35528                           ;octave.c: 142: }
 35529                           ;octave.c: 143: if(button_state_now == (0x08000000 | 0x00400000))
 35530  00451A  0E40               	movlw	64
 35531  00451C  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 35532  00451E  E109               	bnz	l30032
 35533  004520  0E08               	movlw	8
 35534  004522  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35535  004524  11D8               	iorwf	_button_state_now& (0+255),w,b
 35536  004526  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35537  004528  A4D8               	btfss	status,2,c
 35538  00452A  D003               	goto	l2826
 35539                           
 35540                           ; BSR set to: 0
 35541                           ;octave.c: 144: {
 35542                           ;octave.c: 145: semitone_temp = 10;
 35543  00452C  0E0A               	movlw	10
 35544  00452E  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35545                           
 35546                           ; BSR set to: 0
 35547                           ;octave.c: 146: keyPress = 1;
 35548  004530  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35549  004532                     l2826:
 35550  004532                     l30032:
 35551                           
 35552                           ; BSR set to: 0
 35553                           ;octave.c: 147: }
 35554                           ;octave.c: 148: if(button_state_now == (0x08000000 | 0x00800000))
 35555  004532  0E80               	movlw	128
 35556  004534  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 35557  004536  E109               	bnz	l30038
 35558  004538  0E08               	movlw	8
 35559  00453A  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35560  00453C  11D8               	iorwf	_button_state_now& (0+255),w,b
 35561  00453E  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35562  004540  A4D8               	btfss	status,2,c
 35563  004542  D003               	goto	l2827
 35564                           
 35565                           ; BSR set to: 0
 35566                           ;octave.c: 149: {
 35567                           ;octave.c: 150: semitone_temp = 11;
 35568  004544  0E0B               	movlw	11
 35569  004546  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35570                           
 35571                           ; BSR set to: 0
 35572                           ;octave.c: 151: keyPress = 1;
 35573  004548  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35574  00454A                     l2827:
 35575  00454A                     l30038:
 35576                           
 35577                           ; BSR set to: 0
 35578                           ;octave.c: 152: }
 35579                           ;octave.c: 153: if(button_state_now == (0x08000000 | 0x01000000))
 35580  00454A  0E09               	movlw	9
 35581  00454C  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35582  00454E  11D8               	iorwf	_button_state_now& (0+255),w,b
 35583  004550  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35584  004552  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35585  004554  A4D8               	btfss	status,2,c
 35586  004556  D003               	goto	l2828
 35587                           
 35588                           ; BSR set to: 0
 35589                           ;octave.c: 154: {
 35590                           ;octave.c: 155: semitone_temp = 12;
 35591  004558  0E0C               	movlw	12
 35592  00455A  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35593                           
 35594                           ; BSR set to: 0
 35595                           ;octave.c: 156: keyPress = 1;
 35596  00455C  8601               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35597  00455E                     l2828:
 35598                           
 35599                           ; BSR set to: 0
 35600                           ;octave.c: 157: }
 35601                           ;octave.c: 159: if(keyPress == 1) {
 35602                           
 35603                           ; BSR set to: 0
 35604  00455E  A601               	btfss	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35605  004560  0012               	return	
 35606                           
 35607                           ; BSR set to: 0
 35608                           ;octave.c: 162: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 35609  004562  A204               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 35610  004564  D00E               	goto	l2830
 35611                           
 35612                           ; BSR set to: 0
 35613  004566  502F               	movf	_NUM_NOTES_PRESSED,w,c
 35614  004568  B4D8               	btfsc	status,2,c
 35615  00456A  D00B               	goto	l2830
 35616                           
 35617                           ; BSR set to: 0
 35618                           ;octave.c: 165: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 35619  00456C  0E00               	movlw	0
 35620  00456E  B003               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 35621  004570  0E01               	movlw	1
 35622  004572  EC52  F04B         	call	_wait_one_pulse
 35623                           
 35624                           ;octave.c: 169: if(note_off_was_sent == 0) {key_press_release_note_off();}
 35625  004576  A202               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 35626  004578  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 35627                           
 35628                           ;octave.c: 172: suppress_note_off = 1;
 35629  00457C  8802               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 35630                           
 35631                           ;octave.c: 174: flag1 = 1;
 35632  00457E  8002               	bsf	_flag1/(0+8),_flag1& (0+7),c
 35633                           
 35634                           ;octave.c: 176: flag2 = 1;
 35635  004580  8E01               	bsf	_flag2/(0+8),_flag2& (0+7),c
 35636  004582                     l2830:
 35637                           
 35638                           ;octave.c: 177: }
 35639                           ;octave.c: 180: if (semitone_temp > 12) {semitone_temp = 12;}
 35640  004582  0100               	movlb	0	; () banked
 35641  004584  51EA               	movf	keyboardTranspose@semitone_temp& (0+255),w,b
 35642  004586  0A80               	xorlw	128
 35643  004588  0F73               	addlw	-141
 35644  00458A  A0D8               	btfss	status,0,c
 35645  00458C  D002               	goto	l2832
 35646                           
 35647                           ; BSR set to: 0
 35648  00458E  0E0C               	movlw	12
 35649  004590  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35650  004592                     l2832:
 35651                           
 35652                           ; BSR set to: 0
 35653                           ;octave.c: 181: if (semitone_temp < -12) {semitone_temp = -12;}
 35654                           
 35655                           ; BSR set to: 0
 35656  004592  51EA               	movf	keyboardTranspose@semitone_temp& (0+255),w,b
 35657  004594  0A80               	xorlw	128
 35658  004596  0F8C               	addlw	140
 35659  004598  B0D8               	btfsc	status,0,c
 35660  00459A  D002               	goto	l2833
 35661                           
 35662                           ; BSR set to: 0
 35663  00459C  0EF4               	movlw	244
 35664  00459E  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35665  0045A0                     l2833:
 35666                           
 35667                           ; BSR set to: 0
 35668                           ;octave.c: 182: semitone = semitone_temp;
 35669                           
 35670                           ; BSR set to: 0
 35671  0045A0  C0EA  F03B         	movff	keyboardTranspose@semitone_temp,_semitone
 35672                           
 35673                           ; BSR set to: 0
 35674                           ;octave.c: 183: printThisNumber(semitone);
 35675  0045A4  503B               	movf	_semitone,w,c
 35676  0045A6  6F60               	movwf	printThisNumber@n& (0+255),b
 35677  0045A8  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 35678  0045AA  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 35679  0045AC  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 35680  0045AE  EC33  F04C         	call	_printThisNumber	;wreg free
 35681                           
 35682                           ;octave.c: 184: keyPress = 0;
 35683  0045B2  9601               	bcf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35684  0045B4  0012               	return	
 35685  0045B6                     __end_of_keyboardTranspose:
 35686                           	opt stack 0
 35687                           tblptru	equ	0xFF8
 35688                           tblptrh	equ	0xFF7
 35689                           tblptrl	equ	0xFF6
 35690                           tablat	equ	0xFF5
 35691                           prodh	equ	0xFF4
 35692                           prodl	equ	0xFF3
 35693                           intcon	equ	0xFF2
 35694                           intcon2	equ	0xFF1
 35695                           indf0	equ	0xFEF
 35696                           postinc0	equ	0xFEE
 35697                           fsr0h	equ	0xFEA
 35698                           fsr0l	equ	0xFE9
 35699                           wreg	equ	0xFE8
 35700                           postinc1	equ	0xFE6
 35701                           postdec1	equ	0xFE5
 35702                           plusw1	equ	0xFE3
 35703                           fsr1h	equ	0xFE2
 35704                           fsr1l	equ	0xFE1
 35705                           indf2	equ	0xFDF
 35706                           postinc2	equ	0xFDE
 35707                           postdec2	equ	0xFDD
 35708                           plusw2	equ	0xFDB
 35709                           fsr2h	equ	0xFDA
 35710                           fsr2l	equ	0xFD9
 35711                           status	equ	0xFD8
 35712                           
 35713 ;; *************** function _wait_one_pulse *****************
 35714 ;; Defined at:
 35715 ;;		line 20 in file "arpeggio.c"
 35716 ;; Parameters:    Size  Location     Type
 35717 ;;  mode            1    wreg     unsigned char 
 35718 ;; Auto vars:     Size  Location     Type
 35719 ;;  mode            1    0[BANK0 ] unsigned char 
 35720 ;; Return value:  Size  Location     Type
 35721 ;;                  1    wreg      void 
 35722 ;; Registers used:
 35723 ;;		wreg, status,2
 35724 ;; Tracked objects:
 35725 ;;		On entry : 0/0
 35726 ;;		On exit  : 0/0
 35727 ;;		Unchanged: 0/0
 35728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35730 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35732 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35733 ;;Total ram usage:        1 bytes
 35734 ;; Hardware stack levels used:    1
 35735 ;; Hardware stack levels required when called:    5
 35736 ;; This function calls:
 35737 ;;		Nothing
 35738 ;; This function is called by:
 35739 ;;		_playThisNotePentatonic
 35740 ;;		_playTriad
 35741 ;;		_playSeventh
 35742 ;;		_playThisNote
 35743 ;;		_playThisNote8
 35744 ;;		_playDiatonicTriadMajor
 35745 ;;		_playDiatonicSeventhMajor
 35746 ;;		_playDiatonicTriadMinor
 35747 ;;		_playDiatonicSeventhMinor
 35748 ;;		_keyboardTranspose
 35749 ;;		_processOctave
 35750 ;; This function uses a non-reentrant model
 35751 ;;
 35752                           
 35753                           	psect	text98
 35754  0096A4                     __ptext98:
 35755                           	opt stack 0
 35756  0096A4                     _wait_one_pulse:
 35757                           	opt stack 20
 35758                           
 35759                           ;incstack = 0
 35760                           ;wait_one_pulse@mode stored from wreg
 35761  0096A4  0100               	movlb	0	; () banked
 35762  0096A6  6F60               	movwf	wait_one_pulse@mode& (0+255),b
 35763                           
 35764                           ;arpeggio.c: 22: lastNoteMode = mode;
 35765  0096A8  0100               	movlb	0	; () banked
 35766  0096AA  A160               	btfss	wait_one_pulse@mode& (0+255),0,b
 35767  0096AC  D002               	goto	u45160
 35768  0096AE  8603               	bsf	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 35769  0096B0  D001               	goto	u45175
 35770  0096B2                     u45160:
 35771  0096B2  9603               	bcf	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 35772  0096B4                     u45175:
 35773                           
 35774                           ;arpeggio.c: 25: if(lastNoteMode == 0) {
 35775  0096B4  B603               	btfsc	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 35776  0096B6  D004               	goto	l5384
 35777                           
 35778                           ;arpeggio.c: 26: finishLastNote = 0;
 35779  0096B8  9C02               	bcf	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 35780                           
 35781                           ;arpeggio.c: 27: TIMER_OVERFLOWS = 0;
 35782  0096BA  0E00               	movlw	0
 35783  0096BC  6E2E               	movwf	_TIMER_OVERFLOWS,c
 35784                           
 35785                           ;arpeggio.c: 28: return;
 35786  0096BE  0012               	return	
 35787  0096C0                     l5384:
 35788                           
 35789                           ;arpeggio.c: 29: }
 35790                           ;arpeggio.c: 32: if(lastNoteMode == 1) {
 35791  0096C0  A603               	btfss	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 35792  0096C2  0012               	return	
 35793                           
 35794                           ;arpeggio.c: 33: finishLastNote = 1;
 35795  0096C4  8C02               	bsf	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 35796                           
 35797                           ;arpeggio.c: 34: TMR0ON = 1;
 35798  0096C6  8ED5               	bsf	4053,7,c	;volatile
 35799  0096C8  AC02               	btfss	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 35800  0096CA  0012               	return	
 35801  0096CC  D7FD               	goto	l5388
 35802  0096CE                     __end_of_wait_one_pulse:
 35803                           	opt stack 0
 35804                           tblptru	equ	0xFF8
 35805                           tblptrh	equ	0xFF7
 35806                           tblptrl	equ	0xFF6
 35807                           tablat	equ	0xFF5
 35808                           prodh	equ	0xFF4
 35809                           prodl	equ	0xFF3
 35810                           intcon	equ	0xFF2
 35811                           intcon2	equ	0xFF1
 35812                           indf0	equ	0xFEF
 35813                           postinc0	equ	0xFEE
 35814                           fsr0h	equ	0xFEA
 35815                           fsr0l	equ	0xFE9
 35816                           wreg	equ	0xFE8
 35817                           postinc1	equ	0xFE6
 35818                           postdec1	equ	0xFE5
 35819                           plusw1	equ	0xFE3
 35820                           fsr1h	equ	0xFE2
 35821                           fsr1l	equ	0xFE1
 35822                           indf2	equ	0xFDF
 35823                           postinc2	equ	0xFDE
 35824                           postdec2	equ	0xFDD
 35825                           plusw2	equ	0xFDB
 35826                           fsr2h	equ	0xFDA
 35827                           fsr2l	equ	0xFD9
 35828                           status	equ	0xFD8
 35829                           
 35830 ;; *************** function _printThisNumber *****************
 35831 ;; Defined at:
 35832 ;;		line 21 in file "octave.c"
 35833 ;; Parameters:    Size  Location     Type
 35834 ;;  n               2    0[BANK0 ] int 
 35835 ;; Auto vars:     Size  Location     Type
 35836 ;;		None
 35837 ;; Return value:  Size  Location     Type
 35838 ;;                  1    wreg      void 
 35839 ;; Registers used:
 35840 ;;		wreg, status,2
 35841 ;; Tracked objects:
 35842 ;;		On entry : 0/0
 35843 ;;		On exit  : 0/0
 35844 ;;		Unchanged: 0/0
 35845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35846 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35849 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35850 ;;Total ram usage:        2 bytes
 35851 ;; Hardware stack levels used:    1
 35852 ;; Hardware stack levels required when called:    5
 35853 ;; This function calls:
 35854 ;;		Nothing
 35855 ;; This function is called by:
 35856 ;;		_keyboardTranspose
 35857 ;;		_processOctave
 35858 ;; This function uses a non-reentrant model
 35859 ;;
 35860                           
 35861                           	psect	text99
 35862  009866                     __ptext99:
 35863                           	opt stack 0
 35864  009866                     _printThisNumber:
 35865                           	opt stack 20
 35866                           
 35867                           ;octave.c: 22: DISPLAY_MODE = 0;
 35868                           
 35869                           ;incstack = 0
 35870  009866  0E00               	movlw	0
 35871  009868  0100               	movlb	0	; () banked
 35872  00986A  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 35873                           
 35874                           ;octave.c: 23: DIGIT_MODE = 0;
 35875  00986C  0E00               	movlw	0
 35876  00986E  6E3A               	movwf	_DIGIT_MODE,c
 35877                           
 35878                           ; BSR set to: 0
 35879                           ;octave.c: 24: number_to_display = n;
 35880  009870  C060  F04B         	movff	printThisNumber@n,_number_to_display
 35881  009874  C061  F04C         	movff	printThisNumber@n+1,_number_to_display+1
 35882                           
 35883                           ; BSR set to: 0
 35884  009878  0012               	return		;funcret
 35885  00987A                     __end_of_printThisNumber:
 35886                           	opt stack 0
 35887                           tblptru	equ	0xFF8
 35888                           tblptrh	equ	0xFF7
 35889                           tblptrl	equ	0xFF6
 35890                           tablat	equ	0xFF5
 35891                           prodh	equ	0xFF4
 35892                           prodl	equ	0xFF3
 35893                           intcon	equ	0xFF2
 35894                           intcon2	equ	0xFF1
 35895                           indf0	equ	0xFEF
 35896                           postinc0	equ	0xFEE
 35897                           fsr0h	equ	0xFEA
 35898                           fsr0l	equ	0xFE9
 35899                           wreg	equ	0xFE8
 35900                           postinc1	equ	0xFE6
 35901                           postdec1	equ	0xFE5
 35902                           plusw1	equ	0xFE3
 35903                           fsr1h	equ	0xFE2
 35904                           fsr1l	equ	0xFE1
 35905                           indf2	equ	0xFDF
 35906                           postinc2	equ	0xFDE
 35907                           postdec2	equ	0xFDD
 35908                           plusw2	equ	0xFDB
 35909                           fsr2h	equ	0xFDA
 35910                           fsr2l	equ	0xFD9
 35911                           status	equ	0xFD8
 35912                           
 35913 ;; *************** function _buttonInputsSerial *****************
 35914 ;; Defined at:
 35915 ;;		line 283 in file "main.c"
 35916 ;; Parameters:    Size  Location     Type
 35917 ;;		None
 35918 ;; Auto vars:     Size  Location     Type
 35919 ;;  i               1    5[BANK0 ] unsigned char 
 35920 ;;  i               1    4[BANK0 ] unsigned char 
 35921 ;; Return value:  Size  Location     Type
 35922 ;;                  1    wreg      void 
 35923 ;; Registers used:
 35924 ;;		wreg, status,2, status,0, cstack
 35925 ;; Tracked objects:
 35926 ;;		On entry : 0/0
 35927 ;;		On exit  : 0/0
 35928 ;;		Unchanged: 0/0
 35929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35931 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35932 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35933 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35934 ;;Total ram usage:        6 bytes
 35935 ;; Hardware stack levels used:    1
 35936 ;; Hardware stack levels required when called:    6
 35937 ;; This function calls:
 35938 ;;		_clock
 35939 ;;		_load
 35940 ;; This function is called by:
 35941 ;;		_digitalInputs
 35942 ;; This function uses a non-reentrant model
 35943 ;;
 35944                           
 35945                           	psect	text100
 35946  0085BA                     __ptext100:
 35947                           	opt stack 0
 35948  0085BA                     _buttonInputsSerial:
 35949                           	opt stack 20
 35950                           
 35951                           ;main.c: 285: button_state_now = 0;
 35952                           
 35953                           ; BSR set to: 0
 35954                           ;incstack = 0
 35955  0085BA  0E00               	movlw	0
 35956  0085BC  0100               	movlb	0	; () banked
 35957  0085BE  6FD8               	movwf	_button_state_now& (0+255),b
 35958  0085C0  0E00               	movlw	0
 35959  0085C2  6FD9               	movwf	(_button_state_now+1)& (0+255),b
 35960  0085C4  0E00               	movlw	0
 35961  0085C6  6FDA               	movwf	(_button_state_now+2)& (0+255),b
 35962  0085C8  0E00               	movlw	0
 35963  0085CA  6FDB               	movwf	(_button_state_now+3)& (0+255),b
 35964                           
 35965                           ;main.c: 286: drum_button_state_now = 0;
 35966  0085CC  0E00               	movlw	0
 35967  0085CE  6E39               	movwf	_drum_button_state_now,c
 35968                           
 35969                           ; BSR set to: 0
 35970                           ;main.c: 287: load();
 35971  0085D0  EC59  F04C         	call	_load	;wreg free
 35972                           
 35973                           ;main.c: 290: for (unsigned char i = 0;i<12;i++){
 35974  0085D4  0E00               	movlw	0
 35975  0085D6  0100               	movlb	0	; () banked
 35976  0085D8  6F64               	movwf	buttonInputsSerial@i& (0+255),b
 35977  0085DA                     l30348:
 35978                           
 35979                           ; BSR set to: 0
 35980  0085DA  0E0B               	movlw	11
 35981  0085DC  6564               	cpfsgt	buttonInputsSerial@i& (0+255),b
 35982  0085DE  D001               	goto	l4957
 35983  0085E0  D009               	goto	u54720
 35984  0085E2                     l4957:
 35985                           
 35986                           ; BSR set to: 0
 35987                           ;main.c: 291: drum_button_state_now = (drum_button_state_now << 1) | (RC4);
 35988                           
 35989                           ; BSR set to: 0
 35990  0085E2  90D8               	bcf	status,0,c
 35991  0085E4  B882               	btfsc	3970,4,c	;volatile
 35992  0085E6  80D8               	bsf	status,0,c
 35993  0085E8  3639               	rlcf	_drum_button_state_now,f,c
 35994                           
 35995                           ; BSR set to: 0
 35996                           ;main.c: 292: clock();
 35997  0085EA  EC5C  F04C         	call	_clock	;wreg free
 35998  0085EE  0100               	movlb	0	; () banked
 35999  0085F0  2B64               	incf	buttonInputsSerial@i& (0+255),f,b
 36000  0085F2  D7F3               	goto	l30348
 36001  0085F4                     u54720:
 36002                           
 36003                           ; BSR set to: 0
 36004                           ;main.c: 293: }
 36005                           ;main.c: 296: for (unsigned char i = 0;i<28;i++){
 36006                           
 36007                           ; BSR set to: 0
 36008  0085F4  0E00               	movlw	0
 36009  0085F6  6F65               	movwf	buttonInputsSerial@i_4472& (0+255),b
 36010  0085F8                     l30362:
 36011                           
 36012                           ; BSR set to: 0
 36013  0085F8  0E1B               	movlw	27
 36014  0085FA  6565               	cpfsgt	buttonInputsSerial@i_4472& (0+255),b
 36015  0085FC  D001               	goto	l4959
 36016  0085FE  0012               	return	
 36017  008600                     l4959:
 36018                           
 36019                           ; BSR set to: 0
 36020                           ;main.c: 297: button_state_now = (button_state_now << 1) | (RC4);
 36021                           
 36022                           ; BSR set to: 0
 36023  008600  90D8               	bcf	status,0,c
 36024  008602  35D8               	rlcf	_button_state_now& (0+255),w,b
 36025  008604  6F60               	movwf	??_buttonInputsSerial& (0+255),b
 36026  008606  35D9               	rlcf	(_button_state_now+1)& (0+255),w,b
 36027  008608  6F61               	movwf	(??_buttonInputsSerial+1)& (0+255),b
 36028  00860A  35DA               	rlcf	(_button_state_now+2)& (0+255),w,b
 36029  00860C  6F62               	movwf	(??_buttonInputsSerial+2)& (0+255),b
 36030  00860E  35DB               	rlcf	(_button_state_now+3)& (0+255),w,b
 36031  008610  6F63               	movwf	(??_buttonInputsSerial+3)& (0+255),b
 36032  008612  A882               	btfss	3970,4,c	;volatile
 36033  008614  D002               	goto	u54740
 36034  008616  0E01               	movlw	1
 36035  008618  D001               	goto	u54750
 36036  00861A                     u54740:
 36037  00861A  0E00               	movlw	0
 36038  00861C                     u54750:
 36039  00861C  1160               	iorwf	??_buttonInputsSerial& (0+255),w,b
 36040  00861E  6FD8               	movwf	_button_state_now& (0+255),b
 36041  008620  5161               	movf	(??_buttonInputsSerial+1)& (0+255),w,b
 36042  008622  6FD9               	movwf	(_button_state_now+1)& (0+255),b
 36043  008624  5162               	movf	(??_buttonInputsSerial+2)& (0+255),w,b
 36044  008626  6FDA               	movwf	(_button_state_now+2)& (0+255),b
 36045  008628  5163               	movf	(??_buttonInputsSerial+3)& (0+255),w,b
 36046  00862A  6FDB               	movwf	(_button_state_now+3)& (0+255),b
 36047                           
 36048                           ; BSR set to: 0
 36049                           ;main.c: 298: clock();
 36050  00862C  EC5C  F04C         	call	_clock	;wreg free
 36051  008630  0100               	movlb	0	; () banked
 36052  008632  2B65               	incf	buttonInputsSerial@i_4472& (0+255),f,b
 36053  008634  D7E1               	goto	l30362
 36054  008636                     __end_of_buttonInputsSerial:
 36055                           	opt stack 0
 36056                           tblptru	equ	0xFF8
 36057                           tblptrh	equ	0xFF7
 36058                           tblptrl	equ	0xFF6
 36059                           tablat	equ	0xFF5
 36060                           prodh	equ	0xFF4
 36061                           prodl	equ	0xFF3
 36062                           intcon	equ	0xFF2
 36063                           intcon2	equ	0xFF1
 36064                           indf0	equ	0xFEF
 36065                           postinc0	equ	0xFEE
 36066                           fsr0h	equ	0xFEA
 36067                           fsr0l	equ	0xFE9
 36068                           wreg	equ	0xFE8
 36069                           postinc1	equ	0xFE6
 36070                           postdec1	equ	0xFE5
 36071                           plusw1	equ	0xFE3
 36072                           fsr1h	equ	0xFE2
 36073                           fsr1l	equ	0xFE1
 36074                           indf2	equ	0xFDF
 36075                           postinc2	equ	0xFDE
 36076                           postdec2	equ	0xFDD
 36077                           plusw2	equ	0xFDB
 36078                           fsr2h	equ	0xFDA
 36079                           fsr2l	equ	0xFD9
 36080                           status	equ	0xFD8
 36081                           
 36082 ;; *************** function _load *****************
 36083 ;; Defined at:
 36084 ;;		line 270 in file "main.c"
 36085 ;; Parameters:    Size  Location     Type
 36086 ;;		None
 36087 ;; Auto vars:     Size  Location     Type
 36088 ;;		None
 36089 ;; Return value:  Size  Location     Type
 36090 ;;                  1    wreg      void 
 36091 ;; Registers used:
 36092 ;;		None
 36093 ;; Tracked objects:
 36094 ;;		On entry : 0/0
 36095 ;;		On exit  : 0/0
 36096 ;;		Unchanged: 0/0
 36097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 36098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36102 ;;Total ram usage:        0 bytes
 36103 ;; Hardware stack levels used:    1
 36104 ;; Hardware stack levels required when called:    5
 36105 ;; This function calls:
 36106 ;;		Nothing
 36107 ;; This function is called by:
 36108 ;;		_buttonInputsSerial
 36109 ;; This function uses a non-reentrant model
 36110 ;;
 36111                           
 36112                           	psect	text101
 36113  0098B2                     __ptext101:
 36114                           	opt stack 0
 36115  0098B2                     _load:
 36116                           	opt stack 20
 36117                           
 36118                           ;main.c: 271: RB1 = 0;
 36119                           
 36120                           ; BSR set to: 0
 36121                           ;incstack = 0
 36122  0098B2  9281               	bcf	3969,1,c	;volatile
 36123                           
 36124                           ;main.c: 273: RB1 = 1;
 36125  0098B4  8281               	bsf	3969,1,c	;volatile
 36126  0098B6  0012               	return		;funcret
 36127  0098B8                     __end_of_load:
 36128                           	opt stack 0
 36129                           tblptru	equ	0xFF8
 36130                           tblptrh	equ	0xFF7
 36131                           tblptrl	equ	0xFF6
 36132                           tablat	equ	0xFF5
 36133                           prodh	equ	0xFF4
 36134                           prodl	equ	0xFF3
 36135                           intcon	equ	0xFF2
 36136                           intcon2	equ	0xFF1
 36137                           indf0	equ	0xFEF
 36138                           postinc0	equ	0xFEE
 36139                           fsr0h	equ	0xFEA
 36140                           fsr0l	equ	0xFE9
 36141                           wreg	equ	0xFE8
 36142                           postinc1	equ	0xFE6
 36143                           postdec1	equ	0xFE5
 36144                           plusw1	equ	0xFE3
 36145                           fsr1h	equ	0xFE2
 36146                           fsr1l	equ	0xFE1
 36147                           indf2	equ	0xFDF
 36148                           postinc2	equ	0xFDE
 36149                           postdec2	equ	0xFDD
 36150                           plusw2	equ	0xFDB
 36151                           fsr2h	equ	0xFDA
 36152                           fsr2l	equ	0xFD9
 36153                           status	equ	0xFD8
 36154                           
 36155 ;; *************** function _clock *****************
 36156 ;; Defined at:
 36157 ;;		line 277 in file "main.c"
 36158 ;; Parameters:    Size  Location     Type
 36159 ;;		None
 36160 ;; Auto vars:     Size  Location     Type
 36161 ;;		None
 36162 ;; Return value:  Size  Location     Type
 36163 ;;                  1    wreg      void 
 36164 ;; Registers used:
 36165 ;;		None
 36166 ;; Tracked objects:
 36167 ;;		On entry : 0/0
 36168 ;;		On exit  : 0/0
 36169 ;;		Unchanged: 0/0
 36170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 36171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36175 ;;Total ram usage:        0 bytes
 36176 ;; Hardware stack levels used:    1
 36177 ;; Hardware stack levels required when called:    5
 36178 ;; This function calls:
 36179 ;;		Nothing
 36180 ;; This function is called by:
 36181 ;;		_buttonInputsSerial
 36182 ;; This function uses a non-reentrant model
 36183 ;;
 36184                           
 36185                           	psect	text102
 36186  0098B8                     __ptext102:
 36187                           	opt stack 0
 36188  0098B8                     _clock:
 36189                           	opt stack 20
 36190                           
 36191                           ;main.c: 278: RC5 = 1;
 36192                           
 36193                           ;incstack = 0
 36194  0098B8  8A82               	bsf	3970,5,c	;volatile
 36195                           
 36196                           ;main.c: 279: RC5 = 0;
 36197  0098BA  9A82               	bcf	3970,5,c	;volatile
 36198  0098BC  0012               	return		;funcret
 36199  0098BE                     __end_of_clock:
 36200                           	opt stack 0
 36201                           tblptru	equ	0xFF8
 36202                           tblptrh	equ	0xFF7
 36203                           tblptrl	equ	0xFF6
 36204                           tablat	equ	0xFF5
 36205                           prodh	equ	0xFF4
 36206                           prodl	equ	0xFF3
 36207                           intcon	equ	0xFF2
 36208                           intcon2	equ	0xFF1
 36209                           indf0	equ	0xFEF
 36210                           postinc0	equ	0xFEE
 36211                           fsr0h	equ	0xFEA
 36212                           fsr0l	equ	0xFE9
 36213                           wreg	equ	0xFE8
 36214                           postinc1	equ	0xFE6
 36215                           postdec1	equ	0xFE5
 36216                           plusw1	equ	0xFE3
 36217                           fsr1h	equ	0xFE2
 36218                           fsr1l	equ	0xFE1
 36219                           indf2	equ	0xFDF
 36220                           postinc2	equ	0xFDE
 36221                           postdec2	equ	0xFDD
 36222                           plusw2	equ	0xFDB
 36223                           fsr2h	equ	0xFDA
 36224                           fsr2l	equ	0xFD9
 36225                           status	equ	0xFD8
 36226                           
 36227 ;; *************** function _analogInputs *****************
 36228 ;; Defined at:
 36229 ;;		line 303 in file "main.c"
 36230 ;; Parameters:    Size  Location     Type
 36231 ;;		None
 36232 ;; Auto vars:     Size  Location     Type
 36233 ;;		None
 36234 ;; Return value:  Size  Location     Type
 36235 ;;                  1    wreg      void 
 36236 ;; Registers used:
 36237 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+9, btemp
      ++10, btemp+11, prodl, prodh, cstack
 36238 ;; Tracked objects:
 36239 ;;		On entry : 0/0
 36240 ;;		On exit  : 0/0
 36241 ;;		Unchanged: 0/0
 36242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 36243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36245 ;;      Temps:          0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 36246 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 36247 ;;Total ram usage:        7 bytes
 36248 ;; Hardware stack levels used:    1
 36249 ;; Hardware stack levels required when called:   11
 36250 ;; This function calls:
 36251 ;;		_readPotentiometers
 36252 ;; This function is called by:
 36253 ;;		_un_block_code
 36254 ;;		_main
 36255 ;; This function uses a non-reentrant model
 36256 ;;
 36257                           
 36258                           	psect	text103
 36259  0092CA                     __ptext103:
 36260                           	opt stack 0
 36261  0092CA                     _analogInputs:
 36262                           	opt stack 16
 36263                           
 36264                           ;main.c: 319: if(ARPEGGIO_ON == 0) {
 36265                           
 36266                           ;incstack = 0
 36267  0092CA  A804               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 36268                           
 36269                           ;main.c: 320: readPotentiometers();
 36270  0092CC  EC98  F008         	call	_readPotentiometers	;wreg free
 36271                           
 36272                           ;main.c: 321: }
 36273                           ;main.c: 324: if(ARPEGGIO_ON == 1) {
 36274  0092D0  A804               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 36275  0092D2  0012               	return	
 36276                           
 36277                           ;main.c: 327: if((TIMER_OVERFLOWS > 0) && (TIMER_OVERFLOWS < (NOTE_LENGTH_PULSES - 2))) 
      +                          {
 36278  0092D4  502E               	movf	_TIMER_OVERFLOWS,w,c
 36279  0092D6  B4D8               	btfsc	status,2,c
 36280  0092D8  0012               	return	
 36281  0092DA  0EFE               	movlw	254
 36282  0092DC  0101               	movlb	1	; () banked
 36283  0092DE  6F9E               	movwf	??_analogInputs& (0+255),b
 36284  0092E0  0EFF               	movlw	255
 36285  0092E2  6F9F               	movwf	(??_analogInputs+1)& (0+255),b
 36286  0092E4  504D               	movf	_NOTE_LENGTH_PULSES,w,c
 36287  0092E6  6FA0               	movwf	(??_analogInputs+2)& (0+255),b
 36288  0092E8  6BA1               	clrf	(??_analogInputs+3)& (0+255),b
 36289  0092EA  519E               	movf	??_analogInputs& (0+255),w,b
 36290  0092EC  27A0               	addwf	(??_analogInputs+2)& (0+255),f,b
 36291  0092EE  519F               	movf	(??_analogInputs+1)& (0+255),w,b
 36292  0092F0  23A1               	addwfc	(??_analogInputs+3)& (0+255),f,b
 36293  0092F2  502E               	movf	_TIMER_OVERFLOWS,w,c
 36294  0092F4  6FA2               	movwf	(??_analogInputs+4)& (0+255),b
 36295  0092F6  6BA3               	clrf	(??_analogInputs+5)& (0+255),b
 36296  0092F8  51A0               	movf	(??_analogInputs+2)& (0+255),w,b
 36297  0092FA  5DA2               	subwf	(??_analogInputs+4)& (0+255),w,b
 36298  0092FC  51A3               	movf	(??_analogInputs+5)& (0+255),w,b
 36299  0092FE  0A80               	xorlw	128
 36300  009300  6FA4               	movwf	(??_analogInputs+6)& (0+255),b
 36301  009302  51A1               	movf	(??_analogInputs+3)& (0+255),w,b
 36302  009304  0A80               	xorlw	128
 36303  009306  59A4               	subwfb	(??_analogInputs+6)& (0+255),w,b
 36304  009308  B0D8               	btfsc	status,0,c
 36305  00930A  0012               	return	
 36306                           
 36307                           ; BSR set to: 1
 36308                           ;main.c: 328: readPotentiometers();
 36309  00930C  EC98  F008         	call	_readPotentiometers	;wreg free
 36310  009310  0012               	return	
 36311  009312                     __end_of_analogInputs:
 36312                           	opt stack 0
 36313                           tblptru	equ	0xFF8
 36314                           tblptrh	equ	0xFF7
 36315                           tblptrl	equ	0xFF6
 36316                           tablat	equ	0xFF5
 36317                           prodh	equ	0xFF4
 36318                           prodl	equ	0xFF3
 36319                           intcon	equ	0xFF2
 36320                           intcon2	equ	0xFF1
 36321                           indf0	equ	0xFEF
 36322                           postinc0	equ	0xFEE
 36323                           fsr0h	equ	0xFEA
 36324                           fsr0l	equ	0xFE9
 36325                           wreg	equ	0xFE8
 36326                           postinc1	equ	0xFE6
 36327                           postdec1	equ	0xFE5
 36328                           plusw1	equ	0xFE3
 36329                           fsr1h	equ	0xFE2
 36330                           fsr1l	equ	0xFE1
 36331                           indf2	equ	0xFDF
 36332                           postinc2	equ	0xFDE
 36333                           postdec2	equ	0xFDD
 36334                           plusw2	equ	0xFDB
 36335                           fsr2h	equ	0xFDA
 36336                           fsr2l	equ	0xFD9
 36337                           status	equ	0xFD8
 36338                           
 36339 ;; *************** function _readPotentiometers *****************
 36340 ;; Defined at:
 36341 ;;		line 34 in file "potentiometers.c"
 36342 ;; Parameters:    Size  Location     Type
 36343 ;;		None
 36344 ;; Auto vars:     Size  Location     Type
 36345 ;;  i               1    6[BANK1 ] unsigned char 
 36346 ;;  i               1    4[BANK1 ] unsigned char 
 36347 ;;  i               1    5[BANK1 ] unsigned char 
 36348 ;; Return value:  Size  Location     Type
 36349 ;;                  1    wreg      void 
 36350 ;; Registers used:
 36351 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+9, btemp
      ++10, btemp+11, prodl, prodh, cstack
 36352 ;; Tracked objects:
 36353 ;;		On entry : 0/0
 36354 ;;		On exit  : 0/0
 36355 ;;		Unchanged: 0/0
 36356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 36357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36358 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 36359 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36360 ;;      Totals:         0       5       7       0       0       0       0       0       0       0       0       0       
      +0       0
 36361 ;;Total ram usage:       12 bytes
 36362 ;; Hardware stack levels used:    1
 36363 ;; Hardware stack levels required when called:   10
 36364 ;; This function calls:
 36365 ;;		_ADC_Read
 36366 ;;		___fladd
 36367 ;;		___flmul
 36368 ;;		___flneg
 36369 ;;		___fltol
 36370 ;;		___xxtofl
 36371 ;;		_map
 36372 ;;		_processPotentiometers
 36373 ;; This function is called by:
 36374 ;;		_analogInputs
 36375 ;; This function uses a non-reentrant model
 36376 ;;
 36377                           
 36378                           	psect	text104
 36379  001130                     __ptext104:
 36380                           	opt stack 0
 36381  001130                     _readPotentiometers:
 36382                           	opt stack 16
 36383                           
 36384                           ;potentiometers.c: 36: static __bit FIRST_READING;
 36385                           ;potentiometers.c: 40: for(unsigned char i=0;i<16;i++){
 36386                           
 36387                           ;incstack = 0
 36388  001130  0E00               	movlw	0
 36389  001132  0101               	movlb	1	; () banked
 36390  001134  6F9C               	movwf	readPotentiometers@i& (0+255),b
 36391  001136                     l30250:
 36392                           
 36393                           ; BSR set to: 1
 36394  001136  0E0F               	movlw	15
 36395  001138  659C               	cpfsgt	readPotentiometers@i& (0+255),b
 36396  00113A  D001               	goto	l4020
 36397  00113C  D02B               	goto	u54520
 36398  00113E                     l4020:
 36399                           
 36400                           ; BSR set to: 1
 36401                           ;potentiometers.c: 42: potentiometer_raw[i] = ADC_Read(i);
 36402                           
 36403                           ; BSR set to: 1
 36404  00113E  519C               	movf	readPotentiometers@i& (0+255),w,b
 36405  001140  ECA3  F04A         	call	_ADC_Read
 36406  001144  0101               	movlb	1	; () banked
 36407  001146  519C               	movf	readPotentiometers@i& (0+255),w,b
 36408  001148  0D02               	mullw	2
 36409  00114A  0E69               	movlw	low _potentiometer_raw
 36410  00114C  24F3               	addwf	prodl,w,c
 36411  00114E  6ED9               	movwf	fsr2l,c
 36412  001150  0E03               	movlw	high _potentiometer_raw
 36413  001152  20F4               	addwfc	prodh,w,c
 36414  001154  6EDA               	movwf	fsr2h,c
 36415  001156  0100               	movlb	0	; () banked
 36416  001158  C060  FFDE         	movff	?_ADC_Read,postinc2
 36417  00115C  C061  FFDD         	movff	?_ADC_Read+1,postdec2
 36418                           
 36419                           ; BSR set to: 0
 36420                           ;potentiometers.c: 51: if (FIRST_READING == 0) {
 36421  001160  B001               	btfsc	readPotentiometers@FIRST_READING/(0+8),readPotentiometers@FIRST_READING& (0+7),c
 36422  001162  D015               	goto	l4022
 36423                           
 36424                           ; BSR set to: 0
 36425                           ;potentiometers.c: 52: ema_sum[i] = potentiometer_raw[i];
 36426  001164  0101               	movlb	1	; () banked
 36427  001166  519C               	movf	readPotentiometers@i& (0+255),w,b
 36428  001168  0D02               	mullw	2
 36429  00116A  0E69               	movlw	low _potentiometer_raw
 36430  00116C  24F3               	addwf	prodl,w,c
 36431  00116E  6ED9               	movwf	fsr2l,c
 36432  001170  0E03               	movlw	high _potentiometer_raw
 36433  001172  20F4               	addwfc	prodh,w,c
 36434  001174  6EDA               	movwf	fsr2h,c
 36435  001176  519C               	movf	readPotentiometers@i& (0+255),w,b
 36436  001178  0D02               	mullw	2
 36437  00117A  0E40               	movlw	low _ema_sum
 36438  00117C  24F3               	addwf	prodl,w,c
 36439  00117E  6EE9               	movwf	fsr0l,c
 36440  001180  0E02               	movlw	high _ema_sum
 36441  001182  20F4               	addwfc	prodh,w,c
 36442  001184  6EEA               	movwf	fsr0h,c
 36443  001186  CFDE FFEE          	movff	postinc2,postinc0
 36444  00118A  CFDD FFED          	movff	postdec2,postdec0
 36445  00118E                     l4022:
 36446                           
 36447                           ; BSR set to: 1
 36448  00118E  0101               	movlb	1	; () banked
 36449  001190  2B9C               	incf	readPotentiometers@i& (0+255),f,b
 36450  001192  D7D1               	goto	l30250
 36451  001194                     u54520:
 36452                           
 36453                           ; BSR set to: 1
 36454                           ;potentiometers.c: 53: }
 36455                           ;potentiometers.c: 54: }
 36456                           ;potentiometers.c: 57: for(unsigned char i=0;i<16;i++){
 36457                           
 36458                           ; BSR set to: 1
 36459  001194  0E00               	movlw	0
 36460  001196  6F9B               	movwf	readPotentiometers@i_3429& (0+255),b
 36461  001198                     l30266:
 36462                           
 36463                           ; BSR set to: 1
 36464  001198  0E0F               	movlw	15
 36465  00119A  659B               	cpfsgt	readPotentiometers@i_3429& (0+255),b
 36466  00119C  D001               	goto	l4023
 36467  00119E  D0A1               	goto	u54540
 36468  0011A0                     l4023:
 36469                           
 36470                           ; BSR set to: 1
 36471                           ;potentiometers.c: 58: ema_sum[i] = (ema_alpha * potentiometer_raw[i]) + ((1 - ema_alpha
      +                          ) * ema_sum[i]);
 36472                           
 36473                           ; BSR set to: 1
 36474  0011A0  519B               	movf	readPotentiometers@i_3429& (0+255),w,b
 36475  0011A2  0D02               	mullw	2
 36476  0011A4  0E40               	movlw	low _ema_sum
 36477  0011A6  24F3               	addwf	prodl,w,c
 36478  0011A8  6ED9               	movwf	fsr2l,c
 36479  0011AA  0E02               	movlw	high _ema_sum
 36480  0011AC  20F4               	addwfc	prodh,w,c
 36481  0011AE  6EDA               	movwf	fsr2h,c
 36482  0011B0  CFDE F060          	movff	postinc2,___xxtofl@val
 36483  0011B4  CFDD F061          	movff	postdec2,___xxtofl@val+1
 36484  0011B8  0100               	movlb	0	; () banked
 36485  0011BA  0E00               	movlw	0
 36486  0011BC  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 36487  0011BE  0EFF               	movlw	-1
 36488  0011C0  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 36489  0011C2  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 36490  0011C4  0E01               	movlw	1
 36491  0011C6  EC57  F02F         	call	___xxtofl
 36492  0011CA  C060  F072         	movff	?___xxtofl,___flmul@a
 36493  0011CE  C061  F073         	movff	?___xxtofl+1,___flmul@a+1
 36494  0011D2  C062  F074         	movff	?___xxtofl+2,___flmul@a+2
 36495  0011D6  C063  F075         	movff	?___xxtofl+3,___flmul@a+3
 36496  0011DA  0E00               	movlw	0
 36497  0011DC  0100               	movlb	0	; () banked
 36498  0011DE  6FA8               	movwf	___fladd@a& (0+255),b
 36499  0011E0  0E00               	movlw	0
 36500  0011E2  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 36501  0011E4  0E80               	movlw	128
 36502  0011E6  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 36503  0011E8  0E3F               	movlw	63
 36504  0011EA  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 36505  0011EC  C104  F0A0         	movff	_ema_alpha,___flneg@f1
 36506  0011F0  C105  F0A1         	movff	_ema_alpha+1,___flneg@f1+1
 36507  0011F4  C106  F0A2         	movff	_ema_alpha+2,___flneg@f1+2
 36508  0011F8  C107  F0A3         	movff	_ema_alpha+3,___flneg@f1+3
 36509  0011FC  EC0C  F04B         	call	___flneg	;wreg free
 36510  001200  C0A0  F0A4         	movff	?___flneg,___fladd@b
 36511  001204  C0A1  F0A5         	movff	?___flneg+1,___fladd@b+1
 36512  001208  C0A2  F0A6         	movff	?___flneg+2,___fladd@b+2
 36513  00120C  C0A3  F0A7         	movff	?___flneg+3,___fladd@b+3
 36514  001210  EC00  F019         	call	___fladd	;wreg free
 36515  001214  C0A4  F06E         	movff	?___fladd,___flmul@b
 36516  001218  C0A5  F06F         	movff	?___fladd+1,___flmul@b+1
 36517  00121C  C0A6  F070         	movff	?___fladd+2,___flmul@b+2
 36518  001220  C0A7  F071         	movff	?___fladd+3,___flmul@b+3
 36519  001224  EC57  F017         	call	___flmul	;wreg free
 36520  001228  C06E  F197         	movff	?___flmul,_readPotentiometers$5899
 36521  00122C  C06F  F198         	movff	?___flmul+1,_readPotentiometers$5899+1
 36522  001230  C070  F199         	movff	?___flmul+2,_readPotentiometers$5899+2
 36523  001234  C071  F19A         	movff	?___flmul+3,_readPotentiometers$5899+3
 36524                           
 36525                           ;potentiometers.c: 58: ema_sum[i] = (ema_alpha * potentiometer_raw[i]) + ((1 - ema_alpha
      +                          ) * ema_sum[i]);
 36526  001238  C197  F0A8         	movff	_readPotentiometers$5899,___fladd@a
 36527  00123C  C198  F0A9         	movff	_readPotentiometers$5899+1,___fladd@a+1
 36528  001240  C199  F0AA         	movff	_readPotentiometers$5899+2,___fladd@a+2
 36529  001244  C19A  F0AB         	movff	_readPotentiometers$5899+3,___fladd@a+3
 36530  001248  C104  F072         	movff	_ema_alpha,___flmul@a
 36531  00124C  C105  F073         	movff	_ema_alpha+1,___flmul@a+1
 36532  001250  C106  F074         	movff	_ema_alpha+2,___flmul@a+2
 36533  001254  C107  F075         	movff	_ema_alpha+3,___flmul@a+3
 36534  001258  0101               	movlb	1	; () banked
 36535  00125A  519B               	movf	readPotentiometers@i_3429& (0+255),w,b
 36536  00125C  0D02               	mullw	2
 36537  00125E  0E69               	movlw	low _potentiometer_raw
 36538  001260  24F3               	addwf	prodl,w,c
 36539  001262  6ED9               	movwf	fsr2l,c
 36540  001264  0E03               	movlw	high _potentiometer_raw
 36541  001266  20F4               	addwfc	prodh,w,c
 36542  001268  6EDA               	movwf	fsr2h,c
 36543  00126A  CFDE F060          	movff	postinc2,___xxtofl@val
 36544  00126E  CFDD F061          	movff	postdec2,___xxtofl@val+1
 36545  001272  0100               	movlb	0	; () banked
 36546  001274  0E00               	movlw	0
 36547  001276  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 36548  001278  0EFF               	movlw	-1
 36549  00127A  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 36550  00127C  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 36551  00127E  0E01               	movlw	1
 36552  001280  EC57  F02F         	call	___xxtofl
 36553  001284  C060  F06E         	movff	?___xxtofl,___flmul@b
 36554  001288  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 36555  00128C  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 36556  001290  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 36557  001294  EC57  F017         	call	___flmul	;wreg free
 36558  001298  C06E  F0A4         	movff	?___flmul,___fladd@b
 36559  00129C  C06F  F0A5         	movff	?___flmul+1,___fladd@b+1
 36560  0012A0  C070  F0A6         	movff	?___flmul+2,___fladd@b+2
 36561  0012A4  C071  F0A7         	movff	?___flmul+3,___fladd@b+3
 36562  0012A8  EC00  F019         	call	___fladd	;wreg free
 36563  0012AC  C0A4  F0B8         	movff	?___fladd,___fltol@f1
 36564  0012B0  C0A5  F0B9         	movff	?___fladd+1,___fltol@f1+1
 36565  0012B4  C0A6  F0BA         	movff	?___fladd+2,___fltol@f1+2
 36566  0012B8  C0A7  F0BB         	movff	?___fladd+3,___fltol@f1+3
 36567  0012BC  EC21  F037         	call	___fltol	;wreg free
 36568  0012C0  0101               	movlb	1	; () banked
 36569  0012C2  519B               	movf	readPotentiometers@i_3429& (0+255),w,b
 36570  0012C4  0D02               	mullw	2
 36571  0012C6  0E40               	movlw	low _ema_sum
 36572  0012C8  24F3               	addwf	prodl,w,c
 36573  0012CA  6ED9               	movwf	fsr2l,c
 36574  0012CC  0E02               	movlw	high _ema_sum
 36575  0012CE  20F4               	addwfc	prodh,w,c
 36576  0012D0  6EDA               	movwf	fsr2h,c
 36577  0012D2  0100               	movlb	0	; () banked
 36578  0012D4  C0B8  FFDE         	movff	?___fltol,postinc2
 36579  0012D8  C0B9  FFDD         	movff	?___fltol+1,postdec2
 36580                           
 36581                           ; BSR set to: 0
 36582  0012DC  0101               	movlb	1	; () banked
 36583  0012DE  2B9B               	incf	readPotentiometers@i_3429& (0+255),f,b
 36584  0012E0  D75B               	goto	l30266
 36585  0012E2                     u54540:
 36586                           
 36587                           ; BSR set to: 1
 36588                           ;potentiometers.c: 59: }
 36589                           ;potentiometers.c: 64: for(unsigned char i = 0; i<16; i++){
 36590                           
 36591                           ; BSR set to: 1
 36592  0012E2  0E00               	movlw	0
 36593  0012E4  6F9D               	movwf	readPotentiometers@i_3430& (0+255),b
 36594  0012E6                     l30278:
 36595                           
 36596                           ; BSR set to: 1
 36597  0012E6  0E0F               	movlw	15
 36598  0012E8  659D               	cpfsgt	readPotentiometers@i_3430& (0+255),b
 36599  0012EA  D001               	goto	l4025
 36600  0012EC  D238               	goto	u54700
 36601  0012EE                     l4025:
 36602                           
 36603                           ; BSR set to: 1
 36604                           ;potentiometers.c: 74: static unsigned long count;
 36605                           ;potentiometers.c: 75: count++;
 36606                           
 36607                           ; BSR set to: 1
 36608  0012EE  0E01               	movlw	1
 36609  0012F0  0102               	movlb	2	; () banked
 36610  0012F2  2760               	addwf	readPotentiometers@count& (0+255),f,b
 36611  0012F4  0E00               	movlw	0
 36612  0012F6  2361               	addwfc	(readPotentiometers@count+1)& (0+255),f,b
 36613  0012F8  2362               	addwfc	(readPotentiometers@count+2)& (0+255),f,b
 36614  0012FA  2363               	addwfc	(readPotentiometers@count+3)& (0+255),f,b
 36615                           
 36616                           ; BSR set to: 2
 36617                           ;potentiometers.c: 78: if (FIRST_READING == 0) {potentiometer_filtered_last[i] = ema_sum
      +                          [i];}
 36618  0012FC  B001               	btfsc	readPotentiometers@FIRST_READING/(0+8),readPotentiometers@FIRST_READING& (0+7),c
 36619  0012FE  D015               	goto	l4029
 36620                           
 36621                           ; BSR set to: 2
 36622  001300  0101               	movlb	1	; () banked
 36623  001302  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 36624  001304  0D02               	mullw	2
 36625  001306  0E40               	movlw	low _ema_sum
 36626  001308  24F3               	addwf	prodl,w,c
 36627  00130A  6ED9               	movwf	fsr2l,c
 36628  00130C  0E02               	movlw	high _ema_sum
 36629  00130E  20F4               	addwfc	prodh,w,c
 36630  001310  6EDA               	movwf	fsr2h,c
 36631  001312  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 36632  001314  0D02               	mullw	2
 36633  001316  0E00               	movlw	low _potentiometer_filtered_last
 36634  001318  24F3               	addwf	prodl,w,c
 36635  00131A  6EE9               	movwf	fsr0l,c
 36636  00131C  0E02               	movlw	high _potentiometer_filtered_last
 36637  00131E  20F4               	addwfc	prodh,w,c
 36638  001320  6EEA               	movwf	fsr0h,c
 36639  001322  CFDE FFEE          	movff	postinc2,postinc0
 36640  001326  CFDD FFED          	movff	postdec2,postdec0
 36641  00132A                     l4029:
 36642                           
 36643                           ;potentiometers.c: 80: if (((int)(ema_sum[i] - potentiometer_filtered_last[i]) >= HYST_V
      +                          AL) || ((int)(potentiometer_filtered_last[i] - ema_sum[i]) >= HYST_VAL)) {
 36644                           
 36645                           ; BSR set to: 1
 36646  00132A  0101               	movlb	1	; () banked
 36647  00132C  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 36648  00132E  0D02               	mullw	2
 36649  001330  0E40               	movlw	low _ema_sum
 36650  001332  24F3               	addwf	prodl,w,c
 36651  001334  6ED9               	movwf	fsr2l,c
 36652  001336  0E02               	movlw	high _ema_sum
 36653  001338  20F4               	addwfc	prodh,w,c
 36654  00133A  6EDA               	movwf	fsr2h,c
 36655  00133C  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 36656  001340  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 36657  001344  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 36658  001346  0D02               	mullw	2
 36659  001348  0E00               	movlw	low _potentiometer_filtered_last
 36660  00134A  24F3               	addwf	prodl,w,c
 36661  00134C  6ED9               	movwf	fsr2l,c
 36662  00134E  0E02               	movlw	high _potentiometer_filtered_last
 36663  001350  20F4               	addwfc	prodh,w,c
 36664  001352  6EDA               	movwf	fsr2h,c
 36665  001354  CFDE F0C4          	movff	postinc2,??_readPotentiometers+2
 36666  001358  CFDD F0C5          	movff	postdec2,??_readPotentiometers+3
 36667  00135C  0100               	movlb	0	; () banked
 36668  00135E  1FC4               	comf	(??_readPotentiometers+2)& (0+255),f,b
 36669  001360  1FC5               	comf	(??_readPotentiometers+3)& (0+255),f,b
 36670  001362  4BC4               	infsnz	(??_readPotentiometers+2)& (0+255),f,b
 36671  001364  2BC5               	incf	(??_readPotentiometers+3)& (0+255),f,b
 36672  001366  51C2               	movf	??_readPotentiometers& (0+255),w,b
 36673  001368  27C4               	addwf	(??_readPotentiometers+2)& (0+255),f,b
 36674  00136A  51C3               	movf	(??_readPotentiometers+1)& (0+255),w,b
 36675  00136C  23C5               	addwfc	(??_readPotentiometers+3)& (0+255),f,b
 36676  00136E  0101               	movlb	1	; () banked
 36677  001370  51F3               	movf	_HYST_VAL& (0+255),w,b
 36678  001372  0100               	movlb	0	; () banked
 36679  001374  5DC4               	subwf	(??_readPotentiometers+2)& (0+255),w,b
 36680  001376  51C5               	movf	(??_readPotentiometers+3)& (0+255),w,b
 36681  001378  0A80               	xorlw	128
 36682  00137A  6FC6               	movwf	(??_readPotentiometers+4)& (0+255),b
 36683  00137C  0101               	movlb	1	; () banked
 36684  00137E  51F4               	movf	(_HYST_VAL+1)& (0+255),w,b
 36685  001380  0A80               	xorlw	128
 36686  001382  0100               	movlb	0	; () banked
 36687  001384  59C6               	subwfb	(??_readPotentiometers+4)& (0+255),w,b
 36688  001386  B0D8               	btfsc	status,0,c
 36689  001388  D030               	goto	u54580
 36690                           
 36691                           ; BSR set to: 0
 36692  00138A  0101               	movlb	1	; () banked
 36693  00138C  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 36694  00138E  0D02               	mullw	2
 36695  001390  0E00               	movlw	low _potentiometer_filtered_last
 36696  001392  24F3               	addwf	prodl,w,c
 36697  001394  6ED9               	movwf	fsr2l,c
 36698  001396  0E02               	movlw	high _potentiometer_filtered_last
 36699  001398  20F4               	addwfc	prodh,w,c
 36700  00139A  6EDA               	movwf	fsr2h,c
 36701  00139C  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 36702  0013A0  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 36703  0013A4  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 36704  0013A6  0D02               	mullw	2
 36705  0013A8  0E40               	movlw	low _ema_sum
 36706  0013AA  24F3               	addwf	prodl,w,c
 36707  0013AC  6ED9               	movwf	fsr2l,c
 36708  0013AE  0E02               	movlw	high _ema_sum
 36709  0013B0  20F4               	addwfc	prodh,w,c
 36710  0013B2  6EDA               	movwf	fsr2h,c
 36711  0013B4  CFDE F0C4          	movff	postinc2,??_readPotentiometers+2
 36712  0013B8  CFDD F0C5          	movff	postdec2,??_readPotentiometers+3
 36713  0013BC  0100               	movlb	0	; () banked
 36714  0013BE  1FC4               	comf	(??_readPotentiometers+2)& (0+255),f,b
 36715  0013C0  1FC5               	comf	(??_readPotentiometers+3)& (0+255),f,b
 36716  0013C2  4BC4               	infsnz	(??_readPotentiometers+2)& (0+255),f,b
 36717  0013C4  2BC5               	incf	(??_readPotentiometers+3)& (0+255),f,b
 36718  0013C6  51C2               	movf	??_readPotentiometers& (0+255),w,b
 36719  0013C8  27C4               	addwf	(??_readPotentiometers+2)& (0+255),f,b
 36720  0013CA  51C3               	movf	(??_readPotentiometers+1)& (0+255),w,b
 36721  0013CC  23C5               	addwfc	(??_readPotentiometers+3)& (0+255),f,b
 36722  0013CE  0101               	movlb	1	; () banked
 36723  0013D0  51F3               	movf	_HYST_VAL& (0+255),w,b
 36724  0013D2  0100               	movlb	0	; () banked
 36725  0013D4  5DC4               	subwf	(??_readPotentiometers+2)& (0+255),w,b
 36726  0013D6  51C5               	movf	(??_readPotentiometers+3)& (0+255),w,b
 36727  0013D8  0A80               	xorlw	128
 36728  0013DA  6FC6               	movwf	(??_readPotentiometers+4)& (0+255),b
 36729  0013DC  0101               	movlb	1	; () banked
 36730  0013DE  51F4               	movf	(_HYST_VAL+1)& (0+255),w,b
 36731  0013E0  0A80               	xorlw	128
 36732  0013E2  0100               	movlb	0	; () banked
 36733  0013E4  59C6               	subwfb	(??_readPotentiometers+4)& (0+255),w,b
 36734  0013E6  A0D8               	btfss	status,0,c
 36735  0013E8  D1A5               	goto	l4030
 36736  0013EA                     u54580:
 36737                           
 36738                           ; BSR set to: 0
 36739                           ;potentiometers.c: 83: if((i==iterator_focus) || (iterator_focus==255)) {count = 0; coun
      +                          t_ISR = 0;}
 36740                           
 36741                           ; BSR set to: 0
 36742  0013EA  51FD               	movf	_iterator_focus& (0+255),w,b
 36743  0013EC  0101               	movlb	1	; () banked
 36744  0013EE  199D               	xorwf	readPotentiometers@i_3430& (0+255),w,b
 36745  0013F0  B4D8               	btfsc	status,2,c
 36746  0013F2  D004               	goto	u54600
 36747                           
 36748                           ; BSR set to: 1
 36749  0013F4  0100               	movlb	0	; () banked
 36750  0013F6  29FD               	incf	_iterator_focus& (0+255),w,b
 36751  0013F8  A4D8               	btfss	status,2,c
 36752  0013FA  D011               	goto	l4033
 36753  0013FC                     u54600:
 36754                           
 36755                           ; BSR set to: 0
 36756  0013FC  0E00               	movlw	0
 36757  0013FE  0102               	movlb	2	; () banked
 36758  001400  6F60               	movwf	readPotentiometers@count& (0+255),b
 36759  001402  0E00               	movlw	0
 36760  001404  6F61               	movwf	(readPotentiometers@count+1)& (0+255),b
 36761  001406  0E00               	movlw	0
 36762  001408  6F62               	movwf	(readPotentiometers@count+2)& (0+255),b
 36763  00140A  0E00               	movlw	0
 36764  00140C  6F63               	movwf	(readPotentiometers@count+3)& (0+255),b
 36765  00140E  0E00               	movlw	0
 36766  001410  6F64               	movwf	_count_ISR& (0+255),b
 36767  001412  0E00               	movlw	0
 36768  001414  6F65               	movwf	(_count_ISR+1)& (0+255),b
 36769  001416  0E00               	movlw	0
 36770  001418  6F66               	movwf	(_count_ISR+2)& (0+255),b
 36771  00141A  0E00               	movlw	0
 36772  00141C  6F67               	movwf	(_count_ISR+3)& (0+255),b
 36773  00141E                     l4033:
 36774                           
 36775                           ;potentiometers.c: 85: HYST_VAL = 8;
 36776  00141E  0E00               	movlw	0
 36777  001420  0101               	movlb	1	; () banked
 36778  001422  6FF4               	movwf	(_HYST_VAL+1)& (0+255),b
 36779  001424  0E08               	movlw	8
 36780  001426  6FF3               	movwf	_HYST_VAL& (0+255),b
 36781                           
 36782                           ; BSR set to: 1
 36783                           ;potentiometers.c: 92: if(iterator_focus == 255) {iterator_focus = i;}
 36784  001428  0100               	movlb	0	; () banked
 36785  00142A  29FD               	incf	_iterator_focus& (0+255),w,b
 36786  00142C  B4D8               	btfsc	status,2,c
 36787                           
 36788                           ; BSR set to: 0
 36789  00142E  C19D  F0FD         	movff	readPotentiometers@i_3430,_iterator_focus
 36790                           
 36791                           ; BSR set to: 0
 36792                           ;potentiometers.c: 93: potentiometer_filtered_now[i] = ema_sum[i];
 36793                           
 36794                           ; BSR set to: 0
 36795  001432  0101               	movlb	1	; () banked
 36796  001434  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 36797  001436  0D02               	mullw	2
 36798  001438  0E40               	movlw	low _ema_sum
 36799  00143A  24F3               	addwf	prodl,w,c
 36800  00143C  6ED9               	movwf	fsr2l,c
 36801  00143E  0E02               	movlw	high _ema_sum
 36802  001440  20F4               	addwfc	prodh,w,c
 36803  001442  6EDA               	movwf	fsr2h,c
 36804  001444  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 36805  001446  0D02               	mullw	2
 36806  001448  0E20               	movlw	low _potentiometer_filtered_now
 36807  00144A  24F3               	addwf	prodl,w,c
 36808  00144C  6EE9               	movwf	fsr0l,c
 36809  00144E  0E02               	movlw	high _potentiometer_filtered_now
 36810  001450  20F4               	addwfc	prodh,w,c
 36811  001452  6EEA               	movwf	fsr0h,c
 36812  001454  CFDE FFEE          	movff	postinc2,postinc0
 36813  001458  CFDD FFED          	movff	postdec2,postdec0
 36814                           
 36815                           ; BSR set to: 1
 36816                           ;potentiometers.c: 96: if(inputPotsArray[i].controller_resolution == 0) {
 36817  00145C  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 36818  00145E  0D03               	mullw	3
 36819  001460  0E88               	movlw	low _inputPotsArray
 36820  001462  24F3               	addwf	prodl,w,c
 36821  001464  6ED9               	movwf	fsr2l,c
 36822  001466  0E02               	movlw	high _inputPotsArray
 36823  001468  20F4               	addwfc	prodh,w,c
 36824  00146A  6EDA               	movwf	fsr2h,c
 36825  00146C  0102               	movlb	2	; () banked
 36826  00146E  B0DF               	btfsc	indf2,0,c
 36827  001470  D09C               	goto	l4039
 36828                           
 36829                           ; BSR set to: 2
 36830                           ;potentiometers.c: 97: potentiometer_filtered_now[i] = map(potentiometer_filtered_now[i]
      +                          , 0, 0x3F50, 0, 0x3FFF);
 36831  001472  0101               	movlb	1	; () banked
 36832  001474  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 36833  001476  0D02               	mullw	2
 36834  001478  0E20               	movlw	low _potentiometer_filtered_now
 36835  00147A  24F3               	addwf	prodl,w,c
 36836  00147C  6ED9               	movwf	fsr2l,c
 36837  00147E  0E02               	movlw	high _potentiometer_filtered_now
 36838  001480  20F4               	addwfc	prodh,w,c
 36839  001482  6EDA               	movwf	fsr2h,c
 36840  001484  CFDE F06E          	movff	postinc2,map@x
 36841  001488  CFDD F06F          	movff	postdec2,map@x+1
 36842  00148C  0100               	movlb	0	; () banked
 36843  00148E  0E00               	movlw	0
 36844  001490  BF6F               	btfsc	(map@x+1)& (0+255),7,b
 36845  001492  0EFF               	movlw	-1
 36846  001494  6F70               	movwf	(map@x+2)& (0+255),b
 36847  001496  6F71               	movwf	(map@x+3)& (0+255),b
 36848  001498  0E00               	movlw	0
 36849  00149A  6F72               	movwf	map@in_min& (0+255),b
 36850  00149C  0E00               	movlw	0
 36851  00149E  6F73               	movwf	(map@in_min+1)& (0+255),b
 36852  0014A0  0E00               	movlw	0
 36853  0014A2  6F74               	movwf	(map@in_min+2)& (0+255),b
 36854  0014A4  0E00               	movlw	0
 36855  0014A6  6F75               	movwf	(map@in_min+3)& (0+255),b
 36856  0014A8  0E50               	movlw	80
 36857  0014AA  6F76               	movwf	map@in_max& (0+255),b
 36858  0014AC  0E3F               	movlw	63
 36859  0014AE  6F77               	movwf	(map@in_max+1)& (0+255),b
 36860  0014B0  0E00               	movlw	0
 36861  0014B2  6F78               	movwf	(map@in_max+2)& (0+255),b
 36862  0014B4  0E00               	movlw	0
 36863  0014B6  6F79               	movwf	(map@in_max+3)& (0+255),b
 36864  0014B8  0E00               	movlw	0
 36865  0014BA  6F7A               	movwf	map@out_min& (0+255),b
 36866  0014BC  0E00               	movlw	0
 36867  0014BE  6F7B               	movwf	(map@out_min+1)& (0+255),b
 36868  0014C0  0E00               	movlw	0
 36869  0014C2  6F7C               	movwf	(map@out_min+2)& (0+255),b
 36870  0014C4  0E00               	movlw	0
 36871  0014C6  6F7D               	movwf	(map@out_min+3)& (0+255),b
 36872  0014C8  0EFF               	movlw	255
 36873  0014CA  6F7E               	movwf	map@out_max& (0+255),b
 36874  0014CC  0E3F               	movlw	63
 36875  0014CE  6F7F               	movwf	(map@out_max+1)& (0+255),b
 36876  0014D0  0E00               	movlw	0
 36877  0014D2  6F80               	movwf	(map@out_max+2)& (0+255),b
 36878  0014D4  0E00               	movlw	0
 36879  0014D6  6F81               	movwf	(map@out_max+3)& (0+255),b
 36880  0014D8  ECD2  F032         	call	_map	;wreg free
 36881  0014DC  0101               	movlb	1	; () banked
 36882  0014DE  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 36883  0014E0  0D02               	mullw	2
 36884  0014E2  0E20               	movlw	low _potentiometer_filtered_now
 36885  0014E4  24F3               	addwf	prodl,w,c
 36886  0014E6  6ED9               	movwf	fsr2l,c
 36887  0014E8  0E02               	movlw	high _potentiometer_filtered_now
 36888  0014EA  20F4               	addwfc	prodh,w,c
 36889  0014EC  6EDA               	movwf	fsr2h,c
 36890  0014EE  0100               	movlb	0	; () banked
 36891  0014F0  C06E  FFDE         	movff	?_map,postinc2
 36892  0014F4  C06F  FFDD         	movff	?_map+1,postdec2
 36893                           
 36894                           ; BSR set to: 0
 36895                           ;potentiometers.c: 98: potentiometer_filtered_now[i] = potentiometer_filtered_now[i] >> 
      +                          3;
 36896  0014F8  0101               	movlb	1	; () banked
 36897  0014FA  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 36898  0014FC  0D02               	mullw	2
 36899  0014FE  0E20               	movlw	low _potentiometer_filtered_now
 36900  001500  24F3               	addwf	prodl,w,c
 36901  001502  6ED9               	movwf	fsr2l,c
 36902  001504  0E02               	movlw	high _potentiometer_filtered_now
 36903  001506  20F4               	addwfc	prodh,w,c
 36904  001508  6EDA               	movwf	fsr2h,c
 36905  00150A  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 36906  00150E  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 36907  001512  0100               	movlb	0	; () banked
 36908  001514  35C3               	rlcf	(??_readPotentiometers+1)& (0+255),w,b
 36909  001516  33C3               	rrcf	(??_readPotentiometers+1)& (0+255),f,b
 36910  001518  33C2               	rrcf	??_readPotentiometers& (0+255),f,b
 36911  00151A  35C3               	rlcf	(??_readPotentiometers+1)& (0+255),w,b
 36912  00151C  33C3               	rrcf	(??_readPotentiometers+1)& (0+255),f,b
 36913  00151E  33C2               	rrcf	??_readPotentiometers& (0+255),f,b
 36914  001520  35C3               	rlcf	(??_readPotentiometers+1)& (0+255),w,b
 36915  001522  33C3               	rrcf	(??_readPotentiometers+1)& (0+255),f,b
 36916  001524  33C2               	rrcf	??_readPotentiometers& (0+255),f,b
 36917  001526  0101               	movlb	1	; () banked
 36918  001528  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 36919  00152A  0D02               	mullw	2
 36920  00152C  0E20               	movlw	low _potentiometer_filtered_now
 36921  00152E  24F3               	addwf	prodl,w,c
 36922  001530  6ED9               	movwf	fsr2l,c
 36923  001532  0E02               	movlw	high _potentiometer_filtered_now
 36924  001534  20F4               	addwfc	prodh,w,c
 36925  001536  6EDA               	movwf	fsr2h,c
 36926  001538  C0C2  FFDE         	movff	??_readPotentiometers,postinc2
 36927  00153C  C0C3  FFDD         	movff	??_readPotentiometers+1,postdec2
 36928                           
 36929                           ; BSR set to: 1
 36930                           ;potentiometers.c: 99: if(potentiometer_filtered_now[i] < 0){potentiometer_filtered_now[
      +                          i] = 0;}
 36931  001540  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 36932  001542  0D02               	mullw	2
 36933  001544  0E20               	movlw	low _potentiometer_filtered_now
 36934  001546  24F3               	addwf	prodl,w,c
 36935  001548  6ED9               	movwf	fsr2l,c
 36936  00154A  0E02               	movlw	high _potentiometer_filtered_now
 36937  00154C  20F4               	addwfc	prodh,w,c
 36938  00154E  6EDA               	movwf	fsr2h,c
 36939  001550  0E01               	movlw	1
 36940  001552  AEDB               	btfss	plusw2,7,c
 36941  001554  D00C               	goto	l4038
 36942                           
 36943                           ; BSR set to: 1
 36944  001556  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 36945  001558  0D02               	mullw	2
 36946  00155A  0E20               	movlw	low _potentiometer_filtered_now
 36947  00155C  24F3               	addwf	prodl,w,c
 36948  00155E  6ED9               	movwf	fsr2l,c
 36949  001560  0E02               	movlw	high _potentiometer_filtered_now
 36950  001562  20F4               	addwfc	prodh,w,c
 36951  001564  6EDA               	movwf	fsr2h,c
 36952  001566  0E00               	movlw	0
 36953  001568  6EDE               	movwf	postinc2,c
 36954  00156A  0E00               	movlw	0
 36955  00156C  6EDD               	movwf	postdec2,c
 36956  00156E                     l4038:
 36957                           
 36958                           ; BSR set to: 1
 36959                           ;potentiometers.c: 100: if(potentiometer_filtered_now[i] > 127){potentiometer_filtered_n
      +                          ow[i] = 127;}
 36960  00156E  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 36961  001570  0D02               	mullw	2
 36962  001572  0E20               	movlw	low _potentiometer_filtered_now
 36963  001574  24F3               	addwf	prodl,w,c
 36964  001576  6ED9               	movwf	fsr2l,c
 36965  001578  0E02               	movlw	high _potentiometer_filtered_now
 36966  00157A  20F4               	addwfc	prodh,w,c
 36967  00157C  6EDA               	movwf	fsr2h,c
 36968  00157E  0E01               	movlw	1
 36969  001580  BEDB               	btfsc	plusw2,7,c
 36970  001582  D013               	goto	l4039
 36971  001584  0E01               	movlw	1
 36972  001586  50DB               	movf	plusw2,w,c
 36973  001588  E104               	bnz	u54640
 36974  00158A  0E80               	movlw	128
 36975  00158C  5CDE               	subwf	postinc2,w,c
 36976  00158E  A0D8               	btfss	status,0,c
 36977  001590  D00C               	goto	l4039
 36978  001592                     u54640:
 36979                           
 36980                           ; BSR set to: 1
 36981  001592  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 36982  001594  0D02               	mullw	2
 36983  001596  0E20               	movlw	low _potentiometer_filtered_now
 36984  001598  24F3               	addwf	prodl,w,c
 36985  00159A  6ED9               	movwf	fsr2l,c
 36986  00159C  0E02               	movlw	high _potentiometer_filtered_now
 36987  00159E  20F4               	addwfc	prodh,w,c
 36988  0015A0  6EDA               	movwf	fsr2h,c
 36989  0015A2  0E7F               	movlw	127
 36990  0015A4  6EDE               	movwf	postinc2,c
 36991  0015A6  0E00               	movlw	0
 36992  0015A8  6EDD               	movwf	postdec2,c
 36993  0015AA                     l4039:
 36994                           
 36995                           ;potentiometers.c: 101: }
 36996                           ;potentiometers.c: 104: if(inputPotsArray[i].controller_resolution == 1) {
 36997                           
 36998                           ; BSR set to: 1
 36999  0015AA  0101               	movlb	1	; () banked
 37000  0015AC  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 37001  0015AE  0D03               	mullw	3
 37002  0015B0  0E88               	movlw	low _inputPotsArray
 37003  0015B2  24F3               	addwf	prodl,w,c
 37004  0015B4  6ED9               	movwf	fsr2l,c
 37005  0015B6  0E02               	movlw	high _inputPotsArray
 37006  0015B8  20F4               	addwfc	prodh,w,c
 37007  0015BA  6EDA               	movwf	fsr2h,c
 37008  0015BC  0102               	movlb	2	; () banked
 37009  0015BE  A0DF               	btfss	indf2,0,c
 37010  0015C0  D09A               	goto	l4042
 37011                           
 37012                           ; BSR set to: 2
 37013                           ;potentiometers.c: 105: potentiometer_filtered_now[i] = potentiometer_filtered_now[i] <<
      +                           4;
 37014  0015C2  0101               	movlb	1	; () banked
 37015  0015C4  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 37016  0015C6  0D02               	mullw	2
 37017  0015C8  0E20               	movlw	low _potentiometer_filtered_now
 37018  0015CA  24F3               	addwf	prodl,w,c
 37019  0015CC  6ED9               	movwf	fsr2l,c
 37020  0015CE  0E02               	movlw	high _potentiometer_filtered_now
 37021  0015D0  20F4               	addwfc	prodh,w,c
 37022  0015D2  6EDA               	movwf	fsr2h,c
 37023  0015D4  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 37024  0015D8  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 37025  0015DC  0100               	movlb	0	; () banked
 37026  0015DE  3BC2               	swapf	??_readPotentiometers& (0+255),f,b
 37027  0015E0  3BC3               	swapf	(??_readPotentiometers+1)& (0+255),f,b
 37028  0015E2  0EF0               	movlw	240
 37029  0015E4  17C3               	andwf	(??_readPotentiometers+1)& (0+255),f,b
 37030  0015E6  51C2               	movf	??_readPotentiometers& (0+255),w,b
 37031  0015E8  0B0F               	andlw	15
 37032  0015EA  13C3               	iorwf	(??_readPotentiometers+1)& (0+255),f,b
 37033  0015EC  0EF0               	movlw	240
 37034  0015EE  17C2               	andwf	??_readPotentiometers& (0+255),f,b
 37035  0015F0  0101               	movlb	1	; () banked
 37036  0015F2  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 37037  0015F4  0D02               	mullw	2
 37038  0015F6  0E20               	movlw	low _potentiometer_filtered_now
 37039  0015F8  24F3               	addwf	prodl,w,c
 37040  0015FA  6ED9               	movwf	fsr2l,c
 37041  0015FC  0E02               	movlw	high _potentiometer_filtered_now
 37042  0015FE  20F4               	addwfc	prodh,w,c
 37043  001600  6EDA               	movwf	fsr2h,c
 37044  001602  C0C2  FFDE         	movff	??_readPotentiometers,postinc2
 37045  001606  C0C3  FFDD         	movff	??_readPotentiometers+1,postdec2
 37046                           
 37047                           ; BSR set to: 1
 37048                           ;potentiometers.c: 106: potentiometer_filtered_now[i] = map(potentiometer_filtered_now[i
      +                          ], 0x50, 0x3F00, 0, 0x3FFF);
 37049  00160A  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 37050  00160C  0D02               	mullw	2
 37051  00160E  0E20               	movlw	low _potentiometer_filtered_now
 37052  001610  24F3               	addwf	prodl,w,c
 37053  001612  6ED9               	movwf	fsr2l,c
 37054  001614  0E02               	movlw	high _potentiometer_filtered_now
 37055  001616  20F4               	addwfc	prodh,w,c
 37056  001618  6EDA               	movwf	fsr2h,c
 37057  00161A  CFDE F06E          	movff	postinc2,map@x
 37058  00161E  CFDD F06F          	movff	postdec2,map@x+1
 37059  001622  0100               	movlb	0	; () banked
 37060  001624  0E00               	movlw	0
 37061  001626  BF6F               	btfsc	(map@x+1)& (0+255),7,b
 37062  001628  0EFF               	movlw	-1
 37063  00162A  6F70               	movwf	(map@x+2)& (0+255),b
 37064  00162C  6F71               	movwf	(map@x+3)& (0+255),b
 37065  00162E  0E50               	movlw	80
 37066  001630  6F72               	movwf	map@in_min& (0+255),b
 37067  001632  0E00               	movlw	0
 37068  001634  6F73               	movwf	(map@in_min+1)& (0+255),b
 37069  001636  0E00               	movlw	0
 37070  001638  6F74               	movwf	(map@in_min+2)& (0+255),b
 37071  00163A  0E00               	movlw	0
 37072  00163C  6F75               	movwf	(map@in_min+3)& (0+255),b
 37073  00163E  0E00               	movlw	0
 37074  001640  6F76               	movwf	map@in_max& (0+255),b
 37075  001642  0E3F               	movlw	63
 37076  001644  6F77               	movwf	(map@in_max+1)& (0+255),b
 37077  001646  0E00               	movlw	0
 37078  001648  6F78               	movwf	(map@in_max+2)& (0+255),b
 37079  00164A  0E00               	movlw	0
 37080  00164C  6F79               	movwf	(map@in_max+3)& (0+255),b
 37081  00164E  0E00               	movlw	0
 37082  001650  6F7A               	movwf	map@out_min& (0+255),b
 37083  001652  0E00               	movlw	0
 37084  001654  6F7B               	movwf	(map@out_min+1)& (0+255),b
 37085  001656  0E00               	movlw	0
 37086  001658  6F7C               	movwf	(map@out_min+2)& (0+255),b
 37087  00165A  0E00               	movlw	0
 37088  00165C  6F7D               	movwf	(map@out_min+3)& (0+255),b
 37089  00165E  0EFF               	movlw	255
 37090  001660  6F7E               	movwf	map@out_max& (0+255),b
 37091  001662  0E3F               	movlw	63
 37092  001664  6F7F               	movwf	(map@out_max+1)& (0+255),b
 37093  001666  0E00               	movlw	0
 37094  001668  6F80               	movwf	(map@out_max+2)& (0+255),b
 37095  00166A  0E00               	movlw	0
 37096  00166C  6F81               	movwf	(map@out_max+3)& (0+255),b
 37097  00166E  ECD2  F032         	call	_map	;wreg free
 37098  001672  0101               	movlb	1	; () banked
 37099  001674  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 37100  001676  0D02               	mullw	2
 37101  001678  0E20               	movlw	low _potentiometer_filtered_now
 37102  00167A  24F3               	addwf	prodl,w,c
 37103  00167C  6ED9               	movwf	fsr2l,c
 37104  00167E  0E02               	movlw	high _potentiometer_filtered_now
 37105  001680  20F4               	addwfc	prodh,w,c
 37106  001682  6EDA               	movwf	fsr2h,c
 37107  001684  0100               	movlb	0	; () banked
 37108  001686  C06E  FFDE         	movff	?_map,postinc2
 37109  00168A  C06F  FFDD         	movff	?_map+1,postdec2
 37110                           
 37111                           ; BSR set to: 0
 37112                           ;potentiometers.c: 108: if(potentiometer_filtered_now[i] < 0){potentiometer_filtered_now
      +                          [i] = 0;}
 37113  00168E  0101               	movlb	1	; () banked
 37114  001690  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 37115  001692  0D02               	mullw	2
 37116  001694  0E20               	movlw	low _potentiometer_filtered_now
 37117  001696  24F3               	addwf	prodl,w,c
 37118  001698  6ED9               	movwf	fsr2l,c
 37119  00169A  0E02               	movlw	high _potentiometer_filtered_now
 37120  00169C  20F4               	addwfc	prodh,w,c
 37121  00169E  6EDA               	movwf	fsr2h,c
 37122  0016A0  0E01               	movlw	1
 37123  0016A2  AEDB               	btfss	plusw2,7,c
 37124  0016A4  D00C               	goto	l4041
 37125                           
 37126                           ; BSR set to: 1
 37127  0016A6  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 37128  0016A8  0D02               	mullw	2
 37129  0016AA  0E20               	movlw	low _potentiometer_filtered_now
 37130  0016AC  24F3               	addwf	prodl,w,c
 37131  0016AE  6ED9               	movwf	fsr2l,c
 37132  0016B0  0E02               	movlw	high _potentiometer_filtered_now
 37133  0016B2  20F4               	addwfc	prodh,w,c
 37134  0016B4  6EDA               	movwf	fsr2h,c
 37135  0016B6  0E00               	movlw	0
 37136  0016B8  6EDE               	movwf	postinc2,c
 37137  0016BA  0E00               	movlw	0
 37138  0016BC  6EDD               	movwf	postdec2,c
 37139  0016BE                     l4041:
 37140                           
 37141                           ; BSR set to: 1
 37142                           ;potentiometers.c: 109: if(potentiometer_filtered_now[i] > 0x3FFF){potentiometer_filtere
      +                          d_now[i] = 0x3FFF;}
 37143  0016BE  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 37144  0016C0  0D02               	mullw	2
 37145  0016C2  0E20               	movlw	low _potentiometer_filtered_now
 37146  0016C4  24F3               	addwf	prodl,w,c
 37147  0016C6  6ED9               	movwf	fsr2l,c
 37148  0016C8  0E02               	movlw	high _potentiometer_filtered_now
 37149  0016CA  20F4               	addwfc	prodh,w,c
 37150  0016CC  6EDA               	movwf	fsr2h,c
 37151  0016CE  0E01               	movlw	1
 37152  0016D0  BEDB               	btfsc	plusw2,7,c
 37153  0016D2  D011               	goto	l4042
 37154  0016D4  52DE               	movf	postinc2,f,c
 37155  0016D6  0E40               	movlw	64
 37156  0016D8  5CDE               	subwf	postinc2,w,c
 37157  0016DA  A0D8               	btfss	status,0,c
 37158  0016DC  D00C               	goto	l4042
 37159                           
 37160                           ; BSR set to: 1
 37161  0016DE  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 37162  0016E0  0D02               	mullw	2
 37163  0016E2  0E20               	movlw	low _potentiometer_filtered_now
 37164  0016E4  24F3               	addwf	prodl,w,c
 37165  0016E6  6ED9               	movwf	fsr2l,c
 37166  0016E8  0E02               	movlw	high _potentiometer_filtered_now
 37167  0016EA  20F4               	addwfc	prodh,w,c
 37168  0016EC  6EDA               	movwf	fsr2h,c
 37169  0016EE  0EFF               	movlw	255
 37170  0016F0  6EDE               	movwf	postinc2,c
 37171  0016F2  0E3F               	movlw	63
 37172  0016F4  6EDD               	movwf	postdec2,c
 37173  0016F6                     l4042:
 37174                           
 37175                           ;potentiometers.c: 110: }
 37176                           ;potentiometers.c: 117: if(i==iterator_focus) {processPotentiometers(iterator_focus);}
 37177                           
 37178                           ; BSR set to: 1
 37179                           
 37180                           ; BSR set to: 1
 37181  0016F6  0100               	movlb	0	; () banked
 37182  0016F8  51FD               	movf	_iterator_focus& (0+255),w,b
 37183  0016FA  0101               	movlb	1	; () banked
 37184  0016FC  199D               	xorwf	readPotentiometers@i_3430& (0+255),w,b
 37185  0016FE  A4D8               	btfss	status,2,c
 37186  001700  D004               	goto	l4043
 37187                           
 37188                           ; BSR set to: 1
 37189  001702  0100               	movlb	0	; () banked
 37190  001704  51FD               	movf	_iterator_focus& (0+255),w,b
 37191  001706  EC34  F020         	call	_processPotentiometers
 37192  00170A                     l4043:
 37193                           
 37194                           ;potentiometers.c: 118: potentiometer_filtered_last[i] = ema_sum[i];
 37195  00170A  0101               	movlb	1	; () banked
 37196  00170C  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 37197  00170E  0D02               	mullw	2
 37198  001710  0E40               	movlw	low _ema_sum
 37199  001712  24F3               	addwf	prodl,w,c
 37200  001714  6ED9               	movwf	fsr2l,c
 37201  001716  0E02               	movlw	high _ema_sum
 37202  001718  20F4               	addwfc	prodh,w,c
 37203  00171A  6EDA               	movwf	fsr2h,c
 37204  00171C  519D               	movf	readPotentiometers@i_3430& (0+255),w,b
 37205  00171E  0D02               	mullw	2
 37206  001720  0E00               	movlw	low _potentiometer_filtered_last
 37207  001722  24F3               	addwf	prodl,w,c
 37208  001724  6EE9               	movwf	fsr0l,c
 37209  001726  0E02               	movlw	high _potentiometer_filtered_last
 37210  001728  20F4               	addwfc	prodh,w,c
 37211  00172A  6EEA               	movwf	fsr0h,c
 37212  00172C  CFDE FFEE          	movff	postinc2,postinc0
 37213  001730  CFDD FFED          	movff	postdec2,postdec0
 37214  001734                     l4030:
 37215                           
 37216                           ;potentiometers.c: 120: }
 37217                           ;potentiometers.c: 124: if (count_ISR >= number_of_interrupts) {
 37218                           
 37219                           ; BSR set to: 1
 37220  001734  0102               	movlb	2	; () banked
 37221  001736  51C4               	movf	_number_of_interrupts& (0+255),w,b
 37222  001738  5D64               	subwf	_count_ISR& (0+255),w,b
 37223  00173A  51C5               	movf	(_number_of_interrupts+1)& (0+255),w,b
 37224  00173C  5965               	subwfb	(_count_ISR+1)& (0+255),w,b
 37225  00173E  51C6               	movf	(_number_of_interrupts+2)& (0+255),w,b
 37226  001740  5966               	subwfb	(_count_ISR+2)& (0+255),w,b
 37227  001742  51C7               	movf	(_number_of_interrupts+3)& (0+255),w,b
 37228  001744  5967               	subwfb	(_count_ISR+3)& (0+255),w,b
 37229  001746  A0D8               	btfss	status,0,c
 37230  001748  D007               	goto	l4044
 37231                           
 37232                           ; BSR set to: 2
 37233                           ;potentiometers.c: 126: HYST_VAL = 16;
 37234  00174A  0E00               	movlw	0
 37235  00174C  0101               	movlb	1	; () banked
 37236  00174E  6FF4               	movwf	(_HYST_VAL+1)& (0+255),b
 37237  001750  0E10               	movlw	16
 37238  001752  6FF3               	movwf	_HYST_VAL& (0+255),b
 37239                           
 37240                           ; BSR set to: 1
 37241                           ;potentiometers.c: 133: iterator_focus = 255;
 37242  001754  0100               	movlb	0	; () banked
 37243  001756  69FD               	setf	_iterator_focus& (0+255),b
 37244  001758                     l4044:
 37245                           
 37246                           ; BSR set to: 0
 37247  001758  0101               	movlb	1	; () banked
 37248  00175A  2B9D               	incf	readPotentiometers@i_3430& (0+255),f,b
 37249  00175C  D5C4               	goto	l30278
 37250  00175E                     u54700:
 37251                           
 37252                           ; BSR set to: 1
 37253                           ;potentiometers.c: 134: }
 37254                           ;potentiometers.c: 135: }
 37255                           ;potentiometers.c: 137: FIRST_READING = 1;
 37256  00175E  8001               	bsf	readPotentiometers@FIRST_READING/(0+8),readPotentiometers@FIRST_READING& (0+7),c
 37257                           
 37258                           ; BSR set to: 1
 37259  001760  0012               	return		;funcret
 37260  001762                     __end_of_readPotentiometers:
 37261                           	opt stack 0
 37262                           tblptru	equ	0xFF8
 37263                           tblptrh	equ	0xFF7
 37264                           tblptrl	equ	0xFF6
 37265                           tablat	equ	0xFF5
 37266                           prodh	equ	0xFF4
 37267                           prodl	equ	0xFF3
 37268                           intcon	equ	0xFF2
 37269                           intcon2	equ	0xFF1
 37270                           indf0	equ	0xFEF
 37271                           postinc0	equ	0xFEE
 37272                           postdec0	equ	0xFED
 37273                           fsr0h	equ	0xFEA
 37274                           fsr0l	equ	0xFE9
 37275                           wreg	equ	0xFE8
 37276                           postinc1	equ	0xFE6
 37277                           postdec1	equ	0xFE5
 37278                           plusw1	equ	0xFE3
 37279                           fsr1h	equ	0xFE2
 37280                           fsr1l	equ	0xFE1
 37281                           indf2	equ	0xFDF
 37282                           postinc2	equ	0xFDE
 37283                           postdec2	equ	0xFDD
 37284                           plusw2	equ	0xFDB
 37285                           fsr2h	equ	0xFDA
 37286                           fsr2l	equ	0xFD9
 37287                           status	equ	0xFD8
 37288                           
 37289 ;; *************** function _processPotentiometers *****************
 37290 ;; Defined at:
 37291 ;;		line 141 in file "potentiometers.c"
 37292 ;; Parameters:    Size  Location     Type
 37293 ;;  i               1    wreg     unsigned char 
 37294 ;; Auto vars:     Size  Location     Type
 37295 ;;  i               1    8[BANK0 ] unsigned char 
 37296 ;;  highByte        1    7[BANK0 ] unsigned char 
 37297 ;;  lowByte         1    6[BANK0 ] unsigned char 
 37298 ;; Return value:  Size  Location     Type
 37299 ;;                  1    wreg      void 
 37300 ;; Registers used:
 37301 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
 37302 ;; Tracked objects:
 37303 ;;		On entry : 0/0
 37304 ;;		On exit  : 0/0
 37305 ;;		Unchanged: 0/0
 37306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 37307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37308 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37309 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37310 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37311 ;;Total ram usage:        6 bytes
 37312 ;; Hardware stack levels used:    1
 37313 ;; Hardware stack levels required when called:    9
 37314 ;; This function calls:
 37315 ;;		_controlChange
 37316 ;;		_pitchBend
 37317 ;; This function is called by:
 37318 ;;		_readPotentiometers
 37319 ;; This function uses a non-reentrant model
 37320 ;;
 37321                           
 37322                           	psect	text105
 37323  004068                     __ptext105:
 37324                           	opt stack 0
 37325  004068                     _processPotentiometers:
 37326                           	opt stack 16
 37327                           
 37328                           ; BSR set to: 1
 37329                           ;incstack = 0
 37330                           ;processPotentiometers@i stored from wreg
 37331  004068  0100               	movlb	0	; () banked
 37332  00406A  6F68               	movwf	processPotentiometers@i& (0+255),b
 37333                           
 37334                           ;potentiometers.c: 146: number_to_display = potentiometer_filtered_now[i];
 37335  00406C  0100               	movlb	0	; () banked
 37336  00406E  5168               	movf	processPotentiometers@i& (0+255),w,b
 37337  004070  0D02               	mullw	2
 37338  004072  0E20               	movlw	low _potentiometer_filtered_now
 37339  004074  24F3               	addwf	prodl,w,c
 37340  004076  6ED9               	movwf	fsr2l,c
 37341  004078  0E02               	movlw	high _potentiometer_filtered_now
 37342  00407A  20F4               	addwfc	prodh,w,c
 37343  00407C  6EDA               	movwf	fsr2h,c
 37344  00407E  CFDE F04B          	movff	postinc2,_number_to_display
 37345  004082  CFDD F04C          	movff	postdec2,_number_to_display+1
 37346                           
 37347                           ;potentiometers.c: 150: if (inputPotsArray[i].controller_resolution == 0){
 37348  004086  5168               	movf	processPotentiometers@i& (0+255),w,b
 37349  004088  0D03               	mullw	3
 37350  00408A  0E88               	movlw	low _inputPotsArray
 37351  00408C  24F3               	addwf	prodl,w,c
 37352  00408E  6ED9               	movwf	fsr2l,c
 37353  004090  0E02               	movlw	high _inputPotsArray
 37354  004092  20F4               	addwfc	prodh,w,c
 37355  004094  6EDA               	movwf	fsr2h,c
 37356  004096  0102               	movlb	2	; () banked
 37357  004098  B0DF               	btfsc	indf2,0,c
 37358  00409A  D088               	goto	l4052
 37359                           
 37360                           ; BSR set to: 2
 37361                           ;potentiometers.c: 153: DISPLAY_MODE = 0;
 37362  00409C  0E00               	movlw	0
 37363  00409E  0100               	movlb	0	; () banked
 37364  0040A0  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 37365                           
 37366                           ;potentiometers.c: 154: DIGIT_MODE = 0;
 37367  0040A2  0E00               	movlw	0
 37368  0040A4  6E3A               	movwf	_DIGIT_MODE,c
 37369                           
 37370                           ; BSR set to: 0
 37371                           ;potentiometers.c: 158: if(inputPotsArray[i].controller_number >= 0) {
 37372  0040A6  5168               	movf	processPotentiometers@i& (0+255),w,b
 37373  0040A8  0D03               	mullw	3
 37374  0040AA  0E01               	movlw	1
 37375  0040AC  26F3               	addwf	prodl,f,c
 37376  0040AE  0E00               	movlw	0
 37377  0040B0  22F4               	addwfc	prodh,f,c
 37378  0040B2  0E88               	movlw	low _inputPotsArray
 37379  0040B4  24F3               	addwf	prodl,w,c
 37380  0040B6  6ED9               	movwf	fsr2l,c
 37381  0040B8  0E02               	movlw	high _inputPotsArray
 37382  0040BA  20F4               	addwfc	prodh,w,c
 37383  0040BC  6EDA               	movwf	fsr2h,c
 37384  0040BE  0E00               	movlw	0
 37385  0040C0  BEDB               	btfsc	plusw2,7,c
 37386  0040C2  D01B               	goto	l4049
 37387                           
 37388                           ; BSR set to: 0
 37389                           ;potentiometers.c: 159: controlChange(channel, inputPotsArray[i].controller_number, pote
      +                          ntiometer_filtered_now[i]);
 37390  0040C4  5168               	movf	processPotentiometers@i& (0+255),w,b
 37391  0040C6  0D03               	mullw	3
 37392  0040C8  0E01               	movlw	1
 37393  0040CA  26F3               	addwf	prodl,f,c
 37394  0040CC  0E00               	movlw	0
 37395  0040CE  22F4               	addwfc	prodh,f,c
 37396  0040D0  0E88               	movlw	low _inputPotsArray
 37397  0040D2  24F3               	addwf	prodl,w,c
 37398  0040D4  6ED9               	movwf	fsr2l,c
 37399  0040D6  0E02               	movlw	high _inputPotsArray
 37400  0040D8  20F4               	addwfc	prodh,w,c
 37401  0040DA  6EDA               	movwf	fsr2h,c
 37402  0040DC  50DF               	movf	indf2,w,c
 37403  0040DE  6F60               	movwf	controlChange@controllerNumber& (0+255),b
 37404  0040E0  5168               	movf	processPotentiometers@i& (0+255),w,b
 37405  0040E2  0D02               	mullw	2
 37406  0040E4  0E20               	movlw	low _potentiometer_filtered_now
 37407  0040E6  24F3               	addwf	prodl,w,c
 37408  0040E8  6ED9               	movwf	fsr2l,c
 37409  0040EA  0E02               	movlw	high _potentiometer_filtered_now
 37410  0040EC  20F4               	addwfc	prodh,w,c
 37411  0040EE  6EDA               	movwf	fsr2h,c
 37412  0040F0  50DF               	movf	indf2,w,c
 37413  0040F2  6F61               	movwf	controlChange@value& (0+255),b
 37414  0040F4  503E               	movf	_channel,w,c
 37415  0040F6  EC2C  F048         	call	_controlChange
 37416  0040FA                     l4049:
 37417                           
 37418                           ;potentiometers.c: 160: }
 37419                           ;potentiometers.c: 163: if(inputPotsArray[i].controller_number == -1) {
 37420  0040FA  0100               	movlb	0	; () banked
 37421  0040FC  5168               	movf	processPotentiometers@i& (0+255),w,b
 37422  0040FE  0D03               	mullw	3
 37423  004100  0E01               	movlw	1
 37424  004102  26F3               	addwf	prodl,f,c
 37425  004104  0E00               	movlw	0
 37426  004106  22F4               	addwfc	prodh,f,c
 37427  004108  0E88               	movlw	low _inputPotsArray
 37428  00410A  24F3               	addwf	prodl,w,c
 37429  00410C  6ED9               	movwf	fsr2l,c
 37430  00410E  0E02               	movlw	high _inputPotsArray
 37431  004110  20F4               	addwfc	prodh,w,c
 37432  004112  6EDA               	movwf	fsr2h,c
 37433  004114  28DE               	incf	postinc2,w,c
 37434  004116  A4D8               	btfss	status,2,c
 37435  004118  D00A               	goto	l4050
 37436                           
 37437                           ; BSR set to: 0
 37438                           ;potentiometers.c: 164: velocity = potentiometer_filtered_now[i];
 37439  00411A  5168               	movf	processPotentiometers@i& (0+255),w,b
 37440  00411C  0D02               	mullw	2
 37441  00411E  0E20               	movlw	low _potentiometer_filtered_now
 37442  004120  24F3               	addwf	prodl,w,c
 37443  004122  6ED9               	movwf	fsr2l,c
 37444  004124  0E02               	movlw	high _potentiometer_filtered_now
 37445  004126  20F4               	addwfc	prodh,w,c
 37446  004128  6EDA               	movwf	fsr2h,c
 37447  00412A  50DF               	movf	indf2,w,c
 37448  00412C  6E51               	movwf	_velocity,c
 37449  00412E                     l4050:
 37450                           
 37451                           ; BSR set to: 0
 37452                           ;potentiometers.c: 165: }
 37453                           ;potentiometers.c: 167: if(inputPotsArray[i].controller_number == -2) {
 37454  00412E  5168               	movf	processPotentiometers@i& (0+255),w,b
 37455  004130  0D03               	mullw	3
 37456  004132  0E01               	movlw	1
 37457  004134  26F3               	addwf	prodl,f,c
 37458  004136  0E00               	movlw	0
 37459  004138  22F4               	addwfc	prodh,f,c
 37460  00413A  0E88               	movlw	low _inputPotsArray
 37461  00413C  24F3               	addwf	prodl,w,c
 37462  00413E  6ED9               	movwf	fsr2l,c
 37463  004140  0E02               	movlw	high _inputPotsArray
 37464  004142  20F4               	addwfc	prodh,w,c
 37465  004144  6EDA               	movwf	fsr2h,c
 37466  004146  0EFE               	movlw	254
 37467  004148  18DE               	xorwf	postinc2,w,c
 37468  00414A  A4D8               	btfss	status,2,c
 37469  00414C  D00F               	goto	l4051
 37470                           
 37471                           ; BSR set to: 0
 37472                           ;potentiometers.c: 168: pitchBend(channel, 0x00, potentiometer_filtered_now[i]);
 37473  00414E  0E00               	movlw	0
 37474  004150  6F60               	movwf	pitchBend@lowByte& (0+255),b
 37475  004152  5168               	movf	processPotentiometers@i& (0+255),w,b
 37476  004154  0D02               	mullw	2
 37477  004156  0E20               	movlw	low _potentiometer_filtered_now
 37478  004158  24F3               	addwf	prodl,w,c
 37479  00415A  6ED9               	movwf	fsr2l,c
 37480  00415C  0E02               	movlw	high _potentiometer_filtered_now
 37481  00415E  20F4               	addwfc	prodh,w,c
 37482  004160  6EDA               	movwf	fsr2h,c
 37483  004162  50DF               	movf	indf2,w,c
 37484  004164  6F61               	movwf	pitchBend@highByte& (0+255),b
 37485  004166  503E               	movf	_channel,w,c
 37486  004168  EC89  F049         	call	_pitchBend
 37487  00416C                     l4051:
 37488                           
 37489                           ;potentiometers.c: 169: }
 37490                           ;potentiometers.c: 172: if(inputPotsArray[i].controller_number == -3) {
 37491  00416C  0100               	movlb	0	; () banked
 37492  00416E  5168               	movf	processPotentiometers@i& (0+255),w,b
 37493  004170  0D03               	mullw	3
 37494  004172  0E01               	movlw	1
 37495  004174  26F3               	addwf	prodl,f,c
 37496  004176  0E00               	movlw	0
 37497  004178  22F4               	addwfc	prodh,f,c
 37498  00417A  0E88               	movlw	low _inputPotsArray
 37499  00417C  24F3               	addwf	prodl,w,c
 37500  00417E  6ED9               	movwf	fsr2l,c
 37501  004180  0E02               	movlw	high _inputPotsArray
 37502  004182  20F4               	addwfc	prodh,w,c
 37503  004184  6EDA               	movwf	fsr2h,c
 37504  004186  0EFD               	movlw	253
 37505  004188  18DE               	xorwf	postinc2,w,c
 37506  00418A  A4D8               	btfss	status,2,c
 37507  00418C  D00F               	goto	l4052
 37508                           
 37509                           ; BSR set to: 0
 37510                           ;potentiometers.c: 173: controlChange(channel, modulation_wheel_MSB, potentiometer_filte
      +                          red_now[i]);
 37511  00418E  0E01               	movlw	1
 37512  004190  6F60               	movwf	controlChange@controllerNumber& (0+255),b
 37513  004192  5168               	movf	processPotentiometers@i& (0+255),w,b
 37514  004194  0D02               	mullw	2
 37515  004196  0E20               	movlw	low _potentiometer_filtered_now
 37516  004198  24F3               	addwf	prodl,w,c
 37517  00419A  6ED9               	movwf	fsr2l,c
 37518  00419C  0E02               	movlw	high _potentiometer_filtered_now
 37519  00419E  20F4               	addwfc	prodh,w,c
 37520  0041A0  6EDA               	movwf	fsr2h,c
 37521  0041A2  50DF               	movf	indf2,w,c
 37522  0041A4  6F61               	movwf	controlChange@value& (0+255),b
 37523  0041A6  503E               	movf	_channel,w,c
 37524  0041A8  EC2C  F048         	call	_controlChange
 37525  0041AC                     l4052:
 37526                           
 37527                           ;potentiometers.c: 174: }
 37528                           ;potentiometers.c: 175: }
 37529                           ;potentiometers.c: 178: if (inputPotsArray[i].controller_resolution == 1){
 37530  0041AC  0100               	movlb	0	; () banked
 37531  0041AE  5168               	movf	processPotentiometers@i& (0+255),w,b
 37532  0041B0  0D03               	mullw	3
 37533  0041B2  0E88               	movlw	low _inputPotsArray
 37534  0041B4  24F3               	addwf	prodl,w,c
 37535  0041B6  6ED9               	movwf	fsr2l,c
 37536  0041B8  0E02               	movlw	high _inputPotsArray
 37537  0041BA  20F4               	addwfc	prodh,w,c
 37538  0041BC  6EDA               	movwf	fsr2h,c
 37539  0041BE  0102               	movlb	2	; () banked
 37540  0041C0  A0DF               	btfss	indf2,0,c
 37541  0041C2  0012               	return	
 37542                           
 37543                           ; BSR set to: 2
 37544                           ;potentiometers.c: 181: DISPLAY_MODE = 0;
 37545  0041C4  0E00               	movlw	0
 37546  0041C6  0100               	movlb	0	; () banked
 37547  0041C8  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 37548                           
 37549                           ;potentiometers.c: 182: DIGIT_MODE = 2;
 37550  0041CA  0E02               	movlw	2
 37551  0041CC  6E3A               	movwf	_DIGIT_MODE,c
 37552                           
 37553                           ; BSR set to: 0
 37554                           ;potentiometers.c: 186: unsigned char lowByte = (potentiometer_filtered_now[i]) & 0x7F;
 37555  0041CE  5168               	movf	processPotentiometers@i& (0+255),w,b
 37556  0041D0  0D02               	mullw	2
 37557  0041D2  0E20               	movlw	low _potentiometer_filtered_now
 37558  0041D4  24F3               	addwf	prodl,w,c
 37559  0041D6  6ED9               	movwf	fsr2l,c
 37560  0041D8  0E02               	movlw	high _potentiometer_filtered_now
 37561  0041DA  20F4               	addwfc	prodh,w,c
 37562  0041DC  6EDA               	movwf	fsr2h,c
 37563  0041DE  50DF               	movf	indf2,w,c
 37564  0041E0  0B7F               	andlw	127
 37565  0041E2  6F66               	movwf	processPotentiometers@lowByte& (0+255),b
 37566                           
 37567                           ; BSR set to: 0
 37568                           ;potentiometers.c: 187: unsigned char highByte = (potentiometer_filtered_now[i] >> 7) & 
      +                          0x7F;
 37569  0041E4  5168               	movf	processPotentiometers@i& (0+255),w,b
 37570  0041E6  0D02               	mullw	2
 37571  0041E8  0E20               	movlw	low _potentiometer_filtered_now
 37572  0041EA  24F3               	addwf	prodl,w,c
 37573  0041EC  6ED9               	movwf	fsr2l,c
 37574  0041EE  0E02               	movlw	high _potentiometer_filtered_now
 37575  0041F0  20F4               	addwfc	prodh,w,c
 37576  0041F2  6EDA               	movwf	fsr2h,c
 37577  0041F4  CFDE F063          	movff	postinc2,??_processPotentiometers
 37578  0041F8  CFDD F064          	movff	postdec2,??_processPotentiometers+1
 37579  0041FC  0E07               	movlw	7
 37580  0041FE  6F65               	movwf	(??_processPotentiometers+2)& (0+255),b
 37581  004200                     u51395:
 37582  004200  3564               	rlcf	(??_processPotentiometers+1)& (0+255),w,b
 37583  004202  3364               	rrcf	(??_processPotentiometers+1)& (0+255),f,b
 37584  004204  3363               	rrcf	??_processPotentiometers& (0+255),f,b
 37585  004206  2F65               	decfsz	(??_processPotentiometers+2)& (0+255),f,b
 37586  004208  D7FB               	goto	u51395
 37587  00420A  5163               	movf	??_processPotentiometers& (0+255),w,b
 37588  00420C  0B7F               	andlw	127
 37589  00420E  6F67               	movwf	processPotentiometers@highByte& (0+255),b
 37590                           
 37591                           ; BSR set to: 0
 37592                           ;potentiometers.c: 190: if(inputPotsArray[i].controller_number_two_byte >= 0) {
 37593  004210  5168               	movf	processPotentiometers@i& (0+255),w,b
 37594  004212  0D03               	mullw	3
 37595  004214  0E02               	movlw	2
 37596  004216  26F3               	addwf	prodl,f,c
 37597  004218  0E00               	movlw	0
 37598  00421A  22F4               	addwfc	prodh,f,c
 37599  00421C  0E88               	movlw	low _inputPotsArray
 37600  00421E  24F3               	addwf	prodl,w,c
 37601  004220  6ED9               	movwf	fsr2l,c
 37602  004222  0E02               	movlw	high _inputPotsArray
 37603  004224  20F4               	addwfc	prodh,w,c
 37604  004226  6EDA               	movwf	fsr2h,c
 37605  004228  0E00               	movlw	0
 37606  00422A  BEDB               	btfsc	plusw2,7,c
 37607  00422C  D028               	goto	l4054
 37608                           
 37609                           ; BSR set to: 0
 37610                           ;potentiometers.c: 191: controlChange(channel, inputPotsArray[i].controller_number_two_b
      +                          yte, highByte);
 37611  00422E  5168               	movf	processPotentiometers@i& (0+255),w,b
 37612  004230  0D03               	mullw	3
 37613  004232  0E02               	movlw	2
 37614  004234  26F3               	addwf	prodl,f,c
 37615  004236  0E00               	movlw	0
 37616  004238  22F4               	addwfc	prodh,f,c
 37617  00423A  0E88               	movlw	low _inputPotsArray
 37618  00423C  24F3               	addwf	prodl,w,c
 37619  00423E  6ED9               	movwf	fsr2l,c
 37620  004240  0E02               	movlw	high _inputPotsArray
 37621  004242  20F4               	addwfc	prodh,w,c
 37622  004244  6EDA               	movwf	fsr2h,c
 37623  004246  50DF               	movf	indf2,w,c
 37624  004248  6F60               	movwf	controlChange@controllerNumber& (0+255),b
 37625  00424A  C067  F061         	movff	processPotentiometers@highByte,controlChange@value
 37626  00424E  503E               	movf	_channel,w,c
 37627  004250  EC2C  F048         	call	_controlChange
 37628                           
 37629                           ;potentiometers.c: 192: controlChange(channel, inputPotsArray[i].controller_number_two_b
      +                          yte + 32, lowByte);
 37630  004254  0100               	movlb	0	; () banked
 37631  004256  5168               	movf	processPotentiometers@i& (0+255),w,b
 37632  004258  0D03               	mullw	3
 37633  00425A  0E02               	movlw	2
 37634  00425C  26F3               	addwf	prodl,f,c
 37635  00425E  0E00               	movlw	0
 37636  004260  22F4               	addwfc	prodh,f,c
 37637  004262  0E88               	movlw	low _inputPotsArray
 37638  004264  24F3               	addwf	prodl,w,c
 37639  004266  6ED9               	movwf	fsr2l,c
 37640  004268  0E02               	movlw	high _inputPotsArray
 37641  00426A  20F4               	addwfc	prodh,w,c
 37642  00426C  6EDA               	movwf	fsr2h,c
 37643  00426E  50DF               	movf	indf2,w,c
 37644  004270  0F20               	addlw	32
 37645  004272  6F60               	movwf	controlChange@controllerNumber& (0+255),b
 37646  004274  C066  F061         	movff	processPotentiometers@lowByte,controlChange@value
 37647  004278  503E               	movf	_channel,w,c
 37648  00427A  EC2C  F048         	call	_controlChange
 37649  00427E                     l4054:
 37650                           
 37651                           ;potentiometers.c: 193: }
 37652                           ;potentiometers.c: 195: if(inputPotsArray[i].controller_number_two_byte == -1) {
 37653  00427E  0100               	movlb	0	; () banked
 37654  004280  5168               	movf	processPotentiometers@i& (0+255),w,b
 37655  004282  0D03               	mullw	3
 37656  004284  0E02               	movlw	2
 37657  004286  26F3               	addwf	prodl,f,c
 37658  004288  0E00               	movlw	0
 37659  00428A  22F4               	addwfc	prodh,f,c
 37660  00428C  0E88               	movlw	low _inputPotsArray
 37661  00428E  24F3               	addwf	prodl,w,c
 37662  004290  6ED9               	movwf	fsr2l,c
 37663  004292  0E02               	movlw	high _inputPotsArray
 37664  004294  20F4               	addwfc	prodh,w,c
 37665  004296  6EDA               	movwf	fsr2h,c
 37666  004298  28DE               	incf	postinc2,w,c
 37667  00429A  B4D8               	btfsc	status,2,c
 37668                           
 37669                           ; BSR set to: 0
 37670                           ;potentiometers.c: 196: velocity = highByte;
 37671  00429C  C067  F051         	movff	processPotentiometers@highByte,_velocity
 37672                           
 37673                           ; BSR set to: 0
 37674                           ;potentiometers.c: 197: }
 37675                           ;potentiometers.c: 199: if(inputPotsArray[i].controller_number_two_byte == -2) {
 37676                           
 37677                           ; BSR set to: 0
 37678  0042A0  5168               	movf	processPotentiometers@i& (0+255),w,b
 37679  0042A2  0D03               	mullw	3
 37680  0042A4  0E02               	movlw	2
 37681  0042A6  26F3               	addwf	prodl,f,c
 37682  0042A8  0E00               	movlw	0
 37683  0042AA  22F4               	addwfc	prodh,f,c
 37684  0042AC  0E88               	movlw	low _inputPotsArray
 37685  0042AE  24F3               	addwf	prodl,w,c
 37686  0042B0  6ED9               	movwf	fsr2l,c
 37687  0042B2  0E02               	movlw	high _inputPotsArray
 37688  0042B4  20F4               	addwfc	prodh,w,c
 37689  0042B6  6EDA               	movwf	fsr2h,c
 37690  0042B8  0EFE               	movlw	254
 37691  0042BA  18DE               	xorwf	postinc2,w,c
 37692  0042BC  A4D8               	btfss	status,2,c
 37693  0042BE  D007               	goto	l4056
 37694                           
 37695                           ; BSR set to: 0
 37696                           ;potentiometers.c: 200: pitchBend(channel, lowByte, highByte);
 37697  0042C0  C066  F060         	movff	processPotentiometers@lowByte,pitchBend@lowByte
 37698  0042C4  C067  F061         	movff	processPotentiometers@highByte,pitchBend@highByte
 37699  0042C8  503E               	movf	_channel,w,c
 37700  0042CA  EC89  F049         	call	_pitchBend
 37701  0042CE                     l4056:
 37702                           
 37703                           ;potentiometers.c: 201: }
 37704                           ;potentiometers.c: 203: if(inputPotsArray[i].controller_number_two_byte == -3) {
 37705  0042CE  0100               	movlb	0	; () banked
 37706  0042D0  5168               	movf	processPotentiometers@i& (0+255),w,b
 37707  0042D2  0D03               	mullw	3
 37708  0042D4  0E02               	movlw	2
 37709  0042D6  26F3               	addwf	prodl,f,c
 37710  0042D8  0E00               	movlw	0
 37711  0042DA  22F4               	addwfc	prodh,f,c
 37712  0042DC  0E88               	movlw	low _inputPotsArray
 37713  0042DE  24F3               	addwf	prodl,w,c
 37714  0042E0  6ED9               	movwf	fsr2l,c
 37715  0042E2  0E02               	movlw	high _inputPotsArray
 37716  0042E4  20F4               	addwfc	prodh,w,c
 37717  0042E6  6EDA               	movwf	fsr2h,c
 37718  0042E8  0EFD               	movlw	253
 37719  0042EA  18DE               	xorwf	postinc2,w,c
 37720  0042EC  A4D8               	btfss	status,2,c
 37721  0042EE  0012               	return	
 37722                           
 37723                           ; BSR set to: 0
 37724                           ;potentiometers.c: 204: controlChange(channel, modulation_wheel_MSB, highByte);
 37725  0042F0  0E01               	movlw	1
 37726  0042F2  6F60               	movwf	controlChange@controllerNumber& (0+255),b
 37727  0042F4  C067  F061         	movff	processPotentiometers@highByte,controlChange@value
 37728  0042F8  503E               	movf	_channel,w,c
 37729  0042FA  EC2C  F048         	call	_controlChange
 37730                           
 37731                           ;potentiometers.c: 205: controlChange(channel, modulation_wheel_MSB + 32, lowByte);
 37732  0042FE  0E21               	movlw	33
 37733  004300  0100               	movlb	0	; () banked
 37734  004302  6F60               	movwf	controlChange@controllerNumber& (0+255),b
 37735  004304  C066  F061         	movff	processPotentiometers@lowByte,controlChange@value
 37736  004308  503E               	movf	_channel,w,c
 37737  00430A  EC2C  F048         	call	_controlChange
 37738  00430E  0012               	return	
 37739  004310                     __end_of_processPotentiometers:
 37740                           	opt stack 0
 37741                           tblptru	equ	0xFF8
 37742                           tblptrh	equ	0xFF7
 37743                           tblptrl	equ	0xFF6
 37744                           tablat	equ	0xFF5
 37745                           prodh	equ	0xFF4
 37746                           prodl	equ	0xFF3
 37747                           intcon	equ	0xFF2
 37748                           intcon2	equ	0xFF1
 37749                           indf0	equ	0xFEF
 37750                           postinc0	equ	0xFEE
 37751                           postdec0	equ	0xFED
 37752                           fsr0h	equ	0xFEA
 37753                           fsr0l	equ	0xFE9
 37754                           wreg	equ	0xFE8
 37755                           postinc1	equ	0xFE6
 37756                           postdec1	equ	0xFE5
 37757                           plusw1	equ	0xFE3
 37758                           fsr1h	equ	0xFE2
 37759                           fsr1l	equ	0xFE1
 37760                           indf2	equ	0xFDF
 37761                           postinc2	equ	0xFDE
 37762                           postdec2	equ	0xFDD
 37763                           plusw2	equ	0xFDB
 37764                           fsr2h	equ	0xFDA
 37765                           fsr2l	equ	0xFD9
 37766                           status	equ	0xFD8
 37767                           
 37768 ;; *************** function _pitchBend *****************
 37769 ;; Defined at:
 37770 ;;		line 206 in file "midi.c"
 37771 ;; Parameters:    Size  Location     Type
 37772 ;;  channel         1    wreg     unsigned char 
 37773 ;;  lowByte         1    0[BANK0 ] unsigned char 
 37774 ;;  highByte        1    1[BANK0 ] unsigned char 
 37775 ;; Auto vars:     Size  Location     Type
 37776 ;;  channel         1    2[BANK0 ] unsigned char 
 37777 ;; Return value:  Size  Location     Type
 37778 ;;                  1    wreg      void 
 37779 ;; Registers used:
 37780 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
 37781 ;; Tracked objects:
 37782 ;;		On entry : 0/0
 37783 ;;		On exit  : 0/0
 37784 ;;		Unchanged: 0/0
 37785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 37786 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37787 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37789 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37790 ;;Total ram usage:        3 bytes
 37791 ;; Hardware stack levels used:    1
 37792 ;; Hardware stack levels required when called:    8
 37793 ;; This function calls:
 37794 ;;		___lbmod
 37795 ;;		_key_press_release_note_off
 37796 ;;		_sendOut
 37797 ;;		_sendUSB
 37798 ;; This function is called by:
 37799 ;;		_processPotentiometers
 37800 ;; This function uses a non-reentrant model
 37801 ;;
 37802                           
 37803                           	psect	text106
 37804  009312                     __ptext106:
 37805                           	opt stack 0
 37806  009312                     _pitchBend:
 37807                           	opt stack 16
 37808                           
 37809                           ;incstack = 0
 37810                           ;pitchBend@channel stored from wreg
 37811  009312  0100               	movlb	0	; () banked
 37812  009314  6F62               	movwf	pitchBend@channel& (0+255),b
 37813                           
 37814                           ;midi.c: 209: if((note_off_was_sent == 0) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 
      +                          0)){
 37815  009316  B202               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 37816  009318  D00A               	goto	l498
 37817  00931A  504D               	movf	_NOTE_LENGTH_PULSES,w,c
 37818  00931C  6EE6               	movwf	postinc1,c
 37819  00931E  502E               	movf	_TIMER_OVERFLOWS,w,c
 37820  009320  6EE6               	movwf	postinc1,c
 37821  009322  ECC6  F040         	call	___lbmod	;wreg free
 37822  009326  503F               	movf	btemp,w,c
 37823  009328  B4D8               	btfsc	status,2,c
 37824                           
 37825                           ;midi.c: 211: key_press_release_note_off();
 37826  00932A  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 37827  00932E                     l498:
 37828                           
 37829                           ;midi.c: 212: }
 37830                           ;midi.c: 214: statusByte = channel | pitch_bend;
 37831  00932E  0100               	movlb	0	; () banked
 37832  009330  5162               	movf	pitchBend@channel& (0+255),w,b
 37833  009332  09E0               	iorlw	224
 37834  009334  6E3D               	movwf	_statusByte,c
 37835                           
 37836                           ; BSR set to: 0
 37837                           ;midi.c: 217: sendUSB(statusByte, lowByte, highByte);
 37838  009336  5161               	movf	pitchBend@highByte& (0+255),w,b
 37839  009338  6EE6               	movwf	postinc1,c
 37840  00933A  5160               	movf	pitchBend@lowByte& (0+255),w,b
 37841  00933C  6EE6               	movwf	postinc1,c
 37842  00933E  503D               	movf	_statusByte,w,c
 37843  009340  6EE6               	movwf	postinc1,c
 37844  009342  EC40  F036         	call	_sendUSB	;wreg free
 37845                           
 37846                           ;midi.c: 220: sendOut(statusByte, lowByte, highByte);
 37847  009346  0100               	movlb	0	; () banked
 37848  009348  5161               	movf	pitchBend@highByte& (0+255),w,b
 37849  00934A  6EE6               	movwf	postinc1,c
 37850  00934C  5160               	movf	pitchBend@lowByte& (0+255),w,b
 37851  00934E  6EE6               	movwf	postinc1,c
 37852  009350  503D               	movf	_statusByte,w,c
 37853  009352  6EE6               	movwf	postinc1,c
 37854  009354  ECC9  F035         	call	_sendOut	;wreg free
 37855  009358  0012               	return		;funcret
 37856  00935A                     __end_of_pitchBend:
 37857                           	opt stack 0
 37858                           tblptru	equ	0xFF8
 37859                           tblptrh	equ	0xFF7
 37860                           tblptrl	equ	0xFF6
 37861                           tablat	equ	0xFF5
 37862                           prodh	equ	0xFF4
 37863                           prodl	equ	0xFF3
 37864                           intcon	equ	0xFF2
 37865                           intcon2	equ	0xFF1
 37866                           indf0	equ	0xFEF
 37867                           postinc0	equ	0xFEE
 37868                           postdec0	equ	0xFED
 37869                           fsr0h	equ	0xFEA
 37870                           fsr0l	equ	0xFE9
 37871                           wreg	equ	0xFE8
 37872                           postinc1	equ	0xFE6
 37873                           postdec1	equ	0xFE5
 37874                           plusw1	equ	0xFE3
 37875                           fsr1h	equ	0xFE2
 37876                           fsr1l	equ	0xFE1
 37877                           indf2	equ	0xFDF
 37878                           postinc2	equ	0xFDE
 37879                           postdec2	equ	0xFDD
 37880                           plusw2	equ	0xFDB
 37881                           fsr2h	equ	0xFDA
 37882                           fsr2l	equ	0xFD9
 37883                           status	equ	0xFD8
 37884                           
 37885 ;; *************** function _controlChange *****************
 37886 ;; Defined at:
 37887 ;;		line 179 in file "midi.c"
 37888 ;; Parameters:    Size  Location     Type
 37889 ;;  channel         1    wreg     unsigned char 
 37890 ;;  controllerNu    1    0[BANK0 ] unsigned char 
 37891 ;;  value           1    1[BANK0 ] unsigned char 
 37892 ;; Auto vars:     Size  Location     Type
 37893 ;;  channel         1    2[BANK0 ] unsigned char 
 37894 ;; Return value:  Size  Location     Type
 37895 ;;                  1    wreg      void 
 37896 ;; Registers used:
 37897 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
 37898 ;; Tracked objects:
 37899 ;;		On entry : 0/0
 37900 ;;		On exit  : 0/0
 37901 ;;		Unchanged: 0/0
 37902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 37903 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37904 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37906 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37907 ;;Total ram usage:        3 bytes
 37908 ;; Hardware stack levels used:    1
 37909 ;; Hardware stack levels required when called:    8
 37910 ;; This function calls:
 37911 ;;		___lbmod
 37912 ;;		_key_press_release_note_off
 37913 ;;		_sendOut
 37914 ;;		_sendUSB
 37915 ;; This function is called by:
 37916 ;;		_processDrumpad
 37917 ;;		_processPotentiometers
 37918 ;;		_panic_button
 37919 ;; This function uses a non-reentrant model
 37920 ;;
 37921                           
 37922                           	psect	text107
 37923  009058                     __ptext107:
 37924                           	opt stack 0
 37925  009058                     _controlChange:
 37926                           	opt stack 21
 37927                           
 37928                           ;incstack = 0
 37929                           ;controlChange@channel stored from wreg
 37930  009058  0100               	movlb	0	; () banked
 37931  00905A  6F62               	movwf	controlChange@channel& (0+255),b
 37932                           
 37933                           ;midi.c: 182: if((note_off_was_sent == 0) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 
      +                          0)){
 37934  00905C  B202               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 37935  00905E  D00A               	goto	l494
 37936  009060  504D               	movf	_NOTE_LENGTH_PULSES,w,c
 37937  009062  6EE6               	movwf	postinc1,c
 37938  009064  502E               	movf	_TIMER_OVERFLOWS,w,c
 37939  009066  6EE6               	movwf	postinc1,c
 37940  009068  ECC6  F040         	call	___lbmod	;wreg free
 37941  00906C  503F               	movf	btemp,w,c
 37942  00906E  B4D8               	btfsc	status,2,c
 37943                           
 37944                           ;midi.c: 184: key_press_release_note_off();
 37945  009070  ECF0  F02D         	call	_key_press_release_note_off	;wreg free
 37946  009074                     l494:
 37947                           
 37948                           ;midi.c: 185: }
 37949                           ;midi.c: 187: statusByte = channel | control_change;
 37950  009074  0100               	movlb	0	; () banked
 37951  009076  5162               	movf	controlChange@channel& (0+255),w,b
 37952  009078  09B0               	iorlw	176
 37953  00907A  6E3D               	movwf	_statusByte,c
 37954                           
 37955                           ; BSR set to: 0
 37956                           ;midi.c: 190: sendUSB(statusByte, controllerNumber, value);
 37957  00907C  5161               	movf	controlChange@value& (0+255),w,b
 37958  00907E  6EE6               	movwf	postinc1,c
 37959  009080  5160               	movf	controlChange@controllerNumber& (0+255),w,b
 37960  009082  6EE6               	movwf	postinc1,c
 37961  009084  503D               	movf	_statusByte,w,c
 37962  009086  6EE6               	movwf	postinc1,c
 37963  009088  EC40  F036         	call	_sendUSB	;wreg free
 37964                           
 37965                           ;midi.c: 194: GLOBAL_STATUS_BYTE = statusByte;
 37966  00908C  C03D  F181         	movff	_statusByte,_GLOBAL_STATUS_BYTE
 37967                           
 37968                           ;midi.c: 195: GLOBAL_CC_NUMBER = controllerNumber;
 37969  009090  C060  F0F4         	movff	controlChange@controllerNumber,_GLOBAL_CC_NUMBER
 37970                           
 37971                           ;midi.c: 196: GLOBAL_CC_VALUE = value;
 37972  009094  C061  F180         	movff	controlChange@value,_GLOBAL_CC_VALUE
 37973                           
 37974                           ;midi.c: 198: CONTROL_CHANGE_IS_BEING_SENT = 1;
 37975  009098  8206               	bsf	_CONTROL_CHANGE_IS_BEING_SENT/(0+8),_CONTROL_CHANGE_IS_BEING_SENT& (0+7),c
 37976                           
 37977                           ;midi.c: 199: sendOut(statusByte, controllerNumber, value);
 37978  00909A  0100               	movlb	0	; () banked
 37979  00909C  5161               	movf	controlChange@value& (0+255),w,b
 37980  00909E  6EE6               	movwf	postinc1,c
 37981  0090A0  5160               	movf	controlChange@controllerNumber& (0+255),w,b
 37982  0090A2  6EE6               	movwf	postinc1,c
 37983  0090A4  503D               	movf	_statusByte,w,c
 37984  0090A6  6EE6               	movwf	postinc1,c
 37985  0090A8  ECC9  F035         	call	_sendOut	;wreg free
 37986                           
 37987                           ;midi.c: 202: CONTROL_CHANGE_IS_BEING_SENT = 0;
 37988  0090AC  9206               	bcf	_CONTROL_CHANGE_IS_BEING_SENT/(0+8),_CONTROL_CHANGE_IS_BEING_SENT& (0+7),c
 37989  0090AE  0012               	return		;funcret
 37990  0090B0                     __end_of_controlChange:
 37991                           	opt stack 0
 37992                           tblptru	equ	0xFF8
 37993                           tblptrh	equ	0xFF7
 37994                           tblptrl	equ	0xFF6
 37995                           tablat	equ	0xFF5
 37996                           prodh	equ	0xFF4
 37997                           prodl	equ	0xFF3
 37998                           intcon	equ	0xFF2
 37999                           intcon2	equ	0xFF1
 38000                           indf0	equ	0xFEF
 38001                           postinc0	equ	0xFEE
 38002                           postdec0	equ	0xFED
 38003                           fsr0h	equ	0xFEA
 38004                           fsr0l	equ	0xFE9
 38005                           wreg	equ	0xFE8
 38006                           postinc1	equ	0xFE6
 38007                           postdec1	equ	0xFE5
 38008                           plusw1	equ	0xFE3
 38009                           fsr1h	equ	0xFE2
 38010                           fsr1l	equ	0xFE1
 38011                           indf2	equ	0xFDF
 38012                           postinc2	equ	0xFDE
 38013                           postdec2	equ	0xFDD
 38014                           plusw2	equ	0xFDB
 38015                           fsr2h	equ	0xFDA
 38016                           fsr2l	equ	0xFD9
 38017                           status	equ	0xFD8
 38018                           
 38019 ;; *************** function _key_press_release_note_off *****************
 38020 ;; Defined at:
 38021 ;;		line 110 in file "arpeggio.c"
 38022 ;; Parameters:    Size  Location     Type
 38023 ;;		None
 38024 ;; Auto vars:     Size  Location     Type
 38025 ;;		None
 38026 ;; Return value:  Size  Location     Type
 38027 ;;                  1    wreg      void 
 38028 ;; Registers used:
 38029 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh
 38030 ;; Tracked objects:
 38031 ;;		On entry : 0/0
 38032 ;;		On exit  : 0/0
 38033 ;;		Unchanged: 0/0
 38034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38038 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38039 ;;Total ram usage:        0 bytes
 38040 ;; Hardware stack levels used:    1
 38041 ;; Hardware stack levels required when called:    7
 38042 ;; This function calls:
 38043 ;;		_noteOff
 38044 ;; This function is called by:
 38045 ;;		_controlChange
 38046 ;;		_pitchBend
 38047 ;;		_programChange
 38048 ;;		_playThisNotePentatonic
 38049 ;;		_playTriad
 38050 ;;		_playSeventh
 38051 ;;		_playThisNote
 38052 ;;		_playThisNote8
 38053 ;;		_playDiatonicTriadMajor
 38054 ;;		_playDiatonicSeventhMajor
 38055 ;;		_playDiatonicTriadMinor
 38056 ;;		_playDiatonicSeventhMinor
 38057 ;;		_keyboardTranspose
 38058 ;;		_processOctave
 38059 ;; This function uses a non-reentrant model
 38060 ;;
 38061                           
 38062                           	psect	text108
 38063  005BE0                     __ptext108:
 38064                           	opt stack 0
 38065  005BE0                     _key_press_release_note_off:
 38066                           	opt stack 21
 38067                           
 38068                           ;arpeggio.c: 113: if((startingDirection == UP) && (ARPEGGIO_TYPE == DOWN_UP)){stored_oct
      +                          ave += (OCTAVES - 1);}
 38069                           
 38070                           ;incstack = 0
 38071  005BE0  5034               	movf	_startingDirection,w,c
 38072  005BE2  A4D8               	btfss	status,2,c
 38073  005BE4  D006               	goto	l5409
 38074  005BE6  0E03               	movlw	3
 38075  005BE8  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 38076  005BEA  A4D8               	btfss	status,2,c
 38077  005BEC  D002               	goto	l5409
 38078  005BEE  044E               	decf	_OCTAVES,w,c
 38079  005BF0  2631               	addwf	_stored_octave,f,c
 38080  005BF2                     l5409:
 38081                           
 38082                           ;arpeggio.c: 115: if((startingDirection == DOWN) && (ARPEGGIO_TYPE == UP_DOWN)){stored_o
      +                          ctave -= (OCTAVES - 1);}
 38083  005BF2  0434               	decf	_startingDirection,w,c
 38084  005BF4  A4D8               	btfss	status,2,c
 38085  005BF6  D006               	goto	l5410
 38086  005BF8  0E02               	movlw	2
 38087  005BFA  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 38088  005BFC  A4D8               	btfss	status,2,c
 38089  005BFE  D002               	goto	l5410
 38090  005C00  044E               	decf	_OCTAVES,w,c
 38091  005C02  5E31               	subwf	_stored_octave,f,c
 38092  005C04                     l5410:
 38093                           
 38094                           ;arpeggio.c: 118: TMR0ON = 0;
 38095  005C04  9ED5               	bcf	4053,7,c	;volatile
 38096                           
 38097                           ;arpeggio.c: 122: static signed char temp;
 38098                           ;arpeggio.c: 123: temp = last_note;
 38099  005C06  C0EC  F02C         	movff	_last_note,key_press_release_note_off@temp
 38100                           
 38101                           ;arpeggio.c: 126: if((last_note != 0)){
 38102  005C0A  0100               	movlb	0	; () banked
 38103  005C0C  51EC               	movf	_last_note& (0+255),w,b
 38104  005C0E  B4D8               	btfsc	status,2,c
 38105  005C10  D077               	goto	l5413
 38106                           
 38107                           ; BSR set to: 0
 38108                           ;arpeggio.c: 127: if(stored_octave == -3){noteOff(channel, temp - ((OCTAVES - (OCTAVES -
      +                           3)) * 12), velocity);}
 38109  005C12  0EFD               	movlw	253
 38110  005C14  1831               	xorwf	_stored_octave,w,c
 38111  005C16  A4D8               	btfss	status,2,c
 38112  005C18  D00F               	goto	l5414
 38113                           
 38114                           ; BSR set to: 0
 38115  005C1A  5051               	movf	_velocity,w,c
 38116  005C1C  6EE6               	movwf	postinc1,c
 38117  005C1E  504E               	movf	_OCTAVES,w,c
 38118  005C20  0FFD               	addlw	253
 38119  005C22  0800               	sublw	0
 38120  005C24  244E               	addwf	_OCTAVES,w,c
 38121  005C26  0D0C               	mullw	12
 38122  005C28  50F3               	movf	prodl,w,c
 38123  005C2A  0800               	sublw	0
 38124  005C2C  242C               	addwf	key_press_release_note_off@temp,w,c
 38125  005C2E  6EE6               	movwf	postinc1,c
 38126  005C30  503E               	movf	_channel,w,c
 38127  005C32  6EE6               	movwf	postinc1,c
 38128  005C34  ECAD  F049         	call	_noteOff	;wreg free
 38129  005C38                     l5414:
 38130                           
 38131                           ;arpeggio.c: 128: if(stored_octave == -2){noteOff(channel, temp - ((OCTAVES - (OCTAVES -
      +                           2)) * 12), velocity);}
 38132  005C38  0EFE               	movlw	254
 38133  005C3A  1831               	xorwf	_stored_octave,w,c
 38134  005C3C  A4D8               	btfss	status,2,c
 38135  005C3E  D00F               	goto	l5415
 38136  005C40  5051               	movf	_velocity,w,c
 38137  005C42  6EE6               	movwf	postinc1,c
 38138  005C44  504E               	movf	_OCTAVES,w,c
 38139  005C46  0FFE               	addlw	254
 38140  005C48  0800               	sublw	0
 38141  005C4A  244E               	addwf	_OCTAVES,w,c
 38142  005C4C  0D0C               	mullw	12
 38143  005C4E  50F3               	movf	prodl,w,c
 38144  005C50  0800               	sublw	0
 38145  005C52  242C               	addwf	key_press_release_note_off@temp,w,c
 38146  005C54  6EE6               	movwf	postinc1,c
 38147  005C56  503E               	movf	_channel,w,c
 38148  005C58  6EE6               	movwf	postinc1,c
 38149  005C5A  ECAD  F049         	call	_noteOff	;wreg free
 38150  005C5E                     l5415:
 38151                           
 38152                           ;arpeggio.c: 129: if(stored_octave == -1){noteOff(channel, temp - ((OCTAVES - (OCTAVES -
      +                           1)) * 12), velocity);}
 38153  005C5E  2831               	incf	_stored_octave,w,c
 38154  005C60  A4D8               	btfss	status,2,c
 38155  005C62  D00E               	goto	l5416
 38156  005C64  5051               	movf	_velocity,w,c
 38157  005C66  6EE6               	movwf	postinc1,c
 38158  005C68  044E               	decf	_OCTAVES,w,c
 38159  005C6A  0800               	sublw	0
 38160  005C6C  244E               	addwf	_OCTAVES,w,c
 38161  005C6E  0D0C               	mullw	12
 38162  005C70  50F3               	movf	prodl,w,c
 38163  005C72  0800               	sublw	0
 38164  005C74  242C               	addwf	key_press_release_note_off@temp,w,c
 38165  005C76  6EE6               	movwf	postinc1,c
 38166  005C78  503E               	movf	_channel,w,c
 38167  005C7A  6EE6               	movwf	postinc1,c
 38168  005C7C  ECAD  F049         	call	_noteOff	;wreg free
 38169  005C80                     l5416:
 38170                           
 38171                           ;arpeggio.c: 131: if(stored_octave == 0){
 38172  005C80  5031               	movf	_stored_octave,w,c
 38173  005C82  A4D8               	btfss	status,2,c
 38174  005C84  D008               	goto	l5417
 38175                           
 38176                           ;arpeggio.c: 132: noteOff(channel, temp, velocity);
 38177  005C86  5051               	movf	_velocity,w,c
 38178  005C88  6EE6               	movwf	postinc1,c
 38179  005C8A  502C               	movf	key_press_release_note_off@temp,w,c
 38180  005C8C  6EE6               	movwf	postinc1,c
 38181  005C8E  503E               	movf	_channel,w,c
 38182  005C90  6EE6               	movwf	postinc1,c
 38183  005C92  ECAD  F049         	call	_noteOff	;wreg free
 38184  005C96                     l5417:
 38185                           
 38186                           ;arpeggio.c: 133: }
 38187                           ;arpeggio.c: 135: if(stored_octave == 1){noteOff(channel, temp + ((OCTAVES - (OCTAVES - 
      +                          1)) * 12), velocity);}
 38188  005C96  0431               	decf	_stored_octave,w,c
 38189  005C98  A4D8               	btfss	status,2,c
 38190  005C9A  D00D               	goto	l5418
 38191  005C9C  5051               	movf	_velocity,w,c
 38192  005C9E  6EE6               	movwf	postinc1,c
 38193  005CA0  044E               	decf	_OCTAVES,w,c
 38194  005CA2  0800               	sublw	0
 38195  005CA4  244E               	addwf	_OCTAVES,w,c
 38196  005CA6  0D0C               	mullw	12
 38197  005CA8  50F3               	movf	prodl,w,c
 38198  005CAA  242C               	addwf	key_press_release_note_off@temp,w,c
 38199  005CAC  6EE6               	movwf	postinc1,c
 38200  005CAE  503E               	movf	_channel,w,c
 38201  005CB0  6EE6               	movwf	postinc1,c
 38202  005CB2  ECAD  F049         	call	_noteOff	;wreg free
 38203  005CB6                     l5418:
 38204                           
 38205                           ;arpeggio.c: 136: if(stored_octave == 2){noteOff(channel, temp + ((OCTAVES - (OCTAVES - 
      +                          2)) * 12), velocity);}
 38206  005CB6  0E02               	movlw	2
 38207  005CB8  1831               	xorwf	_stored_octave,w,c
 38208  005CBA  A4D8               	btfss	status,2,c
 38209  005CBC  D00E               	goto	l5419
 38210  005CBE  5051               	movf	_velocity,w,c
 38211  005CC0  6EE6               	movwf	postinc1,c
 38212  005CC2  504E               	movf	_OCTAVES,w,c
 38213  005CC4  0FFE               	addlw	254
 38214  005CC6  0800               	sublw	0
 38215  005CC8  244E               	addwf	_OCTAVES,w,c
 38216  005CCA  0D0C               	mullw	12
 38217  005CCC  50F3               	movf	prodl,w,c
 38218  005CCE  242C               	addwf	key_press_release_note_off@temp,w,c
 38219  005CD0  6EE6               	movwf	postinc1,c
 38220  005CD2  503E               	movf	_channel,w,c
 38221  005CD4  6EE6               	movwf	postinc1,c
 38222  005CD6  ECAD  F049         	call	_noteOff	;wreg free
 38223  005CDA                     l5419:
 38224                           
 38225                           ;arpeggio.c: 137: if(stored_octave == 3){noteOff(channel, temp + ((OCTAVES - (OCTAVES - 
      +                          3)) * 12), velocity);}
 38226  005CDA  0E03               	movlw	3
 38227  005CDC  1831               	xorwf	_stored_octave,w,c
 38228  005CDE  A4D8               	btfss	status,2,c
 38229  005CE0  D00E               	goto	l5420
 38230  005CE2  5051               	movf	_velocity,w,c
 38231  005CE4  6EE6               	movwf	postinc1,c
 38232  005CE6  504E               	movf	_OCTAVES,w,c
 38233  005CE8  0FFD               	addlw	253
 38234  005CEA  0800               	sublw	0
 38235  005CEC  244E               	addwf	_OCTAVES,w,c
 38236  005CEE  0D0C               	mullw	12
 38237  005CF0  50F3               	movf	prodl,w,c
 38238  005CF2  242C               	addwf	key_press_release_note_off@temp,w,c
 38239  005CF4  6EE6               	movwf	postinc1,c
 38240  005CF6  503E               	movf	_channel,w,c
 38241  005CF8  6EE6               	movwf	postinc1,c
 38242  005CFA  ECAD  F049         	call	_noteOff	;wreg free
 38243  005CFE                     l5420:
 38244                           
 38245                           ;arpeggio.c: 139: note_off_was_sent = 1;
 38246  005CFE  8202               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38247  005D00                     l5413:
 38248                           
 38249                           ;arpeggio.c: 140: }
 38250                           ;arpeggio.c: 143: if((last_note == 0) && (note_off_was_sent == 0) && (keyboard.SW1 == 1)
      +                          ){noteOff(channel, stored_octave * 12, velocity);note_off_was_sent = 1;}
 38251  005D00  0100               	movlb	0	; () banked
 38252  005D02  51EC               	movf	_last_note& (0+255),w,b
 38253  005D04  B4D8               	btfsc	status,2,c
 38254                           
 38255                           ; BSR set to: 0
 38256  005D06  B202               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38257  005D08  D00D               	goto	l5421
 38258                           
 38259                           ; BSR set to: 0
 38260  005D0A  A1D0               	btfss	_keyboard& (0+255),0,b
 38261  005D0C  D00B               	goto	l5421
 38262                           
 38263                           ; BSR set to: 0
 38264  005D0E  5051               	movf	_velocity,w,c
 38265  005D10  6EE6               	movwf	postinc1,c
 38266  005D12  5031               	movf	_stored_octave,w,c
 38267  005D14  0D0C               	mullw	12
 38268  005D16  50F3               	movf	prodl,w,c
 38269  005D18  6EE6               	movwf	postinc1,c
 38270  005D1A  503E               	movf	_channel,w,c
 38271  005D1C  6EE6               	movwf	postinc1,c
 38272  005D1E  ECAD  F049         	call	_noteOff	;wreg free
 38273  005D22  8202               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38274  005D24                     l5421:
 38275                           
 38276                           ;arpeggio.c: 144: if((last_note == 0) && (note_off_was_sent == 0)){noteOff(channel, stor
      +                          ed_octave * 12, velocity);note_off_was_sent = 1;}
 38277  005D24  0100               	movlb	0	; () banked
 38278  005D26  51EC               	movf	_last_note& (0+255),w,b
 38279  005D28  B4D8               	btfsc	status,2,c
 38280                           
 38281                           ; BSR set to: 0
 38282  005D2A  B202               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38283  005D2C  D00B               	goto	l5422
 38284                           
 38285                           ; BSR set to: 0
 38286  005D2E  5051               	movf	_velocity,w,c
 38287  005D30  6EE6               	movwf	postinc1,c
 38288  005D32  5031               	movf	_stored_octave,w,c
 38289  005D34  0D0C               	mullw	12
 38290  005D36  50F3               	movf	prodl,w,c
 38291  005D38  6EE6               	movwf	postinc1,c
 38292  005D3A  503E               	movf	_channel,w,c
 38293  005D3C  6EE6               	movwf	postinc1,c
 38294  005D3E  ECAD  F049         	call	_noteOff	;wreg free
 38295  005D42  8202               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38296  005D44                     l5422:
 38297                           
 38298                           ;arpeggio.c: 146: TMR0ON = 1;
 38299  005D44  8ED5               	bsf	4053,7,c	;volatile
 38300  005D46  0012               	return		;funcret
 38301  005D48                     __end_of_key_press_release_note_off:
 38302                           	opt stack 0
 38303                           tblptru	equ	0xFF8
 38304                           tblptrh	equ	0xFF7
 38305                           tblptrl	equ	0xFF6
 38306                           tablat	equ	0xFF5
 38307                           prodh	equ	0xFF4
 38308                           prodl	equ	0xFF3
 38309                           intcon	equ	0xFF2
 38310                           intcon2	equ	0xFF1
 38311                           indf0	equ	0xFEF
 38312                           postinc0	equ	0xFEE
 38313                           postdec0	equ	0xFED
 38314                           fsr0h	equ	0xFEA
 38315                           fsr0l	equ	0xFE9
 38316                           wreg	equ	0xFE8
 38317                           postinc1	equ	0xFE6
 38318                           postdec1	equ	0xFE5
 38319                           plusw1	equ	0xFE3
 38320                           fsr1h	equ	0xFE2
 38321                           fsr1l	equ	0xFE1
 38322                           indf2	equ	0xFDF
 38323                           postinc2	equ	0xFDE
 38324                           postdec2	equ	0xFDD
 38325                           plusw2	equ	0xFDB
 38326                           fsr2h	equ	0xFDA
 38327                           fsr2l	equ	0xFD9
 38328                           status	equ	0xFD8
 38329                           
 38330 ;; *************** function _noteOff *****************
 38331 ;; Defined at:
 38332 ;;		line 109 in file "midi.c"
 38333 ;; Parameters:    Size  Location     Type
 38334 ;;  channel         1  [STACK] unsigned char 
 38335 ;;  pitch           1  [STACK] unsigned char 
 38336 ;;  velocity        1  [STACK] unsigned char 
 38337 ;; Auto vars:     Size  Location     Type
 38338 ;;		None
 38339 ;; Return value:  Size  Location     Type
 38340 ;;                  1  [STACK] void 
 38341 ;; Registers used:
 38342 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh
 38343 ;; Tracked objects:
 38344 ;;		On entry : 0/0
 38345 ;;		On exit  : 0/0
 38346 ;;		Unchanged: 0/0
 38347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38349 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38351 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38352 ;;Total ram usage:        0 bytes
 38353 ;; Hardware stack levels used:    1
 38354 ;; Hardware stack levels required when called:    6
 38355 ;; This function calls:
 38356 ;;		_sendOut
 38357 ;;		_sendUSB
 38358 ;; This function is called by:
 38359 ;;		_noteOn
 38360 ;;		_noteOnDrum
 38361 ;;		_playThisNotePentatonic
 38362 ;;		_playTriad
 38363 ;;		_playSeventh
 38364 ;;		_playThisNote
 38365 ;;		_playThisNote8
 38366 ;;		_playDiatonicTriadMajor
 38367 ;;		_playDiatonicSeventhMajor
 38368 ;;		_playDiatonicTriadMinor
 38369 ;;		_playDiatonicSeventhMinor
 38370 ;;		_key_press_release_note_off
 38371 ;;		_playArpeggio
 38372 ;;		_keyboard_all_note
 38373 ;;		_keyboard_eight_note
 38374 ;; This function uses a reentrant model
 38375 ;;
 38376                           
 38377                           	psect	text109
 38378  00935A                     __ptext109:
 38379                           	opt stack 0
 38380  00935A                     _noteOff:
 38381                           	opt stack 6
 38382                           
 38383                           ;midi.c: 111: noteNumber = pitch + semitone + ((octave + 1)* 12);
 38384                           ;stkvar	noteOff@pitch @ sp[(0)+-2]
 38385                           
 38386                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
 38387                           ;incstack = 0
 38388  00935A  0EFE               	movlw	-2
 38389  00935C  CFE3 F04A          	movff	plusw1,btemp+11
 38390  009360  5050               	movf	_octave,w,c
 38391  009362  0D0C               	mullw	12
 38392  009364  50F3               	movf	prodl,w,c
 38393  009366  243B               	addwf	_semitone,w,c
 38394  009368  244A               	addwf	btemp+11,w,c
 38395  00936A  0F0C               	addlw	12
 38396  00936C  6E3C               	movwf	_noteNumber,c
 38397                           
 38398                           ;midi.c: 112: statusByte = channel | note_off;
 38399                           ;stkvar	noteOff@channel @ sp[(0)+-1]
 38400  00936E  0EFF               	movlw	-1
 38401  009370  50E3               	movf	plusw1,w,c
 38402  009372  0980               	iorlw	128
 38403  009374  6E3D               	movwf	_statusByte,c
 38404                           
 38405                           ;midi.c: 116: sendUSB(statusByte, noteNumber, velocity);
 38406                           ;stkvar	noteOff@velocity @ sp[(0)+-3]
 38407  009376  0EFD               	movlw	-3
 38408  009378  50E3               	movf	plusw1,w,c
 38409  00937A  6EE6               	movwf	postinc1,c
 38410  00937C  503C               	movf	_noteNumber,w,c
 38411  00937E  6EE6               	movwf	postinc1,c
 38412  009380  503D               	movf	_statusByte,w,c
 38413  009382  6EE6               	movwf	postinc1,c
 38414  009384  EC40  F036         	call	_sendUSB	;wreg free
 38415                           
 38416                           ;midi.c: 119: sendOut(statusByte, noteNumber, velocity);
 38417                           ;stkvar	noteOff@velocity @ sp[(0)+-3]
 38418  009388  0EFD               	movlw	-3
 38419  00938A  50E3               	movf	plusw1,w,c
 38420  00938C  6EE6               	movwf	postinc1,c
 38421  00938E  503C               	movf	_noteNumber,w,c
 38422  009390  6EE6               	movwf	postinc1,c
 38423  009392  503D               	movf	_statusByte,w,c
 38424  009394  6EE6               	movwf	postinc1,c
 38425  009396  ECC9  F035         	call	_sendOut	;wreg free
 38426                           
 38427                           ; _noteOff: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsi
      +                          ze = 3, vargsize = 0
 38428  00939A  52E5               	movf	postdec1,f,c
 38429  00939C  52E5               	movf	postdec1,f,c
 38430  00939E  52E5               	movf	postdec1,f,c
 38431  0093A0  0012               	return		;funcret
 38432  0093A2                     __end_of_noteOff:
 38433                           	opt stack 0
 38434                           tblptru	equ	0xFF8
 38435                           tblptrh	equ	0xFF7
 38436                           tblptrl	equ	0xFF6
 38437                           tablat	equ	0xFF5
 38438                           prodh	equ	0xFF4
 38439                           prodl	equ	0xFF3
 38440                           intcon	equ	0xFF2
 38441                           intcon2	equ	0xFF1
 38442                           indf0	equ	0xFEF
 38443                           postinc0	equ	0xFEE
 38444                           postdec0	equ	0xFED
 38445                           fsr0h	equ	0xFEA
 38446                           fsr0l	equ	0xFE9
 38447                           wreg	equ	0xFE8
 38448                           postinc1	equ	0xFE6
 38449                           postdec1	equ	0xFE5
 38450                           plusw1	equ	0xFE3
 38451                           fsr1h	equ	0xFE2
 38452                           fsr1l	equ	0xFE1
 38453                           indf2	equ	0xFDF
 38454                           postinc2	equ	0xFDE
 38455                           postdec2	equ	0xFDD
 38456                           plusw2	equ	0xFDB
 38457                           fsr2h	equ	0xFDA
 38458                           fsr2l	equ	0xFD9
 38459                           status	equ	0xFD8
 38460                           
 38461 ;; *************** function _sendUSB *****************
 38462 ;; Defined at:
 38463 ;;		line 75 in file "midi.c"
 38464 ;; Parameters:    Size  Location     Type
 38465 ;;  message1        1  [STACK] unsigned char 
 38466 ;;  message2        1  [STACK] unsigned char 
 38467 ;;  message3        1  [STACK] unsigned char 
 38468 ;; Auto vars:     Size  Location     Type
 38469 ;;  ii              1  [STACK] unsigned char 
 38470 ;;  i               1  [STACK] unsigned char 
 38471 ;;  midiMessage     3  [STACK] unsigned char [3]
 38472 ;; Return value:  Size  Location     Type
 38473 ;;                  1  [STACK] void 
 38474 ;; Registers used:
 38475 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11
 38476 ;; Tracked objects:
 38477 ;;		On entry : 0/0
 38478 ;;		On exit  : 0/0
 38479 ;;		Unchanged: 0/0
 38480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38485 ;;Total ram usage:        0 bytes
 38486 ;; Hardware stack levels used:    1
 38487 ;; Hardware stack levels required when called:    5
 38488 ;; This function calls:
 38489 ;;		Nothing
 38490 ;; This function is called by:
 38491 ;;		_noteOff
 38492 ;;		_noteOn
 38493 ;;		_noteOffDrum
 38494 ;;		_noteOnDrum
 38495 ;;		_controlChange
 38496 ;;		_pitchBend
 38497 ;;		_programChange
 38498 ;; This function uses a reentrant model
 38499 ;;
 38500                           
 38501                           	psect	text110
 38502  006C80                     __ptext110:
 38503                           	opt stack 0
 38504  006C80                     _sendUSB:
 38505                           	opt stack 0
 38506                           
 38507                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
 38508  006C80  0E05               	movlw	5
 38509  006C82  26E1               	addwf	fsr1l,f,c
 38510  006C84  0E00               	movlw	0
 38511  006C86  22E2               	addwfc	fsr1h,f,c
 38512                           
 38513                           ;midi.c: 77: unsigned char midiMessage[3];
 38514                           ;midi.c: 79: midiMessage[0]=message1;
 38515                           ;stkvar	sendUSB@message1 @ sp[(-5)+-1]
 38516                           ;stkvar	sendUSB@midiMessage @ sp[(-5)+2]
 38517                           
 38518                           ;incstack = 0
 38519  006C88  0EFA               	movlw	-6
 38520  006C8A  CFE3 F03F          	movff	plusw1,btemp
 38521  006C8E  0EFD               	movlw	-3
 38522  006C90  C03F  FFE3         	movff	btemp,plusw1
 38523                           
 38524                           ;midi.c: 80: midiMessage[1]=message2;
 38525                           ;stkvar	sendUSB@message2 @ sp[(-5)+-2]
 38526                           ;stkvar	sendUSB@midiMessage @ sp[(-5)+2]
 38527  006C94  0EFE               	movlw	254
 38528  006C96  24E1               	addwf	fsr1l,w,c
 38529  006C98  6ED9               	movwf	fsr2l,c
 38530  006C9A  0EFF               	movlw	255
 38531  006C9C  20E2               	addwfc	fsr1h,w,c
 38532  006C9E  6EDA               	movwf	fsr2h,c
 38533  006CA0  0EF9               	movlw	-7
 38534  006CA2  CFE3 FFDF          	movff	plusw1,indf2
 38535                           
 38536                           ;midi.c: 81: midiMessage[2]=message3;
 38537                           ;stkvar	sendUSB@message3 @ sp[(-5)+-3]
 38538                           ;stkvar	sendUSB@midiMessage @ sp[(-5)+2]
 38539  006CA6  0EFF               	movlw	255
 38540  006CA8  24E1               	addwf	fsr1l,w,c
 38541  006CAA  6ED9               	movwf	fsr2l,c
 38542  006CAC  0EFF               	movlw	255
 38543  006CAE  20E2               	addwfc	fsr1h,w,c
 38544  006CB0  6EDA               	movwf	fsr2h,c
 38545  006CB2  0EF8               	movlw	-8
 38546  006CB4  CFE3 FFDF          	movff	plusw1,indf2
 38547                           
 38548                           ;midi.c: 83: RA5 = 0;
 38549  006CB8  9A80               	bcf	3968,5,c	;volatile
 38550                           
 38551                           ;midi.c: 84: RB2 = 1;
 38552  006CBA  8481               	bsf	3969,2,c	;volatile
 38553                           
 38554                           ;midi.c: 85: _delay((unsigned long)((50)*(20000000/4000000.0)));
 38555  006CBC  0E53               	movlw	83
 38556  006CBE                     u67037:
 38557  006CBE  2EE8               	decfsz	wreg,f,c
 38558  006CC0  D7FE               	bra	u67037
 38559  006CC2  F000               	nop	
 38560                           
 38561                           ;midi.c: 87: for(unsigned char i=0;i<3;i++){
 38562                           ;stkvar	sendUSB@i @ sp[(-5)+1]
 38563  006CC4  0EFC               	movlw	-4
 38564  006CC6  6AE3               	clrf	plusw1,c
 38565  006CC8                     l31138:
 38566                           
 38567                           ;midi.c: 88: for(unsigned char ii=0;ii<8;ii++){
 38568                           ;stkvar	sendUSB@ii @ sp[(-5)+0]
 38569  006CC8  0EFB               	movlw	-5
 38570  006CCA  6AE3               	clrf	plusw1,c
 38571  006CCC                     l31144:
 38572                           
 38573                           ;midi.c: 91: RE2 = !!(midiMessage[i] & (1 << ii));
 38574                           ;stkvar	sendUSB@i @ sp[(-5)+1]
 38575  006CCC  0EFC               	movlw	-4
 38576  006CCE  CFE3 F04A          	movff	plusw1,btemp+11
 38577                           
 38578                           ;stkvar	sendUSB@midiMessage @ sp[(-5)+2]
 38579  006CD2  0EFD               	movlw	253
 38580  006CD4  24E1               	addwf	fsr1l,w,c
 38581  006CD6  6E40               	movwf	btemp+1,c
 38582  006CD8  0EFF               	movlw	255
 38583  006CDA  20E2               	addwfc	fsr1h,w,c
 38584  006CDC  6E41               	movwf	btemp+2,c
 38585  006CDE  504A               	movf	btemp+11,w,c
 38586  006CE0  2440               	addwf	btemp+1,w,c
 38587  006CE2  6ED9               	movwf	fsr2l,c
 38588  006CE4  0E00               	movlw	0
 38589  006CE6  2041               	addwfc	btemp+2,w,c
 38590  006CE8  6EDA               	movwf	fsr2h,c
 38591  006CEA  50DF               	movf	indf2,w,c
 38592  006CEC  6E4A               	movwf	btemp+11,c
 38593                           
 38594                           ;stkvar	sendUSB@ii @ sp[(-5)+0]
 38595  006CEE  0EFB               	movlw	-5
 38596  006CF0  CFE3 F049          	movff	plusw1,btemp+10
 38597  006CF4  0E01               	movlw	1
 38598  006CF6  6E48               	movwf	btemp+9,c
 38599  006CF8  2A49               	incf	btemp+10,f,c
 38600  006CFA  D002               	goto	u56674
 38601  006CFC                     u56675:
 38602  006CFC  90D8               	bcf	status,0,c
 38603  006CFE  3648               	rlcf	btemp+9,f,c
 38604  006D00                     u56674:
 38605  006D00  2E49               	decfsz	btemp+10,f,c
 38606  006D02  D7FC               	goto	u56675
 38607  006D04  5048               	movf	btemp+9,w,c
 38608  006D06  144A               	andwf	btemp+11,w,c
 38609  006D08  0900               	iorlw	0
 38610  006D0A  B4D8               	btfsc	status,2,c
 38611  006D0C  D002               	goto	u56680
 38612  006D0E  8484               	bsf	3972,2,c	;volatile
 38613  006D10  D001               	goto	u56695
 38614  006D12                     u56680:
 38615  006D12  9484               	bcf	3972,2,c	;volatile
 38616  006D14                     u56695:
 38617                           
 38618                           ;midi.c: 93: _delay((unsigned long)((50)*(20000000/4000000.0)));
 38619  006D14  0E53               	movlw	83
 38620  006D16                     u67047:
 38621  006D16  2EE8               	decfsz	wreg,f,c
 38622  006D18  D7FE               	bra	u67047
 38623  006D1A  F000               	nop	
 38624                           
 38625                           ;midi.c: 95: RA5 = 1;
 38626  006D1C  8A80               	bsf	3968,5,c	;volatile
 38627                           
 38628                           ;midi.c: 96: _delay((unsigned long)((50)*(20000000/4000000.0)));
 38629  006D1E  0E53               	movlw	83
 38630  006D20                     u67057:
 38631  006D20  2EE8               	decfsz	wreg,f,c
 38632  006D22  D7FE               	bra	u67057
 38633  006D24  F000               	nop	
 38634                           
 38635                           ;midi.c: 98: RA5 = 0;
 38636  006D26  9A80               	bcf	3968,5,c	;volatile
 38637                           
 38638                           ;midi.c: 99: _delay((unsigned long)((50)*(20000000/4000000.0)));
 38639  006D28  0E53               	movlw	83
 38640  006D2A                     u67067:
 38641  006D2A  2EE8               	decfsz	wreg,f,c
 38642  006D2C  D7FE               	bra	u67067
 38643  006D2E  F000               	nop	
 38644                           
 38645                           ;stkvar	sendUSB@ii @ sp[(-5)+0]
 38646  006D30  0EFB               	movlw	-5
 38647  006D32  2AE3               	incf	plusw1,f,c
 38648                           
 38649                           ;stkvar	sendUSB@ii @ sp[(-5)+0]
 38650  006D34  0EFB               	movlw	-5
 38651  006D36  CFE3 F03F          	movff	plusw1,btemp
 38652  006D3A  0E07               	movlw	7
 38653  006D3C  643F               	cpfsgt	btemp,c
 38654  006D3E  D7C6               	goto	l31144
 38655                           
 38656                           ;stkvar	sendUSB@i @ sp[(-5)+1]
 38657  006D40  0EFC               	movlw	-4
 38658  006D42  2AE3               	incf	plusw1,f,c
 38659                           
 38660                           ;stkvar	sendUSB@i @ sp[(-5)+1]
 38661  006D44  0EFC               	movlw	-4
 38662  006D46  CFE3 F03F          	movff	plusw1,btemp
 38663  006D4A  0E02               	movlw	2
 38664  006D4C  643F               	cpfsgt	btemp,c
 38665  006D4E  D7BC               	goto	l31138
 38666                           
 38667                           ;midi.c: 100: }
 38668                           ;midi.c: 101: }
 38669                           ;midi.c: 103: RB2 = 0;
 38670  006D50  9481               	bcf	3969,2,c	;volatile
 38671                           
 38672                           ;midi.c: 104: _delay((unsigned long)((50)*(20000000/4000000.0)));
 38673  006D52  0E53               	movlw	83
 38674  006D54                     u67077:
 38675  006D54  2EE8               	decfsz	wreg,f,c
 38676  006D56  D7FE               	bra	u67077
 38677  006D58  F000               	nop	
 38678                           
 38679                           ; _sendUSB: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsi
      +                          ze = 3, vargsize = 0
 38680  006D5A  0EF8               	movlw	248
 38681  006D5C  26E1               	addwf	fsr1l,f,c
 38682  006D5E  0EFF               	movlw	255
 38683  006D60  22E2               	addwfc	fsr1h,f,c
 38684  006D62  0012               	return		;funcret
 38685  006D64                     __end_of_sendUSB:
 38686                           	opt stack 0
 38687                           tblptru	equ	0xFF8
 38688                           tblptrh	equ	0xFF7
 38689                           tblptrl	equ	0xFF6
 38690                           tablat	equ	0xFF5
 38691                           prodh	equ	0xFF4
 38692                           prodl	equ	0xFF3
 38693                           intcon	equ	0xFF2
 38694                           intcon2	equ	0xFF1
 38695                           indf0	equ	0xFEF
 38696                           postinc0	equ	0xFEE
 38697                           postdec0	equ	0xFED
 38698                           fsr0h	equ	0xFEA
 38699                           fsr0l	equ	0xFE9
 38700                           wreg	equ	0xFE8
 38701                           postinc1	equ	0xFE6
 38702                           postdec1	equ	0xFE5
 38703                           plusw1	equ	0xFE3
 38704                           fsr1h	equ	0xFE2
 38705                           fsr1l	equ	0xFE1
 38706                           indf2	equ	0xFDF
 38707                           postinc2	equ	0xFDE
 38708                           postdec2	equ	0xFDD
 38709                           plusw2	equ	0xFDB
 38710                           fsr2h	equ	0xFDA
 38711                           fsr2l	equ	0xFD9
 38712                           status	equ	0xFD8
 38713                           
 38714 ;; *************** function _sendOut *****************
 38715 ;; Defined at:
 38716 ;;		line 35 in file "midi.c"
 38717 ;; Parameters:    Size  Location     Type
 38718 ;;  message1        1  [STACK] unsigned char 
 38719 ;;  message2        1  [STACK] unsigned char 
 38720 ;;  message3        1  [STACK] unsigned char 
 38721 ;; Auto vars:     Size  Location     Type
 38722 ;;  i               1  [STACK] unsigned char 
 38723 ;;  midiMessage     3  [STACK] unsigned char [3]
 38724 ;;  number_of_mi    1  [STACK] unsigned char 
 38725 ;; Return value:  Size  Location     Type
 38726 ;;                  1  [STACK] void 
 38727 ;; Registers used:
 38728 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+11
 38729 ;; Tracked objects:
 38730 ;;		On entry : 0/0
 38731 ;;		On exit  : 0/0
 38732 ;;		Unchanged: 0/0
 38733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38738 ;;Total ram usage:        0 bytes
 38739 ;; Hardware stack levels used:    1
 38740 ;; Hardware stack levels required when called:    5
 38741 ;; This function calls:
 38742 ;;		Nothing
 38743 ;; This function is called by:
 38744 ;;		_noteOff
 38745 ;;		_noteOn
 38746 ;;		_noteOffDrum
 38747 ;;		_noteOnDrum
 38748 ;;		_controlChange
 38749 ;;		_pitchBend
 38750 ;;		_programChange
 38751 ;; This function uses a reentrant model
 38752 ;;
 38753                           
 38754                           	psect	text111
 38755  006B92                     __ptext111:
 38756                           	opt stack 0
 38757  006B92                     _sendOut:
 38758                           	opt stack 0
 38759                           
 38760                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
 38761  006B92  0E05               	movlw	5
 38762  006B94  26E1               	addwf	fsr1l,f,c
 38763  006B96  0E00               	movlw	0
 38764  006B98  22E2               	addwfc	fsr1h,f,c
 38765                           
 38766                           ;midi.c: 37: unsigned char midiMessage[3];
 38767                           ;midi.c: 38: unsigned char number_of_midi_message_bytes;
 38768                           ;midi.c: 40: midiMessage[0]=message1;
 38769                           ;stkvar	sendOut@message1 @ sp[(-5)+-1]
 38770                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 38771                           
 38772                           ;incstack = 0
 38773  006B9A  0EFA               	movlw	-6
 38774  006B9C  CFE3 F03F          	movff	plusw1,btemp
 38775  006BA0  0EFC               	movlw	-4
 38776  006BA2  C03F  FFE3         	movff	btemp,plusw1
 38777                           
 38778                           ;midi.c: 41: midiMessage[1]=message2;
 38779                           ;stkvar	sendOut@message2 @ sp[(-5)+-2]
 38780                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 38781  006BA6  0EFD               	movlw	253
 38782  006BA8  24E1               	addwf	fsr1l,w,c
 38783  006BAA  6ED9               	movwf	fsr2l,c
 38784  006BAC  0EFF               	movlw	255
 38785  006BAE  20E2               	addwfc	fsr1h,w,c
 38786  006BB0  6EDA               	movwf	fsr2h,c
 38787  006BB2  0EF9               	movlw	-7
 38788  006BB4  CFE3 FFDF          	movff	plusw1,indf2
 38789                           
 38790                           ;midi.c: 42: midiMessage[2]=message3;
 38791                           ;stkvar	sendOut@message3 @ sp[(-5)+-3]
 38792                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 38793  006BB8  0EFE               	movlw	254
 38794  006BBA  24E1               	addwf	fsr1l,w,c
 38795  006BBC  6ED9               	movwf	fsr2l,c
 38796  006BBE  0EFF               	movlw	255
 38797  006BC0  20E2               	addwfc	fsr1h,w,c
 38798  006BC2  6EDA               	movwf	fsr2h,c
 38799  006BC4  0EF8               	movlw	-8
 38800  006BC6  CFE3 FFDF          	movff	plusw1,indf2
 38801                           
 38802                           ;midi.c: 52: if(CONTROL_CHANGE_IS_BEING_SENT == 1) {
 38803  006BCA  A206               	btfss	_CONTROL_CHANGE_IS_BEING_SENT/(0+8),_CONTROL_CHANGE_IS_BEING_SENT& (0+7),c
 38804  006BCC  D018               	goto	l31104
 38805                           
 38806                           ;midi.c: 53: midiMessage[0] = channel | control_change;
 38807  006BCE  C03E  F04A         	movff	_channel,btemp+11
 38808  006BD2  0EB0               	movlw	176
 38809  006BD4  124A               	iorwf	btemp+11,f,c
 38810                           
 38811                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 38812  006BD6  0EFC               	movlw	-4
 38813  006BD8  C04A  FFE3         	movff	btemp+11,plusw1
 38814                           
 38815                           ;midi.c: 54: midiMessage[1] = GLOBAL_CC_NUMBER;
 38816                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 38817  006BDC  0EFD               	movlw	253
 38818  006BDE  24E1               	addwf	fsr1l,w,c
 38819  006BE0  6ED9               	movwf	fsr2l,c
 38820  006BE2  0EFF               	movlw	255
 38821  006BE4  20E2               	addwfc	fsr1h,w,c
 38822  006BE6  6EDA               	movwf	fsr2h,c
 38823  006BE8  C0F4  FFDF         	movff	_GLOBAL_CC_NUMBER,indf2
 38824                           
 38825                           ;midi.c: 55: midiMessage[2] = GLOBAL_CC_VALUE;
 38826                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 38827  006BEC  0EFE               	movlw	254
 38828  006BEE  24E1               	addwf	fsr1l,w,c
 38829  006BF0  6ED9               	movwf	fsr2l,c
 38830  006BF2  0EFF               	movlw	255
 38831  006BF4  20E2               	addwfc	fsr1h,w,c
 38832  006BF6  6EDA               	movwf	fsr2h,c
 38833  006BF8  C180  FFDF         	movff	_GLOBAL_CC_VALUE,indf2
 38834                           
 38835                           ;midi.c: 56: CONTROL_CHANGE_IS_BEING_SENT = 0;
 38836  006BFC  9206               	bcf	_CONTROL_CHANGE_IS_BEING_SENT/(0+8),_CONTROL_CHANGE_IS_BEING_SENT& (0+7),c
 38837  006BFE                     l31104:
 38838                           
 38839                           ;midi.c: 57: }
 38840                           ;midi.c: 60: if(midiMessage[0] == (channel | program_change)){number_of_midi_message_byt
      +                          es = 2;}
 38841                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 38842  006BFE  C03E  F04A         	movff	_channel,btemp+11
 38843  006C02  0EC0               	movlw	192
 38844  006C04  124A               	iorwf	btemp+11,f,c
 38845  006C06  0EFC               	movlw	-4
 38846  006C08  50E3               	movf	plusw1,w,c
 38847  006C0A  184A               	xorwf	btemp+11,w,c
 38848  006C0C  A4D8               	btfss	status,2,c
 38849  006C0E  D003               	goto	l31108
 38850                           
 38851                           ;stkvar	sendOut@number_of_midi_message_bytes @ sp[(-5)+4]
 38852  006C10  0EFF               	movlw	-1
 38853  006C12  6AE3               	clrf	plusw1,c
 38854  006C14  D003               	goto	L21
 38855  006C16                     l31108:
 38856                           
 38857                           ;midi.c: 61: else{number_of_midi_message_bytes = 3;}
 38858                           ;stkvar	sendOut@number_of_midi_message_bytes @ sp[(-5)+4]
 38859  006C16  0EFF               	movlw	-1
 38860  006C18  6AE3               	clrf	plusw1,c
 38861  006C1A  80E3               	bsf	plusw1,0,c
 38862  006C1C                     L21:
 38863  006C1C  82E3               	bsf	plusw1,1,c	;indir
 38864                           
 38865                           ;midi.c: 64: for(unsigned char i=0;i<number_of_midi_message_bytes;i++){
 38866                           ;stkvar	sendOut@i @ sp[(-5)+0]
 38867  006C1E  0EFB               	movlw	-5
 38868  006C20  6AE3               	clrf	plusw1,c
 38869  006C22  D01D               	goto	l31118
 38870  006C24                     l31112:
 38871                           
 38872                           ;midi.c: 65: TXREG = midiMessage[i];
 38873                           ;stkvar	sendOut@i @ sp[(-5)+0]
 38874  006C24  0EFB               	movlw	-5
 38875  006C26  CFE3 F04A          	movff	plusw1,btemp+11
 38876                           
 38877                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 38878  006C2A  0EFC               	movlw	252
 38879  006C2C  24E1               	addwf	fsr1l,w,c
 38880  006C2E  6E40               	movwf	btemp+1,c
 38881  006C30  0EFF               	movlw	255
 38882  006C32  20E2               	addwfc	fsr1h,w,c
 38883  006C34  6E41               	movwf	btemp+2,c
 38884  006C36  504A               	movf	btemp+11,w,c
 38885  006C38  2440               	addwf	btemp+1,w,c
 38886  006C3A  6ED9               	movwf	fsr2l,c
 38887  006C3C  0E00               	movlw	0
 38888  006C3E  2041               	addwfc	btemp+2,w,c
 38889  006C40  6EDA               	movwf	fsr2h,c
 38890  006C42  50DF               	movf	indf2,w,c
 38891  006C44  6EAD               	movwf	4013,c	;volatile
 38892  006C46                     l464:
 38893  006C46  A2AC               	btfss	4012,1,c	;volatile
 38894  006C48  D7FE               	goto	l464
 38895                           
 38896                           ;midi.c: 68: TXIF = 0;
 38897  006C4A  989E               	bcf	3998,4,c	;volatile
 38898                           
 38899                           ;midi.c: 69: _delay((unsigned long)((320)*(20000000/4000000.0)));
 38900  006C4C  0EE4               	movlw	228
 38901  006C4E                     u67087:
 38902  006C4E  D000               	nop2	
 38903  006C50  D000               	nop2	
 38904  006C52  2EE8               	decfsz	wreg,f,c
 38905  006C54  D7FC               	bra	u67087
 38906  006C56  D000               	nop2	
 38907  006C58  D000               	nop2	
 38908                           
 38909                           ;stkvar	sendOut@i @ sp[(-5)+0]
 38910  006C5A  0EFB               	movlw	-5
 38911  006C5C  2AE3               	incf	plusw1,f,c
 38912  006C5E                     l31118:
 38913                           
 38914                           ;stkvar	sendOut@number_of_midi_message_bytes @ sp[(-5)+4]
 38915                           ;stkvar	sendOut@i @ sp[(-5)+0]
 38916  006C5E  50E1               	movf	fsr1l,w,c
 38917  006C60  0FFB               	addlw	-5
 38918  006C62  6ED9               	movwf	fsr2l,c
 38919  006C64  50E2               	movf	fsr1h,w,c
 38920  006C66  6EDA               	movwf	fsr2h,c
 38921  006C68  0EFF               	movlw	255
 38922  006C6A  22DA               	addwfc	fsr2h,f,c
 38923  006C6C  0EFF               	movlw	-1
 38924  006C6E  50E3               	movf	plusw1,w,c
 38925  006C70  5CDE               	subwf	postinc2,w,c
 38926  006C72  A0D8               	btfss	status,0,c
 38927  006C74  D7D7               	goto	l31112
 38928                           
 38929                           ; _sendOut: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsi
      +                          ze = 3, vargsize = 0
 38930  006C76  0EF8               	movlw	248
 38931  006C78  26E1               	addwf	fsr1l,f,c
 38932  006C7A  0EFF               	movlw	255
 38933  006C7C  22E2               	addwfc	fsr1h,f,c
 38934  006C7E  0012               	return		;funcret
 38935  006C80                     __end_of_sendOut:
 38936                           	opt stack 0
 38937                           tblptru	equ	0xFF8
 38938                           tblptrh	equ	0xFF7
 38939                           tblptrl	equ	0xFF6
 38940                           tablat	equ	0xFF5
 38941                           prodh	equ	0xFF4
 38942                           prodl	equ	0xFF3
 38943                           intcon	equ	0xFF2
 38944                           intcon2	equ	0xFF1
 38945                           indf0	equ	0xFEF
 38946                           postinc0	equ	0xFEE
 38947                           postdec0	equ	0xFED
 38948                           fsr0h	equ	0xFEA
 38949                           fsr0l	equ	0xFE9
 38950                           wreg	equ	0xFE8
 38951                           postinc1	equ	0xFE6
 38952                           postdec1	equ	0xFE5
 38953                           plusw1	equ	0xFE3
 38954                           fsr1h	equ	0xFE2
 38955                           fsr1l	equ	0xFE1
 38956                           indf2	equ	0xFDF
 38957                           postinc2	equ	0xFDE
 38958                           postdec2	equ	0xFDD
 38959                           plusw2	equ	0xFDB
 38960                           fsr2h	equ	0xFDA
 38961                           fsr2l	equ	0xFD9
 38962                           status	equ	0xFD8
 38963                           
 38964 ;; *************** function ___lbmod *****************
 38965 ;; Defined at:
 38966 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lbmod.c"
 38967 ;; Parameters:    Size  Location     Type
 38968 ;;  dividend        1  [STACK] unsigned char 
 38969 ;;  divisor         1  [STACK] unsigned char 
 38970 ;; Auto vars:     Size  Location     Type
 38971 ;;  rem             1  [STACK] unsigned char 
 38972 ;;  counter         1  [STACK] unsigned char 
 38973 ;; Return value:  Size  Location     Type
 38974 ;;                  1  [STACK] unsigned char 
 38975 ;; Registers used:
 38976 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11
 38977 ;; Tracked objects:
 38978 ;;		On entry : 0/1
 38979 ;;		On exit  : 0/0
 38980 ;;		Unchanged: 0/0
 38981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38986 ;;Total ram usage:        0 bytes
 38987 ;; Hardware stack levels used:    1
 38988 ;; Hardware stack levels required when called:    5
 38989 ;; This function calls:
 38990 ;;		Nothing
 38991 ;; This function is called by:
 38992 ;;		_controlChange
 38993 ;;		_pitchBend
 38994 ;;		_programChange
 38995 ;;		_menu_lcd
 38996 ;;		_Function_A_1
 38997 ;;		_Function_A_2
 38998 ;;		_Function_A_3
 38999 ;;		_Function_A
 39000 ;;		_Function_B
 39001 ;;		_Function_C_1
 39002 ;;		_Function_C_2
 39003 ;;		_Function_C_3
 39004 ;;		_Function_C
 39005 ;;		_Function_D_1
 39006 ;;		_Function_D_3
 39007 ;;		_Function_D_4
 39008 ;;		_Function_D_5
 39009 ;;		_Function_D
 39010 ;;		_Function_E
 39011 ;;		_Function_G_1
 39012 ;;		_Function_G_2
 39013 ;;		_Function_G_4
 39014 ;;		_Function_G
 39015 ;;		_Function_H
 39016 ;;		_Function_H_4
 39017 ;;		_Function_H_5
 39018 ;;		_Function_H_6
 39019 ;;		_Function_H_8
 39020 ;;		_Function_H_9_1
 39021 ;;		_Function_H_9_2
 39022 ;;		_Function_H_9_3
 39023 ;;		_Function_H_9_4
 39024 ;;		_Function_H_9
 39025 ;;		_ISR
 39026 ;; This function uses a reentrant model
 39027 ;;
 39028                           
 39029                           	psect	text112
 39030  00818C                     __ptext112:
 39031                           	opt stack 0
 39032  00818C                     ___lbmod:
 39033                           	opt stack 0
 39034                           
 39035                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
 39036  00818C  52E6               	movf	postinc1,f,c
 39037  00818E  52E6               	movf	postinc1,f,c
 39038                           
 39039                           ;stkvar	___lbmod@counter @ sp[(-2)+1]
 39040                           
 39041                           ;incstack = 0
 39042  008190  0EFF               	movlw	-1
 39043  008192  6AE3               	clrf	plusw1,c
 39044  008194  86E3               	bsf	plusw1,3,c
 39045                           
 39046                           ;stkvar	___lbmod@rem @ sp[(-2)+0]
 39047  008196  0EFE               	movlw	-2
 39048  008198  6AE3               	clrf	plusw1,c
 39049  00819A                     l33626:
 39050                           
 39051                           ;stkvar	___lbmod@dividend @ sp[(-2)+-1]
 39052  00819A  0EFD               	movlw	-3
 39053  00819C  CFE3 F04A          	movff	plusw1,btemp+11
 39054                           
 39055                           ;stkvar	___lbmod@rem @ sp[(-2)+0]
 39056  0081A0  0EFE               	movlw	-2
 39057  0081A2  CFE3 F049          	movff	plusw1,btemp+10
 39058  0081A6  90D8               	bcf	status,0,c
 39059  0081A8  344A               	rlcf	btemp+11,w,c
 39060  0081AA  3449               	rlcf	btemp+10,w,c
 39061  0081AC  6E4A               	movwf	btemp+11,c
 39062                           
 39063                           ;stkvar	___lbmod@rem @ sp[(-2)+0]
 39064  0081AE  0EFE               	movlw	-2
 39065  0081B0  C04A  FFE3         	movff	btemp+11,plusw1
 39066                           
 39067                           ;stkvar	___lbmod@dividend @ sp[(-2)+-1]
 39068  0081B4  50E1               	movf	fsr1l,w,c
 39069  0081B6  0FFD               	addlw	-3
 39070  0081B8  6ED9               	movwf	fsr2l,c
 39071  0081BA  50E2               	movf	fsr1h,w,c
 39072  0081BC  6EDA               	movwf	fsr2h,c
 39073  0081BE  0EFF               	movlw	255
 39074  0081C0  22DA               	addwfc	fsr2h,f,c
 39075  0081C2  90D8               	bcf	status,0,c
 39076  0081C4  36DF               	rlcf	indf2,f,c
 39077                           
 39078                           ;stkvar	___lbmod@divisor @ sp[(-2)+-2]
 39079                           ;stkvar	___lbmod@rem @ sp[(-2)+0]
 39080  0081C6  50E1               	movf	fsr1l,w,c
 39081  0081C8  0FFE               	addlw	-2
 39082  0081CA  6ED9               	movwf	fsr2l,c
 39083  0081CC  50E2               	movf	fsr1h,w,c
 39084  0081CE  6EDA               	movwf	fsr2h,c
 39085  0081D0  0EFF               	movlw	255
 39086  0081D2  22DA               	addwfc	fsr2h,f,c
 39087  0081D4  0EFC               	movlw	-4
 39088  0081D6  50E3               	movf	plusw1,w,c
 39089  0081D8  5CDE               	subwf	postinc2,w,c
 39090  0081DA  A0D8               	btfss	status,0,c
 39091  0081DC  D00C               	goto	l33634
 39092                           
 39093                           ;stkvar	___lbmod@divisor @ sp[(-2)+-2]
 39094  0081DE  0EFC               	movlw	-4
 39095  0081E0  CFE3 F04A          	movff	plusw1,btemp+11
 39096                           
 39097                           ;stkvar	___lbmod@rem @ sp[(-2)+0]
 39098  0081E4  50E1               	movf	fsr1l,w,c
 39099  0081E6  0FFE               	addlw	-2
 39100  0081E8  6ED9               	movwf	fsr2l,c
 39101  0081EA  50E2               	movf	fsr1h,w,c
 39102  0081EC  6EDA               	movwf	fsr2h,c
 39103  0081EE  0EFF               	movlw	255
 39104  0081F0  22DA               	addwfc	fsr2h,f,c
 39105  0081F2  504A               	movf	btemp+11,w,c
 39106  0081F4  5EDF               	subwf	indf2,f,c
 39107  0081F6                     l33634:
 39108                           
 39109                           ;stkvar	___lbmod@counter @ sp[(-2)+1]
 39110  0081F6  0EFF               	movlw	-1
 39111  0081F8  50E3               	movf	plusw1,w,c
 39112  0081FA  6E3F               	movwf	btemp,c
 39113  0081FC  0E01               	movlw	1
 39114  0081FE  5E3F               	subwf	btemp,f,c
 39115  008200  0EFF               	movlw	-1
 39116  008202  C03F  FFE3         	movff	btemp,plusw1
 39117  008206  A4D8               	btfss	status,2,c
 39118  008208  D7C8               	goto	l33626
 39119                           
 39120                           ;stkvar	___lbmod@rem @ sp[(-2)+0]
 39121  00820A  0EFE               	movlw	-2
 39122  00820C  CFE3 F03F          	movff	plusw1,btemp
 39123                           
 39124                           ; ___lbmod: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsi
      +                          ze = 2, vargsize = 0
 39125  008210  52E5               	movf	postdec1,f,c
 39126  008212  52E5               	movf	postdec1,f,c
 39127  008214  52E5               	movf	postdec1,f,c
 39128  008216  52E5               	movf	postdec1,f,c
 39129  008218  0012               	return		;funcret
 39130  00821A                     __end_of___lbmod:
 39131                           	opt stack 0
 39132                           tblptru	equ	0xFF8
 39133                           tblptrh	equ	0xFF7
 39134                           tblptrl	equ	0xFF6
 39135                           tablat	equ	0xFF5
 39136                           prodh	equ	0xFF4
 39137                           prodl	equ	0xFF3
 39138                           intcon	equ	0xFF2
 39139                           intcon2	equ	0xFF1
 39140                           indf0	equ	0xFEF
 39141                           postinc0	equ	0xFEE
 39142                           postdec0	equ	0xFED
 39143                           fsr0h	equ	0xFEA
 39144                           fsr0l	equ	0xFE9
 39145                           wreg	equ	0xFE8
 39146                           postinc1	equ	0xFE6
 39147                           postdec1	equ	0xFE5
 39148                           plusw1	equ	0xFE3
 39149                           fsr1h	equ	0xFE2
 39150                           fsr1l	equ	0xFE1
 39151                           indf2	equ	0xFDF
 39152                           postinc2	equ	0xFDE
 39153                           postdec2	equ	0xFDD
 39154                           plusw2	equ	0xFDB
 39155                           fsr2h	equ	0xFDA
 39156                           fsr2l	equ	0xFD9
 39157                           status	equ	0xFD8
 39158                           
 39159 ;; *************** function _map *****************
 39160 ;; Defined at:
 39161 ;;		line 29 in file "potentiometers.c"
 39162 ;; Parameters:    Size  Location     Type
 39163 ;;  x               4   14[BANK0 ] long 
 39164 ;;  in_min          4   18[BANK0 ] long 
 39165 ;;  in_max          4   22[BANK0 ] long 
 39166 ;;  out_min         4   26[BANK0 ] long 
 39167 ;;  out_max         4   30[BANK0 ] long 
 39168 ;; Auto vars:     Size  Location     Type
 39169 ;;		None
 39170 ;; Return value:  Size  Location     Type
 39171 ;;                  4   14[BANK0 ] long 
 39172 ;; Registers used:
 39173 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, cstack
 39174 ;; Tracked objects:
 39175 ;;		On entry : 0/0
 39176 ;;		On exit  : 0/0
 39177 ;;		Unchanged: 0/0
 39178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 39179 ;;      Params:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39181 ;;      Temps:          0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39182 ;;      Totals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39183 ;;Total ram usage:       40 bytes
 39184 ;; Hardware stack levels used:    1
 39185 ;; Hardware stack levels required when called:    6
 39186 ;; This function calls:
 39187 ;;		___aldiv
 39188 ;;		___lmul
 39189 ;; This function is called by:
 39190 ;;		_readPotentiometers
 39191 ;; This function uses a non-reentrant model
 39192 ;;
 39193                           
 39194                           	psect	text113
 39195  0065A4                     __ptext113:
 39196                           	opt stack 0
 39197  0065A4                     _map:
 39198                           	opt stack 19
 39199                           
 39200                           ;potentiometers.c: 30: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + o
      +                          ut_min;
 39201                           
 39202                           ;incstack = 0
 39203  0065A4  C07A  F082         	movff	map@out_min,??_map
 39204  0065A8  C07B  F083         	movff	map@out_min+1,??_map+1
 39205  0065AC  C07C  F084         	movff	map@out_min+2,??_map+2
 39206  0065B0  C07D  F085         	movff	map@out_min+3,??_map+3
 39207  0065B4  0100               	movlb	0	; () banked
 39208  0065B6  1F82               	comf	??_map& (0+255),f,b
 39209  0065B8  1F83               	comf	(??_map+1)& (0+255),f,b
 39210  0065BA  1F84               	comf	(??_map+2)& (0+255),f,b
 39211  0065BC  1F85               	comf	(??_map+3)& (0+255),f,b
 39212  0065BE  2B82               	incf	??_map& (0+255),f,b
 39213  0065C0  0E00               	movlw	0
 39214  0065C2  2383               	addwfc	(??_map+1)& (0+255),f,b
 39215  0065C4  2384               	addwfc	(??_map+2)& (0+255),f,b
 39216  0065C6  2385               	addwfc	(??_map+3)& (0+255),f,b
 39217  0065C8  517E               	movf	map@out_max& (0+255),w,b
 39218  0065CA  2582               	addwf	??_map& (0+255),w,b
 39219  0065CC  6F86               	movwf	(??_map+4)& (0+255),b
 39220  0065CE  517F               	movf	(map@out_max+1)& (0+255),w,b
 39221  0065D0  2183               	addwfc	(??_map+1)& (0+255),w,b
 39222  0065D2  6F87               	movwf	(??_map+5)& (0+255),b
 39223  0065D4  5180               	movf	(map@out_max+2)& (0+255),w,b
 39224  0065D6  2184               	addwfc	(??_map+2)& (0+255),w,b
 39225  0065D8  6F88               	movwf	(??_map+6)& (0+255),b
 39226  0065DA  5181               	movf	(map@out_max+3)& (0+255),w,b
 39227  0065DC  2185               	addwfc	(??_map+3)& (0+255),w,b
 39228  0065DE  6F89               	movwf	(??_map+7)& (0+255),b
 39229  0065E0  C086  FFE6         	movff	??_map+4,postinc1
 39230  0065E4  C087  FFE6         	movff	??_map+5,postinc1
 39231  0065E8  C088  FFE6         	movff	??_map+6,postinc1
 39232  0065EC  C089  FFE6         	movff	??_map+7,postinc1
 39233  0065F0  C072  F08A         	movff	map@in_min,??_map+8
 39234  0065F4  C073  F08B         	movff	map@in_min+1,??_map+9
 39235  0065F8  C074  F08C         	movff	map@in_min+2,??_map+10
 39236  0065FC  C075  F08D         	movff	map@in_min+3,??_map+11
 39237  006600  1F8A               	comf	(??_map+8)& (0+255),f,b
 39238  006602  1F8B               	comf	(??_map+9)& (0+255),f,b
 39239  006604  1F8C               	comf	(??_map+10)& (0+255),f,b
 39240  006606  1F8D               	comf	(??_map+11)& (0+255),f,b
 39241  006608  2B8A               	incf	(??_map+8)& (0+255),f,b
 39242  00660A  0E00               	movlw	0
 39243  00660C  238B               	addwfc	(??_map+9)& (0+255),f,b
 39244  00660E  238C               	addwfc	(??_map+10)& (0+255),f,b
 39245  006610  238D               	addwfc	(??_map+11)& (0+255),f,b
 39246  006612  516E               	movf	map@x& (0+255),w,b
 39247  006614  258A               	addwf	(??_map+8)& (0+255),w,b
 39248  006616  6F8E               	movwf	(??_map+12)& (0+255),b
 39249  006618  516F               	movf	(map@x+1)& (0+255),w,b
 39250  00661A  218B               	addwfc	(??_map+9)& (0+255),w,b
 39251  00661C  6F8F               	movwf	(??_map+13)& (0+255),b
 39252  00661E  5170               	movf	(map@x+2)& (0+255),w,b
 39253  006620  218C               	addwfc	(??_map+10)& (0+255),w,b
 39254  006622  6F90               	movwf	(??_map+14)& (0+255),b
 39255  006624  5171               	movf	(map@x+3)& (0+255),w,b
 39256  006626  218D               	addwfc	(??_map+11)& (0+255),w,b
 39257  006628  6F91               	movwf	(??_map+15)& (0+255),b
 39258  00662A  C08E  FFE6         	movff	??_map+12,postinc1
 39259  00662E  C08F  FFE6         	movff	??_map+13,postinc1
 39260  006632  C090  FFE6         	movff	??_map+14,postinc1
 39261  006636  C091  FFE6         	movff	??_map+15,postinc1
 39262  00663A  EC0A  F03A         	call	___lmul	;wreg free
 39263  00663E  C03F  F060         	movff	btemp,___aldiv@dividend
 39264  006642  C040  F061         	movff	btemp+1,___aldiv@dividend+1
 39265  006646  C041  F062         	movff	btemp+2,___aldiv@dividend+2
 39266  00664A  C042  F063         	movff	btemp+3,___aldiv@dividend+3
 39267  00664E  C072  F092         	movff	map@in_min,??_map+16
 39268  006652  C073  F093         	movff	map@in_min+1,??_map+17
 39269  006656  C074  F094         	movff	map@in_min+2,??_map+18
 39270  00665A  C075  F095         	movff	map@in_min+3,??_map+19
 39271  00665E  0100               	movlb	0	; () banked
 39272  006660  1F92               	comf	(??_map+16)& (0+255),f,b
 39273  006662  1F93               	comf	(??_map+17)& (0+255),f,b
 39274  006664  1F94               	comf	(??_map+18)& (0+255),f,b
 39275  006666  1F95               	comf	(??_map+19)& (0+255),f,b
 39276  006668  2B92               	incf	(??_map+16)& (0+255),f,b
 39277  00666A  0E00               	movlw	0
 39278  00666C  2393               	addwfc	(??_map+17)& (0+255),f,b
 39279  00666E  2394               	addwfc	(??_map+18)& (0+255),f,b
 39280  006670  2395               	addwfc	(??_map+19)& (0+255),f,b
 39281  006672  5176               	movf	map@in_max& (0+255),w,b
 39282  006674  2592               	addwf	(??_map+16)& (0+255),w,b
 39283  006676  6F64               	movwf	___aldiv@divisor& (0+255),b
 39284  006678  5177               	movf	(map@in_max+1)& (0+255),w,b
 39285  00667A  2193               	addwfc	(??_map+17)& (0+255),w,b
 39286  00667C  6F65               	movwf	(___aldiv@divisor+1)& (0+255),b
 39287  00667E  5178               	movf	(map@in_max+2)& (0+255),w,b
 39288  006680  2194               	addwfc	(??_map+18)& (0+255),w,b
 39289  006682  6F66               	movwf	(___aldiv@divisor+2)& (0+255),b
 39290  006684  5179               	movf	(map@in_max+3)& (0+255),w,b
 39291  006686  2195               	addwfc	(??_map+19)& (0+255),w,b
 39292  006688  6F67               	movwf	(___aldiv@divisor+3)& (0+255),b
 39293  00668A  ECA3  F039         	call	___aldiv	;wreg free
 39294  00668E  0100               	movlb	0	; () banked
 39295  006690  517A               	movf	map@out_min& (0+255),w,b
 39296  006692  2560               	addwf	?___aldiv& (0+255),w,b
 39297  006694  6F6E               	movwf	?_map& (0+255),b
 39298  006696  517B               	movf	(map@out_min+1)& (0+255),w,b
 39299  006698  2161               	addwfc	(?___aldiv+1)& (0+255),w,b
 39300  00669A  6F6F               	movwf	(?_map+1)& (0+255),b
 39301  00669C  517C               	movf	(map@out_min+2)& (0+255),w,b
 39302  00669E  2162               	addwfc	(?___aldiv+2)& (0+255),w,b
 39303  0066A0  6F70               	movwf	(?_map+2)& (0+255),b
 39304  0066A2  517D               	movf	(map@out_min+3)& (0+255),w,b
 39305  0066A4  2163               	addwfc	(?___aldiv+3)& (0+255),w,b
 39306  0066A6  6F71               	movwf	(?_map+3)& (0+255),b
 39307  0066A8  0012               	return	
 39308  0066AA                     __end_of_map:
 39309                           	opt stack 0
 39310                           tblptru	equ	0xFF8
 39311                           tblptrh	equ	0xFF7
 39312                           tblptrl	equ	0xFF6
 39313                           tablat	equ	0xFF5
 39314                           prodh	equ	0xFF4
 39315                           prodl	equ	0xFF3
 39316                           intcon	equ	0xFF2
 39317                           intcon2	equ	0xFF1
 39318                           indf0	equ	0xFEF
 39319                           postinc0	equ	0xFEE
 39320                           postdec0	equ	0xFED
 39321                           fsr0h	equ	0xFEA
 39322                           fsr0l	equ	0xFE9
 39323                           wreg	equ	0xFE8
 39324                           postinc1	equ	0xFE6
 39325                           postdec1	equ	0xFE5
 39326                           plusw1	equ	0xFE3
 39327                           fsr1h	equ	0xFE2
 39328                           fsr1l	equ	0xFE1
 39329                           indf2	equ	0xFDF
 39330                           postinc2	equ	0xFDE
 39331                           postdec2	equ	0xFDD
 39332                           plusw2	equ	0xFDB
 39333                           fsr2h	equ	0xFDA
 39334                           fsr2l	equ	0xFD9
 39335                           status	equ	0xFD8
 39336                           
 39337 ;; *************** function ___lmul *****************
 39338 ;; Defined at:
 39339 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 39340 ;; Parameters:    Size  Location     Type
 39341 ;;  multiplier      4  [STACK] unsigned long 
 39342 ;;  multiplicand    4  [STACK] unsigned long 
 39343 ;; Auto vars:     Size  Location     Type
 39344 ;;  product         4  [STACK] unsigned long 
 39345 ;; Return value:  Size  Location     Type
 39346 ;;                  4  [STACK] unsigned long 
 39347 ;; Registers used:
 39348 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3
 39349 ;; Tracked objects:
 39350 ;;		On entry : 0/0
 39351 ;;		On exit  : 0/0
 39352 ;;		Unchanged: 0/0
 39353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 39354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39358 ;;Total ram usage:        0 bytes
 39359 ;; Hardware stack levels used:    1
 39360 ;; Hardware stack levels required when called:    5
 39361 ;; This function calls:
 39362 ;;		Nothing
 39363 ;; This function is called by:
 39364 ;;		_map
 39365 ;;		_rand
 39366 ;; This function uses a reentrant model
 39367 ;;
 39368                           
 39369                           	psect	text114
 39370  007414                     __ptext114:
 39371                           	opt stack 0
 39372  007414                     ___lmul:
 39373                           	opt stack 0
 39374                           
 39375                           ; BSR set to: 0
 39376                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 8, argsize = 8 var
      +                          gsize = 0, retsize = 0
 39377  007414  52E6               	movf	postinc1,f,c
 39378  007416  52E6               	movf	postinc1,f,c
 39379  007418  52E6               	movf	postinc1,f,c
 39380  00741A  52E6               	movf	postinc1,f,c
 39381                           
 39382                           ;stkvar	___lmul@product @ sp[(-4)+0]
 39383                           
 39384                           ;incstack = 0
 39385  00741C  0EFC               	movlw	-4
 39386  00741E  6AE3               	clrf	plusw1,c
 39387  007420  0EFD               	movlw	-3
 39388  007422  6AE3               	clrf	plusw1,c
 39389  007424  0EFE               	movlw	-2
 39390  007426  6AE3               	clrf	plusw1,c
 39391  007428  0EFF               	movlw	-1
 39392  00742A  6AE3               	clrf	plusw1,c
 39393  00742C                     l5634:
 39394                           
 39395                           ;stkvar	___lmul@multiplier @ sp[(-4)+-4]
 39396  00742C  0EF8               	movlw	-8
 39397  00742E  A0E3               	btfss	plusw1,0,c
 39398  007430  D024               	goto	l31764
 39399                           
 39400                           ;stkvar	___lmul@multiplicand @ sp[(-4)+-8]
 39401                           ;stkvar	___lmul@product @ sp[(-4)+0]
 39402  007432  0EFC               	movlw	-4
 39403  007434  50E3               	movf	plusw1,w,c
 39404  007436  6E3F               	movwf	btemp,c
 39405  007438  0EF4               	movlw	-12
 39406  00743A  50E3               	movf	plusw1,w,c
 39407  00743C  263F               	addwf	btemp,f,c
 39408  00743E  0EFC               	movlw	-4
 39409  007440  C03F  FFE3         	movff	btemp,plusw1
 39410  007444  0EFD               	movlw	-3
 39411  007446  50E3               	movf	plusw1,w,c
 39412  007448  6E3F               	movwf	btemp,c
 39413  00744A  0EF5               	movlw	-11
 39414  00744C  50E3               	movf	plusw1,w,c
 39415  00744E  223F               	addwfc	btemp,f,c
 39416  007450  0EFD               	movlw	-3
 39417  007452  C03F  FFE3         	movff	btemp,plusw1
 39418  007456  0EFE               	movlw	-2
 39419  007458  50E3               	movf	plusw1,w,c
 39420  00745A  6E3F               	movwf	btemp,c
 39421  00745C  0EF6               	movlw	-10
 39422  00745E  50E3               	movf	plusw1,w,c
 39423  007460  223F               	addwfc	btemp,f,c
 39424  007462  0EFE               	movlw	-2
 39425  007464  C03F  FFE3         	movff	btemp,plusw1
 39426  007468  0EFF               	movlw	-1
 39427  00746A  50E3               	movf	plusw1,w,c
 39428  00746C  6E3F               	movwf	btemp,c
 39429  00746E  0EF7               	movlw	-9
 39430  007470  50E3               	movf	plusw1,w,c
 39431  007472  223F               	addwfc	btemp,f,c
 39432  007474  0EFF               	movlw	-1
 39433  007476  C03F  FFE3         	movff	btemp,plusw1
 39434  00747A                     l31764:
 39435                           
 39436                           ;stkvar	___lmul@multiplicand @ sp[(-4)+-8]
 39437  00747A  90D8               	bcf	status,0,c
 39438  00747C  0EF4               	movlw	-12
 39439  00747E  36E3               	rlcf	plusw1,f,c
 39440  007480  0EF5               	movlw	-11
 39441  007482  36E3               	rlcf	plusw1,f,c
 39442  007484  0EF6               	movlw	-10
 39443  007486  36E3               	rlcf	plusw1,f,c
 39444  007488  0EF7               	movlw	-9
 39445  00748A  36E3               	rlcf	plusw1,f,c
 39446                           
 39447                           ;stkvar	___lmul@multiplier @ sp[(-4)+-4]
 39448  00748C  90D8               	bcf	status,0,c
 39449  00748E  0EFB               	movlw	-5
 39450  007490  32E3               	rrcf	plusw1,f,c
 39451  007492  0EFA               	movlw	-6
 39452  007494  32E3               	rrcf	plusw1,f,c
 39453  007496  0EF9               	movlw	-7
 39454  007498  32E3               	rrcf	plusw1,f,c
 39455  00749A  0EF8               	movlw	-8
 39456  00749C  32E3               	rrcf	plusw1,f,c
 39457                           
 39458                           ;stkvar	___lmul@multiplier @ sp[(-4)+-4]
 39459  00749E  0EF8               	movlw	-8
 39460  0074A0  50E3               	movf	plusw1,w,c
 39461  0074A2  E1C4               	bnz	l5634
 39462  0074A4  0EF9               	movlw	-7
 39463  0074A6  50E3               	movf	plusw1,w,c
 39464  0074A8  E1C1               	bnz	l5634
 39465  0074AA  0EFA               	movlw	-6
 39466  0074AC  50E3               	movf	plusw1,w,c
 39467  0074AE  E1BE               	bnz	l5634
 39468  0074B0  0EFB               	movlw	-5
 39469  0074B2  50E3               	movf	plusw1,w,c
 39470  0074B4  A4D8               	btfss	status,2,c
 39471  0074B6  D7BA               	goto	l5634
 39472                           
 39473                           ;stkvar	___lmul@product @ sp[(-4)+0]
 39474  0074B8  0EFC               	movlw	-4
 39475  0074BA  CFE3 F03F          	movff	plusw1,btemp
 39476  0074BE  0EFD               	movlw	-3
 39477  0074C0  CFE3 F040          	movff	plusw1,btemp+1
 39478  0074C4  0EFE               	movlw	-2
 39479  0074C6  CFE3 F041          	movff	plusw1,btemp+2
 39480  0074CA  0EFF               	movlw	-1
 39481  0074CC  CFE3 F042          	movff	plusw1,btemp+3
 39482                           
 39483                           ; ___lmul: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 8, argsiz
      +                          e = 8, vargsize = 0
 39484  0074D0  0EF4               	movlw	244
 39485  0074D2  26E1               	addwf	fsr1l,f,c
 39486  0074D4  0EFF               	movlw	255
 39487  0074D6  22E2               	addwfc	fsr1h,f,c
 39488  0074D8  0012               	return		;funcret
 39489  0074DA                     __end_of___lmul:
 39490                           	opt stack 0
 39491                           tblptru	equ	0xFF8
 39492                           tblptrh	equ	0xFF7
 39493                           tblptrl	equ	0xFF6
 39494                           tablat	equ	0xFF5
 39495                           prodh	equ	0xFF4
 39496                           prodl	equ	0xFF3
 39497                           intcon	equ	0xFF2
 39498                           intcon2	equ	0xFF1
 39499                           indf0	equ	0xFEF
 39500                           postinc0	equ	0xFEE
 39501                           postdec0	equ	0xFED
 39502                           fsr0h	equ	0xFEA
 39503                           fsr0l	equ	0xFE9
 39504                           wreg	equ	0xFE8
 39505                           postinc1	equ	0xFE6
 39506                           postdec1	equ	0xFE5
 39507                           plusw1	equ	0xFE3
 39508                           fsr1h	equ	0xFE2
 39509                           fsr1l	equ	0xFE1
 39510                           indf2	equ	0xFDF
 39511                           postinc2	equ	0xFDE
 39512                           postdec2	equ	0xFDD
 39513                           plusw2	equ	0xFDB
 39514                           fsr2h	equ	0xFDA
 39515                           fsr2l	equ	0xFD9
 39516                           status	equ	0xFD8
 39517                           
 39518 ;; *************** function ___aldiv *****************
 39519 ;; Defined at:
 39520 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
 39521 ;; Parameters:    Size  Location     Type
 39522 ;;  dividend        4    0[BANK0 ] long 
 39523 ;;  divisor         4    4[BANK0 ] long 
 39524 ;; Auto vars:     Size  Location     Type
 39525 ;;  quotient        4   10[BANK0 ] long 
 39526 ;;  sign            1    9[BANK0 ] unsigned char 
 39527 ;;  counter         1    8[BANK0 ] unsigned char 
 39528 ;; Return value:  Size  Location     Type
 39529 ;;                  4    0[BANK0 ] long 
 39530 ;; Registers used:
 39531 ;;		wreg, status,2, status,0
 39532 ;; Tracked objects:
 39533 ;;		On entry : 0/0
 39534 ;;		On exit  : 0/0
 39535 ;;		Unchanged: 0/0
 39536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 39537 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39538 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39540 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39541 ;;Total ram usage:       14 bytes
 39542 ;; Hardware stack levels used:    1
 39543 ;; Hardware stack levels required when called:    5
 39544 ;; This function calls:
 39545 ;;		Nothing
 39546 ;; This function is called by:
 39547 ;;		_map
 39548 ;; This function uses a non-reentrant model
 39549 ;;
 39550                           
 39551                           	psect	text115
 39552  007346                     __ptext115:
 39553                           	opt stack 0
 39554  007346                     ___aldiv:
 39555                           	opt stack 19
 39556                           
 39557                           ;incstack = 0
 39558  007346  0E00               	movlw	0
 39559  007348  0100               	movlb	0	; () banked
 39560  00734A  6F69               	movwf	___aldiv@sign& (0+255),b
 39561                           
 39562                           ; BSR set to: 0
 39563  00734C  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 39564  00734E  D00A               	goto	l5678
 39565                           
 39566                           ; BSR set to: 0
 39567  007350  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
 39568  007352  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
 39569  007354  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
 39570  007356  6D64               	negf	___aldiv@divisor& (0+255),b
 39571  007358  0E00               	movlw	0
 39572  00735A  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
 39573  00735C  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
 39574  00735E  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
 39575                           
 39576                           ; BSR set to: 0
 39577  007360  0E01               	movlw	1
 39578  007362  6F69               	movwf	___aldiv@sign& (0+255),b
 39579  007364                     l5678:
 39580                           
 39581                           ; BSR set to: 0
 39582                           
 39583                           ; BSR set to: 0
 39584  007364  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
 39585  007366  D00A               	goto	l5679
 39586                           
 39587                           ; BSR set to: 0
 39588  007368  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
 39589  00736A  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
 39590  00736C  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
 39591  00736E  6D60               	negf	___aldiv@dividend& (0+255),b
 39592  007370  0E00               	movlw	0
 39593  007372  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
 39594  007374  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
 39595  007376  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
 39596                           
 39597                           ; BSR set to: 0
 39598  007378  0E01               	movlw	1
 39599  00737A  1B69               	xorwf	___aldiv@sign& (0+255),f,b
 39600  00737C                     l5679:
 39601                           
 39602                           ; BSR set to: 0
 39603                           
 39604                           ; BSR set to: 0
 39605  00737C  0E00               	movlw	0
 39606  00737E  6F6A               	movwf	___aldiv@quotient& (0+255),b
 39607  007380  0E00               	movlw	0
 39608  007382  6F6B               	movwf	(___aldiv@quotient+1)& (0+255),b
 39609  007384  0E00               	movlw	0
 39610  007386  6F6C               	movwf	(___aldiv@quotient+2)& (0+255),b
 39611  007388  0E00               	movlw	0
 39612  00738A  6F6D               	movwf	(___aldiv@quotient+3)& (0+255),b
 39613                           
 39614                           ; BSR set to: 0
 39615  00738C  5164               	movf	___aldiv@divisor& (0+255),w,b
 39616  00738E  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
 39617  007390  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
 39618  007392  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
 39619  007394  B4D8               	btfsc	status,2,c
 39620  007396  D02A               	goto	l5686
 39621                           
 39622                           ; BSR set to: 0
 39623  007398  0E01               	movlw	1
 39624  00739A  6F68               	movwf	___aldiv@counter& (0+255),b
 39625  00739C  D006               	goto	l5681
 39626  00739E                     
 39627                           ; BSR set to: 0
 39628                           
 39629                           ; BSR set to: 0
 39630  00739E  90D8               	bcf	status,0,c
 39631  0073A0  3764               	rlcf	___aldiv@divisor& (0+255),f,b
 39632  0073A2  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
 39633  0073A4  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
 39634  0073A6  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
 39635  0073A8  2B68               	incf	___aldiv@counter& (0+255),f,b
 39636  0073AA                     l5681:
 39637                           
 39638                           ; BSR set to: 0
 39639                           
 39640                           ; BSR set to: 0
 39641  0073AA  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 39642  0073AC  D7F8               	goto	l5682
 39643  0073AE                     u47840:
 39644                           
 39645                           ; BSR set to: 0
 39646                           
 39647                           ; BSR set to: 0
 39648                           
 39649                           ; BSR set to: 0
 39650  0073AE  90D8               	bcf	status,0,c
 39651  0073B0  376A               	rlcf	___aldiv@quotient& (0+255),f,b
 39652  0073B2  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 39653  0073B4  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 39654  0073B6  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 39655                           
 39656                           ; BSR set to: 0
 39657  0073B8  5164               	movf	___aldiv@divisor& (0+255),w,b
 39658  0073BA  5D60               	subwf	___aldiv@dividend& (0+255),w,b
 39659  0073BC  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
 39660  0073BE  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
 39661  0073C0  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
 39662  0073C2  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
 39663  0073C4  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
 39664  0073C6  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
 39665  0073C8  A0D8               	btfss	status,0,c
 39666  0073CA  D009               	goto	l5685
 39667                           
 39668                           ; BSR set to: 0
 39669  0073CC  5164               	movf	___aldiv@divisor& (0+255),w,b
 39670  0073CE  5F60               	subwf	___aldiv@dividend& (0+255),f,b
 39671  0073D0  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
 39672  0073D2  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
 39673  0073D4  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
 39674  0073D6  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
 39675  0073D8  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
 39676  0073DA  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
 39677                           
 39678                           ; BSR set to: 0
 39679  0073DC  816A               	bsf	___aldiv@quotient& (0+255),0,b
 39680  0073DE                     l5685:
 39681                           
 39682                           ; BSR set to: 0
 39683                           
 39684                           ; BSR set to: 0
 39685  0073DE  90D8               	bcf	status,0,c
 39686  0073E0  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
 39687  0073E2  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
 39688  0073E4  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
 39689  0073E6  3364               	rrcf	___aldiv@divisor& (0+255),f,b
 39690                           
 39691                           ; BSR set to: 0
 39692  0073E8  2F68               	decfsz	___aldiv@counter& (0+255),f,b
 39693  0073EA  D7E1               	goto	u47840
 39694  0073EC                     l5686:
 39695                           
 39696                           ; BSR set to: 0
 39697                           
 39698                           ; BSR set to: 0
 39699                           
 39700                           ; BSR set to: 0
 39701  0073EC  5169               	movf	___aldiv@sign& (0+255),w,b
 39702  0073EE  B4D8               	btfsc	status,2,c
 39703  0073F0  D008               	goto	l5687
 39704                           
 39705                           ; BSR set to: 0
 39706  0073F2  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
 39707  0073F4  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
 39708  0073F6  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
 39709  0073F8  6D6A               	negf	___aldiv@quotient& (0+255),b
 39710  0073FA  0E00               	movlw	0
 39711  0073FC  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 39712  0073FE  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 39713  007400  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 39714  007402                     l5687:
 39715                           
 39716                           ; BSR set to: 0
 39717                           
 39718                           ; BSR set to: 0
 39719  007402  C06A  F060         	movff	___aldiv@quotient,?___aldiv
 39720  007406  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
 39721  00740A  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
 39722  00740E  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
 39723  007412  0012               	return	
 39724  007414                     __end_of___aldiv:
 39725                           	opt stack 0
 39726                           tblptru	equ	0xFF8
 39727                           tblptrh	equ	0xFF7
 39728                           tblptrl	equ	0xFF6
 39729                           tablat	equ	0xFF5
 39730                           prodh	equ	0xFF4
 39731                           prodl	equ	0xFF3
 39732                           intcon	equ	0xFF2
 39733                           intcon2	equ	0xFF1
 39734                           indf0	equ	0xFEF
 39735                           postinc0	equ	0xFEE
 39736                           postdec0	equ	0xFED
 39737                           fsr0h	equ	0xFEA
 39738                           fsr0l	equ	0xFE9
 39739                           wreg	equ	0xFE8
 39740                           postinc1	equ	0xFE6
 39741                           postdec1	equ	0xFE5
 39742                           plusw1	equ	0xFE3
 39743                           fsr1h	equ	0xFE2
 39744                           fsr1l	equ	0xFE1
 39745                           indf2	equ	0xFDF
 39746                           postinc2	equ	0xFDE
 39747                           postdec2	equ	0xFDD
 39748                           plusw2	equ	0xFDB
 39749                           fsr2h	equ	0xFDA
 39750                           fsr2l	equ	0xFD9
 39751                           status	equ	0xFD8
 39752                           
 39753 ;; *************** function ___xxtofl *****************
 39754 ;; Defined at:
 39755 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\xxtofl.c"
 39756 ;; Parameters:    Size  Location     Type
 39757 ;;  sign            1    wreg     unsigned char 
 39758 ;;  val             4    0[BANK0 ] long 
 39759 ;; Auto vars:     Size  Location     Type
 39760 ;;  sign            1    8[BANK0 ] unsigned char 
 39761 ;;  arg             4   10[BANK0 ] unsigned long 
 39762 ;;  exp             1    9[BANK0 ] unsigned char 
 39763 ;; Return value:  Size  Location     Type
 39764 ;;                  4    0[BANK0 ] unsigned char 
 39765 ;; Registers used:
 39766 ;;		wreg, status,2, status,0
 39767 ;; Tracked objects:
 39768 ;;		On entry : 0/0
 39769 ;;		On exit  : 0/0
 39770 ;;		Unchanged: 0/0
 39771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 39772 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39773 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39774 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39775 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39776 ;;Total ram usage:       14 bytes
 39777 ;; Hardware stack levels used:    1
 39778 ;; Hardware stack levels required when called:    5
 39779 ;; This function calls:
 39780 ;;		Nothing
 39781 ;; This function is called by:
 39782 ;;		_calculate_alpha
 39783 ;;		_readPotentiometers
 39784 ;;		_calculate_pulse_length
 39785 ;; This function uses a non-reentrant model
 39786 ;;
 39787                           
 39788                           	psect	text116
 39789  005EAE                     __ptext116:
 39790                           	opt stack 0
 39791  005EAE                     ___xxtofl:
 39792                           	opt stack 22
 39793                           
 39794                           ; BSR set to: 0
 39795                           ;incstack = 0
 39796                           ;___xxtofl@sign stored from wreg
 39797  005EAE  0100               	movlb	0	; () banked
 39798  005EB0  6F68               	movwf	___xxtofl@sign& (0+255),b
 39799  005EB2  0100               	movlb	0	; () banked
 39800  005EB4  5168               	movf	___xxtofl@sign& (0+255),w,b
 39801  005EB6  A4D8               	btfss	status,2,c
 39802                           
 39803                           ; BSR set to: 0
 39804  005EB8  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 39805  005EBA  D01A               	goto	l6184
 39806                           
 39807                           ; BSR set to: 0
 39808  005EBC  C060  F064         	movff	___xxtofl@val,??___xxtofl
 39809  005EC0  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 39810  005EC4  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 39811  005EC8  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 39812  005ECC  1F64               	comf	??___xxtofl& (0+255),f,b
 39813  005ECE  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 39814  005ED0  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 39815  005ED2  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 39816  005ED4  2B64               	incf	??___xxtofl& (0+255),f,b
 39817  005ED6  0E00               	movlw	0
 39818  005ED8  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 39819  005EDA  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 39820  005EDC  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 39821  005EDE  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 39822  005EE2  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 39823  005EE6  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 39824  005EEA  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 39825  005EEE  D008               	goto	l6185
 39826  005EF0                     l6184:
 39827                           
 39828                           ; BSR set to: 0
 39829  005EF0  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 39830  005EF4  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 39831  005EF8  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 39832  005EFC  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 39833  005F00                     l6185:
 39834                           
 39835                           ; BSR set to: 0
 39836                           
 39837                           ; BSR set to: 0
 39838  005F00  5160               	movf	___xxtofl@val& (0+255),w,b
 39839  005F02  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 39840  005F04  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 39841  005F06  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 39842  005F08  A4D8               	btfss	status,2,c
 39843  005F0A  D009               	goto	l6186
 39844                           
 39845                           ; BSR set to: 0
 39846  005F0C  0E00               	movlw	0
 39847  005F0E  6F60               	movwf	?___xxtofl& (0+255),b
 39848  005F10  0E00               	movlw	0
 39849  005F12  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 39850  005F14  0E00               	movlw	0
 39851  005F16  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 39852  005F18  0E00               	movlw	0
 39853  005F1A  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 39854                           
 39855                           ; BSR set to: 0
 39856  005F1C  0012               	return	
 39857  005F1E                     l6186:
 39858                           
 39859                           ; BSR set to: 0
 39860                           
 39861                           ; BSR set to: 0
 39862  005F1E  0E96               	movlw	150
 39863  005F20  6F69               	movwf	___xxtofl@exp& (0+255),b
 39864  005F22  D006               	goto	l6188
 39865  005F24                     
 39866                           ; BSR set to: 0
 39867                           
 39868                           ; BSR set to: 0
 39869  005F24  2B69               	incf	___xxtofl@exp& (0+255),f,b
 39870  005F26  90D8               	bcf	status,0,c
 39871  005F28  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 39872  005F2A  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 39873  005F2C  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 39874  005F2E  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 39875  005F30                     l6188:
 39876                           
 39877                           ; BSR set to: 0
 39878                           
 39879                           ; BSR set to: 0
 39880  005F30  0E00               	movlw	0
 39881  005F32  156A               	andwf	___xxtofl@arg& (0+255),w,b
 39882  005F34  6F64               	movwf	??___xxtofl& (0+255),b
 39883  005F36  0E00               	movlw	0
 39884  005F38  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 39885  005F3A  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 39886  005F3C  0E00               	movlw	0
 39887  005F3E  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 39888  005F40  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 39889  005F42  0EFE               	movlw	254
 39890  005F44  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 39891  005F46  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 39892  005F48  5164               	movf	??___xxtofl& (0+255),w,b
 39893  005F4A  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 39894  005F4C  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 39895  005F4E  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 39896  005F50  B4D8               	btfsc	status,2,c
 39897  005F52  D00D               	goto	l6191
 39898  005F54  D7E7               	goto	l6189
 39899  005F56                     
 39900                           ; BSR set to: 0
 39901                           
 39902                           ; BSR set to: 0
 39903  005F56  2B69               	incf	___xxtofl@exp& (0+255),f,b
 39904                           
 39905                           ; BSR set to: 0
 39906  005F58  0E01               	movlw	1
 39907  005F5A  276A               	addwf	___xxtofl@arg& (0+255),f,b
 39908  005F5C  0E00               	movlw	0
 39909  005F5E  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 39910  005F60  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 39911  005F62  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 39912                           
 39913                           ; BSR set to: 0
 39914  005F64  90D8               	bcf	status,0,c
 39915  005F66  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 39916  005F68  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 39917  005F6A  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 39918  005F6C  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 39919  005F6E                     l6191:
 39920                           
 39921                           ; BSR set to: 0
 39922  005F6E  0E00               	movlw	0
 39923  005F70  156A               	andwf	___xxtofl@arg& (0+255),w,b
 39924  005F72  6F64               	movwf	??___xxtofl& (0+255),b
 39925  005F74  0E00               	movlw	0
 39926  005F76  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 39927  005F78  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 39928  005F7A  0E00               	movlw	0
 39929  005F7C  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 39930  005F7E  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 39931  005F80  0EFF               	movlw	255
 39932  005F82  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 39933  005F84  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 39934  005F86  5164               	movf	??___xxtofl& (0+255),w,b
 39935  005F88  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 39936  005F8A  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 39937  005F8C  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 39938  005F8E  B4D8               	btfsc	status,2,c
 39939  005F90  D007               	goto	l6194
 39940  005F92  D7E1               	goto	l6192
 39941  005F94                     
 39942                           ; BSR set to: 0
 39943                           
 39944                           ; BSR set to: 0
 39945  005F94  0769               	decf	___xxtofl@exp& (0+255),f,b
 39946  005F96  90D8               	bcf	status,0,c
 39947  005F98  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 39948  005F9A  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 39949  005F9C  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 39950  005F9E  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 39951  005FA0                     l6194:
 39952                           
 39953                           ; BSR set to: 0
 39954                           
 39955                           ; BSR set to: 0
 39956  005FA0  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 39957  005FA2  D003               	goto	u52160
 39958                           
 39959                           ; BSR set to: 0
 39960  005FA4  0E02               	movlw	2
 39961  005FA6  6169               	cpfslt	___xxtofl@exp& (0+255),b
 39962  005FA8  D7F5               	goto	l6195
 39963  005FAA                     u52160:
 39964                           
 39965                           ; BSR set to: 0
 39966                           
 39967                           ; BSR set to: 0
 39968  005FAA  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 39969  005FAC  D008               	goto	l6199
 39970                           
 39971                           ; BSR set to: 0
 39972  005FAE  0EFF               	movlw	255
 39973  005FB0  176A               	andwf	___xxtofl@arg& (0+255),f,b
 39974  005FB2  0EFF               	movlw	255
 39975  005FB4  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 39976  005FB6  0E7F               	movlw	127
 39977  005FB8  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 39978  005FBA  0EFF               	movlw	255
 39979  005FBC  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 39980  005FBE                     l6199:
 39981                           
 39982                           ; BSR set to: 0
 39983  005FBE  90D8               	bcf	status,0,c
 39984  005FC0  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 39985  005FC2  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 39986  005FC6  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 39987  005FC8  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 39988  005FCA  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 39989  005FCC  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 39990  005FD0  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 39991  005FD2  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 39992  005FD4  6B64               	clrf	??___xxtofl& (0+255),b
 39993  005FD6  5164               	movf	??___xxtofl& (0+255),w,b
 39994  005FD8  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 39995  005FDA  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 39996  005FDC  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 39997  005FDE  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 39998  005FE0  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 39999  005FE2  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 40000  005FE4  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 40001                           
 40002                           ; BSR set to: 0
 40003  005FE6  5168               	movf	___xxtofl@sign& (0+255),w,b
 40004  005FE8  A4D8               	btfss	status,2,c
 40005                           
 40006                           ; BSR set to: 0
 40007  005FEA  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 40008  005FEC  D001               	goto	l6200
 40009                           
 40010                           ; BSR set to: 0
 40011  005FEE  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 40012  005FF0                     l6200:
 40013                           
 40014                           ; BSR set to: 0
 40015                           
 40016                           ; BSR set to: 0
 40017  005FF0  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 40018  005FF4  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 40019  005FF8  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 40020  005FFC  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 40021  006000  0012               	return	
 40022  006002                     __end_of___xxtofl:
 40023                           	opt stack 0
 40024                           tblptru	equ	0xFF8
 40025                           tblptrh	equ	0xFF7
 40026                           tblptrl	equ	0xFF6
 40027                           tablat	equ	0xFF5
 40028                           prodh	equ	0xFF4
 40029                           prodl	equ	0xFF3
 40030                           intcon	equ	0xFF2
 40031                           intcon2	equ	0xFF1
 40032                           indf0	equ	0xFEF
 40033                           postinc0	equ	0xFEE
 40034                           postdec0	equ	0xFED
 40035                           fsr0h	equ	0xFEA
 40036                           fsr0l	equ	0xFE9
 40037                           wreg	equ	0xFE8
 40038                           postinc1	equ	0xFE6
 40039                           postdec1	equ	0xFE5
 40040                           plusw1	equ	0xFE3
 40041                           fsr1h	equ	0xFE2
 40042                           fsr1l	equ	0xFE1
 40043                           indf2	equ	0xFDF
 40044                           postinc2	equ	0xFDE
 40045                           postdec2	equ	0xFDD
 40046                           plusw2	equ	0xFDB
 40047                           fsr2h	equ	0xFDA
 40048                           fsr2l	equ	0xFD9
 40049                           status	equ	0xFD8
 40050                           
 40051 ;; *************** function ___fltol *****************
 40052 ;; Defined at:
 40053 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fltol.c"
 40054 ;; Parameters:    Size  Location     Type
 40055 ;;  f1              4   88[BANK0 ] unsigned char 
 40056 ;; Auto vars:     Size  Location     Type
 40057 ;;  exp1            1   97[BANK0 ] unsigned char 
 40058 ;;  sign1           1   96[BANK0 ] unsigned char 
 40059 ;; Return value:  Size  Location     Type
 40060 ;;                  4   88[BANK0 ] long 
 40061 ;; Registers used:
 40062 ;;		wreg, status,2, status,0
 40063 ;; Tracked objects:
 40064 ;;		On entry : 0/0
 40065 ;;		On exit  : 0/0
 40066 ;;		Unchanged: 0/0
 40067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40068 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40069 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40070 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40071 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40072 ;;Total ram usage:       10 bytes
 40073 ;; Hardware stack levels used:    1
 40074 ;; Hardware stack levels required when called:    5
 40075 ;; This function calls:
 40076 ;;		Nothing
 40077 ;; This function is called by:
 40078 ;;		_readPotentiometers
 40079 ;;		_calculate_pulse_length
 40080 ;; This function uses a non-reentrant model
 40081 ;;
 40082                           
 40083                           	psect	text117
 40084  006E42                     __ptext117:
 40085                           	opt stack 0
 40086  006E42                     ___fltol:
 40087                           	opt stack 22
 40088                           
 40089                           ; BSR set to: 0
 40090                           ;incstack = 0
 40091  006E42  0100               	movlb	0	; () banked
 40092  006E44  35BA               	rlcf	(___fltol@f1+2)& (0+255),w,b
 40093  006E46  35BB               	rlcf	(___fltol@f1+3)& (0+255),w,b
 40094  006E48  6FC1               	movwf	___fltol@exp1& (0+255),b
 40095  006E4A  51C1               	movf	___fltol@exp1& (0+255),w,b
 40096  006E4C  A4D8               	btfss	status,2,c
 40097  006E4E  D009               	goto	l5852
 40098                           
 40099                           ; BSR set to: 0
 40100  006E50  0E00               	movlw	0
 40101  006E52  6FB8               	movwf	?___fltol& (0+255),b
 40102  006E54  0E00               	movlw	0
 40103  006E56  6FB9               	movwf	(?___fltol+1)& (0+255),b
 40104  006E58  0E00               	movlw	0
 40105  006E5A  6FBA               	movwf	(?___fltol+2)& (0+255),b
 40106  006E5C  0E00               	movlw	0
 40107  006E5E  6FBB               	movwf	(?___fltol+3)& (0+255),b
 40108                           
 40109                           ; BSR set to: 0
 40110  006E60  0012               	return	
 40111  006E62                     l5852:
 40112                           
 40113                           ; BSR set to: 0
 40114                           
 40115                           ; BSR set to: 0
 40116  006E62  C0B8  F0BC         	movff	___fltol@f1,??___fltol
 40117  006E66  C0B9  F0BD         	movff	___fltol@f1+1,??___fltol+1
 40118  006E6A  C0BA  F0BE         	movff	___fltol@f1+2,??___fltol+2
 40119  006E6E  C0BB  F0BF         	movff	___fltol@f1+3,??___fltol+3
 40120  006E72  0E20               	movlw	32
 40121  006E74  D005               	goto	u52040
 40122  006E76                     u52045:
 40123  006E76  90D8               	bcf	status,0,c
 40124  006E78  33BF               	rrcf	(??___fltol+3)& (0+255),f,b
 40125  006E7A  33BE               	rrcf	(??___fltol+2)& (0+255),f,b
 40126  006E7C  33BD               	rrcf	(??___fltol+1)& (0+255),f,b
 40127  006E7E  33BC               	rrcf	??___fltol& (0+255),f,b
 40128  006E80                     u52040:
 40129  006E80  2EE8               	decfsz	wreg,f,c
 40130  006E82  D7F9               	goto	u52045
 40131  006E84  51BC               	movf	??___fltol& (0+255),w,b
 40132  006E86  6FC0               	movwf	___fltol@sign1& (0+255),b
 40133                           
 40134                           ; BSR set to: 0
 40135  006E88  8FBA               	bsf	(___fltol@f1+2)& (0+255),7,b
 40136                           
 40137                           ; BSR set to: 0
 40138  006E8A  0EFF               	movlw	255
 40139  006E8C  17B8               	andwf	___fltol@f1& (0+255),f,b
 40140  006E8E  0EFF               	movlw	255
 40141  006E90  17B9               	andwf	(___fltol@f1+1)& (0+255),f,b
 40142  006E92  0EFF               	movlw	255
 40143  006E94  17BA               	andwf	(___fltol@f1+2)& (0+255),f,b
 40144  006E96  0E00               	movlw	0
 40145  006E98  17BB               	andwf	(___fltol@f1+3)& (0+255),f,b
 40146                           
 40147                           ; BSR set to: 0
 40148  006E9A  0E96               	movlw	150
 40149  006E9C  5FC1               	subwf	___fltol@exp1& (0+255),f,b
 40150                           
 40151                           ; BSR set to: 0
 40152  006E9E  AFC1               	btfss	___fltol@exp1& (0+255),7,b
 40153  006EA0  D016               	goto	l5854
 40154                           
 40155                           ; BSR set to: 0
 40156  006EA2  51C1               	movf	___fltol@exp1& (0+255),w,b
 40157  006EA4  0A80               	xorlw	128
 40158  006EA6  0F97               	addlw	151
 40159  006EA8  B0D8               	btfsc	status,0,c
 40160  006EAA  D009               	goto	l5855
 40161                           
 40162                           ; BSR set to: 0
 40163  006EAC  0E00               	movlw	0
 40164  006EAE  6FB8               	movwf	?___fltol& (0+255),b
 40165  006EB0  0E00               	movlw	0
 40166  006EB2  6FB9               	movwf	(?___fltol+1)& (0+255),b
 40167  006EB4  0E00               	movlw	0
 40168  006EB6  6FBA               	movwf	(?___fltol+2)& (0+255),b
 40169  006EB8  0E00               	movlw	0
 40170  006EBA  6FBB               	movwf	(?___fltol+3)& (0+255),b
 40171                           
 40172                           ; BSR set to: 0
 40173  006EBC  0012               	return	
 40174  006EBE                     l5855:
 40175                           
 40176                           ; BSR set to: 0
 40177                           
 40178                           ; BSR set to: 0
 40179                           
 40180                           ; BSR set to: 0
 40181  006EBE  90D8               	bcf	status,0,c
 40182  006EC0  33BB               	rrcf	(___fltol@f1+3)& (0+255),f,b
 40183  006EC2  33BA               	rrcf	(___fltol@f1+2)& (0+255),f,b
 40184  006EC4  33B9               	rrcf	(___fltol@f1+1)& (0+255),f,b
 40185  006EC6  33B8               	rrcf	___fltol@f1& (0+255),f,b
 40186                           
 40187                           ; BSR set to: 0
 40188  006EC8  3FC1               	incfsz	___fltol@exp1& (0+255),f,b
 40189  006ECA  D7F9               	goto	l5855
 40190                           
 40191                           ; BSR set to: 0
 40192  006ECC  D015               	goto	u52080
 40193  006ECE                     l5854:
 40194                           
 40195                           ; BSR set to: 0
 40196                           
 40197                           ; BSR set to: 0
 40198  006ECE  0E1F               	movlw	31
 40199  006ED0  65C1               	cpfsgt	___fltol@exp1& (0+255),b
 40200  006ED2  D00F               	goto	l5860
 40201                           
 40202                           ; BSR set to: 0
 40203  006ED4  0E00               	movlw	0
 40204  006ED6  6FB8               	movwf	?___fltol& (0+255),b
 40205  006ED8  0E00               	movlw	0
 40206  006EDA  6FB9               	movwf	(?___fltol+1)& (0+255),b
 40207  006EDC  0E00               	movlw	0
 40208  006EDE  6FBA               	movwf	(?___fltol+2)& (0+255),b
 40209  006EE0  0E00               	movlw	0
 40210  006EE2  6FBB               	movwf	(?___fltol+3)& (0+255),b
 40211                           
 40212                           ; BSR set to: 0
 40213  006EE4  0012               	return	
 40214  006EE6                     
 40215                           ; BSR set to: 0
 40216                           
 40217                           ; BSR set to: 0
 40218  006EE6  90D8               	bcf	status,0,c
 40219  006EE8  37B8               	rlcf	___fltol@f1& (0+255),f,b
 40220  006EEA  37B9               	rlcf	(___fltol@f1+1)& (0+255),f,b
 40221  006EEC  37BA               	rlcf	(___fltol@f1+2)& (0+255),f,b
 40222  006EEE  37BB               	rlcf	(___fltol@f1+3)& (0+255),f,b
 40223  006EF0  07C1               	decf	___fltol@exp1& (0+255),f,b
 40224  006EF2                     l5860:
 40225                           
 40226                           ; BSR set to: 0
 40227                           
 40228                           ; BSR set to: 0
 40229  006EF2  51C1               	movf	___fltol@exp1& (0+255),w,b
 40230  006EF4  A4D8               	btfss	status,2,c
 40231  006EF6  D7F7               	goto	l5861
 40232  006EF8                     u52080:
 40233                           
 40234                           ; BSR set to: 0
 40235                           
 40236                           ; BSR set to: 0
 40237                           
 40238                           ; BSR set to: 0
 40239  006EF8  51C0               	movf	___fltol@sign1& (0+255),w,b
 40240  006EFA  B4D8               	btfsc	status,2,c
 40241  006EFC  D008               	goto	l5863
 40242                           
 40243                           ; BSR set to: 0
 40244  006EFE  1FBB               	comf	(___fltol@f1+3)& (0+255),f,b
 40245  006F00  1FBA               	comf	(___fltol@f1+2)& (0+255),f,b
 40246  006F02  1FB9               	comf	(___fltol@f1+1)& (0+255),f,b
 40247  006F04  6DB8               	negf	___fltol@f1& (0+255),b
 40248  006F06  0E00               	movlw	0
 40249  006F08  23B9               	addwfc	(___fltol@f1+1)& (0+255),f,b
 40250  006F0A  23BA               	addwfc	(___fltol@f1+2)& (0+255),f,b
 40251  006F0C  23BB               	addwfc	(___fltol@f1+3)& (0+255),f,b
 40252  006F0E                     l5863:
 40253                           
 40254                           ; BSR set to: 0
 40255                           
 40256                           ; BSR set to: 0
 40257  006F0E  C0B8  F0B8         	movff	___fltol@f1,?___fltol
 40258  006F12  C0B9  F0B9         	movff	___fltol@f1+1,?___fltol+1
 40259  006F16  C0BA  F0BA         	movff	___fltol@f1+2,?___fltol+2
 40260  006F1A  C0BB  F0BB         	movff	___fltol@f1+3,?___fltol+3
 40261  006F1E  0012               	return	
 40262  006F20                     __end_of___fltol:
 40263                           	opt stack 0
 40264                           tblptru	equ	0xFF8
 40265                           tblptrh	equ	0xFF7
 40266                           tblptrl	equ	0xFF6
 40267                           tablat	equ	0xFF5
 40268                           prodh	equ	0xFF4
 40269                           prodl	equ	0xFF3
 40270                           intcon	equ	0xFF2
 40271                           intcon2	equ	0xFF1
 40272                           indf0	equ	0xFEF
 40273                           postinc0	equ	0xFEE
 40274                           postdec0	equ	0xFED
 40275                           fsr0h	equ	0xFEA
 40276                           fsr0l	equ	0xFE9
 40277                           wreg	equ	0xFE8
 40278                           postinc1	equ	0xFE6
 40279                           postdec1	equ	0xFE5
 40280                           plusw1	equ	0xFE3
 40281                           fsr1h	equ	0xFE2
 40282                           fsr1l	equ	0xFE1
 40283                           indf2	equ	0xFDF
 40284                           postinc2	equ	0xFDE
 40285                           postdec2	equ	0xFDD
 40286                           plusw2	equ	0xFDB
 40287                           fsr2h	equ	0xFDA
 40288                           fsr2l	equ	0xFD9
 40289                           status	equ	0xFD8
 40290                           
 40291 ;; *************** function ___flneg *****************
 40292 ;; Defined at:
 40293 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flneg.c"
 40294 ;; Parameters:    Size  Location     Type
 40295 ;;  f1              4   64[BANK0 ] long 
 40296 ;; Auto vars:     Size  Location     Type
 40297 ;;		None
 40298 ;; Return value:  Size  Location     Type
 40299 ;;                  4   64[BANK0 ] long 
 40300 ;; Registers used:
 40301 ;;		wreg, status,2, status,0
 40302 ;; Tracked objects:
 40303 ;;		On entry : 0/0
 40304 ;;		On exit  : 0/0
 40305 ;;		Unchanged: 0/0
 40306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40307 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40310 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40311 ;;Total ram usage:        4 bytes
 40312 ;; Hardware stack levels used:    1
 40313 ;; Hardware stack levels required when called:    5
 40314 ;; This function calls:
 40315 ;;		Nothing
 40316 ;; This function is called by:
 40317 ;;		_readPotentiometers
 40318 ;;		_calculate_pulse_length
 40319 ;; This function uses a non-reentrant model
 40320 ;;
 40321                           
 40322                           	psect	text118
 40323  009618                     __ptext118:
 40324                           	opt stack 0
 40325  009618                     ___flneg:
 40326                           	opt stack 22
 40327                           
 40328                           ; BSR set to: 0
 40329                           ;incstack = 0
 40330  009618  0100               	movlb	0	; () banked
 40331  00961A  51A0               	movf	___flneg@f1& (0+255),w,b
 40332  00961C  11A1               	iorwf	(___flneg@f1+1)& (0+255),w,b
 40333  00961E  11A2               	iorwf	(___flneg@f1+2)& (0+255),w,b
 40334  009620  11A3               	iorwf	(___flneg@f1+3)& (0+255),w,b
 40335  009622  B4D8               	btfsc	status,2,c
 40336  009624  D008               	goto	l5829
 40337                           
 40338                           ; BSR set to: 0
 40339  009626  0E00               	movlw	0
 40340  009628  1BA0               	xorwf	___flneg@f1& (0+255),f,b
 40341  00962A  0E00               	movlw	0
 40342  00962C  1BA1               	xorwf	(___flneg@f1+1)& (0+255),f,b
 40343  00962E  0E00               	movlw	0
 40344  009630  1BA2               	xorwf	(___flneg@f1+2)& (0+255),f,b
 40345  009632  0E80               	movlw	128
 40346  009634  1BA3               	xorwf	(___flneg@f1+3)& (0+255),f,b
 40347  009636                     l5829:
 40348                           
 40349                           ; BSR set to: 0
 40350                           
 40351                           ; BSR set to: 0
 40352  009636  C0A0  F0A0         	movff	___flneg@f1,?___flneg
 40353  00963A  C0A1  F0A1         	movff	___flneg@f1+1,?___flneg+1
 40354  00963E  C0A2  F0A2         	movff	___flneg@f1+2,?___flneg+2
 40355  009642  C0A3  F0A3         	movff	___flneg@f1+3,?___flneg+3
 40356  009646  0012               	return	
 40357  009648                     __end_of___flneg:
 40358                           	opt stack 0
 40359                           tblptru	equ	0xFF8
 40360                           tblptrh	equ	0xFF7
 40361                           tblptrl	equ	0xFF6
 40362                           tablat	equ	0xFF5
 40363                           prodh	equ	0xFF4
 40364                           prodl	equ	0xFF3
 40365                           intcon	equ	0xFF2
 40366                           intcon2	equ	0xFF1
 40367                           indf0	equ	0xFEF
 40368                           postinc0	equ	0xFEE
 40369                           postdec0	equ	0xFED
 40370                           fsr0h	equ	0xFEA
 40371                           fsr0l	equ	0xFE9
 40372                           wreg	equ	0xFE8
 40373                           postinc1	equ	0xFE6
 40374                           postdec1	equ	0xFE5
 40375                           plusw1	equ	0xFE3
 40376                           fsr1h	equ	0xFE2
 40377                           fsr1l	equ	0xFE1
 40378                           indf2	equ	0xFDF
 40379                           postinc2	equ	0xFDE
 40380                           postdec2	equ	0xFDD
 40381                           plusw2	equ	0xFDB
 40382                           fsr2h	equ	0xFDA
 40383                           fsr2l	equ	0xFD9
 40384                           status	equ	0xFD8
 40385                           
 40386 ;; *************** function ___flmul *****************
 40387 ;; Defined at:
 40388 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcmul.c"
 40389 ;; Parameters:    Size  Location     Type
 40390 ;;  b               4   14[BANK0 ] long 
 40391 ;;  a               4   18[BANK0 ] long 
 40392 ;; Auto vars:     Size  Location     Type
 40393 ;;  prod            4   33[BANK0 ] struct .
 40394 ;;  grs             4   28[BANK0 ] unsigned long 
 40395 ;;  temp            2   37[BANK0 ] struct .
 40396 ;;  bexp            1   32[BANK0 ] unsigned char 
 40397 ;;  aexp            1   27[BANK0 ] unsigned char 
 40398 ;;  sign            1   26[BANK0 ] unsigned char 
 40399 ;; Return value:  Size  Location     Type
 40400 ;;                  4   14[BANK0 ] unsigned char 
 40401 ;; Registers used:
 40402 ;;		wreg, status,2, status,0, prodl, prodh
 40403 ;; Tracked objects:
 40404 ;;		On entry : 0/0
 40405 ;;		On exit  : 0/0
 40406 ;;		Unchanged: 0/0
 40407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40408 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40409 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40410 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40411 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40412 ;;Total ram usage:       25 bytes
 40413 ;; Hardware stack levels used:    1
 40414 ;; Hardware stack levels required when called:    5
 40415 ;; This function calls:
 40416 ;;		Nothing
 40417 ;; This function is called by:
 40418 ;;		_readPotentiometers
 40419 ;;		_calculate_pulse_length
 40420 ;; This function uses a non-reentrant model
 40421 ;;
 40422                           
 40423                           	psect	text119
 40424  002EAE                     __ptext119:
 40425                           	opt stack 0
 40426  002EAE                     ___flmul:
 40427                           	opt stack 22
 40428                           
 40429                           ; BSR set to: 0
 40430                           ;incstack = 0
 40431  002EAE  0100               	movlb	0	; () banked
 40432  002EB0  5171               	movf	(___flmul@b+3)& (0+255),w,b
 40433  002EB2  0B80               	andlw	128
 40434  002EB4  6F7A               	movwf	___flmul@sign& (0+255),b
 40435  002EB6  5171               	movf	(___flmul@b+3)& (0+255),w,b
 40436  002EB8  2571               	addwf	(___flmul@b+3)& (0+255),w,b
 40437  002EBA  6F80               	movwf	___flmul@bexp& (0+255),b
 40438                           
 40439                           ; BSR set to: 0
 40440  002EBC  BF70               	btfsc	(___flmul@b+2)& (0+255),7,b
 40441                           
 40442                           ; BSR set to: 0
 40443  002EBE  8180               	bsf	___flmul@bexp& (0+255),0,b
 40444                           
 40445                           ; BSR set to: 0
 40446                           
 40447                           ; BSR set to: 0
 40448  002EC0  5180               	movf	___flmul@bexp& (0+255),w,b
 40449  002EC2  B4D8               	btfsc	status,2,c
 40450  002EC4  D00D               	goto	l6150
 40451                           
 40452                           ; BSR set to: 0
 40453  002EC6  2980               	incf	___flmul@bexp& (0+255),w,b
 40454  002EC8  A4D8               	btfss	status,2,c
 40455  002ECA  D008               	goto	l6151
 40456                           
 40457                           ; BSR set to: 0
 40458  002ECC  0E00               	movlw	0
 40459  002ECE  6F6E               	movwf	___flmul@b& (0+255),b
 40460  002ED0  0E00               	movlw	0
 40461  002ED2  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 40462  002ED4  0E00               	movlw	0
 40463  002ED6  6F70               	movwf	(___flmul@b+2)& (0+255),b
 40464  002ED8  0E00               	movlw	0
 40465  002EDA  6F71               	movwf	(___flmul@b+3)& (0+255),b
 40466  002EDC                     l6151:
 40467                           
 40468                           ; BSR set to: 0
 40469                           
 40470                           ; BSR set to: 0
 40471  002EDC  8F70               	bsf	(___flmul@b+2)& (0+255),7,b
 40472  002EDE  D008               	goto	l6152
 40473  002EE0                     l6150:
 40474                           
 40475                           ; BSR set to: 0
 40476                           
 40477                           ; BSR set to: 0
 40478  002EE0  0E00               	movlw	0
 40479  002EE2  6F6E               	movwf	___flmul@b& (0+255),b
 40480  002EE4  0E00               	movlw	0
 40481  002EE6  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 40482  002EE8  0E00               	movlw	0
 40483  002EEA  6F70               	movwf	(___flmul@b+2)& (0+255),b
 40484  002EEC  0E00               	movlw	0
 40485  002EEE  6F71               	movwf	(___flmul@b+3)& (0+255),b
 40486  002EF0                     l6152:
 40487                           
 40488                           ; BSR set to: 0
 40489                           
 40490                           ; BSR set to: 0
 40491  002EF0  5175               	movf	(___flmul@a+3)& (0+255),w,b
 40492  002EF2  0B80               	andlw	128
 40493  002EF4  1B7A               	xorwf	___flmul@sign& (0+255),f,b
 40494                           
 40495                           ; BSR set to: 0
 40496  002EF6  5175               	movf	(___flmul@a+3)& (0+255),w,b
 40497  002EF8  2575               	addwf	(___flmul@a+3)& (0+255),w,b
 40498  002EFA  6F7B               	movwf	___flmul@aexp& (0+255),b
 40499                           
 40500                           ; BSR set to: 0
 40501  002EFC  BF74               	btfsc	(___flmul@a+2)& (0+255),7,b
 40502                           
 40503                           ; BSR set to: 0
 40504  002EFE  817B               	bsf	___flmul@aexp& (0+255),0,b
 40505                           
 40506                           ; BSR set to: 0
 40507                           
 40508                           ; BSR set to: 0
 40509  002F00  517B               	movf	___flmul@aexp& (0+255),w,b
 40510  002F02  B4D8               	btfsc	status,2,c
 40511  002F04  D00D               	goto	l6154
 40512                           
 40513                           ; BSR set to: 0
 40514  002F06  297B               	incf	___flmul@aexp& (0+255),w,b
 40515  002F08  A4D8               	btfss	status,2,c
 40516  002F0A  D008               	goto	l6155
 40517                           
 40518                           ; BSR set to: 0
 40519  002F0C  0E00               	movlw	0
 40520  002F0E  6F72               	movwf	___flmul@a& (0+255),b
 40521  002F10  0E00               	movlw	0
 40522  002F12  6F73               	movwf	(___flmul@a+1)& (0+255),b
 40523  002F14  0E00               	movlw	0
 40524  002F16  6F74               	movwf	(___flmul@a+2)& (0+255),b
 40525  002F18  0E00               	movlw	0
 40526  002F1A  6F75               	movwf	(___flmul@a+3)& (0+255),b
 40527  002F1C                     l6155:
 40528                           
 40529                           ; BSR set to: 0
 40530                           
 40531                           ; BSR set to: 0
 40532  002F1C  8F74               	bsf	(___flmul@a+2)& (0+255),7,b
 40533  002F1E  D008               	goto	l6156
 40534  002F20                     l6154:
 40535                           
 40536                           ; BSR set to: 0
 40537                           
 40538                           ; BSR set to: 0
 40539  002F20  0E00               	movlw	0
 40540  002F22  6F72               	movwf	___flmul@a& (0+255),b
 40541  002F24  0E00               	movlw	0
 40542  002F26  6F73               	movwf	(___flmul@a+1)& (0+255),b
 40543  002F28  0E00               	movlw	0
 40544  002F2A  6F74               	movwf	(___flmul@a+2)& (0+255),b
 40545  002F2C  0E00               	movlw	0
 40546  002F2E  6F75               	movwf	(___flmul@a+3)& (0+255),b
 40547  002F30                     l6156:
 40548                           
 40549                           ; BSR set to: 0
 40550  002F30  517B               	movf	___flmul@aexp& (0+255),w,b
 40551  002F32  B4D8               	btfsc	status,2,c
 40552  002F34  D003               	goto	u51900
 40553                           
 40554                           ; BSR set to: 0
 40555  002F36  5180               	movf	___flmul@bexp& (0+255),w,b
 40556  002F38  A4D8               	btfss	status,2,c
 40557  002F3A  D009               	goto	l6157
 40558  002F3C                     u51900:
 40559                           
 40560                           ; BSR set to: 0
 40561                           
 40562                           ; BSR set to: 0
 40563  002F3C  0E00               	movlw	0
 40564  002F3E  6F6E               	movwf	?___flmul& (0+255),b
 40565  002F40  0E00               	movlw	0
 40566  002F42  6F6F               	movwf	(?___flmul+1)& (0+255),b
 40567  002F44  0E00               	movlw	0
 40568  002F46  6F70               	movwf	(?___flmul+2)& (0+255),b
 40569  002F48  0E00               	movlw	0
 40570  002F4A  6F71               	movwf	(?___flmul+3)& (0+255),b
 40571                           
 40572                           ; BSR set to: 0
 40573  002F4C  0012               	return	
 40574  002F4E                     l6157:
 40575                           
 40576                           ; BSR set to: 0
 40577                           
 40578                           ; BSR set to: 0
 40579  002F4E  5174               	movf	(___flmul@a+2)& (0+255),w,b
 40580  002F50  036E               	mulwf	___flmul@b& (0+255),b
 40581  002F52  CFF3 F085          	movff	prodl,___flmul@temp
 40582  002F56  CFF4 F086          	movff	prodh,___flmul@temp+1
 40583                           
 40584                           ; BSR set to: 0
 40585  002F5A  5185               	movf	___flmul@temp& (0+255),w,b
 40586  002F5C  6F7C               	movwf	___flmul@grs& (0+255),b
 40587  002F5E  6B7D               	clrf	(___flmul@grs+1)& (0+255),b
 40588  002F60  6B7E               	clrf	(___flmul@grs+2)& (0+255),b
 40589  002F62  6B7F               	clrf	(___flmul@grs+3)& (0+255),b
 40590                           
 40591                           ; BSR set to: 0
 40592  002F64  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40593  002F66  6F81               	movwf	___flmul@prod& (0+255),b
 40594  002F68  6B82               	clrf	(___flmul@prod+1)& (0+255),b
 40595  002F6A  6B83               	clrf	(___flmul@prod+2)& (0+255),b
 40596  002F6C  6B84               	clrf	(___flmul@prod+3)& (0+255),b
 40597  002F6E  5173               	movf	(___flmul@a+1)& (0+255),w,b
 40598  002F70  036F               	mulwf	(___flmul@b+1)& (0+255),b
 40599  002F72  CFF3 F085          	movff	prodl,___flmul@temp
 40600  002F76  CFF4 F086          	movff	prodh,___flmul@temp+1
 40601                           
 40602                           ; BSR set to: 0
 40603  002F7A  5185               	movf	___flmul@temp& (0+255),w,b
 40604  002F7C  277C               	addwf	___flmul@grs& (0+255),f,b
 40605  002F7E  0E00               	movlw	0
 40606  002F80  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 40607  002F82  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 40608  002F84  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 40609                           
 40610                           ; BSR set to: 0
 40611  002F86  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40612  002F88  2781               	addwf	___flmul@prod& (0+255),f,b
 40613  002F8A  0E00               	movlw	0
 40614  002F8C  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 40615  002F8E  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 40616  002F90  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 40617  002F92  5172               	movf	___flmul@a& (0+255),w,b
 40618  002F94  0370               	mulwf	(___flmul@b+2)& (0+255),b
 40619  002F96  CFF3 F085          	movff	prodl,___flmul@temp
 40620  002F9A  CFF4 F086          	movff	prodh,___flmul@temp+1
 40621                           
 40622                           ; BSR set to: 0
 40623  002F9E  5185               	movf	___flmul@temp& (0+255),w,b
 40624  002FA0  277C               	addwf	___flmul@grs& (0+255),f,b
 40625  002FA2  0E00               	movlw	0
 40626  002FA4  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 40627  002FA6  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 40628  002FA8  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 40629                           
 40630                           ; BSR set to: 0
 40631  002FAA  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40632  002FAC  2781               	addwf	___flmul@prod& (0+255),f,b
 40633  002FAE  0E00               	movlw	0
 40634  002FB0  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 40635  002FB2  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 40636  002FB4  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 40637                           
 40638                           ; BSR set to: 0
 40639  002FB6  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 40640  002FBA  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 40641  002FBE  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 40642  002FC2  6B7C               	clrf	___flmul@grs& (0+255),b
 40643                           
 40644                           ; BSR set to: 0
 40645  002FC4  5172               	movf	___flmul@a& (0+255),w,b
 40646  002FC6  036F               	mulwf	(___flmul@b+1)& (0+255),b
 40647  002FC8  CFF3 F085          	movff	prodl,___flmul@temp
 40648  002FCC  CFF4 F086          	movff	prodh,___flmul@temp+1
 40649                           
 40650                           ; BSR set to: 0
 40651  002FD0  5185               	movf	___flmul@temp& (0+255),w,b
 40652  002FD2  277C               	addwf	___flmul@grs& (0+255),f,b
 40653  002FD4  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40654  002FD6  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 40655  002FD8  0E00               	movlw	0
 40656  002FDA  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 40657  002FDC  0E00               	movlw	0
 40658  002FDE  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 40659                           
 40660                           ; BSR set to: 0
 40661  002FE0  5173               	movf	(___flmul@a+1)& (0+255),w,b
 40662  002FE2  036E               	mulwf	___flmul@b& (0+255),b
 40663  002FE4  CFF3 F085          	movff	prodl,___flmul@temp
 40664  002FE8  CFF4 F086          	movff	prodh,___flmul@temp+1
 40665                           
 40666                           ; BSR set to: 0
 40667  002FEC  5185               	movf	___flmul@temp& (0+255),w,b
 40668  002FEE  277C               	addwf	___flmul@grs& (0+255),f,b
 40669  002FF0  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40670  002FF2  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 40671  002FF4  0E00               	movlw	0
 40672  002FF6  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 40673  002FF8  0E00               	movlw	0
 40674  002FFA  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 40675                           
 40676                           ; BSR set to: 0
 40677  002FFC  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 40678  003000  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 40679  003004  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 40680  003008  6B7C               	clrf	___flmul@grs& (0+255),b
 40681  00300A  5172               	movf	___flmul@a& (0+255),w,b
 40682  00300C  036E               	mulwf	___flmul@b& (0+255),b
 40683  00300E  CFF3 F085          	movff	prodl,___flmul@temp
 40684  003012  CFF4 F086          	movff	prodh,___flmul@temp+1
 40685                           
 40686                           ; BSR set to: 0
 40687  003016  5185               	movf	___flmul@temp& (0+255),w,b
 40688  003018  277C               	addwf	___flmul@grs& (0+255),f,b
 40689  00301A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40690  00301C  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 40691  00301E  0E00               	movlw	0
 40692  003020  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 40693  003022  0E00               	movlw	0
 40694  003024  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 40695                           
 40696                           ; BSR set to: 0
 40697  003026  5174               	movf	(___flmul@a+2)& (0+255),w,b
 40698  003028  036F               	mulwf	(___flmul@b+1)& (0+255),b
 40699  00302A  CFF3 F085          	movff	prodl,___flmul@temp
 40700  00302E  CFF4 F086          	movff	prodh,___flmul@temp+1
 40701  003032  5185               	movf	___flmul@temp& (0+255),w,b
 40702  003034  2781               	addwf	___flmul@prod& (0+255),f,b
 40703  003036  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40704  003038  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 40705  00303A  0E00               	movlw	0
 40706  00303C  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 40707  00303E  0E00               	movlw	0
 40708  003040  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 40709                           
 40710                           ; BSR set to: 0
 40711  003042  5173               	movf	(___flmul@a+1)& (0+255),w,b
 40712  003044  0370               	mulwf	(___flmul@b+2)& (0+255),b
 40713  003046  CFF3 F085          	movff	prodl,___flmul@temp
 40714  00304A  CFF4 F086          	movff	prodh,___flmul@temp+1
 40715                           
 40716                           ; BSR set to: 0
 40717  00304E  5185               	movf	___flmul@temp& (0+255),w,b
 40718  003050  2781               	addwf	___flmul@prod& (0+255),f,b
 40719  003052  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40720  003054  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 40721  003056  0E00               	movlw	0
 40722  003058  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 40723  00305A  0E00               	movlw	0
 40724  00305C  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 40725  00305E  5174               	movf	(___flmul@a+2)& (0+255),w,b
 40726  003060  0370               	mulwf	(___flmul@b+2)& (0+255),b
 40727  003062  CFF3 F085          	movff	prodl,___flmul@temp
 40728  003066  CFF4 F086          	movff	prodh,___flmul@temp+1
 40729                           
 40730                           ; BSR set to: 0
 40731  00306A  5185               	movf	___flmul@temp& (0+255),w,b
 40732  00306C  6F76               	movwf	??___flmul& (0+255),b
 40733  00306E  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40734  003070  6F77               	movwf	(??___flmul+1)& (0+255),b
 40735  003072  6B78               	clrf	(??___flmul+2)& (0+255),b
 40736  003074  6B79               	clrf	(??___flmul+3)& (0+255),b
 40737  003076  C078  F079         	movff	??___flmul+2,??___flmul+3
 40738  00307A  C077  F078         	movff	??___flmul+1,??___flmul+2
 40739  00307E  C076  F077         	movff	??___flmul,??___flmul+1
 40740  003082  6B76               	clrf	??___flmul& (0+255),b
 40741  003084  5176               	movf	??___flmul& (0+255),w,b
 40742  003086  2781               	addwf	___flmul@prod& (0+255),f,b
 40743  003088  5177               	movf	(??___flmul+1)& (0+255),w,b
 40744  00308A  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 40745  00308C  5178               	movf	(??___flmul+2)& (0+255),w,b
 40746  00308E  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 40747  003090  5179               	movf	(??___flmul+3)& (0+255),w,b
 40748  003092  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 40749                           
 40750                           ; BSR set to: 0
 40751  003094  C07C  F076         	movff	___flmul@grs,??___flmul
 40752  003098  C07D  F077         	movff	___flmul@grs+1,??___flmul+1
 40753  00309C  C07E  F078         	movff	___flmul@grs+2,??___flmul+2
 40754  0030A0  C07F  F079         	movff	___flmul@grs+3,??___flmul+3
 40755  0030A4  0E19               	movlw	25
 40756  0030A6  D005               	goto	u51910
 40757  0030A8                     u51915:
 40758  0030A8  90D8               	bcf	status,0,c
 40759  0030AA  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 40760  0030AC  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 40761  0030AE  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 40762  0030B0  3376               	rrcf	??___flmul& (0+255),f,b
 40763  0030B2                     u51910:
 40764  0030B2  2EE8               	decfsz	wreg,f,c
 40765  0030B4  D7F9               	goto	u51915
 40766  0030B6  5176               	movf	??___flmul& (0+255),w,b
 40767  0030B8  2781               	addwf	___flmul@prod& (0+255),f,b
 40768  0030BA  5177               	movf	(??___flmul+1)& (0+255),w,b
 40769  0030BC  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 40770  0030BE  5178               	movf	(??___flmul+2)& (0+255),w,b
 40771  0030C0  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 40772  0030C2  5179               	movf	(??___flmul+3)& (0+255),w,b
 40773  0030C4  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 40774                           
 40775                           ; BSR set to: 0
 40776  0030C6  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 40777  0030CA  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 40778  0030CE  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 40779  0030D2  6B7C               	clrf	___flmul@grs& (0+255),b
 40780                           
 40781                           ; BSR set to: 0
 40782  0030D4  517B               	movf	___flmul@aexp& (0+255),w,b
 40783  0030D6  C080  F076         	movff	___flmul@bexp,??___flmul
 40784  0030DA  6B77               	clrf	(??___flmul+1)& (0+255),b
 40785  0030DC  2776               	addwf	??___flmul& (0+255),f,b
 40786  0030DE  0E00               	movlw	0
 40787  0030E0  2377               	addwfc	(??___flmul+1)& (0+255),f,b
 40788  0030E2  0E82               	movlw	130
 40789  0030E4  2576               	addwf	??___flmul& (0+255),w,b
 40790  0030E6  6F85               	movwf	___flmul@temp& (0+255),b
 40791  0030E8  0EFF               	movlw	255
 40792  0030EA  2177               	addwfc	(??___flmul+1)& (0+255),w,b
 40793  0030EC  6F86               	movwf	(___flmul@temp+1)& (0+255),b
 40794  0030EE  D00F               	goto	l6161
 40795  0030F0                     
 40796                           ; BSR set to: 0
 40797                           
 40798                           ; BSR set to: 0
 40799  0030F0  90D8               	bcf	status,0,c
 40800  0030F2  3781               	rlcf	___flmul@prod& (0+255),f,b
 40801  0030F4  3782               	rlcf	(___flmul@prod+1)& (0+255),f,b
 40802  0030F6  3783               	rlcf	(___flmul@prod+2)& (0+255),f,b
 40803  0030F8  3784               	rlcf	(___flmul@prod+3)& (0+255),f,b
 40804                           
 40805                           ; BSR set to: 0
 40806  0030FA  BF7F               	btfsc	(___flmul@grs+3)& (0+255),7,b
 40807                           
 40808                           ; BSR set to: 0
 40809  0030FC  8181               	bsf	___flmul@prod& (0+255),0,b
 40810                           
 40811                           ; BSR set to: 0
 40812  0030FE  90D8               	bcf	status,0,c
 40813  003100  377C               	rlcf	___flmul@grs& (0+255),f,b
 40814  003102  377D               	rlcf	(___flmul@grs+1)& (0+255),f,b
 40815  003104  377E               	rlcf	(___flmul@grs+2)& (0+255),f,b
 40816  003106  377F               	rlcf	(___flmul@grs+3)& (0+255),f,b
 40817  003108  0785               	decf	___flmul@temp& (0+255),f,b
 40818  00310A  A0D8               	btfss	status,0,c
 40819  00310C  0786               	decf	(___flmul@temp+1)& (0+255),f,b
 40820  00310E                     l6161:
 40821                           
 40822                           ; BSR set to: 0
 40823                           
 40824                           ; BSR set to: 0
 40825  00310E  AF83               	btfss	(___flmul@prod+2)& (0+255),7,b
 40826  003110  D7EF               	goto	l6162
 40827                           
 40828                           ; BSR set to: 0
 40829                           
 40830                           ; BSR set to: 0
 40831  003112  0E00               	movlw	0
 40832  003114  6F7B               	movwf	___flmul@aexp& (0+255),b
 40833                           
 40834                           ; BSR set to: 0
 40835  003116  AF7F               	btfss	(___flmul@grs+3)& (0+255),7,b
 40836  003118  D016               	goto	l6168
 40837                           
 40838                           ; BSR set to: 0
 40839  00311A  0EFF               	movlw	255
 40840  00311C  157C               	andwf	___flmul@grs& (0+255),w,b
 40841  00311E  6F76               	movwf	??___flmul& (0+255),b
 40842  003120  0EFF               	movlw	255
 40843  003122  157D               	andwf	(___flmul@grs+1)& (0+255),w,b
 40844  003124  6F77               	movwf	(??___flmul+1)& (0+255),b
 40845  003126  0EFF               	movlw	255
 40846  003128  157E               	andwf	(___flmul@grs+2)& (0+255),w,b
 40847  00312A  6F78               	movwf	(??___flmul+2)& (0+255),b
 40848  00312C  0E7F               	movlw	127
 40849  00312E  157F               	andwf	(___flmul@grs+3)& (0+255),w,b
 40850  003130  6F79               	movwf	(??___flmul+3)& (0+255),b
 40851  003132  5176               	movf	??___flmul& (0+255),w,b
 40852  003134  1177               	iorwf	(??___flmul+1)& (0+255),w,b
 40853  003136  1178               	iorwf	(??___flmul+2)& (0+255),w,b
 40854  003138  1179               	iorwf	(??___flmul+3)& (0+255),w,b
 40855  00313A  A4D8               	btfss	status,2,c
 40856  00313C  D002               	goto	u51960
 40857                           
 40858                           ; BSR set to: 0
 40859                           
 40860                           ; BSR set to: 0
 40861  00313E  A181               	btfss	___flmul@prod& (0+255),0,b
 40862  003140  D002               	goto	l6168
 40863  003142                     u51960:
 40864                           
 40865                           ; BSR set to: 0
 40866  003142  0E01               	movlw	1
 40867  003144  6F7B               	movwf	___flmul@aexp& (0+255),b
 40868  003146                     l6168:
 40869                           
 40870                           ; BSR set to: 0
 40871                           
 40872                           ; BSR set to: 0
 40873                           
 40874                           ; BSR set to: 0
 40875  003146  517B               	movf	___flmul@aexp& (0+255),w,b
 40876  003148  B4D8               	btfsc	status,2,c
 40877  00314A  D01F               	goto	l6170
 40878                           
 40879                           ; BSR set to: 0
 40880  00314C  0E01               	movlw	1
 40881  00314E  2781               	addwf	___flmul@prod& (0+255),f,b
 40882  003150  0E00               	movlw	0
 40883  003152  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 40884  003154  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 40885  003156  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 40886                           
 40887                           ; BSR set to: 0
 40888  003158  A184               	btfss	(___flmul@prod+3)& (0+255),0,b
 40889  00315A  D017               	goto	l6170
 40890                           
 40891                           ; BSR set to: 0
 40892  00315C  C081  F076         	movff	___flmul@prod,??___flmul
 40893  003160  C082  F077         	movff	___flmul@prod+1,??___flmul+1
 40894  003164  C083  F078         	movff	___flmul@prod+2,??___flmul+2
 40895  003168  C084  F079         	movff	___flmul@prod+3,??___flmul+3
 40896  00316C  3579               	rlcf	(??___flmul+3)& (0+255),w,b
 40897  00316E  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 40898  003170  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 40899  003172  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 40900  003174  3376               	rrcf	??___flmul& (0+255),f,b
 40901  003176  C076  F081         	movff	??___flmul,___flmul@prod
 40902  00317A  C077  F082         	movff	??___flmul+1,___flmul@prod+1
 40903  00317E  C078  F083         	movff	??___flmul+2,___flmul@prod+2
 40904  003182  C079  F084         	movff	??___flmul+3,___flmul@prod+3
 40905                           
 40906                           ; BSR set to: 0
 40907  003186  4B85               	infsnz	___flmul@temp& (0+255),f,b
 40908  003188  2B86               	incf	(___flmul@temp+1)& (0+255),f,b
 40909  00318A                     l6170:
 40910                           
 40911                           ; BSR set to: 0
 40912                           
 40913                           ; BSR set to: 0
 40914                           
 40915                           ; BSR set to: 0
 40916  00318A  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 40917  00318C  D00D               	goto	l6171
 40918  00318E  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40919  003190  E103               	bnz	u51990
 40920  003192  2985               	incf	___flmul@temp& (0+255),w,b
 40921  003194  A0D8               	btfss	status,0,c
 40922  003196  D008               	goto	l6171
 40923  003198                     u51990:
 40924                           
 40925                           ; BSR set to: 0
 40926  003198  0E00               	movlw	0
 40927  00319A  6F81               	movwf	___flmul@prod& (0+255),b
 40928  00319C  0E00               	movlw	0
 40929  00319E  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 40930  0031A0  0E80               	movlw	128
 40931  0031A2  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 40932  0031A4  0E7F               	movlw	127
 40933  0031A6  D020               	goto	L22
 40934  0031A8                     l6171:
 40935                           
 40936                           ; BSR set to: 0
 40937                           
 40938                           ; BSR set to: 0
 40939  0031A8  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 40940  0031AA  D005               	goto	u52000
 40941  0031AC  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40942  0031AE  E10E               	bnz	l6173
 40943  0031B0  0585               	decf	___flmul@temp& (0+255),w,b
 40944  0031B2  B0D8               	btfsc	status,0,c
 40945  0031B4  D00B               	goto	l6173
 40946  0031B6                     u52000:
 40947                           
 40948                           ; BSR set to: 0
 40949  0031B6  0E00               	movlw	0
 40950  0031B8  6F81               	movwf	___flmul@prod& (0+255),b
 40951  0031BA  0E00               	movlw	0
 40952  0031BC  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 40953  0031BE  0E00               	movlw	0
 40954  0031C0  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 40955  0031C2  0E00               	movlw	0
 40956  0031C4  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 40957  0031C6  0E00               	movlw	0
 40958  0031C8  6F7A               	movwf	___flmul@sign& (0+255),b
 40959  0031CA  D00F               	goto	l6174
 40960  0031CC                     l6173:
 40961                           
 40962                           ; BSR set to: 0
 40963  0031CC  C085  F080         	movff	___flmul@temp,___flmul@bexp
 40964                           
 40965                           ; BSR set to: 0
 40966  0031D0  0EFF               	movlw	255
 40967  0031D2  1781               	andwf	___flmul@prod& (0+255),f,b
 40968  0031D4  0EFF               	movlw	255
 40969  0031D6  1782               	andwf	(___flmul@prod+1)& (0+255),f,b
 40970  0031D8  0E7F               	movlw	127
 40971  0031DA  1783               	andwf	(___flmul@prod+2)& (0+255),f,b
 40972  0031DC  0E00               	movlw	0
 40973  0031DE  1784               	andwf	(___flmul@prod+3)& (0+255),f,b
 40974                           
 40975                           ; BSR set to: 0
 40976  0031E0  B180               	btfsc	___flmul@bexp& (0+255),0,b
 40977                           
 40978                           ; BSR set to: 0
 40979  0031E2  8F83               	bsf	(___flmul@prod+2)& (0+255),7,b
 40980                           
 40981                           ; BSR set to: 0
 40982                           
 40983                           ; BSR set to: 0
 40984  0031E4  90D8               	bcf	status,0,c
 40985  0031E6  3180               	rrcf	___flmul@bexp& (0+255),w,b
 40986  0031E8                     L22:
 40987  0031E8  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 40988  0031EA                     l6174:
 40989                           
 40990                           ; BSR set to: 0
 40991                           
 40992                           ; BSR set to: 0
 40993                           
 40994                           ; BSR set to: 0
 40995  0031EA  517A               	movf	___flmul@sign& (0+255),w,b
 40996  0031EC  1384               	iorwf	(___flmul@prod+3)& (0+255),f,b
 40997                           
 40998                           ; BSR set to: 0
 40999  0031EE  C081  F06E         	movff	___flmul@prod,?___flmul
 41000  0031F2  C082  F06F         	movff	___flmul@prod+1,?___flmul+1
 41001  0031F6  C083  F070         	movff	___flmul@prod+2,?___flmul+2
 41002  0031FA  C084  F071         	movff	___flmul@prod+3,?___flmul+3
 41003  0031FE  0012               	return	
 41004  003200                     __end_of___flmul:
 41005                           	opt stack 0
 41006                           tblptru	equ	0xFF8
 41007                           tblptrh	equ	0xFF7
 41008                           tblptrl	equ	0xFF6
 41009                           tablat	equ	0xFF5
 41010                           prodh	equ	0xFF4
 41011                           prodl	equ	0xFF3
 41012                           intcon	equ	0xFF2
 41013                           intcon2	equ	0xFF1
 41014                           indf0	equ	0xFEF
 41015                           postinc0	equ	0xFEE
 41016                           postdec0	equ	0xFED
 41017                           fsr0h	equ	0xFEA
 41018                           fsr0l	equ	0xFE9
 41019                           wreg	equ	0xFE8
 41020                           postinc1	equ	0xFE6
 41021                           postdec1	equ	0xFE5
 41022                           plusw1	equ	0xFE3
 41023                           fsr1h	equ	0xFE2
 41024                           fsr1l	equ	0xFE1
 41025                           indf2	equ	0xFDF
 41026                           postinc2	equ	0xFDE
 41027                           postdec2	equ	0xFDD
 41028                           plusw2	equ	0xFDB
 41029                           fsr2h	equ	0xFDA
 41030                           fsr2l	equ	0xFD9
 41031                           status	equ	0xFD8
 41032                           
 41033 ;; *************** function ___fladd *****************
 41034 ;; Defined at:
 41035 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
 41036 ;; Parameters:    Size  Location     Type
 41037 ;;  b               4   68[BANK0 ] unsigned char 
 41038 ;;  a               4   72[BANK0 ] unsigned char 
 41039 ;; Auto vars:     Size  Location     Type
 41040 ;;  grs             1   87[BANK0 ] unsigned char 
 41041 ;;  bexp            1   86[BANK0 ] unsigned char 
 41042 ;;  aexp            1   85[BANK0 ] unsigned char 
 41043 ;;  signs           1   84[BANK0 ] unsigned char 
 41044 ;; Return value:  Size  Location     Type
 41045 ;;                  4   68[BANK0 ] unsigned char 
 41046 ;; Registers used:
 41047 ;;		wreg, status,2, status,0
 41048 ;; Tracked objects:
 41049 ;;		On entry : 0/0
 41050 ;;		On exit  : 0/0
 41051 ;;		Unchanged: 0/0
 41052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 41053 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41054 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41055 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41056 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41057 ;;Total ram usage:       20 bytes
 41058 ;; Hardware stack levels used:    1
 41059 ;; Hardware stack levels required when called:    5
 41060 ;; This function calls:
 41061 ;;		Nothing
 41062 ;; This function is called by:
 41063 ;;		_readPotentiometers
 41064 ;;		_calculate_pulse_length
 41065 ;; This function uses a non-reentrant model
 41066 ;;
 41067                           
 41068                           	psect	text120
 41069  003200                     __ptext120:
 41070                           	opt stack 0
 41071  003200                     ___fladd:
 41072                           	opt stack 22
 41073                           
 41074                           ; BSR set to: 0
 41075                           ;incstack = 0
 41076  003200  0100               	movlb	0	; () banked
 41077  003202  51A7               	movf	(___fladd@b+3)& (0+255),w,b
 41078  003204  0B80               	andlw	128
 41079  003206  6FB4               	movwf	___fladd@signs& (0+255),b
 41080  003208  51A7               	movf	(___fladd@b+3)& (0+255),w,b
 41081  00320A  25A7               	addwf	(___fladd@b+3)& (0+255),w,b
 41082  00320C  6FB6               	movwf	___fladd@bexp& (0+255),b
 41083                           
 41084                           ; BSR set to: 0
 41085  00320E  BFA6               	btfsc	(___fladd@b+2)& (0+255),7,b
 41086                           
 41087                           ; BSR set to: 0
 41088  003210  81B6               	bsf	___fladd@bexp& (0+255),0,b
 41089                           
 41090                           ; BSR set to: 0
 41091                           
 41092                           ; BSR set to: 0
 41093  003212  51B6               	movf	___fladd@bexp& (0+255),w,b
 41094  003214  B4D8               	btfsc	status,2,c
 41095  003216  D00D               	goto	l6059
 41096                           
 41097                           ; BSR set to: 0
 41098  003218  29B6               	incf	___fladd@bexp& (0+255),w,b
 41099  00321A  A4D8               	btfss	status,2,c
 41100  00321C  D008               	goto	l6060
 41101                           
 41102                           ; BSR set to: 0
 41103  00321E  0E00               	movlw	0
 41104  003220  6FA4               	movwf	___fladd@b& (0+255),b
 41105  003222  0E00               	movlw	0
 41106  003224  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 41107  003226  0E00               	movlw	0
 41108  003228  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 41109  00322A  0E00               	movlw	0
 41110  00322C  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 41111  00322E                     l6060:
 41112                           
 41113                           ; BSR set to: 0
 41114                           
 41115                           ; BSR set to: 0
 41116  00322E  8FA6               	bsf	(___fladd@b+2)& (0+255),7,b
 41117  003230  D006               	goto	L23
 41118  003232                     l6059:
 41119                           
 41120                           ; BSR set to: 0
 41121                           
 41122                           ; BSR set to: 0
 41123  003232  0E00               	movlw	0
 41124  003234  6FA4               	movwf	___fladd@b& (0+255),b
 41125  003236  0E00               	movlw	0
 41126  003238  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 41127  00323A  0E00               	movlw	0
 41128  00323C  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 41129  00323E                     L23:
 41130  00323E  0E00               	movlw	0
 41131  003240  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 41132                           
 41133                           ; BSR set to: 0
 41134                           
 41135                           ; BSR set to: 0
 41136  003242  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 41137  003244  0B80               	andlw	128
 41138  003246  6FB5               	movwf	___fladd@aexp& (0+255),b
 41139                           
 41140                           ; BSR set to: 0
 41141  003248  51B4               	movf	___fladd@signs& (0+255),w,b
 41142  00324A  19B5               	xorwf	___fladd@aexp& (0+255),w,b
 41143  00324C  A4D8               	btfss	status,2,c
 41144                           
 41145                           ; BSR set to: 0
 41146  00324E  8DB4               	bsf	___fladd@signs& (0+255),6,b
 41147                           
 41148                           ; BSR set to: 0
 41149                           
 41150                           ; BSR set to: 0
 41151  003250  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 41152  003252  25AB               	addwf	(___fladd@a+3)& (0+255),w,b
 41153  003254  6FB5               	movwf	___fladd@aexp& (0+255),b
 41154                           
 41155                           ; BSR set to: 0
 41156  003256  BFAA               	btfsc	(___fladd@a+2)& (0+255),7,b
 41157                           
 41158                           ; BSR set to: 0
 41159  003258  81B5               	bsf	___fladd@aexp& (0+255),0,b
 41160                           
 41161                           ; BSR set to: 0
 41162                           
 41163                           ; BSR set to: 0
 41164  00325A  51B5               	movf	___fladd@aexp& (0+255),w,b
 41165  00325C  B4D8               	btfsc	status,2,c
 41166  00325E  D00D               	goto	l6064
 41167                           
 41168                           ; BSR set to: 0
 41169  003260  29B5               	incf	___fladd@aexp& (0+255),w,b
 41170  003262  A4D8               	btfss	status,2,c
 41171  003264  D008               	goto	l6065
 41172                           
 41173                           ; BSR set to: 0
 41174  003266  0E00               	movlw	0
 41175  003268  6FA8               	movwf	___fladd@a& (0+255),b
 41176  00326A  0E00               	movlw	0
 41177  00326C  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 41178  00326E  0E00               	movlw	0
 41179  003270  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 41180  003272  0E00               	movlw	0
 41181  003274  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 41182  003276                     l6065:
 41183                           
 41184                           ; BSR set to: 0
 41185                           
 41186                           ; BSR set to: 0
 41187  003276  8FAA               	bsf	(___fladd@a+2)& (0+255),7,b
 41188  003278  D006               	goto	L24
 41189  00327A                     l6064:
 41190                           
 41191                           ; BSR set to: 0
 41192                           
 41193                           ; BSR set to: 0
 41194  00327A  0E00               	movlw	0
 41195  00327C  6FA8               	movwf	___fladd@a& (0+255),b
 41196  00327E  0E00               	movlw	0
 41197  003280  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 41198  003282  0E00               	movlw	0
 41199  003284  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 41200  003286                     L24:
 41201  003286  0E00               	movlw	0
 41202  003288  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 41203                           
 41204                           ; BSR set to: 0
 41205                           
 41206                           ; BSR set to: 0
 41207  00328A  51B6               	movf	___fladd@bexp& (0+255),w,b
 41208  00328C  5DB5               	subwf	___fladd@aexp& (0+255),w,b
 41209  00328E  B0D8               	btfsc	status,0,c
 41210  003290  D022               	goto	l6067
 41211                           
 41212                           ; BSR set to: 0
 41213  003292  ADB4               	btfss	___fladd@signs& (0+255),6,b
 41214  003294  D002               	goto	l6068
 41215                           
 41216                           ; BSR set to: 0
 41217  003296  0E80               	movlw	128
 41218  003298  1BB4               	xorwf	___fladd@signs& (0+255),f,b
 41219  00329A                     l6068:
 41220                           
 41221                           ; BSR set to: 0
 41222                           
 41223                           ; BSR set to: 0
 41224  00329A  C0B6  F0B7         	movff	___fladd@bexp,___fladd@grs
 41225                           
 41226                           ; BSR set to: 0
 41227  00329E  C0B5  F0B6         	movff	___fladd@aexp,___fladd@bexp
 41228                           
 41229                           ; BSR set to: 0
 41230  0032A2  C0B7  F0B5         	movff	___fladd@grs,___fladd@aexp
 41231                           
 41232                           ; BSR set to: 0
 41233  0032A6  C0A4  F0B7         	movff	___fladd@b,___fladd@grs
 41234                           
 41235                           ; BSR set to: 0
 41236  0032AA  C0A8  F0A4         	movff	___fladd@a,___fladd@b
 41237                           
 41238                           ; BSR set to: 0
 41239  0032AE  C0B7  F0A8         	movff	___fladd@grs,___fladd@a
 41240                           
 41241                           ; BSR set to: 0
 41242  0032B2  C0A5  F0B7         	movff	___fladd@b+1,___fladd@grs
 41243                           
 41244                           ; BSR set to: 0
 41245  0032B6  C0A9  F0A5         	movff	___fladd@a+1,___fladd@b+1
 41246                           
 41247                           ; BSR set to: 0
 41248  0032BA  C0B7  F0A9         	movff	___fladd@grs,___fladd@a+1
 41249                           
 41250                           ; BSR set to: 0
 41251  0032BE  C0A6  F0B7         	movff	___fladd@b+2,___fladd@grs
 41252                           
 41253                           ; BSR set to: 0
 41254  0032C2  C0AA  F0A6         	movff	___fladd@a+2,___fladd@b+2
 41255                           
 41256                           ; BSR set to: 0
 41257  0032C6  C0B7  F0AA         	movff	___fladd@grs,___fladd@a+2
 41258                           
 41259                           ; BSR set to: 0
 41260  0032CA  C0A7  F0B7         	movff	___fladd@b+3,___fladd@grs
 41261                           
 41262                           ; BSR set to: 0
 41263  0032CE  C0AB  F0A7         	movff	___fladd@a+3,___fladd@b+3
 41264                           
 41265                           ; BSR set to: 0
 41266  0032D2  C0B7  F0AB         	movff	___fladd@grs,___fladd@a+3
 41267  0032D6                     l6067:
 41268                           
 41269                           ; BSR set to: 0
 41270                           
 41271                           ; BSR set to: 0
 41272  0032D6  0E00               	movlw	0
 41273  0032D8  6FB7               	movwf	___fladd@grs& (0+255),b
 41274                           
 41275                           ; BSR set to: 0
 41276  0032DA  51B6               	movf	___fladd@bexp& (0+255),w,b
 41277  0032DC  6FAC               	movwf	??___fladd& (0+255),b
 41278  0032DE  6BAD               	clrf	(??___fladd+1)& (0+255),b
 41279  0032E0  1FAC               	comf	??___fladd& (0+255),f,b
 41280  0032E2  1FAD               	comf	(??___fladd+1)& (0+255),f,b
 41281  0032E4  4BAC               	infsnz	??___fladd& (0+255),f,b
 41282  0032E6  2BAD               	incf	(??___fladd+1)& (0+255),f,b
 41283  0032E8  51B5               	movf	___fladd@aexp& (0+255),w,b
 41284  0032EA  6FAE               	movwf	(??___fladd+2)& (0+255),b
 41285  0032EC  6BAF               	clrf	(??___fladd+3)& (0+255),b
 41286  0032EE  51AC               	movf	??___fladd& (0+255),w,b
 41287  0032F0  27AE               	addwf	(??___fladd+2)& (0+255),f,b
 41288  0032F2  51AD               	movf	(??___fladd+1)& (0+255),w,b
 41289  0032F4  23AF               	addwfc	(??___fladd+3)& (0+255),f,b
 41290  0032F6  BFAF               	btfsc	(??___fladd+3)& (0+255),7,b
 41291  0032F8  D02C               	goto	l6071
 41292  0032FA  51AF               	movf	(??___fladd+3)& (0+255),w,b
 41293  0032FC  E104               	bnz	u51530
 41294  0032FE  0E1A               	movlw	26
 41295  003300  5DAE               	subwf	(??___fladd+2)& (0+255),w,b
 41296  003302  A0D8               	btfss	status,0,c
 41297  003304  D026               	goto	l6071
 41298  003306                     u51530:
 41299                           
 41300                           ; BSR set to: 0
 41301  003306  51A4               	movf	___fladd@b& (0+255),w,b
 41302  003308  11A5               	iorwf	(___fladd@b+1)& (0+255),w,b
 41303  00330A  11A6               	iorwf	(___fladd@b+2)& (0+255),w,b
 41304  00330C  11A7               	iorwf	(___fladd@b+3)& (0+255),w,b
 41305  00330E  B4D8               	btfsc	status,2,c
 41306  003310  D002               	goto	u51540
 41307  003312  0E01               	movlw	1
 41308  003314  D001               	goto	u51550
 41309  003316                     u51540:
 41310  003316  0E00               	movlw	0
 41311  003318                     u51550:
 41312  003318  6FB7               	movwf	___fladd@grs& (0+255),b
 41313                           
 41314                           ; BSR set to: 0
 41315  00331A  0E00               	movlw	0
 41316  00331C  6FA4               	movwf	___fladd@b& (0+255),b
 41317  00331E  0E00               	movlw	0
 41318  003320  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 41319  003322  0E00               	movlw	0
 41320  003324  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 41321  003326  0E00               	movlw	0
 41322  003328  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 41323                           
 41324                           ; BSR set to: 0
 41325  00332A  C0B5  F0B6         	movff	___fladd@aexp,___fladd@bexp
 41326  00332E  D015               	goto	u51580
 41327  003330                     l6072:
 41328                           
 41329                           ; BSR set to: 0
 41330  003330  A1B7               	btfss	___fladd@grs& (0+255),0,b
 41331  003332  D005               	goto	l6073
 41332                           
 41333                           ; BSR set to: 0
 41334  003334  90D8               	bcf	status,0,c
 41335  003336  31B7               	rrcf	___fladd@grs& (0+255),w,b
 41336  003338  0901               	iorlw	1
 41337  00333A  6FB7               	movwf	___fladd@grs& (0+255),b
 41338  00333C  D002               	goto	l6074
 41339  00333E                     l6073:
 41340                           
 41341                           ; BSR set to: 0
 41342                           
 41343                           ; BSR set to: 0
 41344  00333E  90D8               	bcf	status,0,c
 41345  003340  33B7               	rrcf	___fladd@grs& (0+255),f,b
 41346  003342                     l6074:
 41347                           
 41348                           ; BSR set to: 0
 41349                           
 41350                           ; BSR set to: 0
 41351  003342  B1A4               	btfsc	___fladd@b& (0+255),0,b
 41352                           
 41353                           ; BSR set to: 0
 41354  003344  8FB7               	bsf	___fladd@grs& (0+255),7,b
 41355                           
 41356                           ; BSR set to: 0
 41357                           
 41358                           ; BSR set to: 0
 41359  003346  35A7               	rlcf	(___fladd@b+3)& (0+255),w,b
 41360  003348  33A7               	rrcf	(___fladd@b+3)& (0+255),f,b
 41361  00334A  33A6               	rrcf	(___fladd@b+2)& (0+255),f,b
 41362  00334C  33A5               	rrcf	(___fladd@b+1)& (0+255),f,b
 41363  00334E  33A4               	rrcf	___fladd@b& (0+255),f,b
 41364                           
 41365                           ; BSR set to: 0
 41366  003350  2BB6               	incf	___fladd@bexp& (0+255),f,b
 41367  003352                     l6071:
 41368                           
 41369                           ; BSR set to: 0
 41370  003352  51B5               	movf	___fladd@aexp& (0+255),w,b
 41371  003354  5DB6               	subwf	___fladd@bexp& (0+255),w,b
 41372  003356  A0D8               	btfss	status,0,c
 41373  003358  D7EB               	goto	l6072
 41374  00335A                     u51580:
 41375                           
 41376                           ; BSR set to: 0
 41377                           
 41378                           ; BSR set to: 0
 41379  00335A  BDB4               	btfsc	___fladd@signs& (0+255),6,b
 41380  00335C  D029               	goto	l6077
 41381                           
 41382                           ; BSR set to: 0
 41383  00335E  51B6               	movf	___fladd@bexp& (0+255),w,b
 41384  003360  A4D8               	btfss	status,2,c
 41385  003362  D009               	goto	l6078
 41386                           
 41387                           ; BSR set to: 0
 41388  003364  0E00               	movlw	0
 41389  003366  6FA4               	movwf	?___fladd& (0+255),b
 41390  003368  0E00               	movlw	0
 41391  00336A  6FA5               	movwf	(?___fladd+1)& (0+255),b
 41392  00336C  0E00               	movlw	0
 41393  00336E  6FA6               	movwf	(?___fladd+2)& (0+255),b
 41394  003370  0E00               	movlw	0
 41395  003372  6FA7               	movwf	(?___fladd+3)& (0+255),b
 41396                           
 41397                           ; BSR set to: 0
 41398  003374  0012               	return	
 41399  003376                     l6078:
 41400                           
 41401                           ; BSR set to: 0
 41402                           
 41403                           ; BSR set to: 0
 41404  003376  51A8               	movf	___fladd@a& (0+255),w,b
 41405  003378  27A4               	addwf	___fladd@b& (0+255),f,b
 41406  00337A  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 41407  00337C  23A5               	addwfc	(___fladd@b+1)& (0+255),f,b
 41408  00337E  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 41409  003380  23A6               	addwfc	(___fladd@b+2)& (0+255),f,b
 41410  003382  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 41411  003384  23A7               	addwfc	(___fladd@b+3)& (0+255),f,b
 41412                           
 41413                           ; BSR set to: 0
 41414  003386  A1A7               	btfss	(___fladd@b+3)& (0+255),0,b
 41415  003388  D083               	goto	u51710
 41416                           
 41417                           ; BSR set to: 0
 41418  00338A  A1B7               	btfss	___fladd@grs& (0+255),0,b
 41419  00338C  D006               	goto	l6081
 41420                           
 41421                           ; BSR set to: 0
 41422  00338E  90D8               	bcf	status,0,c
 41423  003390  33B7               	rrcf	___fladd@grs& (0+255),f,b
 41424  003392  51B7               	movf	___fladd@grs& (0+255),w,b
 41425  003394  0901               	iorlw	1
 41426  003396  6FB7               	movwf	___fladd@grs& (0+255),b
 41427  003398  D002               	goto	l6082
 41428  00339A                     l6081:
 41429                           
 41430                           ; BSR set to: 0
 41431                           
 41432                           ; BSR set to: 0
 41433  00339A  90D8               	bcf	status,0,c
 41434  00339C  33B7               	rrcf	___fladd@grs& (0+255),f,b
 41435  00339E                     l6082:
 41436                           
 41437                           ; BSR set to: 0
 41438                           
 41439                           ; BSR set to: 0
 41440  00339E  B1A4               	btfsc	___fladd@b& (0+255),0,b
 41441                           
 41442                           ; BSR set to: 0
 41443  0033A0  8FB7               	bsf	___fladd@grs& (0+255),7,b
 41444                           
 41445                           ; BSR set to: 0
 41446                           
 41447                           ; BSR set to: 0
 41448  0033A2  35A7               	rlcf	(___fladd@b+3)& (0+255),w,b
 41449  0033A4  33A7               	rrcf	(___fladd@b+3)& (0+255),f,b
 41450  0033A6  33A6               	rrcf	(___fladd@b+2)& (0+255),f,b
 41451  0033A8  33A5               	rrcf	(___fladd@b+1)& (0+255),f,b
 41452  0033AA  33A4               	rrcf	___fladd@b& (0+255),f,b
 41453                           
 41454                           ; BSR set to: 0
 41455  0033AC  2BB6               	incf	___fladd@bexp& (0+255),f,b
 41456                           
 41457                           ; BSR set to: 0
 41458  0033AE  D070               	goto	u51710
 41459  0033B0                     l6077:
 41460                           
 41461                           ; BSR set to: 0
 41462                           
 41463                           ; BSR set to: 0
 41464  0033B0  51A8               	movf	___fladd@a& (0+255),w,b
 41465  0033B2  5DA4               	subwf	___fladd@b& (0+255),w,b
 41466  0033B4  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 41467  0033B6  59A5               	subwfb	(___fladd@b+1)& (0+255),w,b
 41468  0033B8  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 41469  0033BA  59A6               	subwfb	(___fladd@b+2)& (0+255),w,b
 41470  0033BC  51A7               	movf	(___fladd@b+3)& (0+255),w,b
 41471  0033BE  0A80               	xorlw	128
 41472  0033C0  6FAC               	movwf	??___fladd& (0+255),b
 41473  0033C2  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 41474  0033C4  0A80               	xorlw	128
 41475  0033C6  59AC               	subwfb	??___fladd& (0+255),w,b
 41476  0033C8  B0D8               	btfsc	status,0,c
 41477  0033CA  D036               	goto	l6085
 41478                           
 41479                           ; BSR set to: 0
 41480  0033CC  C0A4  F0AC         	movff	___fladd@b,??___fladd
 41481  0033D0  C0A5  F0AD         	movff	___fladd@b+1,??___fladd+1
 41482  0033D4  C0A6  F0AE         	movff	___fladd@b+2,??___fladd+2
 41483  0033D8  C0A7  F0AF         	movff	___fladd@b+3,??___fladd+3
 41484  0033DC  1FAC               	comf	??___fladd& (0+255),f,b
 41485  0033DE  1FAD               	comf	(??___fladd+1)& (0+255),f,b
 41486  0033E0  1FAE               	comf	(??___fladd+2)& (0+255),f,b
 41487  0033E2  1FAF               	comf	(??___fladd+3)& (0+255),f,b
 41488  0033E4  2BAC               	incf	??___fladd& (0+255),f,b
 41489  0033E6  0E00               	movlw	0
 41490  0033E8  23AD               	addwfc	(??___fladd+1)& (0+255),f,b
 41491  0033EA  23AE               	addwfc	(??___fladd+2)& (0+255),f,b
 41492  0033EC  23AF               	addwfc	(??___fladd+3)& (0+255),f,b
 41493  0033EE  51A8               	movf	___fladd@a& (0+255),w,b
 41494  0033F0  25AC               	addwf	??___fladd& (0+255),w,b
 41495  0033F2  6FB0               	movwf	(??___fladd+4)& (0+255),b
 41496  0033F4  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 41497  0033F6  21AD               	addwfc	(??___fladd+1)& (0+255),w,b
 41498  0033F8  6FB1               	movwf	(??___fladd+5)& (0+255),b
 41499  0033FA  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 41500  0033FC  21AE               	addwfc	(??___fladd+2)& (0+255),w,b
 41501  0033FE  6FB2               	movwf	(??___fladd+6)& (0+255),b
 41502  003400  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 41503  003402  21AF               	addwfc	(??___fladd+3)& (0+255),w,b
 41504  003404  6FB3               	movwf	(??___fladd+7)& (0+255),b
 41505  003406  0EFF               	movlw	255
 41506  003408  25B0               	addwf	(??___fladd+4)& (0+255),w,b
 41507  00340A  6FA4               	movwf	___fladd@b& (0+255),b
 41508  00340C  0EFF               	movlw	255
 41509  00340E  21B1               	addwfc	(??___fladd+5)& (0+255),w,b
 41510  003410  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 41511  003412  0EFF               	movlw	255
 41512  003414  21B2               	addwfc	(??___fladd+6)& (0+255),w,b
 41513  003416  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 41514  003418  0EFF               	movlw	255
 41515  00341A  21B3               	addwfc	(??___fladd+7)& (0+255),w,b
 41516  00341C  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 41517  00341E  0E80               	movlw	128
 41518  003420  1BB4               	xorwf	___fladd@signs& (0+255),f,b
 41519                           
 41520                           ; BSR set to: 0
 41521  003422  6DB7               	negf	___fladd@grs& (0+255),b
 41522                           
 41523                           ; BSR set to: 0
 41524  003424  51B7               	movf	___fladd@grs& (0+255),w,b
 41525  003426  A4D8               	btfss	status,2,c
 41526  003428  D00F               	goto	l6087
 41527                           
 41528                           ; BSR set to: 0
 41529  00342A  0E01               	movlw	1
 41530  00342C  27A4               	addwf	___fladd@b& (0+255),f,b
 41531  00342E  0E00               	movlw	0
 41532  003430  23A5               	addwfc	(___fladd@b+1)& (0+255),f,b
 41533  003432  23A6               	addwfc	(___fladd@b+2)& (0+255),f,b
 41534  003434  23A7               	addwfc	(___fladd@b+3)& (0+255),f,b
 41535                           
 41536                           ; BSR set to: 0
 41537  003436  D008               	goto	l6087
 41538  003438                     l6085:
 41539                           
 41540                           ; BSR set to: 0
 41541                           
 41542                           ; BSR set to: 0
 41543  003438  51A8               	movf	___fladd@a& (0+255),w,b
 41544  00343A  5FA4               	subwf	___fladd@b& (0+255),f,b
 41545  00343C  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 41546  00343E  5BA5               	subwfb	(___fladd@b+1)& (0+255),f,b
 41547  003440  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 41548  003442  5BA6               	subwfb	(___fladd@b+2)& (0+255),f,b
 41549  003444  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 41550  003446  5BA7               	subwfb	(___fladd@b+3)& (0+255),f,b
 41551  003448                     l6087:
 41552                           
 41553                           ; BSR set to: 0
 41554  003448  51A4               	movf	___fladd@b& (0+255),w,b
 41555  00344A  11A5               	iorwf	(___fladd@b+1)& (0+255),w,b
 41556  00344C  11A6               	iorwf	(___fladd@b+2)& (0+255),w,b
 41557  00344E  11A7               	iorwf	(___fladd@b+3)& (0+255),w,b
 41558  003450  A4D8               	btfss	status,2,c
 41559  003452  D01C               	goto	l6094
 41560                           
 41561                           ; BSR set to: 0
 41562  003454  51B7               	movf	___fladd@grs& (0+255),w,b
 41563  003456  A4D8               	btfss	status,2,c
 41564  003458  D019               	goto	l6094
 41565                           
 41566                           ; BSR set to: 0
 41567  00345A  0E00               	movlw	0
 41568  00345C  6FA4               	movwf	?___fladd& (0+255),b
 41569  00345E  0E00               	movlw	0
 41570  003460  6FA5               	movwf	(?___fladd+1)& (0+255),b
 41571  003462  0E00               	movlw	0
 41572  003464  6FA6               	movwf	(?___fladd+2)& (0+255),b
 41573  003466  0E00               	movlw	0
 41574  003468  6FA7               	movwf	(?___fladd+3)& (0+255),b
 41575                           
 41576                           ; BSR set to: 0
 41577  00346A  0012               	return	
 41578  00346C                     
 41579                           ; BSR set to: 0
 41580                           
 41581                           ; BSR set to: 0
 41582  00346C  90D8               	bcf	status,0,c
 41583  00346E  37A4               	rlcf	___fladd@b& (0+255),f,b
 41584  003470  37A5               	rlcf	(___fladd@b+1)& (0+255),f,b
 41585  003472  37A6               	rlcf	(___fladd@b+2)& (0+255),f,b
 41586  003474  37A7               	rlcf	(___fladd@b+3)& (0+255),f,b
 41587                           
 41588                           ; BSR set to: 0
 41589  003476  BFB7               	btfsc	___fladd@grs& (0+255),7,b
 41590                           
 41591                           ; BSR set to: 0
 41592  003478  81A4               	bsf	___fladd@b& (0+255),0,b
 41593                           
 41594                           ; BSR set to: 0
 41595                           
 41596                           ; BSR set to: 0
 41597  00347A  A1B7               	btfss	___fladd@grs& (0+255),0,b
 41598  00347C  D002               	goto	l6092
 41599                           
 41600                           ; BSR set to: 0
 41601  00347E  80D8               	bsf	status,0,c
 41602  003480  D001               	goto	L25
 41603  003482                     l6092:
 41604                           
 41605                           ; BSR set to: 0
 41606                           
 41607                           ; BSR set to: 0
 41608  003482  90D8               	bcf	status,0,c
 41609  003484                     L25:
 41610  003484  37B7               	rlcf	___fladd@grs& (0+255),f,b
 41611                           
 41612                           ; BSR set to: 0
 41613                           
 41614                           ; BSR set to: 0
 41615  003486  51B6               	movf	___fladd@bexp& (0+255),w,b
 41616  003488  A4D8               	btfss	status,2,c
 41617                           
 41618                           ; BSR set to: 0
 41619  00348A  07B6               	decf	___fladd@bexp& (0+255),f,b
 41620  00348C                     l6094:
 41621                           
 41622                           ; BSR set to: 0
 41623                           
 41624                           ; BSR set to: 0
 41625                           
 41626                           ; BSR set to: 0
 41627  00348C  AFA6               	btfss	(___fladd@b+2)& (0+255),7,b
 41628  00348E  D7EE               	goto	l6090
 41629  003490                     u51710:
 41630                           
 41631                           ; BSR set to: 0
 41632                           
 41633                           ; BSR set to: 0
 41634                           
 41635                           ; BSR set to: 0
 41636  003490  0E00               	movlw	0
 41637  003492  6FB5               	movwf	___fladd@aexp& (0+255),b
 41638                           
 41639                           ; BSR set to: 0
 41640  003494  AFB7               	btfss	___fladd@grs& (0+255),7,b
 41641  003496  D00A               	goto	l6099
 41642                           
 41643                           ; BSR set to: 0
 41644  003498  C0B7  F0AC         	movff	___fladd@grs,??___fladd
 41645  00349C  0E7F               	movlw	127
 41646  00349E  17AC               	andwf	??___fladd& (0+255),f,b
 41647  0034A0  A4D8               	btfss	status,2,c
 41648  0034A2  D002               	goto	u51740
 41649                           
 41650                           ; BSR set to: 0
 41651                           
 41652                           ; BSR set to: 0
 41653  0034A4  A1A4               	btfss	___fladd@b& (0+255),0,b
 41654  0034A6  D002               	goto	l6099
 41655  0034A8                     u51740:
 41656                           
 41657                           ; BSR set to: 0
 41658  0034A8  0E01               	movlw	1
 41659  0034AA  6FB5               	movwf	___fladd@aexp& (0+255),b
 41660  0034AC                     l6099:
 41661                           
 41662                           ; BSR set to: 0
 41663                           
 41664                           ; BSR set to: 0
 41665                           
 41666                           ; BSR set to: 0
 41667  0034AC  51B5               	movf	___fladd@aexp& (0+255),w,b
 41668  0034AE  B4D8               	btfsc	status,2,c
 41669  0034B0  D020               	goto	l6102
 41670                           
 41671                           ; BSR set to: 0
 41672  0034B2  0E01               	movlw	1
 41673  0034B4  27A4               	addwf	___fladd@b& (0+255),f,b
 41674  0034B6  0E00               	movlw	0
 41675  0034B8  23A5               	addwfc	(___fladd@b+1)& (0+255),f,b
 41676  0034BA  23A6               	addwfc	(___fladd@b+2)& (0+255),f,b
 41677  0034BC  23A7               	addwfc	(___fladd@b+3)& (0+255),f,b
 41678                           
 41679                           ; BSR set to: 0
 41680  0034BE  A1A7               	btfss	(___fladd@b+3)& (0+255),0,b
 41681  0034C0  D018               	goto	l6102
 41682                           
 41683                           ; BSR set to: 0
 41684  0034C2  C0A4  F0AC         	movff	___fladd@b,??___fladd
 41685  0034C6  C0A5  F0AD         	movff	___fladd@b+1,??___fladd+1
 41686  0034CA  C0A6  F0AE         	movff	___fladd@b+2,??___fladd+2
 41687  0034CE  C0A7  F0AF         	movff	___fladd@b+3,??___fladd+3
 41688  0034D2  35AF               	rlcf	(??___fladd+3)& (0+255),w,b
 41689  0034D4  33AF               	rrcf	(??___fladd+3)& (0+255),f,b
 41690  0034D6  33AE               	rrcf	(??___fladd+2)& (0+255),f,b
 41691  0034D8  33AD               	rrcf	(??___fladd+1)& (0+255),f,b
 41692  0034DA  33AC               	rrcf	??___fladd& (0+255),f,b
 41693  0034DC  C0AC  F0A4         	movff	??___fladd,___fladd@b
 41694  0034E0  C0AD  F0A5         	movff	??___fladd+1,___fladd@b+1
 41695  0034E4  C0AE  F0A6         	movff	??___fladd+2,___fladd@b+2
 41696  0034E8  C0AF  F0A7         	movff	??___fladd+3,___fladd@b+3
 41697  0034EC  29B6               	incf	___fladd@bexp& (0+255),w,b
 41698  0034EE  A4D8               	btfss	status,2,c
 41699                           
 41700                           ; BSR set to: 0
 41701  0034F0  2BB6               	incf	___fladd@bexp& (0+255),f,b
 41702  0034F2                     l6102:
 41703                           
 41704                           ; BSR set to: 0
 41705                           
 41706                           ; BSR set to: 0
 41707                           
 41708                           ; BSR set to: 0
 41709                           
 41710                           ; BSR set to: 0
 41711  0034F2  29B6               	incf	___fladd@bexp& (0+255),w,b
 41712  0034F4  B4D8               	btfsc	status,2,c
 41713  0034F6  D003               	goto	u51790
 41714                           
 41715                           ; BSR set to: 0
 41716  0034F8  51B6               	movf	___fladd@bexp& (0+255),w,b
 41717  0034FA  A4D8               	btfss	status,2,c
 41718  0034FC  D00D               	goto	l6106
 41719  0034FE                     u51790:
 41720                           
 41721                           ; BSR set to: 0
 41722                           
 41723                           ; BSR set to: 0
 41724  0034FE  0E00               	movlw	0
 41725  003500  6FA4               	movwf	___fladd@b& (0+255),b
 41726  003502  0E00               	movlw	0
 41727  003504  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 41728  003506  0E00               	movlw	0
 41729  003508  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 41730  00350A  0E00               	movlw	0
 41731  00350C  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 41732  00350E  51B6               	movf	___fladd@bexp& (0+255),w,b
 41733  003510  A4D8               	btfss	status,2,c
 41734  003512  D002               	goto	l6106
 41735                           
 41736                           ; BSR set to: 0
 41737  003514  0E00               	movlw	0
 41738  003516  6FB4               	movwf	___fladd@signs& (0+255),b
 41739  003518                     l6106:
 41740                           
 41741                           ; BSR set to: 0
 41742                           
 41743                           ; BSR set to: 0
 41744                           
 41745                           ; BSR set to: 0
 41746  003518  A1B6               	btfss	___fladd@bexp& (0+255),0,b
 41747  00351A  D002               	goto	l6107
 41748                           
 41749                           ; BSR set to: 0
 41750  00351C  8FA6               	bsf	(___fladd@b+2)& (0+255),7,b
 41751  00351E  D001               	goto	l6108
 41752  003520                     l6107:
 41753                           
 41754                           ; BSR set to: 0
 41755                           
 41756                           ; BSR set to: 0
 41757  003520  9FA6               	bcf	(___fladd@b+2)& (0+255),7,b
 41758  003522                     l6108:
 41759                           
 41760                           ; BSR set to: 0
 41761                           
 41762                           ; BSR set to: 0
 41763  003522  90D8               	bcf	status,0,c
 41764  003524  31B6               	rrcf	___fladd@bexp& (0+255),w,b
 41765  003526  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 41766                           
 41767                           ; BSR set to: 0
 41768  003528  BFB4               	btfsc	___fladd@signs& (0+255),7,b
 41769                           
 41770                           ; BSR set to: 0
 41771  00352A  8FA7               	bsf	(___fladd@b+3)& (0+255),7,b
 41772                           
 41773                           ; BSR set to: 0
 41774                           
 41775                           ; BSR set to: 0
 41776  00352C  C0A4  F0A4         	movff	___fladd@b,?___fladd
 41777  003530  C0A5  F0A5         	movff	___fladd@b+1,?___fladd+1
 41778  003534  C0A6  F0A6         	movff	___fladd@b+2,?___fladd+2
 41779  003538  C0A7  F0A7         	movff	___fladd@b+3,?___fladd+3
 41780  00353C  0012               	return	
 41781  00353E                     __end_of___fladd:
 41782                           	opt stack 0
 41783                           tblptru	equ	0xFF8
 41784                           tblptrh	equ	0xFF7
 41785                           tblptrl	equ	0xFF6
 41786                           tablat	equ	0xFF5
 41787                           prodh	equ	0xFF4
 41788                           prodl	equ	0xFF3
 41789                           intcon	equ	0xFF2
 41790                           intcon2	equ	0xFF1
 41791                           indf0	equ	0xFEF
 41792                           postinc0	equ	0xFEE
 41793                           postdec0	equ	0xFED
 41794                           fsr0h	equ	0xFEA
 41795                           fsr0l	equ	0xFE9
 41796                           wreg	equ	0xFE8
 41797                           postinc1	equ	0xFE6
 41798                           postdec1	equ	0xFE5
 41799                           plusw1	equ	0xFE3
 41800                           fsr1h	equ	0xFE2
 41801                           fsr1l	equ	0xFE1
 41802                           indf2	equ	0xFDF
 41803                           postinc2	equ	0xFDE
 41804                           postdec2	equ	0xFDD
 41805                           plusw2	equ	0xFDB
 41806                           fsr2h	equ	0xFDA
 41807                           fsr2l	equ	0xFD9
 41808                           status	equ	0xFD8
 41809                           
 41810 ;; *************** function _ADC_Read *****************
 41811 ;; Defined at:
 41812 ;;		line 35 in file "adc.c"
 41813 ;; Parameters:    Size  Location     Type
 41814 ;;  adc_channel     1    wreg     unsigned char 
 41815 ;; Auto vars:     Size  Location     Type
 41816 ;;  adc_channel     1    4[BANK0 ] unsigned char 
 41817 ;; Return value:  Size  Location     Type
 41818 ;;                  2    0[BANK0 ] unsigned int 
 41819 ;; Registers used:
 41820 ;;		wreg, status,2, status,0
 41821 ;; Tracked objects:
 41822 ;;		On entry : 0/0
 41823 ;;		On exit  : 0/0
 41824 ;;		Unchanged: 0/0
 41825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 41826 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41827 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41828 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41829 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41830 ;;Total ram usage:        5 bytes
 41831 ;; Hardware stack levels used:    1
 41832 ;; Hardware stack levels required when called:    5
 41833 ;; This function calls:
 41834 ;;		Nothing
 41835 ;; This function is called by:
 41836 ;;		_readPotentiometers
 41837 ;; This function uses a non-reentrant model
 41838 ;;
 41839                           
 41840                           	psect	text121
 41841  009546                     __ptext121:
 41842                           	opt stack 0
 41843  009546                     _ADC_Read:
 41844                           	opt stack 20
 41845                           
 41846                           ; BSR set to: 0
 41847                           ;incstack = 0
 41848                           ;ADC_Read@adc_channel stored from wreg
 41849  009546  0100               	movlb	0	; () banked
 41850  009548  6F64               	movwf	ADC_Read@adc_channel& (0+255),b
 41851                           
 41852                           ;adc.c: 52: adc_channel &= 0x0F;
 41853  00954A  0E0F               	movlw	15
 41854  00954C  0100               	movlb	0	; () banked
 41855  00954E  1764               	andwf	ADC_Read@adc_channel& (0+255),f,b
 41856                           
 41857                           ;adc.c: 53: ADCON0 &= 0x00000001;
 41858  009550  0E01               	movlw	1
 41859  009552  16C2               	andwf	4034,f,c	;volatile
 41860                           
 41861                           ;adc.c: 54: PORTA = (adc_channel << 1);
 41862  009554  5164               	movf	ADC_Read@adc_channel& (0+255),w,b
 41863  009556  2564               	addwf	ADC_Read@adc_channel& (0+255),w,b
 41864  009558  6E80               	movwf	3968,c	;volatile
 41865                           
 41866                           ; BSR set to: 0
 41867                           ;adc.c: 56: _delay((unsigned long)((20)*(20000000/4000000.0)));
 41868  00955A  0E21               	movlw	33
 41869  00955C                     u67097:
 41870  00955C  2EE8               	decfsz	wreg,f,c
 41871  00955E  D7FE               	bra	u67097
 41872  009560  F000               	nop	
 41873                           
 41874                           ;adc.c: 57: GO_nDONE = 1;
 41875  009562  82C2               	bsf	4034,1,c	;volatile
 41876  009564  B2C2               	btfsc	4034,1,c	;volatile
 41877  009566  D7FE               	goto	l94
 41878                           
 41879                           ;adc.c: 59: return ((ADRESH<<8)+ADRESL);
 41880  009568  50C4               	movf	4036,w,c	;volatile
 41881  00956A  0100               	movlb	0	; () banked
 41882  00956C  6F63               	movwf	(??_ADC_Read+1)& (0+255),b
 41883  00956E  6B62               	clrf	??_ADC_Read& (0+255),b
 41884  009570  50C3               	movf	4035,w,c	;volatile
 41885  009572  2562               	addwf	??_ADC_Read& (0+255),w,b
 41886  009574  6F60               	movwf	?_ADC_Read& (0+255),b
 41887  009576  0E00               	movlw	0
 41888  009578  2163               	addwfc	(??_ADC_Read+1)& (0+255),w,b
 41889  00957A  6F61               	movwf	(?_ADC_Read+1)& (0+255),b
 41890  00957C  0012               	return	
 41891  00957E                     __end_of_ADC_Read:
 41892                           	opt stack 0
 41893                           tblptru	equ	0xFF8
 41894                           tblptrh	equ	0xFF7
 41895                           tblptrl	equ	0xFF6
 41896                           tablat	equ	0xFF5
 41897                           prodh	equ	0xFF4
 41898                           prodl	equ	0xFF3
 41899                           intcon	equ	0xFF2
 41900                           intcon2	equ	0xFF1
 41901                           indf0	equ	0xFEF
 41902                           postinc0	equ	0xFEE
 41903                           postdec0	equ	0xFED
 41904                           fsr0h	equ	0xFEA
 41905                           fsr0l	equ	0xFE9
 41906                           wreg	equ	0xFE8
 41907                           postinc1	equ	0xFE6
 41908                           postdec1	equ	0xFE5
 41909                           plusw1	equ	0xFE3
 41910                           fsr1h	equ	0xFE2
 41911                           fsr1l	equ	0xFE1
 41912                           indf2	equ	0xFDF
 41913                           postinc2	equ	0xFDE
 41914                           postdec2	equ	0xFDD
 41915                           plusw2	equ	0xFDB
 41916                           fsr2h	equ	0xFDA
 41917                           fsr2l	equ	0xFD9
 41918                           status	equ	0xFD8
 41919                           
 41920 ;; *************** function _clear_row2 *****************
 41921 ;; Defined at:
 41922 ;;		line 79 in file "menu.c"
 41923 ;; Parameters:    Size  Location     Type
 41924 ;;		None
 41925 ;; Auto vars:     Size  Location     Type
 41926 ;;		None
 41927 ;; Return value:  Size  Location     Type
 41928 ;;                  1    wreg      void 
 41929 ;; Registers used:
 41930 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 41931 ;; Tracked objects:
 41932 ;;		On entry : 0/0
 41933 ;;		On exit  : 0/0
 41934 ;;		Unchanged: 0/0
 41935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 41936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41940 ;;Total ram usage:        0 bytes
 41941 ;; Hardware stack levels used:    1
 41942 ;; Hardware stack levels required when called:    8
 41943 ;; This function calls:
 41944 ;;		_Lcd_Print_String
 41945 ;;		_Lcd_Set_Cursor
 41946 ;; This function is called by:
 41947 ;;		_Function_A_1
 41948 ;;		_Function_A_2
 41949 ;;		_Function_A_3
 41950 ;;		_Function_A
 41951 ;;		_Function_B
 41952 ;;		_Function_C_1
 41953 ;;		_Function_C_2
 41954 ;;		_Function_C_3
 41955 ;;		_Function_C
 41956 ;;		_Function_D_1
 41957 ;;		_Function_D_3
 41958 ;;		_Function_D_4
 41959 ;;		_Function_D_5
 41960 ;;		_Function_D
 41961 ;;		_Function_E
 41962 ;;		_Function_F
 41963 ;;		_Function_G_1
 41964 ;;		_Function_G_2
 41965 ;;		_Function_G_3
 41966 ;;		_Function_G_4
 41967 ;;		_Function_G
 41968 ;;		_Function_H
 41969 ;;		_Function_H_1
 41970 ;;		_Function_H_2
 41971 ;;		_Function_H_3
 41972 ;;		_Function_H_4
 41973 ;;		_Function_H_5
 41974 ;;		_Function_H_6_1
 41975 ;;		_Function_H_6_2
 41976 ;;		_Function_H_6
 41977 ;;		_Function_H_7
 41978 ;;		_Function_H_8_1
 41979 ;;		_Function_H_8_2
 41980 ;;		_Function_H_8
 41981 ;;		_Function_H_9_1
 41982 ;;		_Function_H_9_2
 41983 ;;		_Function_H_9_3
 41984 ;;		_Function_H_9_4
 41985 ;;		_Function_H_9
 41986 ;; This function uses a non-reentrant model
 41987 ;;
 41988                           
 41989                           	psect	text122
 41990  0096CE                     __ptext122:
 41991                           	opt stack 0
 41992  0096CE                     _clear_row2:
 41993                           	opt stack 20
 41994                           
 41995                           ;menu.c: 80: Lcd_Set_Cursor(2,1);
 41996                           
 41997                           ; BSR set to: 0
 41998                           ;incstack = 0
 41999  0096CE  0E01               	movlw	1
 42000  0096D0  0100               	movlb	0	; () banked
 42001  0096D2  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 42002  0096D4  0E02               	movlw	2
 42003  0096D6  EC42  F047         	call	_Lcd_Set_Cursor
 42004                           
 42005                           ;menu.c: 81: Lcd_Print_String("                ");
 42006  0096DA  0E64               	movlw	low STR_10
 42007  0096DC  0100               	movlb	0	; () banked
 42008  0096DE  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 42009  0096E0  0EFD               	movlw	high STR_10
 42010  0096E2  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 42011  0096E4  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 42012                           
 42013                           ;menu.c: 82: Lcd_Set_Cursor(2,1);
 42014  0096E8  0E01               	movlw	1
 42015  0096EA  0100               	movlb	0	; () banked
 42016  0096EC  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 42017  0096EE  0E02               	movlw	2
 42018  0096F0  EC42  F047         	call	_Lcd_Set_Cursor
 42019  0096F4  0012               	return		;funcret
 42020  0096F6                     __end_of_clear_row2:
 42021                           	opt stack 0
 42022                           tblptru	equ	0xFF8
 42023                           tblptrh	equ	0xFF7
 42024                           tblptrl	equ	0xFF6
 42025                           tablat	equ	0xFF5
 42026                           prodh	equ	0xFF4
 42027                           prodl	equ	0xFF3
 42028                           intcon	equ	0xFF2
 42029                           intcon2	equ	0xFF1
 42030                           indf0	equ	0xFEF
 42031                           postinc0	equ	0xFEE
 42032                           postdec0	equ	0xFED
 42033                           fsr0h	equ	0xFEA
 42034                           fsr0l	equ	0xFE9
 42035                           wreg	equ	0xFE8
 42036                           postinc1	equ	0xFE6
 42037                           postdec1	equ	0xFE5
 42038                           plusw1	equ	0xFE3
 42039                           fsr1h	equ	0xFE2
 42040                           fsr1l	equ	0xFE1
 42041                           indf2	equ	0xFDF
 42042                           postinc2	equ	0xFDE
 42043                           postdec2	equ	0xFDD
 42044                           plusw2	equ	0xFDB
 42045                           fsr2h	equ	0xFDA
 42046                           fsr2l	equ	0xFD9
 42047                           status	equ	0xFD8
 42048                           
 42049 ;; *************** function _clear_row1 *****************
 42050 ;; Defined at:
 42051 ;;		line 72 in file "menu.c"
 42052 ;; Parameters:    Size  Location     Type
 42053 ;;		None
 42054 ;; Auto vars:     Size  Location     Type
 42055 ;;		None
 42056 ;; Return value:  Size  Location     Type
 42057 ;;                  1    wreg      void 
 42058 ;; Registers used:
 42059 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 42060 ;; Tracked objects:
 42061 ;;		On entry : 0/0
 42062 ;;		On exit  : 0/0
 42063 ;;		Unchanged: 0/0
 42064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42069 ;;Total ram usage:        0 bytes
 42070 ;; Hardware stack levels used:    1
 42071 ;; Hardware stack levels required when called:    8
 42072 ;; This function calls:
 42073 ;;		_Lcd_Print_String
 42074 ;;		_Lcd_Set_Cursor
 42075 ;; This function is called by:
 42076 ;;		_exitFunction
 42077 ;;		_exitSave
 42078 ;;		_exitLoad
 42079 ;;		_eepromExit
 42080 ;;		_Function_A_1
 42081 ;;		_Function_A_2
 42082 ;;		_Function_A_3
 42083 ;;		_Function_C_1
 42084 ;;		_Function_C_2
 42085 ;;		_Function_C_3
 42086 ;;		_Function_D_1
 42087 ;;		_Function_D_3
 42088 ;;		_Function_D_4
 42089 ;;		_Function_D_5
 42090 ;;		_Function_G_1
 42091 ;;		_Function_G_2
 42092 ;;		_Function_G_3
 42093 ;;		_Function_G_4
 42094 ;;		_Function_H_4
 42095 ;;		_Function_H_5
 42096 ;;		_Function_H_6_1
 42097 ;;		_Function_H_6_2
 42098 ;;		_Function_H_7
 42099 ;;		_Function_H_8_1
 42100 ;;		_Function_H_9_1
 42101 ;;		_Function_H_9_2
 42102 ;;		_Function_H_9_3
 42103 ;;		_Function_H_9_4
 42104 ;;		_Function_H_9
 42105 ;; This function uses a non-reentrant model
 42106 ;;
 42107                           
 42108                           	psect	text123
 42109  0096F6                     __ptext123:
 42110                           	opt stack 0
 42111  0096F6                     _clear_row1:
 42112                           	opt stack 20
 42113                           
 42114                           ;menu.c: 73: Lcd_Set_Cursor(1,1);
 42115                           
 42116                           ;incstack = 0
 42117  0096F6  0E01               	movlw	1
 42118  0096F8  0100               	movlb	0	; () banked
 42119  0096FA  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 42120  0096FC  0E01               	movlw	1
 42121  0096FE  EC42  F047         	call	_Lcd_Set_Cursor
 42122                           
 42123                           ;menu.c: 74: Lcd_Print_String("                ");
 42124  009702  0E64               	movlw	low STR_10
 42125  009704  0100               	movlb	0	; () banked
 42126  009706  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 42127  009708  0EFD               	movlw	high STR_10
 42128  00970A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 42129  00970C  ECD9  F041         	call	_Lcd_Print_String	;wreg free
 42130                           
 42131                           ;menu.c: 75: Lcd_Set_Cursor(1,1);
 42132  009710  0E01               	movlw	1
 42133  009712  0100               	movlb	0	; () banked
 42134  009714  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 42135  009716  0E01               	movlw	1
 42136  009718  EC42  F047         	call	_Lcd_Set_Cursor
 42137  00971C  0012               	return		;funcret
 42138  00971E                     __end_of_clear_row1:
 42139                           	opt stack 0
 42140                           tblptru	equ	0xFF8
 42141                           tblptrh	equ	0xFF7
 42142                           tblptrl	equ	0xFF6
 42143                           tablat	equ	0xFF5
 42144                           prodh	equ	0xFF4
 42145                           prodl	equ	0xFF3
 42146                           intcon	equ	0xFF2
 42147                           intcon2	equ	0xFF1
 42148                           indf0	equ	0xFEF
 42149                           postinc0	equ	0xFEE
 42150                           postdec0	equ	0xFED
 42151                           fsr0h	equ	0xFEA
 42152                           fsr0l	equ	0xFE9
 42153                           wreg	equ	0xFE8
 42154                           postinc1	equ	0xFE6
 42155                           postdec1	equ	0xFE5
 42156                           plusw1	equ	0xFE3
 42157                           fsr1h	equ	0xFE2
 42158                           fsr1l	equ	0xFE1
 42159                           indf2	equ	0xFDF
 42160                           postinc2	equ	0xFDE
 42161                           postdec2	equ	0xFDD
 42162                           plusw2	equ	0xFDB
 42163                           fsr2h	equ	0xFDA
 42164                           fsr2l	equ	0xFD9
 42165                           status	equ	0xFD8
 42166                           
 42167 ;; *************** function _Lcd_Set_Cursor *****************
 42168 ;; Defined at:
 42169 ;;		line 66 in file "lcd.c"
 42170 ;; Parameters:    Size  Location     Type
 42171 ;;  a               1    wreg     unsigned char 
 42172 ;;  b               1    3[BANK0 ] unsigned char 
 42173 ;; Auto vars:     Size  Location     Type
 42174 ;;  a               1    4[BANK0 ] unsigned char 
 42175 ;;  temp            1    7[BANK0 ] unsigned char 
 42176 ;;  y               1    6[BANK0 ] unsigned char 
 42177 ;;  z               1    5[BANK0 ] unsigned char 
 42178 ;; Return value:  Size  Location     Type
 42179 ;;                  1    wreg      void 
 42180 ;; Registers used:
 42181 ;;		wreg, status,2, status,0, cstack
 42182 ;; Tracked objects:
 42183 ;;		On entry : 0/0
 42184 ;;		On exit  : 0/0
 42185 ;;		Unchanged: 0/0
 42186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42187 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42188 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42190 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42191 ;;Total ram usage:        5 bytes
 42192 ;; Hardware stack levels used:    1
 42193 ;; Hardware stack levels required when called:    7
 42194 ;; This function calls:
 42195 ;;		_Lcd_Cmd
 42196 ;; This function is called by:
 42197 ;;		_clear_row1
 42198 ;;		_clear_row2
 42199 ;;		_setControllerNumbers
 42200 ;;		_menu_lcd
 42201 ;;		_Function_C_2
 42202 ;;		_Function_C_3
 42203 ;;		_Function_D_2
 42204 ;;		_Function_E_1
 42205 ;;		_Function_E_2
 42206 ;;		_Function_F
 42207 ;;		_Function_H_2
 42208 ;;		_Function_H_3
 42209 ;; This function uses a non-reentrant model
 42210 ;;
 42211                           
 42212                           	psect	text124
 42213  008E84                     __ptext124:
 42214                           	opt stack 0
 42215  008E84                     _Lcd_Set_Cursor:
 42216                           	opt stack 20
 42217                           
 42218                           ;incstack = 0
 42219                           ;Lcd_Set_Cursor@a stored from wreg
 42220  008E84  0100               	movlb	0	; () banked
 42221  008E86  6F64               	movwf	Lcd_Set_Cursor@a& (0+255),b
 42222                           
 42223                           ;lcd.c: 69: TMR2ON = 0;
 42224  008E88  94CA               	bcf	4042,2,c	;volatile
 42225                           
 42226                           ;lcd.c: 70: PORTC &= 0xF0;
 42227  008E8A  0EF0               	movlw	240
 42228  008E8C  1682               	andwf	3970,f,c	;volatile
 42229                           
 42230                           ;lcd.c: 72: char temp,z,y;
 42231                           ;lcd.c: 73: if(a== 1)
 42232  008E8E  0100               	movlb	0	; () banked
 42233  008E90  0564               	decf	Lcd_Set_Cursor@a& (0+255),w,b
 42234  008E92  A4D8               	btfss	status,2,c
 42235  008E94  D011               	goto	l40
 42236                           
 42237                           ; BSR set to: 0
 42238                           ;lcd.c: 74: {
 42239                           ;lcd.c: 75: temp = 0x80 + b - 1;
 42240  008E96  5163               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 42241  008E98  0F7F               	addlw	127
 42242  008E9A  6F67               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 42243                           
 42244                           ;lcd.c: 76: z = temp>>4;
 42245  008E9C  3967               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 42246  008E9E  0B0F               	andlw	15
 42247  008EA0  6F65               	movwf	Lcd_Set_Cursor@z& (0+255),b
 42248                           
 42249                           ;lcd.c: 77: y = temp & 0x0F;
 42250  008EA2  5167               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 42251  008EA4  0B0F               	andlw	15
 42252  008EA6  6F66               	movwf	Lcd_Set_Cursor@y& (0+255),b
 42253                           
 42254                           ; BSR set to: 0
 42255                           ;lcd.c: 78: Lcd_Cmd(z);
 42256  008EA8  5165               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 42257  008EAA  ECA3  F04B         	call	_Lcd_Cmd
 42258                           
 42259                           ;lcd.c: 79: Lcd_Cmd(y);
 42260  008EAE  0100               	movlb	0	; () banked
 42261  008EB0  5166               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 42262  008EB2  ECA3  F04B         	call	_Lcd_Cmd
 42263                           
 42264                           ;lcd.c: 80: }
 42265  008EB6  D015               	goto	l42
 42266  008EB8                     l40:
 42267                           
 42268                           ;lcd.c: 81: else if(a== 2)
 42269  008EB8  0E02               	movlw	2
 42270  008EBA  0100               	movlb	0	; () banked
 42271  008EBC  1964               	xorwf	Lcd_Set_Cursor@a& (0+255),w,b
 42272  008EBE  A4D8               	btfss	status,2,c
 42273  008EC0  D010               	goto	l42
 42274                           
 42275                           ; BSR set to: 0
 42276                           ;lcd.c: 82: {
 42277                           ;lcd.c: 83: temp = 0xC0 + b - 1;
 42278  008EC2  5163               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 42279  008EC4  0FBF               	addlw	191
 42280  008EC6  6F67               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 42281                           
 42282                           ;lcd.c: 84: z = temp>>4;
 42283  008EC8  3967               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 42284  008ECA  0B0F               	andlw	15
 42285  008ECC  6F65               	movwf	Lcd_Set_Cursor@z& (0+255),b
 42286                           
 42287                           ;lcd.c: 85: y = temp & 0x0F;
 42288  008ECE  5167               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 42289  008ED0  0B0F               	andlw	15
 42290  008ED2  6F66               	movwf	Lcd_Set_Cursor@y& (0+255),b
 42291                           
 42292                           ; BSR set to: 0
 42293                           ;lcd.c: 86: Lcd_Cmd(z);
 42294  008ED4  5165               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 42295  008ED6  ECA3  F04B         	call	_Lcd_Cmd
 42296                           
 42297                           ;lcd.c: 87: Lcd_Cmd(y);
 42298  008EDA  0100               	movlb	0	; () banked
 42299  008EDC  5166               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 42300  008EDE  ECA3  F04B         	call	_Lcd_Cmd
 42301  008EE2                     l42:
 42302                           
 42303                           ;lcd.c: 88: }
 42304                           ;lcd.c: 91: TMR2ON = 1;
 42305  008EE2  84CA               	bsf	4042,2,c	;volatile
 42306  008EE4  0012               	return		;funcret
 42307  008EE6                     __end_of_Lcd_Set_Cursor:
 42308                           	opt stack 0
 42309                           tblptru	equ	0xFF8
 42310                           tblptrh	equ	0xFF7
 42311                           tblptrl	equ	0xFF6
 42312                           tablat	equ	0xFF5
 42313                           prodh	equ	0xFF4
 42314                           prodl	equ	0xFF3
 42315                           intcon	equ	0xFF2
 42316                           intcon2	equ	0xFF1
 42317                           indf0	equ	0xFEF
 42318                           postinc0	equ	0xFEE
 42319                           postdec0	equ	0xFED
 42320                           fsr0h	equ	0xFEA
 42321                           fsr0l	equ	0xFE9
 42322                           wreg	equ	0xFE8
 42323                           postinc1	equ	0xFE6
 42324                           postdec1	equ	0xFE5
 42325                           plusw1	equ	0xFE3
 42326                           fsr1h	equ	0xFE2
 42327                           fsr1l	equ	0xFE1
 42328                           indf2	equ	0xFDF
 42329                           postinc2	equ	0xFDE
 42330                           postdec2	equ	0xFDD
 42331                           plusw2	equ	0xFDB
 42332                           fsr2h	equ	0xFDA
 42333                           fsr2l	equ	0xFD9
 42334                           status	equ	0xFD8
 42335                           
 42336 ;; *************** function _Lcd_Print_String *****************
 42337 ;; Defined at:
 42338 ;;		line 128 in file "lcd.c"
 42339 ;; Parameters:    Size  Location     Type
 42340 ;;  a               2    8[BANK0 ] PTR unsigned char 
 42341 ;;		 -> STR_75(16), STR_74(12), STR_73(10), STR_72(12), 
 42342 ;;		 -> STR_71(10), STR_70(12), STR_69(10), STR_68(12), 
 42343 ;;		 -> STR_67(10), STR_66(12), STR_65(13), STR_64(15), 
 42344 ;;		 -> STR_63(15), STR_62(16), STR_60(14), STR_58(12), 
 42345 ;;		 -> STR_57(15), STR_55(14), STR_53(15), STR_52(17), 
 42346 ;;		 -> STR_51(9), STR_50(10), STR_49(13), STR_48(13), 
 42347 ;;		 -> STR_47(17), STR_46(14), STR_45(14), STR_42(15), 
 42348 ;;		 -> STR_40(16), STR_39(17), STR_38(13), STR_37(17), 
 42349 ;;		 -> STR_36(8), STR_35(8), STR_34(12), STR_33(17), 
 42350 ;;		 -> STR_32(15), STR_31(14), STR_30(17), STR_29(15), 
 42351 ;;		 -> STR_28(17), STR_27(14), STR_26(16), STR_25(14), 
 42352 ;;		 -> STR_24(12), LCD_STRINGS(2397), STR_23(13), STR_22(17), 
 42353 ;;		 -> STR_21(16), STR_20(5), STR_19(11), STR_18(11), 
 42354 ;;		 -> STR_17(11), STR_16(10), STR_15(11), STR_14(11), 
 42355 ;;		 -> STR_13(11), STR_12(10), string2display(5), STR_11(17), 
 42356 ;;		 -> STR_10(17), 
 42357 ;; Auto vars:     Size  Location     Type
 42358 ;;  i               2   12[BANK0 ] int 
 42359 ;; Return value:  Size  Location     Type
 42360 ;;                  1    wreg      void 
 42361 ;; Registers used:
 42362 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 42363 ;; Tracked objects:
 42364 ;;		On entry : 0/0
 42365 ;;		On exit  : 0/0
 42366 ;;		Unchanged: 0/0
 42367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42368 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42369 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42370 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42371 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42372 ;;Total ram usage:        6 bytes
 42373 ;; Hardware stack levels used:    1
 42374 ;; Hardware stack levels required when called:    7
 42375 ;; This function calls:
 42376 ;;		_Lcd_Print_Char
 42377 ;; This function is called by:
 42378 ;;		_clear_row1
 42379 ;;		_clear_row2
 42380 ;;		_setControllerNumbers
 42381 ;;		_exitFunction
 42382 ;;		_exitSave
 42383 ;;		_exitLoad
 42384 ;;		_eepromExit
 42385 ;;		_menu_lcd
 42386 ;;		_Function_A_1
 42387 ;;		_Function_A_2
 42388 ;;		_Function_A_3
 42389 ;;		_Function_A
 42390 ;;		_Function_B
 42391 ;;		_Function_C_1
 42392 ;;		_Function_C_2
 42393 ;;		_Function_C_3
 42394 ;;		_Function_C
 42395 ;;		_Function_D_1
 42396 ;;		_Function_D_2
 42397 ;;		_Function_D_3
 42398 ;;		_Function_D_4
 42399 ;;		_Function_D_5
 42400 ;;		_Function_D
 42401 ;;		_Function_E_1
 42402 ;;		_Function_E_2
 42403 ;;		_Function_E
 42404 ;;		_Function_F
 42405 ;;		_Function_G_1
 42406 ;;		_Function_G_2
 42407 ;;		_Function_G_3
 42408 ;;		_Function_G_4
 42409 ;;		_Function_G
 42410 ;;		_Function_H
 42411 ;;		_Function_H_1
 42412 ;;		_Function_H_2
 42413 ;;		_Function_H_3
 42414 ;;		_Function_H_4
 42415 ;;		_Function_H_5
 42416 ;;		_Function_H_6_1
 42417 ;;		_Function_H_6_2
 42418 ;;		_Function_H_6
 42419 ;;		_Function_H_7
 42420 ;;		_Function_H_8_1
 42421 ;;		_Function_H_8_2
 42422 ;;		_Function_H_8
 42423 ;;		_Function_H_9_1
 42424 ;;		_Function_H_9_2
 42425 ;;		_Function_H_9_3
 42426 ;;		_Function_H_9_4
 42427 ;;		_Function_H_9
 42428 ;; This function uses a non-reentrant model
 42429 ;;
 42430                           
 42431                           	psect	text125
 42432  0083B2                     __ptext125:
 42433                           	opt stack 0
 42434  0083B2                     _Lcd_Print_String:
 42435                           	opt stack 20
 42436                           
 42437                           ;lcd.c: 131: TMR2ON = 0;
 42438                           
 42439                           ;incstack = 0
 42440  0083B2  94CA               	bcf	4042,2,c	;volatile
 42441                           
 42442                           ;lcd.c: 132: PORTC &= 0xF0;
 42443  0083B4  0EF0               	movlw	240
 42444  0083B6  1682               	andwf	3970,f,c	;volatile
 42445                           
 42446                           ;lcd.c: 134: int i;
 42447                           ;lcd.c: 135: for(i=0;a[i]!='\0';i++)
 42448  0083B8  0E00               	movlw	0
 42449  0083BA  0100               	movlb	0	; () banked
 42450  0083BC  6F6D               	movwf	(Lcd_Print_String@i+1)& (0+255),b
 42451  0083BE  0E00               	movlw	0
 42452  0083C0  6F6C               	movwf	Lcd_Print_String@i& (0+255),b
 42453  0083C2  D01D               	goto	l58
 42454  0083C4                     
 42455                           ;lcd.c: 136: Lcd_Print_Char(a[i]);
 42456                           
 42457                           ; BSR set to: 0
 42458  0083C4  0100               	movlb	0	; () banked
 42459  0083C6  516C               	movf	Lcd_Print_String@i& (0+255),w,b
 42460  0083C8  2568               	addwf	Lcd_Print_String@a& (0+255),w,b
 42461  0083CA  6F6A               	movwf	??_Lcd_Print_String& (0+255),b
 42462  0083CC  516D               	movf	(Lcd_Print_String@i+1)& (0+255),w,b
 42463  0083CE  2169               	addwfc	(Lcd_Print_String@a+1)& (0+255),w,b
 42464  0083D0  6F6B               	movwf	(??_Lcd_Print_String+1)& (0+255),b
 42465  0083D2  C06A  FFF6         	movff	??_Lcd_Print_String,tblptrl
 42466  0083D6  C06B  FFF7         	movff	??_Lcd_Print_String+1,tblptrh
 42467  0083DA  0E00               	movlw	low (__mediumconst shr (0+16))
 42468  0083DC  6EF8               	movwf	tblptru,c
 42469  0083DE  0E0C               	movlw	(high __ramtop+-1)
 42470  0083E0  64F7               	cpfsgt	tblptrh,c
 42471  0083E2  D003               	bra	u54797
 42472  0083E4  0008               	tblrd		*
 42473  0083E6  50F5               	movf	tablat,w,c
 42474  0083E8  D005               	bra	u54790
 42475  0083EA                     u54797:
 42476  0083EA  CFF6 FFE9          	movff	tblptrl,fsr0l
 42477  0083EE  CFF7 FFEA          	movff	tblptrh,fsr0h
 42478  0083F2  50EF               	movf	indf0,w,c
 42479  0083F4                     u54790:
 42480  0083F4  EC1B  F042         	call	_Lcd_Print_Char
 42481  0083F8  0100               	movlb	0	; () banked
 42482  0083FA  4B6C               	infsnz	Lcd_Print_String@i& (0+255),f,b
 42483  0083FC  2B6D               	incf	(Lcd_Print_String@i+1)& (0+255),f,b
 42484  0083FE                     l58:
 42485                           
 42486                           ; BSR set to: 0
 42487                           
 42488                           ; BSR set to: 0
 42489  0083FE  516C               	movf	Lcd_Print_String@i& (0+255),w,b
 42490  008400  2568               	addwf	Lcd_Print_String@a& (0+255),w,b
 42491  008402  6F6A               	movwf	??_Lcd_Print_String& (0+255),b
 42492  008404  516D               	movf	(Lcd_Print_String@i+1)& (0+255),w,b
 42493  008406  2169               	addwfc	(Lcd_Print_String@a+1)& (0+255),w,b
 42494  008408  6F6B               	movwf	(??_Lcd_Print_String+1)& (0+255),b
 42495  00840A  C06A  FFF6         	movff	??_Lcd_Print_String,tblptrl
 42496  00840E  C06B  FFF7         	movff	??_Lcd_Print_String+1,tblptrh
 42497  008412  0E00               	movlw	low (__mediumconst shr (0+16))
 42498  008414  6EF8               	movwf	tblptru,c
 42499  008416  0E0C               	movlw	(high __ramtop+-1)
 42500  008418  64F7               	cpfsgt	tblptrh,c
 42501  00841A  D003               	bra	u54807
 42502  00841C  0008               	tblrd		*
 42503  00841E  50F5               	movf	tablat,w,c
 42504  008420  D005               	bra	u54800
 42505  008422                     u54807:
 42506  008422  CFF6 FFE9          	movff	tblptrl,fsr0l
 42507  008426  CFF7 FFEA          	movff	tblptrh,fsr0h
 42508  00842A  50EF               	movf	indf0,w,c
 42509  00842C                     u54800:
 42510  00842C  0900               	iorlw	0
 42511  00842E  A4D8               	btfss	status,2,c
 42512  008430  D7C9               	goto	l59
 42513                           
 42514                           ;lcd.c: 139: TMR2ON = 1;
 42515  008432  84CA               	bsf	4042,2,c	;volatile
 42516  008434  0012               	return		;funcret
 42517  008436                     __end_of_Lcd_Print_String:
 42518                           	opt stack 0
 42519                           tblptru	equ	0xFF8
 42520                           tblptrh	equ	0xFF7
 42521                           tblptrl	equ	0xFF6
 42522                           tablat	equ	0xFF5
 42523                           prodh	equ	0xFF4
 42524                           prodl	equ	0xFF3
 42525                           intcon	equ	0xFF2
 42526                           intcon2	equ	0xFF1
 42527                           indf0	equ	0xFEF
 42528                           postinc0	equ	0xFEE
 42529                           postdec0	equ	0xFED
 42530                           fsr0h	equ	0xFEA
 42531                           fsr0l	equ	0xFE9
 42532                           wreg	equ	0xFE8
 42533                           postinc1	equ	0xFE6
 42534                           postdec1	equ	0xFE5
 42535                           plusw1	equ	0xFE3
 42536                           fsr1h	equ	0xFE2
 42537                           fsr1l	equ	0xFE1
 42538                           indf2	equ	0xFDF
 42539                           postinc2	equ	0xFDE
 42540                           postdec2	equ	0xFDD
 42541                           plusw2	equ	0xFDB
 42542                           fsr2h	equ	0xFDA
 42543                           fsr2l	equ	0xFD9
 42544                           status	equ	0xFD8
 42545                           
 42546 ;; *************** function _Lcd_Print_Char *****************
 42547 ;; Defined at:
 42548 ;;		line 112 in file "lcd.c"
 42549 ;; Parameters:    Size  Location     Type
 42550 ;;  data            1    wreg     unsigned char 
 42551 ;; Auto vars:     Size  Location     Type
 42552 ;;  data            1    3[BANK0 ] unsigned char 
 42553 ;;  i               2    6[BANK0 ] int 
 42554 ;;  i               2    4[BANK0 ] int 
 42555 ;;  Upper_Nibble    1    2[BANK0 ] unsigned char 
 42556 ;;  Lower_Nibble    1    1[BANK0 ] unsigned char 
 42557 ;; Return value:  Size  Location     Type
 42558 ;;                  1    wreg      void 
 42559 ;; Registers used:
 42560 ;;		wreg, status,2, status,0, cstack
 42561 ;; Tracked objects:
 42562 ;;		On entry : 0/0
 42563 ;;		On exit  : 0/0
 42564 ;;		Unchanged: 0/0
 42565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42567 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42569 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42570 ;;Total ram usage:        7 bytes
 42571 ;; Hardware stack levels used:    1
 42572 ;; Hardware stack levels required when called:    6
 42573 ;; This function calls:
 42574 ;;		_Lcd_SetBit
 42575 ;; This function is called by:
 42576 ;;		_Lcd_Print_String
 42577 ;; This function uses a non-reentrant model
 42578 ;;
 42579                           
 42580                           	psect	text126
 42581  008436                     __ptext126:
 42582                           	opt stack 0
 42583  008436                     _Lcd_Print_Char:
 42584                           	opt stack 20
 42585                           
 42586                           ;incstack = 0
 42587                           ;Lcd_Print_Char@data stored from wreg
 42588  008436  0100               	movlb	0	; () banked
 42589  008438  6F63               	movwf	Lcd_Print_Char@data& (0+255),b
 42590                           
 42591                           ;lcd.c: 114: char Lower_Nibble,Upper_Nibble;
 42592                           ;lcd.c: 115: Lower_Nibble = data&0x0F;
 42593  00843A  0100               	movlb	0	; () banked
 42594  00843C  5163               	movf	Lcd_Print_Char@data& (0+255),w,b
 42595  00843E  0B0F               	andlw	15
 42596  008440  6F61               	movwf	Lcd_Print_Char@Lower_Nibble& (0+255),b
 42597                           
 42598                           ;lcd.c: 116: Upper_Nibble = data&0xF0;
 42599  008442  5163               	movf	Lcd_Print_Char@data& (0+255),w,b
 42600  008444  0BF0               	andlw	240
 42601  008446  6F62               	movwf	Lcd_Print_Char@Upper_Nibble& (0+255),b
 42602                           
 42603                           ; BSR set to: 0
 42604                           ;lcd.c: 117: RE0 = 1;
 42605  008448  8084               	bsf	3972,0,c	;volatile
 42606                           
 42607                           ; BSR set to: 0
 42608                           ;lcd.c: 118: Lcd_SetBit(Upper_Nibble>>4);
 42609  00844A  3962               	swapf	Lcd_Print_Char@Upper_Nibble& (0+255),w,b
 42610  00844C  0B0F               	andlw	15
 42611  00844E  EC24  F04B         	call	_Lcd_SetBit
 42612                           
 42613                           ;lcd.c: 119: RE1 = 1;
 42614  008452  8284               	bsf	3972,1,c	;volatile
 42615                           
 42616                           ;lcd.c: 120: for(int i=2130483; i<=0; i--) __nop();
 42617  008454  0E82               	movlw	130
 42618  008456  0100               	movlb	0	; () banked
 42619  008458  6F65               	movwf	(Lcd_Print_Char@i+1)& (0+255),b
 42620  00845A  0E33               	movlw	51
 42621  00845C  6F64               	movwf	Lcd_Print_Char@i& (0+255),b
 42622                           
 42623                           ; BSR set to: 0
 42624  00845E  BF65               	btfsc	(Lcd_Print_Char@i+1)& (0+255),7,b
 42625  008460  D003               	goto	l51
 42626  008462  5165               	movf	(Lcd_Print_Char@i+1)& (0+255),w,b
 42627  008464  E10D               	bnz	l52
 42628  008466  D009               	goto	L26
 42629  008468                     l51:
 42630                           
 42631                           ; BSR set to: 0
 42632  008468  F000               	nop	
 42633  00846A  0100               	movlb	0	; () banked
 42634  00846C  0764               	decf	Lcd_Print_Char@i& (0+255),f,b
 42635  00846E  A0D8               	btfss	status,0,c
 42636  008470  0765               	decf	(Lcd_Print_Char@i+1)& (0+255),f,b
 42637                           
 42638                           ; BSR set to: 0
 42639  008472  BF65               	btfsc	(Lcd_Print_Char@i+1)& (0+255),7,b
 42640  008474  D7F9               	goto	l51
 42641  008476  5165               	movf	(Lcd_Print_Char@i+1)& (0+255),w,b
 42642  008478  E103               	bnz	u52210
 42643  00847A                     L26:
 42644  00847A  0564               	decf	Lcd_Print_Char@i& (0+255),w,b
 42645  00847C  A0D8               	btfss	status,0,c
 42646  00847E  D7F4               	goto	l51
 42647  008480                     u52210:
 42648  008480                     l52:
 42649                           
 42650                           ; BSR set to: 0
 42651                           ;lcd.c: 121: RE1 = 0;
 42652  008480  9284               	bcf	3972,1,c	;volatile
 42653                           
 42654                           ; BSR set to: 0
 42655                           ;lcd.c: 122: Lcd_SetBit(Lower_Nibble);
 42656  008482  5161               	movf	Lcd_Print_Char@Lower_Nibble& (0+255),w,b
 42657  008484  EC24  F04B         	call	_Lcd_SetBit
 42658                           
 42659                           ;lcd.c: 123: RE1 = 1;
 42660  008488  8284               	bsf	3972,1,c	;volatile
 42661                           
 42662                           ;lcd.c: 124: for(int i=2130483; i<=0; i--) __nop();
 42663  00848A  0E82               	movlw	130
 42664  00848C  0100               	movlb	0	; () banked
 42665  00848E  6F67               	movwf	(Lcd_Print_Char@i_59+1)& (0+255),b
 42666  008490  0E33               	movlw	51
 42667  008492  6F66               	movwf	Lcd_Print_Char@i_59& (0+255),b
 42668                           
 42669                           ; BSR set to: 0
 42670  008494  BF67               	btfsc	(Lcd_Print_Char@i_59+1)& (0+255),7,b
 42671  008496  D003               	goto	l53
 42672  008498  5167               	movf	(Lcd_Print_Char@i_59+1)& (0+255),w,b
 42673  00849A  E10D               	bnz	l54
 42674  00849C  D009               	goto	L27
 42675  00849E                     l53:
 42676                           
 42677                           ; BSR set to: 0
 42678  00849E  F000               	nop	
 42679  0084A0  0100               	movlb	0	; () banked
 42680  0084A2  0766               	decf	Lcd_Print_Char@i_59& (0+255),f,b
 42681  0084A4  A0D8               	btfss	status,0,c
 42682  0084A6  0767               	decf	(Lcd_Print_Char@i_59+1)& (0+255),f,b
 42683                           
 42684                           ; BSR set to: 0
 42685  0084A8  BF67               	btfsc	(Lcd_Print_Char@i_59+1)& (0+255),7,b
 42686  0084AA  D7F9               	goto	l53
 42687  0084AC  5167               	movf	(Lcd_Print_Char@i_59+1)& (0+255),w,b
 42688  0084AE  E103               	bnz	u52230
 42689  0084B0                     L27:
 42690  0084B0  0566               	decf	Lcd_Print_Char@i_59& (0+255),w,b
 42691  0084B2  A0D8               	btfss	status,0,c
 42692  0084B4  D7F4               	goto	l53
 42693  0084B6                     u52230:
 42694  0084B6                     l54:
 42695                           
 42696                           ; BSR set to: 0
 42697                           ;lcd.c: 125: RE1 = 0;
 42698  0084B6  9284               	bcf	3972,1,c	;volatile
 42699                           
 42700                           ; BSR set to: 0
 42701  0084B8  0012               	return		;funcret
 42702  0084BA                     __end_of_Lcd_Print_Char:
 42703                           	opt stack 0
 42704                           tblptru	equ	0xFF8
 42705                           tblptrh	equ	0xFF7
 42706                           tblptrl	equ	0xFF6
 42707                           tablat	equ	0xFF5
 42708                           prodh	equ	0xFF4
 42709                           prodl	equ	0xFF3
 42710                           intcon	equ	0xFF2
 42711                           intcon2	equ	0xFF1
 42712                           indf0	equ	0xFEF
 42713                           postinc0	equ	0xFEE
 42714                           postdec0	equ	0xFED
 42715                           fsr0h	equ	0xFEA
 42716                           fsr0l	equ	0xFE9
 42717                           wreg	equ	0xFE8
 42718                           postinc1	equ	0xFE6
 42719                           postdec1	equ	0xFE5
 42720                           plusw1	equ	0xFE3
 42721                           fsr1h	equ	0xFE2
 42722                           fsr1l	equ	0xFE1
 42723                           indf2	equ	0xFDF
 42724                           postinc2	equ	0xFDE
 42725                           postdec2	equ	0xFDD
 42726                           plusw2	equ	0xFDB
 42727                           fsr2h	equ	0xFDA
 42728                           fsr2l	equ	0xFD9
 42729                           status	equ	0xFD8
 42730                           
 42731 ;; *************** function _initializeSaveSlotsOnce *****************
 42732 ;; Defined at:
 42733 ;;		line 28 in file "eeprom.c"
 42734 ;; Parameters:    Size  Location     Type
 42735 ;;		None
 42736 ;; Auto vars:     Size  Location     Type
 42737 ;;  initializeSl    1   84[BANK0 ] unsigned char 
 42738 ;; Return value:  Size  Location     Type
 42739 ;;                  1    wreg      void 
 42740 ;; Registers used:
 42741 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 42742 ;; Tracked objects:
 42743 ;;		On entry : 0/0
 42744 ;;		On exit  : 0/0
 42745 ;;		Unchanged: 0/0
 42746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42748 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42750 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42751 ;;Total ram usage:        1 bytes
 42752 ;; Hardware stack levels used:    1
 42753 ;; Hardware stack levels required when called:    7
 42754 ;; This function calls:
 42755 ;;		_Busy_eep
 42756 ;;		_Read_b_eep
 42757 ;;		_Write_b_eep
 42758 ;;		_saveToEEPROM
 42759 ;; This function is called by:
 42760 ;;		_main
 42761 ;; This function uses a non-reentrant model
 42762 ;;
 42763                           
 42764                           	psect	text127
 42765  009238                     __ptext127:
 42766                           	opt stack 0
 42767  009238                     _initializeSaveSlotsOnce:
 42768                           	opt stack 23
 42769                           
 42770                           ;eeprom.c: 30: unsigned char initializeSlotsOnce = Read_b_eep(0x01);
 42771                           
 42772                           ; BSR set to: 0
 42773                           ;incstack = 0
 42774  009238  0E00               	movlw	0
 42775  00923A  0100               	movlb	0	; () banked
 42776  00923C  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
 42777  00923E  0E01               	movlw	1
 42778  009240  6F60               	movwf	Read_b_eep@badd& (0+255),b
 42779  009242  ECF6  F04B         	call	_Read_b_eep	;wreg free
 42780  009246  0100               	movlb	0	; () banked
 42781  009248  6FB4               	movwf	initializeSaveSlotsOnce@initializeSlotsOnce& (0+255),b
 42782                           
 42783                           ; BSR set to: 0
 42784                           ;eeprom.c: 32: if (initializeSlotsOnce == 0x24) {
 42785  00924A  0E24               	movlw	36
 42786  00924C  19B4               	xorwf	initializeSaveSlotsOnce@initializeSlotsOnce& (0+255),w,b
 42787  00924E  A4D8               	btfss	status,2,c
 42788  009250  0012               	return	
 42789                           
 42790                           ; BSR set to: 0
 42791                           ;eeprom.c: 33: saveToEEPROM(SLOT1);
 42792  009252  0E01               	movlw	1
 42793  009254  EC59  F027         	call	_saveToEEPROM
 42794                           
 42795                           ;eeprom.c: 34: saveToEEPROM(SLOT2);
 42796  009258  0E02               	movlw	2
 42797  00925A  EC59  F027         	call	_saveToEEPROM
 42798                           
 42799                           ;eeprom.c: 35: saveToEEPROM(SLOT3);
 42800  00925E  0E03               	movlw	3
 42801  009260  EC59  F027         	call	_saveToEEPROM
 42802                           
 42803                           ;eeprom.c: 36: saveToEEPROM(SLOT4);
 42804  009264  0E04               	movlw	4
 42805  009266  EC59  F027         	call	_saveToEEPROM
 42806                           
 42807                           ;eeprom.c: 37: (Busy_eep(), Write_b_eep(0x01,0x48));
 42808  00926A  EC5F  F04C         	call	_Busy_eep	;wreg free
 42809  00926E  0E00               	movlw	0
 42810  009270  0100               	movlb	0	; () banked
 42811  009272  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 42812  009274  0E01               	movlw	1
 42813  009276  6F60               	movwf	Write_b_eep@badd& (0+255),b
 42814  009278  0E48               	movlw	72
 42815  00927A  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 42816  00927C  ECD1  F049         	call	_Write_b_eep	;wreg free
 42817  009280  0012               	return	
 42818  009282                     __end_of_initializeSaveSlotsOnce:
 42819                           	opt stack 0
 42820                           tblptru	equ	0xFF8
 42821                           tblptrh	equ	0xFF7
 42822                           tblptrl	equ	0xFF6
 42823                           tablat	equ	0xFF5
 42824                           prodh	equ	0xFF4
 42825                           prodl	equ	0xFF3
 42826                           intcon	equ	0xFF2
 42827                           intcon2	equ	0xFF1
 42828                           indf0	equ	0xFEF
 42829                           postinc0	equ	0xFEE
 42830                           postdec0	equ	0xFED
 42831                           fsr0h	equ	0xFEA
 42832                           fsr0l	equ	0xFE9
 42833                           wreg	equ	0xFE8
 42834                           postinc1	equ	0xFE6
 42835                           postdec1	equ	0xFE5
 42836                           plusw1	equ	0xFE3
 42837                           fsr1h	equ	0xFE2
 42838                           fsr1l	equ	0xFE1
 42839                           indf2	equ	0xFDF
 42840                           postinc2	equ	0xFDE
 42841                           postdec2	equ	0xFDD
 42842                           plusw2	equ	0xFDB
 42843                           fsr2h	equ	0xFDA
 42844                           fsr2l	equ	0xFD9
 42845                           status	equ	0xFD8
 42846                           
 42847 ;; *************** function _saveToEEPROM *****************
 42848 ;; Defined at:
 42849 ;;		line 194 in file "eeprom.c"
 42850 ;; Parameters:    Size  Location     Type
 42851 ;;  slotNumber      1    wreg     unsigned char 
 42852 ;; Auto vars:     Size  Location     Type
 42853 ;;  slotNumber      1   81[BANK0 ] unsigned char 
 42854 ;;  byte_count      2   82[BANK0 ] unsigned int 
 42855 ;;  to_save        75    4[BANK0 ] unsigned char [75]
 42856 ;;  baseAddress     2   79[BANK0 ] unsigned int 
 42857 ;; Return value:  Size  Location     Type
 42858 ;;                  1    wreg      void 
 42859 ;; Registers used:
 42860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 42861 ;; Tracked objects:
 42862 ;;		On entry : 0/0
 42863 ;;		On exit  : 0/0
 42864 ;;		Unchanged: 0/0
 42865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42867 ;;      Locals:         0      80       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42869 ;;      Totals:         0      80       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42870 ;;Total ram usage:       80 bytes
 42871 ;; Hardware stack levels used:    1
 42872 ;; Hardware stack levels required when called:    6
 42873 ;; This function calls:
 42874 ;;		_Busy_eep
 42875 ;;		_Write_b_eep
 42876 ;; This function is called by:
 42877 ;;		_Function_G_1
 42878 ;;		_initializeSaveSlotsOnce
 42879 ;; This function uses a non-reentrant model
 42880 ;;
 42881                           
 42882                           	psect	text128
 42883  004EB2                     __ptext128:
 42884                           	opt stack 0
 42885  004EB2                     _saveToEEPROM:
 42886                           	opt stack 21
 42887                           
 42888                           ;incstack = 0
 42889                           ;saveToEEPROM@slotNumber stored from wreg
 42890  004EB2  0100               	movlb	0	; () banked
 42891  004EB4  6FB1               	movwf	saveToEEPROM@slotNumber& (0+255),b
 42892                           
 42893                           ;eeprom.c: 196: unsigned int baseAddress = 0;
 42894  004EB6  0E00               	movlw	0
 42895  004EB8  0100               	movlb	0	; () banked
 42896  004EBA  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 42897  004EBC  0E00               	movlw	0
 42898  004EBE  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 42899                           
 42900                           ; BSR set to: 0
 42901                           ;eeprom.c: 199: if (slotNumber == SLOT1) {baseAddress = 128;}
 42902  004EC0  05B1               	decf	saveToEEPROM@slotNumber& (0+255),w,b
 42903  004EC2  A4D8               	btfss	status,2,c
 42904  004EC4  D004               	goto	l4445
 42905                           
 42906                           ; BSR set to: 0
 42907  004EC6  0E00               	movlw	0
 42908  004EC8  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 42909  004ECA  0E80               	movlw	128
 42910  004ECC  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 42911  004ECE                     l4445:
 42912                           
 42913                           ; BSR set to: 0
 42914                           ;eeprom.c: 200: if (slotNumber == SLOT2) {baseAddress = 256;}
 42915                           
 42916                           ; BSR set to: 0
 42917  004ECE  0E02               	movlw	2
 42918  004ED0  19B1               	xorwf	saveToEEPROM@slotNumber& (0+255),w,b
 42919  004ED2  A4D8               	btfss	status,2,c
 42920  004ED4  D004               	goto	l4446
 42921                           
 42922                           ; BSR set to: 0
 42923  004ED6  0E01               	movlw	1
 42924  004ED8  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 42925  004EDA  0E00               	movlw	0
 42926  004EDC  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 42927  004EDE                     l4446:
 42928                           
 42929                           ; BSR set to: 0
 42930                           ;eeprom.c: 201: if (slotNumber == SLOT3) {baseAddress = 384;}
 42931                           
 42932                           ; BSR set to: 0
 42933  004EDE  0E03               	movlw	3
 42934  004EE0  19B1               	xorwf	saveToEEPROM@slotNumber& (0+255),w,b
 42935  004EE2  A4D8               	btfss	status,2,c
 42936  004EE4  D004               	goto	l4447
 42937                           
 42938                           ; BSR set to: 0
 42939  004EE6  0E01               	movlw	1
 42940  004EE8  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 42941  004EEA  0E80               	movlw	128
 42942  004EEC  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 42943  004EEE                     l4447:
 42944                           
 42945                           ; BSR set to: 0
 42946                           ;eeprom.c: 202: if (slotNumber == SLOT4) {baseAddress = 512;}
 42947                           
 42948                           ; BSR set to: 0
 42949  004EEE  0E04               	movlw	4
 42950  004EF0  19B1               	xorwf	saveToEEPROM@slotNumber& (0+255),w,b
 42951  004EF2  A4D8               	btfss	status,2,c
 42952  004EF4  D004               	goto	l4448
 42953                           
 42954                           ; BSR set to: 0
 42955  004EF6  0E02               	movlw	2
 42956  004EF8  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 42957  004EFA  0E00               	movlw	0
 42958  004EFC  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 42959  004EFE                     l4448:
 42960                           
 42961                           ; BSR set to: 0
 42962                           ;eeprom.c: 205: unsigned char to_save[75];
 42963                           ;eeprom.c: 210: to_save[0] = KEYBOARD_MODE;
 42964                           
 42965                           ; BSR set to: 0
 42966  004EFE  C0F2  F064         	movff	_KEYBOARD_MODE,saveToEEPROM@to_save
 42967                           
 42968                           ; BSR set to: 0
 42969                           ;eeprom.c: 211: to_save[1] = which_mode;
 42970  004F02  C0F1  F065         	movff	_which_mode,saveToEEPROM@to_save+1
 42971                           
 42972                           ; BSR set to: 0
 42973                           ;eeprom.c: 212: to_save[2] = which_triad;
 42974  004F06  C0F0  F066         	movff	_which_triad,saveToEEPROM@to_save+2
 42975                           
 42976                           ; BSR set to: 0
 42977                           ;eeprom.c: 213: to_save[3] = which_seventh;
 42978  004F0A  C0EF  F067         	movff	_which_seventh,saveToEEPROM@to_save+3
 42979                           
 42980                           ;eeprom.c: 216: to_save[4] = TRANSPOSE_MODE;
 42981  004F0E  0E00               	movlw	0
 42982  004F10  BC04               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 42983  004F12  0E01               	movlw	1
 42984  004F14  6F68               	movwf	(saveToEEPROM@to_save+4)& (0+255),b
 42985                           
 42986                           ;eeprom.c: 219: to_save[5] = DRUM_MODE;
 42987  004F16  0E00               	movlw	0
 42988  004F18  BA01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 42989  004F1A  0E01               	movlw	1
 42990  004F1C  6F69               	movwf	(saveToEEPROM@to_save+5)& (0+255),b
 42991                           
 42992                           ;eeprom.c: 220: to_save[6] = CONTROL_MODE;
 42993  004F1E  0E00               	movlw	0
 42994  004F20  B801               	btfsc	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 42995  004F22  0E01               	movlw	1
 42996  004F24  6F6A               	movwf	(saveToEEPROM@to_save+6)& (0+255),b
 42997                           
 42998                           ; BSR set to: 0
 42999                           ;eeprom.c: 223: to_save[7] = DRUM_NOTE[0];
 43000  004F26  C1E7  F06B         	movff	_DRUM_NOTE,saveToEEPROM@to_save+7
 43001                           
 43002                           ; BSR set to: 0
 43003                           ;eeprom.c: 224: to_save[8] = DRUM_NOTE[1];
 43004  004F2A  C1E8  F06C         	movff	_DRUM_NOTE+1,saveToEEPROM@to_save+8
 43005                           
 43006                           ; BSR set to: 0
 43007                           ;eeprom.c: 225: to_save[9] = DRUM_NOTE[2];
 43008  004F2E  C1E9  F06D         	movff	_DRUM_NOTE+2,saveToEEPROM@to_save+9
 43009                           
 43010                           ; BSR set to: 0
 43011                           ;eeprom.c: 226: to_save[10] = DRUM_NOTE[3];
 43012  004F32  C1EA  F06E         	movff	_DRUM_NOTE+3,saveToEEPROM@to_save+10
 43013                           
 43014                           ; BSR set to: 0
 43015                           ;eeprom.c: 227: to_save[11] = DRUM_NOTE[4];
 43016  004F36  C1EB  F06F         	movff	_DRUM_NOTE+4,saveToEEPROM@to_save+11
 43017                           
 43018                           ; BSR set to: 0
 43019                           ;eeprom.c: 228: to_save[12] = DRUM_NOTE[5];
 43020  004F3A  C1EC  F070         	movff	_DRUM_NOTE+5,saveToEEPROM@to_save+12
 43021                           
 43022                           ; BSR set to: 0
 43023                           ;eeprom.c: 229: to_save[13] = DRUM_NOTE[6];
 43024  004F3E  C1ED  F071         	movff	_DRUM_NOTE+6,saveToEEPROM@to_save+13
 43025                           
 43026                           ; BSR set to: 0
 43027                           ;eeprom.c: 230: to_save[14] = DRUM_NOTE[7];
 43028  004F42  C1EE  F072         	movff	_DRUM_NOTE+7,saveToEEPROM@to_save+14
 43029                           
 43030                           ; BSR set to: 0
 43031                           ;eeprom.c: 233: to_save[15] = DRUM_CC[0];
 43032  004F46  C0F5  F073         	movff	_DRUM_CC,saveToEEPROM@to_save+15
 43033                           
 43034                           ; BSR set to: 0
 43035                           ;eeprom.c: 234: to_save[16] = DRUM_CC[1];
 43036  004F4A  C0F6  F074         	movff	_DRUM_CC+1,saveToEEPROM@to_save+16
 43037                           
 43038                           ; BSR set to: 0
 43039                           ;eeprom.c: 235: to_save[17] = DRUM_CC[2];
 43040  004F4E  C0F7  F075         	movff	_DRUM_CC+2,saveToEEPROM@to_save+17
 43041                           
 43042                           ; BSR set to: 0
 43043                           ;eeprom.c: 236: to_save[18] = DRUM_CC[3];
 43044  004F52  C0F8  F076         	movff	_DRUM_CC+3,saveToEEPROM@to_save+18
 43045                           
 43046                           ; BSR set to: 0
 43047                           ;eeprom.c: 237: to_save[19] = DRUM_CC[4];
 43048  004F56  C0F9  F077         	movff	_DRUM_CC+4,saveToEEPROM@to_save+19
 43049                           
 43050                           ; BSR set to: 0
 43051                           ;eeprom.c: 238: to_save[20] = DRUM_CC[5];
 43052  004F5A  C0FA  F078         	movff	_DRUM_CC+5,saveToEEPROM@to_save+20
 43053                           
 43054                           ; BSR set to: 0
 43055                           ;eeprom.c: 239: to_save[21] = DRUM_CC[6];
 43056  004F5E  C0FB  F079         	movff	_DRUM_CC+6,saveToEEPROM@to_save+21
 43057                           
 43058                           ; BSR set to: 0
 43059                           ;eeprom.c: 240: to_save[22] = DRUM_CC[7];
 43060  004F62  C0FC  F07A         	movff	_DRUM_CC+7,saveToEEPROM@to_save+22
 43061                           
 43062                           ;eeprom.c: 243: to_save[23] = POT_MODE;
 43063  004F66  0E00               	movlw	0
 43064  004F68  BC05               	btfsc	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 43065  004F6A  0E01               	movlw	1
 43066  004F6C  6F7B               	movwf	(saveToEEPROM@to_save+23)& (0+255),b
 43067                           
 43068                           ; BSR set to: 0
 43069                           ;eeprom.c: 246: to_save[24] = inputPotsArray[0].controller_number;
 43070  004F6E  C289  F07C         	movff	_inputPotsArray+1,saveToEEPROM@to_save+24
 43071                           
 43072                           ; BSR set to: 0
 43073                           ;eeprom.c: 247: to_save[25] = inputPotsArray[0].controller_number_two_byte;
 43074  004F72  C28A  F07D         	movff	_inputPotsArray+2,saveToEEPROM@to_save+25
 43075                           
 43076                           ; BSR set to: 0
 43077                           ;eeprom.c: 249: to_save[26] = inputPotsArray[1].controller_number;
 43078  004F76  C28C  F07E         	movff	_inputPotsArray+4,saveToEEPROM@to_save+26
 43079                           
 43080                           ; BSR set to: 0
 43081                           ;eeprom.c: 250: to_save[27] = inputPotsArray[1].controller_number_two_byte;
 43082  004F7A  C28D  F07F         	movff	_inputPotsArray+5,saveToEEPROM@to_save+27
 43083                           
 43084                           ; BSR set to: 0
 43085                           ;eeprom.c: 252: to_save[28] = inputPotsArray[2].controller_number;
 43086  004F7E  C28F  F080         	movff	_inputPotsArray+7,saveToEEPROM@to_save+28
 43087                           
 43088                           ; BSR set to: 0
 43089                           ;eeprom.c: 253: to_save[29] = inputPotsArray[2].controller_number_two_byte;
 43090  004F82  C290  F081         	movff	_inputPotsArray+8,saveToEEPROM@to_save+29
 43091                           
 43092                           ; BSR set to: 0
 43093                           ;eeprom.c: 255: to_save[30] = inputPotsArray[3].controller_number;
 43094  004F86  C292  F082         	movff	_inputPotsArray+10,saveToEEPROM@to_save+30
 43095                           
 43096                           ; BSR set to: 0
 43097                           ;eeprom.c: 256: to_save[31] = inputPotsArray[3].controller_number_two_byte;
 43098  004F8A  C293  F083         	movff	_inputPotsArray+11,saveToEEPROM@to_save+31
 43099                           
 43100                           ; BSR set to: 0
 43101                           ;eeprom.c: 258: to_save[32] = inputPotsArray[4].controller_number;
 43102  004F8E  C295  F084         	movff	_inputPotsArray+13,saveToEEPROM@to_save+32
 43103                           
 43104                           ; BSR set to: 0
 43105                           ;eeprom.c: 259: to_save[33] = inputPotsArray[4].controller_number_two_byte;
 43106  004F92  C296  F085         	movff	_inputPotsArray+14,saveToEEPROM@to_save+33
 43107                           
 43108                           ; BSR set to: 0
 43109                           ;eeprom.c: 261: to_save[34] = inputPotsArray[5].controller_number;
 43110  004F96  C298  F086         	movff	_inputPotsArray+16,saveToEEPROM@to_save+34
 43111                           
 43112                           ; BSR set to: 0
 43113                           ;eeprom.c: 262: to_save[35] = inputPotsArray[5].controller_number_two_byte;
 43114  004F9A  C299  F087         	movff	_inputPotsArray+17,saveToEEPROM@to_save+35
 43115                           
 43116                           ; BSR set to: 0
 43117                           ;eeprom.c: 264: to_save[36] = inputPotsArray[6].controller_number;
 43118  004F9E  C29B  F088         	movff	_inputPotsArray+19,saveToEEPROM@to_save+36
 43119                           
 43120                           ; BSR set to: 0
 43121                           ;eeprom.c: 265: to_save[37] = inputPotsArray[6].controller_number_two_byte;
 43122  004FA2  C29C  F089         	movff	_inputPotsArray+20,saveToEEPROM@to_save+37
 43123                           
 43124                           ; BSR set to: 0
 43125                           ;eeprom.c: 269: to_save[38] = inputPotsArray[7].controller_number;
 43126  004FA6  C29E  F08A         	movff	_inputPotsArray+22,saveToEEPROM@to_save+38
 43127                           
 43128                           ; BSR set to: 0
 43129                           ;eeprom.c: 270: to_save[39] = inputPotsArray[7].controller_number_two_byte;
 43130  004FAA  C29F  F08B         	movff	_inputPotsArray+23,saveToEEPROM@to_save+39
 43131                           
 43132                           ; BSR set to: 0
 43133                           ;eeprom.c: 272: to_save[40] = inputPotsArray[8].controller_number;
 43134  004FAE  C2A1  F08C         	movff	_inputPotsArray+25,saveToEEPROM@to_save+40
 43135                           
 43136                           ; BSR set to: 0
 43137                           ;eeprom.c: 273: to_save[41] = inputPotsArray[8].controller_number_two_byte;
 43138  004FB2  C2A2  F08D         	movff	_inputPotsArray+26,saveToEEPROM@to_save+41
 43139                           
 43140                           ; BSR set to: 0
 43141                           ;eeprom.c: 275: to_save[42] = inputPotsArray[9].controller_number;
 43142  004FB6  C2A4  F08E         	movff	_inputPotsArray+28,saveToEEPROM@to_save+42
 43143                           
 43144                           ; BSR set to: 0
 43145                           ;eeprom.c: 276: to_save[43] = inputPotsArray[9].controller_number_two_byte;
 43146  004FBA  C2A5  F08F         	movff	_inputPotsArray+29,saveToEEPROM@to_save+43
 43147                           
 43148                           ; BSR set to: 0
 43149                           ;eeprom.c: 278: to_save[44] = inputPotsArray[10].controller_number;
 43150  004FBE  C2A7  F090         	movff	_inputPotsArray+31,saveToEEPROM@to_save+44
 43151                           
 43152                           ; BSR set to: 0
 43153                           ;eeprom.c: 279: to_save[45] = inputPotsArray[10].controller_number_two_byte;
 43154  004FC2  C2A8  F091         	movff	_inputPotsArray+32,saveToEEPROM@to_save+45
 43155                           
 43156                           ; BSR set to: 0
 43157                           ;eeprom.c: 281: to_save[46] = inputPotsArray[11].controller_number;
 43158  004FC6  C2AA  F092         	movff	_inputPotsArray+34,saveToEEPROM@to_save+46
 43159                           
 43160                           ; BSR set to: 0
 43161                           ;eeprom.c: 282: to_save[47] = inputPotsArray[11].controller_number_two_byte;
 43162  004FCA  C2AB  F093         	movff	_inputPotsArray+35,saveToEEPROM@to_save+47
 43163                           
 43164                           ; BSR set to: 0
 43165                           ;eeprom.c: 284: to_save[48] = inputPotsArray[12].controller_number;
 43166  004FCE  C2AD  F094         	movff	_inputPotsArray+37,saveToEEPROM@to_save+48
 43167                           
 43168                           ; BSR set to: 0
 43169                           ;eeprom.c: 285: to_save[49] = inputPotsArray[12].controller_number_two_byte;
 43170  004FD2  C2AE  F095         	movff	_inputPotsArray+38,saveToEEPROM@to_save+49
 43171                           
 43172                           ; BSR set to: 0
 43173                           ;eeprom.c: 287: to_save[50] = inputPotsArray[13].controller_number;
 43174  004FD6  C2B0  F096         	movff	_inputPotsArray+40,saveToEEPROM@to_save+50
 43175                           
 43176                           ; BSR set to: 0
 43177                           ;eeprom.c: 288: to_save[51] = inputPotsArray[13].controller_number_two_byte;
 43178  004FDA  C2B1  F097         	movff	_inputPotsArray+41,saveToEEPROM@to_save+51
 43179                           
 43180                           ; BSR set to: 0
 43181                           ;eeprom.c: 290: to_save[52] = inputPotsArray[14].controller_number;
 43182  004FDE  C2B3  F098         	movff	_inputPotsArray+43,saveToEEPROM@to_save+52
 43183                           
 43184                           ; BSR set to: 0
 43185                           ;eeprom.c: 291: to_save[53] = inputPotsArray[14].controller_number_two_byte;
 43186  004FE2  C2B4  F099         	movff	_inputPotsArray+44,saveToEEPROM@to_save+53
 43187                           
 43188                           ; BSR set to: 0
 43189                           ;eeprom.c: 293: to_save[54] = inputPotsArray[15].controller_number;
 43190  004FE6  C2B6  F09A         	movff	_inputPotsArray+46,saveToEEPROM@to_save+54
 43191                           
 43192                           ; BSR set to: 0
 43193                           ;eeprom.c: 294: to_save[55] = inputPotsArray[15].controller_number_two_byte;
 43194  004FEA  C2B7  F09B         	movff	_inputPotsArray+47,saveToEEPROM@to_save+55
 43195                           
 43196                           ; BSR set to: 0
 43197                           ;eeprom.c: 298: to_save[56] = channel;
 43198  004FEE  C03E  F09C         	movff	_channel,saveToEEPROM@to_save+56
 43199                           
 43200                           ; BSR set to: 0
 43201                           ;eeprom.c: 299: to_save[57] = drumchannel;
 43202  004FF2  C052  F09D         	movff	_drumchannel,saveToEEPROM@to_save+57
 43203                           
 43204                           ; BSR set to: 0
 43205                           ;eeprom.c: 302: to_save[58] = octave;
 43206  004FF6  C050  F09E         	movff	_octave,saveToEEPROM@to_save+58
 43207                           
 43208                           ; BSR set to: 0
 43209                           ;eeprom.c: 303: to_save[59] = semitone;
 43210  004FFA  C03B  F09F         	movff	_semitone,saveToEEPROM@to_save+59
 43211                           
 43212                           ; BSR set to: 0
 43213                           ;eeprom.c: 306: to_save[60] = patch_number;
 43214  004FFE  C0F3  F0A0         	movff	_patch_number,saveToEEPROM@to_save+60
 43215                           
 43216                           ;eeprom.c: 309: to_save[61] = ARPEGGIO_ON;
 43217  005002  0E00               	movlw	0
 43218  005004  B804               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 43219  005006  0E01               	movlw	1
 43220  005008  6FA1               	movwf	(saveToEEPROM@to_save+61)& (0+255),b
 43221                           
 43222                           ; BSR set to: 0
 43223                           ;eeprom.c: 310: to_save[62] = BPM;
 43224  00500A  C0FF  F0A2         	movff	_BPM,saveToEEPROM@to_save+62
 43225                           
 43226                           ; BSR set to: 0
 43227                           ;eeprom.c: 311: to_save[63] = OCTAVES;
 43228  00500E  C04E  F0A3         	movff	_OCTAVES,saveToEEPROM@to_save+63
 43229                           
 43230                           ; BSR set to: 0
 43231                           ;eeprom.c: 312: to_save[64] = ARPEGGIO_TYPE;
 43232  005012  C035  F0A4         	movff	_ARPEGGIO_TYPE,saveToEEPROM@to_save+64
 43233                           
 43234                           ; BSR set to: 0
 43235                           ;eeprom.c: 313: to_save[65] = NOTE_LENGTH_PULSES;
 43236  005016  C04D  F0A5         	movff	_NOTE_LENGTH_PULSES,saveToEEPROM@to_save+65
 43237                           
 43238                           ;eeprom.c: 314: to_save[66] = LATCH;
 43239  00501A  0E00               	movlw	0
 43240  00501C  B204               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 43241  00501E  0E01               	movlw	1
 43242  005020  6FA6               	movwf	(saveToEEPROM@to_save+66)& (0+255),b
 43243                           
 43244                           ;eeprom.c: 315: to_save[67] = AUTO_LATCH;
 43245  005022  0E00               	movlw	0
 43246  005024  BE03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 43247  005026  0E01               	movlw	1
 43248  005028  6FA7               	movwf	(saveToEEPROM@to_save+67)& (0+255),b
 43249                           
 43250                           ;eeprom.c: 316: to_save[68] = UN_LATCH_MODE;
 43251  00502A  0E00               	movlw	0
 43252  00502C  B004               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 43253  00502E  0E01               	movlw	1
 43254  005030  6FA8               	movwf	(saveToEEPROM@to_save+68)& (0+255),b
 43255                           
 43256                           ;eeprom.c: 317: to_save[69] = AUTO_RANDOMIZE;
 43257  005032  0E00               	movlw	0
 43258  005034  BA03               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 43259  005036  0E01               	movlw	1
 43260  005038  6FA9               	movwf	(saveToEEPROM@to_save+69)& (0+255),b
 43261                           
 43262                           ;eeprom.c: 318: to_save[70] = skipFirstLast;
 43263  00503A  0E00               	movlw	0
 43264  00503C  B803               	btfsc	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 43265  00503E  0E01               	movlw	1
 43266  005040  6FAA               	movwf	(saveToEEPROM@to_save+70)& (0+255),b
 43267                           
 43268                           ;eeprom.c: 319: to_save[71] = LAST_NOTE_MODE_KEY_PRESS;
 43269  005042  0E00               	movlw	0
 43270  005044  B403               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 43271  005046  0E01               	movlw	1
 43272  005048  6FAB               	movwf	(saveToEEPROM@to_save+71)& (0+255),b
 43273                           
 43274                           ;eeprom.c: 320: to_save[72] = LAST_NOTE_MODE_KEY_RELEASE;
 43275  00504A  0E00               	movlw	0
 43276  00504C  B203               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 43277  00504E  0E01               	movlw	1
 43278  005050  6FAC               	movwf	(saveToEEPROM@to_save+72)& (0+255),b
 43279                           
 43280                           ;eeprom.c: 321: to_save[73] = LAST_NOTE_MODE_TRANSPOSE;
 43281  005052  0E00               	movlw	0
 43282  005054  B003               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 43283  005056  0E01               	movlw	1
 43284  005058  6FAD               	movwf	(saveToEEPROM@to_save+73)& (0+255),b
 43285                           
 43286                           ;eeprom.c: 322: to_save[74] = LAST_NOTE_MODE_RESET;
 43287  00505A  0E00               	movlw	0
 43288  00505C  BE02               	btfsc	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 43289  00505E  0E01               	movlw	1
 43290  005060  6FAE               	movwf	(saveToEEPROM@to_save+74)& (0+255),b
 43291                           
 43292                           ;eeprom.c: 325: for (unsigned int byte_count = 0; byte_count < 75; byte_count++){
 43293  005062  0E00               	movlw	0
 43294  005064  6FB3               	movwf	(saveToEEPROM@byte_count+1)& (0+255),b
 43295  005066  0E00               	movlw	0
 43296  005068  6FB2               	movwf	saveToEEPROM@byte_count& (0+255),b
 43297  00506A                     l31476:
 43298                           
 43299                           ; BSR set to: 0
 43300  00506A  51B3               	movf	(saveToEEPROM@byte_count+1)& (0+255),w,b
 43301  00506C  E11B               	bnz	l4451
 43302  00506E  0E4B               	movlw	75
 43303  005070  5DB2               	subwf	saveToEEPROM@byte_count& (0+255),w,b
 43304  005072  B0D8               	btfsc	status,0,c
 43305  005074  0012               	return	
 43306                           
 43307                           ; BSR set to: 0
 43308                           ;eeprom.c: 326: (Busy_eep(), Write_b_eep((byte_count + baseAddress),to_save[byte_count])
      +                          );
 43309                           
 43310                           ; BSR set to: 0
 43311                           
 43312                           ; BSR set to: 0
 43313  005076  EC5F  F04C         	call	_Busy_eep	;wreg free
 43314  00507A  0100               	movlb	0	; () banked
 43315  00507C  51AF               	movf	saveToEEPROM@baseAddress& (0+255),w,b
 43316  00507E  25B2               	addwf	saveToEEPROM@byte_count& (0+255),w,b
 43317  005080  6F60               	movwf	Write_b_eep@badd& (0+255),b
 43318  005082  51B0               	movf	(saveToEEPROM@baseAddress+1)& (0+255),w,b
 43319  005084  21B3               	addwfc	(saveToEEPROM@byte_count+1)& (0+255),w,b
 43320  005086  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 43321  005088  0E64               	movlw	low saveToEEPROM@to_save
 43322  00508A  25B2               	addwf	saveToEEPROM@byte_count& (0+255),w,b
 43323  00508C  6ED9               	movwf	fsr2l,c
 43324  00508E  0E00               	movlw	high saveToEEPROM@to_save
 43325  005090  21B3               	addwfc	(saveToEEPROM@byte_count+1)& (0+255),w,b
 43326  005092  6EDA               	movwf	fsr2h,c
 43327  005094  50DF               	movf	indf2,w,c
 43328  005096  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 43329  005098  ECD1  F049         	call	_Write_b_eep	;wreg free
 43330  00509C  0100               	movlb	0	; () banked
 43331  00509E  4BB2               	infsnz	saveToEEPROM@byte_count& (0+255),f,b
 43332  0050A0  2BB3               	incf	(saveToEEPROM@byte_count+1)& (0+255),f,b
 43333  0050A2  D7E3               	goto	l31476
 43334  0050A4                     l4451:
 43335                           
 43336                           ; BSR set to: 0
 43337  0050A4  0012               	return		;funcret
 43338  0050A6                     __end_of_saveToEEPROM:
 43339                           	opt stack 0
 43340                           tblptru	equ	0xFF8
 43341                           tblptrh	equ	0xFF7
 43342                           tblptrl	equ	0xFF6
 43343                           tablat	equ	0xFF5
 43344                           prodh	equ	0xFF4
 43345                           prodl	equ	0xFF3
 43346                           intcon	equ	0xFF2
 43347                           intcon2	equ	0xFF1
 43348                           indf0	equ	0xFEF
 43349                           postinc0	equ	0xFEE
 43350                           postdec0	equ	0xFED
 43351                           fsr0h	equ	0xFEA
 43352                           fsr0l	equ	0xFE9
 43353                           wreg	equ	0xFE8
 43354                           postinc1	equ	0xFE6
 43355                           postdec1	equ	0xFE5
 43356                           plusw1	equ	0xFE3
 43357                           fsr1h	equ	0xFE2
 43358                           fsr1l	equ	0xFE1
 43359                           indf2	equ	0xFDF
 43360                           postinc2	equ	0xFDE
 43361                           postdec2	equ	0xFDD
 43362                           plusw2	equ	0xFDB
 43363                           fsr2h	equ	0xFDA
 43364                           fsr2l	equ	0xFD9
 43365                           status	equ	0xFD8
 43366                           
 43367 ;; *************** function _Write_b_eep *****************
 43368 ;; Defined at:
 43369 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\EEP\write_B.c"
 43370 ;; Parameters:    Size  Location     Type
 43371 ;;  badd            2    0[BANK0 ] unsigned int 
 43372 ;;  bdat            1    2[BANK0 ] unsigned char 
 43373 ;; Auto vars:     Size  Location     Type
 43374 ;;  GIE_BIT_VAL     1    3[BANK0 ] unsigned char 
 43375 ;; Return value:  Size  Location     Type
 43376 ;;                  1    wreg      void 
 43377 ;; Registers used:
 43378 ;;		wreg, status,2, status,0
 43379 ;; Tracked objects:
 43380 ;;		On entry : 0/0
 43381 ;;		On exit  : 0/0
 43382 ;;		Unchanged: 0/0
 43383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43384 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43385 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43387 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43388 ;;Total ram usage:        4 bytes
 43389 ;; Hardware stack levels used:    1
 43390 ;; Hardware stack levels required when called:    5
 43391 ;; This function calls:
 43392 ;;		Nothing
 43393 ;; This function is called by:
 43394 ;;		_Function_D_2
 43395 ;;		_Function_G_1
 43396 ;;		_Function_G_2
 43397 ;;		_Function_G_3
 43398 ;;		_Function_G_4
 43399 ;;		_initializeSaveSlotsOnce
 43400 ;;		_saveToEEPROM
 43401 ;; This function uses a non-reentrant model
 43402 ;;
 43403                           
 43404                           	psect	text129
 43405  0093A2                     __ptext129:
 43406                           	opt stack 0
 43407  0093A2                     _Write_b_eep:
 43408                           	opt stack 22
 43409                           
 43410                           ; BSR set to: 0
 43411                           ;incstack = 0
 43412  0093A2  0E00               	movlw	0
 43413  0093A4  0100               	movlb	0	; () banked
 43414  0093A6  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
 43415                           
 43416                           ; BSR set to: 0
 43417  0093A8  5161               	movf	(Write_b_eep@badd+1)& (0+255),w,b
 43418  0093AA  0B03               	andlw	3
 43419  0093AC  6EAA               	movwf	4010,c	;volatile
 43420                           
 43421                           ; BSR set to: 0
 43422  0093AE  C060  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 43423                           
 43424                           ; BSR set to: 0
 43425  0093B2  C062  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 43426                           
 43427                           ; BSR set to: 0
 43428  0093B6  9EA6               	bcf	4006,7,c	;volsfr
 43429                           
 43430                           ; BSR set to: 0
 43431  0093B8  9CA6               	bcf	4006,6,c	;volsfr
 43432                           
 43433                           ; BSR set to: 0
 43434  0093BA  84A6               	bsf	4006,2,c	;volsfr
 43435                           
 43436                           ; BSR set to: 0
 43437  0093BC  0E00               	movlw	0
 43438  0093BE  BEF2               	btfsc	intcon,7,c	;volatile
 43439  0093C0  0E01               	movlw	1
 43440  0093C2  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
 43441                           
 43442                           ; BSR set to: 0
 43443  0093C4  9EF2               	bcf	intcon,7,c	;volatile
 43444                           
 43445                           ; BSR set to: 0
 43446  0093C6  0E55               	movlw	85
 43447  0093C8  6EA7               	movwf	4007,c	;volsfr
 43448                           
 43449                           ; BSR set to: 0
 43450  0093CA  0EAA               	movlw	170
 43451  0093CC  6EA7               	movwf	4007,c	;volsfr
 43452                           
 43453                           ; BSR set to: 0
 43454  0093CE  82A6               	bsf	4006,1,c	;volsfr
 43455  0093D0                     
 43456                           ; BSR set to: 0
 43457  0093D0  B2A6               	btfsc	4006,1,c	;volsfr
 43458  0093D2  D7FE               	goto	l5620
 43459  0093D4  0100               	movlb	0	; () banked
 43460  0093D6  B163               	btfsc	Write_b_eep@GIE_BIT_VAL& (0+255),0,b
 43461  0093D8  D002               	bra	u56625
 43462  0093DA  9EF2               	bcf	intcon,7,c	;volatile
 43463  0093DC  D001               	bra	u56626
 43464  0093DE                     u56625:
 43465  0093DE  8EF2               	bsf	intcon,7,c	;volatile
 43466  0093E0                     u56626:
 43467  0093E0  94A6               	bcf	4006,2,c	;volsfr
 43468  0093E2  0012               	return		;funcret
 43469  0093E4                     __end_of_Write_b_eep:
 43470                           	opt stack 0
 43471                           tblptru	equ	0xFF8
 43472                           tblptrh	equ	0xFF7
 43473                           tblptrl	equ	0xFF6
 43474                           tablat	equ	0xFF5
 43475                           prodh	equ	0xFF4
 43476                           prodl	equ	0xFF3
 43477                           intcon	equ	0xFF2
 43478                           intcon2	equ	0xFF1
 43479                           indf0	equ	0xFEF
 43480                           postinc0	equ	0xFEE
 43481                           postdec0	equ	0xFED
 43482                           fsr0h	equ	0xFEA
 43483                           fsr0l	equ	0xFE9
 43484                           wreg	equ	0xFE8
 43485                           postinc1	equ	0xFE6
 43486                           postdec1	equ	0xFE5
 43487                           plusw1	equ	0xFE3
 43488                           fsr1h	equ	0xFE2
 43489                           fsr1l	equ	0xFE1
 43490                           indf2	equ	0xFDF
 43491                           postinc2	equ	0xFDE
 43492                           postdec2	equ	0xFDD
 43493                           plusw2	equ	0xFDB
 43494                           fsr2h	equ	0xFDA
 43495                           fsr2l	equ	0xFD9
 43496                           status	equ	0xFD8
 43497                           
 43498 ;; *************** function _Busy_eep *****************
 43499 ;; Defined at:
 43500 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\EEP\busy_eep.c"
 43501 ;; Parameters:    Size  Location     Type
 43502 ;;		None
 43503 ;; Auto vars:     Size  Location     Type
 43504 ;;		None
 43505 ;; Return value:  Size  Location     Type
 43506 ;;                  1    wreg      void 
 43507 ;; Registers used:
 43508 ;;		None
 43509 ;; Tracked objects:
 43510 ;;		On entry : 0/0
 43511 ;;		On exit  : 0/0
 43512 ;;		Unchanged: 0/0
 43513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43518 ;;Total ram usage:        0 bytes
 43519 ;; Hardware stack levels used:    1
 43520 ;; Hardware stack levels required when called:    5
 43521 ;; This function calls:
 43522 ;;		Nothing
 43523 ;; This function is called by:
 43524 ;;		_Function_D_2
 43525 ;;		_Function_G_1
 43526 ;;		_Function_G_2
 43527 ;;		_Function_G_3
 43528 ;;		_Function_G_4
 43529 ;;		_initializeSaveSlotsOnce
 43530 ;;		_saveToEEPROM
 43531 ;; This function uses a non-reentrant model
 43532 ;;
 43533                           
 43534                           	psect	text130
 43535  0098BE                     __ptext130:
 43536                           	opt stack 0
 43537  0098BE                     _Busy_eep:
 43538                           	opt stack 22
 43539                           
 43540                           ;incstack = 0
 43541  0098BE  B2A6               	btfsc	4006,1,c	;volsfr
 43542  0098C0  D7FE               	goto	_Busy_eep
 43543  0098C2  0012               	return	
 43544  0098C4                     __end_of_Busy_eep:
 43545                           	opt stack 0
 43546                           tblptru	equ	0xFF8
 43547                           tblptrh	equ	0xFF7
 43548                           tblptrl	equ	0xFF6
 43549                           tablat	equ	0xFF5
 43550                           prodh	equ	0xFF4
 43551                           prodl	equ	0xFF3
 43552                           intcon	equ	0xFF2
 43553                           intcon2	equ	0xFF1
 43554                           indf0	equ	0xFEF
 43555                           postinc0	equ	0xFEE
 43556                           postdec0	equ	0xFED
 43557                           fsr0h	equ	0xFEA
 43558                           fsr0l	equ	0xFE9
 43559                           wreg	equ	0xFE8
 43560                           postinc1	equ	0xFE6
 43561                           postdec1	equ	0xFE5
 43562                           plusw1	equ	0xFE3
 43563                           fsr1h	equ	0xFE2
 43564                           fsr1l	equ	0xFE1
 43565                           indf2	equ	0xFDF
 43566                           postinc2	equ	0xFDE
 43567                           postdec2	equ	0xFDD
 43568                           plusw2	equ	0xFDB
 43569                           fsr2h	equ	0xFDA
 43570                           fsr2l	equ	0xFD9
 43571                           status	equ	0xFD8
 43572                           
 43573 ;; *************** function _Read_b_eep *****************
 43574 ;; Defined at:
 43575 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\EEP\read_B.c"
 43576 ;; Parameters:    Size  Location     Type
 43577 ;;  badd            2    0[BANK0 ] unsigned int 
 43578 ;; Auto vars:     Size  Location     Type
 43579 ;;		None
 43580 ;; Return value:  Size  Location     Type
 43581 ;;                  1    wreg      unsigned char 
 43582 ;; Registers used:
 43583 ;;		wreg, status,2, status,0
 43584 ;; Tracked objects:
 43585 ;;		On entry : 0/0
 43586 ;;		On exit  : 0/0
 43587 ;;		Unchanged: 0/0
 43588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43589 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43592 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43593 ;;Total ram usage:        2 bytes
 43594 ;; Hardware stack levels used:    1
 43595 ;; Hardware stack levels required when called:    5
 43596 ;; This function calls:
 43597 ;;		Nothing
 43598 ;; This function is called by:
 43599 ;;		_initializeSaveSlotsOnce
 43600 ;;		_selectSlotOnBoot
 43601 ;;		_loadFromEEPROM
 43602 ;;		_main
 43603 ;; This function uses a non-reentrant model
 43604 ;;
 43605                           
 43606                           	psect	text131
 43607  0097EC                     __ptext131:
 43608                           	opt stack 0
 43609  0097EC                     _Read_b_eep:
 43610                           	opt stack 23
 43611                           
 43612                           ;incstack = 0
 43613  0097EC  0100               	movlb	0	; () banked
 43614  0097EE  5161               	movf	(Read_b_eep@badd+1)& (0+255),w,b
 43615  0097F0  0B03               	andlw	3
 43616  0097F2  6EAA               	movwf	4010,c	;volatile
 43617                           
 43618                           ; BSR set to: 0
 43619  0097F4  C060  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 43620                           
 43621                           ; BSR set to: 0
 43622  0097F8  9CA6               	bcf	4006,6,c	;volsfr
 43623                           
 43624                           ; BSR set to: 0
 43625  0097FA  9EA6               	bcf	4006,7,c	;volsfr
 43626                           
 43627                           ; BSR set to: 0
 43628  0097FC  80A6               	bsf	4006,0,c	;volsfr
 43629                           
 43630                           ; BSR set to: 0
 43631  0097FE  F000               	nop	
 43632  009800  F000               	nop	
 43633  009802  50A8               	movf	4008,w,c	;volatile
 43634  009804  0012               	return	
 43635  009806                     __end_of_Read_b_eep:
 43636                           	opt stack 0
 43637                           tblptru	equ	0xFF8
 43638                           tblptrh	equ	0xFF7
 43639                           tblptrl	equ	0xFF6
 43640                           tablat	equ	0xFF5
 43641                           prodh	equ	0xFF4
 43642                           prodl	equ	0xFF3
 43643                           intcon	equ	0xFF2
 43644                           intcon2	equ	0xFF1
 43645                           indf0	equ	0xFEF
 43646                           postinc0	equ	0xFEE
 43647                           postdec0	equ	0xFED
 43648                           fsr0h	equ	0xFEA
 43649                           fsr0l	equ	0xFE9
 43650                           wreg	equ	0xFE8
 43651                           postinc1	equ	0xFE6
 43652                           postdec1	equ	0xFE5
 43653                           plusw1	equ	0xFE3
 43654                           fsr1h	equ	0xFE2
 43655                           fsr1l	equ	0xFE1
 43656                           indf2	equ	0xFDF
 43657                           postinc2	equ	0xFDE
 43658                           postdec2	equ	0xFDD
 43659                           plusw2	equ	0xFDB
 43660                           fsr2h	equ	0xFDA
 43661                           fsr2l	equ	0xFD9
 43662                           status	equ	0xFD8
 43663                           
 43664 ;; *************** function _initializeMenuArray *****************
 43665 ;; Defined at:
 43666 ;;		line 27 in file "menu.c"
 43667 ;; Parameters:    Size  Location     Type
 43668 ;;		None
 43669 ;; Auto vars:     Size  Location     Type
 43670 ;;  i               1    8[BANK0 ] unsigned char 
 43671 ;;  NumberOfElem    1    7[BANK0 ] unsigned char 
 43672 ;; Return value:  Size  Location     Type
 43673 ;;                  1    wreg      void 
 43674 ;; Registers used:
 43675 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 43676 ;; Tracked objects:
 43677 ;;		On entry : 0/0
 43678 ;;		On exit  : 0/0
 43679 ;;		Unchanged: 0/0
 43680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43682 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43683 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43684 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43685 ;;Total ram usage:        3 bytes
 43686 ;; Hardware stack levels used:    1
 43687 ;; Hardware stack levels required when called:    6
 43688 ;; This function calls:
 43689 ;;		___wmul
 43690 ;; This function is called by:
 43691 ;;		_main
 43692 ;; This function uses a non-reentrant model
 43693 ;;
 43694                           
 43695                           	psect	text132
 43696  004CB0                     __ptext132:
 43697                           	opt stack 0
 43698  004CB0                     _initializeMenuArray:
 43699                           	opt stack 24
 43700                           
 43701                           ;menu.c: 30: unsigned char NumberOfElements = sizeof(menuArray)/sizeof(menuArray[0]);
 43702                           
 43703                           ;incstack = 0
 43704  004CB0  0E23               	movlw	35
 43705  004CB2  0100               	movlb	0	; () banked
 43706  004CB4  6F67               	movwf	initializeMenuArray@NumberOfElements& (0+255),b
 43707                           
 43708                           ;menu.c: 33: for(unsigned char i = 1;i<NumberOfElements;i++) {
 43709  004CB6  0E01               	movlw	1
 43710  004CB8  6F68               	movwf	initializeMenuArray@i& (0+255),b
 43711  004CBA  D03C               	goto	l3439
 43712  004CBC                     
 43713                           ; BSR set to: 0
 43714                           ;menu.c: 34: menuArray[i].address = menuArray[i-1].address + menuArray[i-1].number;
 43715                           
 43716                           ; BSR set to: 0
 43717  004CBC  5168               	movf	initializeMenuArray@i& (0+255),w,b
 43718  004CBE  0D03               	mullw	3
 43719  004CC0  0E01               	movlw	1
 43720  004CC2  26F3               	addwf	prodl,f,c
 43721  004CC4  0E00               	movlw	0
 43722  004CC6  22F4               	addwfc	prodh,f,c
 43723  004CC8  0E00               	movlw	low _menuArray
 43724  004CCA  24F3               	addwf	prodl,w,c
 43725  004CCC  6ED9               	movwf	fsr2l,c
 43726  004CCE  0E03               	movlw	high _menuArray
 43727  004CD0  20F4               	addwfc	prodh,w,c
 43728  004CD2  6EDA               	movwf	fsr2h,c
 43729  004CD4  0EFF               	movlw	255
 43730  004CD6  2568               	addwf	initializeMenuArray@i& (0+255),w,b
 43731  004CD8  6F60               	movwf	___wmul@multiplier& (0+255),b
 43732  004CDA  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 43733  004CDC  0EFF               	movlw	255
 43734  004CDE  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 43735  004CE0  0E00               	movlw	0
 43736  004CE2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 43737  004CE4  0E03               	movlw	3
 43738  004CE6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 43739  004CE8  EC8F  F04B         	call	___wmul	;wreg free
 43740  004CEC  0E00               	movlw	low _menuArray
 43741  004CEE  0100               	movlb	0	; () banked
 43742  004CF0  2560               	addwf	?___wmul& (0+255),w,b
 43743  004CF2  6EE9               	movwf	fsr0l,c
 43744  004CF4  0E03               	movlw	high _menuArray
 43745  004CF6  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 43746  004CF8  6EEA               	movwf	fsr0h,c
 43747  004CFA  50EF               	movf	indf0,w,c
 43748  004CFC  6F66               	movwf	??_initializeMenuArray& (0+255),b
 43749  004CFE  0EFF               	movlw	255
 43750  004D00  2568               	addwf	initializeMenuArray@i& (0+255),w,b
 43751  004D02  6F60               	movwf	___wmul@multiplier& (0+255),b
 43752  004D04  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 43753  004D06  0EFF               	movlw	255
 43754  004D08  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 43755  004D0A  0E00               	movlw	0
 43756  004D0C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 43757  004D0E  0E03               	movlw	3
 43758  004D10  6F62               	movwf	___wmul@multiplicand& (0+255),b
 43759  004D12  EC8F  F04B         	call	___wmul	;wreg free
 43760  004D16  0E01               	movlw	1
 43761  004D18  0100               	movlb	0	; () banked
 43762  004D1A  2760               	addwf	?___wmul& (0+255),f,b
 43763  004D1C  0E00               	movlw	0
 43764  004D1E  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 43765  004D20  0E00               	movlw	low _menuArray
 43766  004D22  2560               	addwf	?___wmul& (0+255),w,b
 43767  004D24  6EE9               	movwf	fsr0l,c
 43768  004D26  0E03               	movlw	high _menuArray
 43769  004D28  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 43770  004D2A  6EEA               	movwf	fsr0h,c
 43771  004D2C  50EF               	movf	indf0,w,c
 43772  004D2E  2566               	addwf	??_initializeMenuArray& (0+255),w,b
 43773  004D30  6EDF               	movwf	indf2,c
 43774                           
 43775                           ; BSR set to: 0
 43776  004D32  2B68               	incf	initializeMenuArray@i& (0+255),f,b
 43777  004D34                     l3439:
 43778                           
 43779                           ; BSR set to: 0
 43780                           
 43781                           ; BSR set to: 0
 43782  004D34  5167               	movf	initializeMenuArray@NumberOfElements& (0+255),w,b
 43783  004D36  5D68               	subwf	initializeMenuArray@i& (0+255),w,b
 43784  004D38  A0D8               	btfss	status,0,c
 43785  004D3A  D7C0               	goto	l3440
 43786                           
 43787                           ; BSR set to: 0
 43788                           ;menu.c: 35: }
 43789                           ;menu.c: 38: mainMenu = menuArray[0];
 43790  004D3C  C300  F174         	movff	_menuArray,_mainMenu
 43791  004D40  C301  F175         	movff	_menuArray+1,_mainMenu+1
 43792  004D44  C302  F176         	movff	_menuArray+2,_mainMenu+2
 43793                           
 43794                           ;menu.c: 39: keyboardMenu = menuArray[1];
 43795  004D48  C303  F0E5         	movff	_menuArray+3,_keyboardMenu
 43796  004D4C  C304  F0E6         	movff	_menuArray+4,_keyboardMenu+1
 43797  004D50  C305  F0E7         	movff	_menuArray+5,_keyboardMenu+2
 43798                           
 43799                           ;menu.c: 40: modeMenu = menuArray[2];
 43800  004D54  C306  F171         	movff	_menuArray+6,_modeMenu
 43801  004D58  C307  F172         	movff	_menuArray+7,_modeMenu+1
 43802  004D5C  C308  F173         	movff	_menuArray+8,_modeMenu+2
 43803                           
 43804                           ;menu.c: 41: triadMenu = menuArray[3];
 43805  004D60  C309  F16E         	movff	_menuArray+9,_triadMenu
 43806  004D64  C30A  F16F         	movff	_menuArray+10,_triadMenu+1
 43807  004D68  C30B  F170         	movff	_menuArray+11,_triadMenu+2
 43808                           
 43809                           ;menu.c: 42: seventhMenu = menuArray[4];
 43810  004D6C  C30C  F16B         	movff	_menuArray+12,_seventhMenu
 43811  004D70  C30D  F16C         	movff	_menuArray+13,_seventhMenu+1
 43812  004D74  C30E  F16D         	movff	_menuArray+14,_seventhMenu+2
 43813                           
 43814                           ;menu.c: 43: transposeMenu = menuArray[5];
 43815  004D78  C30F  F168         	movff	_menuArray+15,_transposeMenu
 43816  004D7C  C310  F169         	movff	_menuArray+16,_transposeMenu+1
 43817  004D80  C311  F16A         	movff	_menuArray+17,_transposeMenu+2
 43818                           
 43819                           ;menu.c: 44: drumMenu = menuArray[6];
 43820  004D84  C312  F165         	movff	_menuArray+18,_drumMenu
 43821  004D88  C313  F166         	movff	_menuArray+19,_drumMenu+1
 43822  004D8C  C314  F167         	movff	_menuArray+20,_drumMenu+2
 43823                           
 43824                           ;menu.c: 45: drumCCTypeMenu = menuArray[7];
 43825  004D90  C315  F162         	movff	_menuArray+21,_drumCCTypeMenu
 43826  004D94  C316  F163         	movff	_menuArray+22,_drumCCTypeMenu+1
 43827  004D98  C317  F164         	movff	_menuArray+23,_drumCCTypeMenu+2
 43828                           
 43829                           ;menu.c: 46: drumNNMenu = menuArray[8];
 43830  004D9C  C318  F15F         	movff	_menuArray+24,_drumNNMenu
 43831  004DA0  C319  F160         	movff	_menuArray+25,_drumNNMenu+1
 43832  004DA4  C31A  F161         	movff	_menuArray+26,_drumNNMenu+2
 43833                           
 43834                           ;menu.c: 47: drumCCMenu = menuArray[9];
 43835  004DA8  C31B  F15C         	movff	_menuArray+27,_drumCCMenu
 43836  004DAC  C31C  F15D         	movff	_menuArray+28,_drumCCMenu+1
 43837  004DB0  C31D  F15E         	movff	_menuArray+29,_drumCCMenu+2
 43838                           
 43839                           ;menu.c: 48: potsMenu = menuArray[10];
 43840  004DB4  C31E  F159         	movff	_menuArray+30,_potsMenu
 43841  004DB8  C31F  F15A         	movff	_menuArray+31,_potsMenu+1
 43842  004DBC  C320  F15B         	movff	_menuArray+32,_potsMenu+2
 43843                           
 43844                           ;menu.c: 49: potsResoMenu = menuArray[11];
 43845  004DC0  C321  F156         	movff	_menuArray+33,_potsResoMenu
 43846  004DC4  C322  F157         	movff	_menuArray+34,_potsResoMenu+1
 43847  004DC8  C323  F158         	movff	_menuArray+35,_potsResoMenu+2
 43848                           
 43849                           ;menu.c: 50: potsCCMenu = menuArray[12];
 43850  004DCC  C324  F150         	movff	_menuArray+36,_potsCCMenu
 43851  004DD0  C325  F151         	movff	_menuArray+37,_potsCCMenu+1
 43852  004DD4  C326  F152         	movff	_menuArray+38,_potsCCMenu+2
 43853                           
 43854                           ;menu.c: 51: slidepotsCCMenu = menuArray[13];
 43855  004DD8  C327  F14D         	movff	_menuArray+39,_slidepotsCCMenu
 43856  004DDC  C328  F14E         	movff	_menuArray+40,_slidepotsCCMenu+1
 43857  004DE0  C329  F14F         	movff	_menuArray+41,_slidepotsCCMenu+2
 43858                           
 43859                           ;menu.c: 52: joystickCCMenu = menuArray[14];
 43860  004DE4  C32A  F14A         	movff	_menuArray+42,_joystickCCMenu
 43861  004DE8  C32B  F14B         	movff	_menuArray+43,_joystickCCMenu+1
 43862  004DEC  C32C  F14C         	movff	_menuArray+44,_joystickCCMenu+2
 43863                           
 43864                           ;menu.c: 53: midiChannelMenu = menuArray[15];
 43865  004DF0  C32D  F147         	movff	_menuArray+45,_midiChannelMenu
 43866  004DF4  C32E  F148         	movff	_menuArray+46,_midiChannelMenu+1
 43867  004DF8  C32F  F149         	movff	_menuArray+47,_midiChannelMenu+2
 43868                           
 43869                           ;menu.c: 54: eepromMenu = menuArray[16];
 43870  004DFC  C330  F13B         	movff	_menuArray+48,_eepromMenu
 43871  004E00  C331  F13C         	movff	_menuArray+49,_eepromMenu+1
 43872  004E04  C332  F13D         	movff	_menuArray+50,_eepromMenu+2
 43873                           
 43874                           ;menu.c: 55: savesMenu = menuArray[17];
 43875  004E08  C333  F0E2         	movff	_menuArray+51,_savesMenu
 43876  004E0C  C334  F0E3         	movff	_menuArray+52,_savesMenu+1
 43877  004E10  C335  F0E4         	movff	_menuArray+53,_savesMenu+2
 43878                           
 43879                           ;menu.c: 56: encoderPolarityMenu = menuArray[18];
 43880  004E14  C336  F138         	movff	_menuArray+54,_encoderPolarityMenu
 43881  004E18  C337  F139         	movff	_menuArray+55,_encoderPolarityMenu+1
 43882  004E1C  C338  F13A         	movff	_menuArray+56,_encoderPolarityMenu+2
 43883                           
 43884                           ;menu.c: 57: arpeggiatorMenu = menuArray[19];
 43885  004E20  C339  F0DF         	movff	_menuArray+57,_arpeggiatorMenu
 43886  004E24  C33A  F0E0         	movff	_menuArray+58,_arpeggiatorMenu+1
 43887  004E28  C33B  F0E1         	movff	_menuArray+59,_arpeggiatorMenu+2
 43888                           
 43889                           ;menu.c: 58: arpeggiatorOnOffMenu = menuArray[20];
 43890  004E2C  C33C  F135         	movff	_menuArray+60,_arpeggiatorOnOffMenu
 43891  004E30  C33D  F136         	movff	_menuArray+61,_arpeggiatorOnOffMenu+1
 43892  004E34  C33E  F137         	movff	_menuArray+62,_arpeggiatorOnOffMenu+2
 43893                           
 43894                           ;menu.c: 59: arpeggiatorTypeMenu = menuArray[21];
 43895  004E38  C33F  F12C         	movff	_menuArray+63,_arpeggiatorTypeMenu
 43896  004E3C  C340  F12D         	movff	_menuArray+64,_arpeggiatorTypeMenu+1
 43897  004E40  C341  F12E         	movff	_menuArray+65,_arpeggiatorTypeMenu+2
 43898                           
 43899                           ;menu.c: 60: arpeggiatorNoteLengthMenu = menuArray[22];
 43900  004E44  C342  F129         	movff	_menuArray+66,_arpeggiatorNoteLengthMenu
 43901  004E48  C343  F12A         	movff	_menuArray+67,_arpeggiatorNoteLengthMenu+1
 43902  004E4C  C344  F12B         	movff	_menuArray+68,_arpeggiatorNoteLengthMenu+2
 43903                           
 43904                           ;menu.c: 61: arpeggiatorLatchMenu = menuArray[23];
 43905  004E50  C345  F126         	movff	_menuArray+69,_arpeggiatorLatchMenu
 43906  004E54  C346  F127         	movff	_menuArray+70,_arpeggiatorLatchMenu+1
 43907  004E58  C347  F128         	movff	_menuArray+71,_arpeggiatorLatchMenu+2
 43908                           
 43909                           ;menu.c: 62: arpeggiatorLatchOnOffMenu = menuArray[24];
 43910  004E5C  C348  F123         	movff	_menuArray+72,_arpeggiatorLatchOnOffMenu
 43911  004E60  C349  F124         	movff	_menuArray+73,_arpeggiatorLatchOnOffMenu+1
 43912  004E64  C34A  F125         	movff	_menuArray+74,_arpeggiatorLatchOnOffMenu+2
 43913                           
 43914                           ;menu.c: 63: arpeggiatorAutoLatchOnOffMenu = menuArray[25];
 43915  004E68  C34B  F120         	movff	_menuArray+75,_arpeggiatorAutoLatchOnOffMenu
 43916  004E6C  C34C  F121         	movff	_menuArray+76,_arpeggiatorAutoLatchOnOffMenu+1
 43917  004E70  C34D  F122         	movff	_menuArray+77,_arpeggiatorAutoLatchOnOffMenu+2
 43918                           
 43919                           ;menu.c: 64: arpeggiatorUnLatchModeMenu = menuArray[26];
 43920  004E74  C34E  F11D         	movff	_menuArray+78,_arpeggiatorUnLatchModeMenu
 43921  004E78  C34F  F11E         	movff	_menuArray+79,_arpeggiatorUnLatchModeMenu+1
 43922  004E7C  C350  F11F         	movff	_menuArray+80,_arpeggiatorUnLatchModeMenu+2
 43923                           
 43924                           ;menu.c: 65: arpeggiatorRandomizeSkipMenu = menuArray[27];
 43925  004E80  C351  F11A         	movff	_menuArray+81,_arpeggiatorRandomizeSkipMenu
 43926  004E84  C352  F11B         	movff	_menuArray+82,_arpeggiatorRandomizeSkipMenu+1
 43927  004E88  C353  F11C         	movff	_menuArray+83,_arpeggiatorRandomizeSkipMenu+2
 43928                           
 43929                           ;menu.c: 66: arpeggiatorRandomizeTypeMenu = menuArray[28];
 43930  004E8C  C354  F117         	movff	_menuArray+84,_arpeggiatorRandomizeTypeMenu
 43931  004E90  C355  F118         	movff	_menuArray+85,_arpeggiatorRandomizeTypeMenu+1
 43932  004E94  C356  F119         	movff	_menuArray+86,_arpeggiatorRandomizeTypeMenu+2
 43933                           
 43934                           ;menu.c: 67: arpeggiatorSkipFirstLastMenu = menuArray[29];
 43935  004E98  C357  F114         	movff	_menuArray+87,_arpeggiatorSkipFirstLastMenu
 43936  004E9C  C358  F115         	movff	_menuArray+88,_arpeggiatorSkipFirstLastMenu+1
 43937  004EA0  C359  F116         	movff	_menuArray+89,_arpeggiatorSkipFirstLastMenu+2
 43938                           
 43939                           ;menu.c: 68: arpeggiatorLastNoteModeMenu = menuArray[30];
 43940  004EA4  C35A  F0DC         	movff	_menuArray+90,_arpeggiatorLastNoteModeMenu
 43941  004EA8  C35B  F0DD         	movff	_menuArray+91,_arpeggiatorLastNoteModeMenu+1
 43942  004EAC  C35C  F0DE         	movff	_menuArray+92,_arpeggiatorLastNoteModeMenu+2
 43943                           
 43944                           ; BSR set to: 0
 43945  004EB0  0012               	return		;funcret
 43946  004EB2                     __end_of_initializeMenuArray:
 43947                           	opt stack 0
 43948                           tblptru	equ	0xFF8
 43949                           tblptrh	equ	0xFF7
 43950                           tblptrl	equ	0xFF6
 43951                           tablat	equ	0xFF5
 43952                           prodh	equ	0xFF4
 43953                           prodl	equ	0xFF3
 43954                           intcon	equ	0xFF2
 43955                           intcon2	equ	0xFF1
 43956                           indf0	equ	0xFEF
 43957                           postinc0	equ	0xFEE
 43958                           postdec0	equ	0xFED
 43959                           fsr0h	equ	0xFEA
 43960                           fsr0l	equ	0xFE9
 43961                           wreg	equ	0xFE8
 43962                           postinc1	equ	0xFE6
 43963                           postdec1	equ	0xFE5
 43964                           plusw1	equ	0xFE3
 43965                           fsr1h	equ	0xFE2
 43966                           fsr1l	equ	0xFE1
 43967                           indf2	equ	0xFDF
 43968                           postinc2	equ	0xFDE
 43969                           postdec2	equ	0xFDD
 43970                           plusw2	equ	0xFDB
 43971                           fsr2h	equ	0xFDA
 43972                           fsr2l	equ	0xFD9
 43973                           status	equ	0xFD8
 43974                           
 43975 ;; *************** function ___wmul *****************
 43976 ;; Defined at:
 43977 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 43978 ;; Parameters:    Size  Location     Type
 43979 ;;  multiplier      2    0[BANK0 ] unsigned int 
 43980 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 43981 ;; Auto vars:     Size  Location     Type
 43982 ;;  product         2    4[BANK0 ] unsigned int 
 43983 ;; Return value:  Size  Location     Type
 43984 ;;                  2    0[BANK0 ] unsigned int 
 43985 ;; Registers used:
 43986 ;;		wreg, status,2, status,0, prodl, prodh
 43987 ;; Tracked objects:
 43988 ;;		On entry : 0/0
 43989 ;;		On exit  : 0/0
 43990 ;;		Unchanged: 0/0
 43991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43992 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43993 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43995 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43996 ;;Total ram usage:        6 bytes
 43997 ;; Hardware stack levels used:    1
 43998 ;; Hardware stack levels required when called:    5
 43999 ;; This function calls:
 44000 ;;		Nothing
 44001 ;; This function is called by:
 44002 ;;		_processOctave
 44003 ;;		_initializeMenuArray
 44004 ;;		_menu_lcd
 44005 ;;		_Function_A_1
 44006 ;;		_Function_A_2
 44007 ;;		_Function_A_3
 44008 ;;		_Function_A
 44009 ;;		_Function_B
 44010 ;;		_Function_C_1
 44011 ;;		_Function_C_2
 44012 ;;		_Function_C_3
 44013 ;;		_Function_C
 44014 ;;		_Function_D_1
 44015 ;;		_Function_D_3
 44016 ;;		_Function_D_4
 44017 ;;		_Function_D_5
 44018 ;;		_Function_D
 44019 ;;		_Function_E
 44020 ;;		_Function_G_1
 44021 ;;		_Function_G_2
 44022 ;;		_Function_G_4
 44023 ;;		_Function_G
 44024 ;;		_Function_H
 44025 ;;		_Function_H_4
 44026 ;;		_Function_H_5
 44027 ;;		_Function_H_6
 44028 ;;		_Function_H_8
 44029 ;;		_Function_H_9_1
 44030 ;;		_Function_H_9_2
 44031 ;;		_Function_H_9_3
 44032 ;;		_Function_H_9_4
 44033 ;;		_Function_H_9
 44034 ;; This function uses a non-reentrant model
 44035 ;;
 44036                           
 44037                           	psect	text133
 44038  00971E                     __ptext133:
 44039                           	opt stack 0
 44040  00971E                     ___wmul:
 44041                           	opt stack 24
 44042                           
 44043                           ; BSR set to: 0
 44044                           ;incstack = 0
 44045  00971E  0100               	movlb	0	; () banked
 44046  009720  5160               	movf	___wmul@multiplier& (0+255),w,b
 44047  009722  0362               	mulwf	___wmul@multiplicand& (0+255),b
 44048  009724  CFF3 F064          	movff	prodl,___wmul@product
 44049  009728  CFF4 F065          	movff	prodh,___wmul@product+1
 44050  00972C  5160               	movf	___wmul@multiplier& (0+255),w,b
 44051  00972E  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 44052  009730  50F3               	movf	prodl,w,c
 44053  009732  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 44054  009734  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 44055  009736  0362               	mulwf	___wmul@multiplicand& (0+255),b
 44056  009738  50F3               	movf	prodl,w,c
 44057  00973A  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 44058                           
 44059                           ; BSR set to: 0
 44060  00973C  C064  F060         	movff	___wmul@product,?___wmul
 44061  009740  C065  F061         	movff	___wmul@product+1,?___wmul+1
 44062  009744  0012               	return	
 44063  009746                     __end_of___wmul:
 44064                           	opt stack 0
 44065                           tblptru	equ	0xFF8
 44066                           tblptrh	equ	0xFF7
 44067                           tblptrl	equ	0xFF6
 44068                           tablat	equ	0xFF5
 44069                           prodh	equ	0xFF4
 44070                           prodl	equ	0xFF3
 44071                           intcon	equ	0xFF2
 44072                           intcon2	equ	0xFF1
 44073                           indf0	equ	0xFEF
 44074                           postinc0	equ	0xFEE
 44075                           postdec0	equ	0xFED
 44076                           fsr0h	equ	0xFEA
 44077                           fsr0l	equ	0xFE9
 44078                           wreg	equ	0xFE8
 44079                           postinc1	equ	0xFE6
 44080                           postdec1	equ	0xFE5
 44081                           plusw1	equ	0xFE3
 44082                           fsr1h	equ	0xFE2
 44083                           fsr1l	equ	0xFE1
 44084                           indf2	equ	0xFDF
 44085                           postinc2	equ	0xFDE
 44086                           postdec2	equ	0xFDD
 44087                           plusw2	equ	0xFDB
 44088                           fsr2h	equ	0xFDA
 44089                           fsr2l	equ	0xFD9
 44090                           status	equ	0xFD8
 44091                           
 44092 ;; *************** function _displayTest *****************
 44093 ;; Defined at:
 44094 ;;		line 32 in file "segment.c"
 44095 ;; Parameters:    Size  Location     Type
 44096 ;;		None
 44097 ;; Auto vars:     Size  Location     Type
 44098 ;;		None
 44099 ;; Return value:  Size  Location     Type
 44100 ;;                  1    wreg      void 
 44101 ;; Registers used:
 44102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 44103 ;; Tracked objects:
 44104 ;;		On entry : 0/0
 44105 ;;		On exit  : 0/0
 44106 ;;		Unchanged: 0/0
 44107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44110 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44111 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44112 ;;Total ram usage:        2 bytes
 44113 ;; Hardware stack levels used:    1
 44114 ;; Hardware stack levels required when called:    6
 44115 ;; This function calls:
 44116 ;;		_strcpy
 44117 ;; This function is called by:
 44118 ;;		_main
 44119 ;; This function uses a non-reentrant model
 44120 ;;
 44121                           
 44122                           	psect	text134
 44123  0084BA                     __ptext134:
 44124                           	opt stack 0
 44125  0084BA                     _displayTest:
 44126                           	opt stack 24
 44127                           
 44128                           ;segment.c: 38: DISPLAY_MODE = 1;
 44129                           
 44130                           ; BSR set to: 0
 44131                           ;incstack = 0
 44132  0084BA  0E01               	movlw	1
 44133  0084BC  0100               	movlb	0	; () banked
 44134  0084BE  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 44135                           
 44136                           ; BSR set to: 0
 44137                           ;segment.c: 39: strcpy(string_to_display,"tESt");
 44138  0084C0  0EF8               	movlw	low _string_to_display
 44139  0084C2  6F60               	movwf	strcpy@to& (0+255),b
 44140  0084C4  0E01               	movlw	high _string_to_display
 44141  0084C6  6F61               	movwf	(strcpy@to+1)& (0+255),b
 44142  0084C8  0ED7               	movlw	low STR_8
 44143  0084CA  6F62               	movwf	strcpy@from& (0+255),b
 44144  0084CC  0EFF               	movlw	high STR_8
 44145  0084CE  6F63               	movwf	(strcpy@from+1)& (0+255),b
 44146  0084D0  ECF3  F04A         	call	_strcpy	;wreg free
 44147                           
 44148                           ;segment.c: 41: _delay((unsigned long)((500)*(20000000/4000.0)));
 44149  0084D4  0E0D               	movlw	13
 44150  0084D6  0100               	movlb	0	; () banked
 44151  0084D8  6F67               	movwf	(??_displayTest+1)& (0+255),b
 44152  0084DA  0EAF               	movlw	175
 44153  0084DC  6F66               	movwf	??_displayTest& (0+255),b
 44154  0084DE  0EB6               	movlw	182
 44155  0084E0                     u67107:
 44156  0084E0  2EE8               	decfsz	wreg,f,c
 44157  0084E2  D7FE               	bra	u67107
 44158  0084E4  2F66               	decfsz	??_displayTest& (0+255),f,b
 44159  0084E6  D7FC               	bra	u67107
 44160  0084E8  2F67               	decfsz	(??_displayTest+1)& (0+255),f,b
 44161  0084EA  D7FA               	bra	u67107
 44162  0084EC  F000               	nop	
 44163                           
 44164                           ;segment.c: 43: DISPLAY_MODE = 0;
 44165  0084EE  0E00               	movlw	0
 44166  0084F0  0100               	movlb	0	; () banked
 44167  0084F2  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 44168                           
 44169                           ; BSR set to: 0
 44170                           ;segment.c: 44: DIGIT_MODE = 0;
 44171  0084F4  0E00               	movlw	0
 44172  0084F6  6E3A               	movwf	_DIGIT_MODE,c
 44173                           
 44174                           ; BSR set to: 0
 44175                           ;segment.c: 45: number_to_display = 8888;
 44176  0084F8  0E22               	movlw	34
 44177  0084FA  6E4C               	movwf	_number_to_display+1,c
 44178  0084FC  0EB8               	movlw	184
 44179  0084FE  6E4B               	movwf	_number_to_display,c
 44180                           
 44181                           ; BSR set to: 0
 44182                           ;segment.c: 46: light_decimal_points = 1;
 44183  008500  8006               	bsf	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 44184                           
 44185                           ; BSR set to: 0
 44186                           ;segment.c: 47: _delay((unsigned long)((1000)*(20000000/4000.0)));
 44187  008502  0E1A               	movlw	26
 44188  008504  0100               	movlb	0	; () banked
 44189  008506  6F67               	movwf	(??_displayTest+1)& (0+255),b
 44190  008508  0E5E               	movlw	94
 44191  00850A  6F66               	movwf	??_displayTest& (0+255),b
 44192  00850C  0E6E               	movlw	110
 44193  00850E                     u67117:
 44194  00850E  2EE8               	decfsz	wreg,f,c
 44195  008510  D7FE               	bra	u67117
 44196  008512  2F66               	decfsz	??_displayTest& (0+255),f,b
 44197  008514  D7FC               	bra	u67117
 44198  008516  2F67               	decfsz	(??_displayTest+1)& (0+255),f,b
 44199  008518  D7FA               	bra	u67117
 44200  00851A  F000               	nop	
 44201                           
 44202                           ;segment.c: 48: light_decimal_points = 0;
 44203  00851C  9006               	bcf	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 44204                           
 44205                           ;segment.c: 50: DISPLAY_MODE = 1;
 44206  00851E  0E01               	movlw	1
 44207  008520  0100               	movlb	0	; () banked
 44208  008522  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 44209                           
 44210                           ; BSR set to: 0
 44211                           ;segment.c: 51: strcpy(string_to_display,"    ");
 44212  008524  0EF8               	movlw	low _string_to_display
 44213  008526  6F60               	movwf	strcpy@to& (0+255),b
 44214  008528  0E01               	movlw	high _string_to_display
 44215  00852A  6F61               	movwf	(strcpy@to+1)& (0+255),b
 44216  00852C  0E70               	movlw	low (STR_10+12)
 44217  00852E  6F62               	movwf	strcpy@from& (0+255),b
 44218  008530  0EFD               	movlw	high (STR_10+12)
 44219  008532  6F63               	movwf	(strcpy@from+1)& (0+255),b
 44220  008534  ECF3  F04A         	call	_strcpy	;wreg free
 44221  008538  0012               	return		;funcret
 44222  00853A                     __end_of_displayTest:
 44223                           	opt stack 0
 44224                           tblptru	equ	0xFF8
 44225                           tblptrh	equ	0xFF7
 44226                           tblptrl	equ	0xFF6
 44227                           tablat	equ	0xFF5
 44228                           prodh	equ	0xFF4
 44229                           prodl	equ	0xFF3
 44230                           intcon	equ	0xFF2
 44231                           intcon2	equ	0xFF1
 44232                           indf0	equ	0xFEF
 44233                           postinc0	equ	0xFEE
 44234                           postdec0	equ	0xFED
 44235                           fsr0h	equ	0xFEA
 44236                           fsr0l	equ	0xFE9
 44237                           wreg	equ	0xFE8
 44238                           postinc1	equ	0xFE6
 44239                           postdec1	equ	0xFE5
 44240                           plusw1	equ	0xFE3
 44241                           fsr1h	equ	0xFE2
 44242                           fsr1l	equ	0xFE1
 44243                           indf2	equ	0xFDF
 44244                           postinc2	equ	0xFDE
 44245                           postdec2	equ	0xFDD
 44246                           plusw2	equ	0xFDB
 44247                           fsr2h	equ	0xFDA
 44248                           fsr2l	equ	0xFD9
 44249                           status	equ	0xFD8
 44250                           
 44251 ;; *************** function _strcpy *****************
 44252 ;; Defined at:
 44253 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
 44254 ;; Parameters:    Size  Location     Type
 44255 ;;  to              2    0[BANK0 ] PTR unsigned char 
 44256 ;;		 -> string_to_display(5), 
 44257 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 44258 ;;		 -> STR_61(5), STR_59(5), STR_56(5), STR_54(5), 
 44259 ;;		 -> STR_44(5), STR_43(5), STR_41(5), STR_9(5), 
 44260 ;;		 -> STR_8(5), STR_7(5), STR_6(5), STR_5(5), 
 44261 ;;		 -> STR_4(5), STR_3(5), STR_2(5), STR_1(5), 
 44262 ;; Auto vars:     Size  Location     Type
 44263 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 44264 ;;		 -> string_to_display(5), 
 44265 ;; Return value:  Size  Location     Type
 44266 ;;                  2    0[BANK0 ] PTR unsigned char 
 44267 ;; Registers used:
 44268 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 44269 ;; Tracked objects:
 44270 ;;		On entry : 0/0
 44271 ;;		On exit  : 0/0
 44272 ;;		Unchanged: 0/0
 44273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44274 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44275 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44277 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44278 ;;Total ram usage:        6 bytes
 44279 ;; Hardware stack levels used:    1
 44280 ;; Hardware stack levels required when called:    5
 44281 ;; This function calls:
 44282 ;;		Nothing
 44283 ;; This function is called by:
 44284 ;;		_doTheLatch
 44285 ;;		_doTheUnLatch
 44286 ;;		_processOctave
 44287 ;;		_displayTest
 44288 ;;		_Function_H_1
 44289 ;;		_Function_H_6_2
 44290 ;;		_Function_H_7
 44291 ;; This function uses a non-reentrant model
 44292 ;;
 44293                           
 44294                           	psect	text135
 44295  0095E6                     __ptext135:
 44296                           	opt stack 0
 44297  0095E6                     _strcpy:
 44298                           	opt stack 20
 44299                           
 44300                           ;incstack = 0
 44301  0095E6  C060  F064         	movff	strcpy@to,strcpy@cp
 44302  0095EA  C061  F065         	movff	strcpy@to+1,strcpy@cp+1
 44303  0095EE  D005               	goto	l6178
 44304  0095F0  0100               	movlb	0	; () banked
 44305  0095F2  4B64               	infsnz	strcpy@cp& (0+255),f,b
 44306  0095F4  2B65               	incf	(strcpy@cp+1)& (0+255),f,b
 44307  0095F6  4B62               	infsnz	strcpy@from& (0+255),f,b
 44308  0095F8  2B63               	incf	(strcpy@from+1)& (0+255),f,b
 44309  0095FA                     l6178:
 44310                           
 44311                           ; BSR set to: 0
 44312  0095FA  C062  FFF6         	movff	strcpy@from,tblptrl
 44313  0095FE  C063  FFF7         	movff	strcpy@from+1,tblptrh
 44314  009602                     	if	0	;tblptru may be non-zero
 44315  009602                     	endif
 44316  009602                     	if	0	;tblptru may be non-zero
 44317  009602                     	endif
 44318  009602  C064  FFD9         	movff	strcpy@cp,fsr2l
 44319  009606  C065  FFDA         	movff	strcpy@cp+1,fsr2h
 44320  00960A  0008               	tblrd		*
 44321  00960C  CFF5 FFDF          	movff	tablat,indf2
 44322  009610  50DF               	movf	indf2,w,c
 44323  009612  B4D8               	btfsc	status,2,c
 44324  009614  0012               	return	
 44325  009616  D7EC               	goto	l6179
 44326  009618                     __end_of_strcpy:
 44327                           	opt stack 0
 44328                           tblptru	equ	0xFF8
 44329                           tblptrh	equ	0xFF7
 44330                           tblptrl	equ	0xFF6
 44331                           tablat	equ	0xFF5
 44332                           prodh	equ	0xFF4
 44333                           prodl	equ	0xFF3
 44334                           intcon	equ	0xFF2
 44335                           intcon2	equ	0xFF1
 44336                           indf0	equ	0xFEF
 44337                           postinc0	equ	0xFEE
 44338                           postdec0	equ	0xFED
 44339                           fsr0h	equ	0xFEA
 44340                           fsr0l	equ	0xFE9
 44341                           wreg	equ	0xFE8
 44342                           postinc1	equ	0xFE6
 44343                           postdec1	equ	0xFE5
 44344                           plusw1	equ	0xFE3
 44345                           fsr1h	equ	0xFE2
 44346                           fsr1l	equ	0xFE1
 44347                           indf2	equ	0xFDF
 44348                           postinc2	equ	0xFDE
 44349                           postdec2	equ	0xFDD
 44350                           plusw2	equ	0xFDB
 44351                           fsr2h	equ	0xFDA
 44352                           fsr2l	equ	0xFD9
 44353                           status	equ	0xFD8
 44354                           
 44355 ;; *************** function _Lcd_Start *****************
 44356 ;; Defined at:
 44357 ;;		line 94 in file "lcd.c"
 44358 ;; Parameters:    Size  Location     Type
 44359 ;;		None
 44360 ;; Auto vars:     Size  Location     Type
 44361 ;;  i               2    4[BANK0 ] int 
 44362 ;; Return value:  Size  Location     Type
 44363 ;;                  1    wreg      void 
 44364 ;; Registers used:
 44365 ;;		wreg, status,2, status,0, cstack
 44366 ;; Tracked objects:
 44367 ;;		On entry : 0/0
 44368 ;;		On exit  : 0/0
 44369 ;;		Unchanged: 0/0
 44370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44372 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44373 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44374 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44375 ;;Total ram usage:        3 bytes
 44376 ;; Hardware stack levels used:    1
 44377 ;; Hardware stack levels required when called:    7
 44378 ;; This function calls:
 44379 ;;		_Lcd_Cmd
 44380 ;;		_Lcd_SetBit
 44381 ;; This function is called by:
 44382 ;;		_main
 44383 ;; This function uses a non-reentrant model
 44384 ;;
 44385                           
 44386                           	psect	text136
 44387  00821A                     __ptext136:
 44388                           	opt stack 0
 44389  00821A                     _Lcd_Start:
 44390                           	opt stack 23
 44391                           
 44392                           ;lcd.c: 96: Lcd_SetBit(0x00);
 44393                           
 44394                           ;incstack = 0
 44395  00821A  0E00               	movlw	0
 44396  00821C  EC24  F04B         	call	_Lcd_SetBit
 44397                           
 44398                           ;lcd.c: 97: for(int i=1065244; i<=0; i--) __nop();
 44399  008220  0E41               	movlw	65
 44400  008222  0100               	movlb	0	; () banked
 44401  008224  6F65               	movwf	(Lcd_Start@i+1)& (0+255),b
 44402  008226  0E1C               	movlw	28
 44403  008228  6F64               	movwf	Lcd_Start@i& (0+255),b
 44404  00822A                     l33106:
 44405                           
 44406                           ; BSR set to: 0
 44407  00822A  BF65               	btfsc	(Lcd_Start@i+1)& (0+255),7,b
 44408  00822C  D005               	goto	l46
 44409  00822E  5165               	movf	(Lcd_Start@i+1)& (0+255),w,b
 44410  008230  E109               	bnz	l33114
 44411  008232  0564               	decf	Lcd_Start@i& (0+255),w,b
 44412  008234  B0D8               	btfsc	status,0,c
 44413  008236  D006               	goto	u60140
 44414  008238                     l46:
 44415                           
 44416                           ; BSR set to: 0
 44417  008238  F000               	nop	
 44418  00823A  0100               	movlb	0	; () banked
 44419  00823C  0764               	decf	Lcd_Start@i& (0+255),f,b
 44420  00823E  A0D8               	btfss	status,0,c
 44421  008240  0765               	decf	(Lcd_Start@i+1)& (0+255),f,b
 44422  008242  D7F3               	goto	l33106
 44423  008244                     u60140:
 44424  008244                     l33114:
 44425                           
 44426                           ; BSR set to: 0
 44427                           ;lcd.c: 98: Lcd_Cmd(0x03);
 44428  008244  0E03               	movlw	3
 44429  008246  ECA3  F04B         	call	_Lcd_Cmd
 44430                           
 44431                           ;lcd.c: 99: _delay((unsigned long)((5)*(20000000/4000.0)));
 44432  00824A  0E21               	movlw	33
 44433  00824C  0100               	movlb	0	; () banked
 44434  00824E  6F63               	movwf	??_Lcd_Start& (0+255),b
 44435  008250  0E76               	movlw	118
 44436  008252                     u67127:
 44437  008252  2EE8               	decfsz	wreg,f,c
 44438  008254  D7FE               	bra	u67127
 44439  008256  2F63               	decfsz	??_Lcd_Start& (0+255),f,b
 44440  008258  D7FC               	bra	u67127
 44441  00825A  F000               	nop	
 44442                           
 44443                           ;lcd.c: 100: Lcd_Cmd(0x03);
 44444  00825C  0E03               	movlw	3
 44445  00825E  ECA3  F04B         	call	_Lcd_Cmd
 44446                           
 44447                           ;lcd.c: 101: _delay((unsigned long)((11)*(20000000/4000.0)));
 44448  008262  0E48               	movlw	72
 44449  008264  0100               	movlb	0	; () banked
 44450  008266  6F63               	movwf	??_Lcd_Start& (0+255),b
 44451  008268  0E6C               	movlw	108
 44452  00826A                     u67137:
 44453  00826A  2EE8               	decfsz	wreg,f,c
 44454  00826C  D7FE               	bra	u67137
 44455  00826E  2F63               	decfsz	??_Lcd_Start& (0+255),f,b
 44456  008270  D7FC               	bra	u67137
 44457  008272  F000               	nop	
 44458                           
 44459                           ;lcd.c: 102: Lcd_Cmd(0x03);
 44460  008274  0E03               	movlw	3
 44461  008276  ECA3  F04B         	call	_Lcd_Cmd
 44462                           
 44463                           ;lcd.c: 103: Lcd_Cmd(0x02);
 44464  00827A  0E02               	movlw	2
 44465  00827C  ECA3  F04B         	call	_Lcd_Cmd
 44466                           
 44467                           ;lcd.c: 104: Lcd_Cmd(0x02);
 44468  008280  0E02               	movlw	2
 44469  008282  ECA3  F04B         	call	_Lcd_Cmd
 44470                           
 44471                           ;lcd.c: 105: Lcd_Cmd(0x08);
 44472  008286  0E08               	movlw	8
 44473  008288  ECA3  F04B         	call	_Lcd_Cmd
 44474                           
 44475                           ;lcd.c: 106: Lcd_Cmd(0x00);
 44476  00828C  0E00               	movlw	0
 44477  00828E  ECA3  F04B         	call	_Lcd_Cmd
 44478                           
 44479                           ;lcd.c: 107: Lcd_Cmd(0x0C);
 44480  008292  0E0C               	movlw	12
 44481  008294  ECA3  F04B         	call	_Lcd_Cmd
 44482                           
 44483                           ;lcd.c: 108: Lcd_Cmd(0x00);
 44484  008298  0E00               	movlw	0
 44485  00829A  ECA3  F04B         	call	_Lcd_Cmd
 44486                           
 44487                           ;lcd.c: 109: Lcd_Cmd(0x06);
 44488  00829E  0E06               	movlw	6
 44489  0082A0  ECA3  F04B         	call	_Lcd_Cmd
 44490  0082A4  0012               	return		;funcret
 44491  0082A6                     __end_of_Lcd_Start:
 44492                           	opt stack 0
 44493                           tblptru	equ	0xFF8
 44494                           tblptrh	equ	0xFF7
 44495                           tblptrl	equ	0xFF6
 44496                           tablat	equ	0xFF5
 44497                           prodh	equ	0xFF4
 44498                           prodl	equ	0xFF3
 44499                           intcon	equ	0xFF2
 44500                           intcon2	equ	0xFF1
 44501                           indf0	equ	0xFEF
 44502                           postinc0	equ	0xFEE
 44503                           postdec0	equ	0xFED
 44504                           fsr0h	equ	0xFEA
 44505                           fsr0l	equ	0xFE9
 44506                           wreg	equ	0xFE8
 44507                           postinc1	equ	0xFE6
 44508                           postdec1	equ	0xFE5
 44509                           plusw1	equ	0xFE3
 44510                           fsr1h	equ	0xFE2
 44511                           fsr1l	equ	0xFE1
 44512                           indf2	equ	0xFDF
 44513                           postinc2	equ	0xFDE
 44514                           postdec2	equ	0xFDD
 44515                           plusw2	equ	0xFDB
 44516                           fsr2h	equ	0xFDA
 44517                           fsr2l	equ	0xFD9
 44518                           status	equ	0xFD8
 44519                           
 44520 ;; *************** function _Lcd_Cmd *****************
 44521 ;; Defined at:
 44522 ;;		line 44 in file "lcd.c"
 44523 ;; Parameters:    Size  Location     Type
 44524 ;;  a               1    wreg     unsigned char 
 44525 ;; Auto vars:     Size  Location     Type
 44526 ;;  a               1    2[BANK0 ] unsigned char 
 44527 ;; Return value:  Size  Location     Type
 44528 ;;                  1    wreg      void 
 44529 ;; Registers used:
 44530 ;;		wreg, status,2, cstack
 44531 ;; Tracked objects:
 44532 ;;		On entry : 0/0
 44533 ;;		On exit  : 0/0
 44534 ;;		Unchanged: 0/0
 44535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44537 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44538 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44539 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44540 ;;Total ram usage:        2 bytes
 44541 ;; Hardware stack levels used:    1
 44542 ;; Hardware stack levels required when called:    6
 44543 ;; This function calls:
 44544 ;;		_Lcd_SetBit
 44545 ;; This function is called by:
 44546 ;;		_Lcd_Clear
 44547 ;;		_Lcd_Set_Cursor
 44548 ;;		_Lcd_Start
 44549 ;; This function uses a non-reentrant model
 44550 ;;
 44551                           
 44552                           	psect	text137
 44553  009746                     __ptext137:
 44554                           	opt stack 0
 44555  009746                     _Lcd_Cmd:
 44556                           	opt stack 20
 44557                           
 44558                           ;incstack = 0
 44559                           ;Lcd_Cmd@a stored from wreg
 44560  009746  0100               	movlb	0	; () banked
 44561  009748  6F62               	movwf	Lcd_Cmd@a& (0+255),b
 44562                           
 44563                           ;lcd.c: 46: RE0 = 0;
 44564  00974A  9084               	bcf	3972,0,c	;volatile
 44565                           
 44566                           ;lcd.c: 47: Lcd_SetBit(a);
 44567  00974C  0100               	movlb	0	; () banked
 44568  00974E  5162               	movf	Lcd_Cmd@a& (0+255),w,b
 44569  009750  EC24  F04B         	call	_Lcd_SetBit
 44570                           
 44571                           ;lcd.c: 48: RE1 = 1;
 44572  009754  8284               	bsf	3972,1,c	;volatile
 44573                           
 44574                           ;lcd.c: 49: _delay((unsigned long)((4)*(20000000/4000.0)));
 44575  009756  0E1A               	movlw	26
 44576  009758  0100               	movlb	0	; () banked
 44577  00975A  6F61               	movwf	??_Lcd_Cmd& (0+255),b
 44578  00975C  0EF8               	movlw	248
 44579  00975E                     u67147:
 44580  00975E  2EE8               	decfsz	wreg,f,c
 44581  009760  D7FE               	bra	u67147
 44582  009762  2F61               	decfsz	??_Lcd_Cmd& (0+255),f,b
 44583  009764  D7FC               	bra	u67147
 44584  009766  F000               	nop	
 44585                           
 44586                           ;lcd.c: 50: RE1 = 0;
 44587  009768  9284               	bcf	3972,1,c	;volatile
 44588  00976A  0012               	return		;funcret
 44589  00976C                     __end_of_Lcd_Cmd:
 44590                           	opt stack 0
 44591                           tblptru	equ	0xFF8
 44592                           tblptrh	equ	0xFF7
 44593                           tblptrl	equ	0xFF6
 44594                           tablat	equ	0xFF5
 44595                           prodh	equ	0xFF4
 44596                           prodl	equ	0xFF3
 44597                           intcon	equ	0xFF2
 44598                           intcon2	equ	0xFF1
 44599                           indf0	equ	0xFEF
 44600                           postinc0	equ	0xFEE
 44601                           postdec0	equ	0xFED
 44602                           fsr0h	equ	0xFEA
 44603                           fsr0l	equ	0xFE9
 44604                           wreg	equ	0xFE8
 44605                           postinc1	equ	0xFE6
 44606                           postdec1	equ	0xFE5
 44607                           plusw1	equ	0xFE3
 44608                           fsr1h	equ	0xFE2
 44609                           fsr1l	equ	0xFE1
 44610                           indf2	equ	0xFDF
 44611                           postinc2	equ	0xFDE
 44612                           postdec2	equ	0xFDD
 44613                           plusw2	equ	0xFDB
 44614                           fsr2h	equ	0xFDA
 44615                           fsr2l	equ	0xFD9
 44616                           status	equ	0xFD8
 44617                           
 44618 ;; *************** function _Lcd_SetBit *****************
 44619 ;; Defined at:
 44620 ;;		line 21 in file "lcd.c"
 44621 ;; Parameters:    Size  Location     Type
 44622 ;;  data_bit        1    wreg     unsigned char 
 44623 ;; Auto vars:     Size  Location     Type
 44624 ;;  data_bit        1    0[BANK0 ] unsigned char 
 44625 ;; Return value:  Size  Location     Type
 44626 ;;                  1    wreg      void 
 44627 ;; Registers used:
 44628 ;;		wreg
 44629 ;; Tracked objects:
 44630 ;;		On entry : 0/0
 44631 ;;		On exit  : 0/0
 44632 ;;		Unchanged: 0/0
 44633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44635 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44637 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44638 ;;Total ram usage:        1 bytes
 44639 ;; Hardware stack levels used:    1
 44640 ;; Hardware stack levels required when called:    5
 44641 ;; This function calls:
 44642 ;;		Nothing
 44643 ;; This function is called by:
 44644 ;;		_Lcd_Cmd
 44645 ;;		_Lcd_Start
 44646 ;;		_Lcd_Print_Char
 44647 ;; This function uses a non-reentrant model
 44648 ;;
 44649                           
 44650                           	psect	text138
 44651  009648                     __ptext138:
 44652                           	opt stack 0
 44653  009648                     _Lcd_SetBit:
 44654                           	opt stack 20
 44655                           
 44656                           ;incstack = 0
 44657                           ;Lcd_SetBit@data_bit stored from wreg
 44658  009648  0100               	movlb	0	; () banked
 44659  00964A  6F60               	movwf	Lcd_SetBit@data_bit& (0+255),b
 44660                           
 44661                           ;lcd.c: 23: if(data_bit& 1)
 44662  00964C  0100               	movlb	0	; () banked
 44663  00964E  A160               	btfss	Lcd_SetBit@data_bit& (0+255),0,b
 44664  009650  D002               	goto	l23
 44665                           
 44666                           ; BSR set to: 0
 44667                           ;lcd.c: 24: RD4 = 1;
 44668  009652  8883               	bsf	3971,4,c	;volatile
 44669  009654  D001               	goto	l24
 44670  009656                     l23:
 44671                           
 44672                           ; BSR set to: 0
 44673                           ;lcd.c: 25: else
 44674                           ;lcd.c: 26: RD4 = 0;
 44675  009656  9883               	bcf	3971,4,c	;volatile
 44676  009658                     l24:
 44677                           
 44678                           ; BSR set to: 0
 44679                           ;lcd.c: 28: if(data_bit& 2)
 44680                           
 44681                           ; BSR set to: 0
 44682  009658  A360               	btfss	Lcd_SetBit@data_bit& (0+255),1,b
 44683  00965A  D002               	goto	l25
 44684                           
 44685                           ; BSR set to: 0
 44686                           ;lcd.c: 29: RD5 = 1;
 44687  00965C  8A83               	bsf	3971,5,c	;volatile
 44688  00965E  D001               	goto	l26
 44689  009660                     l25:
 44690                           
 44691                           ; BSR set to: 0
 44692                           ;lcd.c: 30: else
 44693                           ;lcd.c: 31: RD5 = 0;
 44694  009660  9A83               	bcf	3971,5,c	;volatile
 44695  009662                     l26:
 44696                           
 44697                           ; BSR set to: 0
 44698                           ;lcd.c: 33: if(data_bit& 4)
 44699                           
 44700                           ; BSR set to: 0
 44701  009662  A560               	btfss	Lcd_SetBit@data_bit& (0+255),2,b
 44702  009664  D002               	goto	l27
 44703                           
 44704                           ; BSR set to: 0
 44705                           ;lcd.c: 34: RD6 = 1;
 44706  009666  8C83               	bsf	3971,6,c	;volatile
 44707  009668  D001               	goto	l28
 44708  00966A                     l27:
 44709                           
 44710                           ; BSR set to: 0
 44711                           ;lcd.c: 35: else
 44712                           ;lcd.c: 36: RD6 = 0;
 44713  00966A  9C83               	bcf	3971,6,c	;volatile
 44714  00966C                     l28:
 44715                           
 44716                           ; BSR set to: 0
 44717                           ;lcd.c: 38: if(data_bit& 8)
 44718                           
 44719                           ; BSR set to: 0
 44720  00966C  A760               	btfss	Lcd_SetBit@data_bit& (0+255),3,b
 44721  00966E  D002               	goto	l29
 44722                           
 44723                           ; BSR set to: 0
 44724                           ;lcd.c: 39: RD7 = 1;
 44725  009670  8E83               	bsf	3971,7,c	;volatile
 44726  009672  0012               	return	
 44727  009674                     l29:
 44728                           
 44729                           ; BSR set to: 0
 44730                           ;lcd.c: 40: else
 44731                           ;lcd.c: 41: RD7 = 0;
 44732  009674  9E83               	bcf	3971,7,c	;volatile
 44733  009676  0012               	return	
 44734  009678                     __end_of_Lcd_SetBit:
 44735                           	opt stack 0
 44736                           tblptru	equ	0xFF8
 44737                           tblptrh	equ	0xFF7
 44738                           tblptrl	equ	0xFF6
 44739                           tablat	equ	0xFF5
 44740                           prodh	equ	0xFF4
 44741                           prodl	equ	0xFF3
 44742                           intcon	equ	0xFF2
 44743                           intcon2	equ	0xFF1
 44744                           indf0	equ	0xFEF
 44745                           postinc0	equ	0xFEE
 44746                           postdec0	equ	0xFED
 44747                           fsr0h	equ	0xFEA
 44748                           fsr0l	equ	0xFE9
 44749                           wreg	equ	0xFE8
 44750                           postinc1	equ	0xFE6
 44751                           postdec1	equ	0xFE5
 44752                           plusw1	equ	0xFE3
 44753                           fsr1h	equ	0xFE2
 44754                           fsr1l	equ	0xFE1
 44755                           indf2	equ	0xFDF
 44756                           postinc2	equ	0xFDE
 44757                           postdec2	equ	0xFDD
 44758                           plusw2	equ	0xFDB
 44759                           fsr2h	equ	0xFDA
 44760                           fsr2l	equ	0xFD9
 44761                           status	equ	0xFD8
 44762                           
 44763 ;; *************** function _ADC_Initialize *****************
 44764 ;; Defined at:
 44765 ;;		line 22 in file "adc.c"
 44766 ;; Parameters:    Size  Location     Type
 44767 ;;		None
 44768 ;; Auto vars:     Size  Location     Type
 44769 ;;		None
 44770 ;; Return value:  Size  Location     Type
 44771 ;;                  1    wreg      void 
 44772 ;; Registers used:
 44773 ;;		wreg, status,2
 44774 ;; Tracked objects:
 44775 ;;		On entry : 0/0
 44776 ;;		On exit  : 0/0
 44777 ;;		Unchanged: 0/0
 44778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44783 ;;Total ram usage:        0 bytes
 44784 ;; Hardware stack levels used:    1
 44785 ;; Hardware stack levels required when called:    5
 44786 ;; This function calls:
 44787 ;;		Nothing
 44788 ;; This function is called by:
 44789 ;;		_main
 44790 ;; This function uses a non-reentrant model
 44791 ;;
 44792                           
 44793                           	psect	text139
 44794  00987A                     __ptext139:
 44795                           	opt stack 0
 44796  00987A                     _ADC_Initialize:
 44797                           	opt stack 25
 44798                           
 44799                           ;adc.c: 24: CMCON = 0x7;
 44800                           
 44801                           ; BSR set to: 0
 44802                           ;incstack = 0
 44803  00987A  0E07               	movlw	7
 44804  00987C  6EB4               	movwf	4020,c	;volatile
 44805                           
 44806                           ;adc.c: 25: ADCON0 = 0b00000000;
 44807  00987E  0E00               	movlw	0
 44808  009880  6EC2               	movwf	4034,c	;volatile
 44809                           
 44810                           ;adc.c: 26: ADCON1 = 0b00001110;
 44811  009882  0E0E               	movlw	14
 44812  009884  6EC1               	movwf	4033,c	;volatile
 44813                           
 44814                           ;adc.c: 27: ADCON2 = 0b10000010;
 44815  009886  0E82               	movlw	130
 44816  009888  6EC0               	movwf	4032,c	;volatile
 44817                           
 44818                           ;adc.c: 31: ADON = 1;
 44819  00988A  80C2               	bsf	4034,0,c	;volatile
 44820  00988C  0012               	return		;funcret
 44821  00988E                     __end_of_ADC_Initialize:
 44822                           	opt stack 0
 44823                           tblptru	equ	0xFF8
 44824                           tblptrh	equ	0xFF7
 44825                           tblptrl	equ	0xFF6
 44826                           tablat	equ	0xFF5
 44827                           prodh	equ	0xFF4
 44828                           prodl	equ	0xFF3
 44829                           intcon	equ	0xFF2
 44830                           intcon2	equ	0xFF1
 44831                           indf0	equ	0xFEF
 44832                           postinc0	equ	0xFEE
 44833                           postdec0	equ	0xFED
 44834                           fsr0h	equ	0xFEA
 44835                           fsr0l	equ	0xFE9
 44836                           wreg	equ	0xFE8
 44837                           postinc1	equ	0xFE6
 44838                           postdec1	equ	0xFE5
 44839                           plusw1	equ	0xFE3
 44840                           fsr1h	equ	0xFE2
 44841                           fsr1l	equ	0xFE1
 44842                           indf2	equ	0xFDF
 44843                           postinc2	equ	0xFDE
 44844                           postdec2	equ	0xFDD
 44845                           plusw2	equ	0xFDB
 44846                           fsr2h	equ	0xFDA
 44847                           fsr2l	equ	0xFD9
 44848                           status	equ	0xFD8
 44849                           
 44850 ;; *************** function _ISR *****************
 44851 ;; Defined at:
 44852 ;;		line 356 in file "main.c"
 44853 ;; Parameters:    Size  Location     Type
 44854 ;;		None
 44855 ;; Auto vars:     Size  Location     Type
 44856 ;;		None
 44857 ;; Return value:  Size  Location     Type
 44858 ;;                  1    wreg      void 
 44859 ;; Registers used:
 44860 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 44861 ;; Tracked objects:
 44862 ;;		On entry : 0/0
 44863 ;;		On exit  : 0/0
 44864 ;;		Unchanged: 0/0
 44865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44868 ;;      Temps:         24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44869 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44870 ;;Total ram usage:       24 bytes
 44871 ;; Hardware stack levels used:    1
 44872 ;; Hardware stack levels required when called:    4
 44873 ;; This function calls:
 44874 ;;		___lbmod
 44875 ;;		_display
 44876 ;;		_encoderInputsBuxton
 44877 ;;		_playArpeggio
 44878 ;; This function is called by:
 44879 ;;		Interrupt level 2
 44880 ;; This function uses a non-reentrant model
 44881 ;;
 44882                           
 44883                           	psect	intcode
 44884  000008                     __pintcode:
 44885                           	opt stack 0
 44886  000008                     _ISR:
 44887                           	opt stack 11
 44888                           
 44889                           ;incstack = 0
 44890  000008  ED32  F029         	call	int_func,f	;refresh shadow registers
 44891                           tblptru	equ	0xFF8
 44892                           tblptrh	equ	0xFF7
 44893                           tblptrl	equ	0xFF6
 44894                           tablat	equ	0xFF5
 44895                           prodh	equ	0xFF4
 44896                           prodl	equ	0xFF3
 44897                           intcon	equ	0xFF2
 44898                           intcon2	equ	0xFF1
 44899                           indf0	equ	0xFEF
 44900                           postinc0	equ	0xFEE
 44901                           postdec0	equ	0xFED
 44902                           fsr0h	equ	0xFEA
 44903                           fsr0l	equ	0xFE9
 44904                           wreg	equ	0xFE8
 44905                           postinc1	equ	0xFE6
 44906                           postdec1	equ	0xFE5
 44907                           plusw1	equ	0xFE3
 44908                           fsr1h	equ	0xFE2
 44909                           fsr1l	equ	0xFE1
 44910                           indf2	equ	0xFDF
 44911                           postinc2	equ	0xFDE
 44912                           postdec2	equ	0xFDD
 44913                           plusw2	equ	0xFDB
 44914                           fsr2h	equ	0xFDA
 44915                           fsr2l	equ	0xFD9
 44916                           status	equ	0xFD8
 44917                           
 44918                           	psect	intcode_body
 44919  005264                     __pintcode_body:
 44920                           	opt stack 11
 44921  005264                     int_func:
 44922                           	opt stack 11
 44923  005264  0006               	pop		; remove dummy address from shadow register refresh
 44924  005266  CFE9 F013          	movff	fsr0l,??_ISR+1
 44925  00526A  CFEA F014          	movff	fsr0h,??_ISR+2
 44926  00526E  CFE1 F015          	movff	fsr1l,??_ISR+3
 44927  005272  CFE2 F016          	movff	fsr1h,??_ISR+4
 44928  005276  CFD9 F017          	movff	fsr2l,??_ISR+5
 44929  00527A  CFDA F018          	movff	fsr2h,??_ISR+6
 44930  00527E  CFF3 F019          	movff	prodl,??_ISR+7
 44931  005282  CFF4 F01A          	movff	prodh,??_ISR+8
 44932  005286  CFF6 F01B          	movff	tblptrl,??_ISR+9
 44933  00528A  CFF7 F01C          	movff	tblptrh,??_ISR+10
 44934  00528E  CFF8 F01D          	movff	tblptru,??_ISR+11
 44935  005292  CFF5 F01E          	movff	tablat,??_ISR+12
 44936  005296  C03F  F01F         	movff	btemp,??_ISR+13
 44937  00529A  C040  F020         	movff	btemp+1,??_ISR+14
 44938  00529E  C041  F021         	movff	btemp+2,??_ISR+15
 44939  0052A2  C042  F022         	movff	btemp+3,??_ISR+16
 44940  0052A6  C043  F023         	movff	btemp+4,??_ISR+17
 44941  0052AA  C044  F024         	movff	btemp+5,??_ISR+18
 44942  0052AE  C045  F025         	movff	btemp+6,??_ISR+19
 44943  0052B2  C046  F026         	movff	btemp+7,??_ISR+20
 44944  0052B6  C048  F027         	movff	btemp+9,??_ISR+21
 44945  0052BA  C049  F028         	movff	btemp+10,??_ISR+22
 44946  0052BE  C04A  F029         	movff	btemp+11,??_ISR+23
 44947  0052C2  EE16  F0B2         	lfsr	1,___inthi_sp
 44948                           
 44949                           ;main.c: 359: if(TMR2IF==1){
 44950  0052C6  A29E               	btfss	3998,1,c	;volatile
 44951  0052C8  D005               	goto	i2l4977
 44952                           
 44953                           ;main.c: 360: display();
 44954  0052CA  EC1C  F04C         	call	_display	;wreg free
 44955                           
 44956                           ;main.c: 362: TMR2 = 0x83;
 44957  0052CE  0E83               	movlw	131
 44958  0052D0  6ECC               	movwf	4044,c	;volatile
 44959                           
 44960                           ;main.c: 363: TMR2IF = 0;
 44961  0052D2  929E               	bcf	3998,1,c	;volatile
 44962  0052D4                     i2l4977:
 44963                           
 44964                           ;main.c: 364: }
 44965                           ;main.c: 367: if(TMR1IF==1){
 44966  0052D4  A09E               	btfss	3998,0,c	;volatile
 44967  0052D6  D00C               	goto	i2l4978
 44968                           
 44969                           ;main.c: 368: count_ISR++;
 44970  0052D8  0E01               	movlw	1
 44971  0052DA  0102               	movlb	2	; () banked
 44972  0052DC  2764               	addwf	_count_ISR& (0+255),f,b
 44973  0052DE  0E00               	movlw	0
 44974  0052E0  2365               	addwfc	(_count_ISR+1)& (0+255),f,b
 44975  0052E2  2366               	addwfc	(_count_ISR+2)& (0+255),f,b
 44976  0052E4  2367               	addwfc	(_count_ISR+3)& (0+255),f,b
 44977                           
 44978                           ; BSR set to: 2
 44979                           ;main.c: 369: TMR1 = 0xEC78;
 44980  0052E6  0EEC               	movlw	236
 44981  0052E8  6ECF               	movwf	4047,c	;volatile
 44982  0052EA  0E78               	movlw	120
 44983  0052EC  6ECE               	movwf	4046,c	;volatile
 44984                           
 44985                           ; BSR set to: 2
 44986                           ;main.c: 370: TMR1IF = 0;
 44987  0052EE  909E               	bcf	3998,0,c	;volatile
 44988  0052F0                     i2l4978:
 44989                           
 44990                           ;main.c: 371: }
 44991                           ;main.c: 374: if(INT0IF==1) {
 44992                           
 44993                           ; BSR set to: 2
 44994  0052F0  A2F2               	btfss	intcon,1,c	;volatile
 44995  0052F2  D00B               	goto	i2l4979
 44996                           
 44997                           ;main.c: 375: _delay((unsigned long)((10)*(20000000/4000.0)));
 44998  0052F4  0E41               	movlw	65
 44999  0052F6  6E12               	movwf	??_ISR& (0+255),c
 45000  0052F8  0EEE               	movlw	238
 45001  0052FA                     i2u6715_47:
 45002  0052FA  2EE8               	decfsz	wreg,f,c
 45003  0052FC  D7FE               	bra	i2u6715_47
 45004  0052FE  2E12               	decfsz	??_ISR& (0+255),f,c
 45005  005300  D7FC               	bra	i2u6715_47
 45006  005302  D000               	nop2	
 45007                           
 45008                           ;main.c: 376: if(RB0 == 0){encoder_click = 1;}
 45009  005304  A081               	btfss	3969,0,c	;volatile
 45010  005306  8405               	bsf	_encoder_click/(0+8),_encoder_click& (0+7),c
 45011                           
 45012                           ;main.c: 377: INT0IF = 0;
 45013  005308  92F2               	bcf	intcon,1,c	;volatile
 45014  00530A                     i2l4979:
 45015                           
 45016                           ;main.c: 378: }
 45017                           ;main.c: 381: if(RBIF==1) {
 45018  00530A  A0F2               	btfss	intcon,0,c	;volatile
 45019  00530C  D003               	goto	i2l4981
 45020                           
 45021                           ;main.c: 382: encoderInputsBuxton();
 45022  00530E  EC9D  F042         	call	_encoderInputsBuxton	;wreg free
 45023                           
 45024                           ;main.c: 384: RBIF = 0;
 45025  005312  90F2               	bcf	intcon,0,c	;volatile
 45026  005314                     i2l4981:
 45027                           
 45028                           ;main.c: 385: }
 45029                           ;main.c: 389: if(TMR0IF==1) {
 45030  005314  A4F2               	btfss	intcon,2,c	;volatile
 45031  005316  D04C               	goto	i2l4982
 45032                           
 45033                           ;main.c: 391: TMR0IE = 0;
 45034  005318  9AF2               	bcf	intcon,5,c	;volatile
 45035                           
 45036                           ;main.c: 394: if((finishLastNote == 0) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 0))
      +                          {
 45037  00531A  BC02               	btfsc	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 45038  00531C  D02D               	goto	i2l4987
 45039  00531E  504D               	movf	_NOTE_LENGTH_PULSES,w,c
 45040  005320  6EE6               	movwf	postinc1,c
 45041  005322  502E               	movf	_TIMER_OVERFLOWS,w,c
 45042  005324  6EE6               	movwf	postinc1,c
 45043  005326  ECC6  F040         	call	___lbmod	;wreg free
 45044  00532A  503F               	movf	btemp,w,c
 45045  00532C  A4D8               	btfss	status,2,c
 45046  00532E  D024               	goto	i2l4987
 45047                           
 45048                           ;main.c: 397: if((ARPEGGIO_TYPE == AS_PRESSED) || (ARPEGGIO_TYPE == UP) || (ARPEGGIO_TYP
      +                          E == DOWN) || (ARPEGGIO_TYPE == UP_DOWN) || (ARPEGGIO_TYPE == DOWN_UP)){
 45049  005330  0E06               	movlw	6
 45050  005332  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45051  005334  B4D8               	btfsc	status,2,c
 45052  005336  D00D               	goto	i2u6680_40
 45053  005338  5035               	movf	_ARPEGGIO_TYPE,w,c
 45054  00533A  B4D8               	btfsc	status,2,c
 45055  00533C  D00A               	goto	i2u6680_40
 45056  00533E  0435               	decf	_ARPEGGIO_TYPE,w,c
 45057  005340  B4D8               	btfsc	status,2,c
 45058  005342  D007               	goto	i2u6680_40
 45059  005344  0E02               	movlw	2
 45060  005346  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45061  005348  B4D8               	btfsc	status,2,c
 45062  00534A  D003               	goto	i2u6680_40
 45063  00534C  0E03               	movlw	3
 45064  00534E  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45065  005350  B4D8               	btfsc	status,2,c
 45066  005352                     i2u6680_40:
 45067                           
 45068                           ;main.c: 398: stored_octave = which_octave;
 45069  005352  C032  F031         	movff	_which_octave,_stored_octave
 45070                           
 45071                           ;main.c: 399: }
 45072                           ;main.c: 420: ARPEGGIO_IS_PLAYING = 1;
 45073  005356  8406               	bsf	_ARPEGGIO_IS_PLAYING/(0+8),_ARPEGGIO_IS_PLAYING& (0+7),c
 45074                           
 45075                           ;main.c: 421: playArpeggio();
 45076  005358  EC18  F005         	call	_playArpeggio	;wreg free
 45077                           
 45078                           ;main.c: 422: ARPEGGIO_IS_PLAYING = 0;
 45079  00535C  9406               	bcf	_ARPEGGIO_IS_PLAYING/(0+8),_ARPEGGIO_IS_PLAYING& (0+7),c
 45080                           
 45081                           ;main.c: 425: suppress_note_on = 0;
 45082  00535E  9A02               	bcf	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 45083                           
 45084                           ;main.c: 426: suppress_note_off = 0;
 45085  005360  9802               	bcf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45086                           
 45087                           ;main.c: 427: flag1 = 0;
 45088  005362  9002               	bcf	_flag1/(0+8),_flag1& (0+7),c
 45089                           
 45090                           ;main.c: 428: flag2 = 0;
 45091  005364  9E01               	bcf	_flag2/(0+8),_flag2& (0+7),c
 45092                           
 45093                           ;main.c: 431: if((ARPEGGIO_TYPE == RANDOM) || (ARPEGGIO_TYPE == RANDOM_NON_REPEATING)) {
 45094  005366  0E05               	movlw	5
 45095  005368  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45096  00536A  B4D8               	btfsc	status,2,c
 45097  00536C  D003               	goto	i2u6682_40
 45098  00536E  0E04               	movlw	4
 45099  005370  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45100  005372  B4D8               	btfsc	status,2,c
 45101  005374                     i2u6682_40:
 45102                           
 45103                           ;main.c: 432: stored_octave = which_octave;
 45104  005374  C032  F031         	movff	_which_octave,_stored_octave
 45105  005378                     i2l4987:
 45106                           
 45107                           ;main.c: 433: }
 45108                           ;main.c: 434: }
 45109                           ;main.c: 455: if(lastNoteMode == 1){
 45110  005378  B603               	btfsc	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 45111                           
 45112                           ;main.c: 456: if((finishLastNote == 1) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 0))
      +                          {
 45113  00537A  AC02               	btfss	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 45114  00537C  D00C               	goto	i2l4991
 45115  00537E  504D               	movf	_NOTE_LENGTH_PULSES,w,c
 45116  005380  6EE6               	movwf	postinc1,c
 45117  005382  502E               	movf	_TIMER_OVERFLOWS,w,c
 45118  005384  6EE6               	movwf	postinc1,c
 45119  005386  ECC6  F040         	call	___lbmod	;wreg free
 45120  00538A  503F               	movf	btemp,w,c
 45121  00538C  A4D8               	btfss	status,2,c
 45122  00538E  D003               	goto	i2l4991
 45123                           
 45124                           ;main.c: 465: finishLastNote = 0;
 45125  005390  9C02               	bcf	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 45126                           
 45127                           ;main.c: 468: TIMER_OVERFLOWS = NOTE_LENGTH_PULSES;
 45128  005392  C04D  F02E         	movff	_NOTE_LENGTH_PULSES,_TIMER_OVERFLOWS
 45129  005396                     i2l4991:
 45130                           
 45131                           ;main.c: 469: }
 45132                           ;main.c: 470: }
 45133                           ;main.c: 472: TIMER_OVERFLOWS++;
 45134  005396  2A2E               	incf	_TIMER_OVERFLOWS,f,c
 45135                           
 45136                           ;main.c: 474: if(TIMER_OVERFLOWS >= (NOTE_LENGTH_PULSES)){TIMER_OVERFLOWS = 0;}
 45137  005398  504D               	movf	_NOTE_LENGTH_PULSES,w,c
 45138  00539A  5C2E               	subwf	_TIMER_OVERFLOWS,w,c
 45139  00539C  A0D8               	btfss	status,0,c
 45140  00539E  D002               	goto	i2l4992
 45141  0053A0  0E00               	movlw	0
 45142  0053A2  6E2E               	movwf	_TIMER_OVERFLOWS,c
 45143  0053A4                     i2l4992:
 45144                           
 45145                           ;main.c: 476: TMR0 = TIMER_PRELOAD;
 45146  0053A4  C17B  FFD6         	movff	_TIMER_PRELOAD,4054	;volatile
 45147  0053A8  C17C  FFD7         	movff	_TIMER_PRELOAD+1,4055	;volatile
 45148                           
 45149                           ;main.c: 477: TMR0IF = 0;
 45150  0053AC  94F2               	bcf	intcon,2,c	;volatile
 45151                           
 45152                           ;main.c: 478: TMR0IE = 1;
 45153  0053AE  8AF2               	bsf	intcon,5,c	;volatile
 45154  0053B0                     i2l4982:
 45155  0053B0  C029  F04A         	movff	??_ISR+23,btemp+11
 45156  0053B4  C028  F049         	movff	??_ISR+22,btemp+10
 45157  0053B8  C027  F048         	movff	??_ISR+21,btemp+9
 45158  0053BC  C026  F046         	movff	??_ISR+20,btemp+7
 45159  0053C0  C025  F045         	movff	??_ISR+19,btemp+6
 45160  0053C4  C024  F044         	movff	??_ISR+18,btemp+5
 45161  0053C8  C023  F043         	movff	??_ISR+17,btemp+4
 45162  0053CC  C022  F042         	movff	??_ISR+16,btemp+3
 45163  0053D0  C021  F041         	movff	??_ISR+15,btemp+2
 45164  0053D4  C020  F040         	movff	??_ISR+14,btemp+1
 45165  0053D8  C01F  F03F         	movff	??_ISR+13,btemp
 45166  0053DC  C01E  FFF5         	movff	??_ISR+12,tablat
 45167  0053E0  C01D  FFF8         	movff	??_ISR+11,tblptru
 45168  0053E4  C01C  FFF7         	movff	??_ISR+10,tblptrh
 45169  0053E8  C01B  FFF6         	movff	??_ISR+9,tblptrl
 45170  0053EC  C01A  FFF4         	movff	??_ISR+8,prodh
 45171  0053F0  C019  FFF3         	movff	??_ISR+7,prodl
 45172  0053F4  C018  FFDA         	movff	??_ISR+6,fsr2h
 45173  0053F8  C017  FFD9         	movff	??_ISR+5,fsr2l
 45174  0053FC  C016  FFE2         	movff	??_ISR+4,fsr1h
 45175  005400  C015  FFE1         	movff	??_ISR+3,fsr1l
 45176  005404  C014  FFEA         	movff	??_ISR+2,fsr0h
 45177  005408  C013  FFE9         	movff	??_ISR+1,fsr0l
 45178  00540C  0011               	retfie		f
 45179  00540E                     __end_of_ISR:
 45180                           	opt stack 0
 45181                           tblptru	equ	0xFF8
 45182                           tblptrh	equ	0xFF7
 45183                           tblptrl	equ	0xFF6
 45184                           tablat	equ	0xFF5
 45185                           prodh	equ	0xFF4
 45186                           prodl	equ	0xFF3
 45187                           intcon	equ	0xFF2
 45188                           intcon2	equ	0xFF1
 45189                           indf0	equ	0xFEF
 45190                           postinc0	equ	0xFEE
 45191                           postdec0	equ	0xFED
 45192                           fsr0h	equ	0xFEA
 45193                           fsr0l	equ	0xFE9
 45194                           wreg	equ	0xFE8
 45195                           postinc1	equ	0xFE6
 45196                           postdec1	equ	0xFE5
 45197                           plusw1	equ	0xFE3
 45198                           fsr1h	equ	0xFE2
 45199                           fsr1l	equ	0xFE1
 45200                           indf2	equ	0xFDF
 45201                           postinc2	equ	0xFDE
 45202                           postdec2	equ	0xFDD
 45203                           plusw2	equ	0xFDB
 45204                           fsr2h	equ	0xFDA
 45205                           fsr2l	equ	0xFD9
 45206                           status	equ	0xFD8
 45207                           
 45208 ;; *************** function _playArpeggio *****************
 45209 ;; Defined at:
 45210 ;;		line 277 in file "arpeggio.c"
 45211 ;; Parameters:    Size  Location     Type
 45212 ;;		None
 45213 ;; Auto vars:     Size  Location     Type
 45214 ;;		None
 45215 ;; Return value:  Size  Location     Type
 45216 ;;                  1    wreg      void 
 45217 ;; Registers used:
 45218 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, prodl, prodh, cstack
 45219 ;; Tracked objects:
 45220 ;;		On entry : 0/0
 45221 ;;		On exit  : 0/0
 45222 ;;		Unchanged: 0/0
 45223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 45224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45226 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45227 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45228 ;;Total ram usage:        6 bytes
 45229 ;; Hardware stack levels used:    1
 45230 ;; Hardware stack levels required when called:    3
 45231 ;; This function calls:
 45232 ;;		___awmod
 45233 ;;		_noteOff
 45234 ;;		_noteOn
 45235 ;;		_rand
 45236 ;;		_random_pitches
 45237 ;;		_random_pitches_non_repeating
 45238 ;;		_sort_pitches
 45239 ;; This function is called by:
 45240 ;;		_ISR
 45241 ;; This function uses a non-reentrant model
 45242 ;;
 45243                           
 45244                           	psect	text141
 45245  000A30                     __ptext141:
 45246                           	opt stack 0
 45247  000A30                     _playArpeggio:
 45248                           	opt stack 11
 45249                           
 45250                           ;arpeggio.c: 280: if(NUM_NOTES_PRESSED == 0){return;}
 45251                           
 45252                           ;incstack = 0
 45253  000A30  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45254  000A32  B4D8               	btfsc	status,2,c
 45255  000A34  0012               	return	
 45256                           
 45257                           ;arpeggio.c: 288: if(ARPEGGIO_TYPE == UP | ARPEGGIO_TYPE == UP_DOWN | ARPEGGIO_TYPE == A
      +                          S_PRESSED) {
 45258  000A36  5035               	movf	_ARPEGGIO_TYPE,w,c
 45259  000A38  B4D8               	btfsc	status,2,c
 45260  000A3A  D008               	goto	i2u6025_40
 45261  000A3C  0E02               	movlw	2
 45262  000A3E  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45263  000A40  B4D8               	btfsc	status,2,c
 45264  000A42  D004               	goto	i2u6025_40
 45265  000A44  0E06               	movlw	6
 45266  000A46  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45267  000A48  A4D8               	btfss	status,2,c
 45268  000A4A  D0B7               	goto	i2l5502
 45269  000A4C                     i2u6025_40:
 45270                           
 45271                           ;arpeggio.c: 290: if(startingDirection == UP){
 45272  000A4C  5034               	movf	_startingDirection,w,c
 45273  000A4E  B4D8               	btfsc	status,2,c
 45274                           
 45275                           ;arpeggio.c: 292: if((overflow == 1) && (which_octave > 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 45276  000A50  A602               	btfss	_overflow/(0+8),_overflow& (0+7),c
 45277  000A52  D027               	goto	i2l5491
 45278  000A54  5032               	movf	_which_octave,w,c
 45279  000A56  0A80               	xorlw	128
 45280  000A58  0F7F               	addlw	-129
 45281  000A5A  B0D8               	btfsc	status,0,c
 45282  000A5C  B402               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45283  000A5E  D021               	goto	i2l5491
 45284  000A60  B002               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 45285  000A62  D01F               	goto	i2l5491
 45286                           
 45287                           ;arpeggio.c: 295: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((which_oct
      +                          ave - 1) * 12),velocity);
 45288  000A64  5051               	movf	_velocity,w,c
 45289  000A66  6EE6               	movwf	postinc1,c
 45290  000A68  0EFF               	movlw	255
 45291  000A6A  6E0C               	movwf	??_playArpeggio& (0+255),c
 45292  000A6C  0EFF               	movlw	255
 45293  000A6E  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45294  000A70  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45295  000A72  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45296  000A74  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45297  000A76  500C               	movf	??_playArpeggio,w,c
 45298  000A78  260E               	addwf	??_playArpeggio+2,f,c
 45299  000A7A  500D               	movf	??_playArpeggio+1,w,c
 45300  000A7C  220F               	addwfc	??_playArpeggio+3,f,c
 45301  000A7E  500E               	movf	??_playArpeggio+2,w,c
 45302  000A80  242A               	addwf	_arpeggioPtr,w,c
 45303  000A82  6ED9               	movwf	fsr2l,c
 45304  000A84  500F               	movf	??_playArpeggio+3,w,c
 45305  000A86  202B               	addwfc	_arpeggioPtr+1,w,c
 45306  000A88  6EDA               	movwf	fsr2h,c
 45307  000A8A  50DF               	movf	indf2,w,c
 45308  000A8C  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45309  000A8E  0432               	decf	_which_octave,w,c
 45310  000A90  0D0C               	mullw	12
 45311  000A92  50F3               	movf	prodl,w,c
 45312  000A94  2410               	addwf	??_playArpeggio+4,w,c
 45313  000A96  6EE6               	movwf	postinc1,c
 45314  000A98  503E               	movf	_channel,w,c
 45315  000A9A  6EE6               	movwf	postinc1,c
 45316  000A9C  ECAD  F049         	call	_noteOff	;wreg free
 45317                           
 45318                           ;arpeggio.c: 296: overflow = 0;
 45319  000AA0  9602               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45320  000AA2                     i2l5491:
 45321                           
 45322                           ;arpeggio.c: 297: }
 45323                           ;arpeggio.c: 298: }
 45324                           ;arpeggio.c: 300: if(startingDirection == DOWN){
 45325  000AA2  0434               	decf	_startingDirection,w,c
 45326  000AA4  B4D8               	btfsc	status,2,c
 45327                           
 45328                           ;arpeggio.c: 302: if((overflow == 1) && (which_octave > 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 45329  000AA6  A602               	btfss	_overflow/(0+8),_overflow& (0+7),c
 45330  000AA8  D029               	goto	i2l5493
 45331  000AAA  5032               	movf	_which_octave,w,c
 45332  000AAC  0A80               	xorlw	128
 45333  000AAE  0F7F               	addlw	-129
 45334  000AB0  B0D8               	btfsc	status,0,c
 45335  000AB2  B402               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45336  000AB4  D023               	goto	i2l5493
 45337  000AB6  B002               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 45338  000AB8  D021               	goto	i2l5493
 45339                           
 45340                           ;arpeggio.c: 303: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((which_oct
      +                          ave - OCTAVES) * 12),velocity);
 45341  000ABA  5051               	movf	_velocity,w,c
 45342  000ABC  6EE6               	movwf	postinc1,c
 45343  000ABE  0EFF               	movlw	255
 45344  000AC0  6E0C               	movwf	??_playArpeggio& (0+255),c
 45345  000AC2  0EFF               	movlw	255
 45346  000AC4  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45347  000AC6  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45348  000AC8  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45349  000ACA  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45350  000ACC  500C               	movf	??_playArpeggio,w,c
 45351  000ACE  260E               	addwf	??_playArpeggio+2,f,c
 45352  000AD0  500D               	movf	??_playArpeggio+1,w,c
 45353  000AD2  220F               	addwfc	??_playArpeggio+3,f,c
 45354  000AD4  500E               	movf	??_playArpeggio+2,w,c
 45355  000AD6  242A               	addwf	_arpeggioPtr,w,c
 45356  000AD8  6ED9               	movwf	fsr2l,c
 45357  000ADA  500F               	movf	??_playArpeggio+3,w,c
 45358  000ADC  202B               	addwfc	_arpeggioPtr+1,w,c
 45359  000ADE  6EDA               	movwf	fsr2h,c
 45360  000AE0  50DF               	movf	indf2,w,c
 45361  000AE2  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45362  000AE4  504E               	movf	_OCTAVES,w,c
 45363  000AE6  0800               	sublw	0
 45364  000AE8  2432               	addwf	_which_octave,w,c
 45365  000AEA  0D0C               	mullw	12
 45366  000AEC  50F3               	movf	prodl,w,c
 45367  000AEE  2410               	addwf	??_playArpeggio+4,w,c
 45368  000AF0  6EE6               	movwf	postinc1,c
 45369  000AF2  503E               	movf	_channel,w,c
 45370  000AF4  6EE6               	movwf	postinc1,c
 45371  000AF6  ECAD  F049         	call	_noteOff	;wreg free
 45372                           
 45373                           ;arpeggio.c: 304: overflow = 0;
 45374  000AFA  9602               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45375  000AFC                     i2l5493:
 45376                           
 45377                           ;arpeggio.c: 305: }
 45378                           ;arpeggio.c: 306: }
 45379                           ;arpeggio.c: 308: if(octave_overflow == 1){
 45380  000AFC  A402               	btfss	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45381  000AFE  D05D               	goto	i2l5502
 45382                           
 45383                           ;arpeggio.c: 309: if(startingDirection == UP) {
 45384  000B00  5034               	movf	_startingDirection,w,c
 45385  000B02  A4D8               	btfss	status,2,c
 45386  000B04  D021               	goto	i2l5495
 45387                           
 45388                           ;arpeggio.c: 311: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )) + ((OCTAVES - 1) * 12),velocity);}
 45389  000B06  BE01               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 45390  000B08  D01E               	goto	i2l5496
 45391  000B0A  5051               	movf	_velocity,w,c
 45392  000B0C  6EE6               	movwf	postinc1,c
 45393  000B0E  0EFF               	movlw	255
 45394  000B10  6E0C               	movwf	??_playArpeggio& (0+255),c
 45395  000B12  0EFF               	movlw	255
 45396  000B14  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45397  000B16  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45398  000B18  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45399  000B1A  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45400  000B1C  500C               	movf	??_playArpeggio,w,c
 45401  000B1E  260E               	addwf	??_playArpeggio+2,f,c
 45402  000B20  500D               	movf	??_playArpeggio+1,w,c
 45403  000B22  220F               	addwfc	??_playArpeggio+3,f,c
 45404  000B24  500E               	movf	??_playArpeggio+2,w,c
 45405  000B26  242A               	addwf	_arpeggioPtr,w,c
 45406  000B28  6ED9               	movwf	fsr2l,c
 45407  000B2A  500F               	movf	??_playArpeggio+3,w,c
 45408  000B2C  202B               	addwfc	_arpeggioPtr+1,w,c
 45409  000B2E  6EDA               	movwf	fsr2h,c
 45410  000B30  50DF               	movf	indf2,w,c
 45411  000B32  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45412  000B34  044E               	decf	_OCTAVES,w,c
 45413  000B36  0D0C               	mullw	12
 45414  000B38  50F3               	movf	prodl,w,c
 45415  000B3A  2410               	addwf	??_playArpeggio+4,w,c
 45416  000B3C  6EE6               	movwf	postinc1,c
 45417  000B3E  503E               	movf	_channel,w,c
 45418  000B40  6EE6               	movwf	postinc1,c
 45419  000B42  ECAD  F049         	call	_noteOff	;wreg free
 45420  000B46                     i2l5496:
 45421                           
 45422                           ;arpeggio.c: 312: octave_overflow = 0;
 45423  000B46  9402               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45424  000B48                     i2l5495:
 45425                           
 45426                           ;arpeggio.c: 313: }
 45427                           ;arpeggio.c: 315: if(startingDirection == DOWN){
 45428  000B48  0434               	decf	_startingDirection,w,c
 45429  000B4A  A4D8               	btfss	status,2,c
 45430  000B4C  D01C               	goto	i2l5497
 45431                           
 45432                           ;arpeggio.c: 317: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )),velocity);}
 45433  000B4E  BE01               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 45434  000B50  D019               	goto	i2l5498
 45435  000B52  5051               	movf	_velocity,w,c
 45436  000B54  6EE6               	movwf	postinc1,c
 45437  000B56  0EFF               	movlw	255
 45438  000B58  6E0C               	movwf	??_playArpeggio& (0+255),c
 45439  000B5A  0EFF               	movlw	255
 45440  000B5C  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45441  000B5E  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45442  000B60  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45443  000B62  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45444  000B64  500C               	movf	??_playArpeggio,w,c
 45445  000B66  260E               	addwf	??_playArpeggio+2,f,c
 45446  000B68  500D               	movf	??_playArpeggio+1,w,c
 45447  000B6A  220F               	addwfc	??_playArpeggio+3,f,c
 45448  000B6C  500E               	movf	??_playArpeggio+2,w,c
 45449  000B6E  242A               	addwf	_arpeggioPtr,w,c
 45450  000B70  6ED9               	movwf	fsr2l,c
 45451  000B72  500F               	movf	??_playArpeggio+3,w,c
 45452  000B74  202B               	addwfc	_arpeggioPtr+1,w,c
 45453  000B76  6EDA               	movwf	fsr2h,c
 45454  000B78  50DF               	movf	indf2,w,c
 45455  000B7A  6EE6               	movwf	postinc1,c
 45456  000B7C  503E               	movf	_channel,w,c
 45457  000B7E  6EE6               	movwf	postinc1,c
 45458  000B80  ECAD  F049         	call	_noteOff	;wreg free
 45459  000B84                     i2l5498:
 45460                           
 45461                           ;arpeggio.c: 318: octave_overflow = 0;
 45462  000B84  9402               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45463  000B86                     i2l5497:
 45464                           
 45465                           ;arpeggio.c: 319: }
 45466                           ;arpeggio.c: 323: if(skipFirstLast == 1){
 45467  000B86  A803               	btfss	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 45468  000B88  D012               	goto	i2l5501
 45469                           
 45470                           ;arpeggio.c: 324: if(NUM_NOTES_PRESSED > 1){
 45471  000B8A  0E01               	movlw	1
 45472  000B8C  642F               	cpfsgt	_NUM_NOTES_PRESSED,c
 45473  000B8E  D003               	goto	i2l5500
 45474                           
 45475                           ;arpeggio.c: 325: which_note = 1;
 45476  000B90  0E01               	movlw	1
 45477  000B92  6E33               	movwf	_which_note,c
 45478                           
 45479                           ;arpeggio.c: 326: suppress_note_off = 1;
 45480  000B94  8802               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45481  000B96                     i2l5500:
 45482                           
 45483                           ;arpeggio.c: 327: }
 45484                           ;arpeggio.c: 331: if((NUM_NOTES_PRESSED == 1) && (OCTAVES > 1)){
 45485  000B96  042F               	decf	_NUM_NOTES_PRESSED,w,c
 45486  000B98  A4D8               	btfss	status,2,c
 45487  000B9A  D009               	goto	i2l5501
 45488  000B9C  0E01               	movlw	1
 45489  000B9E  644E               	cpfsgt	_OCTAVES,c
 45490  000BA0  D006               	goto	i2l5501
 45491                           
 45492                           ;arpeggio.c: 332: flag1 = 1;
 45493  000BA2  8002               	bsf	_flag1/(0+8),_flag1& (0+7),c
 45494                           
 45495                           ;arpeggio.c: 334: which_note = 0;
 45496  000BA4  0E00               	movlw	0
 45497  000BA6  6E33               	movwf	_which_note,c
 45498                           
 45499                           ;arpeggio.c: 335: which_octave--;
 45500  000BA8  0632               	decf	_which_octave,f,c
 45501                           
 45502                           ;arpeggio.c: 336: stored_octave = which_octave;
 45503  000BAA  C032  F031         	movff	_which_octave,_stored_octave
 45504  000BAE                     i2l5501:
 45505                           
 45506                           ;arpeggio.c: 337: }
 45507                           ;arpeggio.c: 338: }
 45508                           ;arpeggio.c: 341: if(ARPEGGIO_TYPE == UP_DOWN) {ARPEGGIO_TYPE = DOWN_UP;}
 45509  000BAE  0E02               	movlw	2
 45510  000BB0  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45511  000BB2  A4D8               	btfss	status,2,c
 45512  000BB4  D002               	goto	i2l5502
 45513  000BB6  0E03               	movlw	3
 45514  000BB8  6E35               	movwf	_ARPEGGIO_TYPE,c
 45515  000BBA                     i2l5502:
 45516                           
 45517                           ;arpeggio.c: 342: }
 45518                           ;arpeggio.c: 343: }
 45519                           ;arpeggio.c: 346: if(ARPEGGIO_TYPE == DOWN | ARPEGGIO_TYPE == DOWN_UP) {
 45520  000BBA  0435               	decf	_ARPEGGIO_TYPE,w,c
 45521  000BBC  B4D8               	btfsc	status,2,c
 45522  000BBE  D004               	goto	i2u6047_40
 45523  000BC0  0E03               	movlw	3
 45524  000BC2  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45525  000BC4  A4D8               	btfss	status,2,c
 45526  000BC6  D0BE               	goto	i2l5518
 45527  000BC8                     i2u6047_40:
 45528                           
 45529                           ;arpeggio.c: 348: if(startingDirection == UP){
 45530  000BC8  5034               	movf	_startingDirection,w,c
 45531  000BCA  B4D8               	btfsc	status,2,c
 45532                           
 45533                           ;arpeggio.c: 350: if((overflow == 1) && (which_octave < 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 45534  000BCC  A602               	btfss	_overflow/(0+8),_overflow& (0+7),c
 45535  000BCE  D025               	goto	i2l5507
 45536  000BD0  BE32               	btfsc	_which_octave,7,c
 45537  000BD2  B402               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45538  000BD4  D022               	goto	i2l5507
 45539  000BD6  B002               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 45540  000BD8  D020               	goto	i2l5507
 45541                           
 45542                           ;arpeggio.c: 351: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((OCTAVES +
      +                           which_octave) * 12),velocity);
 45543  000BDA  5051               	movf	_velocity,w,c
 45544  000BDC  6EE6               	movwf	postinc1,c
 45545  000BDE  0EFF               	movlw	255
 45546  000BE0  6E0C               	movwf	??_playArpeggio& (0+255),c
 45547  000BE2  0EFF               	movlw	255
 45548  000BE4  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45549  000BE6  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45550  000BE8  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45551  000BEA  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45552  000BEC  500C               	movf	??_playArpeggio,w,c
 45553  000BEE  260E               	addwf	??_playArpeggio+2,f,c
 45554  000BF0  500D               	movf	??_playArpeggio+1,w,c
 45555  000BF2  220F               	addwfc	??_playArpeggio+3,f,c
 45556  000BF4  500E               	movf	??_playArpeggio+2,w,c
 45557  000BF6  242A               	addwf	_arpeggioPtr,w,c
 45558  000BF8  6ED9               	movwf	fsr2l,c
 45559  000BFA  500F               	movf	??_playArpeggio+3,w,c
 45560  000BFC  202B               	addwfc	_arpeggioPtr+1,w,c
 45561  000BFE  6EDA               	movwf	fsr2h,c
 45562  000C00  50DF               	movf	indf2,w,c
 45563  000C02  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45564  000C04  5032               	movf	_which_octave,w,c
 45565  000C06  244E               	addwf	_OCTAVES,w,c
 45566  000C08  0D0C               	mullw	12
 45567  000C0A  50F3               	movf	prodl,w,c
 45568  000C0C  2410               	addwf	??_playArpeggio+4,w,c
 45569  000C0E  6EE6               	movwf	postinc1,c
 45570  000C10  503E               	movf	_channel,w,c
 45571  000C12  6EE6               	movwf	postinc1,c
 45572  000C14  ECAD  F049         	call	_noteOff	;wreg free
 45573                           
 45574                           ;arpeggio.c: 352: overflow = 0;
 45575  000C18  9602               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45576  000C1A                     i2l5507:
 45577                           
 45578                           ;arpeggio.c: 353: }
 45579                           ;arpeggio.c: 354: }
 45580                           ;arpeggio.c: 356: if(startingDirection == DOWN) {
 45581  000C1A  0434               	decf	_startingDirection,w,c
 45582  000C1C  B4D8               	btfsc	status,2,c
 45583                           
 45584                           ;arpeggio.c: 358: if((overflow == 1) && (which_octave < 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 45585  000C1E  A602               	btfss	_overflow/(0+8),_overflow& (0+7),c
 45586  000C20  D024               	goto	i2l5509
 45587  000C22  BE32               	btfsc	_which_octave,7,c
 45588  000C24  B402               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45589  000C26  D021               	goto	i2l5509
 45590  000C28  B002               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 45591  000C2A  D01F               	goto	i2l5509
 45592                           
 45593                           ;arpeggio.c: 359: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((which_oct
      +                          ave + 1) * 12),velocity);
 45594  000C2C  5051               	movf	_velocity,w,c
 45595  000C2E  6EE6               	movwf	postinc1,c
 45596  000C30  0EFF               	movlw	255
 45597  000C32  6E0C               	movwf	??_playArpeggio& (0+255),c
 45598  000C34  0EFF               	movlw	255
 45599  000C36  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45600  000C38  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45601  000C3A  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45602  000C3C  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45603  000C3E  500C               	movf	??_playArpeggio,w,c
 45604  000C40  260E               	addwf	??_playArpeggio+2,f,c
 45605  000C42  500D               	movf	??_playArpeggio+1,w,c
 45606  000C44  220F               	addwfc	??_playArpeggio+3,f,c
 45607  000C46  500E               	movf	??_playArpeggio+2,w,c
 45608  000C48  242A               	addwf	_arpeggioPtr,w,c
 45609  000C4A  6ED9               	movwf	fsr2l,c
 45610  000C4C  500F               	movf	??_playArpeggio+3,w,c
 45611  000C4E  202B               	addwfc	_arpeggioPtr+1,w,c
 45612  000C50  6EDA               	movwf	fsr2h,c
 45613  000C52  50DF               	movf	indf2,w,c
 45614  000C54  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45615  000C56  2832               	incf	_which_octave,w,c
 45616  000C58  0D0C               	mullw	12
 45617  000C5A  50F3               	movf	prodl,w,c
 45618  000C5C  2410               	addwf	??_playArpeggio+4,w,c
 45619  000C5E  6EE6               	movwf	postinc1,c
 45620  000C60  503E               	movf	_channel,w,c
 45621  000C62  6EE6               	movwf	postinc1,c
 45622  000C64  ECAD  F049         	call	_noteOff	;wreg free
 45623                           
 45624                           ;arpeggio.c: 360: overflow = 0;
 45625  000C68  9602               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45626  000C6A                     i2l5509:
 45627                           
 45628                           ;arpeggio.c: 361: }
 45629                           ;arpeggio.c: 362: }
 45630                           ;arpeggio.c: 364: if(octave_overflow == 1){
 45631  000C6A  A402               	btfss	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45632  000C6C  D06B               	goto	i2l5518
 45633                           
 45634                           ;arpeggio.c: 366: if(startingDirection == UP){
 45635  000C6E  5034               	movf	_startingDirection,w,c
 45636  000C70  A4D8               	btfss	status,2,c
 45637  000C72  D025               	goto	i2l5511
 45638                           
 45639                           ;arpeggio.c: 368: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )) + (((OCTAVES * - 1) + OCTAVES) * 12),velocity);}
 45640  000C74  BE01               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 45641  000C76  D022               	goto	i2l5512
 45642  000C78  5051               	movf	_velocity,w,c
 45643  000C7A  6EE6               	movwf	postinc1,c
 45644  000C7C  0EFF               	movlw	255
 45645  000C7E  6E0C               	movwf	??_playArpeggio& (0+255),c
 45646  000C80  0EFF               	movlw	255
 45647  000C82  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45648  000C84  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45649  000C86  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45650  000C88  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45651  000C8A  500C               	movf	??_playArpeggio,w,c
 45652  000C8C  260E               	addwf	??_playArpeggio+2,f,c
 45653  000C8E  500D               	movf	??_playArpeggio+1,w,c
 45654  000C90  220F               	addwfc	??_playArpeggio+3,f,c
 45655  000C92  500E               	movf	??_playArpeggio+2,w,c
 45656  000C94  242A               	addwf	_arpeggioPtr,w,c
 45657  000C96  6ED9               	movwf	fsr2l,c
 45658  000C98  500F               	movf	??_playArpeggio+3,w,c
 45659  000C9A  202B               	addwfc	_arpeggioPtr+1,w,c
 45660  000C9C  6EDA               	movwf	fsr2h,c
 45661  000C9E  50DF               	movf	indf2,w,c
 45662  000CA0  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45663  000CA2  504E               	movf	_OCTAVES,w,c
 45664  000CA4  0D01               	mullw	1
 45665  000CA6  50F3               	movf	prodl,w,c
 45666  000CA8  0800               	sublw	0
 45667  000CAA  244E               	addwf	_OCTAVES,w,c
 45668  000CAC  0D0C               	mullw	12
 45669  000CAE  50F3               	movf	prodl,w,c
 45670  000CB0  2410               	addwf	??_playArpeggio+4,w,c
 45671  000CB2  6EE6               	movwf	postinc1,c
 45672  000CB4  503E               	movf	_channel,w,c
 45673  000CB6  6EE6               	movwf	postinc1,c
 45674  000CB8  ECAD  F049         	call	_noteOff	;wreg free
 45675  000CBC                     i2l5512:
 45676                           
 45677                           ;arpeggio.c: 369: octave_overflow = 0;
 45678  000CBC  9402               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45679  000CBE                     i2l5511:
 45680                           
 45681                           ;arpeggio.c: 370: }
 45682                           ;arpeggio.c: 372: if(startingDirection == DOWN){
 45683  000CBE  0434               	decf	_startingDirection,w,c
 45684  000CC0  A4D8               	btfss	status,2,c
 45685  000CC2  D026               	goto	i2l5513
 45686                           
 45687                           ;arpeggio.c: 374: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )) + (((OCTAVES * - 1) + 1) * 12),velocity);}
 45688  000CC4  BE01               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 45689  000CC6  D023               	goto	i2l5514
 45690  000CC8  5051               	movf	_velocity,w,c
 45691  000CCA  6EE6               	movwf	postinc1,c
 45692  000CCC  0EFF               	movlw	255
 45693  000CCE  6E0C               	movwf	??_playArpeggio& (0+255),c
 45694  000CD0  0EFF               	movlw	255
 45695  000CD2  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45696  000CD4  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45697  000CD6  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45698  000CD8  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45699  000CDA  500C               	movf	??_playArpeggio,w,c
 45700  000CDC  260E               	addwf	??_playArpeggio+2,f,c
 45701  000CDE  500D               	movf	??_playArpeggio+1,w,c
 45702  000CE0  220F               	addwfc	??_playArpeggio+3,f,c
 45703  000CE2  500E               	movf	??_playArpeggio+2,w,c
 45704  000CE4  242A               	addwf	_arpeggioPtr,w,c
 45705  000CE6  6ED9               	movwf	fsr2l,c
 45706  000CE8  500F               	movf	??_playArpeggio+3,w,c
 45707  000CEA  202B               	addwfc	_arpeggioPtr+1,w,c
 45708  000CEC  6EDA               	movwf	fsr2h,c
 45709  000CEE  50DF               	movf	indf2,w,c
 45710  000CF0  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45711  000CF2  504E               	movf	_OCTAVES,w,c
 45712  000CF4  0D01               	mullw	1
 45713  000CF6  50F3               	movf	prodl,w,c
 45714  000CF8  0800               	sublw	0
 45715  000CFA  6E11               	movwf	(??_playArpeggio+5)& (0+255),c
 45716  000CFC  2811               	incf	??_playArpeggio+5,w,c
 45717  000CFE  0D0C               	mullw	12
 45718  000D00  50F3               	movf	prodl,w,c
 45719  000D02  2410               	addwf	??_playArpeggio+4,w,c
 45720  000D04  6EE6               	movwf	postinc1,c
 45721  000D06  503E               	movf	_channel,w,c
 45722  000D08  6EE6               	movwf	postinc1,c
 45723  000D0A  ECAD  F049         	call	_noteOff	;wreg free
 45724  000D0E                     i2l5514:
 45725                           
 45726                           ;arpeggio.c: 375: octave_overflow = 0;
 45727  000D0E  9402               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45728  000D10                     i2l5513:
 45729                           
 45730                           ;arpeggio.c: 376: }
 45731                           ;arpeggio.c: 380: if(skipFirstLast == 1){
 45732  000D10  A803               	btfss	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 45733  000D12  D012               	goto	i2l5517
 45734                           
 45735                           ;arpeggio.c: 381: if(NUM_NOTES_PRESSED > 1){
 45736  000D14  0E01               	movlw	1
 45737  000D16  642F               	cpfsgt	_NUM_NOTES_PRESSED,c
 45738  000D18  D003               	goto	i2l5516
 45739                           
 45740                           ;arpeggio.c: 382: which_note = 1;
 45741  000D1A  0E01               	movlw	1
 45742  000D1C  6E33               	movwf	_which_note,c
 45743                           
 45744                           ;arpeggio.c: 383: suppress_note_off = 1;
 45745  000D1E  8802               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45746  000D20                     i2l5516:
 45747                           
 45748                           ;arpeggio.c: 384: }
 45749                           ;arpeggio.c: 388: if((NUM_NOTES_PRESSED == 1) && (OCTAVES > 1)){
 45750  000D20  042F               	decf	_NUM_NOTES_PRESSED,w,c
 45751  000D22  A4D8               	btfss	status,2,c
 45752  000D24  D009               	goto	i2l5517
 45753  000D26  0E01               	movlw	1
 45754  000D28  644E               	cpfsgt	_OCTAVES,c
 45755  000D2A  D006               	goto	i2l5517
 45756                           
 45757                           ;arpeggio.c: 389: flag1 = 1;
 45758  000D2C  8002               	bsf	_flag1/(0+8),_flag1& (0+7),c
 45759                           
 45760                           ;arpeggio.c: 391: which_note = 0;
 45761  000D2E  0E00               	movlw	0
 45762  000D30  6E33               	movwf	_which_note,c
 45763                           
 45764                           ;arpeggio.c: 392: which_octave++;
 45765  000D32  2A32               	incf	_which_octave,f,c
 45766                           
 45767                           ;arpeggio.c: 393: stored_octave = which_octave;
 45768  000D34  C032  F031         	movff	_which_octave,_stored_octave
 45769  000D38                     i2l5517:
 45770                           
 45771                           ;arpeggio.c: 394: }
 45772                           ;arpeggio.c: 395: }
 45773                           ;arpeggio.c: 397: if(ARPEGGIO_TYPE == DOWN_UP) {ARPEGGIO_TYPE = UP_DOWN;}
 45774  000D38  0E03               	movlw	3
 45775  000D3A  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45776  000D3C  A4D8               	btfss	status,2,c
 45777  000D3E  D002               	goto	i2l5518
 45778  000D40  0E02               	movlw	2
 45779  000D42  6E35               	movwf	_ARPEGGIO_TYPE,c
 45780  000D44                     i2l5518:
 45781                           
 45782                           ;arpeggio.c: 398: }
 45783                           ;arpeggio.c: 399: }
 45784                           ;arpeggio.c: 402: if(ARPEGGIO_TYPE == RANDOM | ARPEGGIO_TYPE == RANDOM_NON_REPEATING){
 45785  000D44  0E05               	movlw	5
 45786  000D46  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45787  000D48  B4D8               	btfsc	status,2,c
 45788  000D4A  D004               	goto	i2u6069_40
 45789  000D4C  0E04               	movlw	4
 45790  000D4E  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45791  000D50  A4D8               	btfss	status,2,c
 45792  000D52  D05A               	goto	i2l5524
 45793  000D54                     i2u6069_40:
 45794                           
 45795                           ;arpeggio.c: 404: last_octave = which_octave;
 45796  000D54  C032  F17D         	movff	_which_octave,_last_octave
 45797                           
 45798                           ;arpeggio.c: 406: if((overflow == 1) && (flag1 == 0)){
 45799  000D58  B602               	btfsc	_overflow/(0+8),_overflow& (0+7),c
 45800  000D5A  B002               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 45801  000D5C  D00E               	goto	i2l5522
 45802                           
 45803                           ;arpeggio.c: 407: noteOff(channel,last_note + (last_octave * 12),velocity);
 45804  000D5E  5051               	movf	_velocity,w,c
 45805  000D60  6EE6               	movwf	postinc1,c
 45806  000D62  0101               	movlb	1	; () banked
 45807  000D64  517D               	movf	_last_octave& (0+255),w,b
 45808  000D66  0D0C               	mullw	12
 45809  000D68  50F3               	movf	prodl,w,c
 45810  000D6A  0100               	movlb	0	; () banked
 45811  000D6C  25EC               	addwf	_last_note& (0+255),w,b
 45812  000D6E  6EE6               	movwf	postinc1,c
 45813  000D70  503E               	movf	_channel,w,c
 45814  000D72  6EE6               	movwf	postinc1,c
 45815  000D74  ECAD  F049         	call	_noteOff	;wreg free
 45816                           
 45817                           ;arpeggio.c: 408: overflow = 0;
 45818  000D78  9602               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45819  000D7A                     i2l5522:
 45820                           
 45821                           ;arpeggio.c: 409: }
 45822                           ;arpeggio.c: 411: if((which_note > 0) && (suppress_note_off == 0)){noteOff(channel,*(arp
      +                          eggioPtr + (which_note - 1)) + (which_octave * 12),velocity);}
 45823  000D7A  5033               	movf	_which_note,w,c
 45824  000D7C  A4D8               	btfss	status,2,c
 45825  000D7E  B802               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45826  000D80  D01E               	goto	i2l5523
 45827  000D82  5051               	movf	_velocity,w,c
 45828  000D84  6EE6               	movwf	postinc1,c
 45829  000D86  0EFF               	movlw	255
 45830  000D88  6E0C               	movwf	??_playArpeggio& (0+255),c
 45831  000D8A  0EFF               	movlw	255
 45832  000D8C  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45833  000D8E  5033               	movf	_which_note,w,c
 45834  000D90  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45835  000D92  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45836  000D94  500C               	movf	??_playArpeggio,w,c
 45837  000D96  260E               	addwf	??_playArpeggio+2,f,c
 45838  000D98  500D               	movf	??_playArpeggio+1,w,c
 45839  000D9A  220F               	addwfc	??_playArpeggio+3,f,c
 45840  000D9C  500E               	movf	??_playArpeggio+2,w,c
 45841  000D9E  242A               	addwf	_arpeggioPtr,w,c
 45842  000DA0  6ED9               	movwf	fsr2l,c
 45843  000DA2  500F               	movf	??_playArpeggio+3,w,c
 45844  000DA4  202B               	addwfc	_arpeggioPtr+1,w,c
 45845  000DA6  6EDA               	movwf	fsr2h,c
 45846  000DA8  50DF               	movf	indf2,w,c
 45847  000DAA  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45848  000DAC  5032               	movf	_which_octave,w,c
 45849  000DAE  0D0C               	mullw	12
 45850  000DB0  50F3               	movf	prodl,w,c
 45851  000DB2  2410               	addwf	??_playArpeggio+4,w,c
 45852  000DB4  6EE6               	movwf	postinc1,c
 45853  000DB6  503E               	movf	_channel,w,c
 45854  000DB8  6EE6               	movwf	postinc1,c
 45855  000DBA  ECAD  F049         	call	_noteOff	;wreg free
 45856  000DBE                     i2l5523:
 45857                           
 45858                           ;arpeggio.c: 412: which_octave = rand() % OCTAVES;
 45859  000DBE  504E               	movf	_OCTAVES,w,c
 45860  000DC0  6EE6               	movwf	postinc1,c
 45861  000DC2  0E00               	movlw	0
 45862  000DC4  6EE6               	movwf	postinc1,c
 45863  000DC6  EC53  F041         	call	_rand	;wreg free
 45864  000DCA  C03F  FFE6         	movff	btemp,postinc1
 45865  000DCE  C040  FFE6         	movff	btemp+1,postinc1
 45866  000DD2  ECD7  F033         	call	___awmod	;wreg free
 45867  000DD6  503F               	movf	btemp,w,c
 45868  000DD8  6E32               	movwf	_which_octave,c
 45869                           
 45870                           ;arpeggio.c: 413: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           (which_octave * 12),velocity);}
 45871  000DDA  BA02               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 45872  000DDC  D015               	goto	i2l5524
 45873  000DDE  5051               	movf	_velocity,w,c
 45874  000DE0  6EE6               	movwf	postinc1,c
 45875  000DE2  5033               	movf	_which_note,w,c
 45876  000DE4  0D01               	mullw	1
 45877  000DE6  50F3               	movf	prodl,w,c
 45878  000DE8  242A               	addwf	_arpeggioPtr,w,c
 45879  000DEA  6ED9               	movwf	fsr2l,c
 45880  000DEC  50F4               	movf	prodh,w,c
 45881  000DEE  202B               	addwfc	_arpeggioPtr+1,w,c
 45882  000DF0  6EDA               	movwf	fsr2h,c
 45883  000DF2  50DF               	movf	indf2,w,c
 45884  000DF4  6E0C               	movwf	??_playArpeggio& (0+255),c
 45885  000DF6  5032               	movf	_which_octave,w,c
 45886  000DF8  0D0C               	mullw	12
 45887  000DFA  50F3               	movf	prodl,w,c
 45888  000DFC  240C               	addwf	??_playArpeggio,w,c
 45889  000DFE  6EE6               	movwf	postinc1,c
 45890  000E00  503E               	movf	_channel,w,c
 45891  000E02  6EE6               	movwf	postinc1,c
 45892  000E04  ECF8  F044         	call	_noteOn	;wreg free
 45893  000E08                     i2l5524:
 45894                           
 45895                           ;arpeggio.c: 414: }
 45896                           ;arpeggio.c: 416: if((ARPEGGIO_TYPE == UP) | (ARPEGGIO_TYPE == UP_DOWN | ARPEGGIO_TYPE =
      +                          = AS_PRESSED)) {
 45897  000E08  5035               	movf	_ARPEGGIO_TYPE,w,c
 45898  000E0A  B4D8               	btfsc	status,2,c
 45899  000E0C  D008               	goto	i2u6077_40
 45900  000E0E  0E02               	movlw	2
 45901  000E10  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45902  000E12  B4D8               	btfsc	status,2,c
 45903  000E14  D004               	goto	i2u6077_40
 45904  000E16  0E06               	movlw	6
 45905  000E18  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45906  000E1A  A4D8               	btfss	status,2,c
 45907  000E1C  D07F               	goto	i2l5535
 45908  000E1E                     i2u6077_40:
 45909                           
 45910                           ;arpeggio.c: 418: SORT_DIRECTION = 0;
 45911  000E1E  9A04               	bcf	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 45912                           
 45913                           ;arpeggio.c: 419: sort_pitches();
 45914  000E20  ECC0  F031         	call	_sort_pitches	;wreg free
 45915                           
 45916                           ;arpeggio.c: 421: if(startingDirection == UP){
 45917  000E24  5034               	movf	_startingDirection,w,c
 45918  000E26  A4D8               	btfss	status,2,c
 45919  000E28  D039               	goto	i2l5532
 45920                           
 45921                           ;arpeggio.c: 423: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + (which_octave * 12),velocity);}
 45922  000E2A  5033               	movf	_which_note,w,c
 45923  000E2C  A4D8               	btfss	status,2,c
 45924  000E2E  B802               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45925  000E30  D01E               	goto	i2l5531
 45926  000E32  5051               	movf	_velocity,w,c
 45927  000E34  6EE6               	movwf	postinc1,c
 45928  000E36  0EFF               	movlw	255
 45929  000E38  6E0C               	movwf	??_playArpeggio& (0+255),c
 45930  000E3A  0EFF               	movlw	255
 45931  000E3C  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45932  000E3E  5033               	movf	_which_note,w,c
 45933  000E40  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45934  000E42  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45935  000E44  500C               	movf	??_playArpeggio,w,c
 45936  000E46  260E               	addwf	??_playArpeggio+2,f,c
 45937  000E48  500D               	movf	??_playArpeggio+1,w,c
 45938  000E4A  220F               	addwfc	??_playArpeggio+3,f,c
 45939  000E4C  500E               	movf	??_playArpeggio+2,w,c
 45940  000E4E  242A               	addwf	_arpeggioPtr,w,c
 45941  000E50  6ED9               	movwf	fsr2l,c
 45942  000E52  500F               	movf	??_playArpeggio+3,w,c
 45943  000E54  202B               	addwfc	_arpeggioPtr+1,w,c
 45944  000E56  6EDA               	movwf	fsr2h,c
 45945  000E58  50DF               	movf	indf2,w,c
 45946  000E5A  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45947  000E5C  5032               	movf	_which_octave,w,c
 45948  000E5E  0D0C               	mullw	12
 45949  000E60  50F3               	movf	prodl,w,c
 45950  000E62  2410               	addwf	??_playArpeggio+4,w,c
 45951  000E64  6EE6               	movwf	postinc1,c
 45952  000E66  503E               	movf	_channel,w,c
 45953  000E68  6EE6               	movwf	postinc1,c
 45954  000E6A  ECAD  F049         	call	_noteOff	;wreg free
 45955  000E6E                     i2l5531:
 45956                           
 45957                           ;arpeggio.c: 424: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           (which_octave * 12),velocity);}
 45958  000E6E  BA02               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 45959  000E70  D015               	goto	i2l5532
 45960  000E72  5051               	movf	_velocity,w,c
 45961  000E74  6EE6               	movwf	postinc1,c
 45962  000E76  5033               	movf	_which_note,w,c
 45963  000E78  0D01               	mullw	1
 45964  000E7A  50F3               	movf	prodl,w,c
 45965  000E7C  242A               	addwf	_arpeggioPtr,w,c
 45966  000E7E  6ED9               	movwf	fsr2l,c
 45967  000E80  50F4               	movf	prodh,w,c
 45968  000E82  202B               	addwfc	_arpeggioPtr+1,w,c
 45969  000E84  6EDA               	movwf	fsr2h,c
 45970  000E86  50DF               	movf	indf2,w,c
 45971  000E88  6E0C               	movwf	??_playArpeggio& (0+255),c
 45972  000E8A  5032               	movf	_which_octave,w,c
 45973  000E8C  0D0C               	mullw	12
 45974  000E8E  50F3               	movf	prodl,w,c
 45975  000E90  240C               	addwf	??_playArpeggio,w,c
 45976  000E92  6EE6               	movwf	postinc1,c
 45977  000E94  503E               	movf	_channel,w,c
 45978  000E96  6EE6               	movwf	postinc1,c
 45979  000E98  ECF8  F044         	call	_noteOn	;wreg free
 45980  000E9C                     i2l5532:
 45981                           
 45982                           ;arpeggio.c: 425: }
 45983                           ;arpeggio.c: 427: if(startingDirection == DOWN) {
 45984  000E9C  0434               	decf	_startingDirection,w,c
 45985  000E9E  A4D8               	btfss	status,2,c
 45986  000EA0  D03D               	goto	i2l5535
 45987                           
 45988                           ;arpeggio.c: 429: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + ((which_octave - (OCTAVES - 1)) * 12),velocity);}
 45989  000EA2  5033               	movf	_which_note,w,c
 45990  000EA4  A4D8               	btfss	status,2,c
 45991  000EA6  B802               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45992  000EA8  D020               	goto	i2l5534
 45993  000EAA  5051               	movf	_velocity,w,c
 45994  000EAC  6EE6               	movwf	postinc1,c
 45995  000EAE  0EFF               	movlw	255
 45996  000EB0  6E0C               	movwf	??_playArpeggio& (0+255),c
 45997  000EB2  0EFF               	movlw	255
 45998  000EB4  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45999  000EB6  5033               	movf	_which_note,w,c
 46000  000EB8  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 46001  000EBA  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 46002  000EBC  500C               	movf	??_playArpeggio,w,c
 46003  000EBE  260E               	addwf	??_playArpeggio+2,f,c
 46004  000EC0  500D               	movf	??_playArpeggio+1,w,c
 46005  000EC2  220F               	addwfc	??_playArpeggio+3,f,c
 46006  000EC4  500E               	movf	??_playArpeggio+2,w,c
 46007  000EC6  242A               	addwf	_arpeggioPtr,w,c
 46008  000EC8  6ED9               	movwf	fsr2l,c
 46009  000ECA  500F               	movf	??_playArpeggio+3,w,c
 46010  000ECC  202B               	addwfc	_arpeggioPtr+1,w,c
 46011  000ECE  6EDA               	movwf	fsr2h,c
 46012  000ED0  50DF               	movf	indf2,w,c
 46013  000ED2  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46014  000ED4  044E               	decf	_OCTAVES,w,c
 46015  000ED6  0800               	sublw	0
 46016  000ED8  2432               	addwf	_which_octave,w,c
 46017  000EDA  0D0C               	mullw	12
 46018  000EDC  50F3               	movf	prodl,w,c
 46019  000EDE  2410               	addwf	??_playArpeggio+4,w,c
 46020  000EE0  6EE6               	movwf	postinc1,c
 46021  000EE2  503E               	movf	_channel,w,c
 46022  000EE4  6EE6               	movwf	postinc1,c
 46023  000EE6  ECAD  F049         	call	_noteOff	;wreg free
 46024  000EEA                     i2l5534:
 46025                           
 46026                           ;arpeggio.c: 430: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           ((which_octave - (OCTAVES - 1)) * 12),velocity);}
 46027  000EEA  BA02               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 46028  000EEC  D017               	goto	i2l5535
 46029  000EEE  5051               	movf	_velocity,w,c
 46030  000EF0  6EE6               	movwf	postinc1,c
 46031  000EF2  5033               	movf	_which_note,w,c
 46032  000EF4  0D01               	mullw	1
 46033  000EF6  50F3               	movf	prodl,w,c
 46034  000EF8  242A               	addwf	_arpeggioPtr,w,c
 46035  000EFA  6ED9               	movwf	fsr2l,c
 46036  000EFC  50F4               	movf	prodh,w,c
 46037  000EFE  202B               	addwfc	_arpeggioPtr+1,w,c
 46038  000F00  6EDA               	movwf	fsr2h,c
 46039  000F02  50DF               	movf	indf2,w,c
 46040  000F04  6E0C               	movwf	??_playArpeggio& (0+255),c
 46041  000F06  044E               	decf	_OCTAVES,w,c
 46042  000F08  0800               	sublw	0
 46043  000F0A  2432               	addwf	_which_octave,w,c
 46044  000F0C  0D0C               	mullw	12
 46045  000F0E  50F3               	movf	prodl,w,c
 46046  000F10  240C               	addwf	??_playArpeggio,w,c
 46047  000F12  6EE6               	movwf	postinc1,c
 46048  000F14  503E               	movf	_channel,w,c
 46049  000F16  6EE6               	movwf	postinc1,c
 46050  000F18  ECF8  F044         	call	_noteOn	;wreg free
 46051  000F1C                     i2l5535:
 46052                           
 46053                           ;arpeggio.c: 431: }
 46054                           ;arpeggio.c: 432: }
 46055                           ;arpeggio.c: 434: if((ARPEGGIO_TYPE == DOWN) | (ARPEGGIO_TYPE == DOWN_UP)) {
 46056  000F1C  0435               	decf	_ARPEGGIO_TYPE,w,c
 46057  000F1E  B4D8               	btfsc	status,2,c
 46058  000F20  D004               	goto	i2u6087_40
 46059  000F22  0E03               	movlw	3
 46060  000F24  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46061  000F26  A4D8               	btfss	status,2,c
 46062  000F28  D082               	goto	i2l5544
 46063  000F2A                     i2u6087_40:
 46064                           
 46065                           ;arpeggio.c: 436: SORT_DIRECTION = 1;
 46066  000F2A  8A04               	bsf	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 46067                           
 46068                           ;arpeggio.c: 437: sort_pitches();
 46069  000F2C  ECC0  F031         	call	_sort_pitches	;wreg free
 46070                           
 46071                           ;arpeggio.c: 439: suppress_note_on = 0;
 46072  000F30  9A02               	bcf	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 46073                           
 46074                           ;arpeggio.c: 441: if(startingDirection == UP){
 46075  000F32  5034               	movf	_startingDirection,w,c
 46076  000F34  A4D8               	btfss	status,2,c
 46077  000F36  D03F               	goto	i2l5541
 46078                           
 46079                           ;arpeggio.c: 443: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + ((which_octave + (OCTAVES - 1)) * 12),velocity);}
 46080  000F38  5033               	movf	_which_note,w,c
 46081  000F3A  A4D8               	btfss	status,2,c
 46082  000F3C  B802               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 46083  000F3E  D021               	goto	i2l5540
 46084  000F40  5051               	movf	_velocity,w,c
 46085  000F42  6EE6               	movwf	postinc1,c
 46086  000F44  0EFF               	movlw	255
 46087  000F46  6E0C               	movwf	??_playArpeggio& (0+255),c
 46088  000F48  0EFF               	movlw	255
 46089  000F4A  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 46090  000F4C  5033               	movf	_which_note,w,c
 46091  000F4E  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 46092  000F50  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 46093  000F52  500C               	movf	??_playArpeggio,w,c
 46094  000F54  260E               	addwf	??_playArpeggio+2,f,c
 46095  000F56  500D               	movf	??_playArpeggio+1,w,c
 46096  000F58  220F               	addwfc	??_playArpeggio+3,f,c
 46097  000F5A  500E               	movf	??_playArpeggio+2,w,c
 46098  000F5C  242A               	addwf	_arpeggioPtr,w,c
 46099  000F5E  6ED9               	movwf	fsr2l,c
 46100  000F60  500F               	movf	??_playArpeggio+3,w,c
 46101  000F62  202B               	addwfc	_arpeggioPtr+1,w,c
 46102  000F64  6EDA               	movwf	fsr2h,c
 46103  000F66  50DF               	movf	indf2,w,c
 46104  000F68  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46105  000F6A  504E               	movf	_OCTAVES,w,c
 46106  000F6C  2432               	addwf	_which_octave,w,c
 46107  000F6E  6E11               	movwf	(??_playArpeggio+5)& (0+255),c
 46108  000F70  0411               	decf	??_playArpeggio+5,w,c
 46109  000F72  0D0C               	mullw	12
 46110  000F74  50F3               	movf	prodl,w,c
 46111  000F76  2410               	addwf	??_playArpeggio+4,w,c
 46112  000F78  6EE6               	movwf	postinc1,c
 46113  000F7A  503E               	movf	_channel,w,c
 46114  000F7C  6EE6               	movwf	postinc1,c
 46115  000F7E  ECAD  F049         	call	_noteOff	;wreg free
 46116  000F82                     i2l5540:
 46117                           
 46118                           ;arpeggio.c: 444: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           ((which_octave + (OCTAVES - 1)) * 12),velocity);}
 46119  000F82  BA02               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 46120  000F84  D018               	goto	i2l5541
 46121  000F86  5051               	movf	_velocity,w,c
 46122  000F88  6EE6               	movwf	postinc1,c
 46123  000F8A  5033               	movf	_which_note,w,c
 46124  000F8C  0D01               	mullw	1
 46125  000F8E  50F3               	movf	prodl,w,c
 46126  000F90  242A               	addwf	_arpeggioPtr,w,c
 46127  000F92  6ED9               	movwf	fsr2l,c
 46128  000F94  50F4               	movf	prodh,w,c
 46129  000F96  202B               	addwfc	_arpeggioPtr+1,w,c
 46130  000F98  6EDA               	movwf	fsr2h,c
 46131  000F9A  50DF               	movf	indf2,w,c
 46132  000F9C  6E0C               	movwf	??_playArpeggio& (0+255),c
 46133  000F9E  504E               	movf	_OCTAVES,w,c
 46134  000FA0  2432               	addwf	_which_octave,w,c
 46135  000FA2  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 46136  000FA4  040D               	decf	??_playArpeggio+1,w,c
 46137  000FA6  0D0C               	mullw	12
 46138  000FA8  50F3               	movf	prodl,w,c
 46139  000FAA  240C               	addwf	??_playArpeggio,w,c
 46140  000FAC  6EE6               	movwf	postinc1,c
 46141  000FAE  503E               	movf	_channel,w,c
 46142  000FB0  6EE6               	movwf	postinc1,c
 46143  000FB2  ECF8  F044         	call	_noteOn	;wreg free
 46144  000FB6                     i2l5541:
 46145                           
 46146                           ;arpeggio.c: 445: }
 46147                           ;arpeggio.c: 447: if(startingDirection == DOWN){
 46148  000FB6  0434               	decf	_startingDirection,w,c
 46149  000FB8  A4D8               	btfss	status,2,c
 46150  000FBA  D039               	goto	i2l5544
 46151                           
 46152                           ;arpeggio.c: 449: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + ((which_octave) * 12),velocity);}
 46153  000FBC  5033               	movf	_which_note,w,c
 46154  000FBE  A4D8               	btfss	status,2,c
 46155  000FC0  B802               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 46156  000FC2  D01E               	goto	i2l5543
 46157  000FC4  5051               	movf	_velocity,w,c
 46158  000FC6  6EE6               	movwf	postinc1,c
 46159  000FC8  0EFF               	movlw	255
 46160  000FCA  6E0C               	movwf	??_playArpeggio& (0+255),c
 46161  000FCC  0EFF               	movlw	255
 46162  000FCE  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 46163  000FD0  5033               	movf	_which_note,w,c
 46164  000FD2  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 46165  000FD4  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 46166  000FD6  500C               	movf	??_playArpeggio,w,c
 46167  000FD8  260E               	addwf	??_playArpeggio+2,f,c
 46168  000FDA  500D               	movf	??_playArpeggio+1,w,c
 46169  000FDC  220F               	addwfc	??_playArpeggio+3,f,c
 46170  000FDE  500E               	movf	??_playArpeggio+2,w,c
 46171  000FE0  242A               	addwf	_arpeggioPtr,w,c
 46172  000FE2  6ED9               	movwf	fsr2l,c
 46173  000FE4  500F               	movf	??_playArpeggio+3,w,c
 46174  000FE6  202B               	addwfc	_arpeggioPtr+1,w,c
 46175  000FE8  6EDA               	movwf	fsr2h,c
 46176  000FEA  50DF               	movf	indf2,w,c
 46177  000FEC  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46178  000FEE  5032               	movf	_which_octave,w,c
 46179  000FF0  0D0C               	mullw	12
 46180  000FF2  50F3               	movf	prodl,w,c
 46181  000FF4  2410               	addwf	??_playArpeggio+4,w,c
 46182  000FF6  6EE6               	movwf	postinc1,c
 46183  000FF8  503E               	movf	_channel,w,c
 46184  000FFA  6EE6               	movwf	postinc1,c
 46185  000FFC  ECAD  F049         	call	_noteOff	;wreg free
 46186  001000                     i2l5543:
 46187                           
 46188                           ;arpeggio.c: 450: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           (which_octave * 12),velocity);}
 46189  001000  BA02               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 46190  001002  D015               	goto	i2l5544
 46191  001004  5051               	movf	_velocity,w,c
 46192  001006  6EE6               	movwf	postinc1,c
 46193  001008  5033               	movf	_which_note,w,c
 46194  00100A  0D01               	mullw	1
 46195  00100C  50F3               	movf	prodl,w,c
 46196  00100E  242A               	addwf	_arpeggioPtr,w,c
 46197  001010  6ED9               	movwf	fsr2l,c
 46198  001012  50F4               	movf	prodh,w,c
 46199  001014  202B               	addwfc	_arpeggioPtr+1,w,c
 46200  001016  6EDA               	movwf	fsr2h,c
 46201  001018  50DF               	movf	indf2,w,c
 46202  00101A  6E0C               	movwf	??_playArpeggio& (0+255),c
 46203  00101C  5032               	movf	_which_octave,w,c
 46204  00101E  0D0C               	mullw	12
 46205  001020  50F3               	movf	prodl,w,c
 46206  001022  240C               	addwf	??_playArpeggio,w,c
 46207  001024  6EE6               	movwf	postinc1,c
 46208  001026  503E               	movf	_channel,w,c
 46209  001028  6EE6               	movwf	postinc1,c
 46210  00102A  ECF8  F044         	call	_noteOn	;wreg free
 46211  00102E                     i2l5544:
 46212                           
 46213                           ;arpeggio.c: 451: }
 46214                           ;arpeggio.c: 452: }
 46215                           ;arpeggio.c: 454: last_note = *(arpeggioPtr + which_note);
 46216  00102E  5033               	movf	_which_note,w,c
 46217  001030  0D01               	mullw	1
 46218  001032  50F3               	movf	prodl,w,c
 46219  001034  242A               	addwf	_arpeggioPtr,w,c
 46220  001036  6ED9               	movwf	fsr2l,c
 46221  001038  50F4               	movf	prodh,w,c
 46222  00103A  202B               	addwfc	_arpeggioPtr+1,w,c
 46223  00103C  6EDA               	movwf	fsr2h,c
 46224  00103E  50DF               	movf	indf2,w,c
 46225  001040  0100               	movlb	0	; () banked
 46226  001042  6FEC               	movwf	_last_note& (0+255),b
 46227                           
 46228                           ; BSR set to: 0
 46229                           ;arpeggio.c: 455: which_note++;
 46230  001044  2A33               	incf	_which_note,f,c
 46231                           
 46232                           ; BSR set to: 0
 46233                           ;arpeggio.c: 456: suppress_note_off = 0;
 46234  001046  9802               	bcf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 46235                           
 46236                           ; BSR set to: 0
 46237                           ;arpeggio.c: 468: if((ARPEGGIO_TYPE == UP) | (ARPEGGIO_TYPE == UP_DOWN) | (ARPEGGIO_TYPE
      +                           == RANDOM) | (ARPEGGIO_TYPE == RANDOM_NON_REPEATING) | ARPEGGIO_TYPE == AS_PRESSED) {
 46238  001048  5035               	movf	_ARPEGGIO_TYPE,w,c
 46239  00104A  B4D8               	btfsc	status,2,c
 46240  00104C  D010               	goto	i2u6100_40
 46241                           
 46242                           ; BSR set to: 0
 46243  00104E  0E02               	movlw	2
 46244  001050  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46245  001052  B4D8               	btfsc	status,2,c
 46246  001054  D00C               	goto	i2u6100_40
 46247                           
 46248                           ; BSR set to: 0
 46249  001056  0E05               	movlw	5
 46250  001058  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46251  00105A  B4D8               	btfsc	status,2,c
 46252  00105C  D008               	goto	i2u6100_40
 46253                           
 46254                           ; BSR set to: 0
 46255  00105E  0E04               	movlw	4
 46256  001060  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46257  001062  B4D8               	btfsc	status,2,c
 46258  001064  D004               	goto	i2u6100_40
 46259                           
 46260                           ; BSR set to: 0
 46261  001066  0E06               	movlw	6
 46262  001068  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46263  00106A  A4D8               	btfss	status,2,c
 46264  00106C  D037               	goto	i2l5556
 46265  00106E                     i2u6100_40:
 46266                           
 46267                           ; BSR set to: 0
 46268                           ;arpeggio.c: 470: if(which_note >= (NUM_NOTES_PRESSED)){
 46269                           
 46270                           ; BSR set to: 0
 46271  00106E  502F               	movf	_NUM_NOTES_PRESSED,w,c
 46272  001070  5C33               	subwf	_which_note,w,c
 46273  001072  A0D8               	btfss	status,0,c
 46274  001074  D01D               	goto	i2l5555
 46275                           
 46276                           ; BSR set to: 0
 46277                           ;arpeggio.c: 472: which_note = 0;
 46278  001076  0E00               	movlw	0
 46279  001078  6E33               	movwf	_which_note,c
 46280                           
 46281                           ;arpeggio.c: 475: if((ARPEGGIO_TYPE == UP) | (ARPEGGIO_TYPE == UP_DOWN) | ARPEGGIO_TYPE 
      +                          == AS_PRESSED) {
 46282  00107A  5035               	movf	_ARPEGGIO_TYPE,w,c
 46283  00107C  B4D8               	btfsc	status,2,c
 46284  00107E  D007               	goto	i2u6104_40
 46285                           
 46286                           ; BSR set to: 0
 46287  001080  0E02               	movlw	2
 46288  001082  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46289  001084  B4D8               	btfsc	status,2,c
 46290  001086  D003               	goto	i2u6104_40
 46291                           
 46292                           ; BSR set to: 0
 46293  001088  0E06               	movlw	6
 46294  00108A  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46295  00108C  B4D8               	btfsc	status,2,c
 46296  00108E                     i2u6104_40:
 46297                           
 46298                           ; BSR set to: 0
 46299                           ;arpeggio.c: 476: which_octave++;
 46300                           
 46301                           ; BSR set to: 0
 46302  00108E  2A32               	incf	_which_octave,f,c
 46303                           
 46304                           ; BSR set to: 0
 46305                           ;arpeggio.c: 477: }
 46306                           ;arpeggio.c: 479: overflow = 1;
 46307                           
 46308                           ; BSR set to: 0
 46309  001090  8602               	bsf	_overflow/(0+8),_overflow& (0+7),c
 46310                           
 46311                           ; BSR set to: 0
 46312                           ;arpeggio.c: 480: flag1 = 0;
 46313  001092  9002               	bcf	_flag1/(0+8),_flag1& (0+7),c
 46314                           
 46315                           ; BSR set to: 0
 46316                           ;arpeggio.c: 483: if(ARPEGGIO_TYPE == RANDOM) {
 46317  001094  0E05               	movlw	5
 46318  001096  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46319  001098  B4D8               	btfsc	status,2,c
 46320                           
 46321                           ; BSR set to: 0
 46322                           ;arpeggio.c: 484: if(AUTO_RANDOMIZE == 0) {random_pitches();}
 46323  00109A  BA03               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 46324  00109C  D002               	goto	i2l5553
 46325                           
 46326                           ; BSR set to: 0
 46327  00109E  EC31  F045         	call	_random_pitches	;wreg free
 46328  0010A2                     i2l5553:
 46329                           
 46330                           ;arpeggio.c: 485: }
 46331                           ;arpeggio.c: 486: if(ARPEGGIO_TYPE == RANDOM_NON_REPEATING) {
 46332  0010A2  0E04               	movlw	4
 46333  0010A4  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46334  0010A6  B4D8               	btfsc	status,2,c
 46335                           
 46336                           ;arpeggio.c: 487: if(AUTO_RANDOMIZE == 0) {random_pitches_non_repeating();}
 46337  0010A8  BA03               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 46338  0010AA  D002               	goto	i2l5555
 46339  0010AC  ECDF  F03B         	call	_random_pitches_non_repeating	;wreg free
 46340  0010B0                     i2l5555:
 46341                           
 46342                           ;arpeggio.c: 488: }
 46343                           ;arpeggio.c: 489: }
 46344                           ;arpeggio.c: 491: if(which_octave>=OCTAVES) {
 46345  0010B0  504E               	movf	_OCTAVES,w,c
 46346  0010B2  6E0C               	movwf	??_playArpeggio& (0+255),c
 46347  0010B4  6A0D               	clrf	(??_playArpeggio+1)& (0+255),c
 46348  0010B6  C032  F00E         	movff	_which_octave,??_playArpeggio+2
 46349  0010BA  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 46350  0010BC  BE0E               	btfsc	(??_playArpeggio+2)& (0+255),7,c
 46351  0010BE  060F               	decf	(??_playArpeggio+3)& (0+255),f,c
 46352  0010C0  500C               	movf	??_playArpeggio,w,c
 46353  0010C2  5C0E               	subwf	??_playArpeggio+2,w,c
 46354  0010C4  500F               	movf	??_playArpeggio+3,w,c
 46355  0010C6  0A80               	xorlw	128
 46356  0010C8  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46357  0010CA  500D               	movf	??_playArpeggio+1,w,c
 46358  0010CC  0A80               	xorlw	128
 46359  0010CE  5810               	subwfb	(??_playArpeggio+4)& (0+255),w,c
 46360  0010D0  A0D8               	btfss	status,0,c
 46361  0010D2  D004               	goto	i2l5556
 46362                           
 46363                           ;arpeggio.c: 492: which_octave = 0;
 46364  0010D4  0E00               	movlw	0
 46365  0010D6  6E32               	movwf	_which_octave,c
 46366                           
 46367                           ;arpeggio.c: 493: octave_overflow = 1;
 46368  0010D8  8402               	bsf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 46369                           
 46370                           ;arpeggio.c: 494: flag2 = 0;
 46371  0010DA  9E01               	bcf	_flag2/(0+8),_flag2& (0+7),c
 46372  0010DC                     i2l5556:
 46373                           
 46374                           ;arpeggio.c: 495: }
 46375                           ;arpeggio.c: 496: }
 46376                           ;arpeggio.c: 499: if((ARPEGGIO_TYPE == DOWN) | (ARPEGGIO_TYPE == DOWN_UP)) {
 46377  0010DC  0435               	decf	_ARPEGGIO_TYPE,w,c
 46378  0010DE  B4D8               	btfsc	status,2,c
 46379  0010E0  D004               	goto	i2u6111_40
 46380  0010E2  0E03               	movlw	3
 46381  0010E4  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46382  0010E6  A4D8               	btfss	status,2,c
 46383  0010E8  0012               	return	
 46384  0010EA                     i2u6111_40:
 46385                           
 46386                           ;arpeggio.c: 501: if(which_note>=(NUM_NOTES_PRESSED)){
 46387  0010EA  502F               	movf	_NUM_NOTES_PRESSED,w,c
 46388  0010EC  5C33               	subwf	_which_note,w,c
 46389  0010EE  A0D8               	btfss	status,0,c
 46390  0010F0  D005               	goto	i2l5560
 46391                           
 46392                           ;arpeggio.c: 502: which_note = 0;
 46393  0010F2  0E00               	movlw	0
 46394  0010F4  6E33               	movwf	_which_note,c
 46395                           
 46396                           ;arpeggio.c: 503: which_octave--;
 46397  0010F6  0632               	decf	_which_octave,f,c
 46398                           
 46399                           ;arpeggio.c: 504: overflow = 1;
 46400  0010F8  8602               	bsf	_overflow/(0+8),_overflow& (0+7),c
 46401                           
 46402                           ;arpeggio.c: 505: flag1 = 0;
 46403  0010FA  9002               	bcf	_flag1/(0+8),_flag1& (0+7),c
 46404  0010FC                     i2l5560:
 46405                           
 46406                           ;arpeggio.c: 506: }
 46407                           ;arpeggio.c: 507: if(which_octave <= (OCTAVES * -1)) {
 46408  0010FC  C032  F00C         	movff	_which_octave,??_playArpeggio
 46409  001100  6A0D               	clrf	(??_playArpeggio+1)& (0+255),c
 46410  001102  BE0C               	btfsc	??_playArpeggio& (0+255),7,c
 46411  001104  060D               	decf	(??_playArpeggio+1)& (0+255),f,c
 46412  001106  504E               	movf	_OCTAVES,w,c
 46413  001108  0D01               	mullw	1
 46414  00110A  1EF3               	comf	prodl,f,c
 46415  00110C  1EF4               	comf	prodh,f,c
 46416  00110E  4AF3               	infsnz	prodl,f,c
 46417  001110  2AF4               	incf	prodh,f,c
 46418  001112  500C               	movf	??_playArpeggio,w,c
 46419  001114  5CF3               	subwf	prodl,w,c
 46420  001116  50F4               	movf	prodh,w,c
 46421  001118  0A80               	xorlw	128
 46422  00111A  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 46423  00111C  500D               	movf	??_playArpeggio+1,w,c
 46424  00111E  0A80               	xorlw	128
 46425  001120  580E               	subwfb	(??_playArpeggio+2)& (0+255),w,c
 46426  001122  A0D8               	btfss	status,0,c
 46427  001124  0012               	return	
 46428                           
 46429                           ;arpeggio.c: 508: which_octave = 0;
 46430  001126  0E00               	movlw	0
 46431  001128  6E32               	movwf	_which_octave,c
 46432                           
 46433                           ;arpeggio.c: 509: octave_overflow = 1;
 46434  00112A  8402               	bsf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 46435                           
 46436                           ;arpeggio.c: 510: flag2 = 0;
 46437  00112C  9E01               	bcf	_flag2/(0+8),_flag2& (0+7),c
 46438  00112E  0012               	return	
 46439  001130                     __end_of_playArpeggio:
 46440                           	opt stack 0
 46441                           tblptru	equ	0xFF8
 46442                           tblptrh	equ	0xFF7
 46443                           tblptrl	equ	0xFF6
 46444                           tablat	equ	0xFF5
 46445                           prodh	equ	0xFF4
 46446                           prodl	equ	0xFF3
 46447                           intcon	equ	0xFF2
 46448                           intcon2	equ	0xFF1
 46449                           indf0	equ	0xFEF
 46450                           postinc0	equ	0xFEE
 46451                           postdec0	equ	0xFED
 46452                           fsr0h	equ	0xFEA
 46453                           fsr0l	equ	0xFE9
 46454                           wreg	equ	0xFE8
 46455                           postinc1	equ	0xFE6
 46456                           postdec1	equ	0xFE5
 46457                           plusw1	equ	0xFE3
 46458                           fsr1h	equ	0xFE2
 46459                           fsr1l	equ	0xFE1
 46460                           indf2	equ	0xFDF
 46461                           postinc2	equ	0xFDE
 46462                           postdec2	equ	0xFDD
 46463                           plusw2	equ	0xFDB
 46464                           fsr2h	equ	0xFDA
 46465                           fsr2l	equ	0xFD9
 46466                           status	equ	0xFD8
 46467                           
 46468 ;; *************** function _sort_pitches *****************
 46469 ;; Defined at:
 46470 ;;		line 222 in file "arpeggio.c"
 46471 ;; Parameters:    Size  Location     Type
 46472 ;;		None
 46473 ;; Auto vars:     Size  Location     Type
 46474 ;;  j               1    3[COMRAM] unsigned char 
 46475 ;;  i               1    4[COMRAM] unsigned char 
 46476 ;;  a               1    2[COMRAM] unsigned char 
 46477 ;; Return value:  Size  Location     Type
 46478 ;;                  1    wreg      void 
 46479 ;; Registers used:
 46480 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 46481 ;; Tracked objects:
 46482 ;;		On entry : 0/0
 46483 ;;		On exit  : 0/0
 46484 ;;		Unchanged: 0/0
 46485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46487 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46488 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46489 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46490 ;;Total ram usage:        5 bytes
 46491 ;; Hardware stack levels used:    1
 46492 ;; This function calls:
 46493 ;;		Nothing
 46494 ;; This function is called by:
 46495 ;;		_playArpeggio
 46496 ;; This function uses a non-reentrant model
 46497 ;;
 46498                           
 46499                           	psect	text142
 46500  006380                     __ptext142:
 46501                           	opt stack 0
 46502  006380                     _sort_pitches:
 46503                           	opt stack 13
 46504                           
 46505                           ;arpeggio.c: 224: if(NUM_NOTES_PRESSED == 0){return;}
 46506                           
 46507                           ;incstack = 0
 46508  006380  502F               	movf	_NUM_NOTES_PRESSED,w,c
 46509  006382  B4D8               	btfsc	status,2,c
 46510  006384  0012               	return	
 46511                           
 46512                           ;arpeggio.c: 226: unsigned char a;
 46513                           ;arpeggio.c: 227: for(unsigned char i = 0; i < NUM_NOTES_PRESSED; ++i){
 46514  006386  0E00               	movlw	0
 46515  006388  6E0B               	movwf	sort_pitches@i,c
 46516  00638A  D081               	goto	i2l5459
 46517  00638C                     
 46518                           ;arpeggio.c: 228: for(unsigned char j = i + 1; j < NUM_NOTES_PRESSED; ++j){
 46519  00638C  280B               	incf	sort_pitches@i,w,c
 46520  00638E  6E0A               	movwf	sort_pitches@j,c
 46521  006390  D079               	goto	i2l5461
 46522  006392                     i2l5462:
 46523                           
 46524                           ;arpeggio.c: 234: if(SORT_DIRECTION == 0) {
 46525  006392  BA04               	btfsc	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 46526  006394  D03A               	goto	i2l5464
 46527                           
 46528                           ;arpeggio.c: 235: if(ARPEGGIO_SORTED[i] > ARPEGGIO_SORTED[j]){
 46529  006396  500B               	movf	sort_pitches@i,w,c
 46530  006398  0D01               	mullw	1
 46531  00639A  0E78               	movlw	low _ARPEGGIO_SORTED
 46532  00639C  24F3               	addwf	prodl,w,c
 46533  00639E  6ED9               	movwf	fsr2l,c
 46534  0063A0  0E02               	movlw	high _ARPEGGIO_SORTED
 46535  0063A2  20F4               	addwfc	prodh,w,c
 46536  0063A4  6EDA               	movwf	fsr2h,c
 46537  0063A6  500A               	movf	sort_pitches@j,w,c
 46538  0063A8  0D01               	mullw	1
 46539  0063AA  0E78               	movlw	low _ARPEGGIO_SORTED
 46540  0063AC  24F3               	addwf	prodl,w,c
 46541  0063AE  6EE9               	movwf	fsr0l,c
 46542  0063B0  0E02               	movlw	high _ARPEGGIO_SORTED
 46543  0063B2  20F4               	addwfc	prodh,w,c
 46544  0063B4  6EEA               	movwf	fsr0h,c
 46545  0063B6  50DE               	movf	postinc2,w,c
 46546  0063B8  5CEE               	subwf	postinc0,w,c
 46547  0063BA  B0D8               	btfsc	status,0,c
 46548  0063BC  D026               	goto	i2l5464
 46549                           
 46550                           ;arpeggio.c: 236: a = ARPEGGIO_SORTED[i];
 46551  0063BE  500B               	movf	sort_pitches@i,w,c
 46552  0063C0  0D01               	mullw	1
 46553  0063C2  0E78               	movlw	low _ARPEGGIO_SORTED
 46554  0063C4  24F3               	addwf	prodl,w,c
 46555  0063C6  6ED9               	movwf	fsr2l,c
 46556  0063C8  0E02               	movlw	high _ARPEGGIO_SORTED
 46557  0063CA  20F4               	addwfc	prodh,w,c
 46558  0063CC  6EDA               	movwf	fsr2h,c
 46559  0063CE  50DF               	movf	indf2,w,c
 46560  0063D0  6E09               	movwf	sort_pitches@a,c
 46561                           
 46562                           ;arpeggio.c: 237: ARPEGGIO_SORTED[i] = ARPEGGIO_SORTED[j];
 46563  0063D2  500A               	movf	sort_pitches@j,w,c
 46564  0063D4  0D01               	mullw	1
 46565  0063D6  0E78               	movlw	low _ARPEGGIO_SORTED
 46566  0063D8  24F3               	addwf	prodl,w,c
 46567  0063DA  6ED9               	movwf	fsr2l,c
 46568  0063DC  0E02               	movlw	high _ARPEGGIO_SORTED
 46569  0063DE  20F4               	addwfc	prodh,w,c
 46570  0063E0  6EDA               	movwf	fsr2h,c
 46571  0063E2  500B               	movf	sort_pitches@i,w,c
 46572  0063E4  0D01               	mullw	1
 46573  0063E6  0E78               	movlw	low _ARPEGGIO_SORTED
 46574  0063E8  24F3               	addwf	prodl,w,c
 46575  0063EA  6EE9               	movwf	fsr0l,c
 46576  0063EC  0E02               	movlw	high _ARPEGGIO_SORTED
 46577  0063EE  20F4               	addwfc	prodh,w,c
 46578  0063F0  6EEA               	movwf	fsr0h,c
 46579  0063F2  CFDF FFEF          	movff	indf2,indf0
 46580                           
 46581                           ;arpeggio.c: 238: ARPEGGIO_SORTED[j] = a;
 46582  0063F6  500A               	movf	sort_pitches@j,w,c
 46583  0063F8  0D01               	mullw	1
 46584  0063FA  0E78               	movlw	low _ARPEGGIO_SORTED
 46585  0063FC  24F3               	addwf	prodl,w,c
 46586  0063FE  6ED9               	movwf	fsr2l,c
 46587  006400  0E02               	movlw	high _ARPEGGIO_SORTED
 46588  006402  20F4               	addwfc	prodh,w,c
 46589  006404  6EDA               	movwf	fsr2h,c
 46590  006406  C009  FFDF         	movff	sort_pitches@a,indf2
 46591  00640A                     i2l5464:
 46592                           
 46593                           ;arpeggio.c: 239: }
 46594                           ;arpeggio.c: 240: }
 46595                           ;arpeggio.c: 242: if(SORT_DIRECTION == 1) {
 46596  00640A  AA04               	btfss	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 46597  00640C  D03A               	goto	i2l5466
 46598                           
 46599                           ;arpeggio.c: 243: if(ARPEGGIO_SORTED[i] < ARPEGGIO_SORTED[j]){
 46600  00640E  500A               	movf	sort_pitches@j,w,c
 46601  006410  0D01               	mullw	1
 46602  006412  0E78               	movlw	low _ARPEGGIO_SORTED
 46603  006414  24F3               	addwf	prodl,w,c
 46604  006416  6ED9               	movwf	fsr2l,c
 46605  006418  0E02               	movlw	high _ARPEGGIO_SORTED
 46606  00641A  20F4               	addwfc	prodh,w,c
 46607  00641C  6EDA               	movwf	fsr2h,c
 46608  00641E  500B               	movf	sort_pitches@i,w,c
 46609  006420  0D01               	mullw	1
 46610  006422  0E78               	movlw	low _ARPEGGIO_SORTED
 46611  006424  24F3               	addwf	prodl,w,c
 46612  006426  6EE9               	movwf	fsr0l,c
 46613  006428  0E02               	movlw	high _ARPEGGIO_SORTED
 46614  00642A  20F4               	addwfc	prodh,w,c
 46615  00642C  6EEA               	movwf	fsr0h,c
 46616  00642E  50DE               	movf	postinc2,w,c
 46617  006430  5CEE               	subwf	postinc0,w,c
 46618  006432  B0D8               	btfsc	status,0,c
 46619  006434  D026               	goto	i2l5466
 46620                           
 46621                           ;arpeggio.c: 244: a = ARPEGGIO_SORTED[i];
 46622  006436  500B               	movf	sort_pitches@i,w,c
 46623  006438  0D01               	mullw	1
 46624  00643A  0E78               	movlw	low _ARPEGGIO_SORTED
 46625  00643C  24F3               	addwf	prodl,w,c
 46626  00643E  6ED9               	movwf	fsr2l,c
 46627  006440  0E02               	movlw	high _ARPEGGIO_SORTED
 46628  006442  20F4               	addwfc	prodh,w,c
 46629  006444  6EDA               	movwf	fsr2h,c
 46630  006446  50DF               	movf	indf2,w,c
 46631  006448  6E09               	movwf	sort_pitches@a,c
 46632                           
 46633                           ;arpeggio.c: 245: ARPEGGIO_SORTED[i] = ARPEGGIO_SORTED[j];
 46634  00644A  500A               	movf	sort_pitches@j,w,c
 46635  00644C  0D01               	mullw	1
 46636  00644E  0E78               	movlw	low _ARPEGGIO_SORTED
 46637  006450  24F3               	addwf	prodl,w,c
 46638  006452  6ED9               	movwf	fsr2l,c
 46639  006454  0E02               	movlw	high _ARPEGGIO_SORTED
 46640  006456  20F4               	addwfc	prodh,w,c
 46641  006458  6EDA               	movwf	fsr2h,c
 46642  00645A  500B               	movf	sort_pitches@i,w,c
 46643  00645C  0D01               	mullw	1
 46644  00645E  0E78               	movlw	low _ARPEGGIO_SORTED
 46645  006460  24F3               	addwf	prodl,w,c
 46646  006462  6EE9               	movwf	fsr0l,c
 46647  006464  0E02               	movlw	high _ARPEGGIO_SORTED
 46648  006466  20F4               	addwfc	prodh,w,c
 46649  006468  6EEA               	movwf	fsr0h,c
 46650  00646A  CFDF FFEF          	movff	indf2,indf0
 46651                           
 46652                           ;arpeggio.c: 246: ARPEGGIO_SORTED[j] = a;
 46653  00646E  500A               	movf	sort_pitches@j,w,c
 46654  006470  0D01               	mullw	1
 46655  006472  0E78               	movlw	low _ARPEGGIO_SORTED
 46656  006474  24F3               	addwf	prodl,w,c
 46657  006476  6ED9               	movwf	fsr2l,c
 46658  006478  0E02               	movlw	high _ARPEGGIO_SORTED
 46659  00647A  20F4               	addwfc	prodh,w,c
 46660  00647C  6EDA               	movwf	fsr2h,c
 46661  00647E  C009  FFDF         	movff	sort_pitches@a,indf2
 46662  006482                     i2l5466:
 46663  006482  2A0A               	incf	sort_pitches@j,f,c
 46664  006484                     i2l5461:
 46665  006484  502F               	movf	_NUM_NOTES_PRESSED,w,c
 46666  006486  5C0A               	subwf	sort_pitches@j,w,c
 46667  006488  A0D8               	btfss	status,0,c
 46668  00648A  D783               	goto	i2l5462
 46669  00648C  2A0B               	incf	sort_pitches@i,f,c
 46670  00648E                     i2l5459:
 46671  00648E  502F               	movf	_NUM_NOTES_PRESSED,w,c
 46672  006490  5C0B               	subwf	sort_pitches@i,w,c
 46673  006492  B0D8               	btfsc	status,0,c
 46674  006494  0012               	return	
 46675  006496  D77A               	goto	i2l5460
 46676  006498                     __end_of_sort_pitches:
 46677                           	opt stack 0
 46678                           tblptru	equ	0xFF8
 46679                           tblptrh	equ	0xFF7
 46680                           tblptrl	equ	0xFF6
 46681                           tablat	equ	0xFF5
 46682                           prodh	equ	0xFF4
 46683                           prodl	equ	0xFF3
 46684                           intcon	equ	0xFF2
 46685                           intcon2	equ	0xFF1
 46686                           indf0	equ	0xFEF
 46687                           postinc0	equ	0xFEE
 46688                           postdec0	equ	0xFED
 46689                           fsr0h	equ	0xFEA
 46690                           fsr0l	equ	0xFE9
 46691                           wreg	equ	0xFE8
 46692                           postinc1	equ	0xFE6
 46693                           postdec1	equ	0xFE5
 46694                           plusw1	equ	0xFE3
 46695                           fsr1h	equ	0xFE2
 46696                           fsr1l	equ	0xFE1
 46697                           indf2	equ	0xFDF
 46698                           postinc2	equ	0xFDE
 46699                           postdec2	equ	0xFDD
 46700                           plusw2	equ	0xFDB
 46701                           fsr2h	equ	0xFDA
 46702                           fsr2l	equ	0xFD9
 46703                           status	equ	0xFD8
 46704                           
 46705 ;; *************** function _encoderInputsBuxton *****************
 46706 ;; Defined at:
 46707 ;;		line 27 in file "encoder.c"
 46708 ;; Parameters:    Size  Location     Type
 46709 ;;		None
 46710 ;; Auto vars:     Size  Location     Type
 46711 ;;  pinstate        1    5[COMRAM] unsigned char 
 46712 ;;  tempB           1    4[COMRAM] unsigned char 
 46713 ;;  tempA           1    3[COMRAM] unsigned char 
 46714 ;; Return value:  Size  Location     Type
 46715 ;;                  1    wreg      void 
 46716 ;; Registers used:
 46717 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 46718 ;; Tracked objects:
 46719 ;;		On entry : 0/0
 46720 ;;		On exit  : 0/0
 46721 ;;		Unchanged: 0/0
 46722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46724 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46725 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46726 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46727 ;;Total ram usage:        6 bytes
 46728 ;; Hardware stack levels used:    1
 46729 ;; This function calls:
 46730 ;;		Nothing
 46731 ;; This function is called by:
 46732 ;;		_ISR
 46733 ;; This function uses a non-reentrant model
 46734 ;;
 46735                           
 46736                           	psect	text143
 46737  00853A                     __ptext143:
 46738                           	opt stack 0
 46739  00853A                     _encoderInputsBuxton:
 46740                           	opt stack 14
 46741                           
 46742                           ;encoder.c: 30: if(encoderPolarity == 0){
 46743                           
 46744                           ;incstack = 0
 46745  00853A  B605               	btfsc	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 46746  00853C  D006               	goto	i2l854
 46747                           
 46748                           ;encoder.c: 31: encoderA = RB5;
 46749  00853E  8A05               	bsf	_encoderA/(0+8),_encoderA& (0+7),c
 46750  008540  AA81               	btfss	3969,5,c	;volatile
 46751  008542  9A05               	bcf	_encoderA/(0+8),_encoderA& (0+7),c
 46752                           
 46753                           ;encoder.c: 32: encoderB = RB4;
 46754  008544  8805               	bsf	_encoderB/(0+8),_encoderB& (0+7),c
 46755  008546  A881               	btfss	3969,4,c	;volatile
 46756  008548  9805               	bcf	_encoderB/(0+8),_encoderB& (0+7),c
 46757  00854A                     i2l854:
 46758                           
 46759                           ;encoder.c: 33: }
 46760                           ;encoder.c: 36: if(encoderPolarity == 1){
 46761  00854A  A605               	btfss	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 46762  00854C  D006               	goto	i2l855
 46763                           
 46764                           ;encoder.c: 37: encoderA = RB4;
 46765  00854E  8A05               	bsf	_encoderA/(0+8),_encoderA& (0+7),c
 46766  008550  A881               	btfss	3969,4,c	;volatile
 46767  008552  9A05               	bcf	_encoderA/(0+8),_encoderA& (0+7),c
 46768                           
 46769                           ;encoder.c: 38: encoderB = RB5;
 46770  008554  8805               	bsf	_encoderB/(0+8),_encoderB& (0+7),c
 46771  008556  AA81               	btfss	3969,5,c	;volatile
 46772  008558  9805               	bcf	_encoderB/(0+8),_encoderB& (0+7),c
 46773  00855A                     i2l855:
 46774                           
 46775                           ;encoder.c: 39: }
 46776                           ;encoder.c: 42: unsigned char tempA = encoderA << 1;
 46777  00855A  AA05               	btfss	_encoderA/(0+8),_encoderA& (0+7),c
 46778  00855C  D003               	goto	i2u3791_40
 46779  00855E  6A07               	clrf	??_encoderInputsBuxton& (0+255),c
 46780  008560  2A07               	incf	??_encoderInputsBuxton& (0+255),f,c
 46781  008562  D001               	goto	i2u3792_48
 46782  008564                     i2u3791_40:
 46783  008564  6A07               	clrf	??_encoderInputsBuxton& (0+255),c
 46784  008566                     i2u3792_48:
 46785  008566  90D8               	bcf	status,0,c
 46786  008568  3407               	rlcf	??_encoderInputsBuxton,w,c
 46787  00856A  6E0A               	movwf	encoderInputsBuxton@tempA,c
 46788                           
 46789                           ;encoder.c: 43: unsigned char tempB = encoderB;
 46790  00856C  0E00               	movlw	0
 46791  00856E  B805               	btfsc	_encoderB/(0+8),_encoderB& (0+7),c
 46792  008570  0E01               	movlw	1
 46793  008572  6E0B               	movwf	encoderInputsBuxton@tempB,c
 46794                           
 46795                           ;encoder.c: 44: unsigned char pinstate = tempA | tempB;
 46796  008574  500A               	movf	encoderInputsBuxton@tempA,w,c
 46797  008576  100B               	iorwf	encoderInputsBuxton@tempB,w,c
 46798  008578  6E0C               	movwf	encoderInputsBuxton@pinstate,c
 46799                           
 46800                           ;encoder.c: 46: state = ttable[state & 0xf][pinstate];
 46801  00857A  C0ED  F007         	movff	_state,??_encoderInputsBuxton
 46802  00857E  0E0F               	movlw	15
 46803  008580  1607               	andwf	??_encoderInputsBuxton,f,c
 46804  008582  5007               	movf	??_encoderInputsBuxton,w,c
 46805  008584  0D04               	mullw	4
 46806  008586  0E3D               	movlw	low _ttable
 46807  008588  6E08               	movwf	(??_encoderInputsBuxton+1)& (0+255),c
 46808  00858A  0EF3               	movlw	high _ttable
 46809  00858C  6E09               	movwf	(??_encoderInputsBuxton+2)& (0+255),c
 46810  00858E  50F3               	movf	prodl,w,c
 46811  008590  2608               	addwf	??_encoderInputsBuxton+1,f,c
 46812  008592  50F4               	movf	prodh,w,c
 46813  008594  2209               	addwfc	??_encoderInputsBuxton+2,f,c
 46814  008596  500C               	movf	encoderInputsBuxton@pinstate,w,c
 46815  008598  0D01               	mullw	1
 46816  00859A  50F3               	movf	prodl,w,c
 46817  00859C  2608               	addwf	??_encoderInputsBuxton+1,f,c
 46818  00859E  50F4               	movf	prodh,w,c
 46819  0085A0  2209               	addwfc	??_encoderInputsBuxton+2,f,c
 46820  0085A2  C008  FFF6         	movff	??_encoderInputsBuxton+1,tblptrl
 46821  0085A6  C009  FFF7         	movff	??_encoderInputsBuxton+2,tblptrh
 46822  0085AA                     	if	0	;tblptru may be non-zero
 46823  0085AA                     	endif
 46824  0085AA                     	if	0	;tblptru may be non-zero
 46825  0085AA                     	endif
 46826  0085AA  0008               	tblrd		*
 46827  0085AC  CFF5 F0ED          	movff	tablat,_state
 46828                           
 46829                           ;encoder.c: 47: encoder_direction = state & 0x30;
 46830  0085B0  0100               	movlb	0	; () banked
 46831  0085B2  51ED               	movf	_state& (0+255),w,b
 46832  0085B4  0B30               	andlw	48
 46833  0085B6  6E36               	movwf	_encoder_direction,c
 46834                           
 46835                           ; BSR set to: 0
 46836  0085B8  0012               	return		;funcret
 46837  0085BA                     __end_of_encoderInputsBuxton:
 46838                           	opt stack 0
 46839                           tblptru	equ	0xFF8
 46840                           tblptrh	equ	0xFF7
 46841                           tblptrl	equ	0xFF6
 46842                           tablat	equ	0xFF5
 46843                           prodh	equ	0xFF4
 46844                           prodl	equ	0xFF3
 46845                           intcon	equ	0xFF2
 46846                           intcon2	equ	0xFF1
 46847                           indf0	equ	0xFEF
 46848                           postinc0	equ	0xFEE
 46849                           postdec0	equ	0xFED
 46850                           fsr0h	equ	0xFEA
 46851                           fsr0l	equ	0xFE9
 46852                           wreg	equ	0xFE8
 46853                           postinc1	equ	0xFE6
 46854                           postdec1	equ	0xFE5
 46855                           plusw1	equ	0xFE3
 46856                           fsr1h	equ	0xFE2
 46857                           fsr1l	equ	0xFE1
 46858                           indf2	equ	0xFDF
 46859                           postinc2	equ	0xFDE
 46860                           postdec2	equ	0xFDD
 46861                           plusw2	equ	0xFDB
 46862                           fsr2h	equ	0xFDA
 46863                           fsr2l	equ	0xFD9
 46864                           status	equ	0xFD8
 46865                           
 46866 ;; *************** function _display *****************
 46867 ;; Defined at:
 46868 ;;		line 22 in file "segment.c"
 46869 ;; Parameters:    Size  Location     Type
 46870 ;;		None
 46871 ;; Auto vars:     Size  Location     Type
 46872 ;;		None
 46873 ;; Return value:  Size  Location     Type
 46874 ;;                  1    wreg      void 
 46875 ;; Registers used:
 46876 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh, cstack
 46877 ;; Tracked objects:
 46878 ;;		On entry : 0/0
 46879 ;;		On exit  : 0/0
 46880 ;;		Unchanged: 0/0
 46881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46886 ;;Total ram usage:        0 bytes
 46887 ;; Hardware stack levels used:    1
 46888 ;; Hardware stack levels required when called:    2
 46889 ;; This function calls:
 46890 ;;		_displayDigits
 46891 ;;		_displayString
 46892 ;; This function is called by:
 46893 ;;		_ISR
 46894 ;; This function uses a non-reentrant model
 46895 ;;
 46896                           
 46897                           	psect	text144
 46898  009838                     __ptext144:
 46899                           	opt stack 0
 46900  009838                     _display:
 46901                           	opt stack 12
 46902                           
 46903                           ;segment.c: 23: if (DISPLAY_MODE == 0) {displayDigits();}
 46904                           
 46905                           ; BSR set to: 0
 46906                           ;incstack = 0
 46907  009838  0100               	movlb	0	; () banked
 46908  00983A  51EE               	movf	_DISPLAY_MODE& (0+255),w,b
 46909  00983C  B4D8               	btfsc	status,2,c
 46910                           
 46911                           ; BSR set to: 0
 46912  00983E  EC26  F01C         	call	_displayDigits	;wreg free
 46913                           
 46914                           ;segment.c: 24: if (DISPLAY_MODE == 1) {displayString();}
 46915  009842  0100               	movlb	0	; () banked
 46916  009844  05EE               	decf	_DISPLAY_MODE& (0+255),w,b
 46917  009846  A4D8               	btfss	status,2,c
 46918  009848  0012               	return	
 46919                           
 46920                           ; BSR set to: 0
 46921  00984A  EC4C  F032         	call	_displayString	;wreg free
 46922  00984E  0012               	return	
 46923  009850                     __end_of_display:
 46924                           	opt stack 0
 46925                           tblptru	equ	0xFF8
 46926                           tblptrh	equ	0xFF7
 46927                           tblptrl	equ	0xFF6
 46928                           tablat	equ	0xFF5
 46929                           prodh	equ	0xFF4
 46930                           prodl	equ	0xFF3
 46931                           intcon	equ	0xFF2
 46932                           intcon2	equ	0xFF1
 46933                           indf0	equ	0xFEF
 46934                           postinc0	equ	0xFEE
 46935                           postdec0	equ	0xFED
 46936                           fsr0h	equ	0xFEA
 46937                           fsr0l	equ	0xFE9
 46938                           wreg	equ	0xFE8
 46939                           postinc1	equ	0xFE6
 46940                           postdec1	equ	0xFE5
 46941                           plusw1	equ	0xFE3
 46942                           fsr1h	equ	0xFE2
 46943                           fsr1l	equ	0xFE1
 46944                           indf2	equ	0xFDF
 46945                           postinc2	equ	0xFDE
 46946                           postdec2	equ	0xFDD
 46947                           plusw2	equ	0xFDB
 46948                           fsr2h	equ	0xFDA
 46949                           fsr2l	equ	0xFD9
 46950                           status	equ	0xFD8
 46951                           
 46952 ;; *************** function _displayString *****************
 46953 ;; Defined at:
 46954 ;;		line 174 in file "segment.c"
 46955 ;; Parameters:    Size  Location     Type
 46956 ;;		None
 46957 ;; Auto vars:     Size  Location     Type
 46958 ;;  i               1    1[COMRAM] unsigned char 
 46959 ;; Return value:  Size  Location     Type
 46960 ;;                  1    wreg      void 
 46961 ;; Registers used:
 46962 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 46963 ;; Tracked objects:
 46964 ;;		On entry : 0/0
 46965 ;;		On exit  : 0/0
 46966 ;;		Unchanged: 0/0
 46967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46969 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46970 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46971 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46972 ;;Total ram usage:        2 bytes
 46973 ;; Hardware stack levels used:    1
 46974 ;; This function calls:
 46975 ;;		Nothing
 46976 ;; This function is called by:
 46977 ;;		_display
 46978 ;; This function uses a non-reentrant model
 46979 ;;
 46980                           
 46981                           	psect	text145
 46982  006498                     __ptext145:
 46983                           	opt stack 0
 46984  006498                     _displayString:
 46985                           	opt stack 13
 46986                           
 46987                           ;segment.c: 176: static unsigned char letter[4];
 46988                           ;segment.c: 177: static unsigned char letter_counter;
 46989                           ;segment.c: 180: for(unsigned char i=0;i<4;i++) {
 46990                           
 46991                           ;incstack = 0
 46992  006498  0E00               	movlw	0
 46993  00649A  6E08               	movwf	displayString@i,c
 46994  00649C                     i2l22908:
 46995  00649C  0E03               	movlw	3
 46996  00649E  6408               	cpfsgt	displayString@i,c
 46997  0064A0  D001               	goto	i2l3001
 46998  0064A2  D02A               	goto	i2u3725_40
 46999  0064A4                     i2l3001:
 47000                           
 47001                           ;segment.c: 181: if(string_to_display[i] > (unsigned char) 'z') {letter[i] = 'z';}
 47002  0064A4  5008               	movf	displayString@i,w,c
 47003  0064A6  0D01               	mullw	1
 47004  0064A8  0EF8               	movlw	low _string_to_display
 47005  0064AA  24F3               	addwf	prodl,w,c
 47006  0064AC  6ED9               	movwf	fsr2l,c
 47007  0064AE  0E01               	movlw	high _string_to_display
 47008  0064B0  20F4               	addwfc	prodh,w,c
 47009  0064B2  6EDA               	movwf	fsr2h,c
 47010  0064B4  0E7A               	movlw	122
 47011  0064B6  64DF               	cpfsgt	indf2,c
 47012  0064B8  D00A               	goto	i2l3003
 47013  0064BA  5008               	movf	displayString@i,w,c
 47014  0064BC  0D01               	mullw	1
 47015  0064BE  0E00               	movlw	low displayString@letter
 47016  0064C0  24F3               	addwf	prodl,w,c
 47017  0064C2  6ED9               	movwf	fsr2l,c
 47018  0064C4  0E01               	movlw	high displayString@letter
 47019  0064C6  20F4               	addwfc	prodh,w,c
 47020  0064C8  6EDA               	movwf	fsr2h,c
 47021  0064CA  0E7A               	movlw	122
 47022  0064CC  D012               	goto	L28
 47023  0064CE                     i2l3003:
 47024                           
 47025                           ;segment.c: 182: else letter[i] = string_to_display[i] - '0';
 47026  0064CE  5008               	movf	displayString@i,w,c
 47027  0064D0  0D01               	mullw	1
 47028  0064D2  0E00               	movlw	low displayString@letter
 47029  0064D4  24F3               	addwf	prodl,w,c
 47030  0064D6  6ED9               	movwf	fsr2l,c
 47031  0064D8  0E01               	movlw	high displayString@letter
 47032  0064DA  20F4               	addwfc	prodh,w,c
 47033  0064DC  6EDA               	movwf	fsr2h,c
 47034  0064DE  5008               	movf	displayString@i,w,c
 47035  0064E0  0D01               	mullw	1
 47036  0064E2  0EF8               	movlw	low _string_to_display
 47037  0064E4  24F3               	addwf	prodl,w,c
 47038  0064E6  6EE9               	movwf	fsr0l,c
 47039  0064E8  0E01               	movlw	high _string_to_display
 47040  0064EA  20F4               	addwfc	prodh,w,c
 47041  0064EC  6EEA               	movwf	fsr0h,c
 47042  0064EE  50EF               	movf	indf0,w,c
 47043  0064F0  0FD0               	addlw	208
 47044  0064F2                     L28:
 47045  0064F2  6EDF               	movwf	indf2,c
 47046  0064F4  2A08               	incf	displayString@i,f,c
 47047  0064F6  D7D2               	goto	i2l22908
 47048  0064F8                     i2u3725_40:
 47049                           
 47050                           ;segment.c: 183: }
 47051                           ;segment.c: 185: if(letter_counter == 0){
 47052  0064F8  0100               	movlb	0	; () banked
 47053  0064FA  51E8               	movf	displayString@letter_counter& (0+255),w,b
 47054  0064FC  A4D8               	btfss	status,2,c
 47055  0064FE  D00F               	goto	i2l3005
 47056                           
 47057                           ; BSR set to: 0
 47058                           ;segment.c: 187: PORTC &= 0xF0;
 47059  006500  0EF0               	movlw	240
 47060  006502  1682               	andwf	3970,f,c	;volatile
 47061                           
 47062                           ; BSR set to: 0
 47063                           ;segment.c: 190: PORTD = seg_ascii[letter[0]];
 47064  006504  0101               	movlb	1	; () banked
 47065  006506  5100               	movf	displayString@letter& (0+255),w,b
 47066  006508  0D01               	mullw	1
 47067  00650A  0E20               	movlw	low _seg_ascii
 47068  00650C  24F3               	addwf	prodl,w,c
 47069  00650E  6EF6               	movwf	tblptrl,c
 47070  006510  0EF2               	movlw	high _seg_ascii
 47071  006512  20F4               	addwfc	prodh,w,c
 47072  006514  6EF7               	movwf	tblptrh,c
 47073  006516                     	if	0	;There are less than 3 active tblptr bytes
 47074  006516                     	endif
 47075  006516  0008               	tblrd		*
 47076  006518  CFF5 FF83          	movff	tablat,3971	;volatile
 47077                           
 47078                           ; BSR set to: 1
 47079                           ;segment.c: 192: PORTC |= 0x1;
 47080  00651C  8082               	bsf	3970,0,c	;volatile
 47081  00651E                     i2l3005:
 47082                           
 47083                           ;segment.c: 193: }
 47084                           ;segment.c: 194: if(letter_counter == 1){
 47085                           
 47086                           ; BSR set to: 1
 47087  00651E  0100               	movlb	0	; () banked
 47088  006520  05E8               	decf	displayString@letter_counter& (0+255),w,b
 47089  006522  A4D8               	btfss	status,2,c
 47090  006524  D00F               	goto	i2l3006
 47091                           
 47092                           ; BSR set to: 0
 47093                           ;segment.c: 196: PORTC &= 0xF0;
 47094  006526  0EF0               	movlw	240
 47095  006528  1682               	andwf	3970,f,c	;volatile
 47096                           
 47097                           ; BSR set to: 0
 47098                           ;segment.c: 198: PORTD = seg_ascii[letter[1]];
 47099  00652A  0101               	movlb	1	; () banked
 47100  00652C  5101               	movf	(displayString@letter+1)& (0+255),w,b
 47101  00652E  0D01               	mullw	1
 47102  006530  0E20               	movlw	low _seg_ascii
 47103  006532  24F3               	addwf	prodl,w,c
 47104  006534  6EF6               	movwf	tblptrl,c
 47105  006536  0EF2               	movlw	high _seg_ascii
 47106  006538  20F4               	addwfc	prodh,w,c
 47107  00653A  6EF7               	movwf	tblptrh,c
 47108  00653C                     	if	0	;There are less than 3 active tblptr bytes
 47109  00653C                     	endif
 47110  00653C  0008               	tblrd		*
 47111  00653E  CFF5 FF83          	movff	tablat,3971	;volatile
 47112                           
 47113                           ; BSR set to: 1
 47114                           ;segment.c: 200: PORTC |= 0x2;
 47115  006542  8282               	bsf	3970,1,c	;volatile
 47116  006544                     i2l3006:
 47117                           
 47118                           ;segment.c: 201: }
 47119                           ;segment.c: 202: if(letter_counter == 2){
 47120                           
 47121                           ; BSR set to: 1
 47122  006544  0E02               	movlw	2
 47123  006546  0100               	movlb	0	; () banked
 47124  006548  19E8               	xorwf	displayString@letter_counter& (0+255),w,b
 47125  00654A  A4D8               	btfss	status,2,c
 47126  00654C  D00F               	goto	i2l3007
 47127                           
 47128                           ; BSR set to: 0
 47129                           ;segment.c: 204: PORTC &= 0xF0;
 47130  00654E  0EF0               	movlw	240
 47131  006550  1682               	andwf	3970,f,c	;volatile
 47132                           
 47133                           ; BSR set to: 0
 47134                           ;segment.c: 206: PORTD = seg_ascii[letter[2]];
 47135  006552  0101               	movlb	1	; () banked
 47136  006554  5102               	movf	(displayString@letter+2)& (0+255),w,b
 47137  006556  0D01               	mullw	1
 47138  006558  0E20               	movlw	low _seg_ascii
 47139  00655A  24F3               	addwf	prodl,w,c
 47140  00655C  6EF6               	movwf	tblptrl,c
 47141  00655E  0EF2               	movlw	high _seg_ascii
 47142  006560  20F4               	addwfc	prodh,w,c
 47143  006562  6EF7               	movwf	tblptrh,c
 47144  006564                     	if	0	;There are less than 3 active tblptr bytes
 47145  006564                     	endif
 47146  006564  0008               	tblrd		*
 47147  006566  CFF5 FF83          	movff	tablat,3971	;volatile
 47148                           
 47149                           ; BSR set to: 1
 47150                           ;segment.c: 208: PORTC |= 0x4;
 47151  00656A  8482               	bsf	3970,2,c	;volatile
 47152  00656C                     i2l3007:
 47153                           
 47154                           ;segment.c: 209: }
 47155                           ;segment.c: 210: if(letter_counter == 3){
 47156                           
 47157                           ; BSR set to: 1
 47158  00656C  0E03               	movlw	3
 47159  00656E  0100               	movlb	0	; () banked
 47160  006570  19E8               	xorwf	displayString@letter_counter& (0+255),w,b
 47161  006572  A4D8               	btfss	status,2,c
 47162  006574  D00F               	goto	i2l3008
 47163                           
 47164                           ; BSR set to: 0
 47165                           ;segment.c: 212: PORTC &= 0xF0;
 47166  006576  0EF0               	movlw	240
 47167  006578  1682               	andwf	3970,f,c	;volatile
 47168                           
 47169                           ; BSR set to: 0
 47170                           ;segment.c: 214: PORTD = seg_ascii[letter[3]];
 47171  00657A  0101               	movlb	1	; () banked
 47172  00657C  5103               	movf	(displayString@letter+3)& (0+255),w,b
 47173  00657E  0D01               	mullw	1
 47174  006580  0E20               	movlw	low _seg_ascii
 47175  006582  24F3               	addwf	prodl,w,c
 47176  006584  6EF6               	movwf	tblptrl,c
 47177  006586  0EF2               	movlw	high _seg_ascii
 47178  006588  20F4               	addwfc	prodh,w,c
 47179  00658A  6EF7               	movwf	tblptrh,c
 47180  00658C                     	if	0	;There are less than 3 active tblptr bytes
 47181  00658C                     	endif
 47182  00658C  0008               	tblrd		*
 47183  00658E  CFF5 FF83          	movff	tablat,3971	;volatile
 47184                           
 47185                           ; BSR set to: 1
 47186                           ;segment.c: 216: PORTC |= 0x8;
 47187  006592  8682               	bsf	3970,3,c	;volatile
 47188  006594                     i2l3008:
 47189                           
 47190                           ;segment.c: 217: }
 47191                           ;segment.c: 220: letter_counter++;
 47192                           
 47193                           ; BSR set to: 1
 47194  006594  0100               	movlb	0	; () banked
 47195  006596  2BE8               	incf	displayString@letter_counter& (0+255),f,b
 47196                           
 47197                           ; BSR set to: 0
 47198                           ;segment.c: 222: if(letter_counter > 3){letter_counter = 0;}
 47199  006598  0E03               	movlw	3
 47200  00659A  65E8               	cpfsgt	displayString@letter_counter& (0+255),b
 47201  00659C  0012               	return	
 47202                           
 47203                           ; BSR set to: 0
 47204  00659E  0E00               	movlw	0
 47205  0065A0  6FE8               	movwf	displayString@letter_counter& (0+255),b
 47206  0065A2  0012               	return	
 47207  0065A4                     __end_of_displayString:
 47208                           	opt stack 0
 47209                           tblptru	equ	0xFF8
 47210                           tblptrh	equ	0xFF7
 47211                           tblptrl	equ	0xFF6
 47212                           tablat	equ	0xFF5
 47213                           prodh	equ	0xFF4
 47214                           prodl	equ	0xFF3
 47215                           intcon	equ	0xFF2
 47216                           intcon2	equ	0xFF1
 47217                           indf0	equ	0xFEF
 47218                           postinc0	equ	0xFEE
 47219                           postdec0	equ	0xFED
 47220                           fsr0h	equ	0xFEA
 47221                           fsr0l	equ	0xFE9
 47222                           wreg	equ	0xFE8
 47223                           postinc1	equ	0xFE6
 47224                           postdec1	equ	0xFE5
 47225                           plusw1	equ	0xFE3
 47226                           fsr1h	equ	0xFE2
 47227                           fsr1l	equ	0xFE1
 47228                           indf2	equ	0xFDF
 47229                           postinc2	equ	0xFDE
 47230                           postdec2	equ	0xFDD
 47231                           plusw2	equ	0xFDB
 47232                           fsr2h	equ	0xFDA
 47233                           fsr2l	equ	0xFD9
 47234                           status	equ	0xFD8
 47235                           
 47236 ;; *************** function _displayDigits *****************
 47237 ;; Defined at:
 47238 ;;		line 55 in file "segment.c"
 47239 ;; Parameters:    Size  Location     Type
 47240 ;;		None
 47241 ;; Auto vars:     Size  Location     Type
 47242 ;;  highByte        1    4[COMRAM] unsigned char 
 47243 ;;  lowByte         1    3[COMRAM] unsigned char 
 47244 ;; Return value:  Size  Location     Type
 47245 ;;                  1    wreg      void 
 47246 ;; Registers used:
 47247 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prod
      +l, prodh
 47248 ;; Tracked objects:
 47249 ;;		On entry : 0/0
 47250 ;;		On exit  : 0/0
 47251 ;;		Unchanged: 0/0
 47252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47254 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47255 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47256 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47257 ;;Total ram usage:        5 bytes
 47258 ;; Hardware stack levels used:    1
 47259 ;; Hardware stack levels required when called:    1
 47260 ;; This function calls:
 47261 ;;		___awdiv
 47262 ;;		___awmod
 47263 ;; This function is called by:
 47264 ;;		_display
 47265 ;; This function uses a non-reentrant model
 47266 ;;
 47267                           
 47268                           	psect	text146
 47269  00384C                     __ptext146:
 47270                           	opt stack 0
 47271  00384C                     _displayDigits:
 47272                           	opt stack 12
 47273                           
 47274                           ;segment.c: 61: static unsigned char digit[4];
 47275                           ;segment.c: 62: static unsigned char digit_counter;
 47276                           ;segment.c: 63: static signed int number_to_display_last;
 47277                           ;segment.c: 64: static signed int number_to_display_temp;
 47278                           ;segment.c: 67: if(number_to_display != number_to_display_last){
 47279                           
 47280                           ; BSR set to: 0
 47281                           ;incstack = 0
 47282  00384C  0101               	movlb	1	; () banked
 47283  00384E  5179               	movf	displayDigits@number_to_display_last& (0+255),w,b
 47284  003850  184B               	xorwf	_number_to_display,w,c
 47285  003852  E104               	bnz	i2u5925_40
 47286  003854  517A               	movf	(displayDigits@number_to_display_last+1)& (0+255),w,b
 47287  003856  184C               	xorwf	_number_to_display+1,w,c
 47288  003858  B4D8               	btfsc	status,2,c
 47289  00385A  D0B7               	goto	i2l2962
 47290  00385C                     i2u5925_40:
 47291                           
 47292                           ; BSR set to: 1
 47293                           ;segment.c: 69: if(DIGIT_MODE == 0) {
 47294  00385C  503A               	movf	_DIGIT_MODE,w,c
 47295  00385E  A4D8               	btfss	status,2,c
 47296  003860  D066               	goto	i2l2963
 47297                           
 47298                           ; BSR set to: 1
 47299                           ;segment.c: 71: if(number_to_display >= 0){number_to_display_temp = number_to_display;}
 47300  003862  BE4C               	btfsc	_number_to_display+1,7,c
 47301  003864  D004               	goto	i2l2964
 47302                           
 47303                           ; BSR set to: 1
 47304  003866  C04B  F177         	movff	_number_to_display,displayDigits@number_to_display_temp
 47305  00386A  C04C  F178         	movff	_number_to_display+1,displayDigits@number_to_display_temp+1
 47306  00386E                     i2l2964:
 47307                           
 47308                           ; BSR set to: 1
 47309                           ;segment.c: 72: if(number_to_display < 0){number_to_display_temp = 0 - number_to_display
      +                          ;}
 47310                           
 47311                           ; BSR set to: 1
 47312  00386E  AE4C               	btfss	_number_to_display+1,7,c
 47313  003870  D00C               	goto	i2l2965
 47314                           
 47315                           ; BSR set to: 1
 47316  003872  C04B  F007         	movff	_number_to_display,??_displayDigits
 47317  003876  C04C  F008         	movff	_number_to_display+1,??_displayDigits+1
 47318  00387A  1E07               	comf	??_displayDigits,f,c
 47319  00387C  1E08               	comf	??_displayDigits+1,f,c
 47320  00387E  4A07               	infsnz	??_displayDigits,f,c
 47321  003880  2A08               	incf	??_displayDigits+1,f,c
 47322  003882  C007  F177         	movff	??_displayDigits,displayDigits@number_to_display_temp
 47323  003886  C008  F178         	movff	??_displayDigits+1,displayDigits@number_to_display_temp+1
 47324  00388A                     i2l2965:
 47325                           
 47326                           ; BSR set to: 1
 47327                           ;segment.c: 74: digit[0] = (number_to_display_temp / 1000) % 10;
 47328                           
 47329                           ; BSR set to: 1
 47330  00388A  0E0A               	movlw	10
 47331  00388C  6EE6               	movwf	postinc1,c
 47332  00388E  0E00               	movlw	0
 47333  003890  6EE6               	movwf	postinc1,c
 47334  003892  0EE8               	movlw	232
 47335  003894  6EE6               	movwf	postinc1,c
 47336  003896  0E03               	movlw	3
 47337  003898  6EE6               	movwf	postinc1,c
 47338  00389A  C177  FFE6         	movff	displayDigits@number_to_display_temp,postinc1
 47339  00389E  C178  FFE6         	movff	displayDigits@number_to_display_temp+1,postinc1
 47340  0038A2  EC01  F030         	call	___awdiv	;wreg free
 47341  0038A6  C03F  FFE6         	movff	btemp,postinc1
 47342  0038AA  C040  FFE6         	movff	btemp+1,postinc1
 47343  0038AE  ECD7  F033         	call	___awmod	;wreg free
 47344  0038B2  503F               	movf	btemp,w,c
 47345  0038B4  0100               	movlb	0	; () banked
 47346  0038B6  6FCC               	movwf	displayDigits@digit& (0+255),b
 47347                           
 47348                           ;segment.c: 75: digit[1] = (number_to_display_temp / 100) % 10;
 47349  0038B8  0E0A               	movlw	10
 47350  0038BA  6EE6               	movwf	postinc1,c
 47351  0038BC  0E00               	movlw	0
 47352  0038BE  6EE6               	movwf	postinc1,c
 47353  0038C0  0E64               	movlw	100
 47354  0038C2  6EE6               	movwf	postinc1,c
 47355  0038C4  0E00               	movlw	0
 47356  0038C6  6EE6               	movwf	postinc1,c
 47357  0038C8  C177  FFE6         	movff	displayDigits@number_to_display_temp,postinc1
 47358  0038CC  C178  FFE6         	movff	displayDigits@number_to_display_temp+1,postinc1
 47359  0038D0  EC01  F030         	call	___awdiv	;wreg free
 47360  0038D4  C03F  FFE6         	movff	btemp,postinc1
 47361  0038D8  C040  FFE6         	movff	btemp+1,postinc1
 47362  0038DC  ECD7  F033         	call	___awmod	;wreg free
 47363  0038E0  503F               	movf	btemp,w,c
 47364  0038E2  0100               	movlb	0	; () banked
 47365  0038E4  6FCD               	movwf	(displayDigits@digit+1)& (0+255),b
 47366                           
 47367                           ;segment.c: 76: digit[2] = (number_to_display_temp / 10) % 10;
 47368  0038E6  0E0A               	movlw	10
 47369  0038E8  6EE6               	movwf	postinc1,c
 47370  0038EA  0E00               	movlw	0
 47371  0038EC  6EE6               	movwf	postinc1,c
 47372  0038EE  0E0A               	movlw	10
 47373  0038F0  6EE6               	movwf	postinc1,c
 47374  0038F2  0E00               	movlw	0
 47375  0038F4  6EE6               	movwf	postinc1,c
 47376  0038F6  C177  FFE6         	movff	displayDigits@number_to_display_temp,postinc1
 47377  0038FA  C178  FFE6         	movff	displayDigits@number_to_display_temp+1,postinc1
 47378  0038FE  EC01  F030         	call	___awdiv	;wreg free
 47379  003902  C03F  FFE6         	movff	btemp,postinc1
 47380  003906  C040  FFE6         	movff	btemp+1,postinc1
 47381  00390A  ECD7  F033         	call	___awmod	;wreg free
 47382  00390E  503F               	movf	btemp,w,c
 47383  003910  0100               	movlb	0	; () banked
 47384  003912  6FCE               	movwf	(displayDigits@digit+2)& (0+255),b
 47385                           
 47386                           ;segment.c: 77: digit[3] = number_to_display_temp % 10;
 47387  003914  0E0A               	movlw	10
 47388  003916  6EE6               	movwf	postinc1,c
 47389  003918  0E00               	movlw	0
 47390  00391A  6EE6               	movwf	postinc1,c
 47391  00391C  C177  FFE6         	movff	displayDigits@number_to_display_temp,postinc1
 47392  003920  C178  FFE6         	movff	displayDigits@number_to_display_temp+1,postinc1
 47393  003924  ECD7  F033         	call	___awmod	;wreg free
 47394  003928  503F               	movf	btemp,w,c
 47395  00392A  0100               	movlb	0	; () banked
 47396  00392C  6FCF               	movwf	(displayDigits@digit+3)& (0+255),b
 47397  00392E                     i2l2963:
 47398                           
 47399                           ;segment.c: 78: }
 47400                           ;segment.c: 80: if(DIGIT_MODE == 1) {
 47401                           
 47402                           ; BSR set to: 0
 47403  00392E  043A               	decf	_DIGIT_MODE,w,c
 47404  003930  A4D8               	btfss	status,2,c
 47405  003932  D023               	goto	i2l2966
 47406                           
 47407                           ;segment.c: 81: digit[0] = (number_to_display >> 12) % 16;
 47408  003934  C04B  F007         	movff	_number_to_display,??_displayDigits
 47409  003938  C04C  F008         	movff	_number_to_display+1,??_displayDigits+1
 47410  00393C  0E0C               	movlw	12
 47411  00393E  6E09               	movwf	(??_displayDigits+2)& (0+255),c
 47412  003940                     i2u5930_45:
 47413  003940  3408               	rlcf	??_displayDigits+1,w,c
 47414  003942  3208               	rrcf	??_displayDigits+1,f,c
 47415  003944  3207               	rrcf	??_displayDigits,f,c
 47416  003946  2E09               	decfsz	(??_displayDigits+2)& (0+255),f,c
 47417  003948  D7FB               	goto	i2u5930_45
 47418  00394A  5007               	movf	??_displayDigits,w,c
 47419  00394C  0B0F               	andlw	15
 47420  00394E  0100               	movlb	0	; () banked
 47421  003950  6FCC               	movwf	displayDigits@digit& (0+255),b
 47422                           
 47423                           ;segment.c: 82: digit[1] = (number_to_display >> 8) % 16;
 47424  003952  504C               	movf	_number_to_display+1,w,c
 47425  003954  0B0F               	andlw	15
 47426  003956  6FCD               	movwf	(displayDigits@digit+1)& (0+255),b
 47427                           
 47428                           ;segment.c: 83: digit[2] = (number_to_display >> 4) % 16;
 47429  003958  C04B  F007         	movff	_number_to_display,??_displayDigits
 47430  00395C  C04C  F008         	movff	_number_to_display+1,??_displayDigits+1
 47431  003960  0E04               	movlw	4
 47432  003962  6E09               	movwf	(??_displayDigits+2)& (0+255),c
 47433  003964                     i2u5931_45:
 47434  003964  3408               	rlcf	??_displayDigits+1,w,c
 47435  003966  3208               	rrcf	??_displayDigits+1,f,c
 47436  003968  3207               	rrcf	??_displayDigits,f,c
 47437  00396A  2E09               	decfsz	(??_displayDigits+2)& (0+255),f,c
 47438  00396C  D7FB               	goto	i2u5931_45
 47439  00396E  5007               	movf	??_displayDigits,w,c
 47440  003970  0B0F               	andlw	15
 47441  003972  6FCE               	movwf	(displayDigits@digit+2)& (0+255),b
 47442                           
 47443                           ;segment.c: 84: digit[3] = number_to_display % 16;
 47444  003974  504B               	movf	_number_to_display,w,c
 47445  003976  0B0F               	andlw	15
 47446  003978  6FCF               	movwf	(displayDigits@digit+3)& (0+255),b
 47447  00397A                     i2l2966:
 47448                           
 47449                           ;segment.c: 85: }
 47450                           ;segment.c: 87: if(DIGIT_MODE == 2) {
 47451  00397A  0E02               	movlw	2
 47452  00397C  183A               	xorwf	_DIGIT_MODE,w,c
 47453  00397E  A4D8               	btfss	status,2,c
 47454  003980  D020               	goto	i2l2967
 47455                           
 47456                           ;segment.c: 89: unsigned char lowByte = number_to_display & 0x7F;
 47457  003982  504B               	movf	_number_to_display,w,c
 47458  003984  0B7F               	andlw	127
 47459  003986  6E0A               	movwf	displayDigits@lowByte,c
 47460                           
 47461                           ;segment.c: 90: unsigned char highByte = (number_to_display >> 7) & 0x7F;
 47462  003988  C04B  F007         	movff	_number_to_display,??_displayDigits
 47463  00398C  C04C  F008         	movff	_number_to_display+1,??_displayDigits+1
 47464  003990  0E07               	movlw	7
 47465  003992  6E09               	movwf	(??_displayDigits+2)& (0+255),c
 47466  003994                     i2u5933_45:
 47467  003994  3408               	rlcf	??_displayDigits+1,w,c
 47468  003996  3208               	rrcf	??_displayDigits+1,f,c
 47469  003998  3207               	rrcf	??_displayDigits,f,c
 47470  00399A  2E09               	decfsz	(??_displayDigits+2)& (0+255),f,c
 47471  00399C  D7FB               	goto	i2u5933_45
 47472  00399E  5007               	movf	??_displayDigits,w,c
 47473  0039A0  0B7F               	andlw	127
 47474  0039A2  6E0B               	movwf	displayDigits@highByte,c
 47475                           
 47476                           ;segment.c: 92: digit[0] = (highByte >> 4) % 0x8;
 47477  0039A4  380B               	swapf	displayDigits@highByte,w,c
 47478  0039A6  0B0F               	andlw	15
 47479  0039A8  0B07               	andlw	7
 47480  0039AA  0100               	movlb	0	; () banked
 47481  0039AC  6FCC               	movwf	displayDigits@digit& (0+255),b
 47482                           
 47483                           ;segment.c: 93: digit[1] = highByte % 16;
 47484  0039AE  500B               	movf	displayDigits@highByte,w,c
 47485  0039B0  0B0F               	andlw	15
 47486  0039B2  6FCD               	movwf	(displayDigits@digit+1)& (0+255),b
 47487                           
 47488                           ;segment.c: 94: digit[2] = (lowByte >> 4) % 0x8;
 47489  0039B4  380A               	swapf	displayDigits@lowByte,w,c
 47490  0039B6  0B0F               	andlw	15
 47491  0039B8  0B07               	andlw	7
 47492  0039BA  6FCE               	movwf	(displayDigits@digit+2)& (0+255),b
 47493                           
 47494                           ;segment.c: 95: digit[3] = lowByte % 16;
 47495  0039BC  500A               	movf	displayDigits@lowByte,w,c
 47496  0039BE  0B0F               	andlw	15
 47497  0039C0  6FCF               	movwf	(displayDigits@digit+3)& (0+255),b
 47498  0039C2                     i2l2967:
 47499                           
 47500                           ;segment.c: 97: }
 47501                           ;segment.c: 100: number_to_display_last = number_to_display;
 47502                           
 47503                           ; BSR set to: 0
 47504  0039C2  C04B  F179         	movff	_number_to_display,displayDigits@number_to_display_last
 47505  0039C6  C04C  F17A         	movff	_number_to_display+1,displayDigits@number_to_display_last+1
 47506  0039CA                     i2l2962:
 47507                           
 47508                           ;segment.c: 101: }
 47509                           ;segment.c: 106: if (DIGIT_MODE == 0 || DIGIT_MODE == 1 || DIGIT_MODE == 2) {
 47510  0039CA  503A               	movf	_DIGIT_MODE,w,c
 47511  0039CC  B4D8               	btfsc	status,2,c
 47512  0039CE  D007               	goto	i2u5936_40
 47513  0039D0  043A               	decf	_DIGIT_MODE,w,c
 47514  0039D2  B4D8               	btfsc	status,2,c
 47515  0039D4  D004               	goto	i2u5936_40
 47516  0039D6  0E02               	movlw	2
 47517  0039D8  183A               	xorwf	_DIGIT_MODE,w,c
 47518  0039DA  A4D8               	btfss	status,2,c
 47519  0039DC  D08B               	goto	i2l2991
 47520  0039DE                     i2u5936_40:
 47521                           
 47522                           ;segment.c: 111: if(digit_counter == 0){
 47523  0039DE  0100               	movlb	0	; () banked
 47524  0039E0  51E9               	movf	displayDigits@digit_counter& (0+255),w,b
 47525  0039E2  A4D8               	btfss	status,2,c
 47526  0039E4  D022               	goto	i2l2978
 47527                           
 47528                           ; BSR set to: 0
 47529                           ;segment.c: 112: RC3 = 0;
 47530  0039E6  9682               	bcf	3970,3,c	;volatile
 47531                           
 47532                           ; BSR set to: 0
 47533                           ;segment.c: 116: if(DIGIT_MODE == 0 && number_to_display < 0){
 47534  0039E8  503A               	movf	_DIGIT_MODE,w,c
 47535  0039EA  B4D8               	btfsc	status,2,c
 47536                           
 47537                           ; BSR set to: 0
 47538  0039EC  AE4C               	btfss	_number_to_display+1,7,c
 47539  0039EE  D00A               	goto	i2l2972
 47540                           
 47541                           ; BSR set to: 0
 47542                           ;segment.c: 119: if(digit[1] > 0){PORTD = 0x40; RC0 = 1;}
 47543  0039F0  51CD               	movf	(displayDigits@digit+1)& (0+255),w,b
 47544  0039F2  B4D8               	btfsc	status,2,c
 47545  0039F4  D003               	goto	i2l2973
 47546                           
 47547                           ; BSR set to: 0
 47548  0039F6  0E40               	movlw	64
 47549  0039F8  6E83               	movwf	3971,c	;volatile
 47550                           
 47551                           ; BSR set to: 0
 47552  0039FA  8082               	bsf	3970,0,c	;volatile
 47553  0039FC                     i2l2973:
 47554                           
 47555                           ; BSR set to: 0
 47556                           ;segment.c: 120: if(light_decimal_points == 1){PORTD |= 0x80;}
 47557                           
 47558                           ; BSR set to: 0
 47559  0039FC  A006               	btfss	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 47560  0039FE  D015               	goto	i2l2978
 47561                           
 47562                           ; BSR set to: 0
 47563  003A00  8E83               	bsf	3971,7,c	;volatile
 47564                           
 47565                           ; BSR set to: 0
 47566                           ;segment.c: 121: }
 47567  003A02  D013               	goto	i2l2978
 47568  003A04                     i2l2972:
 47569                           
 47570                           ; BSR set to: 0
 47571                           ;segment.c: 123: else {
 47572                           ;segment.c: 124: PORTD = seg_bcd_hex[digit[0]];
 47573                           
 47574                           ; BSR set to: 0
 47575  003A04  51CC               	movf	displayDigits@digit& (0+255),w,b
 47576  003A06  0D01               	mullw	1
 47577  003A08  0E59               	movlw	low _seg_bcd_hex
 47578  003A0A  24F3               	addwf	prodl,w,c
 47579  003A0C  6EF6               	movwf	tblptrl,c
 47580  003A0E  0EF3               	movlw	high _seg_bcd_hex
 47581  003A10  20F4               	addwfc	prodh,w,c
 47582  003A12  6EF7               	movwf	tblptrh,c
 47583  003A14                     	if	0	;There are less than 3 active tblptr bytes
 47584  003A14                     	endif
 47585  003A14  0008               	tblrd		*
 47586  003A16  CFF5 FF83          	movff	tablat,3971	;volatile
 47587                           
 47588                           ; BSR set to: 0
 47589                           ;segment.c: 125: if(light_decimal_points == 1){PORTD |= 0x80;}
 47590  003A1A  B006               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 47591                           
 47592                           ; BSR set to: 0
 47593  003A1C  8E83               	bsf	3971,7,c	;volatile
 47594                           
 47595                           ; BSR set to: 0
 47596                           ;segment.c: 126: if(digit[0] == 0){RC0 = 0;}
 47597                           
 47598                           ; BSR set to: 0
 47599  003A1E  51CC               	movf	displayDigits@digit& (0+255),w,b
 47600  003A20  A4D8               	btfss	status,2,c
 47601  003A22  D002               	goto	i2l2977
 47602                           
 47603                           ; BSR set to: 0
 47604  003A24  9082               	bcf	3970,0,c	;volatile
 47605  003A26  D001               	goto	i2l2978
 47606  003A28                     i2l2977:
 47607                           
 47608                           ; BSR set to: 0
 47609                           ;segment.c: 127: else{RC0 = 1;}
 47610  003A28  8082               	bsf	3970,0,c	;volatile
 47611  003A2A                     i2l2978:
 47612                           
 47613                           ; BSR set to: 0
 47614                           ;segment.c: 128: }
 47615                           ;segment.c: 129: }
 47616                           ;segment.c: 130: if(digit_counter == 1){
 47617                           
 47618                           ; BSR set to: 0
 47619                           
 47620                           ; BSR set to: 0
 47621                           
 47622                           ; BSR set to: 0
 47623  003A2A  05E9               	decf	displayDigits@digit_counter& (0+255),w,b
 47624  003A2C  A4D8               	btfss	status,2,c
 47625  003A2E  D024               	goto	i2l2984
 47626                           
 47627                           ; BSR set to: 0
 47628                           ;segment.c: 131: RC0 = 0;
 47629  003A30  9082               	bcf	3970,0,c	;volatile
 47630                           
 47631                           ; BSR set to: 0
 47632                           ;segment.c: 134: PORTD = seg_bcd_hex[digit[1]];
 47633  003A32  51CD               	movf	(displayDigits@digit+1)& (0+255),w,b
 47634  003A34  0D01               	mullw	1
 47635  003A36  0E59               	movlw	low _seg_bcd_hex
 47636  003A38  24F3               	addwf	prodl,w,c
 47637  003A3A  6EF6               	movwf	tblptrl,c
 47638  003A3C  0EF3               	movlw	high _seg_bcd_hex
 47639  003A3E  20F4               	addwfc	prodh,w,c
 47640  003A40  6EF7               	movwf	tblptrh,c
 47641  003A42                     	if	0	;There are less than 3 active tblptr bytes
 47642  003A42                     	endif
 47643  003A42  0008               	tblrd		*
 47644  003A44  CFF5 FF83          	movff	tablat,3971	;volatile
 47645                           
 47646                           ; BSR set to: 0
 47647                           ;segment.c: 135: if(light_decimal_points == 1){PORTD |= 0x80;}
 47648  003A48  B006               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 47649                           
 47650                           ; BSR set to: 0
 47651  003A4A  8E83               	bsf	3971,7,c	;volatile
 47652                           
 47653                           ; BSR set to: 0
 47654                           ;segment.c: 136: if(digit[0] == 0 && digit[1] == 0){RC1 = 0;}
 47655                           
 47656                           ; BSR set to: 0
 47657  003A4C  51CC               	movf	displayDigits@digit& (0+255),w,b
 47658  003A4E  A4D8               	btfss	status,2,c
 47659  003A50  D005               	goto	i2l2981
 47660                           
 47661                           ; BSR set to: 0
 47662  003A52  51CD               	movf	(displayDigits@digit+1)& (0+255),w,b
 47663  003A54  A4D8               	btfss	status,2,c
 47664  003A56  D002               	goto	i2l2981
 47665                           
 47666                           ; BSR set to: 0
 47667  003A58  9282               	bcf	3970,1,c	;volatile
 47668  003A5A  D001               	goto	i2l2982
 47669  003A5C                     i2l2981:
 47670                           
 47671                           ; BSR set to: 0
 47672                           ;segment.c: 137: else{RC1 = 1;}
 47673  003A5C  8282               	bsf	3970,1,c	;volatile
 47674  003A5E                     i2l2982:
 47675                           
 47676                           ; BSR set to: 0
 47677                           ;segment.c: 139: if(DIGIT_MODE == 0 && number_to_display < 0){
 47678                           
 47679                           ; BSR set to: 0
 47680  003A5E  503A               	movf	_DIGIT_MODE,w,c
 47681  003A60  B4D8               	btfsc	status,2,c
 47682                           
 47683                           ; BSR set to: 0
 47684  003A62  AE4C               	btfss	_number_to_display+1,7,c
 47685  003A64  D009               	goto	i2l2984
 47686                           
 47687                           ; BSR set to: 0
 47688                           ;segment.c: 141: if(digit[2] > 0 && digit[1] == 0){PORTD = 0x40; RC1 = 1;}
 47689  003A66  51CE               	movf	(displayDigits@digit+2)& (0+255),w,b
 47690  003A68  B4D8               	btfsc	status,2,c
 47691  003A6A  D006               	goto	i2l2984
 47692                           
 47693                           ; BSR set to: 0
 47694  003A6C  51CD               	movf	(displayDigits@digit+1)& (0+255),w,b
 47695  003A6E  A4D8               	btfss	status,2,c
 47696  003A70  D003               	goto	i2l2984
 47697                           
 47698                           ; BSR set to: 0
 47699  003A72  0E40               	movlw	64
 47700  003A74  6E83               	movwf	3971,c	;volatile
 47701                           
 47702                           ; BSR set to: 0
 47703  003A76  8282               	bsf	3970,1,c	;volatile
 47704  003A78                     i2l2984:
 47705                           
 47706                           ; BSR set to: 0
 47707                           ;segment.c: 142: }
 47708                           ;segment.c: 143: }
 47709                           ;segment.c: 144: if(digit_counter == 2){
 47710                           
 47711                           ; BSR set to: 0
 47712                           
 47713                           ; BSR set to: 0
 47714                           
 47715                           ; BSR set to: 0
 47716  003A78  0E02               	movlw	2
 47717  003A7A  19E9               	xorwf	displayDigits@digit_counter& (0+255),w,b
 47718  003A7C  A4D8               	btfss	status,2,c
 47719  003A7E  D027               	goto	i2l2990
 47720                           
 47721                           ; BSR set to: 0
 47722                           ;segment.c: 145: RC1 = 0;
 47723  003A80  9282               	bcf	3970,1,c	;volatile
 47724                           
 47725                           ; BSR set to: 0
 47726                           ;segment.c: 148: PORTD = seg_bcd_hex[digit[2]];
 47727  003A82  51CE               	movf	(displayDigits@digit+2)& (0+255),w,b
 47728  003A84  0D01               	mullw	1
 47729  003A86  0E59               	movlw	low _seg_bcd_hex
 47730  003A88  24F3               	addwf	prodl,w,c
 47731  003A8A  6EF6               	movwf	tblptrl,c
 47732  003A8C  0EF3               	movlw	high _seg_bcd_hex
 47733  003A8E  20F4               	addwfc	prodh,w,c
 47734  003A90  6EF7               	movwf	tblptrh,c
 47735  003A92                     	if	0	;There are less than 3 active tblptr bytes
 47736  003A92                     	endif
 47737  003A92  0008               	tblrd		*
 47738  003A94  CFF5 FF83          	movff	tablat,3971	;volatile
 47739                           
 47740                           ; BSR set to: 0
 47741                           ;segment.c: 149: if(light_decimal_points == 1){PORTD |= 0x80;}
 47742  003A98  B006               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 47743                           
 47744                           ; BSR set to: 0
 47745  003A9A  8E83               	bsf	3971,7,c	;volatile
 47746                           
 47747                           ; BSR set to: 0
 47748                           ;segment.c: 150: if(digit[0] == 0 && digit[1] == 0 && digit[2] == 0){RC2 = 0;}
 47749                           
 47750                           ; BSR set to: 0
 47751  003A9C  51CC               	movf	displayDigits@digit& (0+255),w,b
 47752  003A9E  A4D8               	btfss	status,2,c
 47753  003AA0  D008               	goto	i2l2987
 47754                           
 47755                           ; BSR set to: 0
 47756  003AA2  51CD               	movf	(displayDigits@digit+1)& (0+255),w,b
 47757  003AA4  A4D8               	btfss	status,2,c
 47758  003AA6  D005               	goto	i2l2987
 47759                           
 47760                           ; BSR set to: 0
 47761  003AA8  51CE               	movf	(displayDigits@digit+2)& (0+255),w,b
 47762  003AAA  A4D8               	btfss	status,2,c
 47763  003AAC  D002               	goto	i2l2987
 47764                           
 47765                           ; BSR set to: 0
 47766  003AAE  9482               	bcf	3970,2,c	;volatile
 47767  003AB0  D001               	goto	i2l2988
 47768  003AB2                     i2l2987:
 47769                           
 47770                           ; BSR set to: 0
 47771                           ;segment.c: 151: else{RC2 = 1;}
 47772  003AB2  8482               	bsf	3970,2,c	;volatile
 47773  003AB4                     i2l2988:
 47774                           
 47775                           ; BSR set to: 0
 47776                           ;segment.c: 153: if(DIGIT_MODE == 0 && number_to_display < 0){
 47777                           
 47778                           ; BSR set to: 0
 47779  003AB4  503A               	movf	_DIGIT_MODE,w,c
 47780  003AB6  B4D8               	btfsc	status,2,c
 47781                           
 47782                           ; BSR set to: 0
 47783  003AB8  AE4C               	btfss	_number_to_display+1,7,c
 47784  003ABA  D009               	goto	i2l2990
 47785                           
 47786                           ; BSR set to: 0
 47787                           ;segment.c: 154: if(digit[3] > 0 && digit[2] == 0){PORTD = 0x40; RC2 = 1;}
 47788  003ABC  51CF               	movf	(displayDigits@digit+3)& (0+255),w,b
 47789  003ABE  B4D8               	btfsc	status,2,c
 47790  003AC0  D006               	goto	i2l2990
 47791                           
 47792                           ; BSR set to: 0
 47793  003AC2  51CE               	movf	(displayDigits@digit+2)& (0+255),w,b
 47794  003AC4  A4D8               	btfss	status,2,c
 47795  003AC6  D003               	goto	i2l2990
 47796                           
 47797                           ; BSR set to: 0
 47798  003AC8  0E40               	movlw	64
 47799  003ACA  6E83               	movwf	3971,c	;volatile
 47800                           
 47801                           ; BSR set to: 0
 47802  003ACC  8482               	bsf	3970,2,c	;volatile
 47803  003ACE                     i2l2990:
 47804                           
 47805                           ; BSR set to: 0
 47806                           ;segment.c: 155: }
 47807                           ;segment.c: 156: }
 47808                           ;segment.c: 157: if(digit_counter == 3){
 47809                           
 47810                           ; BSR set to: 0
 47811                           
 47812                           ; BSR set to: 0
 47813                           
 47814                           ; BSR set to: 0
 47815  003ACE  0E03               	movlw	3
 47816  003AD0  19E9               	xorwf	displayDigits@digit_counter& (0+255),w,b
 47817  003AD2  A4D8               	btfss	status,2,c
 47818  003AD4  D00F               	goto	i2l2991
 47819                           
 47820                           ; BSR set to: 0
 47821                           ;segment.c: 158: RC2 = 0;
 47822  003AD6  9482               	bcf	3970,2,c	;volatile
 47823                           
 47824                           ; BSR set to: 0
 47825                           ;segment.c: 161: PORTD = seg_bcd_hex[digit[3]];
 47826  003AD8  51CF               	movf	(displayDigits@digit+3)& (0+255),w,b
 47827  003ADA  0D01               	mullw	1
 47828  003ADC  0E59               	movlw	low _seg_bcd_hex
 47829  003ADE  24F3               	addwf	prodl,w,c
 47830  003AE0  6EF6               	movwf	tblptrl,c
 47831  003AE2  0EF3               	movlw	high _seg_bcd_hex
 47832  003AE4  20F4               	addwfc	prodh,w,c
 47833  003AE6  6EF7               	movwf	tblptrh,c
 47834  003AE8                     	if	0	;There are less than 3 active tblptr bytes
 47835  003AE8                     	endif
 47836  003AE8  0008               	tblrd		*
 47837  003AEA  CFF5 FF83          	movff	tablat,3971	;volatile
 47838                           
 47839                           ; BSR set to: 0
 47840                           ;segment.c: 162: if(light_decimal_points == 1){PORTD |= 0x80;}
 47841  003AEE  B006               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 47842                           
 47843                           ; BSR set to: 0
 47844  003AF0  8E83               	bsf	3971,7,c	;volatile
 47845                           
 47846                           ; BSR set to: 0
 47847                           ;segment.c: 163: RC3 = 1;
 47848                           
 47849                           ; BSR set to: 0
 47850  003AF2  8682               	bsf	3970,3,c	;volatile
 47851  003AF4                     i2l2991:
 47852                           
 47853                           ;segment.c: 164: }
 47854                           ;segment.c: 165: }
 47855                           ;segment.c: 168: digit_counter++;
 47856                           
 47857                           ; BSR set to: 0
 47858  003AF4  0100               	movlb	0	; () banked
 47859  003AF6  2BE9               	incf	displayDigits@digit_counter& (0+255),f,b
 47860                           
 47861                           ; BSR set to: 0
 47862                           ;segment.c: 169: if(digit_counter > 3){digit_counter = 0;}
 47863  003AF8  0E03               	movlw	3
 47864  003AFA  65E9               	cpfsgt	displayDigits@digit_counter& (0+255),b
 47865  003AFC  0012               	return	
 47866                           
 47867                           ; BSR set to: 0
 47868  003AFE  0E00               	movlw	0
 47869  003B00  6FE9               	movwf	displayDigits@digit_counter& (0+255),b
 47870  003B02  0012               	return	
 47871  003B04                     __end_of_displayDigits:
 47872                           	opt stack 0
 47873                           tblptru	equ	0xFF8
 47874                           tblptrh	equ	0xFF7
 47875                           tblptrl	equ	0xFF6
 47876                           tablat	equ	0xFF5
 47877                           prodh	equ	0xFF4
 47878                           prodl	equ	0xFF3
 47879                           intcon	equ	0xFF2
 47880                           intcon2	equ	0xFF1
 47881                           indf0	equ	0xFEF
 47882                           postinc0	equ	0xFEE
 47883                           postdec0	equ	0xFED
 47884                           fsr0h	equ	0xFEA
 47885                           fsr0l	equ	0xFE9
 47886                           wreg	equ	0xFE8
 47887                           postinc1	equ	0xFE6
 47888                           postdec1	equ	0xFE5
 47889                           plusw1	equ	0xFE3
 47890                           fsr1h	equ	0xFE2
 47891                           fsr1l	equ	0xFE1
 47892                           indf2	equ	0xFDF
 47893                           postinc2	equ	0xFDE
 47894                           postdec2	equ	0xFDD
 47895                           plusw2	equ	0xFDB
 47896                           fsr2h	equ	0xFDA
 47897                           fsr2l	equ	0xFD9
 47898                           status	equ	0xFD8
 47899                           tblptru	equ	0xFF8
 47900                           tblptrh	equ	0xFF7
 47901                           tblptrl	equ	0xFF6
 47902                           tablat	equ	0xFF5
 47903                           prodh	equ	0xFF4
 47904                           prodl	equ	0xFF3
 47905                           intcon	equ	0xFF2
 47906                           intcon2	equ	0xFF1
 47907                           indf0	equ	0xFEF
 47908                           postinc0	equ	0xFEE
 47909                           postdec0	equ	0xFED
 47910                           fsr0h	equ	0xFEA
 47911                           fsr0l	equ	0xFE9
 47912                           wreg	equ	0xFE8
 47913                           postinc1	equ	0xFE6
 47914                           postdec1	equ	0xFE5
 47915                           plusw1	equ	0xFE3
 47916                           fsr1h	equ	0xFE2
 47917                           fsr1l	equ	0xFE1
 47918                           indf2	equ	0xFDF
 47919                           postinc2	equ	0xFDE
 47920                           postdec2	equ	0xFDD
 47921                           plusw2	equ	0xFDB
 47922                           fsr2h	equ	0xFDA
 47923                           fsr2l	equ	0xFD9
 47924                           status	equ	0xFD8
 47925                           
 47926                           	psect	rparam
 47927  0000                     tblptru	equ	0xFF8
 47928                           tblptrh	equ	0xFF7
 47929                           tblptrl	equ	0xFF6
 47930                           tablat	equ	0xFF5
 47931                           prodh	equ	0xFF4
 47932                           prodl	equ	0xFF3
 47933                           intcon	equ	0xFF2
 47934                           intcon2	equ	0xFF1
 47935                           indf0	equ	0xFEF
 47936                           postinc0	equ	0xFEE
 47937                           postdec0	equ	0xFED
 47938                           fsr0h	equ	0xFEA
 47939                           fsr0l	equ	0xFE9
 47940                           wreg	equ	0xFE8
 47941                           postinc1	equ	0xFE6
 47942                           postdec1	equ	0xFE5
 47943                           plusw1	equ	0xFE3
 47944                           fsr1h	equ	0xFE2
 47945                           fsr1l	equ	0xFE1
 47946                           indf2	equ	0xFDF
 47947                           postinc2	equ	0xFDE
 47948                           postdec2	equ	0xFDD
 47949                           plusw2	equ	0xFDB
 47950                           fsr2h	equ	0xFDA
 47951                           fsr2l	equ	0xFD9
 47952                           status	equ	0xFD8
 47953                           
 47954                           	psect	temp
 47955  00003F                     btemp:
 47956                           	opt stack 0
 47957  00003F                     	ds	12
 47958  0000                     wtemp0	set	btemp
 47959  0000                     wtemp1	set	btemp+2
 47960  0000                     wtemp2	set	btemp+4
 47961  0000                     wtemp3	set	btemp+6
 47962  0000                     wtemp4	set	btemp+8
 47963  0000                     wtemp5	set	btemp+10
 47964  0000                     wtemp6	set	btemp+1
 47965  0000                     ttemp0	set	btemp
 47966  0000                     ttemp1	set	btemp+3
 47967  0000                     ttemp2	set	btemp+6
 47968  0000                     ttemp3	set	btemp+9
 47969  0000                     ltemp0	set	btemp
 47970  0000                     ltemp1	set	btemp+4
 47971  0000                     ltemp2	set	btemp+8
 47972                           tblptru	equ	0xFF8
 47973                           tblptrh	equ	0xFF7
 47974                           tblptrl	equ	0xFF6
 47975                           tablat	equ	0xFF5
 47976                           prodh	equ	0xFF4
 47977                           prodl	equ	0xFF3
 47978                           intcon	equ	0xFF2
 47979                           intcon2	equ	0xFF1
 47980                           indf0	equ	0xFEF
 47981                           postinc0	equ	0xFEE
 47982                           postdec0	equ	0xFED
 47983                           fsr0h	equ	0xFEA
 47984                           fsr0l	equ	0xFE9
 47985                           wreg	equ	0xFE8
 47986                           postinc1	equ	0xFE6
 47987                           postdec1	equ	0xFE5
 47988                           plusw1	equ	0xFE3
 47989                           fsr1h	equ	0xFE2
 47990                           fsr1l	equ	0xFE1
 47991                           indf2	equ	0xFDF
 47992                           postinc2	equ	0xFDE
 47993                           postdec2	equ	0xFDD
 47994                           plusw2	equ	0xFDB
 47995                           fsr2h	equ	0xFDA
 47996                           fsr2l	equ	0xFD9
 47997                           status	equ	0xFD8


Data Sizes:
    Strings     667
    Constant    5281
    Data        242
    BSS         381
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           83     35      70
    BANK0           160    108     160
    BANK1           256     80     256
    BANK2           256      2     231
    BANK3           256      0     137
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_61(CODE[5]), STR_59(CODE[5]), STR_56(CODE[5]), STR_54(CODE[5]), 
		 -> STR_44(CODE[5]), STR_43(CODE[5]), STR_41(CODE[5]), STR_9(CODE[5]), 
		 -> STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[5]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 5
		 -> string_to_display(BANK1[5]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 5
		 -> string_to_display(BANK1[5]), 

    arpeggioPtr	PTR unsigned char  size(2) Largest target is 16
		 -> NULL(NULL[0]), ARPEGGIO_RANDOM(BANK2[16]), ARPEGGIO_SORTED(BANK2[16]), ARPEGGIO(BANK1[16]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 5
		 -> string_to_display(BANK1[5]), 

    playThisNote8@mode_p	PTR unsigned char  size(2) Largest target is 15
		 -> locrian_key(CODE[15]), aeolian_key(CODE[15]), mixolydian_key(CODE[15]), lydian_key(CODE[15]), 
		 -> phrygian_key(CODE[15]), dorian_key(CODE[15]), ionian_key(CODE[15]), 

    playSeventh@seventh_p	PTR unsigned char  size(2) Largest target is 4
		 -> diminished_7th(BANK2[4]), half_diminished_7th(BANK2[4]), minor_7th(BANK2[4]), major_7th(BANK2[4]), 
		 -> dominant_7th(BANK2[4]), 

    playTriad@triad_p	PTR unsigned char  size(2) Largest target is 3
		 -> diminished_triad(BANK2[3]), augmented_triad(BANK2[3]), minor_triad(BANK2[3]), major_triad(BANK1[3]), 

    Lcd_Print_String@a	PTR unsigned char  size(2) Largest target is 2397
		 -> STR_75(CODE[16]), STR_74(CODE[12]), STR_73(CODE[10]), STR_72(CODE[12]), 
		 -> STR_71(CODE[10]), STR_70(CODE[12]), STR_69(CODE[10]), STR_68(CODE[12]), 
		 -> STR_67(CODE[10]), STR_66(CODE[12]), STR_65(CODE[13]), STR_64(CODE[15]), 
		 -> STR_63(CODE[15]), STR_62(CODE[16]), STR_60(CODE[14]), STR_58(CODE[12]), 
		 -> STR_57(CODE[15]), STR_55(CODE[14]), STR_53(CODE[15]), STR_52(CODE[17]), 
		 -> STR_51(CODE[9]), STR_50(CODE[10]), STR_49(CODE[13]), STR_48(CODE[13]), 
		 -> STR_47(CODE[17]), STR_46(CODE[14]), STR_45(CODE[14]), STR_42(CODE[15]), 
		 -> STR_40(CODE[16]), STR_39(CODE[17]), STR_38(CODE[13]), STR_37(CODE[17]), 
		 -> STR_36(CODE[8]), STR_35(CODE[8]), STR_34(CODE[12]), STR_33(CODE[17]), 
		 -> STR_32(CODE[15]), STR_31(CODE[14]), STR_30(CODE[17]), STR_29(CODE[15]), 
		 -> STR_28(CODE[17]), STR_27(CODE[14]), STR_26(CODE[16]), STR_25(CODE[14]), 
		 -> STR_24(CODE[12]), LCD_STRINGS(CODE[2397]), STR_23(CODE[13]), STR_22(CODE[17]), 
		 -> STR_21(CODE[16]), STR_20(CODE[5]), STR_19(CODE[11]), STR_18(CODE[11]), 
		 -> STR_17(CODE[11]), STR_16(CODE[10]), STR_15(CODE[11]), STR_14(CODE[11]), 
		 -> STR_13(CODE[11]), STR_12(CODE[10]), string2display(BANK1[5]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_playArpeggio
    _playArpeggio->_sort_pitches
    _display->_displayDigits

Critical Paths under _main in BANK0

    _main->_calculate_pulse_length
    _panic_button->_controlChange
    _Lcd_Clear->_Lcd_Cmd
    _Function_H_6->_Function_H_6_1
    _Function_H_2->_calculate_pulse_length
    _exitFunction->_Lcd_Print_String
    _Function_G_3->_Lcd_Print_String
    _loadFromEEPROM->_calculate_pulse_length
    _calculate_pulse_length->___fltol
    _exitLoad->_Lcd_Print_String
    _exitSave->_Lcd_Print_String
    _eepromExit->_Lcd_Print_String
    _Function_D->_Function_D_3
    _Function_D->_Function_D_4
    _Function_D->_Function_D_5
    _setControllerNumbers->_Lcd_Print_String
    _calculate_alpha->___fldiv
    ___fldiv->___flmul
    _Function_C->_Function_C_2
    _Function_C->_Function_C_3
    _digitalInputs->_processOctave
    _processOctave->_doTheUnLatch
    _doTheUnLatch->_playThisNote8
    _doTheLatch->_strcpy
    _processKeyboard->_keyboard_eight_note_efficient
    _keyboard_sharps_only_efficient->_playThisNotePentatonic
    _playThisNotePentatonic->_add_notes_to_arpeggio
    _keyboard_eight_note_efficient->_playThisNote8
    _playThisNote8->_add_notes_to_arpeggio
    _playDiatonicTriadMinor->_wait_one_pulse
    _playDiatonicTriadMajor->_wait_one_pulse
    _playDiatonicSeventhMinor->_wait_one_pulse
    _playDiatonicSeventhMajor->_wait_one_pulse
    _keyboard_all_note_efficient->_playThisNote
    _playThisNote->_add_notes_to_arpeggio
    _playTriad->_wait_one_pulse
    _playSeventh->_wait_one_pulse
    _setupArpeggio->_copy_array
    _delete_notes_from_arpeggio->_rotateArrayLeft
    _add_notes_to_arpeggio->_rotateArrayLeft
    _processDrumpad->_controlChange
    _processDrumpad->_noteOffDrum
    _processDrumpad->_noteOnDrum
    _keyboardTranspose->_printThisNumber
    _analogInputs->_readPotentiometers
    _readPotentiometers->___fltol
    _processPotentiometers->_controlChange
    _processPotentiometers->_pitchBend
    _map->___aldiv
    ___fltol->___fladd
    ___flneg->___fldiv
    ___flmul->___xxtofl
    ___fladd->___flneg
    _clear_row2->_Lcd_Print_String
    _clear_row1->_Lcd_Print_String
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Print_String->_Lcd_Print_Char
    _Lcd_Print_Char->_Lcd_SetBit
    _initializeSaveSlotsOnce->_saveToEEPROM
    _saveToEEPROM->_Write_b_eep
    _initializeMenuArray->___wmul
    _displayTest->_strcpy
    _Lcd_Start->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_SetBit

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _selectSlotOnBoot->_loadFromEEPROM
    _Function_G_2->_loadFromEEPROM
    _un_block_code->_analogInputs
    _analogInputs->_readPotentiometers

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_selectSlotOnBoot

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0 53476547
                                              1 BANK2      1     1      0
                     _ADC_Initialize
                          _Lcd_Start
                         _Read_b_eep
                       _analogInputs
                    _calculate_alpha
             _calculate_pulse_length
                      _digitalInputs
                        _displayTest
                _initializeMenuArray
            _initializeSaveSlotsOnce
                           _menu_lcd
                       _panic_button
               _processEncoderBuxton
                   _selectSlotOnBoot
                              _setup
                              _srand
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _selectSlotOnBoot                                     1     1      0   15019
                                              0 BANK2      1     1      0
                         _Read_b_eep
                     _loadFromEEPROM
 ---------------------------------------------------------------------------------
 (1) _panic_button                                         0     0      0   23217
                      _controlChange
 ---------------------------------------------------------------------------------
 (1) _menu_lcd                                             0     0      0 52201971
                         _Function_A
                         _Function_B
                         _Function_C
                         _Function_D
                         _Function_E
                         _Function_F
                         _Function_G
                         _Function_H
                          _Lcd_Clear
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                            ___lbmod
                             ___wmul
                       _exitFunction
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     155
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Function_H                                           0     0      0 23386344
                       _Function_H_1
                       _Function_H_2
                       _Function_H_3
                       _Function_H_4
                       _Function_H_5
                       _Function_H_6
                       _Function_H_7
                       _Function_H_8
                       _Function_H_9
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_9                                         0     0      0 6233815
                     _Function_H_9_1
                     _Function_H_9_2
                     _Function_H_9_3
                     _Function_H_9_4
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_4                                       0     0      0 1246763
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_3                                       0     0      0 1246763
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_2                                       0     0      0 1246763
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_1                                       0     0      0 1246763
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_8                                         0     0      0 3699007
                     _Function_H_8_1
                     _Function_H_8_2
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_8_2                                       0     0      0 1226122
                   _Lcd_Print_String
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_8_1                                       0     0      0 1238527
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_7                                         0     0      0 1241516
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
                             _strcpy
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_6                                         0     0      0 4248271
                     _Function_H_6_1
                     _Function_H_6_2
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_6_2                                       0     0      0 1241516
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
                             _strcpy
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_6_1                                       1     1      0 1772397
                                            103 BANK0      1     1      0
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
                         _doTheLatch
                       _doTheUnLatch
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_5                                         2     2      0 1246893
                                            103 BANK0      2     2      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_4                                         0     0      0 1249142
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _setupArpeggio
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_3                                         0     0      0 1231152
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _clear_row2
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_2                                         0     0      0 1242198
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
             _calculate_pulse_length
                         _clear_row2
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_1                                         1     1      0 1759992
                                            103 BANK0      1     1      0
                   _Lcd_Print_String
                         _clear_row2
                       _doTheUnLatch
                             _strcpy
                      _un_block_code
 ---------------------------------------------------------------------------------
 (2) _Function_G                                           0     0      0 5166884
                       _Function_G_1
                       _Function_G_2
                       _Function_G_3
                       _Function_G_4
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                         _eepromExit
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_G_4                                         0     0      0 1270348
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                       _exitFunction
                      _un_block_code
 ---------------------------------------------------------------------------------
 (2) _exitFunction                                         2     2      0   22195
                                             14 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (3) _Function_G_3                                         2     2      0   35990
                                             14 BANK0      2     2      0
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                         _clear_row1
                         _clear_row2
 ---------------------------------------------------------------------------------
 (3) _Function_G_2                                         0     0      0 1306985
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _eepromExit
                           _exitLoad
                     _loadFromEEPROM
                      _un_block_code
 ---------------------------------------------------------------------------------
 (2) _loadFromEEPROM                                      80    80      0   14442
                                              0 BANK1     80    80      0
                         _Read_b_eep
             _calculate_pulse_length
 ---------------------------------------------------------------------------------
 (3) _calculate_pulse_length                              10     8      2   11046
                                             98 BANK0     10     8      2
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) _exitLoad                                             2     2      0   22195
                                             14 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (3) _Function_G_1                                         0     0      0 1297008
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _eepromExit
                           _exitSave
                       _saveToEEPROM
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _exitSave                                             2     2      0   22195
                                             14 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (3) _eepromExit                                           2     2      0   22195
                                             14 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (2) _Function_F                                           0     0      0 1247287
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _clear_row2
                         _int2string
                      _programChange
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _programChange                                        3     1      2   16135
                                              0 BANK0      3     1      2
                            ___lbmod
         _key_press_release_note_off
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (2) _Function_E                                           0     0      0 3671852
                       _Function_E_1
                       _Function_E_2
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_E_2                                         0     0      0 1218747
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_E_1                                         0     0      0 1218747
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (2) _Function_D                                           0     0      0 7492585
                       _Function_D_1
                       _Function_D_2
                       _Function_D_3
                       _Function_D_4
                       _Function_D_5
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_D_5                                         1     1      0 1262609
                                            103 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _setControllerNumbers
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_D_4                                         1     1      0 1262609
                                            103 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _setControllerNumbers
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_D_3                                         1     1      0 1262609
                                            103 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _setControllerNumbers
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _setControllerNumbers                                 2     2      0   15812
                                             14 BANK0      2     2      0
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _int2string
 ---------------------------------------------------------------------------------
 (3) _Function_D_2                                         0     0      0 1223538
                           _Busy_eep
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                        _Write_b_eep
                    _calculate_alpha
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _calculate_alpha                                      0     0      0    3401
                            ___fldiv
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___fldiv                                             25    17      8    2475
                                             39 BANK0     25    17      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _Function_D_1                                         0     0      0 1246862
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
            _setControllerResolution
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _setControllerResolution                              1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Function_C                                           0     0      0 4985023
                       _Function_C_1
                       _Function_C_2
                       _Function_C_3
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_C_3                                         2     2      0 1251951
                                            103 BANK0      2     2      0
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_C_2                                         2     2      0 1251951
                                            103 BANK0      2     2      0
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _int2string                                           6     4      2    2415
                                              0 BANK0      6     4      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (19) ___awdiv                                             8     4      4     575
 ---------------------------------------------------------------------------------
 (3) _Function_C_1                                         0     0      0 1246763
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (2) _Function_B                                           0     0      0 1234358
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (2) _Function_A                                           0     0      0 4974647
                       _Function_A_1
                       _Function_A_2
                       _Function_A_3
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_A_3                                         0     0      0 1246763
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_A_2                                         0     0      0 1246763
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_A_1                                         0     0      0 1246763
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _un_block_code                                        0     0      0 1203927
                       _analogInputs
                      _digitalInputs
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (1) _processEncoderBuxton                                 7     7      0       0
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (4) _digitalInputs                                        0     0      0 1151643
                 _buttonInputsSerial
                  _keyboardTranspose
                     _processDrumpad
                    _processKeyboard
                      _processOctave
 ---------------------------------------------------------------------------------
 (5) _processOctave                                        2     2      0  561545
                                             30 BANK0      2     2      0
                            ___awmod
                             ___wmul
                         _doTheLatch
                       _doTheUnLatch
         _key_press_release_note_off
                    _printThisNumber
                     _random_pitches
       _random_pitches_non_repeating
                      _resetArpeggio
                             _strcpy
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (6) _doTheUnLatch                                         4     4      0  530847
                                             26 BANK0      4     4      0
                       _playThisNote
                      _playThisNote8
             _playThisNotePentatonic
                             _strcpy
 ---------------------------------------------------------------------------------
 (6) _doTheLatch                                           0     0      0    2989
                             _strcpy
 ---------------------------------------------------------------------------------
 (5) _processKeyboard                                      0     0      0  532958
        _keyboard_all_note_efficient
      _keyboard_eight_note_efficient
     _keyboard_sharps_only_efficient
 ---------------------------------------------------------------------------------
 (6) _keyboard_sharps_only_efficient                       2     2      0   61473
                                             23 BANK0      2     2      0
             _playThisNotePentatonic
 ---------------------------------------------------------------------------------
 (7) _playThisNotePentatonic                               7     6      1   60113
                                             17 BANK0      6     5      1
              _add_notes_to_arpeggio
         _delete_notes_from_arpeggio
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (6) _keyboard_eight_note_efficient                        2     2      0  295993
                                             26 BANK0      2     2      0
                      _playThisNote8
 ---------------------------------------------------------------------------------
 (7) _playThisNote8                                        9     8      1  293953
                                             17 BANK0      9     8      1
              _add_notes_to_arpeggio
         _delete_notes_from_arpeggio
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
           _playDiatonicSeventhMajor
           _playDiatonicSeventhMinor
             _playDiatonicTriadMajor
             _playDiatonicTriadMinor
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (8) _playDiatonicTriadMinor                               8     7      1   58143
                                              1 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (8) _playDiatonicTriadMajor                               8     7      1   57895
                                              1 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (8) _playDiatonicSeventhMinor                             8     7      1   58143
                                              1 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (8) _playDiatonicSeventhMajor                             8     7      1   57895
                                              1 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (6) _keyboard_all_note_efficient                          1     1      0  175492
                                             22 BANK0      1     1      0
                       _playThisNote
 ---------------------------------------------------------------------------------
 (7) _playThisNote                                         5     5      0  173792
                                             17 BANK0      5     5      0
              _add_notes_to_arpeggio
         _delete_notes_from_arpeggio
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                        _playSeventh
                          _playTriad
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (8) _playTriad                                            9     9      0   57817
                                              1 BANK0      9     9      0
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (8) _playSeventh                                          9     9      0   57820
                                              1 BANK0      9     9      0
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (18) _noteOn                                              3     0      3   27261
                            _noteOff
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (8) _finish_arpeggio_setup                                0     0      0    2379
                      _resetArpeggio
                      _setupArpeggio
 ---------------------------------------------------------------------------------
 (9) _setupArpeggio                                        0     0      0    2379
                         _copy_array
                     _random_pitches
       _random_pitches_non_repeating
 ---------------------------------------------------------------------------------
 (18) _random_pitches_non_repeating                        3     3      0    1157
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (18) _random_pitches                                      2     2      0    1061
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (19) _rand                                                0     0      0     214
                             ___lmul
 ---------------------------------------------------------------------------------
 (19) ___awmod                                             6     2      4     745
 ---------------------------------------------------------------------------------
 (10) _copy_array                                          1     1      0     161
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _resetArpeggio                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _delete_notes_from_arpeggio                           2     2      0     387
                                              9 BANK0      2     2      0
                     _findArrayIndex
                    _rotateArrayLeft
 ---------------------------------------------------------------------------------
 (9) _findArrayIndex                                       3     3      0     161
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (8) _add_notes_to_arpeggio                                8     8      0     223
                                              9 BANK0      8     8      0
                    _rotateArrayLeft
 ---------------------------------------------------------------------------------
 (9) _rotateArrayLeft                                      9     9      0     161
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (5) _processDrumpad                                       0     0      0   42679
                      _controlChange
                        _noteOffDrum
                         _noteOnDrum
 ---------------------------------------------------------------------------------
 (6) _noteOnDrum                                           3     1      2   16715
                                              0 BANK0      3     1      2
                            _noteOff
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (6) _noteOffDrum                                          3     1      2    2747
                                              0 BANK0      3     1      2
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (5) _keyboardTranspose                                    0     0      0   14325
         _key_press_release_note_off
                    _printThisNumber
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (6) _wait_one_pulse                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _printThisNumber                                      2     0      2     481
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _buttonInputsSerial                                   6     6      0     136
                                              0 BANK0      6     6      0
                              _clock
                               _load
 ---------------------------------------------------------------------------------
 (6) _load                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _clock                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _analogInputs                                         7     7      0   52284
                                              7 BANK1      7     7      0
                 _readPotentiometers
 ---------------------------------------------------------------------------------
 (5) _readPotentiometers                                  12    12      0   52284
                                             98 BANK0      5     5      0
                                              0 BANK1      7     7      0
                           _ADC_Read
                            ___fladd
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _map
              _processPotentiometers
 ---------------------------------------------------------------------------------
 (6) _processPotentiometers                                6     6      0   40375
                                              3 BANK0      6     6      0
                      _controlChange
                          _pitchBend
 ---------------------------------------------------------------------------------
 (7) _pitchBend                                            3     1      2   16315
                                              0 BANK0      3     1      2
                            ___lbmod
         _key_press_release_note_off
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (2) _controlChange                                        3     1      2   23217
                                              0 BANK0      3     1      2
                            ___lbmod
         _key_press_release_note_off
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (3) _key_press_release_note_off                           0     0      0   13813
                            _noteOff
 ---------------------------------------------------------------------------------
 (19) _noteOff                                             3     0      3   13813
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (19) _sendUSB                                             8     5      3     584
 ---------------------------------------------------------------------------------
 (19) _sendOut                                             8     5      3     599
 ---------------------------------------------------------------------------------
 (17) ___lbmod                                             4     2      2     804
 ---------------------------------------------------------------------------------
 (6) _map                                                 40    20     20    1956
                                             14 BANK0     40    20     20
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (20) ___lmul                                             12     4      8     214
 ---------------------------------------------------------------------------------
 (7) ___aldiv                                             14     6      8     625
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4     926
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     517
                                             88 BANK0     10     6      4
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flneg                                              4     0      4     245
                                             64 BANK0      4     0      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             25    17      8    3053
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             20    12      8    3762
                                             68 BANK0     20    12      8
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) _ADC_Read                                             5     3      2      34
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _clear_row2                                           0     0      0   12405
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
 ---------------------------------------------------------------------------------
 (3) _clear_row1                                           0     0      0   12405
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
 ---------------------------------------------------------------------------------
 (4) _Lcd_Set_Cursor                                       5     4      1    2615
                                              3 BANK0      5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (4) _Lcd_Print_String                                     6     4      2    9790
                                              8 BANK0      6     4      2
                     _Lcd_Print_Char
                            ___lbmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _Lcd_Print_Char                                       7     7      0     390
                                              1 BANK0      7     7      0
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (1) _initializeSaveSlotsOnce                              1     1      0    6401
                                             84 BANK0      1     1      0
                           _Busy_eep
                         _Read_b_eep
                        _Write_b_eep
                       _saveToEEPROM
 ---------------------------------------------------------------------------------
 (4) _saveToEEPROM                                        80    80      0    4465
                                              4 BANK0     80    80      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (4) _Write_b_eep                                          4     1      3    1390
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (4) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2     512
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initializeMenuArray                                  3     3      0    7596
                                              6 BANK0      3     3      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    7432
                                              0 BANK0      6     2      4
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _displayTest                                          2     2      0    2989
                                              6 BANK0      2     2      0
                             _strcpy
 ---------------------------------------------------------------------------------
 (6) _strcpy                                               6     2      4    2989
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Start                                            3     3      0     347
                                              3 BANK0      3     3      0
                            _Lcd_Cmd
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (5) _Lcd_Cmd                                              2     2      0     155
                                              1 BANK0      2     2      0
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (6) _Lcd_SetBit                                           1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _ISR                                                24    24      0   47088
                                             11 COMRAM    24    24      0
                            ___lbmod
                            _display
                _encoderInputsBuxton
                       _playArpeggio
 ---------------------------------------------------------------------------------
 (17) _playArpeggio                                        6     6      0   44631
                                              5 COMRAM     6     6      0
                            ___awmod
                            _noteOff
                             _noteOn
                               _rand
                     _random_pitches
       _random_pitches_non_repeating
                       _sort_pitches
 ---------------------------------------------------------------------------------
 (18) _sort_pitches                                        5     5      0     380
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (18) _random_pitches_non_repeating                        3     3      0    1157
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (18) _random_pitches                                      2     2      0    1061
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (19) _rand                                                0     0      0     214
                             ___lmul
 ---------------------------------------------------------------------------------
 (20) ___lmul                                             12     4      8     214
 ---------------------------------------------------------------------------------
 (18) _noteOn                                              3     0      3   27261
                            _noteOff
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (19) _noteOff                                             3     0      3   13813
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (19) _sendUSB                                             8     5      3     584
 ---------------------------------------------------------------------------------
 (19) _sendOut                                             8     5      3     599
 ---------------------------------------------------------------------------------
 (17) _encoderInputsBuxton                                 6     6      0      69
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (17) _display                                             0     0      0    1584
                      _displayDigits
                      _displayString
 ---------------------------------------------------------------------------------
 (18) _displayString                                       2     2      0     134
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (18) _displayDigits                                       5     5      0    1450
                                              0 COMRAM     5     5      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (19) ___awmod                                             6     2      4     745
 ---------------------------------------------------------------------------------
 (19) ___awdiv                                             8     4      4     575
 ---------------------------------------------------------------------------------
 (17) ___lbmod                                             4     2      2     804
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 20
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _Lcd_Start
     _Lcd_Cmd
       _Lcd_SetBit
     _Lcd_SetBit
   _Read_b_eep
   _analogInputs
     _readPotentiometers
       _ADC_Read
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul
         ___xxtofl (ARG)
       ___flneg
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _map
         ___aldiv
           ___lmul (ARG)
         ___lmul
       _processPotentiometers
         _controlChange
           ___lbmod
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _sendOut
           _sendUSB
         _pitchBend
           ___lbmod
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _sendOut
           _sendUSB
   _calculate_alpha
     ___fldiv
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___xxtofl
   _calculate_pulse_length
     ___fladd
       ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fldiv
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___flmul
       ___xxtofl (ARG)
     ___flneg
       ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fltol
       ___fladd (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___xxtofl
   _digitalInputs
     _buttonInputsSerial
       _clock
       _load
     _keyboardTranspose
       _key_press_release_note_off
         _noteOff
           _sendOut
           _sendUSB
       _printThisNumber
       _wait_one_pulse
     _processDrumpad
       _controlChange
         ___lbmod
         _key_press_release_note_off
           _noteOff
             _sendOut
             _sendUSB
         _sendOut
         _sendUSB
       _noteOffDrum
         _sendOut
         _sendUSB
       _noteOnDrum
         _noteOff
           _sendOut
           _sendUSB
         _sendOut
         _sendUSB
     _processKeyboard
       _keyboard_all_note_efficient
         _playThisNote
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playSeventh
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playTriad
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
       _keyboard_eight_note_efficient
         _playThisNote8
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playDiatonicSeventhMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicSeventhMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
       _keyboard_sharps_only_efficient
         _playThisNotePentatonic
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _wait_one_pulse
     _processOctave
       ___awmod
       ___wmul
         ___lbmod (ARG)
       _doTheLatch
         _strcpy
       _doTheUnLatch
         _playThisNote
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playSeventh
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playTriad
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
         _playThisNote8
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playDiatonicSeventhMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicSeventhMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
         _playThisNotePentatonic
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _wait_one_pulse
         _strcpy
       _key_press_release_note_off
         _noteOff
           _sendOut
           _sendUSB
       _printThisNumber
       _random_pitches
         ___awmod
         _rand
           ___lmul
       _random_pitches_non_repeating
         ___awmod
         _rand
           ___lmul
       _resetArpeggio
       _strcpy
       _wait_one_pulse
   _displayTest
     _strcpy
   _initializeMenuArray
     ___wmul
       ___lbmod (ARG)
   _initializeSaveSlotsOnce
     _Busy_eep
     _Read_b_eep
     _Write_b_eep
     _saveToEEPROM
       _Busy_eep
       _Write_b_eep
   _menu_lcd
     _Function_A
       _Function_A_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_A_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_A_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_B
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_C
       _Function_C_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_C_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_C_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_D
       _Function_D_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _setControllerResolution
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_D_2
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _Write_b_eep
         _calculate_alpha
           ___fldiv
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_D_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _setControllerNumbers
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
           _int2string
             ___awdiv
             ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_D_4
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _setControllerNumbers
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
           _int2string
             ___awdiv
             ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_D_5
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _setControllerNumbers
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
           _int2string
             ___awdiv
             ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_E
       _Function_E_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_E_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_F
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_SetBit
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _int2string
         ___awdiv
         ___awmod
       _programChange
         ___lbmod
         _key_press_release_note_off
           _noteOff
             _sendOut
             _sendUSB
         _sendOut
         _sendUSB
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_G
       _Function_G_1
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _eepromExit
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _exitSave
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _saveToEEPROM
           _Busy_eep
           _Write_b_eep
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_G_2
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _eepromExit
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _exitLoad
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _loadFromEEPROM
           _Read_b_eep
           _calculate_pulse_length
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fldiv
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_G_3
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
       _Function_G_4
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _exitFunction
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _eepromExit
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_H
       _Function_H_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _doTheUnLatch
           _playThisNote
             _add_notes_to_arpeggio
               _rotateArrayLeft
             _delete_notes_from_arpeggio
               _findArrayIndex
               _rotateArrayLeft
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _playSeventh
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _playTriad
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _wait_one_pulse
           _playThisNote8
             _add_notes_to_arpeggio
               _rotateArrayLeft
             _delete_notes_from_arpeggio
               _findArrayIndex
               _rotateArrayLeft
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _playDiatonicSeventhMajor
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _playDiatonicSeventhMinor
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _playDiatonicTriadMajor
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _playDiatonicTriadMinor
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _wait_one_pulse
           _playThisNotePentatonic
             _add_notes_to_arpeggio
               _rotateArrayLeft
             _delete_notes_from_arpeggio
               _findArrayIndex
               _rotateArrayLeft
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _strcpy
         _strcpy
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _calculate_pulse_length
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fldiv
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul
             ___xxtofl (ARG)
           ___flneg
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_4
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _setupArpeggio
           _copy_array
           _random_pitches
             ___awmod
             _rand
               ___lmul
           _random_pitches_non_repeating
             ___awmod
             _rand
               ___lmul
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_5
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_6
         _Function_H_6_1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _doTheLatch
             _strcpy
           _doTheUnLatch
             _playThisNote
               _add_notes_to_arpeggio
                 _rotateArrayLeft
               _delete_notes_from_arpeggio
                 _findArrayIndex
                 _rotateArrayLeft
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _playSeventh
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _playTriad
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _wait_one_pulse
             _playThisNote8
               _add_notes_to_arpeggio
                 _rotateArrayLeft
               _delete_notes_from_arpeggio
                 _findArrayIndex
                 _rotateArrayLeft
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _playDiatonicSeventhMajor
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _playDiatonicSeventhMinor
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _playDiatonicTriadMajor
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _playDiatonicTriadMinor
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _wait_one_pulse
             _playThisNotePentatonic
               _add_notes_to_arpeggio
                 _rotateArrayLeft
               _delete_notes_from_arpeggio
                 _findArrayIndex
                 _rotateArrayLeft
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _strcpy
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Function_H_6_2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _strcpy
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_7
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _strcpy
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_8
         _Function_H_8_1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Function_H_8_2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_9
         _Function_H_9_1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Function_H_9_2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Function_H_9_3
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Function_H_9_4
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_SetBit
     _Lcd_Print_String
       _Lcd_Print_Char
         _Lcd_SetBit
       ___lbmod (ARG)
       ___wmul (ARG)
         ___lbmod (ARG)
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_SetBit
     ___lbmod
     ___wmul
       ___lbmod (ARG)
     _exitFunction
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       _clear_row1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
   _panic_button
     _controlChange
       ___lbmod
       _key_press_release_note_off
         _noteOff
           _sendOut
           _sendUSB
       _sendOut
       _sendUSB
   _processEncoderBuxton
   _selectSlotOnBoot
     _Read_b_eep
     _loadFromEEPROM
       _Read_b_eep
       _calculate_pulse_length
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul
           ___xxtofl (ARG)
         ___flneg
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl
   _setup
   _srand

 _ISR (ROOT)
   ___lbmod
   _display
     _displayDigits
       ___awdiv
       ___awmod
     _displayString
   _encoderInputsBuxton
   _playArpeggio
     ___awmod
     _noteOff
       _sendOut
       _sendUSB
     _noteOn
       _noteOff
         _sendOut
         _sendUSB
       _sendOut
       _sendUSB
     _rand
       ___lmul
     _random_pitches
       ___awmod
       _rand
         ___lmul
     _random_pitches_non_repeating
       ___awmod
       _rand
         ___lmul
     _sort_pitches

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0       0      31        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      89      11       53.5%
BITBANK2           100      0       0       8        0.0%
BANK2              100      2      E7       9       90.2%
BITBANK1           100      0       0       6        0.0%
BANK1              100     50     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6C      A0       5      100.0%
BITCOMRAM           53      0       6       0        7.2%
COMRAM              53     23      46       1       84.3%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0      25       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     356      20        0.0%
DATA                 0      0     37B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Jan 17 18:26:15 2024

                   _arpeggiatorAutoLatchOnOffMenu 0120                           playThisNote8@temp_pitch 0077  
                       ?_playDiatonicSeventhMinor 0061                           _readPotentiometers$5899 0197  
                                    ___fldiv@aexp 009F                                      ___fldiv@bexp 009E  
                              _RESET_ON_KEY_PRESS 0023                                      ___fldiv@sign 0093  
                                    ?_displayTest 0007                                                l23 9656  
                                              l24 9658                                                l40 8EB8  
                                              l25 9660                                                l26 9662  
                                              l42 8EE2                                                l27 966A  
                                              l51 8468                                                l28 966C  
                                              l52 8480                                                l29 9674  
                                              l53 849E                                                l46 8238  
                                              l54 84B6                                                l58 83FE  
                                              l59 83C4                                                l94 9564  
                   __size_of_processEncoderBuxton 0A1C                               ___wmul@multiplicand 0062  
                                     __CFG_BORV$3 000000                                    ?_programChange 0060  
                                 _GLOBAL_CC_VALUE 0180                   __size_of_playDiatonicTriadMajor 0190  
                                    __CFG_CP0$OFF 000000                                      __CFG_CP1$OFF 000000  
                                    __CFG_CP2$OFF 000000                                      __CFG_CP3$OFF 000000  
                                     __CFG_OSC$HS 000000                   __size_of_playDiatonicTriadMinor 0262  
                        _LAST_NOTE_MODE_KEY_PRESS 001A                           playDiatonicTriadMajor@i 0066  
                            __end_of_doTheUnLatch 5264                                               l502 929E  
                                             l464 6C46                                               l482 8A5A  
                                             l901 0492                                               l494 9074  
                                             l910 05A0                                               l903 04D8  
                                             l920 0696                                               l912 05B2  
                                             l489 90D8                                               l921 06A4  
                                             l905 051E                                               l498 932E  
                                             l930 076A                                               l922 06B2  
                                             l914 05C4                                               l931 0778  
                                             l923 06C0                                               l907 0558  
                                             l940 07D0                                               l932 0786  
                                             l916 060A                                               l933 0794  
                                             l925 0706                                               l909 0592  
                                             l950 0820                                               l942 07E0  
                                             l926 0714                                               l918 0650  
                                             l927 0722                                               l871 0178  
                                             l863 006C                                               l960 0870  
                                             l952 0830                                               l944 07F0  
                                             l936 07B0                                               l929 075C  
                                             l881 02D6                                               l873 01BE  
                                             l865 00A6                                               l970 08C0  
                                             l962 0884                                               l954 0840  
                                             l946 0800                                               l938 07C0  
                                             l891 03D0                                               l883 031C  
                                             l875 0204                                               l867 00EC  
                                             l980 090C                                               l972 08D0  
                                             l964 0898                                               l956 0850  
                                             l948 0810                                               l893 0416  
                                             l885 0362                                               l877 024A  
                                             l869 0132                                               l982 091C  
                                             l974 08E0                                               l966 08A4  
                                             l958 0860                                               l991 096E  
                                             l983 092A                                               l895 045C  
                                             l887 03A8                                               l879 0290  
                                             l976 08EC                                               l968 08B0  
                                             l993 097E                                               l985 093C  
                                             l897 046E                                               l889 03BC  
                                             l994 098C                                               l978 08FC  
                                             l995 099A                                               l987 094E  
                                             l899 0480                                               _GIE 007F97  
                            _RESET_ON_KEY_RELEASE 0022                                               l996 09A8  
                                             l989 095E                                               _BPM 00FF  
                                             l998 09B8                                               l999 09C6  
                                    __CFG_CPB$OFF 000000                                               _RB0 007C08  
                                             _RB1 007C09                                               _RB2 007C0A  
                                             _RC0 007C10                                               _RA5 007C05  
                                             _RC1 007C11                                               _RB4 007C0C  
                                             _RC2 007C12                                               _RB5 007C0D  
                                             _RC3 007C13                                               _RE0 007C20  
                                             _RC4 007C14                                               _RE1 007C21  
                                             _RC5 007C15                                               _RD4 007C1C  
                                             _RE2 007C22                                               _RD5 007C1D  
                                             _RD6 007C1E                                               _RD7 007C1F  
                                    __CFG_CPD$OFF 000000                                               _ISR 0008  
                                             _PSA 007EAB                                               _map 65A4  
                         playDiatonicTriadMinor@i 0067                              __size_of_Write_b_eep 0042  
                                             prod 000FF3                                               wreg 000FE8  
                                  ?_displayDigits 0007                                  _GLOBAL_CC_NUMBER 00F4  
                                ??_wait_one_pulse 0060                                      ___flmul@aexp 007B  
                                    ___flmul@bexp 0080                    __end_of_playThisNotePentatonic 55A8  
                                    ___flmul@sign 007A                                      ___flmul@temp 0085  
                                    ___flmul@prod 0081                          loadFromEEPROM@slotNumber 01E4  
                                    __CFG_LVP$OFF 000000                                              ?_ISR 0007  
                     _potentiometer_filtered_last 0200                                      ___fltol@exp1 00C1  
                                    __CFG_WDT$OFF 000000                                              l1000 09D4  
                                            l1002 09E4                                              l1003 09F2  
                                  ?_displayString 0007                                              l1004 0A00  
                                            l1005 0A0E                                              l1006 0A1C  
                                            l1007 0A2A                                              l1401 549A  
                                            l1402 54C2                                              l1411 555E  
                                            l1404 54E6                                              l1420 3E00  
                                            l1413 558A                                              l1405 5504  
                                            l1421 3E22                                              l1414 5592  
                                            l1406 553A                                              l1430 3F54  
                                            l1422 3E44                                              l1415 55A0  
                                            l1407 5528                                              l1431 3F76  
                                            l1423 3E66                                              l2400 1F3A  
                                            l1432 3F98                                              l1424 3E88  
                                            l2401 1F54                                              l1513 678C  
                                            l1505 66CE                                              l1601 28BE  
                                            l1433 3FBA                                              l1425 3EAA  
                                            l2410 2010                                              l2402 1F6E  
                                            l1450 5AB2                                              l1442 5A86  
                                            l1514 6742                                              l1506 66E4  
                                            l1530 1834                                              l1602 28DC  
                                            l1434 3FDC                                              l1426 3ECC  
                                            l2403 1FDC                                              l1443 5A62  
                                            l1531 184E                                              l1523 177E  
                                            l1435 3FFE                                              l1427 3EEE  
                                            l1419 3DDE                                              l4020 113E  
                                            l2412 202E                                              l2404 1F90  
                                            l1452 5AD8                                              l1444 5AA2  
                                            l1516 676E                                              l1508 6720  
                                            l1540 1938                                              l1532 1868  
                                            l1524 1798                                              l1620 29FC  
                                            l1604 290C                                              l1436 4020  
                                            l1428 3F10                                              l2421 20CA  
                                            l2413 2044                                              l2405 1FA6  
                                            l1453 5B00                                              l1445 5A6C  
                                            l1517 6776                                              l1509 670C  
                                            l1541 1952                                              l1533 1882  
                                            l1525 17B2                                              l1613 2A5A  
                                            l1621 2A20                                              l1605 2944  
                                            l1437 4042                                              l1429 3F32  
                                            l4030 1734                                              l4022 118E  
                                            l2430 2168                                              l2422 20E0  
                                            l2406 1FC0                                              l1446 5A74  
                                            l1518 6784                                              l1550 1A3C  
                                            l1542 196C                                              l1534 189C  
                                            l1526 17CC                                              l1702 47D0  
                                            l1630 2A82                                              l1614 29B2  
                                            l1606 2990                                              l4023 11A0  
                                            l2415 2062                                              l2407 1FDA  
                                            l1463 5B98                                              l1455 5B76  
                                            l1447 5A7C                                              l1519 679C  
                                            l1551 1A56                                              l1543 1986  
                                            l1535 18B6                                              l1527 17E6  
                                            l1631 2A96                                              l1607 2968  
                                            l2424 20FE                                              l2416 2078  
                                            l1472 576C                                              l1456 5B2E  
                                            l1560 1B40                                              l1552 1A70  
                                            l1544 19A0                                              l1536 18D0  
                                            l1528 1800                                              l1712 482E  
                                            l1640 5964                                              l1704 47F4  
                                            l1624 2A54                                              l1616 29D0  
                                            l4041 16BE                                              l4033 141E  
                                            l4025 12EE                                              l2425 2114  
                                            l2409 1FFA                                              l1481 579E  
                                            l1473 5740                                              l1465 5BBC  
                                            l1561 1B5A                                              l1553 1A8A  
                                            l1545 19BA                                              l1537 18EA  
                                            l1529 181A                                              l1721 4A0E  
                                            l1705 47FC                                              l1609 2986  
                                            l4050 412E                                              l4042 16F6  
                                            l2418 2096                                              l2370 1CB2  
                                            l1474 578E                                              l1466 5BC4  
                                            l1458 5B3C                                              l1570 1C44  
                                            l1562 1B74                                              l1554 1AA4  
                                            l1546 19D4                                              l1538 1904  
                                            l1730 4A30                                              l1722 4966  
                                            l1642 59F2                                              l1706 4810  
                                            l4051 416C                                              l4043 170A  
                                            l2427 2132                                              l2419 20AC  
                                            l2371 1CCC                                              l1483 57C4  
                                            l1475 574A                                              l1467 5BD8  
                                            l1571 1C5E                                              l1563 1B8E  
                                            l1555 1ABE                                              l1547 19EE  
                                            l1539 191E                                              l1715 485A  
                                            l1651 5A38                                              l1643 5992  
                                            l1619 29F4                                              l4052 41AC  
                                            l4044 1758                                              l2428 2148  
                                            l2380 1D8A                                              l2372 1CE6  
                                            l1484 57EC                                              l1476 5752  
                                            l1564 1BA8                                              l1556 1AD8  
                                            l1548 1A08                                              l1660 55BE  
                                            l1732 4A54                                              l1724 4974  
                                            l1716 4882                                              l1652 5A40  
                                            l1580 2690                                              l1740 2AD0  
                                            l5012 6A8E                                              l4029 132A  
                                            l2381 1DA4                                              l2373 1D54  
                                            l1477 575A                                              l1565 1BC2  
                                            l1557 1AF2                                              l1549 1A22  
                                            l1733 4A5C                                              l1653 5A54  
                                            l1645 59A0                                              l1637 58E2  
                                            l1629 2A6E                                              l1581 2698  
                                            l1741 2AF2                                              l4054 427E  
                                            l4038 156E                                              l2390 1E62  
                                            l2382 1DBE                                              l2374 1D08  
                                            l1494 5884                                              l1486 5862  
                                            l1478 5762                                              l1566 1BDC  
                                            l1558 1B0C                                              l1662 55FE  
                                            l1734 4A70                                              l1726 49A0  
                                            l1718 48E0                                              l1582 26A0  
                                            l1750 2C24                                              l1742 2B14  
                                            l1398 5442                                              l5006 6A76  
                                            l4039 15AA                                              l2391 1E7C  
                                            l2383 1E2C                                              l2375 1D1E  
                                            l1487 581A                                              l1567 1BF6  
                                            l1559 1B26                                              l1663 5640  
                                            l1727 49FC                                              l1719 4938  
                                            l1639 5922                                              l1591 2770  
                                            l1583 26A8                                              l1751 2C46  
                                            l1743 2B36                                              l1399 546A  
                                            l3440 4CBC                                              l4056 42CE  
                                            l2392 1E96                                              l2384 1DE0  
                                            l2376 1D38                                              l2368 1CE8  
                                            l1496 58A8                                              l1568 1C10  
                                            l1592 2798                                              l1576 26BA  
                                            l1584 26B0                                              l1760 2D78  
                                            l1752 2C68                                              l1744 2B58  
                                            l4049 40FA                                              l2393 1F04  
                                            l2385 1DF6                                              l2377 1D52  
                                            l2369 1C9C                                              l1497 58B0  
                                            l1489 5828                                              l1569 1C2A  
                                            l1673 56F2                                              l1665 56D0  
                                            l1649 5A14                                              l1577 267E  
                                            l1761 2D9A                                              l1753 2C8A  
                                            l1745 2B7A                                              l5009 6A88  
                                            l2810 43B8                                              l2394 1EB8  
                                            l2386 1E10                                              l2378 1DC0  
                                            l1498 58C4                                              l1666 566E  
                                            l1690 46D6                                              l1578 26E8  
                                            l1762 2DBC                                              l1754 2CAC  
                                            l1746 2B9C                                              l3610 637A  
                                            l3530 6DE8                                              l3522 6DB8  
                                            l2811 43D0                                              l2395 1ECE  
                                            l2387 1E2A                                              l2379 1D74  
                                            l1675 5716                                              l1683 45CC  
                                            l1595 27DA                                              l1579 2688  
                                            l1763 2DDE                                              l1755 2CCE  
                                            l1747 2BBE                                              l3611 630A  
                                            l3531 6DF2                                              l2820 44A2  
                                            l2812 43E6                                              l2804 4328  
                                            l2396 1EE8                                              l2388 1E98  
                                            l1676 571E                                              l1668 567C  
                                            l1692 47AE                                              l1596 280E  
                                            l1588 2718                                              l1764 2E00  
                                            l1756 2CF0                                              l1748 2BE0  
                                            l3612 6306                                              l3604 62BE  
                                            l3620 613E                                              l3460 9686  
                                            l3524 6E0C                                              l3532 6DFC  
                                            l2821 44BA                                              l2813 43FE  
                                            l2805 4340                                              l2397 1F02  
                                            l2389 1E4C                                              l1677 5732  
                                            l1693 4704                                              l1589 2740  
                                            l1765 2E22                                              l1757 2D12  
                                            l1749 2C02                                              l2901 380E  
                                            l3453 7504                                              l3613 6340  
                                            l3605 6264                                              l3621 6196  
                                            l3533 6E06                                              l3525 6DC0  
                                            l6102 34F2                                              l2830 4582  
                                            l2822 44D2                                              l2814 4416  
                                            l2806 4358                                              l2398 1F70  
                                            l1686 45F8                                              l1598 2858  
                                            l1766 2E44                                              l1758 2D34  
                                            l2902 383A                                              l3454 750E  
                                            l3614 633C                                              l3606 62BC  
                                            l3439 4D34                                              l2823 44EA  
                                            l2815 442C                                              l2807 4370  
                                            l2399 1F24                                              l1695 4712  
                                            l1687 4620                                              l1599 289C  
                                            l1767 2E66                                              l1759 2D56  
                                            l3543 7272                                              l3455 7516  
                                            l3471 222C                                              l3527 6DCA  
                                            l6200 5FF0                                              l2832 4592  
                                            l2824 4502                                              l2816 4444  
                                            l2808 4388                                              l1768 2E88  
                                            l2840 51AE                                              l3544 71B6  
                                            l3624 61AA                                              l6120 3B76  
                                            l3704 8C00                                              l3720 7D42  
                                            l4440 4AD2                                              l3528 6DD4  
                                            l2833 45A0                                              l2825 451A  
                                            l2817 445C                                              l2809 43A0  
                                            l1697 473E                                              l1689 467E  
                                            l3609 62D0                                              l3625 6254  
                                            l6121 3B72                                              l3481 23EE  
                                            l3473 2282                                              l3705 8BB8  
                                            l3713 8DA6                                              l3721 7CEA  
                                            l4441 4B08                                              l3529 6DDE  
                                            l6106 3518                                              l5410 5C04  
                                            l2826 4532                                              l2818 4474  
                                            l1698 479A                                              l3554 719C  
                                            l3570 70AC                                              l3626 61E4  
                                            l3634 7FA6                                              l6130 3C90  
                                            l3474 23F2                                              l3466 2190  
                                            l3706 8BFE                                              l3714 8D64  
                                            l3722 7D40                                              l3730 7C4A  
                                            l3810 770A                                              l4451 50A4  
                                            l6107 3520                                              l2827 454A  
                                            l2819 448C                                              l3547 7210  
                                            l3555 70E0                                              l3627 61E0  
                                            l3619 6198                                              l3635 7F5E  
                                            l6123 3BBC                                              l3491 25FE  
                                            l3483 2486                                              l3715 8D7E  
                                            l3731 7CA0                                              l3803 76C6  
                                            l6108 3522                                              l6060 322E  
                                            l5420 5CFE                                              l2828 455E  
                                            l5404 97D8                                              l2852 5146  
                                            l3548 7258                                              l3580 72CA  
                                            l3628 621A                                              l3636 7FA4  
                                            l6140 3CFE                                              l6116 3B36  
                                            l3492 2638                                              l3476 22E4  
                                            l3468 2286                                              l3660 889C  
                                            l3724 7D56                                              l4436 4A94  
                                            l3804 766C                                              l3820 794A  
                                            l3900 7B8E                                              l4445 4ECE  
                                            l5421 5D24                                              l5413 5D00  
                                            l5405 97E2                                              l2861 51D4  
                                            l3565 70C6                                              l3581 7310  
                                            l3629 6216                                              l6133 3CC6  
                                            l6125 3BE4                                              l6117 3B32  
                                            l3653 8F20                                              l3493 2672  
                                            l3485 24BE                                              l3477 2320  
                                            l3661 88F4                                              l3725 7D78  
                                            l4437 4AA4                                              l3733 7CB6  
                                            l3805 76C4                                              l3821 79A2  
                                            l3901 7B14                                              l4446 4EDE  
                                            l6150 2EE0                                              l5422 5D44  
                                            l5414 5C38                                              l2862 51F8  
                                            l2846 50F0                                              l3558 713A  
                                            l3566 700A                                              l3590 879E  
                                            l3646 839C                                              l6142 3D42  
                                            l6134 3CA8                                              l6126 3C92  
                                            l3654 8EF4                                              l3486 24F8  
                                            l3478 235C                                              l4438 4AB4  
                                            l3734 7CD8                                              l3830 7DE2  
                                            l3910 7A74                                   ??_un_block_code 00C7  
                                            ?_map 006E                                              l4447 4EEE  
                                            l6071 3352                                              l6151 2EDC  
                                            l5415 5C5E                                              l2863 522E  
                                            l2855 518C                                              l3559 7182  
                                            l3591 873C                                              l3647 8342  
                                            l6143 3D66                                              l6127 3C42  
                                            l3487 2532                                              l3479 2398  
                                            l4439 4AC4                                              l3751 802E  
                                            l3807 76F8                                              l3903 7B72  
                                            l4448 4EFE                                              l6072 3330  
                                            l6064 327A                                              l6152 2EF0  
                                            l5416 5C80                                              l2880 3654  
                                            l3576 731A                                              l3648 839A  
                                            l6144 3D90                                              l6128 3C6A  
                                            l3680 80BE                                              l3744 7E8A  
                                            l3752 7FE6                                              l3816 792C  
                                            l3840 78CE                                              l3904 7B8C  
                                            l3912 7AD2                                              l6081 339A  
                                            l6073 333E                                              l6065 3276  
                                            l6161 310E                                              l5417 5C96  
                                            l5409 5BF2                                              l2849 510A  
                                            l2881 3634                                              l2873 354E  
                                            l3569 7064                                              l3577 7284  
                                            l6145 3D9C                                              l3489 25C6  
                                            l3673 869A                                              l3681 8076  
                                            l3729 7CA2                                              l3745 7E30  
                                            l3753 802C                                              l3841 7902  
                                            l3913 7AEC                                              l3921 7A32  
                                            l6090 346C                                              l6082 339E  
                                            l6074 3342                                              l6170 318A  
                                            l6162 30F0                                              l6154 2F20  
                                            l5418 5CB6                                              l5442 89D6  
                                            l2858 51AC                                              l2890 3792  
                                            l2874 355A                                              l6146 3D9E  
                                            l3666 8714                                              l3674 8640  
                                            l3682 80BC                                              l3746 7E88  
                                            l3826 7DE4                                              l3922 7A4C  
                                            l6067 32D6                                              l6059 3232  
                                            l6171 31A8                                              l6155 2F1C  
                                            l5419 5CDA                                              l2891 3742  
                                            l2883 3644                                              l2875 3590  
                                            l3659 88F6                                              l3667 86BA  
                                            l3675 8698                                              l3819 79A4  
                                            l3827 7D94                                              l3763 75EE  
                                            l5620 93D0                                              l6092 3482  
                                            l6068 329A                                              l6156 2F30  
                                            l5452 8E7A                                              l3668 8712  
                                            l3692 91E4                                              l3780 6F34  
                                            l3764 75A8                                              l6085 3438  
                                            l6077 33B0                                              l6173 31CC  
                                            l6157 2F4E                                              l5429 940E  
                                            l5453 8E30                                              l2885 36D8  
                                            l3597 816C                                              l3693 91B0  
                                            l3829 7DC8                                              l3837 7904  
                                            l3909 7AEE                                              l3765 75EC  
                                            l6094 348C                                              l6078 3376  
                                            l6174 31EA                                              l5438 89AA  
                                            l2894 3756                                              l2886 36BE  
                                            l2878 35CA                                              l3598 8112  
                                            l3782 6F70                                              l3790 8D00  
                                            l3838 7880                                              l3846 8B94  
                                            l3918 7A4E                                              l6087 3448  
                                            l6191 5F6E                                              l5439 89C0  
                                            l2895 3782                                              l3599 816A  
                                            l3783 6FA4                                              l3791 8D1A  
                                            l3847 8B4C                                              l3855 77AC  
                                            l3919 79D4                                              l3927 7F18  
                                            l6168 3146                                              l6192 5F56  
                                            l6184 5EF0                                              l5384 96C0  
                                            l5392 6938                                              l2888 36C8  
                                            l3848 8B92                                              l3856 7724  
                                            l3864 8880                                              l3928 7EC0  
                                            l6185 5F00                                              l5393 6988  
                                            l3785 6FE8                                              l3865 8830  
                                            l3873 8E10                                              l3929 7F16  
                                            l6178 95FA                                              l6194 5FA0  
                                            l6186 5F1E                                              l5634 742C  
                                            l2898 37FA                                              l3698 9198  
                                            l3858 7776                                              l3874 8DD2  
                                            l3882 8B26                                              l6179 95F0  
                                            l6099 34AC                                              l6195 5F94  
                                            l3699 9164                                              l3779 6FA6  
                                            l3859 77AA                                              l3867 8864  
                                            l3883 8ADE                                              l3891 7C2E  
                                            l6188 5F30                                              l5388 96C8  
                                            l3796 904E                                              l3868 887E  
                                            l3876 8DF4                                              l3884 8B24  
                                            l3892 7BB4                                              l6189 5F24  
                                            l3789 8D42                                              l3797 900C  
                                            l3877 8E0E                                              l3798 9026  
                                            l3894 7C12                                              l6199 5FBE  
                                            l5399 95A6                                              l3895 7C2C  
                                            l5681 73AA                                              l5682 739E  
                                            l4970 9140                                              l5860 6EF2  
                                            l5852 6E62                                              l5829 9636  
                                            l5861 6EE6                                              l5685 73DE  
                                            l4957 85E2                                              l5854 6ECE  
                                            l5686 73EC                                              l5678 7364  
                                            l5863 6F0E                                              l5855 6EBE  
                                            l5687 7402                                              l5679 737C  
                                            l4959 8600                                              _ADON 007E10  
                           __size_of_sort_pitches 0118                                              STR_1 FFE6  
                                            STR_2 FFE1                                              STR_3 FFFA  
                                            STR_4 FFF0                                              STR_5 FFDC  
                                            STR_6 FFEB                                              STR_7 FFF5  
                                            STR_8 FFD7                                              STR_9 FD70  
                                            _BRGH 007D62                            __end_of_random_pitches 8AD4  
                                            _CREN 007D5C                                              _T0CS 007EAD  
                                            _IPEN 007E87                                              _PEIE 007F96  
                                            _RBIE 007F93                                              _RBIF 007F90  
                                            _TMR0 000FD6                                              _TMR1 000FCE  
                                            _TMR2 000FCC                                              _SPEN 007D5F  
                                            _PPQN 01F6                                              _TRMT 007D61  
                                            _TXIF 007CF4                                              _TXEN 007D65  
                                            _SYNC 007D64                          _LAST_NOTE_MODE_TRANSPOSE 0018  
                                            _main 69AC                                              _drum 0037  
                                            _load 98B2                                              _rand 82A6  
                                            fsr0h 000FEA                                              fsr1h 000FE2  
                                            indf0 000FEF                                              fsr2h 000FDA  
                                            fsr0l 000FE9                                              indf2 000FDF  
                                            fsr1l 000FE1                                              map@x 006E  
                                            fsr2l 000FD9                                              btemp 003F  
                                __end_of_ADC_Read 957E                      ??_key_press_release_note_off 0060  
                                            prodh 000FF4                                              prodl 000FF3  
              keyboard_eight_note_efficient@index 007B                                   ??_setupArpeggio 0061  
                                            start 000C                                Lcd_Print_Char@i_59 0066  
              keyboard_eight_note_efficient@pitch 007A                                     __CFG_IESO$OFF 000000  
                                 ___fldiv@new_exp 0098                                Lcd_Print_Char@data 0063  
                            __end_of_analogInputs 9312                                    _drumCCTypeMenu 0162  
                                 __end_of_Lcd_Cmd 976C                                     __CFG_MCLRE$ON 000000  
                                 _rotateArrayLeft 87A4                                      ___param_bank 000000  
                                           ??_ISR 0012                                             ??_map 0082  
                 __end_of_setControllerResolution 96A4                         _arpeggiatorLatchOnOffMenu 0123  
                                      _Lcd_SetBit 9648                                             l30002 44BA  
                                           l30020 4502                                             l30014 44EA  
                                           l30032 4532                                             l30008 44D2  
                                           l30026 451A                                             l30038 454A  
                                           l30214 3792                                             l31112 6C24  
                                           l31104 6BFE                                             l30152 3654  
                            programChange@channel 0062                                             l30250 1136  
                                           l31108 6C16                                             l31118 6C5E  
                                           l31144 6CCC                                             l31138 6CC8  
                                           l30266 1198                                             l30362 85F8  
                                           l30348 85DA                                             l30278 12E6  
                                           l31168 967E                                             l33114 8244  
                                           l33106 822A                                             l32410 7924  
                                           l31476 506A                                             l32620 67E0  
                                           l32604 611E                                             l27102 676E  
                                           l32624 67F6                                             l32616 67CE  
                                           l32704 7856                                             l32642 6898  
                                           l32634 6866                                             l32570 6026  
                                           l31764 747A                                             l26340 5AAA  
                                           l27028 558A                                             l26510 58A8  
                                           l32582 605A                                             l32680 8A72  
                                           l32672 8A58                                             l26408 5BBC  
                                           l32576 603C                                             l33634 81F6  
                                           l33626 819A                                             l26274 942C  
                                           l32666 8A2C                                             l26442 5796  
                                           l26370 5B34                                             l26530 58DA  
                                           l30978 3D90                                             l26284 945A  
                                           l32596 60EC                                             l32686 8AC0  
                                           l32694 77D0                                             l26472 5820  
                                           l26560 5998                                             l26704 47F4  
                                           l26616 45C4                                             l27266 29F4  
                                           l26724 55B6                                             l26900 4A54  
                                           l26812 4826                                             l26660 470A  
                                           l26754 5674                                             l26598 5A38  
                                   ___fltol@sign1 00C0                                             l26792 5716  
                                           l26856 496C                                   __end_of___aldiv 7414  
                                           l29902 4328                                             l29920 4370  
                                           l29914 4358                                             l29932 43A0  
                                           l29908 4340                                             l29950 43E6  
                                           l29926 4388                                             l29944 43D0  
                                           l29962 4416                                             l29938 43B8  
                                           l29972 4444                                             l29956 43FE  
                                           l29990 448C                                             l29966 442C  
                                           l29984 4474                                             l29978 445C  
                                           l29996 44A2                                   __end_of___fladd 353E  
                                           ?_main 0007                                             ?_load 0007  
                                 __end_of___fldiv 3DBA                                   __end_of___awdiv 6134  
                                ?_calculate_alpha 0007                                   __end_of___flneg 9648  
                                           _EEADR 000FA9                                             STR_10 FD64  
                                           STR_11 FD64                                             STR_12 FD6B  
                                           STR_20 FFC3                                             STR_13 FF9E  
                                           STR_21 FDFD                                             STR_14 FF88  
                                           STR_30 FDA8                                             STR_22 FD75  
                                           STR_15 FF93                                             STR_23 FF18  
                                           STR_31 FEC4                                             STR_16 FD6B  
                                           STR_24 FF58                                             STR_32 FE4D  
                                           STR_40 FE3D                                             STR_17 FF9E  
                                           STR_41 FFCD                                             STR_25 FED2  
                                           STR_33 FD97                                             STR_18 FF88  
                                           STR_50 FE8E                                             STR_34 FF4C  
                                           STR_42 FE98                                             STR_26 FE2D  
                                           STR_19 FF93                                             STR_51 FF0F  
                                           STR_43 FFD2                                             STR_35 FFBB  
                                           STR_27 FEE0                                             STR_44 FFCD  
                                           STR_36 FFB3                                             STR_60 FEFC  
                                           STR_52 FDDB                                             STR_28 FDCA  
                                 __end_of___awmod 68AE                                             STR_61 FFC8  
                                           STR_45 FEB6                                             STR_53 FE89  
                                           STR_29 FE6B                                             STR_37 FD86  
                                           STR_54 FFDC                                             STR_70 FF7C  
                                           STR_38 FF25                                             STR_46 FEEE  
                                           STR_62 FE1D                                             STR_71 FFA9  
                                           STR_55 FF0A                                             STR_63 FEA7  
                                           STR_39 FDEC                                             STR_47 FDB9  
                                           STR_72 FF7C                                             STR_56 FFF0  
                                           STR_48 FF32                                             STR_64 FE7A  
                                           STR_73 FFA9                                             STR_49 FDDF  
                                           STR_65 FF3F                                             STR_57 FE5C  
                                           STR_74 FF7C                                             STR_66 FF70  
                                           STR_58 FF64                                             STR_59 FF6B  
                                           STR_67 FFA9                                             STR_75 FE0D  
                                           STR_68 FF7C                                   __end_of___lbmod 821A  
                                           STR_69 FFA9                                   __end_of___flmul 3200  
                                 __end_of___fltol 6F20                                             _CMCON 000FB4  
                                           _T0CON 000FD5                                             _T1CON 000FCD  
                                           _T2CON 000FCA                                             _LATCH 0021  
                                           u51010 50E6                                             u52000 31B6  
                                           u51040 5100                                             u51310 523A  
                                           u51150 5180                                             u51070 511A  
                                           u52040 6E80                                             u52210 8480  
                                           u60140 8244                                             u51180 51A0  
                                           u52045 6E76                                             u52230 84B6  
                                           u51270 5206                                             u52080 6EF8  
                                           u52160 5FAA                                             u46000 5A48  
                                           u51530 3306                                             u52330 8C6C  
                                           u51540 3316                                             u46100 46DC  
                                           u52260 8C32                                             u51710 3490  
                                           u51550 3318                                             u52350 8C82  
                                           u45160 96B2                                             u45400 5B06  
                                           u51395 4200                                             u51740 34A8  
                                           u51580 335A                                             u51900 2F3C  
                                           u51910 30B2                                             u54230 3614  
                                           u45175 96B4                                             u46400 56C0  
                                           u50970 50CC                                             u51915 30A8  
                                           u45620 57F2                                             u45460 5B66  
                                           u46500 5726                                             u46340 5646  
                                           u46180 479E                                             u51790 34FE  
                                           u54430 37DA                                             u54350 3722  
                                           u51960 3142                                             u54600 13FC  
                                           u54520 1194                                             u45560 5BCC  
                                           u46600 493E                                             u46280 4804  
                                           u54290 369E                                             u54700 175E  
                                           u54540 12E2                                             u44940 89B8  
                                           u45900 59E4                                             u51990 3198  
                                           u54800 842C                                             u54640 1592  
                                           u54720 85F4                                             u44960 89CE  
                                           u45680 5852                                             u45840 596A  
                                           u47600 29CA                                             u47520 2980  
                                           u57210 4B38                                             u54580 13EA  
                                           u54740 861A                                             u44980 89E6  
                                           u45780 58B8                                             u56500 3CFA  
                                           u57205 4B2E                                             u54750 861C  
                                           u56270 9124                                             u57310 4C64  
                                           u57230 4B84                                             u54807 8422  
                                           u46680 4A00                                             u47720 2A40  
                                           u57160 4B08                                             u57305 4C5A  
                                           u57225 4B3A                                             u56530 3D50  
                                           u57410 4CA0                                             u57330 4C70  
                                           u57250 4C24                                             u57170 4B20  
                                           u46780 4A64                                             u47740 2A48  
                                           u47660 2A12                                             u59100 610A  
                                           u56540 3D74                             _processPotentiometers 4068  
                                           u57405 4C96                                             u57325 4C66  
                                           u57245 4B86                                             u54790 83F4  
                                           u58150 8188                                             u57430 4CAC  
                                           u57350 4C7C                                             u57270 4C4C  
                                           u57190 4B2C                                             u67007 94BA  
                                           u47840 73AE                                             u56625 93DE  
                                           u67017 94F4                                             u57425 4CA2  
                                           u57345 4C72                                             u57265 4C26  
                                           u57185 4B22                                             u57505 7DF4  
                                           u56626 93E0                                             u57370 4C88  
                                           u57290 4C58                                             u57530 7E18  
                                           u67107 84E0                                             u67027 952E  
                                           u59220 8ACE                                             u67117 850E  
                                           u54797 83EA                                             u67037 6CBE  
                                           u59045 8300                                             u57365 4C7E  
                                           u57285 4C4E                                             u59150 681E  
                                           u59046 8306                                             u58350 83AA  
                                           u57390 4C94                                             u57710 8E1E  
                                           u67127 8252                                             u67047 6D16  
                                           u59047 8314                                             u56680 6D12  
                                           u59240 7864                                             u59080 6082  
                                           u67137 826A                                             u67057 6D20  
                                           u57385 4C8A                                             u56674 6D00  
                                           u59170 6884                                             u57490 7DF2  
                                           u57650 888E                                             u67147 975E  
                                           u67067 6D2A                                             u56675 6CFC  
                                           u58620 6FCC                                             u67077 6D54  
                                           u58365 83AC                                             i2l854 854A  
                                           u58550 7E98                                             u57590 7912  
                                           u57830 7B9C                                             i2l855 855A  
                                           u67087 6C4E                                             u56695 6D14  
                                           u58640 6FF2                                             u67097 955C  
                                           u57770 7C3C                                             u58635 6FCE  
                                           u58565 7E9A                                             u57950 7A5C  
                                           u58760 76F4                                             u58920 77BA  
                                           u66905 69FC                                             u57890 7AFC  
                                           u58780 7706                                             u59830 879A  
                                           u66950 6A72                                             u66970 6A84  
                                           u66890 69FA                                     _controlChange 9058  
                                           u59845 879C                                             u66987 9480  
                                           u66997 8FEC                                             _SPBRG 000FAF  
                                           _PORTA 000F80                                             _PORTB 000F81  
                                           _PORTC 000F82                                             _PORTD 000F83  
                                           _PORTE 000F84                                      _sort_pitches 6380  
                         __size_of_Lcd_Set_Cursor 0062                                             _TRISA 000F92  
                                           _TRISB 000F93                                             _TRISC 000F94  
                                           _TRISD 000F95                                             _TRISE 000F96  
                                           _TXREG 000FAD                    ?_keyboard_eight_note_efficient 0007  
                                   __CFG_PWRT$OFF 000000                             __end_of_playThisNote8 2AAC  
                                   __CFG_WRT0$OFF 000000                                     __CFG_WRT1$OFF 000000  
                      __size_of_keyboardTranspose 02A6                                     __CFG_WRT2$OFF 000000  
                                   __CFG_WRT3$OFF 000000                       encoderInputsBuxton@pinstate 000C  
                                  __CFG_EBTR0$OFF 000000                                    __CFG_FCMEN$OFF 000000  
                                  __CFG_EBTR1$OFF 000000                                    __CFG_EBTR2$OFF 000000  
                                  __CFG_EBTR3$OFF 000000                                     __CFG_WRTB$OFF 000000  
                                 __end_of_display 9850                                     __CFG_WRTC$OFF 000000  
                                   __CFG_WRTD$OFF 000000                                    Read_b_eep@badd 0060  
                                 ??_processOctave 007E                                    __CFG_EBTRB$OFF 000000  
                                           _flag1 0010                                             _flag2 000F  
                                   _transposeMenu 0168                                             _clock 98B8  
                 ?_keyboard_sharps_only_efficient 0007                  ??_keyboard_sharps_only_efficient 0077  
             __size_of_key_press_release_note_off 0168                            Write_b_eep@GIE_BIT_VAL 0063  
                                           _randx 01EF                                             _setup 8908  
                                           _srand 988E                                             _state 00ED  
                                 __end_of_sendUSB 6D64                                       copy_array@i 0060  
                                 __end_of_sendOut 6C80                                    __pbitbssCOMRAM 0008  
                                 __end_of_noteOff 93A2                                    __CFG_BOREN$OFF 000000  
                                           tablat 000FF5                                             ltemp0 003F  
                                           ltemp1 0043                                             ltemp2 0047  
                          _playDiatonicTriadMajor 58CC                                  _suppress_note_on 0015  
                  __size_of_finish_arpeggio_setup 001E                            _playDiatonicTriadMinor 45B6  
                                           plusw1 000FE3                                             plusw2 000FDB  
                   __end_of_finish_arpeggio_setup 97EC                         __size_of_Lcd_Print_String 0084  
              __end_of_delete_notes_from_arpeggio 95B2                        _delete_notes_from_arpeggio 957E  
                                           ttemp0 003F                                             ttemp1 0042  
                                           ttemp2 0045                                             ttemp3 0048  
                  keyboardTranspose@semitone_temp 00EA                                             status 000FD8  
                                   _UN_LATCH_MODE 0020                                             wtemp0 003F  
                                           wtemp1 0041                                             wtemp2 0043  
                                           wtemp3 0045                                             wtemp4 0047  
                                           wtemp5 0049                                             wtemp6 0040  
                              _encoder_state_last 017E                              _LAST_NOTE_MODE_RESET 0017  
                         __size_of_Lcd_Print_Char 0084                       __size_of_buttonInputsSerial 007C  
                                   ?_Function_A_1 0007                                     ?_Function_A_2 0007  
                                   ?_Function_A_3 0007                                     ?_Function_C_1 0007  
                                   ?_Function_C_2 0007                                     ?_Function_C_3 0007  
                                   ?_Function_D_1 0007                                     ?_Function_D_2 0007  
                                   ?_Function_D_3 0007                                     ?_Function_D_4 0007  
                                   ?_Function_E_1 0007                                     ?_Function_D_5 0007  
                                   ?_Function_E_2 0007                                     ?_Function_G_1 0007  
                                   ?_Function_G_2 0007                                     ?_Function_G_3 0007  
                                   ?_Function_G_4 0007                                     ?_Function_H_1 0007  
                                   ?_Function_H_2 0007                                     ?_Function_H_3 0007  
                                   ?_Function_H_4 0007                                     ?_Function_H_5 0007  
                                   ?_Function_H_6 0007                                     ?_Function_H_7 0007  
                                   ?_Function_H_8 0007                                     ?_Function_H_9 0007  
                                 __initialization 6AA0                                      __end_of_main 6AA0  
                                    __end_of_load 98B8                                      __end_of_rand 832E  
                                 ??_programChange 0062                                        _Read_b_eep 97EC  
                                __end_of_Busy_eep 98C4                               _half_diminished_7th 02CC  
                         _initializeSaveSlotsOnce 9238                                        _Function_A 7278  
                                      _Function_B 872A                                        _Function_C 7F4C  
                                      _Function_D 806E                                        _Function_E 8BB0  
                                      _Function_F 8D58                                        _Function_G 7FDE  
                                      _Function_H 759E                           __size_of_loadFromEEPROM 0238  
                                          ??_main 02E6                            _arpeggiatorOctavesMenu 012F  
                                          ??_load 0060                               _ARPEGGIO_IS_PLAYING 0032  
                                  ?_controlChange 0060                                __size_of_Lcd_Clear 0016  
                                   __activetblptr 000002                                   ??_displayDigits 0007  
                                    ?_playSeventh 0007                                __size_of_Lcd_Start 008C  
                      rotateArrayLeft@array_index 0067                              displayDigits@lowByte 000A  
                                 ??_displayString 0007                                            ?_clock 0007  
                                          _ADCON0 000FC2                                            _ADCON1 000FC1  
                                          _ADCON2 000FC0                                            _ADRESH 000FC4  
                                          _EEADRH 000FAA                                            _ADRESL 000FC3  
                                          _EEDATA 000FA8                                            _EECON2 000FA7  
                                          _T08BIT 007EAE                                            ?_setup 0007  
                                          ?_srand 0060                      calculate_pulse_length@s_tick 00C4  
                                 __CFG_BBSIZ$1024 000000                                      ?_noteOffDrum 0060  
                   _which_functions_are_unblocked 0029                               saveToEEPROM@to_save 0064  
                                          _INT0IE 007F94                                            _INT0IF 007F91  
                                   ?_exitFunction 0007                                            i2l3001 64A4  
                                          i2l3003 64CE                                            i2l3005 651E  
                                          i2l3006 6544                                            i2l3007 656C  
                                          i2l3008 6594                                            i2l5500 0B96  
                                          i2l5501 0BAE                                            i2l5502 0BBA  
                                          i2l5511 0CBE                                            i2l5512 0CBC  
                                          i2l5513 0D10                                            i2l2962 39CA  
                                          i2l5522 0D7A                                            i2l5514 0D0E  
                                          i2l2963 392E                                            i2l5531 0E6E  
                                          i2l5523 0DBE                                            i2l5507 0C1A  
                                          i2l2972 3A04                                            i2l2964 386E  
                                          i2l5460 638C                                            i2l5540 0F82  
                                          i2l5532 0E9C                                            i2l5524 0E08  
                                          i2l5516 0D20                                            i2l2981 3A5C  
                                          i2l2973 39FC                                            i2l2965 388A  
                                          i2l5461 6484                                            i2l5541 0FB6  
                                          i2l5517 0D38                                            i2l5509 0C6A  
                                          i2l2990 3ACE                                            i2l2982 3A5E  
                                          i2l2966 397A                                            i2l5462 6392  
                                          i2l5534 0EEA                                            i2l5518 0D44  
                                          i2l2991 3AF4                                            i2l2967 39C2  
                                          i2l5543 1000                                            i2l5535 0F1C  
                                          i2l2984 3A78                                            i2l5464 640A  
                                          i2l5560 10FC                                            i2l5544 102E  
                                          i2l2977 3A28                                            i2l5553 10A2  
                                          i2l2978 3A2A                                            i2l5466 6482  
                                          i2l2987 3AB2                                            i2l5459 648E  
                                          i2l5555 10B0                                            i2l5491 0AA2  
                                          i2l2988 3AB4                                            i2l5556 10DC  
                                          i2l5493 0AFC                                            i2l5495 0B48  
                                          i2l5496 0B46                                            i2l5497 0B86  
                                          i2l5498 0B84                                            i2l4981 5314  
                                          i2l4982 53B0                                            i2l4991 5396  
                                          i2l4992 53A4                                            i2l4977 52D4  
                                          i2l4978 52F0                                            i2l4987 5378  
                                          i2l4979 530A                                         ??_Lcd_Cmd 0061  
                                          _TMR0IE 007F95                                            _TMR0IF 007F92  
                                          _TMR1IE 007CE8                                            _TMR1IF 007CF0  
                                          _TMR2IE 007CE9                                            _TMR2IF 007CF1  
                                          _TMR0ON 007EAF                                            _TMR1ON 007E68  
                                          _TMR2ON 007E52                           __end_of_rotateArrayLeft 881C  
                                          _ON_OFF 002F                                  __end_of___xxtofl 6002  
                    __size_of_initializeMenuArray 0202                          __end_of_selectSlotOnBoot 97AE  
                                  ??_Function_A_1 00C7                                    ??_Function_A_2 00C7  
                                  ??_Function_A_3 00C7                                    ??_Function_C_1 00C7  
                                  ??_Function_C_2 00C7                                    ??_Function_C_3 00C7  
                                  ??_Function_D_1 00C7                                    ??_Function_D_2 00C7  
                                  ??_Function_D_3 00C7                                    ??_Function_D_4 00C7  
                                  ??_Function_E_1 00C7                                    ??_Function_D_5 00C7  
                                  ??_Function_E_2 00C7                                    ??_Function_G_1 00C7  
                                  ??_Function_G_2 00CC                                    ??_Function_G_3 006E  
                                  ??_Function_G_4 00C7                                    ??_Function_H_1 00C7  
                                  ??_Function_H_2 00CC                                    ??_Function_H_3 00C7  
                                  ??_Function_H_4 00C7                                    ??_Function_H_5 00C7  
                                  ??_Function_H_6 00C8                                    ??_Function_H_7 00C7  
                                  ??_Function_H_8 00C7                                    ??_Function_H_9 00C7  
                                   ?_panic_button 0007                             __end_of_resetArpeggio 9422  
                                  __CFG_XINST$OFF 000000                           __size_of_Function_H_6_1 009C  
                         __size_of_Function_H_6_2 00AA                           __size_of_Function_H_8_1 0076  
                         __size_of_Function_H_8_2 0064                           __size_of_Function_H_9_1 00A0  
                         __size_of_Function_H_9_2 00A0                           __size_of_Function_H_9_3 00A0  
                         __size_of_Function_H_9_4 00A0                                  ??_processDrumpad 0063  
                        readPotentiometers@i_3430 019D                          readPotentiometers@i_3429 019B  
                                          ___lmul 7414                                  ascii@LCD_STRINGS E8C3  
                                       ??___aldiv 0068                                         ??___fladd 00AC  
                                          ___wmul 971E                                         ??___fldiv 008F  
                                       ??___flneg 00A4                                         ??___flmul 0076  
                                       ??___fltol 00BC                             __size_of_doTheUnLatch 01BE  
                         ??_add_notes_to_arpeggio 0069                                       ?_Lcd_SetBit 0007  
                                __end_of_exitLoad 94D2                                  __end_of_exitSave 950C  
                                          _octave 0050                                            clear_0 6B46  
                                          clear_1 6B52                                            clear_2 6B5E  
                                          clear_3 6B6A                                            clear_4 6B82  
                                __end_of_menu_lcd 6E42                                            _noteOn 89F0  
                          ?_processPotentiometers 0007                                            _ttable F33D  
                            __size_of_displayTest 0080                                            _strcpy 95E6  
                                       ??_display 000C                         _arpeggiatorNoteLengthMenu 0129  
                               _programChangeMenu 0144                                 _latch_was_pressed 001E  
                                    __pdataCOMRAM 004B                                         ?_ADC_Read 0060  
                        __size_of_printThisNumber 0014                                 _suppress_note_off 0014  
                                    __mediumconst E8C2                  keyboard_all_note_efficient@pitch 0076  
                                          tblptrh 000FF7                                            tblptrl 000FF6  
                                          tblptru 000FF8                                            srand@x 0060  
                                  ??_exitFunction 006E                                   Lcd_Set_Cursor@a 0064  
                                 Lcd_Set_Cursor@b 0063                                   Lcd_Set_Cursor@y 0066  
                                 Lcd_Set_Cursor@z 0065                      __size_of_encoderInputsBuxton 0080  
                                 noteOnDrum@pitch 0060                         loadFromEEPROM@baseAddress 01E2  
                                    ___xxtofl@arg 006A                                      ___xxtofl@exp 0069  
                            selectSlotOnBoot@slot 02E5                             __size_of_analogInputs 0048  
                                    ___xxtofl@val 0060                        _LAST_NOTE_MODE_KEY_RELEASE 0019  
                                      __accesstop 0060                           __end_of__initialization 6B88  
                                 __CFG_PBADEN$OFF 000000                                        ___flneg@f1 00A0  
              __end_of_key_press_release_note_off 5D48                        _key_press_release_note_off 5BE0  
                                   _MAX_NUM_NOTES F39D                                      _doTheUnLatch 50A6  
                               __end_of_Lcd_Clear 9866                          __size_of_processKeyboard 006C  
                                   ___rparam_used 000001                                    ??_panic_button 0063  
                               _button_state_last 00D4                                        ___fltol@f1 00B8  
                           __end_of_digitalInputs 9156                                 __end_of_Lcd_Start 82A6  
                   processPotentiometers@highByte 0067                     __size_of_setControllerNumbers 04F6  
                                  __pcstackCOMRAM 0007                                        ___inthi_sp 06B2  
                          _diatonic_seventh_major F2A7                         ??_initializeSaveSlotsOnce 00B4  
                    ?_keyboard_all_note_efficient 0007                              initializeMenuArray@i 0068  
                                    __pidataBANK0 989E                                      __pidataBANK1 9806  
                                    __pidataBANK2 8F44                                      __pidataBANK3 8C88  
                          _diatonic_seventh_minor F26B                               buttonInputsSerial@i 0064  
                                   __end_of_clock 98BE                                       ?_Read_b_eep 0060  
                                   _stored_octave 0031                                     __end_of_setup 897C  
                                   __end_of_srand 989E                                   ??_controlChange 0062  
                                     ?_Function_A 0007                                       ?_Function_B 0007  
                                     ?_Function_C 0007                                       ?_Function_D 0007  
                                     ?_Function_E 0007                                       ?_Function_F 0007  
                                     ?_Function_G 0007                                       ?_Function_H 0007  
                     _arpeggiatorLastNoteModeMenu 00DC                      _CONTROL_CHANGE_IS_BEING_SENT 0031  
                             ADC_Read@adc_channel 0064                           Function_C_2@array_index 00C8  
                                   ?_playArpeggio 0007                              _number_of_interrupts 02C4  
                                  _Lcd_Set_Cursor 8E84                                        ??_ADC_Read 0062  
                                   ?_saveToEEPROM 0007                                      _analogInputs 92CA  
                    __end_of_pentatonic_major_key F39D                                   _slidepotsCCMenu 014D  
                      add_notes_to_arpeggio@pitch 0070                                  playSeventh@pitch 0069  
delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT 006A                        __end_of_readPotentiometers 1762  
                                         ??_clock 0060                                   findArrayIndex@i 0062  
                    __end_of_processEncoderBuxton 0A30                                           ??_setup 0060  
                                         ??_srand 0062                             displayDigits@highByte 000B  
                                      __pbssBANK0 00CC                                        __pbssBANK1 0100  
                                      __pbssBANK2 0200                                        __pbssBANK3 0369  
                                      _doTheLatch 97AE                                     ?_playThisNote 0007  
                                _Lcd_Print_String 83B2                         keyboardTranspose@keyPress 000B  
                             __size_of_Lcd_SetBit 0030                                         ?_Busy_eep 0007  
                    __end_of_pentatonic_minor_key F392                                  ?_rotateArrayLeft 0007  
                          _drum_button_state_last 0038                                    _Lcd_Print_Char 8436  
                        ??_calculate_pulse_length 00C4                      ??_delete_notes_from_arpeggio 0069  
                                    _DISPLAY_MODE 00EE                                        _clear_row1 96F6  
                                      _clear_row2 96CE                                           ?___wmul 0060  
                    playDiatonicTriadMajor@i_1710 0067                            saveToEEPROM@byte_count 00B2  
                              __size_of_playTriad 0184                                __size_of_pitchBend 0048  
                   ??_keyboard_all_note_efficient 0076                                Lcd_SetBit@data_bit 0060  
                                  _loadFromEEPROM 4A78                            __end_of_Lcd_Set_Cursor 8EE6  
                                   ??_Write_b_eep 0063                                    ??_playArpeggio 000C  
                         __size_of_ADC_Initialize 0014                                           ?_strcpy 0060  
                         Function_C_3@array_index 00C8                                  Function_H_1@temp 00C7  
                               _number_to_display 004B                                        _eepromMenu 013B  
                                      _eepromExit 950C                           __size_of_findArrayIndex 003C  
                                  ??_saveToEEPROM 0064                                           i2l22908 649C  
                                         _INTEDG0 007F8E                                           _DRUM_CC 00F5  
                                       ?___xxtofl 0060                                           _OCTAVES 004E  
              findArrayIndex@pitch_of_key_release 0061                              __end_of_Function_A_1 7278  
                int2string@number_to_display_temp 0064                              __end_of_Function_A_2 71A2  
                            __end_of_Function_A_3 70CC                              __end_of_Function_C_1 818C  
                            __end_of_Function_C_2 6380                              __end_of_Function_C_3 625A  
                            __end_of_Function_D_1 83B2                              __end_of_Function_D_2 8F44  
                            __end_of_Function_D_3 8908                              __end_of_Function_D_4 872A  
                            __end_of_Function_D_5 86B0                              __end_of_Function_E_1 91EE  
                            __end_of_Function_E_2 91A2                              __end_of_Function_G_1 7D80  
                            __end_of_Function_G_2 7CE0                              __end_of_Function_G_3 8FFE  
                            __end_of_Function_G_4 7EB6                              __end_of_Function_H_1 6FF6  
                            __end_of_Function_H_2 8D58                              __end_of_Function_H_3 9058  
                            __end_of_Function_H_4 7710                              __end_of_Function_H_5 79C0  
                            __end_of_Function_H_6 8BB0                              __end_of_Function_H_7 77BE  
                            __end_of_Function_H_8 8B42                              __end_of_Function_H_9 7F4C  
                        ?_setControllerResolution 0007                              __size_of_playSeventh 0192  
                 __end_of_initializeSaveSlotsOnce 9282                           ?_playDiatonicTriadMajor 0061  
                         ?_playDiatonicTriadMinor 0061                                        _drumCCMenu 015C  
                                  ??_playThisNote 0071               _arpeggiatorLastNoteModeKeyPressMenu 0111  
                               ??_printThisNumber 0062                               __size_of_Read_b_eep 001A  
                                doTheUnLatch@once 000A                                        _int2string 74DA  
                                 _ARPEGGIO_RANDOM 0268                                   Lcd_Print_Char@i 0064  
                           __end_of_un_block_code 9838                                        _dorian_key FD46  
                                      ??_Busy_eep 0060                                           _Lcd_Cmd 9746  
                          __end_of_Lcd_Print_Char 84BA                                        _drumNNMenu 015F  
                                       ?_exitLoad 0007                              __size_of_noteOffDrum 0034  
                                      _copy_array 8E22                                         ?_exitSave 0007  
                     ?_delete_notes_from_arpeggio 0007                                   _ARPEGGIO_SORTED 0278  
                             __size_of_Function_A 00CE                               __size_of_Function_B 007A  
                             __size_of_Function_C 0092                               __size_of_Function_D 0090  
                             __size_of_Function_E 006C                               __size_of_Function_F 0066  
                             __size_of_Function_G 0090                               __size_of_Function_H 00C0  
                                       ?_menu_lcd 0007                          _playDiatonicSeventhMajor 55A8  
                 ??_keyboard_eight_note_efficient 007A                          _playDiatonicSeventhMinor 4818  
                                         __Hparam 0000                                      _CONTROL_MODE 000C  
                       playDiatonicSeventhMajor@i 0066                                    _mixolydian_key FD19  
                                         __Lparam 0000                                 _potentiometer_raw 0369  
                           __end_of_setupArpeggio 89F0                                    _Function_H_6_1 7D80  
                                  _Function_H_6_2 786C                                    _Function_H_8_1 881C  
                                  _Function_H_8_2 8DBE                                    _Function_H_9_1 7BA0  
                                  _Function_H_9_2 7B00                                    _Function_H_9_3 7A60  
                                  _Function_H_9_4 79C0            __end_of_keyboard_sharps_only_efficient 4068  
         __size_of_keyboard_sharps_only_efficient 02AE                    _keyboard_sharps_only_efficient 3DBA  
                       playDiatonicSeventhMinor@i 0067                                           ___aldiv 7346  
                                         ___fladd 3200                                   _midiChannelMenu 0147  
                                         ___fldiv 3B04                                           ___awdiv 6002  
                                         ___flneg 9618                                   __size_of___lmul 00C6  
                                         ___awmod 67AE                                           ___lbmod 818C  
                                         ___flmul 2EAE                            __end_of_loadFromEEPROM 4CB0  
                                         ___fltol 6E42                                   __size_of___wmul 0028  
                               ??_processKeyboard 007C                              __end_of_exitFunction 9498  
                                 __CFG_STVREN$OFF 000000                                           _channel 003E  
                                         __pcinit 6AA0                                           __ramtop 0D00  
                                 ?_Lcd_Set_Cursor 0063                                        _ionian_key FD55  
                                 __size_of_noteOn 0072                                           _ema_sum 0240  
                               __end_of_major_key F387                                           __ptext0 69AC  
                                         __ptext1 988E                                           __ptext2 8908  
                                         __ptext3 978E                                           __ptext4 976C  
                                         __ptext5 6D64                                           __ptext6 9850  
                                         __ptext7 759E                                           __ptext8 7EB6  
                                         __ptext9 79C0                                           _command 01F7  
                              _NOTE_LENGTH_PULSES 004D                                           _display 9838  
                                 __size_of_strcpy 0032                                      __size_of_ISR 5406  
                             _initializeMenuArray 4CB0                                      __size_of_map 0106  
                                      ??___xxtofl 0064                            saveToEEPROM@slotNumber 00B1  
                            __end_of_panic_button 978E                                Function_H_6_1@temp 00C7  
                                         _sendUSB 6C80                                  ___aldiv@dividend 0060  
                  __end_of_playDiatonicTriadMajor 5A5C                                           _sendOut 6B92  
                  __end_of_playDiatonicTriadMinor 4818                                  rotateArrayLeft@i 0068  
                                         _noteOff 935A                                _GLOBAL_STATUS_BYTE 0181  
                                noteOffDrum@pitch 0060                               __end_of_Write_b_eep 93E4  
           _arpeggiatorLastNoteModeKeyReleaseMenu 010E                                  playTriad@triad_p 0065  
                               __end_of_seg_ascii F26B                           saveToEEPROM@baseAddress 00AF  
                        __end_ofascii@LCD_STRINGS F220              __size_of_keyboard_all_note_efficient 051A  
                               __end_of_minor_key F378                          __size_of_calculate_alpha 004A  
                 setControllerNumbers@array_index 006F                                         _DRUM_MODE 000D  
                                       _DRUM_NOTE 01E7                                    __pintcode_body 5264  
            __end_of_random_pitches_non_repeating 786C             __size_of_random_pitches_non_repeating 00AE  
                           __end_of_processOctave 384C                      _random_pitches_non_repeating 77BE  
                            end_of_initialization 6B88                                 __end_of_playTriad 5BE0  
                                     ?_doTheLatch 0007                                 __end_of_pitchBend 935A  
                                 ?_Lcd_Print_Char 0007                                        ??_exitLoad 006E  
                                   __Lmediumconst E8C2                              _light_decimal_points 0030  
                                         int_func 5264                                        ??_exitSave 006E  
                                      ??_menu_lcd 00CC                        __end_of_buttonInputsSerial 8636  
                                      _noteOnDrum 90B0                                    displayString@i 0008  
                          __end_of_mixolydian_key FD28                           __size_of_wait_one_pulse 002A  
                            ?_initializeMenuArray 0007                            __end_of_Function_H_6_1 7E1C  
                          __end_of_Function_H_6_2 7916                            __end_of_Function_H_8_1 8892  
                          __end_of_Function_H_8_2 8E22                            __end_of_Function_H_9_1 7C40  
                          __end_of_Function_H_9_2 7BA0                            __end_of_Function_H_9_3 7B00  
                          __end_of_Function_H_9_4 7A60                             _finish_arpeggio_setup 97CE  
                                       i2u6100_40 106E                                         i2u6111_40 10EA  
                                       i2u6104_40 108E                                         i2u6025_40 0A4C  
                                      _noteNumber 003C                                         i2u3725_40 64F8  
                                       i2u6047_40 0BC8                                         i2u6077_40 0E1E  
                                       i2u6069_40 0D54                                 ?_selectSlotOnBoot 0007  
                                       i2u3791_40 8564                                         i2u6087_40 0F2A  
                                       i2u3792_48 8566                                 pitchBend@highByte 0061  
                                      _lydian_key FD28                                         i2u5930_45 3940  
                                       i2u5931_45 3964                                         i2u6715_47 52FA  
                                       i2u5925_40 385C                                         i2u5933_45 3994  
                                       i2u5936_40 39DE                                         i2u6680_40 5352  
                                       i2u6682_40 5374                   __size_of_calculate_pulse_length 0166  
                                     ?_clear_row1 0007                                       ?_clear_row2 0007  
                                  _diatonic_major F310                                    _diatonic_minor F2E3  
                          __size_of_playThisNote8 0434                              _pentatonic_major_key F392  
                                  _joystickCCMenu 014A                                         _PRESCALER 01F5  
                                      _potsCCMenu 0150                                  ___aldiv@quotient 006A  
                              ??_selectSlotOnBoot 00CC                                           postdec0 000FED  
                                         postdec1 000FE5                                           postdec2 000FDD  
                                         postinc0 000FEE                                           postinc1 000FE6  
                                         postinc2 000FDE                           ??_processPotentiometers 0063  
                                 _drumChannelMenu 013E                                   ?_loadFromEEPROM 0007  
                             noteOffDrum@velocity 0061                                controlChange@value 0061  
                             _encoderInputsBuxton 853A                                      ??_Lcd_SetBit 0060  
                            _processEncoderBuxton 0014                             __end_of_programChange 92CA  
                               playThisNote@pitch 0075                    __size_of_add_notes_to_arpeggio 00FE  
                        ??_playThisNotePentatonic 0072                     __end_of_add_notes_to_arpeggio 69AC  
                                  _string2display 0192                                 _encoder_direction 0036  
                            _pentatonic_minor_key F387                                        _which_mode 00F1  
                                      _which_note 0033                                       ?_eepromExit 0007  
                                     ___fladd@grs 00B7                             __end_of_displayDigits 3B04  
                                   ___xxtofl@sign 0068                             loadFromEEPROM@to_load 0197  
                                     ___fldiv@grs 009A                                       ___fldiv@rem 0094  
                               __size_of_ADC_Read 0038                             __end_of_displayString 65A4  
                            ?_encoderInputsBuxton 0007                      playDiatonicTriadMinor@i_1720 0068  
                                 _TIMER_OVERFLOWS 002E                                      _dominant_7th 02D8  
                             __end_of_aeolian_key FD19                                        map@out_max 007E  
                                      map@out_min 007A                                       ?_int2string 0060  
                            _arpeggiatorLatchMenu 0126                                        _statusByte 003D  
                                     ___flmul@grs 007C                              _arpeggiatorOnOffMenu 0135  
                                     ?_copy_array 0007                                programChange@data1 0060  
                              programChange@data2 0061                        _potentiometer_filtered_now 0220  
                              __end_of_Lcd_SetBit 9678                             ??_initializeMenuArray 0066  
                     ?_key_press_release_note_off 0007                              __end_of_playArpeggio 1130  
                      _arpeggiatorUnLatchModeMenu 011D                            __end_of_diatonic_major F33D  
                                 ?_Function_H_6_1 0007                                   ?_Function_H_6_2 0007  
                                 ?_Function_H_8_1 0007                                   ?_Function_H_8_2 0007  
                                 ?_Function_H_9_1 0007                                   ?_Function_H_9_2 0007  
                                 ?_Function_H_9_3 0007                                   ?_Function_H_9_4 0007  
                          __end_of_diatonic_minor F310                              __end_of_saveToEEPROM 50A6  
                                _print_row_2_once 0027                                         _Lcd_Clear 9850  
           __end_of_keyboard_eight_note_efficient 2EAE            __size_of_keyboard_eight_note_efficient 0402  
                   _keyboard_eight_note_efficient 2AAC                                displayDigits@digit 00CC  
                     _calculate_pulse_length$5900 00C8                                     ??_displayTest 0066  
                                    ??_Read_b_eep 0062                                         _Lcd_Start 821A  
                           ?_processEncoderBuxton 0007                                    __end_of___lmul 74DA  
                                  __end_of___wmul 9746                                     __pidataCOMRAM 98A9  
                            __end_of_playThisNote 67AE                                      ??_Function_A 00C7  
                                    ??_Function_B 00C7                                      ??_Function_C 00C9  
                                    ??_Function_D 00C8                                      ??_Function_E 00C7  
                                    ??_Function_F 00C7                                      ??_Function_G 00CC  
                                    ??_Function_H 00CC                             __size_of_Function_A_1 00D6  
                           __size_of_Function_A_2 00D6                               __size_of_doTheLatch 0020  
                           __size_of_Function_A_3 00D6                             __size_of_Function_C_1 008E  
                           __size_of_Function_C_2 0126                             __size_of_Function_C_3 0126  
                           __size_of_Function_D_1 0084                             __size_of_Function_D_2 005E  
                           __size_of_Function_D_3 0076                             __size_of_Function_D_4 007A  
                           __size_of_Function_D_5 007A                             __size_of_Function_E_1 004C  
                           __size_of_Function_E_2 004C                             __size_of_Function_G_1 00A0  
                           __size_of_Function_G_2 00A0                             __size_of_Function_G_3 005C  
                           __size_of_Function_G_4 009A                             __size_of_Function_H_1 00D6  
                           __size_of_Function_H_2 0066                             __size_of_Function_H_3 005A  
                           __size_of_Function_H_4 00B2                             __size_of_Function_H_5 00AA  
                           __size_of_Function_H_6 006E                             __size_of_Function_H_7 00AE  
                           __size_of_Function_H_8 006E                             __size_of_Function_H_9 0096  
                                  _ADC_Initialize 987A                          __end_of_Lcd_Print_String 8436  
                        setControllerResolution@i 0060                                       _Write_b_eep 93A2  
                     playThisNotePentatonic@index 0071                                    __end_of_noteOn 8A62  
                                  _TRANSPOSE_MODE 0026                       playThisNotePentatonic@pitch 0007  
                                  _findArrayIndex 9422                                    __end_of_ttable F359  
                            _arpeggiatorTempoMenu 0132                   readPotentiometers@FIRST_READING 0008  
                                  __end_of_strcpy 9618                      __end_of_setControllerNumbers 2678  
                             start_initialization 6AA0                            _calculate_pulse_length 5D48  
                               _encoder_state_now 017F                                       __end_of_ISR 540E  
                                   _playThisNote8 2678                            __size_of_resetArpeggio 003E  
                                     __end_of_map 66AA                               __size_of_clear_row1 0028  
                             __size_of_clear_row2 0028                                wait_one_pulse@mode 0060  
                           ??_encoderInputsBuxton 0007                                 playSeventh@i_1693 0068  
                playThisNotePentatonic@temp_pitch 0076                                __end_of_Read_b_eep 9806  
                  __end_of_diatonic_seventh_major F2E3                            ?_finish_arpeggio_setup 0007  
                  __end_of_diatonic_seventh_minor F2A7                                       ?_noteOnDrum 0060  
                               Lcd_Print_String@a 0068                                 Lcd_Print_String@i 006C  
                                    _lastNoteMode 001B                                 ??_calculate_alpha 00A0  
                              __end_of_Function_A 7346                                __end_of_Function_B 87A4  
                              __end_of_Function_C 7FDE                                __end_of_Function_D 80FE  
                              __end_of_Function_E 8C1C                                __end_of_Function_F 8DBE  
                              __end_of_Function_G 806E                                __end_of_Function_H 765E  
                               __size_of_Busy_eep 0006                                _readPotentiometers 1130  
                             __size_of_eepromExit 003A                                     _ARPEGGIO_TYPE 0035  
                           __size_of_exitFunction 003A                                      _Function_A_1 71A2  
                                    _Function_A_2 70CC                                      _Function_A_3 6FF6  
                                    _Function_C_1 80FE                                      _Function_C_2 625A  
                                    _Function_C_3 6134                                      _Function_D_1 832E  
                                    _Function_D_2 8EE6                                      _Function_D_3 8892  
                                    _Function_D_4 86B0                                      _Function_D_5 8636  
                                    _Function_E_1 91A2                                      _Function_E_2 9156  
                                    _Function_G_1 7CE0                                      _Function_G_2 7C40  
                                    _Function_G_3 8FA2                                      _Function_G_4 7E1C  
                                    _Function_H_1 6F20                                      _Function_H_2 8CF2  
                                    _Function_H_3 8FFE                                      _Function_H_4 765E  
                                    _Function_H_5 7916                                      _Function_H_6 8B42  
                                    _Function_H_7 7710                                      _Function_H_8 8AD4  
                                    _Function_H_9 7EB6                                   _encoderPolarity 002B  
                                      ?_Lcd_Clear 0007                               displayString@letter 0100  
                                        ??___wmul 0064                                        ?_Lcd_Start 0007  
                          __end_of_ADC_Initialize 988E                           readPotentiometers@count 0260  
                             ?_readPotentiometers 0007                                       __pdataBANK0 00F5  
                                     __pdataBANK1 01E7                                       __pdataBANK2 0288  
                                     __pdataBANK3 0300                                  __CFG_LPT1OSC$OFF 000000  
                             __end_of_LCD_STRINGS FCFB                             __size_of_panic_button 0022  
                      Lcd_Print_Char@Lower_Nibble 0061                            __end_of_findArrayIndex 945E  
                             __size_of_int2string 00C4                               _encoderPolarityMenu 0138  
                           __end_of_controlChange 90B0                                          ??_strcpy 0064  
                 __size_of_playThisNotePentatonic 019A                                         ___fladd@a 00A8  
                                       ___fladd@b 00A4                               __size_of_copy_array 0062  
                                 _printThisNumber 9866                                     ?_sort_pitches 0007  
                                       ___fldiv@a 008B                                         ___fldiv@b 0087  
                                   _TIMER_PRELOAD 017B                               __end_of_displayTest 853A  
                         Function_D_3@array_index 00C7                           __size_of_processDrumpad 0506  
                                       ___flmul@a 0072                                         ___flmul@b 006E  
                                     __pbssCOMRAM 002A                                       _aeolian_key FD0A  
                                _button_state_now 00D8                        displayDigits@digit_counter 00E9  
                                  ?_playThisNote8 0071                                     __pcstackBANK0 0060  
                                   __pcstackBANK1 0197                                     __pcstackBANK2 02E5  
                          __size_of_digitalInputs 0052                        ??_playDiatonicSeventhMajor 0062  
                _arpeggiatorLastNoteModeResetMenu 0108                        ??_playDiatonicSeventhMinor 0062  
                               __size_of___xxtofl 0154                                     sort_pitches@a 0009  
                     displayString@letter_counter 00E8                                     sort_pitches@i 000B  
                                   sort_pitches@j 000A                              ??_readPotentiometers 00C2  
                          processPotentiometers@i 0068                                      _exitFunction 945E  
                                     _ARPEGGIO_ON 0024                                          ?_Lcd_Cmd 0007  
                                    _keyboardMenu 00E5                                   _processKeyboard 8C1C  
                                  _wait_one_pulse 96A4                                  printThisNumber@n 0060  
                        ?_initializeSaveSlotsOnce 0007                             _drum_button_state_now 0039  
                __size_of_setControllerResolution 002C                                 __size_of_exitLoad 003A  
                            __end_of_phrygian_key FD46                                 __size_of_exitSave 003A  
                             readPotentiometers@i 019C                                 __size_of_menu_lcd 00DE  
                                    _panic_button 976C                                     _resetArpeggio 93E4  
                                ??_Lcd_Set_Cursor 0064                                         _ema_alpha 0104  
                                   Function_H_5@i 00C8                                         __pintcode 0008  
                                   __pmediumconst E8C2                            ??_processEncoderBuxton 0060  
                                        ?___aldiv 0060                                          ?___fladd 00A4  
                                 _arpeggiatorMenu 00DF                                          ?___fldiv 0087  
                        __size_of_rotateArrayLeft 0078                                         __ptext100 85BA  
                                       __ptext101 98B2                                         __ptext110 6C80  
                                       __ptext102 98B8                                          ?___flneg 00A0  
                                       __ptext111 6B92                                         __ptext103 92CA  
                                       __ptext120 3200                                         __ptext112 818C  
                                       __ptext104 1130                                         __ptext121 9546  
                                       __ptext113 65A4                                         __ptext105 4068  
                                       __ptext130 98BE                                         __ptext122 96CE  
                                       __ptext114 7414                                         __ptext106 9312  
                                       __ptext131 97EC                                         __ptext123 96F6  
                                       __ptext115 7346                                         __ptext107 9058  
                                       __ptext132 4CB0                                         __ptext124 8E84  
                                       __ptext116 5EAE                                         __ptext108 5BE0  
                                       __ptext141 0A30                                         __ptext133 971E  
                                       __ptext125 83B2                                         __ptext117 6E42  
                                       __ptext109 935A                                         __ptext142 6380  
                                       __ptext134 84BA                                         __ptext126 8436  
                                       __ptext118 9618                                         __ptext143 853A  
                                       __ptext135 95E6                                         __ptext127 9238  
                                       __ptext119 2EAE                                         __ptext144 9838  
                                       __ptext136 821A                                         __ptext128 4EB2  
                                       __ptext145 6498                                         __ptext137 9746  
                                       __ptext129 93A2                                         __ptext146 384C  
                                       __ptext138 9648                                         __ptext139 987A  
                                        ?___flmul 006E                                          ?___fltol 00B8  
                                 ?_ADC_Initialize 0007                                        playTriad@i 0067  
                                     _ARRAY_INDEX 00EB              _arpeggiatorLastNoteModeTransposeMenu 010B  
                                  _diminished_7th 02C8                                   ?_findArrayIndex 0007  
                                     _ema_integer 00FE                                    ??_sort_pitches 0007  
                                        ?_display 0007                                     ??_playSeventh 0061  
                  playDiatonicSeventhMajor@i_1715 0067                               __size_of_noteOnDrum 0054  
                                       _count_ISR 0264                     controlChange@controllerNumber 0060  
                        encoderInputsBuxton@tempA 000A                          encoderInputsBuxton@tempB 000B  
                         Function_D_4@array_index 00C7                                         _major_7th 02D4  
                                 playTriad@i_1688 0068                                          _ADC_Read 9546  
                                       _major_key F378                                         _last_note 00EC  
                                ??_Lcd_Print_Char 0061                                         _menuArray 0300  
                                    _patch_number 00F3                                    __size_of_clock 0006  
                                    playSeventh@i 0067                                          _ARPEGGIO 0182  
                           __size_of_playArpeggio 0700                                     ??_noteOffDrum 0062  
                                  __size_of_setup 0074                                    __size_of_srand 0010  
                                    ??_doTheLatch 0066                            __end_of_wait_one_pulse 96CE  
                           __size_of_saveToEEPROM 01F4                                         _minor_7th 02D0  
                                 ___aldiv@divisor 0064                                noteOffDrum@channel 0062  
                                       _seg_ascii F220                                   ___aldiv@counter 0068  
                          _playThisNotePentatonic 540E                                         _minor_key F369  
                                  ___wmul@product 0064                                         _playTriad 5A5C  
                            int2string@isNegative 0009                                         _pitchBend 9312  
                                ??_loadFromEEPROM 00CC                                  pitchBend@channel 0062  
                                       _savesMenu 00E2                                       _arpeggioPtr 002A  
                                  ?_resetArpeggio 0007                                     _digitalInputs 9104  
                                        Lcd_Cmd@a 0062                                      ??_clear_row1 006E  
                                    ??_clear_row2 006E                              _setControllerNumbers 2182  
                                     _LCD_STRINGS F39E                             __size_of_playThisNote 0104  
                                        _GO_nDONE 007E11               __end_of_keyboard_all_note_efficient 1C7C  
                     _keyboard_all_note_efficient 1762                                       ??_Lcd_Clear 0063  
                                __CFG_WDTPS$32768 000000        initializeSaveSlotsOnce@initializeSlotsOnce 00B4  
                                        _HYST_VAL 01F3                                  _diminished_triad 02DC  
                         __end_of_printThisNumber 987A                                       ??_Lcd_Start 0063  
                                pitchBend@lowByte 0060                                       _displayTest 84BA  
                             __end_of_locrian_key FD0A                                          _POT_MODE 002E  
                             __end_of_seg_bcd_hex F369                    key_press_release_note_off@temp 002C  
                  __size_of_processPotentiometers 02A8                                _buttonInputsSerial 85BA  
                   __end_of_processPotentiometers 4310                                         map@in_max 0076  
                                       map@in_min 0072                                         _triadMenu 016E  
                        buttonInputsSerial@i_4472 0065                                __end_of_doTheLatch 97CE  
                               ___wmul@multiplier 0060                                     _skipFirstLast 001C  
                          __size_of_un_block_code 0018                                   ??_playThisNote8 0072  
                                    _playArpeggio 0A30                                   Write_b_eep@badd 0060  
                                 Write_b_eep@bdat 0062                                      ??_eepromExit 006E  
                    _arpeggiatorSkipFirstLastMenu 0114                         __size_of_selectSlotOnBoot 0020  
                    _arpeggiatorRandomizeSkipMenu 011A                           Function_D_5@array_index 00C7  
                             ?_buttonInputsSerial 0007                                      _saveToEEPROM 4EB2  
                         __end_of_processKeyboard 8C88                            __size_of_setupArpeggio 0074  
                               _string_to_display 01F8                                __end_of_clear_row1 971E  
                              __end_of_clear_row2 96F6                               __end_of_playSeventh 58CC  
                                       copy_data0 6AB4                                         copy_data1 6AD4  
                                       copy_data2 6AF4                                         copy_data3 6B14  
                                       copy_data4 6B34                                  ??_Function_H_6_1 00C7  
                                ??_Function_H_6_2 00C7                                  ??_Function_H_8_1 00C7  
                                ??_Function_H_8_2 00C7                                  ??_Function_H_9_1 00C7  
                                ??_Function_H_9_2 00C7                                  ??_Function_H_9_3 00C7  
                                ??_Function_H_9_4 00C7               displayDigits@number_to_display_last 0179  
                    _arpeggiatorRandomizeTypeMenu 0117                                      ??_int2string 0062  
                                 ?_wait_one_pulse 0007               displayDigits@number_to_display_temp 0177  
                                    _playThisNote 66AA                                          _Busy_eep 98BE  
                                    ??_copy_array 0060                             __end_of_MAX_NUM_NOTES F39E  
                               _NUM_NOTES_PRESSED 002F                           __size_of_random_pitches 0072  
                                   ?_doTheUnLatch 0007                                  __size_of_Lcd_Cmd 0026  
                                      ?_playTriad 0007                                        _EECON1bits 000FA6  
                                      ?_pitchBend 0060                               __end_of_noteOffDrum 95E6  
                                 _octave_overflow 0012                                    ?_digitalInputs 0007  
                            ??_buttonInputsSerial 0060                                       _major_triad 01FD  
                                        __Hrparam 0000                             ?_setControllerNumbers 0007  
                             _arpeggiatorTypeMenu 012C                                          __Lrparam 0000  
                                 _augmented_triad 02DF                                __end_of_eepromExit 9546  
                                      _DIGIT_MODE 003A                                  __size_of___aldiv 00CE  
                                __size_of___fladd 033E                                  __size_of___fldiv 02B6  
                                __size_of___awdiv 0132                                  __size_of___flneg 0030  
                                     _last_octave 017D                                  __size_of___awmod 0100  
                                __size_of___lbmod 008E                                  __size_of___flmul 0352  
                                __size_of___fltol 00DE                                       _drumchannel 0052  
                          __size_of_processOctave 030E                              playSeventh@seventh_p 0065  
                                    ?_Write_b_eep 0060                           ?_calculate_pulse_length 00C2  
                               ?_Lcd_Print_String 0068                                __end_of_int2string 759E  
                               ??_rotateArrayLeft 0060                                __end_of_dorian_key FD55  
                                  _processDrumpad 1C7C                                  __size_of_display 0018  
                              __end_of_copy_array 8E84                                          ___xxtofl 5EAE  
                           _add_notes_to_arpeggio 68AE                                ??_Lcd_Print_String 006A  
                                   ?_analogInputs 0007                                   _mainChannelMenu 0141  
                __end_of_playDiatonicSeventhMajor 573A                  __end_of_playDiatonicSeventhMinor 4A78  
                                __size_of_sendUSB 00E4                                   _calculate_alpha 91EE  
                                __size_of_sendOut 00EE                                  __size_of_noteOff 0048  
                                        __ptext10 7A60                                          __ptext11 7B00  
                                        __ptext20 7916                                          __ptext12 7BA0  
                                        __ptext21 765E                                          __ptext13 8AD4  
                                        __ptext30 4A78                                          __ptext22 8FFE  
                                        __ptext14 8DBE                                          __ptext31 5D48  
                                        __ptext23 8CF2                                          __ptext15 881C  
                                        __ptext40 91A2                                          __ptext32 9498  
                                        __ptext24 6F20                                          __ptext16 7710  
                                        __ptext41 806E                                          __ptext33 7CE0  
                                        __ptext25 7FDE                                          __ptext17 8B42  
                                        __ptext50 9678                                          __ptext42 8636  
                                        __ptext34 94D2                                          __ptext26 7E1C  
                                        __ptext18 786C                                          __ptext51 7F4C  
                                        __ptext43 86B0                                          __ptext35 950C  
                                        __ptext27 945E                                          __ptext19 7D80  
                                        __ptext60 70CC                                          __ptext52 6134  
                                        __ptext44 8892                                          __ptext36 8D58  
                                        __ptext28 8FA2                                          __ptext61 71A2  
                                        __ptext53 625A                                          __ptext45 2182  
                                        __ptext37 9282                                          __ptext29 7C40  
                                        __ptext70 540E                                          __ptext62 9820  
                                        __ptext54 74DA                                          __ptext46 8EE6  
                                        __ptext38 8BB0                                          __ptext71 2AAC  
                                        __ptext63 0014                                          __ptext55 6002  
                                        __ptext47 91EE                                          __ptext39 9156  
                                        __ptext80 573A                                          __ptext72 2678  
                                        __ptext64 9104                                          __ptext56 80FE  
                                        __ptext48 3B04                                          __ptext81 89F0  
                                        __ptext73 45B6                                          __ptext65 353E  
                                        __ptext57 872A                                          __ptext49 832E  
                                        __ptext90 957E                                          __ptext82 97CE  
                                        __ptext74 58CC                                          __ptext66 50A6  
                                        __ptext58 7278                                          __ptext91 9422  
                                        __ptext83 897C                                          __ptext75 4818  
                                        __ptext67 97AE                                          __ptext59 6FF6  
                                        __ptext92 68AE                                          __ptext84 77BE  
                                        __ptext76 55A8                                          __ptext68 8C1C  
                                        __ptext93 87A4                                          __ptext85 8A62  
                                        __ptext77 1762                                          __ptext69 3DBA  
                                        __ptext94 1C7C                                          __ptext86 82A6  
                                        __ptext78 66AA                                          __ptext95 90B0  
                                        __ptext87 67AE                                          __ptext79 5A5C  
                                        __ptext96 95B2                                          __ptext88 8E22  
                                        __ptext97 4310                                          __ptext89 93E4  
                                        __ptext98 96A4                                          __ptext99 9866  
                     __end_of_initializeMenuArray 4EB2                                          _encoderA 002D  
                                        _encoderB 002C                           ??_finish_arpeggio_setup 0061  
                                        _mainMenu 0174                      processPotentiometers@lowByte 0066  
                             _DISPLAY_STEP_NUMBER 000E                                        strcpy@from 0062  
                                        _drumMenu 0165                                    ??_doTheUnLatch 007A  
                          __size_of_programChange 0048                                          _exitLoad 9498  
                                        _keyboard 00D0                                     __size_of_main 00F4  
                                        _exitSave 94D2                                 _startingDirection 0034  
                                        _modeMenu 0171                                     __size_of_load 0006  
                                   __size_of_rand 0088                                     _un_block_code 9820  
                                    ??_noteOnDrum 0062                     playDiatonicSeventhMajor@index 0061  
                                        _menu_lcd 6D64                                          _parallel 0030  
                                 ??_resetArpeggio 0060                     playDiatonicSeventhMajor@pitch 0068  
                         _setControllerResolution 9678                              __end_of_sort_pitches 6498  
                                  playTriad@pitch 0069                                __end_of_ionian_key FD64  
                  playDiatonicSeventhMinor@i_1725 0068                                       _locrian_key FCFB  
                                     _seg_bcd_hex F359                                          _semitone 003B  
                          __size_of_displayDigits 02B8                                        _AUTO_LATCH 001F  
                                   _potsAlphaMenu 0153                                     _setupArpeggio 897C  
                             playThisNote8@mode_p 0078                                          _potsMenu 0159  
                                        _velocity 0051                                          _overflow 0013  
                                ?_printThisNumber 0060                        Lcd_Print_Char@Upper_Nibble 0062  
                  __end_of_calculate_pulse_length 5EAE                                       _minor_triad 02E2  
                          __size_of_displayString 010C                          ??_playDiatonicTriadMajor 0062  
                        ??_playDiatonicTriadMinor 0062                                 _note_off_was_sent 0011  
                     playDiatonicTriadMajor@index 0061                            __end_of_processDrumpad 2182  
                     playDiatonicTriadMajor@pitch 0068                              controlChange@channel 0062  
                     __end_of_encoderInputsBuxton 85BA                                    ??_analogInputs 019E  
                                     _playSeventh 573A                                        _INTCONbits 000FF2  
                              __end_of_noteOnDrum 9104                                      _phrygian_key FD37  
                                ?_processKeyboard 0007                                     _encoder_click 002A  
                              __end_of_lydian_key FD37                                 _keyboardTranspose 4310  
                                     _noteOffDrum 95B2                                          intlevel2 0000  
                              ?_keyboardTranspose 0007                                     _processOctave 353E  
                                  ?_un_block_code 0007                                    _AUTO_RANDOMIZE 001D  
                                 ??_digitalInputs 0080                   delete_notes_from_arpeggio@pitch 0069  
                                     ??_playTriad 0061                            ??_setControllerNumbers 006E  
                                     ??_pitchBend 0062                                    _SORT_DIRECTION 0025  
                                  _iterator_focus 00FD                                  int2string@number 0060  
             initializeMenuArray@NumberOfElements 0067                                  ??_ADC_Initialize 0060  
                             ??_keyboardTranspose 0062                          _NOTE_LENGTH_PULSES_ARRAY 02B8  
                                  ?_setupArpeggio 0007                                     _which_seventh 00EF  
                                ??_findArrayIndex 0060                                playThisNote8@index 0071  
                                  _lcd_print_once 0028                                playThisNote8@pitch 0076  
                   playDiatonicSeventhMinor@index 0061                     playDiatonicSeventhMinor@pitch 0066  
             keyboard_sharps_only_efficient@index 0078                                    _finishLastNote 0016  
                              Lcd_Set_Cursor@temp 0067               keyboard_sharps_only_efficient@pitch 0077  
                        loadFromEEPROM@byte_count 01E5                                     _programChange 9282  
                                      Lcd_Start@i 0064                           __end_of_calculate_alpha 9238  
                                 ?_processDrumpad 0007                  __size_of_initializeSaveSlotsOnce 004A  
                                  _inputPotsArray 0288                            ?_add_notes_to_arpeggio 0007  
                                _selectSlotOnBoot 978E                                       _seventhMenu 016B  
                                        strcpy@cp 0064                                          strcpy@to 0060  
                               noteOnDrum@channel 0062                                      _which_octave 0032  
                       __end_of_keyboardTranspose 45B6                                      _which_screen 004F  
                                    ___aldiv@sign 0069                                      _potsResoMenu 0156  
                                   _displayDigits 384C                       playDiatonicTriadMinor@index 0061  
                              noteOnDrum@velocity 0061                       playDiatonicTriadMinor@pitch 0066  
             __size_of_delete_notes_from_arpeggio 0034                                     ___fladd@signs 00B4  
                         ?_playThisNotePentatonic 0071                                    ?_processOctave 0007  
                     __size_of_readPotentiometers 0632                                     _displayString 6498  
                       ??_setControllerResolution 0060                                       _which_triad 00F0  
                                   _KEYBOARD_MODE 00F2                                      ___fladd@aexp 00B5  
                                    ___fladd@bexp 00B6                                    _random_pitches 8A62  
                                    _toggle_state 002D                            __size_of_controlChange 0058  
               __size_of_playDiatonicSeventhMajor 0192                 __size_of_playDiatonicSeventhMinor 0260  
                       ?_playDiatonicSeventhMajor 0061  
